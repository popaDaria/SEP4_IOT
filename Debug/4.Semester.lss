
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005d8  00800200  0000632e  000063c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000632e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e30  008007d8  008007d8  0000699a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000699a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000069f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000af0  00000000  00000000  00006a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dd08  00000000  00000000  00007528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003730  00000000  00000000  00015230  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006c96  00000000  00000000  00018960  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002628  00000000  00000000  0001f5f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004608  00000000  00000000  00021c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bd94  00000000  00000000  00026228  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a18  00000000  00000000  00031fbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	18 c4       	rjmp	.+2096   	; 0x862 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 db 23 	jmp	0x47b6	; 0x47b6 <__vector_25>
      68:	0c 94 2d 24 	jmp	0x485a	; 0x485a <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__vector_36>
      94:	0c 94 c3 24 	jmp	0x4986	; 0x4986 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 24 2a 	jmp	0x5448	; 0x5448 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 07 25 	jmp	0x4a0e	; 0x4a0e <__vector_51>
      d0:	0c 94 59 25 	jmp	0x4ab2	; 0x4ab2 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 9d 25 	jmp	0x4b3a	; 0x4b3a <__vector_54>
      dc:	0c 94 ef 25 	jmp	0x4bde	; 0x4bde <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	94 18       	sub	r9, r4
      e6:	94 18       	sub	r9, r4
      e8:	94 18       	sub	r9, r4
      ea:	cb 18       	sub	r12, r11
      ec:	d3 18       	sub	r13, r3
      ee:	e8 18       	sub	r14, r8
      f0:	94 18       	sub	r9, r4
      f2:	94 18       	sub	r9, r4
      f4:	cb 18       	sub	r12, r11
      f6:	d3 18       	sub	r13, r3
      f8:	46 2a       	or	r4, r22
      fa:	b6 2a       	or	r11, r22
      fc:	b6 2a       	or	r11, r22
      fe:	b6 2a       	or	r11, r22
     100:	b6 2a       	or	r11, r22
     102:	b6 2a       	or	r11, r22
     104:	b6 2a       	or	r11, r22
     106:	b6 2a       	or	r11, r22
     108:	46 2a       	or	r4, r22
     10a:	b6 2a       	or	r11, r22
     10c:	b6 2a       	or	r11, r22
     10e:	b6 2a       	or	r11, r22
     110:	b6 2a       	or	r11, r22
     112:	b6 2a       	or	r11, r22
     114:	b6 2a       	or	r11, r22
     116:	b6 2a       	or	r11, r22
     118:	48 2a       	or	r4, r24
     11a:	b6 2a       	or	r11, r22
     11c:	b6 2a       	or	r11, r22
     11e:	b6 2a       	or	r11, r22
     120:	b6 2a       	or	r11, r22
     122:	b6 2a       	or	r11, r22
     124:	b6 2a       	or	r11, r22
     126:	b6 2a       	or	r11, r22
     128:	b6 2a       	or	r11, r22
     12a:	b6 2a       	or	r11, r22
     12c:	b6 2a       	or	r11, r22
     12e:	b6 2a       	or	r11, r22
     130:	b6 2a       	or	r11, r22
     132:	b6 2a       	or	r11, r22
     134:	b6 2a       	or	r11, r22
     136:	b6 2a       	or	r11, r22
     138:	48 2a       	or	r4, r24
     13a:	b6 2a       	or	r11, r22
     13c:	b6 2a       	or	r11, r22
     13e:	b6 2a       	or	r11, r22
     140:	b6 2a       	or	r11, r22
     142:	b6 2a       	or	r11, r22
     144:	b6 2a       	or	r11, r22
     146:	b6 2a       	or	r11, r22
     148:	b6 2a       	or	r11, r22
     14a:	b6 2a       	or	r11, r22
     14c:	b6 2a       	or	r11, r22
     14e:	b6 2a       	or	r11, r22
     150:	b6 2a       	or	r11, r22
     152:	b6 2a       	or	r11, r22
     154:	b6 2a       	or	r11, r22
     156:	b6 2a       	or	r11, r22
     158:	b2 2a       	or	r11, r18
     15a:	b6 2a       	or	r11, r22
     15c:	b6 2a       	or	r11, r22
     15e:	b6 2a       	or	r11, r22
     160:	b6 2a       	or	r11, r22
     162:	b6 2a       	or	r11, r22
     164:	b6 2a       	or	r11, r22
     166:	b6 2a       	or	r11, r22
     168:	7d 2a       	or	r7, r29
     16a:	b6 2a       	or	r11, r22
     16c:	b6 2a       	or	r11, r22
     16e:	b6 2a       	or	r11, r22
     170:	b6 2a       	or	r11, r22
     172:	b6 2a       	or	r11, r22
     174:	b6 2a       	or	r11, r22
     176:	b6 2a       	or	r11, r22
     178:	b6 2a       	or	r11, r22
     17a:	b6 2a       	or	r11, r22
     17c:	b6 2a       	or	r11, r22
     17e:	b6 2a       	or	r11, r22
     180:	b6 2a       	or	r11, r22
     182:	b6 2a       	or	r11, r22
     184:	b6 2a       	or	r11, r22
     186:	b6 2a       	or	r11, r22
     188:	71 2a       	or	r7, r17
     18a:	b6 2a       	or	r11, r22
     18c:	b6 2a       	or	r11, r22
     18e:	b6 2a       	or	r11, r22
     190:	b6 2a       	or	r11, r22
     192:	b6 2a       	or	r11, r22
     194:	b6 2a       	or	r11, r22
     196:	b6 2a       	or	r11, r22
     198:	95 2a       	or	r9, r21

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 49 0c 	call	0x1892	; 0x1892 <prvCheckTasksWaitingTermination>
     19e:	80 91 f1 13 	lds	r24, 0x13F1	; 0x8013f1 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	97 d2       	rcall	.+1326   	; 0x6d6 <vPortYield>
     1a8:	0e 94 11 19 	call	0x3222	; 0x3222 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 11 16 	call	0x2c22	; 0x2c22 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 06 18 	call	0x300c	; 0x300c <prvProcessTimerOrBlockTask>
     1c6:	0e 94 5d 18 	call	0x30ba	; 0x30ba <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	17 e0       	ldi	r17, 0x07	; 7
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ee e2       	ldi	r30, 0x2E	; 46
     1e4:	f3 e6       	ldi	r31, 0x63	; 99
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a8 3d       	cpi	r26, 0xD8	; 216
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	26 e1       	ldi	r18, 0x16	; 22
     1f8:	a8 ed       	ldi	r26, 0xD8	; 216
     1fa:	b7 e0       	ldi	r27, 0x07	; 7
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a8 30       	cpi	r26, 0x08	; 8
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <main>
     20a:	0c 94 95 31 	jmp	0x632a	; 0x632a <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <co2Task>:
#include "mh_z19.h"

void co2Task(void *pvParameters){
	(void)pvParameters;
	while(1){
		vTaskDelay(50);
     210:	62 e3       	ldi	r22, 0x32	; 50
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vTaskDelay>
		int statusCode = mh_z19_takeMeassuring();
     21c:	0e 94 33 22 	call	0x4466	; 0x4466 <mh_z19_takeMeassuring>
		if(statusCode!=MHZ19_OK){
     220:	88 23       	and	r24, r24
     222:	61 f0       	breq	.+24     	; 0x23c <co2Task+0x2c>
			printf("CO2 measuring error %d\n",statusCode);
     224:	1f 92       	push	r1
     226:	8f 93       	push	r24
     228:	8f e6       	ldi	r24, 0x6F	; 111
     22a:	92 e0       	ldi	r25, 0x02	; 2
     22c:	9f 93       	push	r25
     22e:	8f 93       	push	r24
     230:	0e 94 77 2e 	call	0x5cee	; 0x5cee <printf>
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
		}
		vTaskDelay(9900);
     23c:	6c ea       	ldi	r22, 0xAC	; 172
     23e:	76 e2       	ldi	r23, 0x26	; 38
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vTaskDelay>
	}
     248:	e3 cf       	rjmp	.-58     	; 0x210 <co2Task>

0000024a <co2Callback>:
}
void co2Callback(uint16_t ppm){
     24a:	0f 93       	push	r16
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	ec 01       	movw	r28, r24
	xSemaphoreTake(hardware_semaphore,portMAX_DELAY);
     252:	4f ef       	ldi	r20, 0xFF	; 255
     254:	5f ef       	ldi	r21, 0xFF	; 255
     256:	ba 01       	movw	r22, r20
     258:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <hardware_semaphore>
     25c:	90 91 fd 15 	lds	r25, 0x15FD	; 0x8015fd <hardware_semaphore+0x1>
     260:	cc d5       	rcall	.+2968   	; 0xdfa <xQueueSemaphoreTake>
	entry_data.co2=ppm;
     262:	d0 93 f1 15 	sts	0x15F1, r29	; 0x8015f1 <entry_data+0x5>
     266:	c0 93 f0 15 	sts	0x15F0, r28	; 0x8015f0 <entry_data+0x4>
	//printf("CO2 VALUE : %d ", entry_data.co2);
	xSemaphoreGive(hardware_semaphore);
     26a:	00 e0       	ldi	r16, 0x00	; 0
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	a9 01       	movw	r20, r18
     272:	60 e0       	ldi	r22, 0x00	; 0
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <hardware_semaphore>
     27a:	90 91 fd 15 	lds	r25, 0x15FD	; 0x8015fd <hardware_semaphore+0x1>
     27e:	43 d4       	rcall	.+2182   	; 0xb06 <xQueueGenericSend>
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	0f 91       	pop	r16
     286:	08 95       	ret

00000288 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     288:	e4 ee       	ldi	r30, 0xE4	; 228
     28a:	f7 e0       	ldi	r31, 0x07	; 7
     28c:	a8 ee       	ldi	r26, 0xE8	; 232
     28e:	b7 e0       	ldi	r27, 0x07	; 7
     290:	b1 83       	std	Z+1, r27	; 0x01
     292:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     294:	13 82       	std	Z+3, r1	; 0x03
     296:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     298:	ec e9       	ldi	r30, 0x9C	; 156
     29a:	f3 e1       	ldi	r31, 0x13	; 19
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     29c:	f0 93 e3 07 	sts	0x07E3, r31	; 0x8007e3 <pxEnd+0x1>
     2a0:	e0 93 e2 07 	sts	0x07E2, r30	; 0x8007e2 <pxEnd>
    pxEnd->xBlockSize = 0;
     2a4:	13 82       	std	Z+3, r1	; 0x03
     2a6:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     2a8:	11 82       	std	Z+1, r1	; 0x01
     2aa:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     2ac:	84 eb       	ldi	r24, 0xB4	; 180
     2ae:	9b e0       	ldi	r25, 0x0B	; 11
     2b0:	13 96       	adiw	r26, 0x03	; 3
     2b2:	9c 93       	st	X, r25
     2b4:	8e 93       	st	-X, r24
     2b6:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     2b8:	ed 93       	st	X+, r30
     2ba:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     2bc:	90 93 df 07 	sts	0x07DF, r25	; 0x8007df <xMinimumEverFreeBytesRemaining+0x1>
     2c0:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     2c4:	90 93 e1 07 	sts	0x07E1, r25	; 0x8007e1 <xFreeBytesRemaining+0x1>
     2c8:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	90 e8       	ldi	r25, 0x80	; 128
     2d0:	90 93 d9 07 	sts	0x07D9, r25	; 0x8007d9 <__data_end+0x1>
     2d4:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <__data_end>
     2d8:	08 95       	ret

000002da <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     2e0:	a4 ee       	ldi	r26, 0xE4	; 228
     2e2:	b7 e0       	ldi	r27, 0x07	; 7
     2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <prvInsertBlockIntoFreeList+0xe>
     2e6:	df 01       	movw	r26, r30
     2e8:	ed 91       	ld	r30, X+
     2ea:	fc 91       	ld	r31, X
     2ec:	11 97       	sbiw	r26, 0x01	; 1
     2ee:	ec 17       	cp	r30, r28
     2f0:	fd 07       	cpc	r31, r29
     2f2:	c8 f3       	brcs	.-14     	; 0x2e6 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     2f4:	12 96       	adiw	r26, 0x02	; 2
     2f6:	8d 91       	ld	r24, X+
     2f8:	9c 91       	ld	r25, X
     2fa:	13 97       	sbiw	r26, 0x03	; 3
     2fc:	9d 01       	movw	r18, r26
     2fe:	28 0f       	add	r18, r24
     300:	39 1f       	adc	r19, r25
     302:	c2 17       	cp	r28, r18
     304:	d3 07       	cpc	r29, r19
     306:	49 f4       	brne	.+18     	; 0x31a <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     308:	2a 81       	ldd	r18, Y+2	; 0x02
     30a:	3b 81       	ldd	r19, Y+3	; 0x03
     30c:	82 0f       	add	r24, r18
     30e:	93 1f       	adc	r25, r19
     310:	13 96       	adiw	r26, 0x03	; 3
     312:	9c 93       	st	X, r25
     314:	8e 93       	st	-X, r24
     316:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     318:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     31a:	8a 81       	ldd	r24, Y+2	; 0x02
     31c:	9b 81       	ldd	r25, Y+3	; 0x03
     31e:	9e 01       	movw	r18, r28
     320:	28 0f       	add	r18, r24
     322:	39 1f       	adc	r19, r25
     324:	e2 17       	cp	r30, r18
     326:	f3 07       	cpc	r31, r19
     328:	c1 f4       	brne	.+48     	; 0x35a <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     32a:	20 91 e2 07 	lds	r18, 0x07E2	; 0x8007e2 <pxEnd>
     32e:	30 91 e3 07 	lds	r19, 0x07E3	; 0x8007e3 <pxEnd+0x1>
     332:	e2 17       	cp	r30, r18
     334:	f3 07       	cpc	r31, r19
     336:	71 f0       	breq	.+28     	; 0x354 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     338:	22 81       	ldd	r18, Z+2	; 0x02
     33a:	33 81       	ldd	r19, Z+3	; 0x03
     33c:	82 0f       	add	r24, r18
     33e:	93 1f       	adc	r25, r19
     340:	9b 83       	std	Y+3, r25	; 0x03
     342:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     344:	ed 91       	ld	r30, X+
     346:	fc 91       	ld	r31, X
     348:	11 97       	sbiw	r26, 0x01	; 1
     34a:	80 81       	ld	r24, Z
     34c:	91 81       	ldd	r25, Z+1	; 0x01
     34e:	99 83       	std	Y+1, r25	; 0x01
     350:	88 83       	st	Y, r24
     352:	05 c0       	rjmp	.+10     	; 0x35e <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     354:	39 83       	std	Y+1, r19	; 0x01
     356:	28 83       	st	Y, r18
     358:	02 c0       	rjmp	.+4      	; 0x35e <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     35a:	f9 83       	std	Y+1, r31	; 0x01
     35c:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     35e:	ca 17       	cp	r28, r26
     360:	db 07       	cpc	r29, r27
     362:	11 f0       	breq	.+4      	; 0x368 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     364:	cd 93       	st	X+, r28
     366:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     36e:	ef 92       	push	r14
     370:	ff 92       	push	r15
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     37c:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     380:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <pxEnd>
     384:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <pxEnd+0x1>
     388:	89 2b       	or	r24, r25
     38a:	09 f4       	brne	.+2      	; 0x38e <pvPortMalloc+0x20>
        {
            prvHeapInit();
     38c:	7d df       	rcall	.-262    	; 0x288 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     38e:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <__data_end>
     392:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <__data_end+0x1>
     396:	80 23       	and	r24, r16
     398:	91 23       	and	r25, r17
     39a:	89 2b       	or	r24, r25
     39c:	09 f0       	breq	.+2      	; 0x3a0 <pvPortMalloc+0x32>
     39e:	76 c0       	rjmp	.+236    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     3a0:	01 15       	cp	r16, r1
     3a2:	11 05       	cpc	r17, r1
     3a4:	49 f0       	breq	.+18     	; 0x3b8 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     3a6:	c8 01       	movw	r24, r16
     3a8:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     3aa:	08 17       	cp	r16, r24
     3ac:	19 07       	cpc	r17, r25
     3ae:	18 f0       	brcs	.+6      	; 0x3b6 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     3b0:	00 e0       	ldi	r16, 0x00	; 0
     3b2:	10 e0       	ldi	r17, 0x00	; 0
     3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     3b6:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     3b8:	01 15       	cp	r16, r1
     3ba:	11 05       	cpc	r17, r1
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <pvPortMalloc+0x52>
     3be:	69 c0       	rjmp	.+210    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     3c0:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <xFreeBytesRemaining>
     3c4:	90 91 e1 07 	lds	r25, 0x07E1	; 0x8007e1 <xFreeBytesRemaining+0x1>
     3c8:	80 17       	cp	r24, r16
     3ca:	91 07       	cpc	r25, r17
     3cc:	08 f4       	brcc	.+2      	; 0x3d0 <pvPortMalloc+0x62>
     3ce:	64 c0       	rjmp	.+200    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     3d0:	c0 91 e4 07 	lds	r28, 0x07E4	; 0x8007e4 <xStart>
     3d4:	d0 91 e5 07 	lds	r29, 0x07E5	; 0x8007e5 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     3d8:	e4 ee       	ldi	r30, 0xE4	; 228
     3da:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     3de:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     3e0:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     3e2:	8a 81       	ldd	r24, Y+2	; 0x02
     3e4:	9b 81       	ldd	r25, Y+3	; 0x03
     3e6:	80 17       	cp	r24, r16
     3e8:	91 07       	cpc	r25, r17
     3ea:	20 f4       	brcc	.+8      	; 0x3f4 <pvPortMalloc+0x86>
     3ec:	88 81       	ld	r24, Y
     3ee:	99 81       	ldd	r25, Y+1	; 0x01
     3f0:	00 97       	sbiw	r24, 0x00	; 0
     3f2:	a9 f7       	brne	.-22     	; 0x3de <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     3f4:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <pxEnd>
     3f8:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <pxEnd+0x1>
     3fc:	c8 17       	cp	r28, r24
     3fe:	d9 07       	cpc	r29, r25
     400:	09 f4       	brne	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     402:	4d c0       	rjmp	.+154    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     404:	e0 80       	ld	r14, Z
     406:	f1 80       	ldd	r15, Z+1	; 0x01
     408:	84 e0       	ldi	r24, 0x04	; 4
     40a:	e8 0e       	add	r14, r24
     40c:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     40e:	88 81       	ld	r24, Y
     410:	99 81       	ldd	r25, Y+1	; 0x01
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     416:	2a 81       	ldd	r18, Y+2	; 0x02
     418:	3b 81       	ldd	r19, Y+3	; 0x03
     41a:	20 1b       	sub	r18, r16
     41c:	31 0b       	sbc	r19, r17
     41e:	29 30       	cpi	r18, 0x09	; 9
     420:	31 05       	cpc	r19, r1
     422:	48 f0       	brcs	.+18     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     424:	ce 01       	movw	r24, r28
     426:	80 0f       	add	r24, r16
     428:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     42a:	fc 01       	movw	r30, r24
     42c:	33 83       	std	Z+3, r19	; 0x03
     42e:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     430:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     432:	0a 83       	std	Y+2, r16	; 0x02
     434:	52 df       	rcall	.-348    	; 0x2da <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     436:	2a 81       	ldd	r18, Y+2	; 0x02
     438:	3b 81       	ldd	r19, Y+3	; 0x03
     43a:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <xFreeBytesRemaining>
     43e:	90 91 e1 07 	lds	r25, 0x07E1	; 0x8007e1 <xFreeBytesRemaining+0x1>
     442:	82 1b       	sub	r24, r18
     444:	93 0b       	sbc	r25, r19
     446:	90 93 e1 07 	sts	0x07E1, r25	; 0x8007e1 <xFreeBytesRemaining+0x1>
     44a:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     44e:	40 91 de 07 	lds	r20, 0x07DE	; 0x8007de <xMinimumEverFreeBytesRemaining>
     452:	50 91 df 07 	lds	r21, 0x07DF	; 0x8007df <xMinimumEverFreeBytesRemaining+0x1>
     456:	84 17       	cp	r24, r20
     458:	95 07       	cpc	r25, r21
     45a:	20 f4       	brcc	.+8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     45c:	90 93 df 07 	sts	0x07DF, r25	; 0x8007df <xMinimumEverFreeBytesRemaining+0x1>
     460:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     464:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <__data_end>
     468:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <__data_end+0x1>
     46c:	28 2b       	or	r18, r24
     46e:	39 2b       	or	r19, r25
     470:	3b 83       	std	Y+3, r19	; 0x03
     472:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     474:	19 82       	std	Y+1, r1	; 0x01
     476:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     478:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <xNumberOfSuccessfulAllocations>
     47c:	90 91 dd 07 	lds	r25, 0x07DD	; 0x8007dd <xNumberOfSuccessfulAllocations+0x1>
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	90 93 dd 07 	sts	0x07DD, r25	; 0x8007dd <xNumberOfSuccessfulAllocations+0x1>
     486:	80 93 dc 07 	sts	0x07DC, r24	; 0x8007dc <xNumberOfSuccessfulAllocations>
     48a:	0b c0       	rjmp	.+22     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     48c:	e1 2c       	mov	r14, r1
     48e:	f1 2c       	mov	r15, r1
     490:	08 c0       	rjmp	.+16     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     492:	e1 2c       	mov	r14, r1
     494:	f1 2c       	mov	r15, r1
     496:	05 c0       	rjmp	.+10     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     498:	e1 2c       	mov	r14, r1
     49a:	f1 2c       	mov	r15, r1
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     49e:	e1 2c       	mov	r14, r1
     4a0:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     4a2:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     4a6:	e1 14       	cp	r14, r1
     4a8:	f1 04       	cpc	r15, r1
     4aa:	11 f4       	brne	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     4ac:	0e 94 1d 19 	call	0x323a	; 0x323a <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     4b0:	c7 01       	movw	r24, r14
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	08 95       	ret

000004c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     4c8:	00 97       	sbiw	r24, 0x00	; 0
     4ca:	91 f1       	breq	.+100    	; 0x530 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     4cc:	ec 01       	movw	r28, r24
     4ce:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     4d0:	4a 81       	ldd	r20, Y+2	; 0x02
     4d2:	5b 81       	ldd	r21, Y+3	; 0x03
     4d4:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <__data_end>
     4d8:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <__data_end+0x1>
     4dc:	ba 01       	movw	r22, r20
     4de:	62 23       	and	r22, r18
     4e0:	73 23       	and	r23, r19
     4e2:	67 2b       	or	r22, r23
     4e4:	29 f1       	breq	.+74     	; 0x530 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     4e6:	68 81       	ld	r22, Y
     4e8:	79 81       	ldd	r23, Y+1	; 0x01
     4ea:	67 2b       	or	r22, r23
     4ec:	09 f5       	brne	.+66     	; 0x530 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     4ee:	20 95       	com	r18
     4f0:	30 95       	com	r19
     4f2:	24 23       	and	r18, r20
     4f4:	35 23       	and	r19, r21
     4f6:	3b 83       	std	Y+3, r19	; 0x03
     4f8:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     4fa:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     4fe:	8a 81       	ldd	r24, Y+2	; 0x02
     500:	9b 81       	ldd	r25, Y+3	; 0x03
     502:	20 91 e0 07 	lds	r18, 0x07E0	; 0x8007e0 <xFreeBytesRemaining>
     506:	30 91 e1 07 	lds	r19, 0x07E1	; 0x8007e1 <xFreeBytesRemaining+0x1>
     50a:	82 0f       	add	r24, r18
     50c:	93 1f       	adc	r25, r19
     50e:	90 93 e1 07 	sts	0x07E1, r25	; 0x8007e1 <xFreeBytesRemaining+0x1>
     512:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     516:	ce 01       	movw	r24, r28
     518:	e0 de       	rcall	.-576    	; 0x2da <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     51a:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <xNumberOfSuccessfulFrees>
     51e:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <xNumberOfSuccessfulFrees+0x1>
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	90 93 db 07 	sts	0x07DB, r25	; 0x8007db <xNumberOfSuccessfulFrees+0x1>
     528:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     52c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	08 95       	ret

0000053a <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     53a:	fc 01       	movw	r30, r24
     53c:	03 96       	adiw	r24, 0x03	; 3
     53e:	92 83       	std	Z+2, r25	; 0x02
     540:	81 83       	std	Z+1, r24	; 0x01
     542:	4f ef       	ldi	r20, 0xFF	; 255
     544:	5f ef       	ldi	r21, 0xFF	; 255
     546:	ba 01       	movw	r22, r20
     548:	43 83       	std	Z+3, r20	; 0x03
     54a:	54 83       	std	Z+4, r21	; 0x04
     54c:	65 83       	std	Z+5, r22	; 0x05
     54e:	76 83       	std	Z+6, r23	; 0x06
     550:	90 87       	std	Z+8, r25	; 0x08
     552:	87 83       	std	Z+7, r24	; 0x07
     554:	92 87       	std	Z+10, r25	; 0x0a
     556:	81 87       	std	Z+9, r24	; 0x09
     558:	10 82       	st	Z, r1
     55a:	08 95       	ret

0000055c <vListInitialiseItem>:
     55c:	fc 01       	movw	r30, r24
     55e:	13 86       	std	Z+11, r1	; 0x0b
     560:	12 86       	std	Z+10, r1	; 0x0a
     562:	08 95       	ret

00000564 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     56e:	08 81       	ld	r16, Y
     570:	19 81       	ldd	r17, Y+1	; 0x01
     572:	2a 81       	ldd	r18, Y+2	; 0x02
     574:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     576:	0f 3f       	cpi	r16, 0xFF	; 255
     578:	4f ef       	ldi	r20, 0xFF	; 255
     57a:	14 07       	cpc	r17, r20
     57c:	24 07       	cpc	r18, r20
     57e:	34 07       	cpc	r19, r20
     580:	21 f4       	brne	.+8      	; 0x58a <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     582:	fc 01       	movw	r30, r24
     584:	a1 85       	ldd	r26, Z+9	; 0x09
     586:	b2 85       	ldd	r27, Z+10	; 0x0a
     588:	11 c0       	rjmp	.+34     	; 0x5ac <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     58a:	dc 01       	movw	r26, r24
     58c:	13 96       	adiw	r26, 0x03	; 3
     58e:	01 c0       	rjmp	.+2      	; 0x592 <vListInsert+0x2e>
     590:	df 01       	movw	r26, r30
     592:	14 96       	adiw	r26, 0x04	; 4
     594:	ed 91       	ld	r30, X+
     596:	fc 91       	ld	r31, X
     598:	15 97       	sbiw	r26, 0x05	; 5
     59a:	40 81       	ld	r20, Z
     59c:	51 81       	ldd	r21, Z+1	; 0x01
     59e:	62 81       	ldd	r22, Z+2	; 0x02
     5a0:	73 81       	ldd	r23, Z+3	; 0x03
     5a2:	04 17       	cp	r16, r20
     5a4:	15 07       	cpc	r17, r21
     5a6:	26 07       	cpc	r18, r22
     5a8:	37 07       	cpc	r19, r23
     5aa:	90 f7       	brcc	.-28     	; 0x590 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     5ac:	14 96       	adiw	r26, 0x04	; 4
     5ae:	ed 91       	ld	r30, X+
     5b0:	fc 91       	ld	r31, X
     5b2:	15 97       	sbiw	r26, 0x05	; 5
     5b4:	fd 83       	std	Y+5, r31	; 0x05
     5b6:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     5b8:	d7 83       	std	Z+7, r29	; 0x07
     5ba:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     5bc:	bf 83       	std	Y+7, r27	; 0x07
     5be:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     5c0:	15 96       	adiw	r26, 0x05	; 5
     5c2:	dc 93       	st	X, r29
     5c4:	ce 93       	st	-X, r28
     5c6:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     5c8:	9b 87       	std	Y+11, r25	; 0x0b
     5ca:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     5cc:	fc 01       	movw	r30, r24
     5ce:	20 81       	ld	r18, Z
     5d0:	2f 5f       	subi	r18, 0xFF	; 255
     5d2:	20 83       	st	Z, r18
}
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	08 95       	ret

000005de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     5e4:	a2 85       	ldd	r26, Z+10	; 0x0a
     5e6:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5e8:	c4 81       	ldd	r28, Z+4	; 0x04
     5ea:	d5 81       	ldd	r29, Z+5	; 0x05
     5ec:	86 81       	ldd	r24, Z+6	; 0x06
     5ee:	97 81       	ldd	r25, Z+7	; 0x07
     5f0:	9f 83       	std	Y+7, r25	; 0x07
     5f2:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5f4:	c6 81       	ldd	r28, Z+6	; 0x06
     5f6:	d7 81       	ldd	r29, Z+7	; 0x07
     5f8:	84 81       	ldd	r24, Z+4	; 0x04
     5fa:	95 81       	ldd	r25, Z+5	; 0x05
     5fc:	9d 83       	std	Y+5, r25	; 0x05
     5fe:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     600:	11 96       	adiw	r26, 0x01	; 1
     602:	8d 91       	ld	r24, X+
     604:	9c 91       	ld	r25, X
     606:	12 97       	sbiw	r26, 0x02	; 2
     608:	e8 17       	cp	r30, r24
     60a:	f9 07       	cpc	r31, r25
     60c:	31 f4       	brne	.+12     	; 0x61a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     60e:	86 81       	ldd	r24, Z+6	; 0x06
     610:	97 81       	ldd	r25, Z+7	; 0x07
     612:	12 96       	adiw	r26, 0x02	; 2
     614:	9c 93       	st	X, r25
     616:	8e 93       	st	-X, r24
     618:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     61a:	13 86       	std	Z+11, r1	; 0x0b
     61c:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     61e:	8c 91       	ld	r24, X
     620:	81 50       	subi	r24, 0x01	; 1
     622:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     624:	8c 91       	ld	r24, X
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     62c:	a8 95       	wdr
     62e:	90 ec       	ldi	r25, 0xC0	; 192
     630:	88 e1       	ldi	r24, 0x18	; 24
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	a8 95       	wdr
     638:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     642:	08 95       	ret

00000644 <pxPortInitialiseStack>:
     644:	fc 01       	movw	r30, r24
     646:	60 83       	st	Z, r22
     648:	31 97       	sbiw	r30, 0x01	; 1
     64a:	70 83       	st	Z, r23
     64c:	31 97       	sbiw	r30, 0x01	; 1
     64e:	10 82       	st	Z, r1
     650:	31 97       	sbiw	r30, 0x01	; 1
     652:	10 82       	st	Z, r1
     654:	31 97       	sbiw	r30, 0x01	; 1
     656:	20 e8       	ldi	r18, 0x80	; 128
     658:	20 83       	st	Z, r18
     65a:	31 97       	sbiw	r30, 0x01	; 1
     65c:	10 82       	st	Z, r1
     65e:	31 97       	sbiw	r30, 0x01	; 1
     660:	10 82       	st	Z, r1
     662:	31 97       	sbiw	r30, 0x01	; 1
     664:	10 82       	st	Z, r1
     666:	77 97       	sbiw	r30, 0x17	; 23
     668:	40 83       	st	Z, r20
     66a:	31 97       	sbiw	r30, 0x01	; 1
     66c:	50 83       	st	Z, r21
     66e:	86 97       	sbiw	r24, 0x26	; 38
     670:	08 95       	ret

00000672 <xPortStartScheduler>:
     672:	dc df       	rcall	.-72     	; 0x62c <prvSetupTimerInterrupt>
     674:	a0 91 5f 14 	lds	r26, 0x145F	; 0x80145f <pxCurrentTCB>
     678:	b0 91 60 14 	lds	r27, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
     67c:	cd 91       	ld	r28, X+
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	dd 91       	ld	r29, X+
     682:	de bf       	out	0x3e, r29	; 62
     684:	ff 91       	pop	r31
     686:	ef 91       	pop	r30
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	bf 91       	pop	r27
     68e:	af 91       	pop	r26
     690:	9f 91       	pop	r25
     692:	8f 91       	pop	r24
     694:	7f 91       	pop	r23
     696:	6f 91       	pop	r22
     698:	5f 91       	pop	r21
     69a:	4f 91       	pop	r20
     69c:	3f 91       	pop	r19
     69e:	2f 91       	pop	r18
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	ff 90       	pop	r15
     6a6:	ef 90       	pop	r14
     6a8:	df 90       	pop	r13
     6aa:	cf 90       	pop	r12
     6ac:	bf 90       	pop	r11
     6ae:	af 90       	pop	r10
     6b0:	9f 90       	pop	r9
     6b2:	8f 90       	pop	r8
     6b4:	7f 90       	pop	r7
     6b6:	6f 90       	pop	r6
     6b8:	5f 90       	pop	r5
     6ba:	4f 90       	pop	r4
     6bc:	3f 90       	pop	r3
     6be:	2f 90       	pop	r2
     6c0:	1f 90       	pop	r1
     6c2:	0f 90       	pop	r0
     6c4:	0c be       	out	0x3c, r0	; 60
     6c6:	0f 90       	pop	r0
     6c8:	0b be       	out	0x3b, r0	; 59
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	08 95       	ret
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	08 95       	ret

000006d6 <vPortYield>:
     6d6:	0f 92       	push	r0
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	f8 94       	cli
     6dc:	0f 92       	push	r0
     6de:	0b b6       	in	r0, 0x3b	; 59
     6e0:	0f 92       	push	r0
     6e2:	0c b6       	in	r0, 0x3c	; 60
     6e4:	0f 92       	push	r0
     6e6:	1f 92       	push	r1
     6e8:	11 24       	eor	r1, r1
     6ea:	2f 92       	push	r2
     6ec:	3f 92       	push	r3
     6ee:	4f 92       	push	r4
     6f0:	5f 92       	push	r5
     6f2:	6f 92       	push	r6
     6f4:	7f 92       	push	r7
     6f6:	8f 92       	push	r8
     6f8:	9f 92       	push	r9
     6fa:	af 92       	push	r10
     6fc:	bf 92       	push	r11
     6fe:	cf 92       	push	r12
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	2f 93       	push	r18
     70c:	3f 93       	push	r19
     70e:	4f 93       	push	r20
     710:	5f 93       	push	r21
     712:	6f 93       	push	r22
     714:	7f 93       	push	r23
     716:	8f 93       	push	r24
     718:	9f 93       	push	r25
     71a:	af 93       	push	r26
     71c:	bf 93       	push	r27
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	ef 93       	push	r30
     724:	ff 93       	push	r31
     726:	a0 91 5f 14 	lds	r26, 0x145F	; 0x80145f <pxCurrentTCB>
     72a:	b0 91 60 14 	lds	r27, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
     72e:	0d b6       	in	r0, 0x3d	; 61
     730:	0d 92       	st	X+, r0
     732:	0e b6       	in	r0, 0x3e	; 62
     734:	0d 92       	st	X+, r0
     736:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <vTaskSwitchContext>
     73a:	a0 91 5f 14 	lds	r26, 0x145F	; 0x80145f <pxCurrentTCB>
     73e:	b0 91 60 14 	lds	r27, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
     742:	cd 91       	ld	r28, X+
     744:	cd bf       	out	0x3d, r28	; 61
     746:	dd 91       	ld	r29, X+
     748:	de bf       	out	0x3e, r29	; 62
     74a:	ff 91       	pop	r31
     74c:	ef 91       	pop	r30
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	bf 91       	pop	r27
     754:	af 91       	pop	r26
     756:	9f 91       	pop	r25
     758:	8f 91       	pop	r24
     75a:	7f 91       	pop	r23
     75c:	6f 91       	pop	r22
     75e:	5f 91       	pop	r21
     760:	4f 91       	pop	r20
     762:	3f 91       	pop	r19
     764:	2f 91       	pop	r18
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	df 90       	pop	r13
     770:	cf 90       	pop	r12
     772:	bf 90       	pop	r11
     774:	af 90       	pop	r10
     776:	9f 90       	pop	r9
     778:	8f 90       	pop	r8
     77a:	7f 90       	pop	r7
     77c:	6f 90       	pop	r6
     77e:	5f 90       	pop	r5
     780:	4f 90       	pop	r4
     782:	3f 90       	pop	r3
     784:	2f 90       	pop	r2
     786:	1f 90       	pop	r1
     788:	0f 90       	pop	r0
     78a:	0c be       	out	0x3c, r0	; 60
     78c:	0f 90       	pop	r0
     78e:	0b be       	out	0x3b, r0	; 59
     790:	0f 90       	pop	r0
     792:	0f be       	out	0x3f, r0	; 63
     794:	0f 90       	pop	r0
     796:	08 95       	ret

00000798 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     798:	0f 92       	push	r0
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	0f 92       	push	r0
     7a0:	0b b6       	in	r0, 0x3b	; 59
     7a2:	0f 92       	push	r0
     7a4:	0c b6       	in	r0, 0x3c	; 60
     7a6:	0f 92       	push	r0
     7a8:	1f 92       	push	r1
     7aa:	11 24       	eor	r1, r1
     7ac:	2f 92       	push	r2
     7ae:	3f 92       	push	r3
     7b0:	4f 92       	push	r4
     7b2:	5f 92       	push	r5
     7b4:	6f 92       	push	r6
     7b6:	7f 92       	push	r7
     7b8:	8f 92       	push	r8
     7ba:	9f 92       	push	r9
     7bc:	af 92       	push	r10
     7be:	bf 92       	push	r11
     7c0:	cf 92       	push	r12
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	2f 93       	push	r18
     7ce:	3f 93       	push	r19
     7d0:	4f 93       	push	r20
     7d2:	5f 93       	push	r21
     7d4:	6f 93       	push	r22
     7d6:	7f 93       	push	r23
     7d8:	8f 93       	push	r24
     7da:	9f 93       	push	r25
     7dc:	af 93       	push	r26
     7de:	bf 93       	push	r27
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	ef 93       	push	r30
     7e6:	ff 93       	push	r31
     7e8:	a0 91 5f 14 	lds	r26, 0x145F	; 0x80145f <pxCurrentTCB>
     7ec:	b0 91 60 14 	lds	r27, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
     7f0:	0d b6       	in	r0, 0x3d	; 61
     7f2:	0d 92       	st	X+, r0
     7f4:	0e b6       	in	r0, 0x3e	; 62
     7f6:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     7f8:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     7fa:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <xTaskIncrementTick>
     7fe:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     800:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     804:	a0 91 5f 14 	lds	r26, 0x145F	; 0x80145f <pxCurrentTCB>
     808:	b0 91 60 14 	lds	r27, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
     80c:	cd 91       	ld	r28, X+
     80e:	cd bf       	out	0x3d, r28	; 61
     810:	dd 91       	ld	r29, X+
     812:	de bf       	out	0x3e, r29	; 62
     814:	ff 91       	pop	r31
     816:	ef 91       	pop	r30
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	bf 91       	pop	r27
     81e:	af 91       	pop	r26
     820:	9f 91       	pop	r25
     822:	8f 91       	pop	r24
     824:	7f 91       	pop	r23
     826:	6f 91       	pop	r22
     828:	5f 91       	pop	r21
     82a:	4f 91       	pop	r20
     82c:	3f 91       	pop	r19
     82e:	2f 91       	pop	r18
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	df 90       	pop	r13
     83a:	cf 90       	pop	r12
     83c:	bf 90       	pop	r11
     83e:	af 90       	pop	r10
     840:	9f 90       	pop	r9
     842:	8f 90       	pop	r8
     844:	7f 90       	pop	r7
     846:	6f 90       	pop	r6
     848:	5f 90       	pop	r5
     84a:	4f 90       	pop	r4
     84c:	3f 90       	pop	r3
     84e:	2f 90       	pop	r2
     850:	1f 90       	pop	r1
     852:	0f 90       	pop	r0
     854:	0c be       	out	0x3c, r0	; 60
     856:	0f 90       	pop	r0
     858:	0b be       	out	0x3b, r0	; 59
     85a:	0f 90       	pop	r0
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     860:	08 95       	ret

00000862 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     862:	9a df       	rcall	.-204    	; 0x798 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     864:	18 95       	reti

00000866 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     866:	dc 01       	movw	r26, r24
     868:	53 96       	adiw	r26, 0x13	; 19
     86a:	2c 91       	ld	r18, X
     86c:	53 97       	sbiw	r26, 0x13	; 19
     86e:	22 23       	and	r18, r18
     870:	41 f0       	breq	.+16     	; 0x882 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     872:	5a 96       	adiw	r26, 0x1a	; 26
     874:	ed 91       	ld	r30, X+
     876:	fc 91       	ld	r31, X
     878:	5b 97       	sbiw	r26, 0x1b	; 27
     87a:	90 81       	ld	r25, Z
     87c:	8a e0       	ldi	r24, 0x0A	; 10
     87e:	89 1b       	sub	r24, r25
     880:	08 95       	ret
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	08 95       	ret

00000886 <prvIsQueueEmpty>:
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	0f 92       	push	r0
     88c:	fc 01       	movw	r30, r24
     88e:	86 8d       	ldd	r24, Z+30	; 0x1e
     890:	81 11       	cpse	r24, r1
     892:	02 c0       	rjmp	.+4      	; 0x898 <prvIsQueueEmpty+0x12>
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	01 c0       	rjmp	.+2      	; 0x89a <prvIsQueueEmpty+0x14>
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	0f 90       	pop	r0
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	08 95       	ret

000008a0 <prvIsQueueFull>:
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	0f 92       	push	r0
     8a6:	fc 01       	movw	r30, r24
     8a8:	26 8d       	ldd	r18, Z+30	; 0x1e
     8aa:	87 8d       	ldd	r24, Z+31	; 0x1f
     8ac:	28 13       	cpse	r18, r24
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <prvIsQueueFull+0x14>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <prvIsQueueFull+0x16>
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	0f 90       	pop	r0
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	08 95       	ret

000008bc <prvCopyDataToQueue>:
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	ec 01       	movw	r28, r24
     8c6:	04 2f       	mov	r16, r20
     8c8:	1e 8d       	ldd	r17, Y+30	; 0x1e
     8ca:	48 a1       	ldd	r20, Y+32	; 0x20
     8cc:	41 11       	cpse	r20, r1
     8ce:	0c c0       	rjmp	.+24     	; 0x8e8 <prvCopyDataToQueue+0x2c>
     8d0:	88 81       	ld	r24, Y
     8d2:	99 81       	ldd	r25, Y+1	; 0x01
     8d4:	89 2b       	or	r24, r25
     8d6:	09 f0       	breq	.+2      	; 0x8da <prvCopyDataToQueue+0x1e>
     8d8:	42 c0       	rjmp	.+132    	; 0x95e <prvCopyDataToQueue+0xa2>
     8da:	8c 81       	ldd	r24, Y+4	; 0x04
     8dc:	9d 81       	ldd	r25, Y+5	; 0x05
     8de:	0e 94 63 12 	call	0x24c6	; 0x24c6 <xTaskPriorityDisinherit>
     8e2:	1d 82       	std	Y+5, r1	; 0x05
     8e4:	1c 82       	std	Y+4, r1	; 0x04
     8e6:	42 c0       	rjmp	.+132    	; 0x96c <prvCopyDataToQueue+0xb0>
     8e8:	01 11       	cpse	r16, r1
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <prvCopyDataToQueue+0x5e>
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	8a 81       	ldd	r24, Y+2	; 0x02
     8f0:	9b 81       	ldd	r25, Y+3	; 0x03
     8f2:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <memcpy>
     8f6:	28 a1       	ldd	r18, Y+32	; 0x20
     8f8:	8a 81       	ldd	r24, Y+2	; 0x02
     8fa:	9b 81       	ldd	r25, Y+3	; 0x03
     8fc:	82 0f       	add	r24, r18
     8fe:	91 1d       	adc	r25, r1
     900:	9b 83       	std	Y+3, r25	; 0x03
     902:	8a 83       	std	Y+2, r24	; 0x02
     904:	2c 81       	ldd	r18, Y+4	; 0x04
     906:	3d 81       	ldd	r19, Y+5	; 0x05
     908:	82 17       	cp	r24, r18
     90a:	93 07       	cpc	r25, r19
     90c:	50 f1       	brcs	.+84     	; 0x962 <prvCopyDataToQueue+0xa6>
     90e:	88 81       	ld	r24, Y
     910:	99 81       	ldd	r25, Y+1	; 0x01
     912:	9b 83       	std	Y+3, r25	; 0x03
     914:	8a 83       	std	Y+2, r24	; 0x02
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	29 c0       	rjmp	.+82     	; 0x96c <prvCopyDataToQueue+0xb0>
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	8e 81       	ldd	r24, Y+6	; 0x06
     91e:	9f 81       	ldd	r25, Y+7	; 0x07
     920:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <memcpy>
     924:	88 a1       	ldd	r24, Y+32	; 0x20
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	91 95       	neg	r25
     92a:	81 95       	neg	r24
     92c:	91 09       	sbc	r25, r1
     92e:	2e 81       	ldd	r18, Y+6	; 0x06
     930:	3f 81       	ldd	r19, Y+7	; 0x07
     932:	28 0f       	add	r18, r24
     934:	39 1f       	adc	r19, r25
     936:	3f 83       	std	Y+7, r19	; 0x07
     938:	2e 83       	std	Y+6, r18	; 0x06
     93a:	48 81       	ld	r20, Y
     93c:	59 81       	ldd	r21, Y+1	; 0x01
     93e:	24 17       	cp	r18, r20
     940:	35 07       	cpc	r19, r21
     942:	30 f4       	brcc	.+12     	; 0x950 <prvCopyDataToQueue+0x94>
     944:	2c 81       	ldd	r18, Y+4	; 0x04
     946:	3d 81       	ldd	r19, Y+5	; 0x05
     948:	82 0f       	add	r24, r18
     94a:	93 1f       	adc	r25, r19
     94c:	9f 83       	std	Y+7, r25	; 0x07
     94e:	8e 83       	std	Y+6, r24	; 0x06
     950:	02 30       	cpi	r16, 0x02	; 2
     952:	49 f4       	brne	.+18     	; 0x966 <prvCopyDataToQueue+0xaa>
     954:	11 23       	and	r17, r17
     956:	49 f0       	breq	.+18     	; 0x96a <prvCopyDataToQueue+0xae>
     958:	11 50       	subi	r17, 0x01	; 1
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	07 c0       	rjmp	.+14     	; 0x96c <prvCopyDataToQueue+0xb0>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	05 c0       	rjmp	.+10     	; 0x96c <prvCopyDataToQueue+0xb0>
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	03 c0       	rjmp	.+6      	; 0x96c <prvCopyDataToQueue+0xb0>
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	01 c0       	rjmp	.+2      	; 0x96c <prvCopyDataToQueue+0xb0>
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	1f 5f       	subi	r17, 0xFF	; 255
     96e:	1e 8f       	std	Y+30, r17	; 0x1e
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	08 95       	ret

0000097a <prvCopyDataFromQueue>:
     97a:	fc 01       	movw	r30, r24
     97c:	40 a1       	ldd	r20, Z+32	; 0x20
     97e:	44 23       	and	r20, r20
     980:	a9 f0       	breq	.+42     	; 0x9ac <prvCopyDataFromQueue+0x32>
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	26 81       	ldd	r18, Z+6	; 0x06
     986:	37 81       	ldd	r19, Z+7	; 0x07
     988:	24 0f       	add	r18, r20
     98a:	35 1f       	adc	r19, r21
     98c:	37 83       	std	Z+7, r19	; 0x07
     98e:	26 83       	std	Z+6, r18	; 0x06
     990:	84 81       	ldd	r24, Z+4	; 0x04
     992:	95 81       	ldd	r25, Z+5	; 0x05
     994:	28 17       	cp	r18, r24
     996:	39 07       	cpc	r19, r25
     998:	20 f0       	brcs	.+8      	; 0x9a2 <prvCopyDataFromQueue+0x28>
     99a:	80 81       	ld	r24, Z
     99c:	91 81       	ldd	r25, Z+1	; 0x01
     99e:	97 83       	std	Z+7, r25	; 0x07
     9a0:	86 83       	std	Z+6, r24	; 0x06
     9a2:	cb 01       	movw	r24, r22
     9a4:	66 81       	ldd	r22, Z+6	; 0x06
     9a6:	77 81       	ldd	r23, Z+7	; 0x07
     9a8:	0c 94 18 2e 	jmp	0x5c30	; 0x5c30 <memcpy>
     9ac:	08 95       	ret

000009ae <prvUnlockQueue>:
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	ec 01       	movw	r28, r24
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	0f 92       	push	r0
     9bc:	1a a1       	ldd	r17, Y+34	; 0x22
     9be:	0b c0       	rjmp	.+22     	; 0x9d6 <prvUnlockQueue+0x28>
     9c0:	8b 89       	ldd	r24, Y+19	; 0x13
     9c2:	88 23       	and	r24, r24
     9c4:	51 f0       	breq	.+20     	; 0x9da <prvUnlockQueue+0x2c>
     9c6:	ce 01       	movw	r24, r28
     9c8:	43 96       	adiw	r24, 0x13	; 19
     9ca:	0e 94 89 10 	call	0x2112	; 0x2112 <xTaskRemoveFromEventList>
     9ce:	81 11       	cpse	r24, r1
     9d0:	0e 94 c5 11 	call	0x238a	; 0x238a <vTaskMissedYield>
     9d4:	11 50       	subi	r17, 0x01	; 1
     9d6:	11 16       	cp	r1, r17
     9d8:	9c f3       	brlt	.-26     	; 0x9c0 <prvUnlockQueue+0x12>
     9da:	8f ef       	ldi	r24, 0xFF	; 255
     9dc:	8a a3       	std	Y+34, r24	; 0x22
     9de:	0f 90       	pop	r0
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	0f 92       	push	r0
     9e8:	19 a1       	ldd	r17, Y+33	; 0x21
     9ea:	0b c0       	rjmp	.+22     	; 0xa02 <prvUnlockQueue+0x54>
     9ec:	88 85       	ldd	r24, Y+8	; 0x08
     9ee:	88 23       	and	r24, r24
     9f0:	51 f0       	breq	.+20     	; 0xa06 <prvUnlockQueue+0x58>
     9f2:	ce 01       	movw	r24, r28
     9f4:	08 96       	adiw	r24, 0x08	; 8
     9f6:	0e 94 89 10 	call	0x2112	; 0x2112 <xTaskRemoveFromEventList>
     9fa:	81 11       	cpse	r24, r1
     9fc:	0e 94 c5 11 	call	0x238a	; 0x238a <vTaskMissedYield>
     a00:	11 50       	subi	r17, 0x01	; 1
     a02:	11 16       	cp	r1, r17
     a04:	9c f3       	brlt	.-26     	; 0x9ec <prvUnlockQueue+0x3e>
     a06:	8f ef       	ldi	r24, 0xFF	; 255
     a08:	89 a3       	std	Y+33, r24	; 0x21
     a0a:	0f 90       	pop	r0
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	08 95       	ret

00000a16 <xQueueGenericReset>:
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	ec 01       	movw	r28, r24
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	0f 92       	push	r0
     a22:	e8 81       	ld	r30, Y
     a24:	f9 81       	ldd	r31, Y+1	; 0x01
     a26:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a28:	28 a1       	ldd	r18, Y+32	; 0x20
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	82 9f       	mul	r24, r18
     a30:	a0 01       	movw	r20, r0
     a32:	83 9f       	mul	r24, r19
     a34:	50 0d       	add	r21, r0
     a36:	92 9f       	mul	r25, r18
     a38:	50 0d       	add	r21, r0
     a3a:	11 24       	eor	r1, r1
     a3c:	4e 0f       	add	r20, r30
     a3e:	5f 1f       	adc	r21, r31
     a40:	5d 83       	std	Y+5, r21	; 0x05
     a42:	4c 83       	std	Y+4, r20	; 0x04
     a44:	1e 8e       	std	Y+30, r1	; 0x1e
     a46:	fb 83       	std	Y+3, r31	; 0x03
     a48:	ea 83       	std	Y+2, r30	; 0x02
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	28 9f       	mul	r18, r24
     a4e:	a0 01       	movw	r20, r0
     a50:	29 9f       	mul	r18, r25
     a52:	50 0d       	add	r21, r0
     a54:	38 9f       	mul	r19, r24
     a56:	50 0d       	add	r21, r0
     a58:	11 24       	eor	r1, r1
     a5a:	cf 01       	movw	r24, r30
     a5c:	84 0f       	add	r24, r20
     a5e:	95 1f       	adc	r25, r21
     a60:	9f 83       	std	Y+7, r25	; 0x07
     a62:	8e 83       	std	Y+6, r24	; 0x06
     a64:	8f ef       	ldi	r24, 0xFF	; 255
     a66:	89 a3       	std	Y+33, r24	; 0x21
     a68:	8a a3       	std	Y+34, r24	; 0x22
     a6a:	61 11       	cpse	r22, r1
     a6c:	0b c0       	rjmp	.+22     	; 0xa84 <xQueueGenericReset+0x6e>
     a6e:	88 85       	ldd	r24, Y+8	; 0x08
     a70:	88 23       	and	r24, r24
     a72:	71 f0       	breq	.+28     	; 0xa90 <xQueueGenericReset+0x7a>
     a74:	ce 01       	movw	r24, r28
     a76:	08 96       	adiw	r24, 0x08	; 8
     a78:	0e 94 89 10 	call	0x2112	; 0x2112 <xTaskRemoveFromEventList>
     a7c:	88 23       	and	r24, r24
     a7e:	41 f0       	breq	.+16     	; 0xa90 <xQueueGenericReset+0x7a>
     a80:	2a de       	rcall	.-940    	; 0x6d6 <vPortYield>
     a82:	06 c0       	rjmp	.+12     	; 0xa90 <xQueueGenericReset+0x7a>
     a84:	ce 01       	movw	r24, r28
     a86:	08 96       	adiw	r24, 0x08	; 8
     a88:	58 dd       	rcall	.-1360   	; 0x53a <vListInitialise>
     a8a:	ce 01       	movw	r24, r28
     a8c:	43 96       	adiw	r24, 0x13	; 19
     a8e:	55 dd       	rcall	.-1366   	; 0x53a <vListInitialise>
     a90:	0f 90       	pop	r0
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <prvInitialiseNewQueue>:
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	f8 01       	movw	r30, r16
     aa2:	61 11       	cpse	r22, r1
     aa4:	03 c0       	rjmp	.+6      	; 0xaac <prvInitialiseNewQueue+0x10>
     aa6:	11 83       	std	Z+1, r17	; 0x01
     aa8:	00 83       	st	Z, r16
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <prvInitialiseNewQueue+0x14>
     aac:	51 83       	std	Z+1, r21	; 0x01
     aae:	40 83       	st	Z, r20
     ab0:	87 8f       	std	Z+31, r24	; 0x1f
     ab2:	60 a3       	std	Z+32, r22	; 0x20
     ab4:	61 e0       	ldi	r22, 0x01	; 1
     ab6:	cf 01       	movw	r24, r30
     ab8:	ae df       	rcall	.-164    	; 0xa16 <xQueueGenericReset>
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	08 95       	ret

00000ac0 <xQueueGenericCreate>:
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	f8 2e       	mov	r15, r24
     ad0:	e6 2e       	mov	r14, r22
     ad2:	d4 2e       	mov	r13, r20
     ad4:	86 9f       	mul	r24, r22
     ad6:	c0 01       	movw	r24, r0
     ad8:	11 24       	eor	r1, r1
     ada:	83 96       	adiw	r24, 0x23	; 35
     adc:	48 dc       	rcall	.-1904   	; 0x36e <pvPortMalloc>
     ade:	ec 01       	movw	r28, r24
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	41 f0       	breq	.+16     	; 0xaf4 <xQueueGenericCreate+0x34>
     ae4:	8c 01       	movw	r16, r24
     ae6:	2d 2d       	mov	r18, r13
     ae8:	ac 01       	movw	r20, r24
     aea:	4d 5d       	subi	r20, 0xDD	; 221
     aec:	5f 4f       	sbci	r21, 0xFF	; 255
     aee:	6e 2d       	mov	r22, r14
     af0:	8f 2d       	mov	r24, r15
     af2:	d4 df       	rcall	.-88     	; 0xa9c <prvInitialiseNewQueue>
     af4:	ce 01       	movw	r24, r28
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	df 90       	pop	r13
     b04:	08 95       	ret

00000b06 <xQueueGenericSend>:
     b06:	cf 92       	push	r12
     b08:	df 92       	push	r13
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
     b1a:	29 97       	sbiw	r28, 0x09	; 9
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	cd bf       	out	0x3d, r28	; 61
     b26:	7c 01       	movw	r14, r24
     b28:	6b 01       	movw	r12, r22
     b2a:	2e 83       	std	Y+6, r18	; 0x06
     b2c:	3f 83       	std	Y+7, r19	; 0x07
     b2e:	48 87       	std	Y+8, r20	; 0x08
     b30:	59 87       	std	Y+9, r21	; 0x09
     b32:	10 e0       	ldi	r17, 0x00	; 0
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	0f 92       	push	r0
     b3a:	f7 01       	movw	r30, r14
     b3c:	96 8d       	ldd	r25, Z+30	; 0x1e
     b3e:	87 8d       	ldd	r24, Z+31	; 0x1f
     b40:	98 17       	cp	r25, r24
     b42:	10 f0       	brcs	.+4      	; 0xb48 <xQueueGenericSend+0x42>
     b44:	02 30       	cpi	r16, 0x02	; 2
     b46:	b1 f4       	brne	.+44     	; 0xb74 <xQueueGenericSend+0x6e>
     b48:	40 2f       	mov	r20, r16
     b4a:	b6 01       	movw	r22, r12
     b4c:	c7 01       	movw	r24, r14
     b4e:	b6 de       	rcall	.-660    	; 0x8bc <prvCopyDataToQueue>
     b50:	f7 01       	movw	r30, r14
     b52:	93 89       	ldd	r25, Z+19	; 0x13
     b54:	99 23       	and	r25, r25
     b56:	41 f0       	breq	.+16     	; 0xb68 <xQueueGenericSend+0x62>
     b58:	c7 01       	movw	r24, r14
     b5a:	43 96       	adiw	r24, 0x13	; 19
     b5c:	0e 94 89 10 	call	0x2112	; 0x2112 <xTaskRemoveFromEventList>
     b60:	88 23       	and	r24, r24
     b62:	21 f0       	breq	.+8      	; 0xb6c <xQueueGenericSend+0x66>
     b64:	b8 dd       	rcall	.-1168   	; 0x6d6 <vPortYield>
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <xQueueGenericSend+0x66>
     b68:	81 11       	cpse	r24, r1
     b6a:	b5 dd       	rcall	.-1174   	; 0x6d6 <vPortYield>
     b6c:	0f 90       	pop	r0
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	4c c0       	rjmp	.+152    	; 0xc0c <xQueueGenericSend+0x106>
     b74:	8e 81       	ldd	r24, Y+6	; 0x06
     b76:	9f 81       	ldd	r25, Y+7	; 0x07
     b78:	a8 85       	ldd	r26, Y+8	; 0x08
     b7a:	b9 85       	ldd	r27, Y+9	; 0x09
     b7c:	89 2b       	or	r24, r25
     b7e:	8a 2b       	or	r24, r26
     b80:	8b 2b       	or	r24, r27
     b82:	21 f4       	brne	.+8      	; 0xb8c <xQueueGenericSend+0x86>
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	40 c0       	rjmp	.+128    	; 0xc0c <xQueueGenericSend+0x106>
     b8c:	11 11       	cpse	r17, r1
     b8e:	05 c0       	rjmp	.+10     	; 0xb9a <xQueueGenericSend+0x94>
     b90:	ce 01       	movw	r24, r28
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	0e 94 4e 11 	call	0x229c	; 0x229c <vTaskInternalSetTimeOutState>
     b98:	11 e0       	ldi	r17, 0x01	; 1
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	c4 d7       	rcall	.+3976   	; 0x1b28 <vTaskSuspendAll>
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	0f 92       	push	r0
     ba6:	f7 01       	movw	r30, r14
     ba8:	81 a1       	ldd	r24, Z+33	; 0x21
     baa:	8f 3f       	cpi	r24, 0xFF	; 255
     bac:	09 f4       	brne	.+2      	; 0xbb0 <xQueueGenericSend+0xaa>
     bae:	11 a2       	std	Z+33, r1	; 0x21
     bb0:	f7 01       	movw	r30, r14
     bb2:	82 a1       	ldd	r24, Z+34	; 0x22
     bb4:	8f 3f       	cpi	r24, 0xFF	; 255
     bb6:	09 f4       	brne	.+2      	; 0xbba <xQueueGenericSend+0xb4>
     bb8:	12 a2       	std	Z+34, r1	; 0x22
     bba:	0f 90       	pop	r0
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	be 01       	movw	r22, r28
     bc0:	6a 5f       	subi	r22, 0xFA	; 250
     bc2:	7f 4f       	sbci	r23, 0xFF	; 255
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	0e 94 5f 11 	call	0x22be	; 0x22be <xTaskCheckForTimeOut>
     bcc:	81 11       	cpse	r24, r1
     bce:	19 c0       	rjmp	.+50     	; 0xc02 <xQueueGenericSend+0xfc>
     bd0:	c7 01       	movw	r24, r14
     bd2:	66 de       	rcall	.-820    	; 0x8a0 <prvIsQueueFull>
     bd4:	88 23       	and	r24, r24
     bd6:	81 f0       	breq	.+32     	; 0xbf8 <xQueueGenericSend+0xf2>
     bd8:	4e 81       	ldd	r20, Y+6	; 0x06
     bda:	5f 81       	ldd	r21, Y+7	; 0x07
     bdc:	68 85       	ldd	r22, Y+8	; 0x08
     bde:	79 85       	ldd	r23, Y+9	; 0x09
     be0:	c7 01       	movw	r24, r14
     be2:	08 96       	adiw	r24, 0x08	; 8
     be4:	0e 94 30 10 	call	0x2060	; 0x2060 <vTaskPlaceOnEventList>
     be8:	c7 01       	movw	r24, r14
     bea:	e1 de       	rcall	.-574    	; 0x9ae <prvUnlockQueue>
     bec:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <xTaskResumeAll>
     bf0:	81 11       	cpse	r24, r1
     bf2:	a0 cf       	rjmp	.-192    	; 0xb34 <xQueueGenericSend+0x2e>
     bf4:	70 dd       	rcall	.-1312   	; 0x6d6 <vPortYield>
     bf6:	9e cf       	rjmp	.-196    	; 0xb34 <xQueueGenericSend+0x2e>
     bf8:	c7 01       	movw	r24, r14
     bfa:	d9 de       	rcall	.-590    	; 0x9ae <prvUnlockQueue>
     bfc:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <xTaskResumeAll>
     c00:	99 cf       	rjmp	.-206    	; 0xb34 <xQueueGenericSend+0x2e>
     c02:	c7 01       	movw	r24, r14
     c04:	d4 de       	rcall	.-600    	; 0x9ae <prvUnlockQueue>
     c06:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <xTaskResumeAll>
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	29 96       	adiw	r28, 0x09	; 9
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	df 90       	pop	r13
     c26:	cf 90       	pop	r12
     c28:	08 95       	ret

00000c2a <prvInitialiseMutex>:
     c2a:	0f 93       	push	r16
     c2c:	00 97       	sbiw	r24, 0x00	; 0
     c2e:	69 f0       	breq	.+26     	; 0xc4a <prvInitialiseMutex+0x20>
     c30:	fc 01       	movw	r30, r24
     c32:	15 82       	std	Z+5, r1	; 0x05
     c34:	14 82       	std	Z+4, r1	; 0x04
     c36:	11 82       	std	Z+1, r1	; 0x01
     c38:	10 82       	st	Z, r1
     c3a:	16 82       	std	Z+6, r1	; 0x06
     c3c:	00 e0       	ldi	r16, 0x00	; 0
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	a9 01       	movw	r20, r18
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	5e df       	rcall	.-324    	; 0xb06 <xQueueGenericSend>
     c4a:	0f 91       	pop	r16
     c4c:	08 95       	ret

00000c4e <xQueueCreateMutex>:
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	48 2f       	mov	r20, r24
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	33 df       	rcall	.-410    	; 0xac0 <xQueueGenericCreate>
     c5a:	ec 01       	movw	r28, r24
     c5c:	e6 df       	rcall	.-52     	; 0xc2a <prvInitialiseMutex>
     c5e:	ce 01       	movw	r24, r28
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <xQueueGenericSendFromISR>:
     c66:	ef 92       	push	r14
     c68:	ff 92       	push	r15
     c6a:	0f 93       	push	r16
     c6c:	1f 93       	push	r17
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	8a 01       	movw	r16, r20
     c74:	fc 01       	movw	r30, r24
     c76:	56 8d       	ldd	r21, Z+30	; 0x1e
     c78:	37 8d       	ldd	r19, Z+31	; 0x1f
     c7a:	53 17       	cp	r21, r19
     c7c:	10 f0       	brcs	.+4      	; 0xc82 <xQueueGenericSendFromISR+0x1c>
     c7e:	22 30       	cpi	r18, 0x02	; 2
     c80:	f9 f4       	brne	.+62     	; 0xcc0 <xQueueGenericSendFromISR+0x5a>
     c82:	42 2f       	mov	r20, r18
     c84:	78 01       	movw	r14, r16
     c86:	ec 01       	movw	r28, r24
     c88:	1a a1       	ldd	r17, Y+34	; 0x22
     c8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c8c:	ce 01       	movw	r24, r28
     c8e:	16 de       	rcall	.-980    	; 0x8bc <prvCopyDataToQueue>
     c90:	1f 3f       	cpi	r17, 0xFF	; 255
     c92:	81 f4       	brne	.+32     	; 0xcb4 <xQueueGenericSendFromISR+0x4e>
     c94:	8b 89       	ldd	r24, Y+19	; 0x13
     c96:	88 23       	and	r24, r24
     c98:	a9 f0       	breq	.+42     	; 0xcc4 <xQueueGenericSendFromISR+0x5e>
     c9a:	ce 01       	movw	r24, r28
     c9c:	43 96       	adiw	r24, 0x13	; 19
     c9e:	0e 94 89 10 	call	0x2112	; 0x2112 <xTaskRemoveFromEventList>
     ca2:	88 23       	and	r24, r24
     ca4:	89 f0       	breq	.+34     	; 0xcc8 <xQueueGenericSendFromISR+0x62>
     ca6:	e1 14       	cp	r14, r1
     ca8:	f1 04       	cpc	r15, r1
     caa:	81 f0       	breq	.+32     	; 0xccc <xQueueGenericSendFromISR+0x66>
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	f7 01       	movw	r30, r14
     cb0:	80 83       	st	Z, r24
     cb2:	0d c0       	rjmp	.+26     	; 0xcce <xQueueGenericSendFromISR+0x68>
     cb4:	ff 24       	eor	r15, r15
     cb6:	f3 94       	inc	r15
     cb8:	f1 0e       	add	r15, r17
     cba:	fa a2       	std	Y+34, r15	; 0x22
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	07 c0       	rjmp	.+14     	; 0xcce <xQueueGenericSendFromISR+0x68>
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <xQueueGenericSendFromISR+0x68>
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <xQueueGenericSendFromISR+0x68>
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	01 c0       	rjmp	.+2      	; 0xcce <xQueueGenericSendFromISR+0x68>
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	08 95       	ret

00000cdc <xQueueReceive>:
     cdc:	cf 92       	push	r12
     cde:	df 92       	push	r13
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	29 97       	sbiw	r28, 0x09	; 9
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	8c 01       	movw	r16, r24
     cfe:	6b 01       	movw	r12, r22
     d00:	2e 83       	std	Y+6, r18	; 0x06
     d02:	3f 83       	std	Y+7, r19	; 0x07
     d04:	48 87       	std	Y+8, r20	; 0x08
     d06:	59 87       	std	Y+9, r21	; 0x09
     d08:	e1 2c       	mov	r14, r1
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	0f 92       	push	r0
     d10:	f8 01       	movw	r30, r16
     d12:	f6 8c       	ldd	r15, Z+30	; 0x1e
     d14:	ff 20       	and	r15, r15
     d16:	99 f0       	breq	.+38     	; 0xd3e <xQueueReceive+0x62>
     d18:	b6 01       	movw	r22, r12
     d1a:	c8 01       	movw	r24, r16
     d1c:	2e de       	rcall	.-932    	; 0x97a <prvCopyDataFromQueue>
     d1e:	fa 94       	dec	r15
     d20:	f8 01       	movw	r30, r16
     d22:	f6 8e       	std	Z+30, r15	; 0x1e
     d24:	80 85       	ldd	r24, Z+8	; 0x08
     d26:	88 23       	and	r24, r24
     d28:	31 f0       	breq	.+12     	; 0xd36 <xQueueReceive+0x5a>
     d2a:	c8 01       	movw	r24, r16
     d2c:	08 96       	adiw	r24, 0x08	; 8
     d2e:	0e 94 89 10 	call	0x2112	; 0x2112 <xTaskRemoveFromEventList>
     d32:	81 11       	cpse	r24, r1
     d34:	d0 dc       	rcall	.-1632   	; 0x6d6 <vPortYield>
     d36:	0f 90       	pop	r0
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	4f c0       	rjmp	.+158    	; 0xddc <xQueueReceive+0x100>
     d3e:	8e 81       	ldd	r24, Y+6	; 0x06
     d40:	9f 81       	ldd	r25, Y+7	; 0x07
     d42:	a8 85       	ldd	r26, Y+8	; 0x08
     d44:	b9 85       	ldd	r27, Y+9	; 0x09
     d46:	89 2b       	or	r24, r25
     d48:	8a 2b       	or	r24, r26
     d4a:	8b 2b       	or	r24, r27
     d4c:	21 f4       	brne	.+8      	; 0xd56 <xQueueReceive+0x7a>
     d4e:	0f 90       	pop	r0
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	43 c0       	rjmp	.+134    	; 0xddc <xQueueReceive+0x100>
     d56:	e1 10       	cpse	r14, r1
     d58:	06 c0       	rjmp	.+12     	; 0xd66 <xQueueReceive+0x8a>
     d5a:	ce 01       	movw	r24, r28
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	0e 94 4e 11 	call	0x229c	; 0x229c <vTaskInternalSetTimeOutState>
     d62:	ee 24       	eor	r14, r14
     d64:	e3 94       	inc	r14
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	de d6       	rcall	.+3516   	; 0x1b28 <vTaskSuspendAll>
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	0f 92       	push	r0
     d72:	f8 01       	movw	r30, r16
     d74:	81 a1       	ldd	r24, Z+33	; 0x21
     d76:	8f 3f       	cpi	r24, 0xFF	; 255
     d78:	09 f4       	brne	.+2      	; 0xd7c <xQueueReceive+0xa0>
     d7a:	11 a2       	std	Z+33, r1	; 0x21
     d7c:	f8 01       	movw	r30, r16
     d7e:	82 a1       	ldd	r24, Z+34	; 0x22
     d80:	8f 3f       	cpi	r24, 0xFF	; 255
     d82:	09 f4       	brne	.+2      	; 0xd86 <xQueueReceive+0xaa>
     d84:	12 a2       	std	Z+34, r1	; 0x22
     d86:	0f 90       	pop	r0
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	be 01       	movw	r22, r28
     d8c:	6a 5f       	subi	r22, 0xFA	; 250
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	ce 01       	movw	r24, r28
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	0e 94 5f 11 	call	0x22be	; 0x22be <xTaskCheckForTimeOut>
     d98:	81 11       	cpse	r24, r1
     d9a:	17 c0       	rjmp	.+46     	; 0xdca <xQueueReceive+0xee>
     d9c:	c8 01       	movw	r24, r16
     d9e:	73 dd       	rcall	.-1306   	; 0x886 <prvIsQueueEmpty>
     da0:	88 23       	and	r24, r24
     da2:	79 f0       	breq	.+30     	; 0xdc2 <xQueueReceive+0xe6>
     da4:	4e 81       	ldd	r20, Y+6	; 0x06
     da6:	5f 81       	ldd	r21, Y+7	; 0x07
     da8:	68 85       	ldd	r22, Y+8	; 0x08
     daa:	79 85       	ldd	r23, Y+9	; 0x09
     dac:	c8 01       	movw	r24, r16
     dae:	43 96       	adiw	r24, 0x13	; 19
     db0:	0e 94 30 10 	call	0x2060	; 0x2060 <vTaskPlaceOnEventList>
     db4:	c8 01       	movw	r24, r16
     db6:	fb dd       	rcall	.-1034   	; 0x9ae <prvUnlockQueue>
     db8:	f7 d7       	rcall	.+4078   	; 0x1da8 <xTaskResumeAll>
     dba:	81 11       	cpse	r24, r1
     dbc:	a6 cf       	rjmp	.-180    	; 0xd0a <xQueueReceive+0x2e>
     dbe:	8b dc       	rcall	.-1770   	; 0x6d6 <vPortYield>
     dc0:	a4 cf       	rjmp	.-184    	; 0xd0a <xQueueReceive+0x2e>
     dc2:	c8 01       	movw	r24, r16
     dc4:	f4 dd       	rcall	.-1048   	; 0x9ae <prvUnlockQueue>
     dc6:	f0 d7       	rcall	.+4064   	; 0x1da8 <xTaskResumeAll>
     dc8:	a0 cf       	rjmp	.-192    	; 0xd0a <xQueueReceive+0x2e>
     dca:	c8 01       	movw	r24, r16
     dcc:	f0 dd       	rcall	.-1056   	; 0x9ae <prvUnlockQueue>
     dce:	ec d7       	rcall	.+4056   	; 0x1da8 <xTaskResumeAll>
     dd0:	c8 01       	movw	r24, r16
     dd2:	59 dd       	rcall	.-1358   	; 0x886 <prvIsQueueEmpty>
     dd4:	88 23       	and	r24, r24
     dd6:	09 f4       	brne	.+2      	; 0xdda <xQueueReceive+0xfe>
     dd8:	98 cf       	rjmp	.-208    	; 0xd0a <xQueueReceive+0x2e>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	29 96       	adiw	r28, 0x09	; 9
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	df 90       	pop	r13
     df6:	cf 90       	pop	r12
     df8:	08 95       	ret

00000dfa <xQueueSemaphoreTake>:
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	29 97       	sbiw	r28, 0x09	; 9
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
     e16:	8c 01       	movw	r16, r24
     e18:	4e 83       	std	Y+6, r20	; 0x06
     e1a:	5f 83       	std	Y+7, r21	; 0x07
     e1c:	68 87       	std	Y+8, r22	; 0x08
     e1e:	79 87       	std	Y+9, r23	; 0x09
     e20:	e1 2c       	mov	r14, r1
     e22:	f1 2c       	mov	r15, r1
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	0f 92       	push	r0
     e2a:	f8 01       	movw	r30, r16
     e2c:	86 8d       	ldd	r24, Z+30	; 0x1e
     e2e:	88 23       	and	r24, r24
     e30:	c9 f0       	breq	.+50     	; 0xe64 <xQueueSemaphoreTake+0x6a>
     e32:	81 50       	subi	r24, 0x01	; 1
     e34:	86 8f       	std	Z+30, r24	; 0x1e
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	89 2b       	or	r24, r25
     e3c:	29 f4       	brne	.+10     	; 0xe48 <xQueueSemaphoreTake+0x4e>
     e3e:	0e 94 25 13 	call	0x264a	; 0x264a <pvTaskIncrementMutexHeldCount>
     e42:	f8 01       	movw	r30, r16
     e44:	95 83       	std	Z+5, r25	; 0x05
     e46:	84 83       	std	Z+4, r24	; 0x04
     e48:	f8 01       	movw	r30, r16
     e4a:	80 85       	ldd	r24, Z+8	; 0x08
     e4c:	88 23       	and	r24, r24
     e4e:	31 f0       	breq	.+12     	; 0xe5c <xQueueSemaphoreTake+0x62>
     e50:	c8 01       	movw	r24, r16
     e52:	08 96       	adiw	r24, 0x08	; 8
     e54:	0e 94 89 10 	call	0x2112	; 0x2112 <xTaskRemoveFromEventList>
     e58:	81 11       	cpse	r24, r1
     e5a:	3d dc       	rcall	.-1926   	; 0x6d6 <vPortYield>
     e5c:	0f 90       	pop	r0
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	6f c0       	rjmp	.+222    	; 0xf42 <xQueueSemaphoreTake+0x148>
     e64:	8e 81       	ldd	r24, Y+6	; 0x06
     e66:	9f 81       	ldd	r25, Y+7	; 0x07
     e68:	a8 85       	ldd	r26, Y+8	; 0x08
     e6a:	b9 85       	ldd	r27, Y+9	; 0x09
     e6c:	89 2b       	or	r24, r25
     e6e:	8a 2b       	or	r24, r26
     e70:	8b 2b       	or	r24, r27
     e72:	21 f4       	brne	.+8      	; 0xe7c <xQueueSemaphoreTake+0x82>
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	63 c0       	rjmp	.+198    	; 0xf42 <xQueueSemaphoreTake+0x148>
     e7c:	f1 10       	cpse	r15, r1
     e7e:	06 c0       	rjmp	.+12     	; 0xe8c <xQueueSemaphoreTake+0x92>
     e80:	ce 01       	movw	r24, r28
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	0e 94 4e 11 	call	0x229c	; 0x229c <vTaskInternalSetTimeOutState>
     e88:	ff 24       	eor	r15, r15
     e8a:	f3 94       	inc	r15
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	4b d6       	rcall	.+3222   	; 0x1b28 <vTaskSuspendAll>
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	0f 92       	push	r0
     e98:	f8 01       	movw	r30, r16
     e9a:	81 a1       	ldd	r24, Z+33	; 0x21
     e9c:	8f 3f       	cpi	r24, 0xFF	; 255
     e9e:	09 f4       	brne	.+2      	; 0xea2 <xQueueSemaphoreTake+0xa8>
     ea0:	11 a2       	std	Z+33, r1	; 0x21
     ea2:	f8 01       	movw	r30, r16
     ea4:	82 a1       	ldd	r24, Z+34	; 0x22
     ea6:	8f 3f       	cpi	r24, 0xFF	; 255
     ea8:	09 f4       	brne	.+2      	; 0xeac <xQueueSemaphoreTake+0xb2>
     eaa:	12 a2       	std	Z+34, r1	; 0x22
     eac:	0f 90       	pop	r0
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	be 01       	movw	r22, r28
     eb2:	6a 5f       	subi	r22, 0xFA	; 250
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	ce 01       	movw	r24, r28
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	0e 94 5f 11 	call	0x22be	; 0x22be <xTaskCheckForTimeOut>
     ebe:	81 11       	cpse	r24, r1
     ec0:	26 c0       	rjmp	.+76     	; 0xf0e <xQueueSemaphoreTake+0x114>
     ec2:	c8 01       	movw	r24, r16
     ec4:	e0 dc       	rcall	.-1600   	; 0x886 <prvIsQueueEmpty>
     ec6:	88 23       	and	r24, r24
     ec8:	f1 f0       	breq	.+60     	; 0xf06 <xQueueSemaphoreTake+0x10c>
     eca:	f8 01       	movw	r30, r16
     ecc:	80 81       	ld	r24, Z
     ece:	91 81       	ldd	r25, Z+1	; 0x01
     ed0:	89 2b       	or	r24, r25
     ed2:	51 f4       	brne	.+20     	; 0xee8 <xQueueSemaphoreTake+0xee>
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	0f 92       	push	r0
     eda:	84 81       	ldd	r24, Z+4	; 0x04
     edc:	95 81       	ldd	r25, Z+5	; 0x05
     ede:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <xTaskPriorityInherit>
     ee2:	e8 2e       	mov	r14, r24
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	4e 81       	ldd	r20, Y+6	; 0x06
     eea:	5f 81       	ldd	r21, Y+7	; 0x07
     eec:	68 85       	ldd	r22, Y+8	; 0x08
     eee:	79 85       	ldd	r23, Y+9	; 0x09
     ef0:	c8 01       	movw	r24, r16
     ef2:	43 96       	adiw	r24, 0x13	; 19
     ef4:	0e 94 30 10 	call	0x2060	; 0x2060 <vTaskPlaceOnEventList>
     ef8:	c8 01       	movw	r24, r16
     efa:	59 dd       	rcall	.-1358   	; 0x9ae <prvUnlockQueue>
     efc:	55 d7       	rcall	.+3754   	; 0x1da8 <xTaskResumeAll>
     efe:	81 11       	cpse	r24, r1
     f00:	91 cf       	rjmp	.-222    	; 0xe24 <xQueueSemaphoreTake+0x2a>
     f02:	e9 db       	rcall	.-2094   	; 0x6d6 <vPortYield>
     f04:	8f cf       	rjmp	.-226    	; 0xe24 <xQueueSemaphoreTake+0x2a>
     f06:	c8 01       	movw	r24, r16
     f08:	52 dd       	rcall	.-1372   	; 0x9ae <prvUnlockQueue>
     f0a:	4e d7       	rcall	.+3740   	; 0x1da8 <xTaskResumeAll>
     f0c:	8b cf       	rjmp	.-234    	; 0xe24 <xQueueSemaphoreTake+0x2a>
     f0e:	c8 01       	movw	r24, r16
     f10:	4e dd       	rcall	.-1380   	; 0x9ae <prvUnlockQueue>
     f12:	4a d7       	rcall	.+3732   	; 0x1da8 <xTaskResumeAll>
     f14:	c8 01       	movw	r24, r16
     f16:	b7 dc       	rcall	.-1682   	; 0x886 <prvIsQueueEmpty>
     f18:	88 23       	and	r24, r24
     f1a:	09 f4       	brne	.+2      	; 0xf1e <xQueueSemaphoreTake+0x124>
     f1c:	83 cf       	rjmp	.-250    	; 0xe24 <xQueueSemaphoreTake+0x2a>
     f1e:	ee 20       	and	r14, r14
     f20:	79 f0       	breq	.+30     	; 0xf40 <xQueueSemaphoreTake+0x146>
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	0f 92       	push	r0
     f28:	c8 01       	movw	r24, r16
     f2a:	9d dc       	rcall	.-1734   	; 0x866 <prvGetDisinheritPriorityAfterTimeout>
     f2c:	68 2f       	mov	r22, r24
     f2e:	f8 01       	movw	r30, r16
     f30:	84 81       	ldd	r24, Z+4	; 0x04
     f32:	95 81       	ldd	r25, Z+5	; 0x05
     f34:	0e 94 be 12 	call	0x257c	; 0x257c <vTaskPriorityDisinheritAfterTimeout>
     f38:	0f 90       	pop	r0
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <xQueueSemaphoreTake+0x148>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	29 96       	adiw	r28, 0x09	; 9
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	08 95       	ret

00000f5c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	0f 92       	push	r0
     f68:	89 a1       	ldd	r24, Y+33	; 0x21
     f6a:	8f 3f       	cpi	r24, 0xFF	; 255
     f6c:	09 f4       	brne	.+2      	; 0xf70 <vQueueWaitForMessageRestricted+0x14>
     f6e:	19 a2       	std	Y+33, r1	; 0x21
     f70:	8a a1       	ldd	r24, Y+34	; 0x22
     f72:	8f 3f       	cpi	r24, 0xFF	; 255
     f74:	09 f4       	brne	.+2      	; 0xf78 <vQueueWaitForMessageRestricted+0x1c>
     f76:	1a a2       	std	Y+34, r1	; 0x22
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     f7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f7e:	81 11       	cpse	r24, r1
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     f82:	ce 01       	movw	r24, r28
     f84:	43 96       	adiw	r24, 0x13	; 19
     f86:	0e 94 47 10 	call	0x208e	; 0x208e <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     f8a:	ce 01       	movw	r24, r28
     f8c:	10 dd       	rcall	.-1504   	; 0x9ae <prvUnlockQueue>
    }
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	08 95       	ret

00000f94 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     f94:	fc 01       	movw	r30, r24
     f96:	44 81       	ldd	r20, Z+4	; 0x04
     f98:	55 81       	ldd	r21, Z+5	; 0x05
     f9a:	22 81       	ldd	r18, Z+2	; 0x02
     f9c:	33 81       	ldd	r19, Z+3	; 0x03
     f9e:	24 0f       	add	r18, r20
     fa0:	35 1f       	adc	r19, r21
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	b9 01       	movw	r22, r18
     fa8:	68 1b       	sub	r22, r24
     faa:	79 0b       	sbc	r23, r25
     fac:	cb 01       	movw	r24, r22
     fae:	64 17       	cp	r22, r20
     fb0:	75 07       	cpc	r23, r21
     fb2:	10 f0       	brcs	.+4      	; 0xfb8 <prvBytesInBuffer+0x24>
     fb4:	84 1b       	sub	r24, r20
     fb6:	95 0b       	sbc	r25, r21
     fb8:	08 95       	ret

00000fba <prvInitialiseNewStreamBuffer>:
     fba:	0f 93       	push	r16
     fbc:	fc 01       	movw	r30, r24
     fbe:	8f e0       	ldi	r24, 0x0F	; 15
     fc0:	df 01       	movw	r26, r30
     fc2:	1d 92       	st	X+, r1
     fc4:	8a 95       	dec	r24
     fc6:	e9 f7       	brne	.-6      	; 0xfc2 <prvInitialiseNewStreamBuffer+0x8>
     fc8:	75 87       	std	Z+13, r23	; 0x0d
     fca:	64 87       	std	Z+12, r22	; 0x0c
     fcc:	55 83       	std	Z+5, r21	; 0x05
     fce:	44 83       	std	Z+4, r20	; 0x04
     fd0:	37 83       	std	Z+7, r19	; 0x07
     fd2:	26 83       	std	Z+6, r18	; 0x06
     fd4:	06 87       	std	Z+14, r16	; 0x0e
     fd6:	0f 91       	pop	r16
     fd8:	08 95       	ret

00000fda <prvWriteBytesToBuffer>:
     fda:	af 92       	push	r10
     fdc:	bf 92       	push	r11
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	6c 01       	movw	r12, r24
     ff0:	5b 01       	movw	r10, r22
     ff2:	7a 01       	movw	r14, r20
     ff4:	fc 01       	movw	r30, r24
     ff6:	c2 81       	ldd	r28, Z+2	; 0x02
     ff8:	d3 81       	ldd	r29, Z+3	; 0x03
     ffa:	04 81       	ldd	r16, Z+4	; 0x04
     ffc:	15 81       	ldd	r17, Z+5	; 0x05
     ffe:	0c 1b       	sub	r16, r28
    1000:	1d 0b       	sbc	r17, r29
    1002:	40 17       	cp	r20, r16
    1004:	51 07       	cpc	r21, r17
    1006:	08 f4       	brcc	.+2      	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
    1008:	8a 01       	movw	r16, r20
    100a:	f6 01       	movw	r30, r12
    100c:	84 85       	ldd	r24, Z+12	; 0x0c
    100e:	95 85       	ldd	r25, Z+13	; 0x0d
    1010:	a8 01       	movw	r20, r16
    1012:	b5 01       	movw	r22, r10
    1014:	8c 0f       	add	r24, r28
    1016:	9d 1f       	adc	r25, r29
    1018:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <memcpy>
    101c:	0e 15       	cp	r16, r14
    101e:	1f 05       	cpc	r17, r15
    1020:	58 f4       	brcc	.+22     	; 0x1038 <__EEPROM_REGION_LENGTH__+0x38>
    1022:	a7 01       	movw	r20, r14
    1024:	40 1b       	sub	r20, r16
    1026:	51 0b       	sbc	r21, r17
    1028:	b5 01       	movw	r22, r10
    102a:	60 0f       	add	r22, r16
    102c:	71 1f       	adc	r23, r17
    102e:	f6 01       	movw	r30, r12
    1030:	84 85       	ldd	r24, Z+12	; 0x0c
    1032:	95 85       	ldd	r25, Z+13	; 0x0d
    1034:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <memcpy>
    1038:	ce 01       	movw	r24, r28
    103a:	8e 0d       	add	r24, r14
    103c:	9f 1d       	adc	r25, r15
    103e:	f6 01       	movw	r30, r12
    1040:	24 81       	ldd	r18, Z+4	; 0x04
    1042:	35 81       	ldd	r19, Z+5	; 0x05
    1044:	82 17       	cp	r24, r18
    1046:	93 07       	cpc	r25, r19
    1048:	10 f0       	brcs	.+4      	; 0x104e <__EEPROM_REGION_LENGTH__+0x4e>
    104a:	82 1b       	sub	r24, r18
    104c:	93 0b       	sbc	r25, r19
    104e:	f6 01       	movw	r30, r12
    1050:	93 83       	std	Z+3, r25	; 0x03
    1052:	82 83       	std	Z+2, r24	; 0x02
    1054:	c7 01       	movw	r24, r14
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	df 90       	pop	r13
    1064:	cf 90       	pop	r12
    1066:	bf 90       	pop	r11
    1068:	af 90       	pop	r10
    106a:	08 95       	ret

0000106c <prvWriteMessageToBuffer>:
    106c:	cf 92       	push	r12
    106e:	df 92       	push	r13
    1070:	ef 92       	push	r14
    1072:	ff 92       	push	r15
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	1f 92       	push	r1
    107e:	1f 92       	push	r1
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	7c 01       	movw	r14, r24
    1086:	6b 01       	movw	r12, r22
    1088:	5a 83       	std	Y+2, r21	; 0x02
    108a:	49 83       	std	Y+1, r20	; 0x01
    108c:	21 15       	cp	r18, r1
    108e:	31 05       	cpc	r19, r1
    1090:	c1 f0       	breq	.+48     	; 0x10c2 <prvWriteMessageToBuffer+0x56>
    1092:	fc 01       	movw	r30, r24
    1094:	86 85       	ldd	r24, Z+14	; 0x0e
    1096:	80 fd       	sbrc	r24, 0
    1098:	08 c0       	rjmp	.+16     	; 0x10aa <prvWriteMessageToBuffer+0x3e>
    109a:	42 17       	cp	r20, r18
    109c:	53 07       	cpc	r21, r19
    109e:	08 f4       	brcc	.+2      	; 0x10a2 <prvWriteMessageToBuffer+0x36>
    10a0:	9a 01       	movw	r18, r20
    10a2:	3a 83       	std	Y+2, r19	; 0x02
    10a4:	29 83       	std	Y+1, r18	; 0x01
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	0f c0       	rjmp	.+30     	; 0x10c8 <prvWriteMessageToBuffer+0x5c>
    10aa:	20 17       	cp	r18, r16
    10ac:	31 07       	cpc	r19, r17
    10ae:	58 f0       	brcs	.+22     	; 0x10c6 <prvWriteMessageToBuffer+0x5a>
    10b0:	42 e0       	ldi	r20, 0x02	; 2
    10b2:	50 e0       	ldi	r21, 0x00	; 0
    10b4:	be 01       	movw	r22, r28
    10b6:	6f 5f       	subi	r22, 0xFF	; 255
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ba:	c7 01       	movw	r24, r14
    10bc:	8e df       	rcall	.-228    	; 0xfda <prvWriteBytesToBuffer>
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	03 c0       	rjmp	.+6      	; 0x10c8 <prvWriteMessageToBuffer+0x5c>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	01 c0       	rjmp	.+2      	; 0x10c8 <prvWriteMessageToBuffer+0x5c>
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	88 23       	and	r24, r24
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <prvWriteMessageToBuffer+0x6c>
    10cc:	49 81       	ldd	r20, Y+1	; 0x01
    10ce:	5a 81       	ldd	r21, Y+2	; 0x02
    10d0:	b6 01       	movw	r22, r12
    10d2:	c7 01       	movw	r24, r14
    10d4:	82 df       	rcall	.-252    	; 0xfda <prvWriteBytesToBuffer>
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <prvWriteMessageToBuffer+0x70>
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	ff 90       	pop	r15
    10ea:	ef 90       	pop	r14
    10ec:	df 90       	pop	r13
    10ee:	cf 90       	pop	r12
    10f0:	08 95       	ret

000010f2 <prvReadBytesFromBuffer>:
    10f2:	af 92       	push	r10
    10f4:	bf 92       	push	r11
    10f6:	cf 92       	push	r12
    10f8:	df 92       	push	r13
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	7c 01       	movw	r14, r24
    1108:	5b 01       	movw	r10, r22
    110a:	e9 01       	movw	r28, r18
    110c:	42 17       	cp	r20, r18
    110e:	53 07       	cpc	r21, r19
    1110:	08 f4       	brcc	.+2      	; 0x1114 <prvReadBytesFromBuffer+0x22>
    1112:	ea 01       	movw	r28, r20
    1114:	20 97       	sbiw	r28, 0x00	; 0
    1116:	81 f1       	breq	.+96     	; 0x1178 <prvReadBytesFromBuffer+0x86>
    1118:	f7 01       	movw	r30, r14
    111a:	00 81       	ld	r16, Z
    111c:	11 81       	ldd	r17, Z+1	; 0x01
    111e:	84 81       	ldd	r24, Z+4	; 0x04
    1120:	95 81       	ldd	r25, Z+5	; 0x05
    1122:	80 1b       	sub	r24, r16
    1124:	91 0b       	sbc	r25, r17
    1126:	6e 01       	movw	r12, r28
    1128:	8c 17       	cp	r24, r28
    112a:	9d 07       	cpc	r25, r29
    112c:	08 f4       	brcc	.+2      	; 0x1130 <prvReadBytesFromBuffer+0x3e>
    112e:	6c 01       	movw	r12, r24
    1130:	f7 01       	movw	r30, r14
    1132:	64 85       	ldd	r22, Z+12	; 0x0c
    1134:	75 85       	ldd	r23, Z+13	; 0x0d
    1136:	60 0f       	add	r22, r16
    1138:	71 1f       	adc	r23, r17
    113a:	a6 01       	movw	r20, r12
    113c:	c5 01       	movw	r24, r10
    113e:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <memcpy>
    1142:	cc 16       	cp	r12, r28
    1144:	dd 06       	cpc	r13, r29
    1146:	58 f4       	brcc	.+22     	; 0x115e <prvReadBytesFromBuffer+0x6c>
    1148:	ae 01       	movw	r20, r28
    114a:	4c 19       	sub	r20, r12
    114c:	5d 09       	sbc	r21, r13
    114e:	f7 01       	movw	r30, r14
    1150:	64 85       	ldd	r22, Z+12	; 0x0c
    1152:	75 85       	ldd	r23, Z+13	; 0x0d
    1154:	c5 01       	movw	r24, r10
    1156:	8c 0d       	add	r24, r12
    1158:	9d 1d       	adc	r25, r13
    115a:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <memcpy>
    115e:	0c 0f       	add	r16, r28
    1160:	1d 1f       	adc	r17, r29
    1162:	f7 01       	movw	r30, r14
    1164:	84 81       	ldd	r24, Z+4	; 0x04
    1166:	95 81       	ldd	r25, Z+5	; 0x05
    1168:	08 17       	cp	r16, r24
    116a:	19 07       	cpc	r17, r25
    116c:	10 f0       	brcs	.+4      	; 0x1172 <prvReadBytesFromBuffer+0x80>
    116e:	08 1b       	sub	r16, r24
    1170:	19 0b       	sbc	r17, r25
    1172:	f7 01       	movw	r30, r14
    1174:	11 83       	std	Z+1, r17	; 0x01
    1176:	00 83       	st	Z, r16
    1178:	ce 01       	movw	r24, r28
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	ff 90       	pop	r15
    1184:	ef 90       	pop	r14
    1186:	df 90       	pop	r13
    1188:	cf 90       	pop	r12
    118a:	bf 90       	pop	r11
    118c:	af 90       	pop	r10
    118e:	08 95       	ret

00001190 <prvReadMessageFromBuffer>:
    1190:	6f 92       	push	r6
    1192:	7f 92       	push	r7
    1194:	8f 92       	push	r8
    1196:	9f 92       	push	r9
    1198:	af 92       	push	r10
    119a:	bf 92       	push	r11
    119c:	cf 92       	push	r12
    119e:	df 92       	push	r13
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	1f 92       	push	r1
    11ae:	1f 92       	push	r1
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	6c 01       	movw	r12, r24
    11b6:	4b 01       	movw	r8, r22
    11b8:	5a 01       	movw	r10, r20
    11ba:	79 01       	movw	r14, r18
    11bc:	01 15       	cp	r16, r1
    11be:	11 05       	cpc	r17, r1
    11c0:	b1 f0       	breq	.+44     	; 0x11ee <prvReadMessageFromBuffer+0x5e>
    11c2:	fc 01       	movw	r30, r24
    11c4:	60 80       	ld	r6, Z
    11c6:	71 80       	ldd	r7, Z+1	; 0x01
    11c8:	a8 01       	movw	r20, r16
    11ca:	be 01       	movw	r22, r28
    11cc:	6f 5f       	subi	r22, 0xFF	; 255
    11ce:	7f 4f       	sbci	r23, 0xFF	; 255
    11d0:	90 df       	rcall	.-224    	; 0x10f2 <prvReadBytesFromBuffer>
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	e0 1a       	sub	r14, r16
    11d8:	f1 0a       	sbc	r15, r17
    11da:	a8 16       	cp	r10, r24
    11dc:	b9 06       	cpc	r11, r25
    11de:	30 f4       	brcc	.+12     	; 0x11ec <prvReadMessageFromBuffer+0x5c>
    11e0:	f6 01       	movw	r30, r12
    11e2:	71 82       	std	Z+1, r7	; 0x01
    11e4:	60 82       	st	Z, r6
    11e6:	a1 2c       	mov	r10, r1
    11e8:	b1 2c       	mov	r11, r1
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <prvReadMessageFromBuffer+0x5e>
    11ec:	5c 01       	movw	r10, r24
    11ee:	97 01       	movw	r18, r14
    11f0:	a5 01       	movw	r20, r10
    11f2:	b4 01       	movw	r22, r8
    11f4:	c6 01       	movw	r24, r12
    11f6:	7d df       	rcall	.-262    	; 0x10f2 <prvReadBytesFromBuffer>
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	df 90       	pop	r13
    120a:	cf 90       	pop	r12
    120c:	bf 90       	pop	r11
    120e:	af 90       	pop	r10
    1210:	9f 90       	pop	r9
    1212:	8f 90       	pop	r8
    1214:	7f 90       	pop	r7
    1216:	6f 90       	pop	r6
    1218:	08 95       	ret

0000121a <xStreamBufferGenericCreate>:
    121a:	cf 92       	push	r12
    121c:	df 92       	push	r13
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	ec 01       	movw	r28, r24
    122a:	6b 01       	movw	r12, r22
    122c:	41 30       	cpi	r20, 0x01	; 1
    122e:	11 f4       	brne	.+4      	; 0x1234 <xStreamBufferGenericCreate+0x1a>
    1230:	01 e0       	ldi	r16, 0x01	; 1
    1232:	01 c0       	rjmp	.+2      	; 0x1236 <xStreamBufferGenericCreate+0x1c>
    1234:	00 e0       	ldi	r16, 0x00	; 0
    1236:	c1 14       	cp	r12, r1
    1238:	d1 04       	cpc	r13, r1
    123a:	19 f4       	brne	.+6      	; 0x1242 <xStreamBufferGenericCreate+0x28>
    123c:	cc 24       	eor	r12, r12
    123e:	c3 94       	inc	r12
    1240:	d1 2c       	mov	r13, r1
    1242:	ce 01       	movw	r24, r28
    1244:	40 96       	adiw	r24, 0x10	; 16
    1246:	c8 17       	cp	r28, r24
    1248:	d9 07       	cpc	r29, r25
    124a:	20 f4       	brcc	.+8      	; 0x1254 <xStreamBufferGenericCreate+0x3a>
    124c:	21 96       	adiw	r28, 0x01	; 1
    124e:	8f d8       	rcall	.-3810   	; 0x36e <pvPortMalloc>
    1250:	7c 01       	movw	r14, r24
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <xStreamBufferGenericCreate+0x3e>
    1254:	e1 2c       	mov	r14, r1
    1256:	f1 2c       	mov	r15, r1
    1258:	e1 14       	cp	r14, r1
    125a:	f1 04       	cpc	r15, r1
    125c:	39 f0       	breq	.+14     	; 0x126c <xStreamBufferGenericCreate+0x52>
    125e:	96 01       	movw	r18, r12
    1260:	ae 01       	movw	r20, r28
    1262:	b7 01       	movw	r22, r14
    1264:	61 5f       	subi	r22, 0xF1	; 241
    1266:	7f 4f       	sbci	r23, 0xFF	; 255
    1268:	c7 01       	movw	r24, r14
    126a:	a7 de       	rcall	.-690    	; 0xfba <prvInitialiseNewStreamBuffer>
    126c:	c7 01       	movw	r24, r14
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	0f 91       	pop	r16
    1274:	ff 90       	pop	r15
    1276:	ef 90       	pop	r14
    1278:	df 90       	pop	r13
    127a:	cf 90       	pop	r12
    127c:	08 95       	ret

0000127e <xStreamBufferReset>:
    127e:	0f 93       	push	r16
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	0f 92       	push	r0
    1286:	fc 01       	movw	r30, r24
    1288:	20 85       	ldd	r18, Z+8	; 0x08
    128a:	31 85       	ldd	r19, Z+9	; 0x09
    128c:	23 2b       	or	r18, r19
    128e:	71 f4       	brne	.+28     	; 0x12ac <xStreamBufferReset+0x2e>
    1290:	22 85       	ldd	r18, Z+10	; 0x0a
    1292:	33 85       	ldd	r19, Z+11	; 0x0b
    1294:	23 2b       	or	r18, r19
    1296:	61 f4       	brne	.+24     	; 0x12b0 <xStreamBufferReset+0x32>
    1298:	26 81       	ldd	r18, Z+6	; 0x06
    129a:	37 81       	ldd	r19, Z+7	; 0x07
    129c:	44 81       	ldd	r20, Z+4	; 0x04
    129e:	55 81       	ldd	r21, Z+5	; 0x05
    12a0:	64 85       	ldd	r22, Z+12	; 0x0c
    12a2:	75 85       	ldd	r23, Z+13	; 0x0d
    12a4:	06 85       	ldd	r16, Z+14	; 0x0e
    12a6:	89 de       	rcall	.-750    	; 0xfba <prvInitialiseNewStreamBuffer>
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <xStreamBufferReset+0x34>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <xStreamBufferReset+0x34>
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	0f 90       	pop	r0
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	0f 91       	pop	r16
    12b8:	08 95       	ret

000012ba <xStreamBufferSpacesAvailable>:
    12ba:	fc 01       	movw	r30, r24
    12bc:	24 81       	ldd	r18, Z+4	; 0x04
    12be:	35 81       	ldd	r19, Z+5	; 0x05
    12c0:	80 81       	ld	r24, Z
    12c2:	91 81       	ldd	r25, Z+1	; 0x01
    12c4:	82 0f       	add	r24, r18
    12c6:	93 1f       	adc	r25, r19
    12c8:	42 81       	ldd	r20, Z+2	; 0x02
    12ca:	53 81       	ldd	r21, Z+3	; 0x03
    12cc:	84 1b       	sub	r24, r20
    12ce:	95 0b       	sbc	r25, r21
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	82 17       	cp	r24, r18
    12d4:	93 07       	cpc	r25, r19
    12d6:	10 f0       	brcs	.+4      	; 0x12dc <xStreamBufferSpacesAvailable+0x22>
    12d8:	82 1b       	sub	r24, r18
    12da:	93 0b       	sbc	r25, r19
    12dc:	08 95       	ret

000012de <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    12de:	2f 92       	push	r2
    12e0:	3f 92       	push	r3
    12e2:	4f 92       	push	r4
    12e4:	5f 92       	push	r5
    12e6:	6f 92       	push	r6
    12e8:	7f 92       	push	r7
    12ea:	8f 92       	push	r8
    12ec:	9f 92       	push	r9
    12ee:	af 92       	push	r10
    12f0:	bf 92       	push	r11
    12f2:	cf 92       	push	r12
    12f4:	df 92       	push	r13
    12f6:	ef 92       	push	r14
    12f8:	ff 92       	push	r15
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	2b 97       	sbiw	r28, 0x0b	; 11
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	4c 01       	movw	r8, r24
    1314:	7b 87       	std	Y+11, r23	; 0x0b
    1316:	6a 87       	std	Y+10, r22	; 0x0a
    1318:	1a 01       	movw	r2, r20
    131a:	0e 83       	std	Y+6, r16	; 0x06
    131c:	1f 83       	std	Y+7, r17	; 0x07
    131e:	28 87       	std	Y+8, r18	; 0x08
    1320:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1322:	fc 01       	movw	r30, r24
    1324:	84 81       	ldd	r24, Z+4	; 0x04
    1326:	95 81       	ldd	r25, Z+5	; 0x05
    1328:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    132a:	26 85       	ldd	r18, Z+14	; 0x0e
    132c:	20 ff       	sbrs	r18, 0
    132e:	0c c0       	rjmp	.+24     	; 0x1348 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1330:	2a 01       	movw	r4, r20
    1332:	f2 e0       	ldi	r31, 0x02	; 2
    1334:	4f 0e       	add	r4, r31
    1336:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1338:	84 15       	cp	r24, r4
    133a:	95 05       	cpc	r25, r5
    133c:	58 f4       	brcc	.+22     	; 0x1354 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    133e:	1e 82       	std	Y+6, r1	; 0x06
    1340:	1f 82       	std	Y+7, r1	; 0x07
    1342:	18 86       	std	Y+8, r1	; 0x08
    1344:	19 86       	std	Y+9, r1	; 0x09
    1346:	06 c0       	rjmp	.+12     	; 0x1354 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1348:	84 17       	cp	r24, r20
    134a:	95 07       	cpc	r25, r21
    134c:	10 f0       	brcs	.+4      	; 0x1352 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    134e:	2a 01       	movw	r4, r20
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1352:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	a8 85       	ldd	r26, Y+8	; 0x08
    135a:	b9 85       	ldd	r27, Y+9	; 0x09
    135c:	89 2b       	or	r24, r25
    135e:	8a 2b       	or	r24, r26
    1360:	8b 2b       	or	r24, r27
    1362:	09 f4       	brne	.+2      	; 0x1366 <xStreamBufferSend+0x88>
    1364:	36 c0       	rjmp	.+108    	; 0x13d2 <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1366:	ce 01       	movw	r24, r28
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	82 d7       	rcall	.+3844   	; 0x2270 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1372:	c4 01       	movw	r24, r8
    1374:	a2 df       	rcall	.-188    	; 0x12ba <xStreamBufferSpacesAvailable>
    1376:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1378:	84 15       	cp	r24, r4
    137a:	95 05       	cpc	r25, r5
    137c:	38 f5       	brcc	.+78     	; 0x13cc <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	0e 94 f7 15 	call	0x2bee	; 0x2bee <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1388:	0e 94 c9 11 	call	0x2392	; 0x2392 <xTaskGetCurrentTaskHandle>
    138c:	f4 01       	movw	r30, r8
    138e:	93 87       	std	Z+11, r25	; 0x0b
    1390:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1392:	0f 90       	pop	r0
    1394:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1396:	ae 80       	ldd	r10, Y+6	; 0x06
    1398:	bf 80       	ldd	r11, Y+7	; 0x07
    139a:	c8 84       	ldd	r12, Y+8	; 0x08
    139c:	d9 84       	ldd	r13, Y+9	; 0x09
    139e:	e1 2c       	mov	r14, r1
    13a0:	f1 2c       	mov	r15, r1
    13a2:	00 e0       	ldi	r16, 0x00	; 0
    13a4:	10 e0       	ldi	r17, 0x00	; 0
    13a6:	98 01       	movw	r18, r16
    13a8:	40 e0       	ldi	r20, 0x00	; 0
    13aa:	50 e0       	ldi	r21, 0x00	; 0
    13ac:	ba 01       	movw	r22, r20
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	0e 94 37 13 	call	0x266e	; 0x266e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    13b4:	f4 01       	movw	r30, r8
    13b6:	13 86       	std	Z+11, r1	; 0x0b
    13b8:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    13ba:	be 01       	movw	r22, r28
    13bc:	6a 5f       	subi	r22, 0xFA	; 250
    13be:	7f 4f       	sbci	r23, 0xFF	; 255
    13c0:	ce 01       	movw	r24, r28
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	7c d7       	rcall	.+3832   	; 0x22be <xTaskCheckForTimeOut>
    13c6:	88 23       	and	r24, r24
    13c8:	89 f2       	breq	.-94     	; 0x136c <xStreamBufferSend+0x8e>
    13ca:	05 c0       	rjmp	.+10     	; 0x13d6 <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    13cc:	0f 90       	pop	r0
    13ce:	0f be       	out	0x3f, r0	; 63
                    break;
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    13d2:	61 2c       	mov	r6, r1
    13d4:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    13d6:	61 14       	cp	r6, r1
    13d8:	71 04       	cpc	r7, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    13da:	19 f4       	brne	.+6      	; 0x13e2 <xStreamBufferSend+0x104>
    13dc:	c4 01       	movw	r24, r8
    13de:	6d df       	rcall	.-294    	; 0x12ba <xStreamBufferSpacesAvailable>
    13e0:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    13e2:	82 01       	movw	r16, r4
    13e4:	93 01       	movw	r18, r6
    13e6:	a1 01       	movw	r20, r2
    13e8:	6a 85       	ldd	r22, Y+10	; 0x0a
    13ea:	7b 85       	ldd	r23, Y+11	; 0x0b
    13ec:	c4 01       	movw	r24, r8
    13ee:	3e de       	rcall	.-900    	; 0x106c <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    13f0:	6c 01       	movw	r12, r24
    13f2:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    13f4:	e9 f0       	breq	.+58     	; 0x1430 <xStreamBufferSend+0x152>
    13f6:	c4 01       	movw	r24, r8
    13f8:	cd dd       	rcall	.-1126   	; 0xf94 <prvBytesInBuffer>
    13fa:	f4 01       	movw	r30, r8
    13fc:	26 81       	ldd	r18, Z+6	; 0x06
    13fe:	37 81       	ldd	r19, Z+7	; 0x07
    1400:	82 17       	cp	r24, r18
    1402:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1404:	a8 f0       	brcs	.+42     	; 0x1430 <xStreamBufferSend+0x152>
    1406:	90 d3       	rcall	.+1824   	; 0x1b28 <vTaskSuspendAll>
    1408:	f4 01       	movw	r30, r8
    140a:	80 85       	ldd	r24, Z+8	; 0x08
    140c:	91 85       	ldd	r25, Z+9	; 0x09
    140e:	89 2b       	or	r24, r25
    1410:	71 f0       	breq	.+28     	; 0x142e <xStreamBufferSend+0x150>
    1412:	80 85       	ldd	r24, Z+8	; 0x08
    1414:	91 85       	ldd	r25, Z+9	; 0x09
    1416:	e1 2c       	mov	r14, r1
    1418:	f1 2c       	mov	r15, r1
    141a:	00 e0       	ldi	r16, 0x00	; 0
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	a9 01       	movw	r20, r18
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	0e 94 de 13 	call	0x27bc	; 0x27bc <xTaskGenericNotify>
    1428:	f4 01       	movw	r30, r8
    142a:	11 86       	std	Z+9, r1	; 0x09
    142c:	10 86       	std	Z+8, r1	; 0x08
    142e:	bc d4       	rcall	.+2424   	; 0x1da8 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1430:	c6 01       	movw	r24, r12
    1432:	2b 96       	adiw	r28, 0x0b	; 11
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	df 90       	pop	r13
    144c:	cf 90       	pop	r12
    144e:	bf 90       	pop	r11
    1450:	af 90       	pop	r10
    1452:	9f 90       	pop	r9
    1454:	8f 90       	pop	r8
    1456:	7f 90       	pop	r7
    1458:	6f 90       	pop	r6
    145a:	5f 90       	pop	r5
    145c:	4f 90       	pop	r4
    145e:	3f 90       	pop	r3
    1460:	2f 90       	pop	r2
    1462:	08 95       	ret

00001464 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1464:	af 92       	push	r10
    1466:	bf 92       	push	r11
    1468:	cf 92       	push	r12
    146a:	df 92       	push	r13
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	ec 01       	movw	r28, r24
    147a:	7b 01       	movw	r14, r22
    147c:	5a 01       	movw	r10, r20
    147e:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1480:	8e 85       	ldd	r24, Y+14	; 0x0e
    1482:	80 ff       	sbrs	r24, 0
    1484:	04 c0       	rjmp	.+8      	; 0x148e <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1486:	8a 01       	movw	r16, r20
    1488:	0e 5f       	subi	r16, 0xFE	; 254
    148a:	1f 4f       	sbci	r17, 0xFF	; 255
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    148e:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1490:	ce 01       	movw	r24, r28
    1492:	13 df       	rcall	.-474    	; 0x12ba <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1494:	9c 01       	movw	r18, r24
    1496:	a5 01       	movw	r20, r10
    1498:	b7 01       	movw	r22, r14
    149a:	ce 01       	movw	r24, r28
    149c:	e7 dd       	rcall	.-1074   	; 0x106c <prvWriteMessageToBuffer>
    149e:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    14a0:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    14a2:	c1 f0       	breq	.+48     	; 0x14d4 <xStreamBufferSendFromISR+0x70>
    14a4:	ce 01       	movw	r24, r28
    14a6:	76 dd       	rcall	.-1300   	; 0xf94 <prvBytesInBuffer>
    14a8:	2e 81       	ldd	r18, Y+6	; 0x06
    14aa:	3f 81       	ldd	r19, Y+7	; 0x07
    14ac:	82 17       	cp	r24, r18
    14ae:	93 07       	cpc	r25, r19
    14b0:	88 f0       	brcs	.+34     	; 0x14d4 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    14b2:	88 85       	ldd	r24, Y+8	; 0x08
    14b4:	99 85       	ldd	r25, Y+9	; 0x09
    14b6:	89 2b       	or	r24, r25
    14b8:	69 f0       	breq	.+26     	; 0x14d4 <xStreamBufferSendFromISR+0x70>
    14ba:	88 85       	ldd	r24, Y+8	; 0x08
    14bc:	99 85       	ldd	r25, Y+9	; 0x09
    14be:	e1 2c       	mov	r14, r1
    14c0:	f1 2c       	mov	r15, r1
    14c2:	00 e0       	ldi	r16, 0x00	; 0
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	0e 94 d5 14 	call	0x29aa	; 0x29aa <xTaskGenericNotifyFromISR>
    14d0:	19 86       	std	Y+9, r1	; 0x09
    14d2:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    14d4:	c5 01       	movw	r24, r10
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	ef 90       	pop	r14
    14e2:	df 90       	pop	r13
    14e4:	cf 90       	pop	r12
    14e6:	bf 90       	pop	r11
    14e8:	af 90       	pop	r10
    14ea:	08 95       	ret

000014ec <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    14ec:	4f 92       	push	r4
    14ee:	5f 92       	push	r5
    14f0:	6f 92       	push	r6
    14f2:	7f 92       	push	r7
    14f4:	8f 92       	push	r8
    14f6:	9f 92       	push	r9
    14f8:	af 92       	push	r10
    14fa:	bf 92       	push	r11
    14fc:	cf 92       	push	r12
    14fe:	df 92       	push	r13
    1500:	ef 92       	push	r14
    1502:	ff 92       	push	r15
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	ec 01       	movw	r28, r24
    150e:	2b 01       	movw	r4, r22
    1510:	3a 01       	movw	r6, r20
    1512:	58 01       	movw	r10, r16
    1514:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1516:	8e 85       	ldd	r24, Y+14	; 0x0e
    1518:	80 ff       	sbrs	r24, 0
    151a:	05 c0       	rjmp	.+10     	; 0x1526 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    151c:	68 94       	set
    151e:	88 24       	eor	r8, r8
    1520:	81 f8       	bld	r8, 1
    1522:	91 2c       	mov	r9, r1
    1524:	02 c0       	rjmp	.+4      	; 0x152a <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1526:	81 2c       	mov	r8, r1
    1528:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    152a:	a1 14       	cp	r10, r1
    152c:	b1 04       	cpc	r11, r1
    152e:	c1 04       	cpc	r12, r1
    1530:	d1 04       	cpc	r13, r1
    1532:	39 f1       	breq	.+78     	; 0x1582 <xStreamBufferReceive+0x96>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    153a:	ce 01       	movw	r24, r28
    153c:	2b dd       	rcall	.-1450   	; 0xf94 <prvBytesInBuffer>
    153e:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1540:	88 16       	cp	r8, r24
    1542:	99 06       	cpc	r9, r25
    1544:	40 f0       	brcs	.+16     	; 0x1556 <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 f7 15 	call	0x2bee	; 0x2bee <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1550:	20 d7       	rcall	.+3648   	; 0x2392 <xTaskGetCurrentTaskHandle>
    1552:	99 87       	std	Y+9, r25	; 0x09
    1554:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1556:	0f 90       	pop	r0
    1558:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    155a:	8e 14       	cp	r8, r14
    155c:	9f 04       	cpc	r9, r15
    155e:	a0 f0       	brcs	.+40     	; 0x1588 <xStreamBufferReceive+0x9c>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1560:	e1 2c       	mov	r14, r1
    1562:	f1 2c       	mov	r15, r1
    1564:	00 e0       	ldi	r16, 0x00	; 0
    1566:	10 e0       	ldi	r17, 0x00	; 0
    1568:	98 01       	movw	r18, r16
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	ba 01       	movw	r22, r20
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	0e 94 37 13 	call	0x266e	; 0x266e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1576:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1578:	18 86       	std	Y+8, r1	; 0x08
    157a:	ce 01       	movw	r24, r28
    157c:	0b dd       	rcall	.-1514   	; 0xf94 <prvBytesInBuffer>
    157e:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1580:	03 c0       	rjmp	.+6      	; 0x1588 <xStreamBufferReceive+0x9c>
    1582:	ce 01       	movw	r24, r28
    1584:	07 dd       	rcall	.-1522   	; 0xf94 <prvBytesInBuffer>
    1586:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1588:	8e 14       	cp	r8, r14
    158a:	9f 04       	cpc	r9, r15
    158c:	e8 f4       	brcc	.+58     	; 0x15c8 <xStreamBufferReceive+0xdc>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    158e:	84 01       	movw	r16, r8
    1590:	97 01       	movw	r18, r14
    1592:	a3 01       	movw	r20, r6
    1594:	b2 01       	movw	r22, r4
    1596:	ce 01       	movw	r24, r28
    1598:	fb dd       	rcall	.-1034   	; 0x1190 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    159a:	6c 01       	movw	r12, r24
    159c:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    159e:	b1 f0       	breq	.+44     	; 0x15cc <xStreamBufferReceive+0xe0>
    15a0:	c3 d2       	rcall	.+1414   	; 0x1b28 <vTaskSuspendAll>
    15a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    15a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    15a6:	89 2b       	or	r24, r25
    15a8:	69 f0       	breq	.+26     	; 0x15c4 <xStreamBufferReceive+0xd8>
    15aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    15ae:	e1 2c       	mov	r14, r1
    15b0:	f1 2c       	mov	r15, r1
    15b2:	00 e0       	ldi	r16, 0x00	; 0
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	a9 01       	movw	r20, r18
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	0e 94 de 13 	call	0x27bc	; 0x27bc <xTaskGenericNotify>
    15c0:	1b 86       	std	Y+11, r1	; 0x0b
    15c2:	1a 86       	std	Y+10, r1	; 0x0a
    15c4:	f1 d3       	rcall	.+2018   	; 0x1da8 <xTaskResumeAll>
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <xStreamBufferReceive+0xe0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    15c8:	c1 2c       	mov	r12, r1
    15ca:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    15cc:	c6 01       	movw	r24, r12
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	df 90       	pop	r13
    15dc:	cf 90       	pop	r12
    15de:	bf 90       	pop	r11
    15e0:	af 90       	pop	r10
    15e2:	9f 90       	pop	r9
    15e4:	8f 90       	pop	r8
    15e6:	7f 90       	pop	r7
    15e8:	6f 90       	pop	r6
    15ea:	5f 90       	pop	r5
    15ec:	4f 90       	pop	r4
    15ee:	08 95       	ret

000015f0 <prvResetNextTaskUnblockTime>:
    15f0:	e0 91 d9 13 	lds	r30, 0x13D9	; 0x8013d9 <pxDelayedTaskList>
    15f4:	f0 91 da 13 	lds	r31, 0x13DA	; 0x8013da <pxDelayedTaskList+0x1>
    15f8:	80 81       	ld	r24, Z
    15fa:	81 11       	cpse	r24, r1
    15fc:	0c c0       	rjmp	.+24     	; 0x1616 <prvResetNextTaskUnblockTime+0x26>
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	9f ef       	ldi	r25, 0xFF	; 255
    1602:	dc 01       	movw	r26, r24
    1604:	80 93 a3 13 	sts	0x13A3, r24	; 0x8013a3 <xNextTaskUnblockTime>
    1608:	90 93 a4 13 	sts	0x13A4, r25	; 0x8013a4 <xNextTaskUnblockTime+0x1>
    160c:	a0 93 a5 13 	sts	0x13A5, r26	; 0x8013a5 <xNextTaskUnblockTime+0x2>
    1610:	b0 93 a6 13 	sts	0x13A6, r27	; 0x8013a6 <xNextTaskUnblockTime+0x3>
    1614:	08 95       	ret
    1616:	e0 91 d9 13 	lds	r30, 0x13D9	; 0x8013d9 <pxDelayedTaskList>
    161a:	f0 91 da 13 	lds	r31, 0x13DA	; 0x8013da <pxDelayedTaskList+0x1>
    161e:	07 80       	ldd	r0, Z+7	; 0x07
    1620:	f0 85       	ldd	r31, Z+8	; 0x08
    1622:	e0 2d       	mov	r30, r0
    1624:	80 81       	ld	r24, Z
    1626:	91 81       	ldd	r25, Z+1	; 0x01
    1628:	a2 81       	ldd	r26, Z+2	; 0x02
    162a:	b3 81       	ldd	r27, Z+3	; 0x03
    162c:	80 93 a3 13 	sts	0x13A3, r24	; 0x8013a3 <xNextTaskUnblockTime>
    1630:	90 93 a4 13 	sts	0x13A4, r25	; 0x8013a4 <xNextTaskUnblockTime+0x1>
    1634:	a0 93 a5 13 	sts	0x13A5, r26	; 0x8013a5 <xNextTaskUnblockTime+0x2>
    1638:	b0 93 a6 13 	sts	0x13A6, r27	; 0x8013a6 <xNextTaskUnblockTime+0x3>
    163c:	08 95       	ret

0000163e <prvDeleteTCB>:
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	ec 01       	movw	r28, r24
    1644:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1646:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1648:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vPortFree>
    164c:	ce 01       	movw	r24, r28
    164e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vPortFree>
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	08 95       	ret

00001658 <prvInitialiseNewTask>:
    1658:	4f 92       	push	r4
    165a:	5f 92       	push	r5
    165c:	6f 92       	push	r6
    165e:	7f 92       	push	r7
    1660:	8f 92       	push	r8
    1662:	9f 92       	push	r9
    1664:	af 92       	push	r10
    1666:	bf 92       	push	r11
    1668:	cf 92       	push	r12
    166a:	df 92       	push	r13
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	0f 93       	push	r16
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	2c 01       	movw	r4, r24
    1678:	5b 01       	movw	r10, r22
    167a:	4a 01       	movw	r8, r20
    167c:	39 01       	movw	r6, r18
    167e:	e6 01       	movw	r28, r12
    1680:	65 ea       	ldi	r22, 0xA5	; 165
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1686:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1688:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <memset>
    168c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    168e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1690:	21 e0       	ldi	r18, 0x01	; 1
    1692:	82 1a       	sub	r8, r18
    1694:	91 08       	sbc	r9, r1
    1696:	88 0e       	add	r8, r24
    1698:	99 1e       	adc	r9, r25
    169a:	a1 14       	cp	r10, r1
    169c:	b1 04       	cpc	r11, r1
    169e:	89 f4       	brne	.+34     	; 0x16c2 <prvInitialiseNewTask+0x6a>
    16a0:	15 c0       	rjmp	.+42     	; 0x16cc <prvInitialiseNewTask+0x74>
    16a2:	82 2f       	mov	r24, r18
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	f5 01       	movw	r30, r10
    16a8:	e8 0f       	add	r30, r24
    16aa:	f9 1f       	adc	r31, r25
    16ac:	30 81       	ld	r19, Z
    16ae:	de 01       	movw	r26, r28
    16b0:	a8 0f       	add	r26, r24
    16b2:	b9 1f       	adc	r27, r25
    16b4:	5d 96       	adiw	r26, 0x1d	; 29
    16b6:	3c 93       	st	X, r19
    16b8:	80 81       	ld	r24, Z
    16ba:	88 23       	and	r24, r24
    16bc:	29 f0       	breq	.+10     	; 0x16c8 <prvInitialiseNewTask+0x70>
    16be:	2f 5f       	subi	r18, 0xFF	; 255
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <prvInitialiseNewTask+0x6c>
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	20 31       	cpi	r18, 0x10	; 16
    16c6:	68 f3       	brcs	.-38     	; 0x16a2 <prvInitialiseNewTask+0x4a>
    16c8:	1c a6       	std	Y+44, r1	; 0x2c
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <prvInitialiseNewTask+0x76>
    16cc:	1d 8e       	std	Y+29, r1	; 0x1d
    16ce:	0a 30       	cpi	r16, 0x0A	; 10
    16d0:	08 f0       	brcs	.+2      	; 0x16d4 <prvInitialiseNewTask+0x7c>
    16d2:	09 e0       	ldi	r16, 0x09	; 9
    16d4:	0a 8f       	std	Y+26, r16	; 0x1a
    16d6:	0d a7       	std	Y+45, r16	; 0x2d
    16d8:	1e a6       	std	Y+46, r1	; 0x2e
    16da:	ce 01       	movw	r24, r28
    16dc:	02 96       	adiw	r24, 0x02	; 2
    16de:	0e 94 ae 02 	call	0x55c	; 0x55c <vListInitialiseItem>
    16e2:	ce 01       	movw	r24, r28
    16e4:	0e 96       	adiw	r24, 0x0e	; 14
    16e6:	0e 94 ae 02 	call	0x55c	; 0x55c <vListInitialiseItem>
    16ea:	db 87       	std	Y+11, r29	; 0x0b
    16ec:	ca 87       	std	Y+10, r28	; 0x0a
    16ee:	8a e0       	ldi	r24, 0x0A	; 10
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a0 e0       	ldi	r26, 0x00	; 0
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	80 1b       	sub	r24, r16
    16f8:	91 09       	sbc	r25, r1
    16fa:	a1 09       	sbc	r26, r1
    16fc:	b1 09       	sbc	r27, r1
    16fe:	8e 87       	std	Y+14, r24	; 0x0e
    1700:	9f 87       	std	Y+15, r25	; 0x0f
    1702:	a8 8b       	std	Y+16, r26	; 0x10
    1704:	b9 8b       	std	Y+17, r27	; 0x11
    1706:	df 8b       	std	Y+23, r29	; 0x17
    1708:	ce 8b       	std	Y+22, r28	; 0x16
    170a:	84 e0       	ldi	r24, 0x04	; 4
    170c:	fe 01       	movw	r30, r28
    170e:	bf 96       	adiw	r30, 0x2f	; 47
    1710:	df 01       	movw	r26, r30
    1712:	1d 92       	st	X+, r1
    1714:	8a 95       	dec	r24
    1716:	e9 f7       	brne	.-6      	; 0x1712 <prvInitialiseNewTask+0xba>
    1718:	1b aa       	std	Y+51, r1	; 0x33
    171a:	a3 01       	movw	r20, r6
    171c:	b2 01       	movw	r22, r4
    171e:	c4 01       	movw	r24, r8
    1720:	0e 94 22 03 	call	0x644	; 0x644 <pxPortInitialiseStack>
    1724:	99 83       	std	Y+1, r25	; 0x01
    1726:	88 83       	st	Y, r24
    1728:	e1 14       	cp	r14, r1
    172a:	f1 04       	cpc	r15, r1
    172c:	19 f0       	breq	.+6      	; 0x1734 <prvInitialiseNewTask+0xdc>
    172e:	f7 01       	movw	r30, r14
    1730:	d1 83       	std	Z+1, r29	; 0x01
    1732:	c0 83       	st	Z, r28
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	0f 91       	pop	r16
    173a:	ff 90       	pop	r15
    173c:	ef 90       	pop	r14
    173e:	df 90       	pop	r13
    1740:	cf 90       	pop	r12
    1742:	bf 90       	pop	r11
    1744:	af 90       	pop	r10
    1746:	9f 90       	pop	r9
    1748:	8f 90       	pop	r8
    174a:	7f 90       	pop	r7
    174c:	6f 90       	pop	r6
    174e:	5f 90       	pop	r5
    1750:	4f 90       	pop	r4
    1752:	08 95       	ret

00001754 <prvInitialiseTaskLists>:
    1754:	cf 93       	push	r28
    1756:	c0 e0       	ldi	r28, 0x00	; 0
    1758:	09 c0       	rjmp	.+18     	; 0x176c <prvInitialiseTaskLists+0x18>
    175a:	2b e0       	ldi	r18, 0x0B	; 11
    175c:	c2 9f       	mul	r28, r18
    175e:	c0 01       	movw	r24, r0
    1760:	11 24       	eor	r1, r1
    1762:	8f 50       	subi	r24, 0x0F	; 15
    1764:	9c 4e       	sbci	r25, 0xEC	; 236
    1766:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInitialise>
    176a:	cf 5f       	subi	r28, 0xFF	; 255
    176c:	ca 30       	cpi	r28, 0x0A	; 10
    176e:	a8 f3       	brcs	.-22     	; 0x175a <prvInitialiseTaskLists+0x6>
    1770:	86 ee       	ldi	r24, 0xE6	; 230
    1772:	93 e1       	ldi	r25, 0x13	; 19
    1774:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInitialise>
    1778:	8b ed       	ldi	r24, 0xDB	; 219
    177a:	93 e1       	ldi	r25, 0x13	; 19
    177c:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInitialise>
    1780:	8c ec       	ldi	r24, 0xCC	; 204
    1782:	93 e1       	ldi	r25, 0x13	; 19
    1784:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInitialise>
    1788:	81 ec       	ldi	r24, 0xC1	; 193
    178a:	93 e1       	ldi	r25, 0x13	; 19
    178c:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInitialise>
    1790:	85 eb       	ldi	r24, 0xB5	; 181
    1792:	93 e1       	ldi	r25, 0x13	; 19
    1794:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInitialise>
    1798:	86 ee       	ldi	r24, 0xE6	; 230
    179a:	93 e1       	ldi	r25, 0x13	; 19
    179c:	90 93 da 13 	sts	0x13DA, r25	; 0x8013da <pxDelayedTaskList+0x1>
    17a0:	80 93 d9 13 	sts	0x13D9, r24	; 0x8013d9 <pxDelayedTaskList>
    17a4:	8b ed       	ldi	r24, 0xDB	; 219
    17a6:	93 e1       	ldi	r25, 0x13	; 19
    17a8:	90 93 d8 13 	sts	0x13D8, r25	; 0x8013d8 <pxOverflowDelayedTaskList+0x1>
    17ac:	80 93 d7 13 	sts	0x13D7, r24	; 0x8013d7 <pxOverflowDelayedTaskList>
    17b0:	cf 91       	pop	r28
    17b2:	08 95       	ret

000017b4 <prvAddNewTaskToReadyList>:
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	ec 01       	movw	r28, r24
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	0f 92       	push	r0
    17c0:	80 91 b4 13 	lds	r24, 0x13B4	; 0x8013b4 <uxCurrentNumberOfTasks>
    17c4:	8f 5f       	subi	r24, 0xFF	; 255
    17c6:	80 93 b4 13 	sts	0x13B4, r24	; 0x8013b4 <uxCurrentNumberOfTasks>
    17ca:	80 91 5f 14 	lds	r24, 0x145F	; 0x80145f <pxCurrentTCB>
    17ce:	90 91 60 14 	lds	r25, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    17d2:	89 2b       	or	r24, r25
    17d4:	51 f4       	brne	.+20     	; 0x17ea <prvAddNewTaskToReadyList+0x36>
    17d6:	d0 93 60 14 	sts	0x1460, r29	; 0x801460 <pxCurrentTCB+0x1>
    17da:	c0 93 5f 14 	sts	0x145F, r28	; 0x80145f <pxCurrentTCB>
    17de:	80 91 b4 13 	lds	r24, 0x13B4	; 0x8013b4 <uxCurrentNumberOfTasks>
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	91 f4       	brne	.+36     	; 0x180a <prvAddNewTaskToReadyList+0x56>
    17e6:	b6 df       	rcall	.-148    	; 0x1754 <prvInitialiseTaskLists>
    17e8:	10 c0       	rjmp	.+32     	; 0x180a <prvAddNewTaskToReadyList+0x56>
    17ea:	80 91 ae 13 	lds	r24, 0x13AE	; 0x8013ae <xSchedulerRunning>
    17ee:	81 11       	cpse	r24, r1
    17f0:	0c c0       	rjmp	.+24     	; 0x180a <prvAddNewTaskToReadyList+0x56>
    17f2:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    17f6:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    17fa:	92 8d       	ldd	r25, Z+26	; 0x1a
    17fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17fe:	89 17       	cp	r24, r25
    1800:	20 f0       	brcs	.+8      	; 0x180a <prvAddNewTaskToReadyList+0x56>
    1802:	d0 93 60 14 	sts	0x1460, r29	; 0x801460 <pxCurrentTCB+0x1>
    1806:	c0 93 5f 14 	sts	0x145F, r28	; 0x80145f <pxCurrentTCB>
    180a:	80 91 a7 13 	lds	r24, 0x13A7	; 0x8013a7 <uxTaskNumber>
    180e:	8f 5f       	subi	r24, 0xFF	; 255
    1810:	80 93 a7 13 	sts	0x13A7, r24	; 0x8013a7 <uxTaskNumber>
    1814:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1816:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <uxTopReadyPriority>
    181a:	8e 17       	cp	r24, r30
    181c:	10 f4       	brcc	.+4      	; 0x1822 <prvAddNewTaskToReadyList+0x6e>
    181e:	e0 93 af 13 	sts	0x13AF, r30	; 0x8013af <uxTopReadyPriority>
    1822:	8b e0       	ldi	r24, 0x0B	; 11
    1824:	8e 9f       	mul	r24, r30
    1826:	f0 01       	movw	r30, r0
    1828:	11 24       	eor	r1, r1
    182a:	ef 50       	subi	r30, 0x0F	; 15
    182c:	fc 4e       	sbci	r31, 0xEC	; 236
    182e:	01 80       	ldd	r0, Z+1	; 0x01
    1830:	f2 81       	ldd	r31, Z+2	; 0x02
    1832:	e0 2d       	mov	r30, r0
    1834:	ff 83       	std	Y+7, r31	; 0x07
    1836:	ee 83       	std	Y+6, r30	; 0x06
    1838:	26 81       	ldd	r18, Z+6	; 0x06
    183a:	37 81       	ldd	r19, Z+7	; 0x07
    183c:	39 87       	std	Y+9, r19	; 0x09
    183e:	28 87       	std	Y+8, r18	; 0x08
    1840:	a6 81       	ldd	r26, Z+6	; 0x06
    1842:	b7 81       	ldd	r27, Z+7	; 0x07
    1844:	9e 01       	movw	r18, r28
    1846:	2e 5f       	subi	r18, 0xFE	; 254
    1848:	3f 4f       	sbci	r19, 0xFF	; 255
    184a:	15 96       	adiw	r26, 0x05	; 5
    184c:	3c 93       	st	X, r19
    184e:	2e 93       	st	-X, r18
    1850:	14 97       	sbiw	r26, 0x04	; 4
    1852:	37 83       	std	Z+7, r19	; 0x07
    1854:	26 83       	std	Z+6, r18	; 0x06
    1856:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1858:	8e 9f       	mul	r24, r30
    185a:	f0 01       	movw	r30, r0
    185c:	11 24       	eor	r1, r1
    185e:	ef 50       	subi	r30, 0x0F	; 15
    1860:	fc 4e       	sbci	r31, 0xEC	; 236
    1862:	fd 87       	std	Y+13, r31	; 0x0d
    1864:	ec 87       	std	Y+12, r30	; 0x0c
    1866:	80 81       	ld	r24, Z
    1868:	8f 5f       	subi	r24, 0xFF	; 255
    186a:	80 83       	st	Z, r24
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	80 91 ae 13 	lds	r24, 0x13AE	; 0x8013ae <xSchedulerRunning>
    1874:	88 23       	and	r24, r24
    1876:	51 f0       	breq	.+20     	; 0x188c <prvAddNewTaskToReadyList+0xd8>
    1878:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    187c:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    1880:	92 8d       	ldd	r25, Z+26	; 0x1a
    1882:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1884:	98 17       	cp	r25, r24
    1886:	10 f4       	brcc	.+4      	; 0x188c <prvAddNewTaskToReadyList+0xd8>
    1888:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vPortYield>
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	08 95       	ret

00001892 <prvCheckTasksWaitingTermination>:
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	1b c0       	rjmp	.+54     	; 0x18ce <prvCheckTasksWaitingTermination+0x3c>
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	0f 92       	push	r0
    189e:	e0 91 c8 13 	lds	r30, 0x13C8	; 0x8013c8 <xTasksWaitingTermination+0x7>
    18a2:	f0 91 c9 13 	lds	r31, 0x13C9	; 0x8013c9 <xTasksWaitingTermination+0x8>
    18a6:	c0 85       	ldd	r28, Z+8	; 0x08
    18a8:	d1 85       	ldd	r29, Z+9	; 0x09
    18aa:	ce 01       	movw	r24, r28
    18ac:	02 96       	adiw	r24, 0x02	; 2
    18ae:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
    18b2:	80 91 b4 13 	lds	r24, 0x13B4	; 0x8013b4 <uxCurrentNumberOfTasks>
    18b6:	81 50       	subi	r24, 0x01	; 1
    18b8:	80 93 b4 13 	sts	0x13B4, r24	; 0x8013b4 <uxCurrentNumberOfTasks>
    18bc:	80 91 c0 13 	lds	r24, 0x13C0	; 0x8013c0 <uxDeletedTasksWaitingCleanUp>
    18c0:	81 50       	subi	r24, 0x01	; 1
    18c2:	80 93 c0 13 	sts	0x13C0, r24	; 0x8013c0 <uxDeletedTasksWaitingCleanUp>
    18c6:	0f 90       	pop	r0
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	ce 01       	movw	r24, r28
    18cc:	b8 de       	rcall	.-656    	; 0x163e <prvDeleteTCB>
    18ce:	80 91 c0 13 	lds	r24, 0x13C0	; 0x8013c0 <uxDeletedTasksWaitingCleanUp>
    18d2:	81 11       	cpse	r24, r1
    18d4:	e1 cf       	rjmp	.-62     	; 0x1898 <prvCheckTasksWaitingTermination+0x6>
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	08 95       	ret

000018dc <prvAddCurrentTaskToDelayedList>:
    18dc:	8f 92       	push	r8
    18de:	9f 92       	push	r9
    18e0:	af 92       	push	r10
    18e2:	bf 92       	push	r11
    18e4:	cf 92       	push	r12
    18e6:	df 92       	push	r13
    18e8:	ef 92       	push	r14
    18ea:	ff 92       	push	r15
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	6b 01       	movw	r12, r22
    18f2:	7c 01       	movw	r14, r24
    18f4:	c4 2f       	mov	r28, r20
    18f6:	80 90 b0 13 	lds	r8, 0x13B0	; 0x8013b0 <xTickCount>
    18fa:	90 90 b1 13 	lds	r9, 0x13B1	; 0x8013b1 <xTickCount+0x1>
    18fe:	a0 90 b2 13 	lds	r10, 0x13B2	; 0x8013b2 <xTickCount+0x2>
    1902:	b0 90 b3 13 	lds	r11, 0x13B3	; 0x8013b3 <xTickCount+0x3>
    1906:	80 91 5f 14 	lds	r24, 0x145F	; 0x80145f <pxCurrentTCB>
    190a:	90 91 60 14 	lds	r25, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    190e:	02 96       	adiw	r24, 0x02	; 2
    1910:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
    1914:	8f ef       	ldi	r24, 0xFF	; 255
    1916:	c8 16       	cp	r12, r24
    1918:	d8 06       	cpc	r13, r24
    191a:	e8 06       	cpc	r14, r24
    191c:	f8 06       	cpc	r15, r24
    191e:	b1 f5       	brne	.+108    	; 0x198c <prvAddCurrentTaskToDelayedList+0xb0>
    1920:	cc 23       	and	r28, r28
    1922:	a1 f1       	breq	.+104    	; 0x198c <prvAddCurrentTaskToDelayedList+0xb0>
    1924:	e5 eb       	ldi	r30, 0xB5	; 181
    1926:	f3 e1       	ldi	r31, 0x13	; 19
    1928:	a1 81       	ldd	r26, Z+1	; 0x01
    192a:	b2 81       	ldd	r27, Z+2	; 0x02
    192c:	c0 91 5f 14 	lds	r28, 0x145F	; 0x80145f <pxCurrentTCB>
    1930:	d0 91 60 14 	lds	r29, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    1934:	bf 83       	std	Y+7, r27	; 0x07
    1936:	ae 83       	std	Y+6, r26	; 0x06
    1938:	c0 91 5f 14 	lds	r28, 0x145F	; 0x80145f <pxCurrentTCB>
    193c:	d0 91 60 14 	lds	r29, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    1940:	16 96       	adiw	r26, 0x06	; 6
    1942:	8d 91       	ld	r24, X+
    1944:	9c 91       	ld	r25, X
    1946:	17 97       	sbiw	r26, 0x07	; 7
    1948:	99 87       	std	Y+9, r25	; 0x09
    194a:	88 87       	std	Y+8, r24	; 0x08
    194c:	16 96       	adiw	r26, 0x06	; 6
    194e:	cd 91       	ld	r28, X+
    1950:	dc 91       	ld	r29, X
    1952:	17 97       	sbiw	r26, 0x07	; 7
    1954:	80 91 5f 14 	lds	r24, 0x145F	; 0x80145f <pxCurrentTCB>
    1958:	90 91 60 14 	lds	r25, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    195c:	02 96       	adiw	r24, 0x02	; 2
    195e:	9d 83       	std	Y+5, r25	; 0x05
    1960:	8c 83       	std	Y+4, r24	; 0x04
    1962:	80 91 5f 14 	lds	r24, 0x145F	; 0x80145f <pxCurrentTCB>
    1966:	90 91 60 14 	lds	r25, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    196a:	02 96       	adiw	r24, 0x02	; 2
    196c:	17 96       	adiw	r26, 0x07	; 7
    196e:	9c 93       	st	X, r25
    1970:	8e 93       	st	-X, r24
    1972:	16 97       	sbiw	r26, 0x06	; 6
    1974:	a0 91 5f 14 	lds	r26, 0x145F	; 0x80145f <pxCurrentTCB>
    1978:	b0 91 60 14 	lds	r27, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    197c:	1d 96       	adiw	r26, 0x0d	; 13
    197e:	fc 93       	st	X, r31
    1980:	ee 93       	st	-X, r30
    1982:	1c 97       	sbiw	r26, 0x0c	; 12
    1984:	80 81       	ld	r24, Z
    1986:	8f 5f       	subi	r24, 0xFF	; 255
    1988:	80 83       	st	Z, r24
    198a:	3f c0       	rjmp	.+126    	; 0x1a0a <prvAddCurrentTaskToDelayedList+0x12e>
    198c:	c8 0c       	add	r12, r8
    198e:	d9 1c       	adc	r13, r9
    1990:	ea 1c       	adc	r14, r10
    1992:	fb 1c       	adc	r15, r11
    1994:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    1998:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    199c:	c2 82       	std	Z+2, r12	; 0x02
    199e:	d3 82       	std	Z+3, r13	; 0x03
    19a0:	e4 82       	std	Z+4, r14	; 0x04
    19a2:	f5 82       	std	Z+5, r15	; 0x05
    19a4:	c8 14       	cp	r12, r8
    19a6:	d9 04       	cpc	r13, r9
    19a8:	ea 04       	cpc	r14, r10
    19aa:	fb 04       	cpc	r15, r11
    19ac:	68 f4       	brcc	.+26     	; 0x19c8 <prvAddCurrentTaskToDelayedList+0xec>
    19ae:	60 91 5f 14 	lds	r22, 0x145F	; 0x80145f <pxCurrentTCB>
    19b2:	70 91 60 14 	lds	r23, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    19b6:	80 91 d7 13 	lds	r24, 0x13D7	; 0x8013d7 <pxOverflowDelayedTaskList>
    19ba:	90 91 d8 13 	lds	r25, 0x13D8	; 0x8013d8 <pxOverflowDelayedTaskList+0x1>
    19be:	6e 5f       	subi	r22, 0xFE	; 254
    19c0:	7f 4f       	sbci	r23, 0xFF	; 255
    19c2:	0e 94 b2 02 	call	0x564	; 0x564 <vListInsert>
    19c6:	21 c0       	rjmp	.+66     	; 0x1a0a <prvAddCurrentTaskToDelayedList+0x12e>
    19c8:	60 91 5f 14 	lds	r22, 0x145F	; 0x80145f <pxCurrentTCB>
    19cc:	70 91 60 14 	lds	r23, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    19d0:	80 91 d9 13 	lds	r24, 0x13D9	; 0x8013d9 <pxDelayedTaskList>
    19d4:	90 91 da 13 	lds	r25, 0x13DA	; 0x8013da <pxDelayedTaskList+0x1>
    19d8:	6e 5f       	subi	r22, 0xFE	; 254
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	0e 94 b2 02 	call	0x564	; 0x564 <vListInsert>
    19e0:	80 91 a3 13 	lds	r24, 0x13A3	; 0x8013a3 <xNextTaskUnblockTime>
    19e4:	90 91 a4 13 	lds	r25, 0x13A4	; 0x8013a4 <xNextTaskUnblockTime+0x1>
    19e8:	a0 91 a5 13 	lds	r26, 0x13A5	; 0x8013a5 <xNextTaskUnblockTime+0x2>
    19ec:	b0 91 a6 13 	lds	r27, 0x13A6	; 0x8013a6 <xNextTaskUnblockTime+0x3>
    19f0:	c8 16       	cp	r12, r24
    19f2:	d9 06       	cpc	r13, r25
    19f4:	ea 06       	cpc	r14, r26
    19f6:	fb 06       	cpc	r15, r27
    19f8:	40 f4       	brcc	.+16     	; 0x1a0a <prvAddCurrentTaskToDelayedList+0x12e>
    19fa:	c0 92 a3 13 	sts	0x13A3, r12	; 0x8013a3 <xNextTaskUnblockTime>
    19fe:	d0 92 a4 13 	sts	0x13A4, r13	; 0x8013a4 <xNextTaskUnblockTime+0x1>
    1a02:	e0 92 a5 13 	sts	0x13A5, r14	; 0x8013a5 <xNextTaskUnblockTime+0x2>
    1a06:	f0 92 a6 13 	sts	0x13A6, r15	; 0x8013a6 <xNextTaskUnblockTime+0x3>
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	ff 90       	pop	r15
    1a10:	ef 90       	pop	r14
    1a12:	df 90       	pop	r13
    1a14:	cf 90       	pop	r12
    1a16:	bf 90       	pop	r11
    1a18:	af 90       	pop	r10
    1a1a:	9f 90       	pop	r9
    1a1c:	8f 90       	pop	r8
    1a1e:	08 95       	ret

00001a20 <xTaskCreate>:
    1a20:	2f 92       	push	r2
    1a22:	3f 92       	push	r3
    1a24:	4f 92       	push	r4
    1a26:	5f 92       	push	r5
    1a28:	6f 92       	push	r6
    1a2a:	7f 92       	push	r7
    1a2c:	8f 92       	push	r8
    1a2e:	9f 92       	push	r9
    1a30:	af 92       	push	r10
    1a32:	bf 92       	push	r11
    1a34:	cf 92       	push	r12
    1a36:	df 92       	push	r13
    1a38:	ef 92       	push	r14
    1a3a:	ff 92       	push	r15
    1a3c:	0f 93       	push	r16
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	3c 01       	movw	r6, r24
    1a44:	1b 01       	movw	r2, r22
    1a46:	4a 01       	movw	r8, r20
    1a48:	29 01       	movw	r4, r18
    1a4a:	ca 01       	movw	r24, r20
    1a4c:	0e 94 b7 01 	call	0x36e	; 0x36e <pvPortMalloc>
    1a50:	6c 01       	movw	r12, r24
    1a52:	89 2b       	or	r24, r25
    1a54:	71 f0       	breq	.+28     	; 0x1a72 <xTaskCreate+0x52>
    1a56:	84 e3       	ldi	r24, 0x34	; 52
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 b7 01 	call	0x36e	; 0x36e <pvPortMalloc>
    1a5e:	ec 01       	movw	r28, r24
    1a60:	89 2b       	or	r24, r25
    1a62:	19 f0       	breq	.+6      	; 0x1a6a <xTaskCreate+0x4a>
    1a64:	dc 8e       	std	Y+28, r13	; 0x1c
    1a66:	cb 8e       	std	Y+27, r12	; 0x1b
    1a68:	06 c0       	rjmp	.+12     	; 0x1a76 <xTaskCreate+0x56>
    1a6a:	c6 01       	movw	r24, r12
    1a6c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vPortFree>
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <xTaskCreate+0x56>
    1a72:	c0 e0       	ldi	r28, 0x00	; 0
    1a74:	d0 e0       	ldi	r29, 0x00	; 0
    1a76:	20 97       	sbiw	r28, 0x00	; 0
    1a78:	61 f0       	breq	.+24     	; 0x1a92 <xTaskCreate+0x72>
    1a7a:	a1 2c       	mov	r10, r1
    1a7c:	b1 2c       	mov	r11, r1
    1a7e:	6e 01       	movw	r12, r28
    1a80:	92 01       	movw	r18, r4
    1a82:	a4 01       	movw	r20, r8
    1a84:	b1 01       	movw	r22, r2
    1a86:	c3 01       	movw	r24, r6
    1a88:	e7 dd       	rcall	.-1074   	; 0x1658 <prvInitialiseNewTask>
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	93 de       	rcall	.-730    	; 0x17b4 <prvAddNewTaskToReadyList>
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	01 c0       	rjmp	.+2      	; 0x1a94 <xTaskCreate+0x74>
    1a92:	8f ef       	ldi	r24, 0xFF	; 255
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	0f 91       	pop	r16
    1a9a:	ff 90       	pop	r15
    1a9c:	ef 90       	pop	r14
    1a9e:	df 90       	pop	r13
    1aa0:	cf 90       	pop	r12
    1aa2:	bf 90       	pop	r11
    1aa4:	af 90       	pop	r10
    1aa6:	9f 90       	pop	r9
    1aa8:	8f 90       	pop	r8
    1aaa:	7f 90       	pop	r7
    1aac:	6f 90       	pop	r6
    1aae:	5f 90       	pop	r5
    1ab0:	4f 90       	pop	r4
    1ab2:	3f 90       	pop	r3
    1ab4:	2f 90       	pop	r2
    1ab6:	08 95       	ret

00001ab8 <vTaskStartScheduler>:
    1ab8:	ef 92       	push	r14
    1aba:	ff 92       	push	r15
    1abc:	0f 93       	push	r16
    1abe:	0f 2e       	mov	r0, r31
    1ac0:	f1 ea       	ldi	r31, 0xA1	; 161
    1ac2:	ef 2e       	mov	r14, r31
    1ac4:	f3 e1       	ldi	r31, 0x13	; 19
    1ac6:	ff 2e       	mov	r15, r31
    1ac8:	f0 2d       	mov	r31, r0
    1aca:	00 e0       	ldi	r16, 0x00	; 0
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 ec       	ldi	r20, 0xC0	; 192
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	67 e8       	ldi	r22, 0x87	; 135
    1ad6:	72 e0       	ldi	r23, 0x02	; 2
    1ad8:	8d ec       	ldi	r24, 0xCD	; 205
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	a1 df       	rcall	.-190    	; 0x1a20 <xTaskCreate>
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	11 f4       	brne	.+4      	; 0x1ae6 <vTaskStartScheduler+0x2e>
    1ae2:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <xTimerCreateTimerTask>
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	c9 f4       	brne	.+50     	; 0x1b1c <vTaskStartScheduler+0x64>
    1aea:	f8 94       	cli
    1aec:	8f ef       	ldi	r24, 0xFF	; 255
    1aee:	9f ef       	ldi	r25, 0xFF	; 255
    1af0:	dc 01       	movw	r26, r24
    1af2:	80 93 a3 13 	sts	0x13A3, r24	; 0x8013a3 <xNextTaskUnblockTime>
    1af6:	90 93 a4 13 	sts	0x13A4, r25	; 0x8013a4 <xNextTaskUnblockTime+0x1>
    1afa:	a0 93 a5 13 	sts	0x13A5, r26	; 0x8013a5 <xNextTaskUnblockTime+0x2>
    1afe:	b0 93 a6 13 	sts	0x13A6, r27	; 0x8013a6 <xNextTaskUnblockTime+0x3>
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	80 93 ae 13 	sts	0x13AE, r24	; 0x8013ae <xSchedulerRunning>
    1b08:	10 92 b0 13 	sts	0x13B0, r1	; 0x8013b0 <xTickCount>
    1b0c:	10 92 b1 13 	sts	0x13B1, r1	; 0x8013b1 <xTickCount+0x1>
    1b10:	10 92 b2 13 	sts	0x13B2, r1	; 0x8013b2 <xTickCount+0x2>
    1b14:	10 92 b3 13 	sts	0x13B3, r1	; 0x8013b3 <xTickCount+0x3>
    1b18:	0e 94 39 03 	call	0x672	; 0x672 <xPortStartScheduler>
    1b1c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1b20:	0f 91       	pop	r16
    1b22:	ff 90       	pop	r15
    1b24:	ef 90       	pop	r14
    1b26:	08 95       	ret

00001b28 <vTaskSuspendAll>:
    1b28:	80 91 a0 13 	lds	r24, 0x13A0	; 0x8013a0 <uxSchedulerSuspended>
    1b2c:	8f 5f       	subi	r24, 0xFF	; 255
    1b2e:	80 93 a0 13 	sts	0x13A0, r24	; 0x8013a0 <uxSchedulerSuspended>
    1b32:	08 95       	ret

00001b34 <xTaskGetTickCount>:
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	0f 92       	push	r0
    1b3a:	60 91 b0 13 	lds	r22, 0x13B0	; 0x8013b0 <xTickCount>
    1b3e:	70 91 b1 13 	lds	r23, 0x13B1	; 0x8013b1 <xTickCount+0x1>
    1b42:	80 91 b2 13 	lds	r24, 0x13B2	; 0x8013b2 <xTickCount+0x2>
    1b46:	90 91 b3 13 	lds	r25, 0x13B3	; 0x8013b3 <xTickCount+0x3>
    1b4a:	0f 90       	pop	r0
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	08 95       	ret

00001b50 <xTaskIncrementTick>:
    1b50:	cf 92       	push	r12
    1b52:	df 92       	push	r13
    1b54:	ef 92       	push	r14
    1b56:	ff 92       	push	r15
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	80 91 a0 13 	lds	r24, 0x13A0	; 0x8013a0 <uxSchedulerSuspended>
    1b60:	81 11       	cpse	r24, r1
    1b62:	05 c1       	rjmp	.+522    	; 0x1d6e <xTaskIncrementTick+0x21e>
    1b64:	c0 90 b0 13 	lds	r12, 0x13B0	; 0x8013b0 <xTickCount>
    1b68:	d0 90 b1 13 	lds	r13, 0x13B1	; 0x8013b1 <xTickCount+0x1>
    1b6c:	e0 90 b2 13 	lds	r14, 0x13B2	; 0x8013b2 <xTickCount+0x2>
    1b70:	f0 90 b3 13 	lds	r15, 0x13B3	; 0x8013b3 <xTickCount+0x3>
    1b74:	8f ef       	ldi	r24, 0xFF	; 255
    1b76:	c8 1a       	sub	r12, r24
    1b78:	d8 0a       	sbc	r13, r24
    1b7a:	e8 0a       	sbc	r14, r24
    1b7c:	f8 0a       	sbc	r15, r24
    1b7e:	c0 92 b0 13 	sts	0x13B0, r12	; 0x8013b0 <xTickCount>
    1b82:	d0 92 b1 13 	sts	0x13B1, r13	; 0x8013b1 <xTickCount+0x1>
    1b86:	e0 92 b2 13 	sts	0x13B2, r14	; 0x8013b2 <xTickCount+0x2>
    1b8a:	f0 92 b3 13 	sts	0x13B3, r15	; 0x8013b3 <xTickCount+0x3>
    1b8e:	c1 14       	cp	r12, r1
    1b90:	d1 04       	cpc	r13, r1
    1b92:	e1 04       	cpc	r14, r1
    1b94:	f1 04       	cpc	r15, r1
    1b96:	b1 f4       	brne	.+44     	; 0x1bc4 <xTaskIncrementTick+0x74>
    1b98:	80 91 d9 13 	lds	r24, 0x13D9	; 0x8013d9 <pxDelayedTaskList>
    1b9c:	90 91 da 13 	lds	r25, 0x13DA	; 0x8013da <pxDelayedTaskList+0x1>
    1ba0:	20 91 d7 13 	lds	r18, 0x13D7	; 0x8013d7 <pxOverflowDelayedTaskList>
    1ba4:	30 91 d8 13 	lds	r19, 0x13D8	; 0x8013d8 <pxOverflowDelayedTaskList+0x1>
    1ba8:	30 93 da 13 	sts	0x13DA, r19	; 0x8013da <pxDelayedTaskList+0x1>
    1bac:	20 93 d9 13 	sts	0x13D9, r18	; 0x8013d9 <pxDelayedTaskList>
    1bb0:	90 93 d8 13 	sts	0x13D8, r25	; 0x8013d8 <pxOverflowDelayedTaskList+0x1>
    1bb4:	80 93 d7 13 	sts	0x13D7, r24	; 0x8013d7 <pxOverflowDelayedTaskList>
    1bb8:	80 91 a8 13 	lds	r24, 0x13A8	; 0x8013a8 <xNumOfOverflows>
    1bbc:	8f 5f       	subi	r24, 0xFF	; 255
    1bbe:	80 93 a8 13 	sts	0x13A8, r24	; 0x8013a8 <xNumOfOverflows>
    1bc2:	16 dd       	rcall	.-1492   	; 0x15f0 <prvResetNextTaskUnblockTime>
    1bc4:	80 91 a3 13 	lds	r24, 0x13A3	; 0x8013a3 <xNextTaskUnblockTime>
    1bc8:	90 91 a4 13 	lds	r25, 0x13A4	; 0x8013a4 <xNextTaskUnblockTime+0x1>
    1bcc:	a0 91 a5 13 	lds	r26, 0x13A5	; 0x8013a5 <xNextTaskUnblockTime+0x2>
    1bd0:	b0 91 a6 13 	lds	r27, 0x13A6	; 0x8013a6 <xNextTaskUnblockTime+0x3>
    1bd4:	c8 16       	cp	r12, r24
    1bd6:	d9 06       	cpc	r13, r25
    1bd8:	ea 06       	cpc	r14, r26
    1bda:	fb 06       	cpc	r15, r27
    1bdc:	20 f4       	brcc	.+8      	; 0x1be6 <xTaskIncrementTick+0x96>
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	b2 c0       	rjmp	.+356    	; 0x1d46 <xTaskIncrementTick+0x1f6>
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	01 c0       	rjmp	.+2      	; 0x1be8 <xTaskIncrementTick+0x98>
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	e0 91 d9 13 	lds	r30, 0x13D9	; 0x8013d9 <pxDelayedTaskList>
    1bec:	f0 91 da 13 	lds	r31, 0x13DA	; 0x8013da <pxDelayedTaskList+0x1>
    1bf0:	90 81       	ld	r25, Z
    1bf2:	91 11       	cpse	r25, r1
    1bf4:	0c c0       	rjmp	.+24     	; 0x1c0e <xTaskIncrementTick+0xbe>
    1bf6:	4f ef       	ldi	r20, 0xFF	; 255
    1bf8:	5f ef       	ldi	r21, 0xFF	; 255
    1bfa:	ba 01       	movw	r22, r20
    1bfc:	40 93 a3 13 	sts	0x13A3, r20	; 0x8013a3 <xNextTaskUnblockTime>
    1c00:	50 93 a4 13 	sts	0x13A4, r21	; 0x8013a4 <xNextTaskUnblockTime+0x1>
    1c04:	60 93 a5 13 	sts	0x13A5, r22	; 0x8013a5 <xNextTaskUnblockTime+0x2>
    1c08:	70 93 a6 13 	sts	0x13A6, r23	; 0x8013a6 <xNextTaskUnblockTime+0x3>
    1c0c:	9c c0       	rjmp	.+312    	; 0x1d46 <xTaskIncrementTick+0x1f6>
    1c0e:	e0 91 d9 13 	lds	r30, 0x13D9	; 0x8013d9 <pxDelayedTaskList>
    1c12:	f0 91 da 13 	lds	r31, 0x13DA	; 0x8013da <pxDelayedTaskList+0x1>
    1c16:	07 80       	ldd	r0, Z+7	; 0x07
    1c18:	f0 85       	ldd	r31, Z+8	; 0x08
    1c1a:	e0 2d       	mov	r30, r0
    1c1c:	00 84       	ldd	r0, Z+8	; 0x08
    1c1e:	f1 85       	ldd	r31, Z+9	; 0x09
    1c20:	e0 2d       	mov	r30, r0
    1c22:	42 81       	ldd	r20, Z+2	; 0x02
    1c24:	53 81       	ldd	r21, Z+3	; 0x03
    1c26:	64 81       	ldd	r22, Z+4	; 0x04
    1c28:	75 81       	ldd	r23, Z+5	; 0x05
    1c2a:	c4 16       	cp	r12, r20
    1c2c:	d5 06       	cpc	r13, r21
    1c2e:	e6 06       	cpc	r14, r22
    1c30:	f7 06       	cpc	r15, r23
    1c32:	48 f4       	brcc	.+18     	; 0x1c46 <xTaskIncrementTick+0xf6>
    1c34:	40 93 a3 13 	sts	0x13A3, r20	; 0x8013a3 <xNextTaskUnblockTime>
    1c38:	50 93 a4 13 	sts	0x13A4, r21	; 0x8013a4 <xNextTaskUnblockTime+0x1>
    1c3c:	60 93 a5 13 	sts	0x13A5, r22	; 0x8013a5 <xNextTaskUnblockTime+0x2>
    1c40:	70 93 a6 13 	sts	0x13A6, r23	; 0x8013a6 <xNextTaskUnblockTime+0x3>
    1c44:	80 c0       	rjmp	.+256    	; 0x1d46 <xTaskIncrementTick+0x1f6>
    1c46:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c48:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c4a:	c6 81       	ldd	r28, Z+6	; 0x06
    1c4c:	d7 81       	ldd	r29, Z+7	; 0x07
    1c4e:	20 85       	ldd	r18, Z+8	; 0x08
    1c50:	31 85       	ldd	r19, Z+9	; 0x09
    1c52:	3f 83       	std	Y+7, r19	; 0x07
    1c54:	2e 83       	std	Y+6, r18	; 0x06
    1c56:	c0 85       	ldd	r28, Z+8	; 0x08
    1c58:	d1 85       	ldd	r29, Z+9	; 0x09
    1c5a:	26 81       	ldd	r18, Z+6	; 0x06
    1c5c:	37 81       	ldd	r19, Z+7	; 0x07
    1c5e:	3d 83       	std	Y+5, r19	; 0x05
    1c60:	2c 83       	std	Y+4, r18	; 0x04
    1c62:	11 96       	adiw	r26, 0x01	; 1
    1c64:	4d 91       	ld	r20, X+
    1c66:	5c 91       	ld	r21, X
    1c68:	12 97       	sbiw	r26, 0x02	; 2
    1c6a:	9f 01       	movw	r18, r30
    1c6c:	2e 5f       	subi	r18, 0xFE	; 254
    1c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c70:	42 17       	cp	r20, r18
    1c72:	53 07       	cpc	r21, r19
    1c74:	31 f4       	brne	.+12     	; 0x1c82 <xTaskIncrementTick+0x132>
    1c76:	40 85       	ldd	r20, Z+8	; 0x08
    1c78:	51 85       	ldd	r21, Z+9	; 0x09
    1c7a:	12 96       	adiw	r26, 0x02	; 2
    1c7c:	5c 93       	st	X, r21
    1c7e:	4e 93       	st	-X, r20
    1c80:	11 97       	sbiw	r26, 0x01	; 1
    1c82:	15 86       	std	Z+13, r1	; 0x0d
    1c84:	14 86       	std	Z+12, r1	; 0x0c
    1c86:	9c 91       	ld	r25, X
    1c88:	91 50       	subi	r25, 0x01	; 1
    1c8a:	9c 93       	st	X, r25
    1c8c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1c8e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1c90:	10 97       	sbiw	r26, 0x00	; 0
    1c92:	09 f1       	breq	.+66     	; 0x1cd6 <xTaskIncrementTick+0x186>
    1c94:	c2 89       	ldd	r28, Z+18	; 0x12
    1c96:	d3 89       	ldd	r29, Z+19	; 0x13
    1c98:	44 89       	ldd	r20, Z+20	; 0x14
    1c9a:	55 89       	ldd	r21, Z+21	; 0x15
    1c9c:	5f 83       	std	Y+7, r21	; 0x07
    1c9e:	4e 83       	std	Y+6, r20	; 0x06
    1ca0:	c4 89       	ldd	r28, Z+20	; 0x14
    1ca2:	d5 89       	ldd	r29, Z+21	; 0x15
    1ca4:	42 89       	ldd	r20, Z+18	; 0x12
    1ca6:	53 89       	ldd	r21, Z+19	; 0x13
    1ca8:	5d 83       	std	Y+5, r21	; 0x05
    1caa:	4c 83       	std	Y+4, r20	; 0x04
    1cac:	11 96       	adiw	r26, 0x01	; 1
    1cae:	6d 91       	ld	r22, X+
    1cb0:	7c 91       	ld	r23, X
    1cb2:	12 97       	sbiw	r26, 0x02	; 2
    1cb4:	af 01       	movw	r20, r30
    1cb6:	42 5f       	subi	r20, 0xF2	; 242
    1cb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cba:	64 17       	cp	r22, r20
    1cbc:	75 07       	cpc	r23, r21
    1cbe:	31 f4       	brne	.+12     	; 0x1ccc <xTaskIncrementTick+0x17c>
    1cc0:	44 89       	ldd	r20, Z+20	; 0x14
    1cc2:	55 89       	ldd	r21, Z+21	; 0x15
    1cc4:	12 96       	adiw	r26, 0x02	; 2
    1cc6:	5c 93       	st	X, r21
    1cc8:	4e 93       	st	-X, r20
    1cca:	11 97       	sbiw	r26, 0x01	; 1
    1ccc:	11 8e       	std	Z+25, r1	; 0x19
    1cce:	10 8e       	std	Z+24, r1	; 0x18
    1cd0:	9c 91       	ld	r25, X
    1cd2:	91 50       	subi	r25, 0x01	; 1
    1cd4:	9c 93       	st	X, r25
    1cd6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1cd8:	90 91 af 13 	lds	r25, 0x13AF	; 0x8013af <uxTopReadyPriority>
    1cdc:	9a 17       	cp	r25, r26
    1cde:	10 f4       	brcc	.+4      	; 0x1ce4 <xTaskIncrementTick+0x194>
    1ce0:	a0 93 af 13 	sts	0x13AF, r26	; 0x8013af <uxTopReadyPriority>
    1ce4:	9b e0       	ldi	r25, 0x0B	; 11
    1ce6:	9a 9f       	mul	r25, r26
    1ce8:	d0 01       	movw	r26, r0
    1cea:	11 24       	eor	r1, r1
    1cec:	af 50       	subi	r26, 0x0F	; 15
    1cee:	bc 4e       	sbci	r27, 0xEC	; 236
    1cf0:	11 96       	adiw	r26, 0x01	; 1
    1cf2:	0d 90       	ld	r0, X+
    1cf4:	bc 91       	ld	r27, X
    1cf6:	a0 2d       	mov	r26, r0
    1cf8:	b7 83       	std	Z+7, r27	; 0x07
    1cfa:	a6 83       	std	Z+6, r26	; 0x06
    1cfc:	16 96       	adiw	r26, 0x06	; 6
    1cfe:	4d 91       	ld	r20, X+
    1d00:	5c 91       	ld	r21, X
    1d02:	17 97       	sbiw	r26, 0x07	; 7
    1d04:	51 87       	std	Z+9, r21	; 0x09
    1d06:	40 87       	std	Z+8, r20	; 0x08
    1d08:	16 96       	adiw	r26, 0x06	; 6
    1d0a:	cd 91       	ld	r28, X+
    1d0c:	dc 91       	ld	r29, X
    1d0e:	17 97       	sbiw	r26, 0x07	; 7
    1d10:	3d 83       	std	Y+5, r19	; 0x05
    1d12:	2c 83       	std	Y+4, r18	; 0x04
    1d14:	17 96       	adiw	r26, 0x07	; 7
    1d16:	3c 93       	st	X, r19
    1d18:	2e 93       	st	-X, r18
    1d1a:	16 97       	sbiw	r26, 0x06	; 6
    1d1c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d1e:	9a 9f       	mul	r25, r26
    1d20:	d0 01       	movw	r26, r0
    1d22:	11 24       	eor	r1, r1
    1d24:	af 50       	subi	r26, 0x0F	; 15
    1d26:	bc 4e       	sbci	r27, 0xEC	; 236
    1d28:	b5 87       	std	Z+13, r27	; 0x0d
    1d2a:	a4 87       	std	Z+12, r26	; 0x0c
    1d2c:	9c 91       	ld	r25, X
    1d2e:	9f 5f       	subi	r25, 0xFF	; 255
    1d30:	9c 93       	st	X, r25
    1d32:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d34:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    1d38:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    1d3c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d3e:	29 17       	cp	r18, r25
    1d40:	08 f0       	brcs	.+2      	; 0x1d44 <xTaskIncrementTick+0x1f4>
    1d42:	4f cf       	rjmp	.-354    	; 0x1be2 <xTaskIncrementTick+0x92>
    1d44:	51 cf       	rjmp	.-350    	; 0x1be8 <xTaskIncrementTick+0x98>
    1d46:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    1d4a:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    1d4e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1d50:	9b e0       	ldi	r25, 0x0B	; 11
    1d52:	e9 9f       	mul	r30, r25
    1d54:	f0 01       	movw	r30, r0
    1d56:	11 24       	eor	r1, r1
    1d58:	ef 50       	subi	r30, 0x0F	; 15
    1d5a:	fc 4e       	sbci	r31, 0xEC	; 236
    1d5c:	90 81       	ld	r25, Z
    1d5e:	92 30       	cpi	r25, 0x02	; 2
    1d60:	08 f0       	brcs	.+2      	; 0x1d64 <xTaskIncrementTick+0x214>
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 91 a9 13 	lds	r25, 0x13A9	; 0x8013a9 <xYieldPending>
    1d68:	91 11       	cpse	r25, r1
    1d6a:	16 c0       	rjmp	.+44     	; 0x1d98 <xTaskIncrementTick+0x248>
    1d6c:	16 c0       	rjmp	.+44     	; 0x1d9a <xTaskIncrementTick+0x24a>
    1d6e:	80 91 aa 13 	lds	r24, 0x13AA	; 0x8013aa <xPendedTicks>
    1d72:	90 91 ab 13 	lds	r25, 0x13AB	; 0x8013ab <xPendedTicks+0x1>
    1d76:	a0 91 ac 13 	lds	r26, 0x13AC	; 0x8013ac <xPendedTicks+0x2>
    1d7a:	b0 91 ad 13 	lds	r27, 0x13AD	; 0x8013ad <xPendedTicks+0x3>
    1d7e:	01 96       	adiw	r24, 0x01	; 1
    1d80:	a1 1d       	adc	r26, r1
    1d82:	b1 1d       	adc	r27, r1
    1d84:	80 93 aa 13 	sts	0x13AA, r24	; 0x8013aa <xPendedTicks>
    1d88:	90 93 ab 13 	sts	0x13AB, r25	; 0x8013ab <xPendedTicks+0x1>
    1d8c:	a0 93 ac 13 	sts	0x13AC, r26	; 0x8013ac <xPendedTicks+0x2>
    1d90:	b0 93 ad 13 	sts	0x13AD, r27	; 0x8013ad <xPendedTicks+0x3>
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	01 c0       	rjmp	.+2      	; 0x1d9a <xTaskIncrementTick+0x24a>
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	ff 90       	pop	r15
    1da0:	ef 90       	pop	r14
    1da2:	df 90       	pop	r13
    1da4:	cf 90       	pop	r12
    1da6:	08 95       	ret

00001da8 <xTaskResumeAll>:
    1da8:	cf 92       	push	r12
    1daa:	df 92       	push	r13
    1dac:	ef 92       	push	r14
    1dae:	ff 92       	push	r15
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	0f 92       	push	r0
    1dba:	80 91 a0 13 	lds	r24, 0x13A0	; 0x8013a0 <uxSchedulerSuspended>
    1dbe:	81 50       	subi	r24, 0x01	; 1
    1dc0:	80 93 a0 13 	sts	0x13A0, r24	; 0x8013a0 <uxSchedulerSuspended>
    1dc4:	80 91 a0 13 	lds	r24, 0x13A0	; 0x8013a0 <uxSchedulerSuspended>
    1dc8:	81 11       	cpse	r24, r1
    1dca:	be c0       	rjmp	.+380    	; 0x1f48 <xTaskResumeAll+0x1a0>
    1dcc:	80 91 b4 13 	lds	r24, 0x13B4	; 0x8013b4 <uxCurrentNumberOfTasks>
    1dd0:	81 11       	cpse	r24, r1
    1dd2:	88 c0       	rjmp	.+272    	; 0x1ee4 <xTaskResumeAll+0x13c>
    1dd4:	bc c0       	rjmp	.+376    	; 0x1f4e <xTaskResumeAll+0x1a6>
    1dd6:	e0 91 d3 13 	lds	r30, 0x13D3	; 0x8013d3 <xPendingReadyList+0x7>
    1dda:	f0 91 d4 13 	lds	r31, 0x13D4	; 0x8013d4 <xPendingReadyList+0x8>
    1dde:	00 84       	ldd	r0, Z+8	; 0x08
    1de0:	f1 85       	ldd	r31, Z+9	; 0x09
    1de2:	e0 2d       	mov	r30, r0
    1de4:	a0 8d       	ldd	r26, Z+24	; 0x18
    1de6:	b1 8d       	ldd	r27, Z+25	; 0x19
    1de8:	c2 89       	ldd	r28, Z+18	; 0x12
    1dea:	d3 89       	ldd	r29, Z+19	; 0x13
    1dec:	84 89       	ldd	r24, Z+20	; 0x14
    1dee:	95 89       	ldd	r25, Z+21	; 0x15
    1df0:	9f 83       	std	Y+7, r25	; 0x07
    1df2:	8e 83       	std	Y+6, r24	; 0x06
    1df4:	c4 89       	ldd	r28, Z+20	; 0x14
    1df6:	d5 89       	ldd	r29, Z+21	; 0x15
    1df8:	82 89       	ldd	r24, Z+18	; 0x12
    1dfa:	93 89       	ldd	r25, Z+19	; 0x13
    1dfc:	9d 83       	std	Y+5, r25	; 0x05
    1dfe:	8c 83       	std	Y+4, r24	; 0x04
    1e00:	11 96       	adiw	r26, 0x01	; 1
    1e02:	2d 91       	ld	r18, X+
    1e04:	3c 91       	ld	r19, X
    1e06:	12 97       	sbiw	r26, 0x02	; 2
    1e08:	cf 01       	movw	r24, r30
    1e0a:	0e 96       	adiw	r24, 0x0e	; 14
    1e0c:	28 17       	cp	r18, r24
    1e0e:	39 07       	cpc	r19, r25
    1e10:	31 f4       	brne	.+12     	; 0x1e1e <xTaskResumeAll+0x76>
    1e12:	84 89       	ldd	r24, Z+20	; 0x14
    1e14:	95 89       	ldd	r25, Z+21	; 0x15
    1e16:	12 96       	adiw	r26, 0x02	; 2
    1e18:	9c 93       	st	X, r25
    1e1a:	8e 93       	st	-X, r24
    1e1c:	11 97       	sbiw	r26, 0x01	; 1
    1e1e:	11 8e       	std	Z+25, r1	; 0x19
    1e20:	10 8e       	std	Z+24, r1	; 0x18
    1e22:	8c 91       	ld	r24, X
    1e24:	81 50       	subi	r24, 0x01	; 1
    1e26:	8c 93       	st	X, r24
    1e28:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e2a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e2c:	c6 81       	ldd	r28, Z+6	; 0x06
    1e2e:	d7 81       	ldd	r29, Z+7	; 0x07
    1e30:	80 85       	ldd	r24, Z+8	; 0x08
    1e32:	91 85       	ldd	r25, Z+9	; 0x09
    1e34:	9f 83       	std	Y+7, r25	; 0x07
    1e36:	8e 83       	std	Y+6, r24	; 0x06
    1e38:	c0 85       	ldd	r28, Z+8	; 0x08
    1e3a:	d1 85       	ldd	r29, Z+9	; 0x09
    1e3c:	86 81       	ldd	r24, Z+6	; 0x06
    1e3e:	97 81       	ldd	r25, Z+7	; 0x07
    1e40:	9d 83       	std	Y+5, r25	; 0x05
    1e42:	8c 83       	std	Y+4, r24	; 0x04
    1e44:	11 96       	adiw	r26, 0x01	; 1
    1e46:	8d 91       	ld	r24, X+
    1e48:	9c 91       	ld	r25, X
    1e4a:	12 97       	sbiw	r26, 0x02	; 2
    1e4c:	9f 01       	movw	r18, r30
    1e4e:	2e 5f       	subi	r18, 0xFE	; 254
    1e50:	3f 4f       	sbci	r19, 0xFF	; 255
    1e52:	82 17       	cp	r24, r18
    1e54:	93 07       	cpc	r25, r19
    1e56:	31 f4       	brne	.+12     	; 0x1e64 <xTaskResumeAll+0xbc>
    1e58:	80 85       	ldd	r24, Z+8	; 0x08
    1e5a:	91 85       	ldd	r25, Z+9	; 0x09
    1e5c:	12 96       	adiw	r26, 0x02	; 2
    1e5e:	9c 93       	st	X, r25
    1e60:	8e 93       	st	-X, r24
    1e62:	11 97       	sbiw	r26, 0x01	; 1
    1e64:	15 86       	std	Z+13, r1	; 0x0d
    1e66:	14 86       	std	Z+12, r1	; 0x0c
    1e68:	8c 91       	ld	r24, X
    1e6a:	81 50       	subi	r24, 0x01	; 1
    1e6c:	8c 93       	st	X, r24
    1e6e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e70:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <uxTopReadyPriority>
    1e74:	8a 17       	cp	r24, r26
    1e76:	10 f4       	brcc	.+4      	; 0x1e7c <xTaskResumeAll+0xd4>
    1e78:	a0 93 af 13 	sts	0x13AF, r26	; 0x8013af <uxTopReadyPriority>
    1e7c:	8b e0       	ldi	r24, 0x0B	; 11
    1e7e:	8a 9f       	mul	r24, r26
    1e80:	d0 01       	movw	r26, r0
    1e82:	11 24       	eor	r1, r1
    1e84:	af 50       	subi	r26, 0x0F	; 15
    1e86:	bc 4e       	sbci	r27, 0xEC	; 236
    1e88:	11 96       	adiw	r26, 0x01	; 1
    1e8a:	0d 90       	ld	r0, X+
    1e8c:	bc 91       	ld	r27, X
    1e8e:	a0 2d       	mov	r26, r0
    1e90:	b7 83       	std	Z+7, r27	; 0x07
    1e92:	a6 83       	std	Z+6, r26	; 0x06
    1e94:	16 96       	adiw	r26, 0x06	; 6
    1e96:	4d 91       	ld	r20, X+
    1e98:	5c 91       	ld	r21, X
    1e9a:	17 97       	sbiw	r26, 0x07	; 7
    1e9c:	51 87       	std	Z+9, r21	; 0x09
    1e9e:	40 87       	std	Z+8, r20	; 0x08
    1ea0:	16 96       	adiw	r26, 0x06	; 6
    1ea2:	cd 91       	ld	r28, X+
    1ea4:	dc 91       	ld	r29, X
    1ea6:	17 97       	sbiw	r26, 0x07	; 7
    1ea8:	3d 83       	std	Y+5, r19	; 0x05
    1eaa:	2c 83       	std	Y+4, r18	; 0x04
    1eac:	17 96       	adiw	r26, 0x07	; 7
    1eae:	3c 93       	st	X, r19
    1eb0:	2e 93       	st	-X, r18
    1eb2:	16 97       	sbiw	r26, 0x06	; 6
    1eb4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1eb6:	8a 9f       	mul	r24, r26
    1eb8:	d0 01       	movw	r26, r0
    1eba:	11 24       	eor	r1, r1
    1ebc:	af 50       	subi	r26, 0x0F	; 15
    1ebe:	bc 4e       	sbci	r27, 0xEC	; 236
    1ec0:	b5 87       	std	Z+13, r27	; 0x0d
    1ec2:	a4 87       	std	Z+12, r26	; 0x0c
    1ec4:	8c 91       	ld	r24, X
    1ec6:	8f 5f       	subi	r24, 0xFF	; 255
    1ec8:	8c 93       	st	X, r24
    1eca:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ecc:	a0 91 5f 14 	lds	r26, 0x145F	; 0x80145f <pxCurrentTCB>
    1ed0:	b0 91 60 14 	lds	r27, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    1ed4:	5a 96       	adiw	r26, 0x1a	; 26
    1ed6:	8c 91       	ld	r24, X
    1ed8:	98 17       	cp	r25, r24
    1eda:	30 f0       	brcs	.+12     	; 0x1ee8 <xTaskResumeAll+0x140>
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	80 93 a9 13 	sts	0x13A9, r24	; 0x8013a9 <xYieldPending>
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <xTaskResumeAll+0x140>
    1ee4:	e0 e0       	ldi	r30, 0x00	; 0
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 91 cc 13 	lds	r24, 0x13CC	; 0x8013cc <xPendingReadyList>
    1eec:	81 11       	cpse	r24, r1
    1eee:	73 cf       	rjmp	.-282    	; 0x1dd6 <xTaskResumeAll+0x2e>
    1ef0:	ef 2b       	or	r30, r31
    1ef2:	09 f0       	breq	.+2      	; 0x1ef6 <xTaskResumeAll+0x14e>
    1ef4:	7d db       	rcall	.-2310   	; 0x15f0 <prvResetNextTaskUnblockTime>
    1ef6:	c0 90 aa 13 	lds	r12, 0x13AA	; 0x8013aa <xPendedTicks>
    1efa:	d0 90 ab 13 	lds	r13, 0x13AB	; 0x8013ab <xPendedTicks+0x1>
    1efe:	e0 90 ac 13 	lds	r14, 0x13AC	; 0x8013ac <xPendedTicks+0x2>
    1f02:	f0 90 ad 13 	lds	r15, 0x13AD	; 0x8013ad <xPendedTicks+0x3>
    1f06:	c1 14       	cp	r12, r1
    1f08:	d1 04       	cpc	r13, r1
    1f0a:	e1 04       	cpc	r14, r1
    1f0c:	f1 04       	cpc	r15, r1
    1f0e:	a1 f0       	breq	.+40     	; 0x1f38 <xTaskResumeAll+0x190>
    1f10:	1f de       	rcall	.-962    	; 0x1b50 <xTaskIncrementTick>
    1f12:	88 23       	and	r24, r24
    1f14:	19 f0       	breq	.+6      	; 0x1f1c <xTaskResumeAll+0x174>
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	80 93 a9 13 	sts	0x13A9, r24	; 0x8013a9 <xYieldPending>
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	c8 1a       	sub	r12, r24
    1f20:	d1 08       	sbc	r13, r1
    1f22:	e1 08       	sbc	r14, r1
    1f24:	f1 08       	sbc	r15, r1
    1f26:	a1 f7       	brne	.-24     	; 0x1f10 <xTaskResumeAll+0x168>
    1f28:	10 92 aa 13 	sts	0x13AA, r1	; 0x8013aa <xPendedTicks>
    1f2c:	10 92 ab 13 	sts	0x13AB, r1	; 0x8013ab <xPendedTicks+0x1>
    1f30:	10 92 ac 13 	sts	0x13AC, r1	; 0x8013ac <xPendedTicks+0x2>
    1f34:	10 92 ad 13 	sts	0x13AD, r1	; 0x8013ad <xPendedTicks+0x3>
    1f38:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <xYieldPending>
    1f3c:	88 23       	and	r24, r24
    1f3e:	31 f0       	breq	.+12     	; 0x1f4c <xTaskResumeAll+0x1a4>
    1f40:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vPortYield>
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	03 c0       	rjmp	.+6      	; 0x1f4e <xTaskResumeAll+0x1a6>
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	01 c0       	rjmp	.+2      	; 0x1f4e <xTaskResumeAll+0x1a6>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	0f 90       	pop	r0
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	ff 90       	pop	r15
    1f58:	ef 90       	pop	r14
    1f5a:	df 90       	pop	r13
    1f5c:	cf 90       	pop	r12
    1f5e:	08 95       	ret

00001f60 <vTaskDelay>:
    1f60:	cf 92       	push	r12
    1f62:	df 92       	push	r13
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	6b 01       	movw	r12, r22
    1f6a:	7c 01       	movw	r14, r24
    1f6c:	67 2b       	or	r22, r23
    1f6e:	68 2b       	or	r22, r24
    1f70:	69 2b       	or	r22, r25
    1f72:	39 f0       	breq	.+14     	; 0x1f82 <vTaskDelay+0x22>
    1f74:	d9 dd       	rcall	.-1102   	; 0x1b28 <vTaskSuspendAll>
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	c7 01       	movw	r24, r14
    1f7a:	b6 01       	movw	r22, r12
    1f7c:	af dc       	rcall	.-1698   	; 0x18dc <prvAddCurrentTaskToDelayedList>
    1f7e:	14 df       	rcall	.-472    	; 0x1da8 <xTaskResumeAll>
    1f80:	01 c0       	rjmp	.+2      	; 0x1f84 <vTaskDelay+0x24>
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	81 11       	cpse	r24, r1
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <vTaskDelay+0x2c>
    1f88:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vPortYield>
    1f8c:	ff 90       	pop	r15
    1f8e:	ef 90       	pop	r14
    1f90:	df 90       	pop	r13
    1f92:	cf 90       	pop	r12
    1f94:	08 95       	ret

00001f96 <vTaskSwitchContext>:
    1f96:	80 91 a0 13 	lds	r24, 0x13A0	; 0x8013a0 <uxSchedulerSuspended>
    1f9a:	88 23       	and	r24, r24
    1f9c:	21 f0       	breq	.+8      	; 0x1fa6 <vTaskSwitchContext+0x10>
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	80 93 a9 13 	sts	0x13A9, r24	; 0x8013a9 <xYieldPending>
    1fa4:	08 95       	ret
    1fa6:	10 92 a9 13 	sts	0x13A9, r1	; 0x8013a9 <xYieldPending>
    1faa:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    1fae:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    1fb2:	20 81       	ld	r18, Z
    1fb4:	31 81       	ldd	r19, Z+1	; 0x01
    1fb6:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    1fba:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    1fbe:	83 8d       	ldd	r24, Z+27	; 0x1b
    1fc0:	94 8d       	ldd	r25, Z+28	; 0x1c
    1fc2:	82 17       	cp	r24, r18
    1fc4:	93 07       	cpc	r25, r19
    1fc6:	60 f0       	brcs	.+24     	; 0x1fe0 <vTaskSwitchContext+0x4a>
    1fc8:	60 91 5f 14 	lds	r22, 0x145F	; 0x80145f <pxCurrentTCB>
    1fcc:	70 91 60 14 	lds	r23, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    1fd0:	63 5e       	subi	r22, 0xE3	; 227
    1fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd4:	80 91 5f 14 	lds	r24, 0x145F	; 0x80145f <pxCurrentTCB>
    1fd8:	90 91 60 14 	lds	r25, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    1fdc:	0e 94 29 19 	call	0x3252	; 0x3252 <vApplicationStackOverflowHook>
    1fe0:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <uxTopReadyPriority>
    1fe4:	01 c0       	rjmp	.+2      	; 0x1fe8 <vTaskSwitchContext+0x52>
    1fe6:	81 50       	subi	r24, 0x01	; 1
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	9b e0       	ldi	r25, 0x0B	; 11
    1fee:	92 9f       	mul	r25, r18
    1ff0:	f0 01       	movw	r30, r0
    1ff2:	93 9f       	mul	r25, r19
    1ff4:	f0 0d       	add	r31, r0
    1ff6:	11 24       	eor	r1, r1
    1ff8:	ef 50       	subi	r30, 0x0F	; 15
    1ffa:	fc 4e       	sbci	r31, 0xEC	; 236
    1ffc:	90 81       	ld	r25, Z
    1ffe:	99 23       	and	r25, r25
    2000:	91 f3       	breq	.-28     	; 0x1fe6 <vTaskSwitchContext+0x50>
    2002:	9b e0       	ldi	r25, 0x0B	; 11
    2004:	92 9f       	mul	r25, r18
    2006:	a0 01       	movw	r20, r0
    2008:	93 9f       	mul	r25, r19
    200a:	50 0d       	add	r21, r0
    200c:	11 24       	eor	r1, r1
    200e:	df 01       	movw	r26, r30
    2010:	01 80       	ldd	r0, Z+1	; 0x01
    2012:	f2 81       	ldd	r31, Z+2	; 0x02
    2014:	e0 2d       	mov	r30, r0
    2016:	04 80       	ldd	r0, Z+4	; 0x04
    2018:	f5 81       	ldd	r31, Z+5	; 0x05
    201a:	e0 2d       	mov	r30, r0
    201c:	12 96       	adiw	r26, 0x02	; 2
    201e:	fc 93       	st	X, r31
    2020:	ee 93       	st	-X, r30
    2022:	11 97       	sbiw	r26, 0x01	; 1
    2024:	4c 50       	subi	r20, 0x0C	; 12
    2026:	5c 4e       	sbci	r21, 0xEC	; 236
    2028:	e4 17       	cp	r30, r20
    202a:	f5 07       	cpc	r31, r21
    202c:	29 f4       	brne	.+10     	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    202e:	44 81       	ldd	r20, Z+4	; 0x04
    2030:	55 81       	ldd	r21, Z+5	; 0x05
    2032:	fd 01       	movw	r30, r26
    2034:	52 83       	std	Z+2, r21	; 0x02
    2036:	41 83       	std	Z+1, r20	; 0x01
    2038:	9b e0       	ldi	r25, 0x0B	; 11
    203a:	92 9f       	mul	r25, r18
    203c:	f0 01       	movw	r30, r0
    203e:	93 9f       	mul	r25, r19
    2040:	f0 0d       	add	r31, r0
    2042:	11 24       	eor	r1, r1
    2044:	ef 50       	subi	r30, 0x0F	; 15
    2046:	fc 4e       	sbci	r31, 0xEC	; 236
    2048:	01 80       	ldd	r0, Z+1	; 0x01
    204a:	f2 81       	ldd	r31, Z+2	; 0x02
    204c:	e0 2d       	mov	r30, r0
    204e:	20 85       	ldd	r18, Z+8	; 0x08
    2050:	31 85       	ldd	r19, Z+9	; 0x09
    2052:	30 93 60 14 	sts	0x1460, r19	; 0x801460 <pxCurrentTCB+0x1>
    2056:	20 93 5f 14 	sts	0x145F, r18	; 0x80145f <pxCurrentTCB>
    205a:	80 93 af 13 	sts	0x13AF, r24	; 0x8013af <uxTopReadyPriority>
    205e:	08 95       	ret

00002060 <vTaskPlaceOnEventList>:
    2060:	cf 92       	push	r12
    2062:	df 92       	push	r13
    2064:	ef 92       	push	r14
    2066:	ff 92       	push	r15
    2068:	6a 01       	movw	r12, r20
    206a:	7b 01       	movw	r14, r22
    206c:	60 91 5f 14 	lds	r22, 0x145F	; 0x80145f <pxCurrentTCB>
    2070:	70 91 60 14 	lds	r23, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    2074:	62 5f       	subi	r22, 0xF2	; 242
    2076:	7f 4f       	sbci	r23, 0xFF	; 255
    2078:	0e 94 b2 02 	call	0x564	; 0x564 <vListInsert>
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	c7 01       	movw	r24, r14
    2080:	b6 01       	movw	r22, r12
    2082:	2c dc       	rcall	.-1960   	; 0x18dc <prvAddCurrentTaskToDelayedList>
    2084:	ff 90       	pop	r15
    2086:	ef 90       	pop	r14
    2088:	df 90       	pop	r13
    208a:	cf 90       	pop	r12
    208c:	08 95       	ret

0000208e <vTaskPlaceOnEventListRestricted>:
    208e:	cf 93       	push	r28
    2090:	df 93       	push	r29
    2092:	fc 01       	movw	r30, r24
    2094:	cb 01       	movw	r24, r22
    2096:	ba 01       	movw	r22, r20
    2098:	a1 81       	ldd	r26, Z+1	; 0x01
    209a:	b2 81       	ldd	r27, Z+2	; 0x02
    209c:	c0 91 5f 14 	lds	r28, 0x145F	; 0x80145f <pxCurrentTCB>
    20a0:	d0 91 60 14 	lds	r29, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    20a4:	bb 8b       	std	Y+19, r27	; 0x13
    20a6:	aa 8b       	std	Y+18, r26	; 0x12
    20a8:	c0 91 5f 14 	lds	r28, 0x145F	; 0x80145f <pxCurrentTCB>
    20ac:	d0 91 60 14 	lds	r29, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    20b0:	16 96       	adiw	r26, 0x06	; 6
    20b2:	4d 91       	ld	r20, X+
    20b4:	5c 91       	ld	r21, X
    20b6:	17 97       	sbiw	r26, 0x07	; 7
    20b8:	5d 8b       	std	Y+21, r21	; 0x15
    20ba:	4c 8b       	std	Y+20, r20	; 0x14
    20bc:	16 96       	adiw	r26, 0x06	; 6
    20be:	cd 91       	ld	r28, X+
    20c0:	dc 91       	ld	r29, X
    20c2:	17 97       	sbiw	r26, 0x07	; 7
    20c4:	40 91 5f 14 	lds	r20, 0x145F	; 0x80145f <pxCurrentTCB>
    20c8:	50 91 60 14 	lds	r21, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    20cc:	42 5f       	subi	r20, 0xF2	; 242
    20ce:	5f 4f       	sbci	r21, 0xFF	; 255
    20d0:	5d 83       	std	Y+5, r21	; 0x05
    20d2:	4c 83       	std	Y+4, r20	; 0x04
    20d4:	40 91 5f 14 	lds	r20, 0x145F	; 0x80145f <pxCurrentTCB>
    20d8:	50 91 60 14 	lds	r21, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    20dc:	42 5f       	subi	r20, 0xF2	; 242
    20de:	5f 4f       	sbci	r21, 0xFF	; 255
    20e0:	17 96       	adiw	r26, 0x07	; 7
    20e2:	5c 93       	st	X, r21
    20e4:	4e 93       	st	-X, r20
    20e6:	16 97       	sbiw	r26, 0x06	; 6
    20e8:	a0 91 5f 14 	lds	r26, 0x145F	; 0x80145f <pxCurrentTCB>
    20ec:	b0 91 60 14 	lds	r27, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    20f0:	59 96       	adiw	r26, 0x19	; 25
    20f2:	fc 93       	st	X, r31
    20f4:	ee 93       	st	-X, r30
    20f6:	58 97       	sbiw	r26, 0x18	; 24
    20f8:	30 81       	ld	r19, Z
    20fa:	3f 5f       	subi	r19, 0xFF	; 255
    20fc:	30 83       	st	Z, r19
    20fe:	22 23       	and	r18, r18
    2100:	19 f0       	breq	.+6      	; 0x2108 <vTaskPlaceOnEventListRestricted+0x7a>
    2102:	6f ef       	ldi	r22, 0xFF	; 255
    2104:	7f ef       	ldi	r23, 0xFF	; 255
    2106:	cb 01       	movw	r24, r22
    2108:	42 2f       	mov	r20, r18
    210a:	e8 db       	rcall	.-2096   	; 0x18dc <prvAddCurrentTaskToDelayedList>
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	08 95       	ret

00002112 <xTaskRemoveFromEventList>:
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	dc 01       	movw	r26, r24
    2118:	17 96       	adiw	r26, 0x07	; 7
    211a:	ed 91       	ld	r30, X+
    211c:	fc 91       	ld	r31, X
    211e:	18 97       	sbiw	r26, 0x08	; 8
    2120:	00 84       	ldd	r0, Z+8	; 0x08
    2122:	f1 85       	ldd	r31, Z+9	; 0x09
    2124:	e0 2d       	mov	r30, r0
    2126:	a0 8d       	ldd	r26, Z+24	; 0x18
    2128:	b1 8d       	ldd	r27, Z+25	; 0x19
    212a:	c2 89       	ldd	r28, Z+18	; 0x12
    212c:	d3 89       	ldd	r29, Z+19	; 0x13
    212e:	84 89       	ldd	r24, Z+20	; 0x14
    2130:	95 89       	ldd	r25, Z+21	; 0x15
    2132:	9f 83       	std	Y+7, r25	; 0x07
    2134:	8e 83       	std	Y+6, r24	; 0x06
    2136:	c4 89       	ldd	r28, Z+20	; 0x14
    2138:	d5 89       	ldd	r29, Z+21	; 0x15
    213a:	82 89       	ldd	r24, Z+18	; 0x12
    213c:	93 89       	ldd	r25, Z+19	; 0x13
    213e:	9d 83       	std	Y+5, r25	; 0x05
    2140:	8c 83       	std	Y+4, r24	; 0x04
    2142:	11 96       	adiw	r26, 0x01	; 1
    2144:	8d 91       	ld	r24, X+
    2146:	9c 91       	ld	r25, X
    2148:	12 97       	sbiw	r26, 0x02	; 2
    214a:	9f 01       	movw	r18, r30
    214c:	22 5f       	subi	r18, 0xF2	; 242
    214e:	3f 4f       	sbci	r19, 0xFF	; 255
    2150:	82 17       	cp	r24, r18
    2152:	93 07       	cpc	r25, r19
    2154:	31 f4       	brne	.+12     	; 0x2162 <xTaskRemoveFromEventList+0x50>
    2156:	84 89       	ldd	r24, Z+20	; 0x14
    2158:	95 89       	ldd	r25, Z+21	; 0x15
    215a:	12 96       	adiw	r26, 0x02	; 2
    215c:	9c 93       	st	X, r25
    215e:	8e 93       	st	-X, r24
    2160:	11 97       	sbiw	r26, 0x01	; 1
    2162:	11 8e       	std	Z+25, r1	; 0x19
    2164:	10 8e       	std	Z+24, r1	; 0x18
    2166:	8c 91       	ld	r24, X
    2168:	81 50       	subi	r24, 0x01	; 1
    216a:	8c 93       	st	X, r24
    216c:	80 91 a0 13 	lds	r24, 0x13A0	; 0x8013a0 <uxSchedulerSuspended>
    2170:	81 11       	cpse	r24, r1
    2172:	52 c0       	rjmp	.+164    	; 0x2218 <__stack+0x19>
    2174:	a4 85       	ldd	r26, Z+12	; 0x0c
    2176:	b5 85       	ldd	r27, Z+13	; 0x0d
    2178:	c6 81       	ldd	r28, Z+6	; 0x06
    217a:	d7 81       	ldd	r29, Z+7	; 0x07
    217c:	80 85       	ldd	r24, Z+8	; 0x08
    217e:	91 85       	ldd	r25, Z+9	; 0x09
    2180:	9f 83       	std	Y+7, r25	; 0x07
    2182:	8e 83       	std	Y+6, r24	; 0x06
    2184:	c0 85       	ldd	r28, Z+8	; 0x08
    2186:	d1 85       	ldd	r29, Z+9	; 0x09
    2188:	86 81       	ldd	r24, Z+6	; 0x06
    218a:	97 81       	ldd	r25, Z+7	; 0x07
    218c:	9d 83       	std	Y+5, r25	; 0x05
    218e:	8c 83       	std	Y+4, r24	; 0x04
    2190:	11 96       	adiw	r26, 0x01	; 1
    2192:	8d 91       	ld	r24, X+
    2194:	9c 91       	ld	r25, X
    2196:	12 97       	sbiw	r26, 0x02	; 2
    2198:	9f 01       	movw	r18, r30
    219a:	2e 5f       	subi	r18, 0xFE	; 254
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	82 17       	cp	r24, r18
    21a0:	93 07       	cpc	r25, r19
    21a2:	31 f4       	brne	.+12     	; 0x21b0 <xTaskRemoveFromEventList+0x9e>
    21a4:	80 85       	ldd	r24, Z+8	; 0x08
    21a6:	91 85       	ldd	r25, Z+9	; 0x09
    21a8:	12 96       	adiw	r26, 0x02	; 2
    21aa:	9c 93       	st	X, r25
    21ac:	8e 93       	st	-X, r24
    21ae:	11 97       	sbiw	r26, 0x01	; 1
    21b0:	15 86       	std	Z+13, r1	; 0x0d
    21b2:	14 86       	std	Z+12, r1	; 0x0c
    21b4:	8c 91       	ld	r24, X
    21b6:	81 50       	subi	r24, 0x01	; 1
    21b8:	8c 93       	st	X, r24
    21ba:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21bc:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <uxTopReadyPriority>
    21c0:	8a 17       	cp	r24, r26
    21c2:	10 f4       	brcc	.+4      	; 0x21c8 <xTaskRemoveFromEventList+0xb6>
    21c4:	a0 93 af 13 	sts	0x13AF, r26	; 0x8013af <uxTopReadyPriority>
    21c8:	8b e0       	ldi	r24, 0x0B	; 11
    21ca:	8a 9f       	mul	r24, r26
    21cc:	d0 01       	movw	r26, r0
    21ce:	11 24       	eor	r1, r1
    21d0:	af 50       	subi	r26, 0x0F	; 15
    21d2:	bc 4e       	sbci	r27, 0xEC	; 236
    21d4:	11 96       	adiw	r26, 0x01	; 1
    21d6:	0d 90       	ld	r0, X+
    21d8:	bc 91       	ld	r27, X
    21da:	a0 2d       	mov	r26, r0
    21dc:	b7 83       	std	Z+7, r27	; 0x07
    21de:	a6 83       	std	Z+6, r26	; 0x06
    21e0:	16 96       	adiw	r26, 0x06	; 6
    21e2:	4d 91       	ld	r20, X+
    21e4:	5c 91       	ld	r21, X
    21e6:	17 97       	sbiw	r26, 0x07	; 7
    21e8:	51 87       	std	Z+9, r21	; 0x09
    21ea:	40 87       	std	Z+8, r20	; 0x08
    21ec:	16 96       	adiw	r26, 0x06	; 6
    21ee:	cd 91       	ld	r28, X+
    21f0:	dc 91       	ld	r29, X
    21f2:	17 97       	sbiw	r26, 0x07	; 7
    21f4:	3d 83       	std	Y+5, r19	; 0x05
    21f6:	2c 83       	std	Y+4, r18	; 0x04
    21f8:	17 96       	adiw	r26, 0x07	; 7
    21fa:	3c 93       	st	X, r19
    21fc:	2e 93       	st	-X, r18
    21fe:	16 97       	sbiw	r26, 0x06	; 6
    2200:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2202:	8a 9f       	mul	r24, r26
    2204:	d0 01       	movw	r26, r0
    2206:	11 24       	eor	r1, r1
    2208:	af 50       	subi	r26, 0x0F	; 15
    220a:	bc 4e       	sbci	r27, 0xEC	; 236
    220c:	b5 87       	std	Z+13, r27	; 0x0d
    220e:	a4 87       	std	Z+12, r26	; 0x0c
    2210:	8c 91       	ld	r24, X
    2212:	8f 5f       	subi	r24, 0xFF	; 255
    2214:	8c 93       	st	X, r24
    2216:	1c c0       	rjmp	.+56     	; 0x2250 <__stack+0x51>
    2218:	4c ec       	ldi	r20, 0xCC	; 204
    221a:	53 e1       	ldi	r21, 0x13	; 19
    221c:	da 01       	movw	r26, r20
    221e:	11 96       	adiw	r26, 0x01	; 1
    2220:	cd 91       	ld	r28, X+
    2222:	dc 91       	ld	r29, X
    2224:	12 97       	sbiw	r26, 0x02	; 2
    2226:	d3 8b       	std	Z+19, r29	; 0x13
    2228:	c2 8b       	std	Z+18, r28	; 0x12
    222a:	8e 81       	ldd	r24, Y+6	; 0x06
    222c:	9f 81       	ldd	r25, Y+7	; 0x07
    222e:	95 8b       	std	Z+21, r25	; 0x15
    2230:	84 8b       	std	Z+20, r24	; 0x14
    2232:	8e 81       	ldd	r24, Y+6	; 0x06
    2234:	9f 81       	ldd	r25, Y+7	; 0x07
    2236:	dc 01       	movw	r26, r24
    2238:	15 96       	adiw	r26, 0x05	; 5
    223a:	3c 93       	st	X, r19
    223c:	2e 93       	st	-X, r18
    223e:	14 97       	sbiw	r26, 0x04	; 4
    2240:	3f 83       	std	Y+7, r19	; 0x07
    2242:	2e 83       	std	Y+6, r18	; 0x06
    2244:	51 8f       	std	Z+25, r21	; 0x19
    2246:	40 8f       	std	Z+24, r20	; 0x18
    2248:	da 01       	movw	r26, r20
    224a:	8c 91       	ld	r24, X
    224c:	8f 5f       	subi	r24, 0xFF	; 255
    224e:	8c 93       	st	X, r24
    2250:	92 8d       	ldd	r25, Z+26	; 0x1a
    2252:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    2256:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    225a:	82 8d       	ldd	r24, Z+26	; 0x1a
    225c:	89 17       	cp	r24, r25
    225e:	20 f4       	brcc	.+8      	; 0x2268 <__stack+0x69>
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	80 93 a9 13 	sts	0x13A9, r24	; 0x8013a9 <xYieldPending>
    2266:	01 c0       	rjmp	.+2      	; 0x226a <__stack+0x6b>
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	08 95       	ret

00002270 <vTaskSetTimeOutState>:
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	0f 92       	push	r0
    2276:	20 91 a8 13 	lds	r18, 0x13A8	; 0x8013a8 <xNumOfOverflows>
    227a:	fc 01       	movw	r30, r24
    227c:	20 83       	st	Z, r18
    227e:	40 91 b0 13 	lds	r20, 0x13B0	; 0x8013b0 <xTickCount>
    2282:	50 91 b1 13 	lds	r21, 0x13B1	; 0x8013b1 <xTickCount+0x1>
    2286:	60 91 b2 13 	lds	r22, 0x13B2	; 0x8013b2 <xTickCount+0x2>
    228a:	70 91 b3 13 	lds	r23, 0x13B3	; 0x8013b3 <xTickCount+0x3>
    228e:	41 83       	std	Z+1, r20	; 0x01
    2290:	52 83       	std	Z+2, r21	; 0x02
    2292:	63 83       	std	Z+3, r22	; 0x03
    2294:	74 83       	std	Z+4, r23	; 0x04
    2296:	0f 90       	pop	r0
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	08 95       	ret

0000229c <vTaskInternalSetTimeOutState>:
    229c:	20 91 a8 13 	lds	r18, 0x13A8	; 0x8013a8 <xNumOfOverflows>
    22a0:	fc 01       	movw	r30, r24
    22a2:	20 83       	st	Z, r18
    22a4:	40 91 b0 13 	lds	r20, 0x13B0	; 0x8013b0 <xTickCount>
    22a8:	50 91 b1 13 	lds	r21, 0x13B1	; 0x8013b1 <xTickCount+0x1>
    22ac:	60 91 b2 13 	lds	r22, 0x13B2	; 0x8013b2 <xTickCount+0x2>
    22b0:	70 91 b3 13 	lds	r23, 0x13B3	; 0x8013b3 <xTickCount+0x3>
    22b4:	41 83       	std	Z+1, r20	; 0x01
    22b6:	52 83       	std	Z+2, r21	; 0x02
    22b8:	63 83       	std	Z+3, r22	; 0x03
    22ba:	74 83       	std	Z+4, r23	; 0x04
    22bc:	08 95       	ret

000022be <xTaskCheckForTimeOut>:
    22be:	8f 92       	push	r8
    22c0:	9f 92       	push	r9
    22c2:	af 92       	push	r10
    22c4:	bf 92       	push	r11
    22c6:	cf 92       	push	r12
    22c8:	df 92       	push	r13
    22ca:	ef 92       	push	r14
    22cc:	ff 92       	push	r15
    22ce:	0f 93       	push	r16
    22d0:	1f 93       	push	r17
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	fb 01       	movw	r30, r22
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	0f 92       	push	r0
    22de:	c0 90 b0 13 	lds	r12, 0x13B0	; 0x8013b0 <xTickCount>
    22e2:	d0 90 b1 13 	lds	r13, 0x13B1	; 0x8013b1 <xTickCount+0x1>
    22e6:	e0 90 b2 13 	lds	r14, 0x13B2	; 0x8013b2 <xTickCount+0x2>
    22ea:	f0 90 b3 13 	lds	r15, 0x13B3	; 0x8013b3 <xTickCount+0x3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	11 96       	adiw	r26, 0x01	; 1
    22f2:	0d 91       	ld	r16, X+
    22f4:	1d 91       	ld	r17, X+
    22f6:	2d 91       	ld	r18, X+
    22f8:	3c 91       	ld	r19, X
    22fa:	14 97       	sbiw	r26, 0x04	; 4
    22fc:	46 01       	movw	r8, r12
    22fe:	57 01       	movw	r10, r14
    2300:	80 1a       	sub	r8, r16
    2302:	91 0a       	sbc	r9, r17
    2304:	a2 0a       	sbc	r10, r18
    2306:	b3 0a       	sbc	r11, r19
    2308:	40 81       	ld	r20, Z
    230a:	51 81       	ldd	r21, Z+1	; 0x01
    230c:	62 81       	ldd	r22, Z+2	; 0x02
    230e:	73 81       	ldd	r23, Z+3	; 0x03
    2310:	4f 3f       	cpi	r20, 0xFF	; 255
    2312:	bf ef       	ldi	r27, 0xFF	; 255
    2314:	5b 07       	cpc	r21, r27
    2316:	6b 07       	cpc	r22, r27
    2318:	7b 07       	cpc	r23, r27
    231a:	39 f1       	breq	.+78     	; 0x236a <xTaskCheckForTimeOut+0xac>
    231c:	ec 01       	movw	r28, r24
    231e:	b8 81       	ld	r27, Y
    2320:	a0 91 a8 13 	lds	r26, 0x13A8	; 0x8013a8 <xNumOfOverflows>
    2324:	ba 17       	cp	r27, r26
    2326:	59 f0       	breq	.+22     	; 0x233e <xTaskCheckForTimeOut+0x80>
    2328:	c0 16       	cp	r12, r16
    232a:	d1 06       	cpc	r13, r17
    232c:	e2 06       	cpc	r14, r18
    232e:	f3 06       	cpc	r15, r19
    2330:	30 f0       	brcs	.+12     	; 0x233e <xTaskCheckForTimeOut+0x80>
    2332:	10 82       	st	Z, r1
    2334:	11 82       	std	Z+1, r1	; 0x01
    2336:	12 82       	std	Z+2, r1	; 0x02
    2338:	13 82       	std	Z+3, r1	; 0x03
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	17 c0       	rjmp	.+46     	; 0x236c <xTaskCheckForTimeOut+0xae>
    233e:	84 16       	cp	r8, r20
    2340:	95 06       	cpc	r9, r21
    2342:	a6 06       	cpc	r10, r22
    2344:	b7 06       	cpc	r11, r23
    2346:	58 f4       	brcc	.+22     	; 0x235e <xTaskCheckForTimeOut+0xa0>
    2348:	48 19       	sub	r20, r8
    234a:	59 09       	sbc	r21, r9
    234c:	6a 09       	sbc	r22, r10
    234e:	7b 09       	sbc	r23, r11
    2350:	40 83       	st	Z, r20
    2352:	51 83       	std	Z+1, r21	; 0x01
    2354:	62 83       	std	Z+2, r22	; 0x02
    2356:	73 83       	std	Z+3, r23	; 0x03
    2358:	a1 df       	rcall	.-190    	; 0x229c <vTaskInternalSetTimeOutState>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	07 c0       	rjmp	.+14     	; 0x236c <xTaskCheckForTimeOut+0xae>
    235e:	10 82       	st	Z, r1
    2360:	11 82       	std	Z+1, r1	; 0x01
    2362:	12 82       	std	Z+2, r1	; 0x02
    2364:	13 82       	std	Z+3, r1	; 0x03
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	01 c0       	rjmp	.+2      	; 0x236c <xTaskCheckForTimeOut+0xae>
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	0f 90       	pop	r0
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	1f 91       	pop	r17
    2376:	0f 91       	pop	r16
    2378:	ff 90       	pop	r15
    237a:	ef 90       	pop	r14
    237c:	df 90       	pop	r13
    237e:	cf 90       	pop	r12
    2380:	bf 90       	pop	r11
    2382:	af 90       	pop	r10
    2384:	9f 90       	pop	r9
    2386:	8f 90       	pop	r8
    2388:	08 95       	ret

0000238a <vTaskMissedYield>:
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	80 93 a9 13 	sts	0x13A9, r24	; 0x8013a9 <xYieldPending>
    2390:	08 95       	ret

00002392 <xTaskGetCurrentTaskHandle>:
    2392:	80 91 5f 14 	lds	r24, 0x145F	; 0x80145f <pxCurrentTCB>
    2396:	90 91 60 14 	lds	r25, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    239a:	08 95       	ret

0000239c <xTaskGetSchedulerState>:
    239c:	80 91 ae 13 	lds	r24, 0x13AE	; 0x8013ae <xSchedulerRunning>
    23a0:	88 23       	and	r24, r24
    23a2:	31 f0       	breq	.+12     	; 0x23b0 <xTaskGetSchedulerState+0x14>
    23a4:	80 91 a0 13 	lds	r24, 0x13A0	; 0x8013a0 <uxSchedulerSuspended>
    23a8:	81 11       	cpse	r24, r1
    23aa:	04 c0       	rjmp	.+8      	; 0x23b4 <xTaskGetSchedulerState+0x18>
    23ac:	82 e0       	ldi	r24, 0x02	; 2
    23ae:	08 95       	ret
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	08 95       	ret
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	08 95       	ret

000023b8 <xTaskPriorityInherit>:
    23b8:	0f 93       	push	r16
    23ba:	1f 93       	push	r17
    23bc:	cf 93       	push	r28
    23be:	df 93       	push	r29
    23c0:	fc 01       	movw	r30, r24
    23c2:	89 2b       	or	r24, r25
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <xTaskPriorityInherit+0x10>
    23c6:	77 c0       	rjmp	.+238    	; 0x24b6 <xTaskPriorityInherit+0xfe>
    23c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    23ca:	a0 91 5f 14 	lds	r26, 0x145F	; 0x80145f <pxCurrentTCB>
    23ce:	b0 91 60 14 	lds	r27, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    23d2:	5a 96       	adiw	r26, 0x1a	; 26
    23d4:	9c 91       	ld	r25, X
    23d6:	89 17       	cp	r24, r25
    23d8:	08 f0       	brcs	.+2      	; 0x23dc <xTaskPriorityInherit+0x24>
    23da:	63 c0       	rjmp	.+198    	; 0x24a2 <xTaskPriorityInherit+0xea>
    23dc:	46 85       	ldd	r20, Z+14	; 0x0e
    23de:	57 85       	ldd	r21, Z+15	; 0x0f
    23e0:	60 89       	ldd	r22, Z+16	; 0x10
    23e2:	71 89       	ldd	r23, Z+17	; 0x11
    23e4:	77 23       	and	r23, r23
    23e6:	94 f0       	brlt	.+36     	; 0x240c <xTaskPriorityInherit+0x54>
    23e8:	a0 91 5f 14 	lds	r26, 0x145F	; 0x80145f <pxCurrentTCB>
    23ec:	b0 91 60 14 	lds	r27, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    23f0:	5a 96       	adiw	r26, 0x1a	; 26
    23f2:	9c 91       	ld	r25, X
    23f4:	4a e0       	ldi	r20, 0x0A	; 10
    23f6:	50 e0       	ldi	r21, 0x00	; 0
    23f8:	60 e0       	ldi	r22, 0x00	; 0
    23fa:	70 e0       	ldi	r23, 0x00	; 0
    23fc:	49 1b       	sub	r20, r25
    23fe:	51 09       	sbc	r21, r1
    2400:	61 09       	sbc	r22, r1
    2402:	71 09       	sbc	r23, r1
    2404:	46 87       	std	Z+14, r20	; 0x0e
    2406:	57 87       	std	Z+15, r21	; 0x0f
    2408:	60 8b       	std	Z+16, r22	; 0x10
    240a:	71 8b       	std	Z+17, r23	; 0x11
    240c:	24 85       	ldd	r18, Z+12	; 0x0c
    240e:	35 85       	ldd	r19, Z+13	; 0x0d
    2410:	4b e0       	ldi	r20, 0x0B	; 11
    2412:	84 9f       	mul	r24, r20
    2414:	c0 01       	movw	r24, r0
    2416:	11 24       	eor	r1, r1
    2418:	8f 50       	subi	r24, 0x0F	; 15
    241a:	9c 4e       	sbci	r25, 0xEC	; 236
    241c:	28 17       	cp	r18, r24
    241e:	39 07       	cpc	r19, r25
    2420:	b9 f5       	brne	.+110    	; 0x2490 <xTaskPriorityInherit+0xd8>
    2422:	ef 01       	movw	r28, r30
    2424:	8f 01       	movw	r16, r30
    2426:	0e 5f       	subi	r16, 0xFE	; 254
    2428:	1f 4f       	sbci	r17, 0xFF	; 255
    242a:	c8 01       	movw	r24, r16
    242c:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
    2430:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    2434:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    2438:	e2 8d       	ldd	r30, Z+26	; 0x1a
    243a:	ea 8f       	std	Y+26, r30	; 0x1a
    243c:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <uxTopReadyPriority>
    2440:	8e 17       	cp	r24, r30
    2442:	10 f4       	brcc	.+4      	; 0x2448 <xTaskPriorityInherit+0x90>
    2444:	e0 93 af 13 	sts	0x13AF, r30	; 0x8013af <uxTopReadyPriority>
    2448:	8b e0       	ldi	r24, 0x0B	; 11
    244a:	8e 9f       	mul	r24, r30
    244c:	f0 01       	movw	r30, r0
    244e:	11 24       	eor	r1, r1
    2450:	ef 50       	subi	r30, 0x0F	; 15
    2452:	fc 4e       	sbci	r31, 0xEC	; 236
    2454:	01 80       	ldd	r0, Z+1	; 0x01
    2456:	f2 81       	ldd	r31, Z+2	; 0x02
    2458:	e0 2d       	mov	r30, r0
    245a:	ff 83       	std	Y+7, r31	; 0x07
    245c:	ee 83       	std	Y+6, r30	; 0x06
    245e:	26 81       	ldd	r18, Z+6	; 0x06
    2460:	37 81       	ldd	r19, Z+7	; 0x07
    2462:	39 87       	std	Y+9, r19	; 0x09
    2464:	28 87       	std	Y+8, r18	; 0x08
    2466:	a6 81       	ldd	r26, Z+6	; 0x06
    2468:	b7 81       	ldd	r27, Z+7	; 0x07
    246a:	15 96       	adiw	r26, 0x05	; 5
    246c:	1c 93       	st	X, r17
    246e:	0e 93       	st	-X, r16
    2470:	14 97       	sbiw	r26, 0x04	; 4
    2472:	17 83       	std	Z+7, r17	; 0x07
    2474:	06 83       	std	Z+6, r16	; 0x06
    2476:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2478:	8e 9f       	mul	r24, r30
    247a:	f0 01       	movw	r30, r0
    247c:	11 24       	eor	r1, r1
    247e:	ef 50       	subi	r30, 0x0F	; 15
    2480:	fc 4e       	sbci	r31, 0xEC	; 236
    2482:	fd 87       	std	Y+13, r31	; 0x0d
    2484:	ec 87       	std	Y+12, r30	; 0x0c
    2486:	80 81       	ld	r24, Z
    2488:	8f 5f       	subi	r24, 0xFF	; 255
    248a:	80 83       	st	Z, r24
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	16 c0       	rjmp	.+44     	; 0x24bc <xTaskPriorityInherit+0x104>
    2490:	a0 91 5f 14 	lds	r26, 0x145F	; 0x80145f <pxCurrentTCB>
    2494:	b0 91 60 14 	lds	r27, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    2498:	5a 96       	adiw	r26, 0x1a	; 26
    249a:	8c 91       	ld	r24, X
    249c:	82 8f       	std	Z+26, r24	; 0x1a
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	0d c0       	rjmp	.+26     	; 0x24bc <xTaskPriorityInherit+0x104>
    24a2:	95 a5       	ldd	r25, Z+45	; 0x2d
    24a4:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    24a8:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    24ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    24ae:	98 17       	cp	r25, r24
    24b0:	20 f0       	brcs	.+8      	; 0x24ba <xTaskPriorityInherit+0x102>
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	03 c0       	rjmp	.+6      	; 0x24bc <xTaskPriorityInherit+0x104>
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	01 c0       	rjmp	.+2      	; 0x24bc <xTaskPriorityInherit+0x104>
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	1f 91       	pop	r17
    24c2:	0f 91       	pop	r16
    24c4:	08 95       	ret

000024c6 <xTaskPriorityDisinherit>:
    24c6:	0f 93       	push	r16
    24c8:	1f 93       	push	r17
    24ca:	cf 93       	push	r28
    24cc:	df 93       	push	r29
    24ce:	fc 01       	movw	r30, r24
    24d0:	89 2b       	or	r24, r25
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <xTaskPriorityDisinherit+0x10>
    24d4:	49 c0       	rjmp	.+146    	; 0x2568 <xTaskPriorityDisinherit+0xa2>
    24d6:	86 a5       	ldd	r24, Z+46	; 0x2e
    24d8:	81 50       	subi	r24, 0x01	; 1
    24da:	86 a7       	std	Z+46, r24	; 0x2e
    24dc:	22 8d       	ldd	r18, Z+26	; 0x1a
    24de:	95 a5       	ldd	r25, Z+45	; 0x2d
    24e0:	29 17       	cp	r18, r25
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <xTaskPriorityDisinherit+0x20>
    24e4:	43 c0       	rjmp	.+134    	; 0x256c <xTaskPriorityDisinherit+0xa6>
    24e6:	81 11       	cpse	r24, r1
    24e8:	43 c0       	rjmp	.+134    	; 0x2570 <xTaskPriorityDisinherit+0xaa>
    24ea:	ef 01       	movw	r28, r30
    24ec:	8f 01       	movw	r16, r30
    24ee:	0e 5f       	subi	r16, 0xFE	; 254
    24f0:	1f 4f       	sbci	r17, 0xFF	; 255
    24f2:	c8 01       	movw	r24, r16
    24f4:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
    24f8:	ed a5       	ldd	r30, Y+45	; 0x2d
    24fa:	ea 8f       	std	Y+26, r30	; 0x1a
    24fc:	8a e0       	ldi	r24, 0x0A	; 10
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	a0 e0       	ldi	r26, 0x00	; 0
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	8e 1b       	sub	r24, r30
    2506:	91 09       	sbc	r25, r1
    2508:	a1 09       	sbc	r26, r1
    250a:	b1 09       	sbc	r27, r1
    250c:	8e 87       	std	Y+14, r24	; 0x0e
    250e:	9f 87       	std	Y+15, r25	; 0x0f
    2510:	a8 8b       	std	Y+16, r26	; 0x10
    2512:	b9 8b       	std	Y+17, r27	; 0x11
    2514:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <uxTopReadyPriority>
    2518:	8e 17       	cp	r24, r30
    251a:	10 f4       	brcc	.+4      	; 0x2520 <xTaskPriorityDisinherit+0x5a>
    251c:	e0 93 af 13 	sts	0x13AF, r30	; 0x8013af <uxTopReadyPriority>
    2520:	8b e0       	ldi	r24, 0x0B	; 11
    2522:	8e 9f       	mul	r24, r30
    2524:	f0 01       	movw	r30, r0
    2526:	11 24       	eor	r1, r1
    2528:	ef 50       	subi	r30, 0x0F	; 15
    252a:	fc 4e       	sbci	r31, 0xEC	; 236
    252c:	01 80       	ldd	r0, Z+1	; 0x01
    252e:	f2 81       	ldd	r31, Z+2	; 0x02
    2530:	e0 2d       	mov	r30, r0
    2532:	ff 83       	std	Y+7, r31	; 0x07
    2534:	ee 83       	std	Y+6, r30	; 0x06
    2536:	26 81       	ldd	r18, Z+6	; 0x06
    2538:	37 81       	ldd	r19, Z+7	; 0x07
    253a:	39 87       	std	Y+9, r19	; 0x09
    253c:	28 87       	std	Y+8, r18	; 0x08
    253e:	a6 81       	ldd	r26, Z+6	; 0x06
    2540:	b7 81       	ldd	r27, Z+7	; 0x07
    2542:	15 96       	adiw	r26, 0x05	; 5
    2544:	1c 93       	st	X, r17
    2546:	0e 93       	st	-X, r16
    2548:	14 97       	sbiw	r26, 0x04	; 4
    254a:	17 83       	std	Z+7, r17	; 0x07
    254c:	06 83       	std	Z+6, r16	; 0x06
    254e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2550:	8e 9f       	mul	r24, r30
    2552:	f0 01       	movw	r30, r0
    2554:	11 24       	eor	r1, r1
    2556:	ef 50       	subi	r30, 0x0F	; 15
    2558:	fc 4e       	sbci	r31, 0xEC	; 236
    255a:	fd 87       	std	Y+13, r31	; 0x0d
    255c:	ec 87       	std	Y+12, r30	; 0x0c
    255e:	80 81       	ld	r24, Z
    2560:	8f 5f       	subi	r24, 0xFF	; 255
    2562:	80 83       	st	Z, r24
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	05 c0       	rjmp	.+10     	; 0x2572 <xTaskPriorityDisinherit+0xac>
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	03 c0       	rjmp	.+6      	; 0x2572 <xTaskPriorityDisinherit+0xac>
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	01 c0       	rjmp	.+2      	; 0x2572 <xTaskPriorityDisinherit+0xac>
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	df 91       	pop	r29
    2574:	cf 91       	pop	r28
    2576:	1f 91       	pop	r17
    2578:	0f 91       	pop	r16
    257a:	08 95       	ret

0000257c <vTaskPriorityDisinheritAfterTimeout>:
    257c:	0f 93       	push	r16
    257e:	1f 93       	push	r17
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	fc 01       	movw	r30, r24
    2586:	89 2b       	or	r24, r25
    2588:	09 f4       	brne	.+2      	; 0x258c <vTaskPriorityDisinheritAfterTimeout+0x10>
    258a:	5a c0       	rjmp	.+180    	; 0x2640 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    258c:	85 a5       	ldd	r24, Z+45	; 0x2d
    258e:	86 17       	cp	r24, r22
    2590:	08 f4       	brcc	.+2      	; 0x2594 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2592:	86 2f       	mov	r24, r22
    2594:	92 8d       	ldd	r25, Z+26	; 0x1a
    2596:	89 17       	cp	r24, r25
    2598:	09 f4       	brne	.+2      	; 0x259c <vTaskPriorityDisinheritAfterTimeout+0x20>
    259a:	52 c0       	rjmp	.+164    	; 0x2640 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    259c:	26 a5       	ldd	r18, Z+46	; 0x2e
    259e:	21 30       	cpi	r18, 0x01	; 1
    25a0:	09 f0       	breq	.+2      	; 0x25a4 <vTaskPriorityDisinheritAfterTimeout+0x28>
    25a2:	4e c0       	rjmp	.+156    	; 0x2640 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    25a4:	82 8f       	std	Z+26, r24	; 0x1a
    25a6:	46 85       	ldd	r20, Z+14	; 0x0e
    25a8:	57 85       	ldd	r21, Z+15	; 0x0f
    25aa:	60 89       	ldd	r22, Z+16	; 0x10
    25ac:	71 89       	ldd	r23, Z+17	; 0x11
    25ae:	77 23       	and	r23, r23
    25b0:	64 f0       	brlt	.+24     	; 0x25ca <vTaskPriorityDisinheritAfterTimeout+0x4e>
    25b2:	4a e0       	ldi	r20, 0x0A	; 10
    25b4:	50 e0       	ldi	r21, 0x00	; 0
    25b6:	60 e0       	ldi	r22, 0x00	; 0
    25b8:	70 e0       	ldi	r23, 0x00	; 0
    25ba:	48 1b       	sub	r20, r24
    25bc:	51 09       	sbc	r21, r1
    25be:	61 09       	sbc	r22, r1
    25c0:	71 09       	sbc	r23, r1
    25c2:	46 87       	std	Z+14, r20	; 0x0e
    25c4:	57 87       	std	Z+15, r21	; 0x0f
    25c6:	60 8b       	std	Z+16, r22	; 0x10
    25c8:	71 8b       	std	Z+17, r23	; 0x11
    25ca:	24 85       	ldd	r18, Z+12	; 0x0c
    25cc:	35 85       	ldd	r19, Z+13	; 0x0d
    25ce:	4b e0       	ldi	r20, 0x0B	; 11
    25d0:	94 9f       	mul	r25, r20
    25d2:	c0 01       	movw	r24, r0
    25d4:	11 24       	eor	r1, r1
    25d6:	8f 50       	subi	r24, 0x0F	; 15
    25d8:	9c 4e       	sbci	r25, 0xEC	; 236
    25da:	28 17       	cp	r18, r24
    25dc:	39 07       	cpc	r19, r25
    25de:	81 f5       	brne	.+96     	; 0x2640 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    25e0:	ef 01       	movw	r28, r30
    25e2:	8f 01       	movw	r16, r30
    25e4:	0e 5f       	subi	r16, 0xFE	; 254
    25e6:	1f 4f       	sbci	r17, 0xFF	; 255
    25e8:	c8 01       	movw	r24, r16
    25ea:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
    25ee:	ea 8d       	ldd	r30, Y+26	; 0x1a
    25f0:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <uxTopReadyPriority>
    25f4:	8e 17       	cp	r24, r30
    25f6:	10 f4       	brcc	.+4      	; 0x25fc <vTaskPriorityDisinheritAfterTimeout+0x80>
    25f8:	e0 93 af 13 	sts	0x13AF, r30	; 0x8013af <uxTopReadyPriority>
    25fc:	8b e0       	ldi	r24, 0x0B	; 11
    25fe:	8e 9f       	mul	r24, r30
    2600:	f0 01       	movw	r30, r0
    2602:	11 24       	eor	r1, r1
    2604:	ef 50       	subi	r30, 0x0F	; 15
    2606:	fc 4e       	sbci	r31, 0xEC	; 236
    2608:	01 80       	ldd	r0, Z+1	; 0x01
    260a:	f2 81       	ldd	r31, Z+2	; 0x02
    260c:	e0 2d       	mov	r30, r0
    260e:	ff 83       	std	Y+7, r31	; 0x07
    2610:	ee 83       	std	Y+6, r30	; 0x06
    2612:	26 81       	ldd	r18, Z+6	; 0x06
    2614:	37 81       	ldd	r19, Z+7	; 0x07
    2616:	39 87       	std	Y+9, r19	; 0x09
    2618:	28 87       	std	Y+8, r18	; 0x08
    261a:	a6 81       	ldd	r26, Z+6	; 0x06
    261c:	b7 81       	ldd	r27, Z+7	; 0x07
    261e:	15 96       	adiw	r26, 0x05	; 5
    2620:	1c 93       	st	X, r17
    2622:	0e 93       	st	-X, r16
    2624:	14 97       	sbiw	r26, 0x04	; 4
    2626:	17 83       	std	Z+7, r17	; 0x07
    2628:	06 83       	std	Z+6, r16	; 0x06
    262a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    262c:	8e 9f       	mul	r24, r30
    262e:	f0 01       	movw	r30, r0
    2630:	11 24       	eor	r1, r1
    2632:	ef 50       	subi	r30, 0x0F	; 15
    2634:	fc 4e       	sbci	r31, 0xEC	; 236
    2636:	fd 87       	std	Y+13, r31	; 0x0d
    2638:	ec 87       	std	Y+12, r30	; 0x0c
    263a:	80 81       	ld	r24, Z
    263c:	8f 5f       	subi	r24, 0xFF	; 255
    263e:	80 83       	st	Z, r24
    2640:	df 91       	pop	r29
    2642:	cf 91       	pop	r28
    2644:	1f 91       	pop	r17
    2646:	0f 91       	pop	r16
    2648:	08 95       	ret

0000264a <pvTaskIncrementMutexHeldCount>:
    264a:	80 91 5f 14 	lds	r24, 0x145F	; 0x80145f <pxCurrentTCB>
    264e:	90 91 60 14 	lds	r25, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    2652:	89 2b       	or	r24, r25
    2654:	39 f0       	breq	.+14     	; 0x2664 <pvTaskIncrementMutexHeldCount+0x1a>
    2656:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    265a:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    265e:	86 a5       	ldd	r24, Z+46	; 0x2e
    2660:	8f 5f       	subi	r24, 0xFF	; 255
    2662:	86 a7       	std	Z+46, r24	; 0x2e
    2664:	80 91 5f 14 	lds	r24, 0x145F	; 0x80145f <pxCurrentTCB>
    2668:	90 91 60 14 	lds	r25, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    266c:	08 95       	ret

0000266e <xTaskGenericNotifyWait>:
    266e:	4f 92       	push	r4
    2670:	5f 92       	push	r5
    2672:	6f 92       	push	r6
    2674:	7f 92       	push	r7
    2676:	af 92       	push	r10
    2678:	bf 92       	push	r11
    267a:	cf 92       	push	r12
    267c:	df 92       	push	r13
    267e:	ef 92       	push	r14
    2680:	ff 92       	push	r15
    2682:	0f 93       	push	r16
    2684:	1f 93       	push	r17
    2686:	cf 93       	push	r28
    2688:	df 93       	push	r29
    268a:	28 01       	movw	r4, r16
    268c:	39 01       	movw	r6, r18
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	0f 92       	push	r0
    2694:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    2698:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    269c:	c8 2f       	mov	r28, r24
    269e:	d0 e0       	ldi	r29, 0x00	; 0
    26a0:	ec 0f       	add	r30, r28
    26a2:	fd 1f       	adc	r31, r29
    26a4:	83 a9       	ldd	r24, Z+51	; 0x33
    26a6:	82 30       	cpi	r24, 0x02	; 2
    26a8:	71 f1       	breq	.+92     	; 0x2706 <xTaskGenericNotifyWait+0x98>
    26aa:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    26ae:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    26b2:	ce 01       	movw	r24, r28
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	88 0f       	add	r24, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	e8 0f       	add	r30, r24
    26be:	f9 1f       	adc	r31, r25
    26c0:	87 a5       	ldd	r24, Z+47	; 0x2f
    26c2:	90 a9       	ldd	r25, Z+48	; 0x30
    26c4:	a1 a9       	ldd	r26, Z+49	; 0x31
    26c6:	b2 a9       	ldd	r27, Z+50	; 0x32
    26c8:	40 95       	com	r20
    26ca:	50 95       	com	r21
    26cc:	60 95       	com	r22
    26ce:	70 95       	com	r23
    26d0:	48 23       	and	r20, r24
    26d2:	59 23       	and	r21, r25
    26d4:	6a 23       	and	r22, r26
    26d6:	7b 23       	and	r23, r27
    26d8:	47 a7       	std	Z+47, r20	; 0x2f
    26da:	50 ab       	std	Z+48, r21	; 0x30
    26dc:	61 ab       	std	Z+49, r22	; 0x31
    26de:	72 ab       	std	Z+50, r23	; 0x32
    26e0:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    26e4:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    26e8:	ec 0f       	add	r30, r28
    26ea:	fd 1f       	adc	r31, r29
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	83 ab       	std	Z+51, r24	; 0x33
    26f0:	a1 14       	cp	r10, r1
    26f2:	b1 04       	cpc	r11, r1
    26f4:	c1 04       	cpc	r12, r1
    26f6:	d1 04       	cpc	r13, r1
    26f8:	31 f0       	breq	.+12     	; 0x2706 <xTaskGenericNotifyWait+0x98>
    26fa:	41 e0       	ldi	r20, 0x01	; 1
    26fc:	c6 01       	movw	r24, r12
    26fe:	b5 01       	movw	r22, r10
    2700:	ed d8       	rcall	.-3622   	; 0x18dc <prvAddCurrentTaskToDelayedList>
    2702:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vPortYield>
    2706:	0f 90       	pop	r0
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	0f 92       	push	r0
    2710:	e1 14       	cp	r14, r1
    2712:	f1 04       	cpc	r15, r1
    2714:	a1 f0       	breq	.+40     	; 0x273e <xTaskGenericNotifyWait+0xd0>
    2716:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    271a:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    271e:	ce 01       	movw	r24, r28
    2720:	88 0f       	add	r24, r24
    2722:	99 1f       	adc	r25, r25
    2724:	88 0f       	add	r24, r24
    2726:	99 1f       	adc	r25, r25
    2728:	e8 0f       	add	r30, r24
    272a:	f9 1f       	adc	r31, r25
    272c:	87 a5       	ldd	r24, Z+47	; 0x2f
    272e:	90 a9       	ldd	r25, Z+48	; 0x30
    2730:	a1 a9       	ldd	r26, Z+49	; 0x31
    2732:	b2 a9       	ldd	r27, Z+50	; 0x32
    2734:	f7 01       	movw	r30, r14
    2736:	80 83       	st	Z, r24
    2738:	91 83       	std	Z+1, r25	; 0x01
    273a:	a2 83       	std	Z+2, r26	; 0x02
    273c:	b3 83       	std	Z+3, r27	; 0x03
    273e:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    2742:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    2746:	ec 0f       	add	r30, r28
    2748:	fd 1f       	adc	r31, r29
    274a:	83 a9       	ldd	r24, Z+51	; 0x33
    274c:	82 30       	cpi	r24, 0x02	; 2
    274e:	e9 f4       	brne	.+58     	; 0x278a <xTaskGenericNotifyWait+0x11c>
    2750:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    2754:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    2758:	ce 01       	movw	r24, r28
    275a:	88 0f       	add	r24, r24
    275c:	99 1f       	adc	r25, r25
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	e8 0f       	add	r30, r24
    2764:	f9 1f       	adc	r31, r25
    2766:	87 a5       	ldd	r24, Z+47	; 0x2f
    2768:	90 a9       	ldd	r25, Z+48	; 0x30
    276a:	a1 a9       	ldd	r26, Z+49	; 0x31
    276c:	b2 a9       	ldd	r27, Z+50	; 0x32
    276e:	40 94       	com	r4
    2770:	50 94       	com	r5
    2772:	60 94       	com	r6
    2774:	70 94       	com	r7
    2776:	48 22       	and	r4, r24
    2778:	59 22       	and	r5, r25
    277a:	6a 22       	and	r6, r26
    277c:	7b 22       	and	r7, r27
    277e:	47 a6       	std	Z+47, r4	; 0x2f
    2780:	50 aa       	std	Z+48, r5	; 0x30
    2782:	61 aa       	std	Z+49, r6	; 0x31
    2784:	72 aa       	std	Z+50, r7	; 0x32
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	01 c0       	rjmp	.+2      	; 0x278c <xTaskGenericNotifyWait+0x11e>
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	20 91 5f 14 	lds	r18, 0x145F	; 0x80145f <pxCurrentTCB>
    2790:	30 91 60 14 	lds	r19, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    2794:	c2 0f       	add	r28, r18
    2796:	d3 1f       	adc	r29, r19
    2798:	1b aa       	std	Y+51, r1	; 0x33
    279a:	0f 90       	pop	r0
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	df 91       	pop	r29
    27a0:	cf 91       	pop	r28
    27a2:	1f 91       	pop	r17
    27a4:	0f 91       	pop	r16
    27a6:	ff 90       	pop	r15
    27a8:	ef 90       	pop	r14
    27aa:	df 90       	pop	r13
    27ac:	cf 90       	pop	r12
    27ae:	bf 90       	pop	r11
    27b0:	af 90       	pop	r10
    27b2:	7f 90       	pop	r7
    27b4:	6f 90       	pop	r6
    27b6:	5f 90       	pop	r5
    27b8:	4f 90       	pop	r4
    27ba:	08 95       	ret

000027bc <xTaskGenericNotify>:
    27bc:	8f 92       	push	r8
    27be:	9f 92       	push	r9
    27c0:	af 92       	push	r10
    27c2:	bf 92       	push	r11
    27c4:	ef 92       	push	r14
    27c6:	ff 92       	push	r15
    27c8:	0f 93       	push	r16
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	dc 01       	movw	r26, r24
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	0f 92       	push	r0
    27d6:	e1 14       	cp	r14, r1
    27d8:	f1 04       	cpc	r15, r1
    27da:	89 f0       	breq	.+34     	; 0x27fe <xTaskGenericNotify+0x42>
    27dc:	e6 2f       	mov	r30, r22
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	ee 0f       	add	r30, r30
    27e2:	ff 1f       	adc	r31, r31
    27e4:	ee 0f       	add	r30, r30
    27e6:	ff 1f       	adc	r31, r31
    27e8:	e8 0f       	add	r30, r24
    27ea:	f9 1f       	adc	r31, r25
    27ec:	87 a4       	ldd	r8, Z+47	; 0x2f
    27ee:	90 a8       	ldd	r9, Z+48	; 0x30
    27f0:	a1 a8       	ldd	r10, Z+49	; 0x31
    27f2:	b2 a8       	ldd	r11, Z+50	; 0x32
    27f4:	f7 01       	movw	r30, r14
    27f6:	80 82       	st	Z, r8
    27f8:	91 82       	std	Z+1, r9	; 0x01
    27fa:	a2 82       	std	Z+2, r10	; 0x02
    27fc:	b3 82       	std	Z+3, r11	; 0x03
    27fe:	70 e0       	ldi	r23, 0x00	; 0
    2800:	fd 01       	movw	r30, r26
    2802:	e6 0f       	add	r30, r22
    2804:	f7 1f       	adc	r31, r23
    2806:	83 a9       	ldd	r24, Z+51	; 0x33
    2808:	92 e0       	ldi	r25, 0x02	; 2
    280a:	93 ab       	std	Z+51, r25	; 0x33
    280c:	02 30       	cpi	r16, 0x02	; 2
    280e:	01 f1       	breq	.+64     	; 0x2850 <xTaskGenericNotify+0x94>
    2810:	18 f4       	brcc	.+6      	; 0x2818 <xTaskGenericNotify+0x5c>
    2812:	01 30       	cpi	r16, 0x01	; 1
    2814:	31 f0       	breq	.+12     	; 0x2822 <xTaskGenericNotify+0x66>
    2816:	4d c0       	rjmp	.+154    	; 0x28b2 <xTaskGenericNotify+0xf6>
    2818:	03 30       	cpi	r16, 0x03	; 3
    281a:	79 f1       	breq	.+94     	; 0x287a <xTaskGenericNotify+0xbe>
    281c:	04 30       	cpi	r16, 0x04	; 4
    281e:	d1 f1       	breq	.+116    	; 0x2894 <xTaskGenericNotify+0xd8>
    2820:	48 c0       	rjmp	.+144    	; 0x28b2 <xTaskGenericNotify+0xf6>
    2822:	66 0f       	add	r22, r22
    2824:	77 1f       	adc	r23, r23
    2826:	66 0f       	add	r22, r22
    2828:	77 1f       	adc	r23, r23
    282a:	fd 01       	movw	r30, r26
    282c:	e6 0f       	add	r30, r22
    282e:	f7 1f       	adc	r31, r23
    2830:	87 a4       	ldd	r8, Z+47	; 0x2f
    2832:	90 a8       	ldd	r9, Z+48	; 0x30
    2834:	a1 a8       	ldd	r10, Z+49	; 0x31
    2836:	b2 a8       	ldd	r11, Z+50	; 0x32
    2838:	ba 01       	movw	r22, r20
    283a:	a9 01       	movw	r20, r18
    283c:	48 29       	or	r20, r8
    283e:	59 29       	or	r21, r9
    2840:	6a 29       	or	r22, r10
    2842:	7b 29       	or	r23, r11
    2844:	47 a7       	std	Z+47, r20	; 0x2f
    2846:	50 ab       	std	Z+48, r21	; 0x30
    2848:	61 ab       	std	Z+49, r22	; 0x31
    284a:	72 ab       	std	Z+50, r23	; 0x32
    284c:	01 e0       	ldi	r16, 0x01	; 1
    284e:	34 c0       	rjmp	.+104    	; 0x28b8 <xTaskGenericNotify+0xfc>
    2850:	66 0f       	add	r22, r22
    2852:	77 1f       	adc	r23, r23
    2854:	66 0f       	add	r22, r22
    2856:	77 1f       	adc	r23, r23
    2858:	fd 01       	movw	r30, r26
    285a:	e6 0f       	add	r30, r22
    285c:	f7 1f       	adc	r31, r23
    285e:	47 a5       	ldd	r20, Z+47	; 0x2f
    2860:	50 a9       	ldd	r21, Z+48	; 0x30
    2862:	61 a9       	ldd	r22, Z+49	; 0x31
    2864:	72 a9       	ldd	r23, Z+50	; 0x32
    2866:	4f 5f       	subi	r20, 0xFF	; 255
    2868:	5f 4f       	sbci	r21, 0xFF	; 255
    286a:	6f 4f       	sbci	r22, 0xFF	; 255
    286c:	7f 4f       	sbci	r23, 0xFF	; 255
    286e:	47 a7       	std	Z+47, r20	; 0x2f
    2870:	50 ab       	std	Z+48, r21	; 0x30
    2872:	61 ab       	std	Z+49, r22	; 0x31
    2874:	72 ab       	std	Z+50, r23	; 0x32
    2876:	01 e0       	ldi	r16, 0x01	; 1
    2878:	1f c0       	rjmp	.+62     	; 0x28b8 <xTaskGenericNotify+0xfc>
    287a:	66 0f       	add	r22, r22
    287c:	77 1f       	adc	r23, r23
    287e:	66 0f       	add	r22, r22
    2880:	77 1f       	adc	r23, r23
    2882:	fd 01       	movw	r30, r26
    2884:	e6 0f       	add	r30, r22
    2886:	f7 1f       	adc	r31, r23
    2888:	27 a7       	std	Z+47, r18	; 0x2f
    288a:	30 ab       	std	Z+48, r19	; 0x30
    288c:	41 ab       	std	Z+49, r20	; 0x31
    288e:	52 ab       	std	Z+50, r21	; 0x32
    2890:	01 e0       	ldi	r16, 0x01	; 1
    2892:	12 c0       	rjmp	.+36     	; 0x28b8 <xTaskGenericNotify+0xfc>
    2894:	82 30       	cpi	r24, 0x02	; 2
    2896:	79 f0       	breq	.+30     	; 0x28b6 <xTaskGenericNotify+0xfa>
    2898:	66 0f       	add	r22, r22
    289a:	77 1f       	adc	r23, r23
    289c:	66 0f       	add	r22, r22
    289e:	77 1f       	adc	r23, r23
    28a0:	fd 01       	movw	r30, r26
    28a2:	e6 0f       	add	r30, r22
    28a4:	f7 1f       	adc	r31, r23
    28a6:	27 a7       	std	Z+47, r18	; 0x2f
    28a8:	30 ab       	std	Z+48, r19	; 0x30
    28aa:	41 ab       	std	Z+49, r20	; 0x31
    28ac:	52 ab       	std	Z+50, r21	; 0x32
    28ae:	01 e0       	ldi	r16, 0x01	; 1
    28b0:	03 c0       	rjmp	.+6      	; 0x28b8 <xTaskGenericNotify+0xfc>
    28b2:	01 e0       	ldi	r16, 0x01	; 1
    28b4:	01 c0       	rjmp	.+2      	; 0x28b8 <xTaskGenericNotify+0xfc>
    28b6:	00 e0       	ldi	r16, 0x00	; 0
    28b8:	81 30       	cpi	r24, 0x01	; 1
    28ba:	09 f0       	breq	.+2      	; 0x28be <xTaskGenericNotify+0x102>
    28bc:	69 c0       	rjmp	.+210    	; 0x2990 <xTaskGenericNotify+0x1d4>
    28be:	1c 96       	adiw	r26, 0x0c	; 12
    28c0:	ed 91       	ld	r30, X+
    28c2:	fc 91       	ld	r31, X
    28c4:	1d 97       	sbiw	r26, 0x0d	; 13
    28c6:	16 96       	adiw	r26, 0x06	; 6
    28c8:	cd 91       	ld	r28, X+
    28ca:	dc 91       	ld	r29, X
    28cc:	17 97       	sbiw	r26, 0x07	; 7
    28ce:	18 96       	adiw	r26, 0x08	; 8
    28d0:	8d 91       	ld	r24, X+
    28d2:	9c 91       	ld	r25, X
    28d4:	19 97       	sbiw	r26, 0x09	; 9
    28d6:	9f 83       	std	Y+7, r25	; 0x07
    28d8:	8e 83       	std	Y+6, r24	; 0x06
    28da:	18 96       	adiw	r26, 0x08	; 8
    28dc:	cd 91       	ld	r28, X+
    28de:	dc 91       	ld	r29, X
    28e0:	19 97       	sbiw	r26, 0x09	; 9
    28e2:	16 96       	adiw	r26, 0x06	; 6
    28e4:	8d 91       	ld	r24, X+
    28e6:	9c 91       	ld	r25, X
    28e8:	17 97       	sbiw	r26, 0x07	; 7
    28ea:	9d 83       	std	Y+5, r25	; 0x05
    28ec:	8c 83       	std	Y+4, r24	; 0x04
    28ee:	81 81       	ldd	r24, Z+1	; 0x01
    28f0:	92 81       	ldd	r25, Z+2	; 0x02
    28f2:	9d 01       	movw	r18, r26
    28f4:	2e 5f       	subi	r18, 0xFE	; 254
    28f6:	3f 4f       	sbci	r19, 0xFF	; 255
    28f8:	82 17       	cp	r24, r18
    28fa:	93 07       	cpc	r25, r19
    28fc:	31 f4       	brne	.+12     	; 0x290a <xTaskGenericNotify+0x14e>
    28fe:	18 96       	adiw	r26, 0x08	; 8
    2900:	8d 91       	ld	r24, X+
    2902:	9c 91       	ld	r25, X
    2904:	19 97       	sbiw	r26, 0x09	; 9
    2906:	92 83       	std	Z+2, r25	; 0x02
    2908:	81 83       	std	Z+1, r24	; 0x01
    290a:	1d 96       	adiw	r26, 0x0d	; 13
    290c:	1c 92       	st	X, r1
    290e:	1e 92       	st	-X, r1
    2910:	1c 97       	sbiw	r26, 0x0c	; 12
    2912:	80 81       	ld	r24, Z
    2914:	81 50       	subi	r24, 0x01	; 1
    2916:	80 83       	st	Z, r24
    2918:	5a 96       	adiw	r26, 0x1a	; 26
    291a:	ec 91       	ld	r30, X
    291c:	5a 97       	sbiw	r26, 0x1a	; 26
    291e:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <uxTopReadyPriority>
    2922:	8e 17       	cp	r24, r30
    2924:	10 f4       	brcc	.+4      	; 0x292a <xTaskGenericNotify+0x16e>
    2926:	e0 93 af 13 	sts	0x13AF, r30	; 0x8013af <uxTopReadyPriority>
    292a:	8b e0       	ldi	r24, 0x0B	; 11
    292c:	8e 9f       	mul	r24, r30
    292e:	f0 01       	movw	r30, r0
    2930:	11 24       	eor	r1, r1
    2932:	ef 50       	subi	r30, 0x0F	; 15
    2934:	fc 4e       	sbci	r31, 0xEC	; 236
    2936:	01 80       	ldd	r0, Z+1	; 0x01
    2938:	f2 81       	ldd	r31, Z+2	; 0x02
    293a:	e0 2d       	mov	r30, r0
    293c:	17 96       	adiw	r26, 0x07	; 7
    293e:	fc 93       	st	X, r31
    2940:	ee 93       	st	-X, r30
    2942:	16 97       	sbiw	r26, 0x06	; 6
    2944:	46 81       	ldd	r20, Z+6	; 0x06
    2946:	57 81       	ldd	r21, Z+7	; 0x07
    2948:	19 96       	adiw	r26, 0x09	; 9
    294a:	5c 93       	st	X, r21
    294c:	4e 93       	st	-X, r20
    294e:	18 97       	sbiw	r26, 0x08	; 8
    2950:	c6 81       	ldd	r28, Z+6	; 0x06
    2952:	d7 81       	ldd	r29, Z+7	; 0x07
    2954:	3d 83       	std	Y+5, r19	; 0x05
    2956:	2c 83       	std	Y+4, r18	; 0x04
    2958:	37 83       	std	Z+7, r19	; 0x07
    295a:	26 83       	std	Z+6, r18	; 0x06
    295c:	5a 96       	adiw	r26, 0x1a	; 26
    295e:	ec 91       	ld	r30, X
    2960:	5a 97       	sbiw	r26, 0x1a	; 26
    2962:	8e 9f       	mul	r24, r30
    2964:	f0 01       	movw	r30, r0
    2966:	11 24       	eor	r1, r1
    2968:	ef 50       	subi	r30, 0x0F	; 15
    296a:	fc 4e       	sbci	r31, 0xEC	; 236
    296c:	1d 96       	adiw	r26, 0x0d	; 13
    296e:	fc 93       	st	X, r31
    2970:	ee 93       	st	-X, r30
    2972:	1c 97       	sbiw	r26, 0x0c	; 12
    2974:	80 81       	ld	r24, Z
    2976:	8f 5f       	subi	r24, 0xFF	; 255
    2978:	80 83       	st	Z, r24
    297a:	5a 96       	adiw	r26, 0x1a	; 26
    297c:	9c 91       	ld	r25, X
    297e:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    2982:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    2986:	82 8d       	ldd	r24, Z+26	; 0x1a
    2988:	89 17       	cp	r24, r25
    298a:	10 f4       	brcc	.+4      	; 0x2990 <xTaskGenericNotify+0x1d4>
    298c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vPortYield>
    2990:	0f 90       	pop	r0
    2992:	0f be       	out	0x3f, r0	; 63
    2994:	80 2f       	mov	r24, r16
    2996:	df 91       	pop	r29
    2998:	cf 91       	pop	r28
    299a:	0f 91       	pop	r16
    299c:	ff 90       	pop	r15
    299e:	ef 90       	pop	r14
    29a0:	bf 90       	pop	r11
    29a2:	af 90       	pop	r10
    29a4:	9f 90       	pop	r9
    29a6:	8f 90       	pop	r8
    29a8:	08 95       	ret

000029aa <xTaskGenericNotifyFromISR>:
    29aa:	8f 92       	push	r8
    29ac:	9f 92       	push	r9
    29ae:	af 92       	push	r10
    29b0:	bf 92       	push	r11
    29b2:	cf 92       	push	r12
    29b4:	df 92       	push	r13
    29b6:	ef 92       	push	r14
    29b8:	ff 92       	push	r15
    29ba:	0f 93       	push	r16
    29bc:	cf 93       	push	r28
    29be:	df 93       	push	r29
    29c0:	dc 01       	movw	r26, r24
    29c2:	e1 14       	cp	r14, r1
    29c4:	f1 04       	cpc	r15, r1
    29c6:	89 f0       	breq	.+34     	; 0x29ea <xTaskGenericNotifyFromISR+0x40>
    29c8:	e6 2f       	mov	r30, r22
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	ee 0f       	add	r30, r30
    29ce:	ff 1f       	adc	r31, r31
    29d0:	ee 0f       	add	r30, r30
    29d2:	ff 1f       	adc	r31, r31
    29d4:	e8 0f       	add	r30, r24
    29d6:	f9 1f       	adc	r31, r25
    29d8:	87 a4       	ldd	r8, Z+47	; 0x2f
    29da:	90 a8       	ldd	r9, Z+48	; 0x30
    29dc:	a1 a8       	ldd	r10, Z+49	; 0x31
    29de:	b2 a8       	ldd	r11, Z+50	; 0x32
    29e0:	f7 01       	movw	r30, r14
    29e2:	80 82       	st	Z, r8
    29e4:	91 82       	std	Z+1, r9	; 0x01
    29e6:	a2 82       	std	Z+2, r10	; 0x02
    29e8:	b3 82       	std	Z+3, r11	; 0x03
    29ea:	70 e0       	ldi	r23, 0x00	; 0
    29ec:	fd 01       	movw	r30, r26
    29ee:	e6 0f       	add	r30, r22
    29f0:	f7 1f       	adc	r31, r23
    29f2:	93 a9       	ldd	r25, Z+51	; 0x33
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	83 ab       	std	Z+51, r24	; 0x33
    29f8:	02 30       	cpi	r16, 0x02	; 2
    29fa:	01 f1       	breq	.+64     	; 0x2a3c <xTaskGenericNotifyFromISR+0x92>
    29fc:	18 f4       	brcc	.+6      	; 0x2a04 <xTaskGenericNotifyFromISR+0x5a>
    29fe:	01 30       	cpi	r16, 0x01	; 1
    2a00:	31 f0       	breq	.+12     	; 0x2a0e <xTaskGenericNotifyFromISR+0x64>
    2a02:	4d c0       	rjmp	.+154    	; 0x2a9e <xTaskGenericNotifyFromISR+0xf4>
    2a04:	03 30       	cpi	r16, 0x03	; 3
    2a06:	79 f1       	breq	.+94     	; 0x2a66 <xTaskGenericNotifyFromISR+0xbc>
    2a08:	04 30       	cpi	r16, 0x04	; 4
    2a0a:	d1 f1       	breq	.+116    	; 0x2a80 <xTaskGenericNotifyFromISR+0xd6>
    2a0c:	48 c0       	rjmp	.+144    	; 0x2a9e <xTaskGenericNotifyFromISR+0xf4>
    2a0e:	66 0f       	add	r22, r22
    2a10:	77 1f       	adc	r23, r23
    2a12:	66 0f       	add	r22, r22
    2a14:	77 1f       	adc	r23, r23
    2a16:	fd 01       	movw	r30, r26
    2a18:	e6 0f       	add	r30, r22
    2a1a:	f7 1f       	adc	r31, r23
    2a1c:	87 a4       	ldd	r8, Z+47	; 0x2f
    2a1e:	90 a8       	ldd	r9, Z+48	; 0x30
    2a20:	a1 a8       	ldd	r10, Z+49	; 0x31
    2a22:	b2 a8       	ldd	r11, Z+50	; 0x32
    2a24:	ba 01       	movw	r22, r20
    2a26:	a9 01       	movw	r20, r18
    2a28:	48 29       	or	r20, r8
    2a2a:	59 29       	or	r21, r9
    2a2c:	6a 29       	or	r22, r10
    2a2e:	7b 29       	or	r23, r11
    2a30:	47 a7       	std	Z+47, r20	; 0x2f
    2a32:	50 ab       	std	Z+48, r21	; 0x30
    2a34:	61 ab       	std	Z+49, r22	; 0x31
    2a36:	72 ab       	std	Z+50, r23	; 0x32
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	34 c0       	rjmp	.+104    	; 0x2aa4 <xTaskGenericNotifyFromISR+0xfa>
    2a3c:	66 0f       	add	r22, r22
    2a3e:	77 1f       	adc	r23, r23
    2a40:	66 0f       	add	r22, r22
    2a42:	77 1f       	adc	r23, r23
    2a44:	fd 01       	movw	r30, r26
    2a46:	e6 0f       	add	r30, r22
    2a48:	f7 1f       	adc	r31, r23
    2a4a:	47 a5       	ldd	r20, Z+47	; 0x2f
    2a4c:	50 a9       	ldd	r21, Z+48	; 0x30
    2a4e:	61 a9       	ldd	r22, Z+49	; 0x31
    2a50:	72 a9       	ldd	r23, Z+50	; 0x32
    2a52:	4f 5f       	subi	r20, 0xFF	; 255
    2a54:	5f 4f       	sbci	r21, 0xFF	; 255
    2a56:	6f 4f       	sbci	r22, 0xFF	; 255
    2a58:	7f 4f       	sbci	r23, 0xFF	; 255
    2a5a:	47 a7       	std	Z+47, r20	; 0x2f
    2a5c:	50 ab       	std	Z+48, r21	; 0x30
    2a5e:	61 ab       	std	Z+49, r22	; 0x31
    2a60:	72 ab       	std	Z+50, r23	; 0x32
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	1f c0       	rjmp	.+62     	; 0x2aa4 <xTaskGenericNotifyFromISR+0xfa>
    2a66:	66 0f       	add	r22, r22
    2a68:	77 1f       	adc	r23, r23
    2a6a:	66 0f       	add	r22, r22
    2a6c:	77 1f       	adc	r23, r23
    2a6e:	fd 01       	movw	r30, r26
    2a70:	e6 0f       	add	r30, r22
    2a72:	f7 1f       	adc	r31, r23
    2a74:	27 a7       	std	Z+47, r18	; 0x2f
    2a76:	30 ab       	std	Z+48, r19	; 0x30
    2a78:	41 ab       	std	Z+49, r20	; 0x31
    2a7a:	52 ab       	std	Z+50, r21	; 0x32
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	12 c0       	rjmp	.+36     	; 0x2aa4 <xTaskGenericNotifyFromISR+0xfa>
    2a80:	92 30       	cpi	r25, 0x02	; 2
    2a82:	79 f0       	breq	.+30     	; 0x2aa2 <xTaskGenericNotifyFromISR+0xf8>
    2a84:	66 0f       	add	r22, r22
    2a86:	77 1f       	adc	r23, r23
    2a88:	66 0f       	add	r22, r22
    2a8a:	77 1f       	adc	r23, r23
    2a8c:	fd 01       	movw	r30, r26
    2a8e:	e6 0f       	add	r30, r22
    2a90:	f7 1f       	adc	r31, r23
    2a92:	27 a7       	std	Z+47, r18	; 0x2f
    2a94:	30 ab       	std	Z+48, r19	; 0x30
    2a96:	41 ab       	std	Z+49, r20	; 0x31
    2a98:	52 ab       	std	Z+50, r21	; 0x32
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	03 c0       	rjmp	.+6      	; 0x2aa4 <xTaskGenericNotifyFromISR+0xfa>
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	01 c0       	rjmp	.+2      	; 0x2aa4 <xTaskGenericNotifyFromISR+0xfa>
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	91 30       	cpi	r25, 0x01	; 1
    2aa6:	09 f0       	breq	.+2      	; 0x2aaa <xTaskGenericNotifyFromISR+0x100>
    2aa8:	96 c0       	rjmp	.+300    	; 0x2bd6 <xTaskGenericNotifyFromISR+0x22c>
    2aaa:	90 91 a0 13 	lds	r25, 0x13A0	; 0x8013a0 <uxSchedulerSuspended>
    2aae:	91 11       	cpse	r25, r1
    2ab0:	5f c0       	rjmp	.+190    	; 0x2b70 <xTaskGenericNotifyFromISR+0x1c6>
    2ab2:	1c 96       	adiw	r26, 0x0c	; 12
    2ab4:	ed 91       	ld	r30, X+
    2ab6:	fc 91       	ld	r31, X
    2ab8:	1d 97       	sbiw	r26, 0x0d	; 13
    2aba:	16 96       	adiw	r26, 0x06	; 6
    2abc:	cd 91       	ld	r28, X+
    2abe:	dc 91       	ld	r29, X
    2ac0:	17 97       	sbiw	r26, 0x07	; 7
    2ac2:	18 96       	adiw	r26, 0x08	; 8
    2ac4:	2d 91       	ld	r18, X+
    2ac6:	3c 91       	ld	r19, X
    2ac8:	19 97       	sbiw	r26, 0x09	; 9
    2aca:	3f 83       	std	Y+7, r19	; 0x07
    2acc:	2e 83       	std	Y+6, r18	; 0x06
    2ace:	18 96       	adiw	r26, 0x08	; 8
    2ad0:	cd 91       	ld	r28, X+
    2ad2:	dc 91       	ld	r29, X
    2ad4:	19 97       	sbiw	r26, 0x09	; 9
    2ad6:	16 96       	adiw	r26, 0x06	; 6
    2ad8:	2d 91       	ld	r18, X+
    2ada:	3c 91       	ld	r19, X
    2adc:	17 97       	sbiw	r26, 0x07	; 7
    2ade:	3d 83       	std	Y+5, r19	; 0x05
    2ae0:	2c 83       	std	Y+4, r18	; 0x04
    2ae2:	41 81       	ldd	r20, Z+1	; 0x01
    2ae4:	52 81       	ldd	r21, Z+2	; 0x02
    2ae6:	9d 01       	movw	r18, r26
    2ae8:	2e 5f       	subi	r18, 0xFE	; 254
    2aea:	3f 4f       	sbci	r19, 0xFF	; 255
    2aec:	42 17       	cp	r20, r18
    2aee:	53 07       	cpc	r21, r19
    2af0:	31 f4       	brne	.+12     	; 0x2afe <xTaskGenericNotifyFromISR+0x154>
    2af2:	18 96       	adiw	r26, 0x08	; 8
    2af4:	4d 91       	ld	r20, X+
    2af6:	5c 91       	ld	r21, X
    2af8:	19 97       	sbiw	r26, 0x09	; 9
    2afa:	52 83       	std	Z+2, r21	; 0x02
    2afc:	41 83       	std	Z+1, r20	; 0x01
    2afe:	1d 96       	adiw	r26, 0x0d	; 13
    2b00:	1c 92       	st	X, r1
    2b02:	1e 92       	st	-X, r1
    2b04:	1c 97       	sbiw	r26, 0x0c	; 12
    2b06:	90 81       	ld	r25, Z
    2b08:	91 50       	subi	r25, 0x01	; 1
    2b0a:	90 83       	st	Z, r25
    2b0c:	5a 96       	adiw	r26, 0x1a	; 26
    2b0e:	ec 91       	ld	r30, X
    2b10:	5a 97       	sbiw	r26, 0x1a	; 26
    2b12:	90 91 af 13 	lds	r25, 0x13AF	; 0x8013af <uxTopReadyPriority>
    2b16:	9e 17       	cp	r25, r30
    2b18:	10 f4       	brcc	.+4      	; 0x2b1e <xTaskGenericNotifyFromISR+0x174>
    2b1a:	e0 93 af 13 	sts	0x13AF, r30	; 0x8013af <uxTopReadyPriority>
    2b1e:	9b e0       	ldi	r25, 0x0B	; 11
    2b20:	9e 9f       	mul	r25, r30
    2b22:	f0 01       	movw	r30, r0
    2b24:	11 24       	eor	r1, r1
    2b26:	ef 50       	subi	r30, 0x0F	; 15
    2b28:	fc 4e       	sbci	r31, 0xEC	; 236
    2b2a:	01 80       	ldd	r0, Z+1	; 0x01
    2b2c:	f2 81       	ldd	r31, Z+2	; 0x02
    2b2e:	e0 2d       	mov	r30, r0
    2b30:	17 96       	adiw	r26, 0x07	; 7
    2b32:	fc 93       	st	X, r31
    2b34:	ee 93       	st	-X, r30
    2b36:	16 97       	sbiw	r26, 0x06	; 6
    2b38:	46 81       	ldd	r20, Z+6	; 0x06
    2b3a:	57 81       	ldd	r21, Z+7	; 0x07
    2b3c:	19 96       	adiw	r26, 0x09	; 9
    2b3e:	5c 93       	st	X, r21
    2b40:	4e 93       	st	-X, r20
    2b42:	18 97       	sbiw	r26, 0x08	; 8
    2b44:	c6 81       	ldd	r28, Z+6	; 0x06
    2b46:	d7 81       	ldd	r29, Z+7	; 0x07
    2b48:	3d 83       	std	Y+5, r19	; 0x05
    2b4a:	2c 83       	std	Y+4, r18	; 0x04
    2b4c:	37 83       	std	Z+7, r19	; 0x07
    2b4e:	26 83       	std	Z+6, r18	; 0x06
    2b50:	5a 96       	adiw	r26, 0x1a	; 26
    2b52:	ec 91       	ld	r30, X
    2b54:	5a 97       	sbiw	r26, 0x1a	; 26
    2b56:	9e 9f       	mul	r25, r30
    2b58:	f0 01       	movw	r30, r0
    2b5a:	11 24       	eor	r1, r1
    2b5c:	ef 50       	subi	r30, 0x0F	; 15
    2b5e:	fc 4e       	sbci	r31, 0xEC	; 236
    2b60:	1d 96       	adiw	r26, 0x0d	; 13
    2b62:	fc 93       	st	X, r31
    2b64:	ee 93       	st	-X, r30
    2b66:	1c 97       	sbiw	r26, 0x0c	; 12
    2b68:	90 81       	ld	r25, Z
    2b6a:	9f 5f       	subi	r25, 0xFF	; 255
    2b6c:	90 83       	st	Z, r25
    2b6e:	21 c0       	rjmp	.+66     	; 0x2bb2 <xTaskGenericNotifyFromISR+0x208>
    2b70:	6c ec       	ldi	r22, 0xCC	; 204
    2b72:	73 e1       	ldi	r23, 0x13	; 19
    2b74:	fb 01       	movw	r30, r22
    2b76:	c1 81       	ldd	r28, Z+1	; 0x01
    2b78:	d2 81       	ldd	r29, Z+2	; 0x02
    2b7a:	53 96       	adiw	r26, 0x13	; 19
    2b7c:	dc 93       	st	X, r29
    2b7e:	ce 93       	st	-X, r28
    2b80:	52 97       	sbiw	r26, 0x12	; 18
    2b82:	2e 81       	ldd	r18, Y+6	; 0x06
    2b84:	3f 81       	ldd	r19, Y+7	; 0x07
    2b86:	55 96       	adiw	r26, 0x15	; 21
    2b88:	3c 93       	st	X, r19
    2b8a:	2e 93       	st	-X, r18
    2b8c:	54 97       	sbiw	r26, 0x14	; 20
    2b8e:	4e 81       	ldd	r20, Y+6	; 0x06
    2b90:	5f 81       	ldd	r21, Y+7	; 0x07
    2b92:	9d 01       	movw	r18, r26
    2b94:	22 5f       	subi	r18, 0xF2	; 242
    2b96:	3f 4f       	sbci	r19, 0xFF	; 255
    2b98:	fa 01       	movw	r30, r20
    2b9a:	35 83       	std	Z+5, r19	; 0x05
    2b9c:	24 83       	std	Z+4, r18	; 0x04
    2b9e:	3f 83       	std	Y+7, r19	; 0x07
    2ba0:	2e 83       	std	Y+6, r18	; 0x06
    2ba2:	59 96       	adiw	r26, 0x19	; 25
    2ba4:	7c 93       	st	X, r23
    2ba6:	6e 93       	st	-X, r22
    2ba8:	58 97       	sbiw	r26, 0x18	; 24
    2baa:	fb 01       	movw	r30, r22
    2bac:	90 81       	ld	r25, Z
    2bae:	9f 5f       	subi	r25, 0xFF	; 255
    2bb0:	90 83       	st	Z, r25
    2bb2:	5a 96       	adiw	r26, 0x1a	; 26
    2bb4:	2c 91       	ld	r18, X
    2bb6:	e0 91 5f 14 	lds	r30, 0x145F	; 0x80145f <pxCurrentTCB>
    2bba:	f0 91 60 14 	lds	r31, 0x1460	; 0x801460 <pxCurrentTCB+0x1>
    2bbe:	92 8d       	ldd	r25, Z+26	; 0x1a
    2bc0:	92 17       	cp	r25, r18
    2bc2:	48 f4       	brcc	.+18     	; 0x2bd6 <xTaskGenericNotifyFromISR+0x22c>
    2bc4:	c1 14       	cp	r12, r1
    2bc6:	d1 04       	cpc	r13, r1
    2bc8:	19 f0       	breq	.+6      	; 0x2bd0 <xTaskGenericNotifyFromISR+0x226>
    2bca:	91 e0       	ldi	r25, 0x01	; 1
    2bcc:	f6 01       	movw	r30, r12
    2bce:	90 83       	st	Z, r25
    2bd0:	91 e0       	ldi	r25, 0x01	; 1
    2bd2:	90 93 a9 13 	sts	0x13A9, r25	; 0x8013a9 <xYieldPending>
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	0f 91       	pop	r16
    2bdc:	ff 90       	pop	r15
    2bde:	ef 90       	pop	r14
    2be0:	df 90       	pop	r13
    2be2:	cf 90       	pop	r12
    2be4:	bf 90       	pop	r11
    2be6:	af 90       	pop	r10
    2be8:	9f 90       	pop	r9
    2bea:	8f 90       	pop	r8
    2bec:	08 95       	ret

00002bee <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	21 f4       	brne	.+8      	; 0x2bfa <xTaskGenericNotifyStateClear+0xc>
    2bf2:	80 91 5f 14 	lds	r24, 0x145F	; 0x80145f <pxCurrentTCB>
    2bf6:	90 91 60 14 	lds	r25, 0x1460	; 0x801460 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2c00:	70 e0       	ldi	r23, 0x00	; 0
    2c02:	fc 01       	movw	r30, r24
    2c04:	e6 0f       	add	r30, r22
    2c06:	f7 1f       	adc	r31, r23
    2c08:	23 a9       	ldd	r18, Z+51	; 0x33
    2c0a:	22 30       	cpi	r18, 0x02	; 2
    2c0c:	31 f4       	brne	.+12     	; 0x2c1a <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2c0e:	fc 01       	movw	r30, r24
    2c10:	e6 0f       	add	r30, r22
    2c12:	f7 1f       	adc	r31, r23
    2c14:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	01 c0       	rjmp	.+2      	; 0x2c1c <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2c1c:	0f 90       	pop	r0
    2c1e:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2c20:	08 95       	ret

00002c22 <prvGetNextExpireTime>:
    2c22:	dc 01       	movw	r26, r24
    2c24:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTimerList>
    2c28:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTimerList+0x1>
    2c2c:	80 81       	ld	r24, Z
    2c2e:	91 e0       	ldi	r25, 0x01	; 1
    2c30:	81 11       	cpse	r24, r1
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	9c 93       	st	X, r25
    2c36:	91 11       	cpse	r25, r1
    2c38:	08 c0       	rjmp	.+16     	; 0x2c4a <prvGetNextExpireTime+0x28>
    2c3a:	07 80       	ldd	r0, Z+7	; 0x07
    2c3c:	f0 85       	ldd	r31, Z+8	; 0x08
    2c3e:	e0 2d       	mov	r30, r0
    2c40:	60 81       	ld	r22, Z
    2c42:	71 81       	ldd	r23, Z+1	; 0x01
    2c44:	82 81       	ldd	r24, Z+2	; 0x02
    2c46:	93 81       	ldd	r25, Z+3	; 0x03
    2c48:	08 95       	ret
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	cb 01       	movw	r24, r22
    2c50:	08 95       	ret

00002c52 <prvInsertTimerInActiveList>:
    2c52:	cf 92       	push	r12
    2c54:	df 92       	push	r13
    2c56:	ef 92       	push	r14
    2c58:	ff 92       	push	r15
    2c5a:	0f 93       	push	r16
    2c5c:	1f 93       	push	r17
    2c5e:	fc 01       	movw	r30, r24
    2c60:	42 83       	std	Z+2, r20	; 0x02
    2c62:	53 83       	std	Z+3, r21	; 0x03
    2c64:	64 83       	std	Z+4, r22	; 0x04
    2c66:	75 83       	std	Z+5, r23	; 0x05
    2c68:	93 87       	std	Z+11, r25	; 0x0b
    2c6a:	82 87       	std	Z+10, r24	; 0x0a
    2c6c:	04 17       	cp	r16, r20
    2c6e:	15 07       	cpc	r17, r21
    2c70:	26 07       	cpc	r18, r22
    2c72:	37 07       	cpc	r19, r23
    2c74:	c0 f0       	brcs	.+48     	; 0x2ca6 <prvInsertTimerInActiveList+0x54>
    2c76:	0c 19       	sub	r16, r12
    2c78:	1d 09       	sbc	r17, r13
    2c7a:	2e 09       	sbc	r18, r14
    2c7c:	3f 09       	sbc	r19, r15
    2c7e:	86 85       	ldd	r24, Z+14	; 0x0e
    2c80:	97 85       	ldd	r25, Z+15	; 0x0f
    2c82:	a0 89       	ldd	r26, Z+16	; 0x10
    2c84:	b1 89       	ldd	r27, Z+17	; 0x11
    2c86:	08 17       	cp	r16, r24
    2c88:	19 07       	cpc	r17, r25
    2c8a:	2a 07       	cpc	r18, r26
    2c8c:	3b 07       	cpc	r19, r27
    2c8e:	00 f5       	brcc	.+64     	; 0x2cd0 <prvInsertTimerInActiveList+0x7e>
    2c90:	bf 01       	movw	r22, r30
    2c92:	6e 5f       	subi	r22, 0xFE	; 254
    2c94:	7f 4f       	sbci	r23, 0xFF	; 255
    2c96:	80 91 69 14 	lds	r24, 0x1469	; 0x801469 <pxOverflowTimerList>
    2c9a:	90 91 6a 14 	lds	r25, 0x146A	; 0x80146a <pxOverflowTimerList+0x1>
    2c9e:	0e 94 b2 02 	call	0x564	; 0x564 <vListInsert>
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	18 c0       	rjmp	.+48     	; 0x2cd6 <prvInsertTimerInActiveList+0x84>
    2ca6:	0c 15       	cp	r16, r12
    2ca8:	1d 05       	cpc	r17, r13
    2caa:	2e 05       	cpc	r18, r14
    2cac:	3f 05       	cpc	r19, r15
    2cae:	28 f4       	brcc	.+10     	; 0x2cba <prvInsertTimerInActiveList+0x68>
    2cb0:	4c 15       	cp	r20, r12
    2cb2:	5d 05       	cpc	r21, r13
    2cb4:	6e 05       	cpc	r22, r14
    2cb6:	7f 05       	cpc	r23, r15
    2cb8:	68 f4       	brcc	.+26     	; 0x2cd4 <prvInsertTimerInActiveList+0x82>
    2cba:	bf 01       	movw	r22, r30
    2cbc:	6e 5f       	subi	r22, 0xFE	; 254
    2cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc0:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <pxCurrentTimerList>
    2cc4:	90 91 6c 14 	lds	r25, 0x146C	; 0x80146c <pxCurrentTimerList+0x1>
    2cc8:	0e 94 b2 02 	call	0x564	; 0x564 <vListInsert>
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	03 c0       	rjmp	.+6      	; 0x2cd6 <prvInsertTimerInActiveList+0x84>
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	01 c0       	rjmp	.+2      	; 0x2cd6 <prvInsertTimerInActiveList+0x84>
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	ff 90       	pop	r15
    2cdc:	ef 90       	pop	r14
    2cde:	df 90       	pop	r13
    2ce0:	cf 90       	pop	r12
    2ce2:	08 95       	ret

00002ce4 <prvCheckForValidListAndQueue>:
    2ce4:	0f b6       	in	r0, 0x3f	; 63
    2ce6:	f8 94       	cli
    2ce8:	0f 92       	push	r0
    2cea:	80 91 67 14 	lds	r24, 0x1467	; 0x801467 <xTimerQueue>
    2cee:	90 91 68 14 	lds	r25, 0x1468	; 0x801468 <xTimerQueue+0x1>
    2cf2:	89 2b       	or	r24, r25
    2cf4:	e9 f4       	brne	.+58     	; 0x2d30 <prvCheckForValidListAndQueue+0x4c>
    2cf6:	88 e7       	ldi	r24, 0x78	; 120
    2cf8:	94 e1       	ldi	r25, 0x14	; 20
    2cfa:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInitialise>
    2cfe:	8d e6       	ldi	r24, 0x6D	; 109
    2d00:	94 e1       	ldi	r25, 0x14	; 20
    2d02:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInitialise>
    2d06:	88 e7       	ldi	r24, 0x78	; 120
    2d08:	94 e1       	ldi	r25, 0x14	; 20
    2d0a:	90 93 6c 14 	sts	0x146C, r25	; 0x80146c <pxCurrentTimerList+0x1>
    2d0e:	80 93 6b 14 	sts	0x146B, r24	; 0x80146b <pxCurrentTimerList>
    2d12:	8d e6       	ldi	r24, 0x6D	; 109
    2d14:	94 e1       	ldi	r25, 0x14	; 20
    2d16:	90 93 6a 14 	sts	0x146A, r25	; 0x80146a <pxOverflowTimerList+0x1>
    2d1a:	80 93 69 14 	sts	0x1469, r24	; 0x801469 <pxOverflowTimerList>
    2d1e:	40 e0       	ldi	r20, 0x00	; 0
    2d20:	67 e0       	ldi	r22, 0x07	; 7
    2d22:	8a e0       	ldi	r24, 0x0A	; 10
    2d24:	0e 94 60 05 	call	0xac0	; 0xac0 <xQueueGenericCreate>
    2d28:	90 93 68 14 	sts	0x1468, r25	; 0x801468 <xTimerQueue+0x1>
    2d2c:	80 93 67 14 	sts	0x1467, r24	; 0x801467 <xTimerQueue>
    2d30:	0f 90       	pop	r0
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	08 95       	ret

00002d36 <xTimerCreateTimerTask>:
    2d36:	ef 92       	push	r14
    2d38:	ff 92       	push	r15
    2d3a:	0f 93       	push	r16
    2d3c:	d3 df       	rcall	.-90     	; 0x2ce4 <prvCheckForValidListAndQueue>
    2d3e:	80 91 67 14 	lds	r24, 0x1467	; 0x801467 <xTimerQueue>
    2d42:	90 91 68 14 	lds	r25, 0x1468	; 0x801468 <xTimerQueue+0x1>
    2d46:	89 2b       	or	r24, r25
    2d48:	91 f0       	breq	.+36     	; 0x2d6e <xTimerCreateTimerTask+0x38>
    2d4a:	0f 2e       	mov	r0, r31
    2d4c:	f5 e6       	ldi	r31, 0x65	; 101
    2d4e:	ef 2e       	mov	r14, r31
    2d50:	f4 e1       	ldi	r31, 0x14	; 20
    2d52:	ff 2e       	mov	r15, r31
    2d54:	f0 2d       	mov	r31, r0
    2d56:	03 e0       	ldi	r16, 0x03	; 3
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	40 ec       	ldi	r20, 0xC0	; 192
    2d5e:	50 e0       	ldi	r21, 0x00	; 0
    2d60:	6c e8       	ldi	r22, 0x8C	; 140
    2d62:	72 e0       	ldi	r23, 0x02	; 2
    2d64:	87 ed       	ldi	r24, 0xD7	; 215
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <xTaskCreate>
    2d6c:	01 c0       	rjmp	.+2      	; 0x2d70 <xTimerCreateTimerTask+0x3a>
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	0f 91       	pop	r16
    2d72:	ff 90       	pop	r15
    2d74:	ef 90       	pop	r14
    2d76:	08 95       	ret

00002d78 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2d78:	8f 92       	push	r8
    2d7a:	9f 92       	push	r9
    2d7c:	af 92       	push	r10
    2d7e:	bf 92       	push	r11
    2d80:	cf 92       	push	r12
    2d82:	df 92       	push	r13
    2d84:	ef 92       	push	r14
    2d86:	ff 92       	push	r15
    2d88:	0f 93       	push	r16
    2d8a:	1f 93       	push	r17
    2d8c:	cf 93       	push	r28
    2d8e:	df 93       	push	r29
    2d90:	cd b7       	in	r28, 0x3d	; 61
    2d92:	de b7       	in	r29, 0x3e	; 62
    2d94:	27 97       	sbiw	r28, 0x07	; 7
    2d96:	0f b6       	in	r0, 0x3f	; 63
    2d98:	f8 94       	cli
    2d9a:	de bf       	out	0x3e, r29	; 62
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2da0:	e0 91 67 14 	lds	r30, 0x1467	; 0x801467 <xTimerQueue>
    2da4:	f0 91 68 14 	lds	r31, 0x1468	; 0x801468 <xTimerQueue+0x1>
    2da8:	30 97       	sbiw	r30, 0x00	; 0
    2daa:	81 f1       	breq	.+96     	; 0x2e0c <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2dac:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2dae:	2a 83       	std	Y+2, r18	; 0x02
    2db0:	3b 83       	std	Y+3, r19	; 0x03
    2db2:	4c 83       	std	Y+4, r20	; 0x04
    2db4:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2db6:	9f 83       	std	Y+7, r25	; 0x07
    2db8:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2dba:	66 30       	cpi	r22, 0x06	; 6
    2dbc:	f4 f4       	brge	.+60     	; 0x2dfa <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2dbe:	ee da       	rcall	.-2596   	; 0x239c <xTaskGetSchedulerState>
    2dc0:	82 30       	cpi	r24, 0x02	; 2
    2dc2:	69 f4       	brne	.+26     	; 0x2dde <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2dc4:	00 e0       	ldi	r16, 0x00	; 0
    2dc6:	a7 01       	movw	r20, r14
    2dc8:	96 01       	movw	r18, r12
    2dca:	be 01       	movw	r22, r28
    2dcc:	6f 5f       	subi	r22, 0xFF	; 255
    2dce:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd0:	80 91 67 14 	lds	r24, 0x1467	; 0x801467 <xTimerQueue>
    2dd4:	90 91 68 14 	lds	r25, 0x1468	; 0x801468 <xTimerQueue+0x1>
    2dd8:	0e 94 83 05 	call	0xb06	; 0xb06 <xQueueGenericSend>
    2ddc:	18 c0       	rjmp	.+48     	; 0x2e0e <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2dde:	00 e0       	ldi	r16, 0x00	; 0
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	a9 01       	movw	r20, r18
    2de6:	be 01       	movw	r22, r28
    2de8:	6f 5f       	subi	r22, 0xFF	; 255
    2dea:	7f 4f       	sbci	r23, 0xFF	; 255
    2dec:	80 91 67 14 	lds	r24, 0x1467	; 0x801467 <xTimerQueue>
    2df0:	90 91 68 14 	lds	r25, 0x1468	; 0x801468 <xTimerQueue+0x1>
    2df4:	0e 94 83 05 	call	0xb06	; 0xb06 <xQueueGenericSend>
    2df8:	0a c0       	rjmp	.+20     	; 0x2e0e <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	a8 01       	movw	r20, r16
    2dfe:	be 01       	movw	r22, r28
    2e00:	6f 5f       	subi	r22, 0xFF	; 255
    2e02:	7f 4f       	sbci	r23, 0xFF	; 255
    2e04:	cf 01       	movw	r24, r30
    2e06:	0e 94 33 06 	call	0xc66	; 0xc66 <xQueueGenericSendFromISR>
    2e0a:	01 c0       	rjmp	.+2      	; 0x2e0e <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2e0e:	27 96       	adiw	r28, 0x07	; 7
    2e10:	0f b6       	in	r0, 0x3f	; 63
    2e12:	f8 94       	cli
    2e14:	de bf       	out	0x3e, r29	; 62
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	cd bf       	out	0x3d, r28	; 61
    2e1a:	df 91       	pop	r29
    2e1c:	cf 91       	pop	r28
    2e1e:	1f 91       	pop	r17
    2e20:	0f 91       	pop	r16
    2e22:	ff 90       	pop	r15
    2e24:	ef 90       	pop	r14
    2e26:	df 90       	pop	r13
    2e28:	cf 90       	pop	r12
    2e2a:	bf 90       	pop	r11
    2e2c:	af 90       	pop	r10
    2e2e:	9f 90       	pop	r9
    2e30:	8f 90       	pop	r8
    2e32:	08 95       	ret

00002e34 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2e34:	8f 92       	push	r8
    2e36:	9f 92       	push	r9
    2e38:	af 92       	push	r10
    2e3a:	bf 92       	push	r11
    2e3c:	cf 92       	push	r12
    2e3e:	df 92       	push	r13
    2e40:	ef 92       	push	r14
    2e42:	ff 92       	push	r15
    2e44:	0f 93       	push	r16
    2e46:	1f 93       	push	r17
    2e48:	cf 93       	push	r28
    2e4a:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2e4c:	3b c0       	rjmp	.+118    	; 0x2ec4 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2e4e:	07 80       	ldd	r0, Z+7	; 0x07
    2e50:	f0 85       	ldd	r31, Z+8	; 0x08
    2e52:	e0 2d       	mov	r30, r0
    2e54:	80 80       	ld	r8, Z
    2e56:	91 80       	ldd	r9, Z+1	; 0x01
    2e58:	a2 80       	ldd	r10, Z+2	; 0x02
    2e5a:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2e5c:	c0 85       	ldd	r28, Z+8	; 0x08
    2e5e:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e60:	8e 01       	movw	r16, r28
    2e62:	0e 5f       	subi	r16, 0xFE	; 254
    2e64:	1f 4f       	sbci	r17, 0xFF	; 255
    2e66:	c8 01       	movw	r24, r16
    2e68:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e6c:	ec 89       	ldd	r30, Y+20	; 0x14
    2e6e:	fd 89       	ldd	r31, Y+21	; 0x15
    2e70:	ce 01       	movw	r24, r28
    2e72:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2e74:	8e 89       	ldd	r24, Y+22	; 0x16
    2e76:	82 ff       	sbrs	r24, 2
    2e78:	25 c0       	rjmp	.+74     	; 0x2ec4 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2e7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e7e:	a8 89       	ldd	r26, Y+16	; 0x10
    2e80:	b9 89       	ldd	r27, Y+17	; 0x11
    2e82:	88 0d       	add	r24, r8
    2e84:	99 1d       	adc	r25, r9
    2e86:	aa 1d       	adc	r26, r10
    2e88:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2e8a:	88 16       	cp	r8, r24
    2e8c:	99 06       	cpc	r9, r25
    2e8e:	aa 06       	cpc	r10, r26
    2e90:	bb 06       	cpc	r11, r27
    2e92:	70 f4       	brcc	.+28     	; 0x2eb0 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2e94:	8a 83       	std	Y+2, r24	; 0x02
    2e96:	9b 83       	std	Y+3, r25	; 0x03
    2e98:	ac 83       	std	Y+4, r26	; 0x04
    2e9a:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2e9c:	db 87       	std	Y+11, r29	; 0x0b
    2e9e:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2ea0:	b8 01       	movw	r22, r16
    2ea2:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <pxCurrentTimerList>
    2ea6:	90 91 6c 14 	lds	r25, 0x146C	; 0x80146c <pxCurrentTimerList+0x1>
    2eaa:	0e 94 b2 02 	call	0x564	; 0x564 <vListInsert>
    2eae:	0a c0       	rjmp	.+20     	; 0x2ec4 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2eb0:	c1 2c       	mov	r12, r1
    2eb2:	d1 2c       	mov	r13, r1
    2eb4:	76 01       	movw	r14, r12
    2eb6:	00 e0       	ldi	r16, 0x00	; 0
    2eb8:	10 e0       	ldi	r17, 0x00	; 0
    2eba:	a5 01       	movw	r20, r10
    2ebc:	94 01       	movw	r18, r8
    2ebe:	60 e0       	ldi	r22, 0x00	; 0
    2ec0:	ce 01       	movw	r24, r28
    2ec2:	5a df       	rcall	.-332    	; 0x2d78 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2ec4:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTimerList>
    2ec8:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTimerList+0x1>
    2ecc:	80 81       	ld	r24, Z
    2ece:	81 11       	cpse	r24, r1
    2ed0:	be cf       	rjmp	.-132    	; 0x2e4e <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2ed2:	80 91 69 14 	lds	r24, 0x1469	; 0x801469 <pxOverflowTimerList>
    2ed6:	90 91 6a 14 	lds	r25, 0x146A	; 0x80146a <pxOverflowTimerList+0x1>
    2eda:	90 93 6c 14 	sts	0x146C, r25	; 0x80146c <pxCurrentTimerList+0x1>
    2ede:	80 93 6b 14 	sts	0x146B, r24	; 0x80146b <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2ee2:	f0 93 6a 14 	sts	0x146A, r31	; 0x80146a <pxOverflowTimerList+0x1>
    2ee6:	e0 93 69 14 	sts	0x1469, r30	; 0x801469 <pxOverflowTimerList>
    }
    2eea:	df 91       	pop	r29
    2eec:	cf 91       	pop	r28
    2eee:	1f 91       	pop	r17
    2ef0:	0f 91       	pop	r16
    2ef2:	ff 90       	pop	r15
    2ef4:	ef 90       	pop	r14
    2ef6:	df 90       	pop	r13
    2ef8:	cf 90       	pop	r12
    2efa:	bf 90       	pop	r11
    2efc:	af 90       	pop	r10
    2efe:	9f 90       	pop	r9
    2f00:	8f 90       	pop	r8
    2f02:	08 95       	ret

00002f04 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2f04:	cf 92       	push	r12
    2f06:	df 92       	push	r13
    2f08:	ef 92       	push	r14
    2f0a:	ff 92       	push	r15
    2f0c:	cf 93       	push	r28
    2f0e:	df 93       	push	r29
    2f10:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2f12:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <xTaskGetTickCount>
    2f16:	6b 01       	movw	r12, r22
    2f18:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2f1a:	80 91 61 14 	lds	r24, 0x1461	; 0x801461 <xLastTime.2436>
    2f1e:	90 91 62 14 	lds	r25, 0x1462	; 0x801462 <xLastTime.2436+0x1>
    2f22:	a0 91 63 14 	lds	r26, 0x1463	; 0x801463 <xLastTime.2436+0x2>
    2f26:	b0 91 64 14 	lds	r27, 0x1464	; 0x801464 <xLastTime.2436+0x3>
    2f2a:	c8 16       	cp	r12, r24
    2f2c:	d9 06       	cpc	r13, r25
    2f2e:	ea 06       	cpc	r14, r26
    2f30:	fb 06       	cpc	r15, r27
    2f32:	20 f4       	brcc	.+8      	; 0x2f3c <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2f34:	7f df       	rcall	.-258    	; 0x2e34 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	88 83       	st	Y, r24
    2f3a:	01 c0       	rjmp	.+2      	; 0x2f3e <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2f3c:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2f3e:	c0 92 61 14 	sts	0x1461, r12	; 0x801461 <xLastTime.2436>
    2f42:	d0 92 62 14 	sts	0x1462, r13	; 0x801462 <xLastTime.2436+0x1>
    2f46:	e0 92 63 14 	sts	0x1463, r14	; 0x801463 <xLastTime.2436+0x2>
    2f4a:	f0 92 64 14 	sts	0x1464, r15	; 0x801464 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2f4e:	c7 01       	movw	r24, r14
    2f50:	b6 01       	movw	r22, r12
    2f52:	df 91       	pop	r29
    2f54:	cf 91       	pop	r28
    2f56:	ff 90       	pop	r15
    2f58:	ef 90       	pop	r14
    2f5a:	df 90       	pop	r13
    2f5c:	cf 90       	pop	r12
    2f5e:	08 95       	ret

00002f60 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2f60:	4f 92       	push	r4
    2f62:	5f 92       	push	r5
    2f64:	6f 92       	push	r6
    2f66:	7f 92       	push	r7
    2f68:	8f 92       	push	r8
    2f6a:	9f 92       	push	r9
    2f6c:	af 92       	push	r10
    2f6e:	bf 92       	push	r11
    2f70:	cf 92       	push	r12
    2f72:	df 92       	push	r13
    2f74:	ef 92       	push	r14
    2f76:	ff 92       	push	r15
    2f78:	0f 93       	push	r16
    2f7a:	1f 93       	push	r17
    2f7c:	cf 93       	push	r28
    2f7e:	df 93       	push	r29
    2f80:	4b 01       	movw	r8, r22
    2f82:	5c 01       	movw	r10, r24
    2f84:	29 01       	movw	r4, r18
    2f86:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2f88:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <pxCurrentTimerList>
    2f8c:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <pxCurrentTimerList+0x1>
    2f90:	07 80       	ldd	r0, Z+7	; 0x07
    2f92:	f0 85       	ldd	r31, Z+8	; 0x08
    2f94:	e0 2d       	mov	r30, r0
    2f96:	c0 85       	ldd	r28, Z+8	; 0x08
    2f98:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	02 96       	adiw	r24, 0x02	; 2
    2f9e:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2fa2:	8e 89       	ldd	r24, Y+22	; 0x16
    2fa4:	82 ff       	sbrs	r24, 2
    2fa6:	1b c0       	rjmp	.+54     	; 0x2fde <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2fa8:	4e 85       	ldd	r20, Y+14	; 0x0e
    2faa:	5f 85       	ldd	r21, Y+15	; 0x0f
    2fac:	68 89       	ldd	r22, Y+16	; 0x10
    2fae:	79 89       	ldd	r23, Y+17	; 0x11
    2fb0:	48 0d       	add	r20, r8
    2fb2:	59 1d       	adc	r21, r9
    2fb4:	6a 1d       	adc	r22, r10
    2fb6:	7b 1d       	adc	r23, r11
    2fb8:	75 01       	movw	r14, r10
    2fba:	64 01       	movw	r12, r8
    2fbc:	93 01       	movw	r18, r6
    2fbe:	82 01       	movw	r16, r4
    2fc0:	ce 01       	movw	r24, r28
    2fc2:	47 de       	rcall	.-882    	; 0x2c52 <prvInsertTimerInActiveList>
    2fc4:	88 23       	and	r24, r24
    2fc6:	69 f0       	breq	.+26     	; 0x2fe2 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2fc8:	c1 2c       	mov	r12, r1
    2fca:	d1 2c       	mov	r13, r1
    2fcc:	76 01       	movw	r14, r12
    2fce:	00 e0       	ldi	r16, 0x00	; 0
    2fd0:	10 e0       	ldi	r17, 0x00	; 0
    2fd2:	a5 01       	movw	r20, r10
    2fd4:	94 01       	movw	r18, r8
    2fd6:	60 e0       	ldi	r22, 0x00	; 0
    2fd8:	ce 01       	movw	r24, r28
    2fda:	ce de       	rcall	.-612    	; 0x2d78 <xTimerGenericCommand>
    2fdc:	02 c0       	rjmp	.+4      	; 0x2fe2 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2fde:	8e 7f       	andi	r24, 0xFE	; 254
    2fe0:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2fe2:	ec 89       	ldd	r30, Y+20	; 0x14
    2fe4:	fd 89       	ldd	r31, Y+21	; 0x15
    2fe6:	ce 01       	movw	r24, r28
    2fe8:	19 95       	eicall
    }
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	1f 91       	pop	r17
    2ff0:	0f 91       	pop	r16
    2ff2:	ff 90       	pop	r15
    2ff4:	ef 90       	pop	r14
    2ff6:	df 90       	pop	r13
    2ff8:	cf 90       	pop	r12
    2ffa:	bf 90       	pop	r11
    2ffc:	af 90       	pop	r10
    2ffe:	9f 90       	pop	r9
    3000:	8f 90       	pop	r8
    3002:	7f 90       	pop	r7
    3004:	6f 90       	pop	r6
    3006:	5f 90       	pop	r5
    3008:	4f 90       	pop	r4
    300a:	08 95       	ret

0000300c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    300c:	8f 92       	push	r8
    300e:	9f 92       	push	r9
    3010:	af 92       	push	r10
    3012:	bf 92       	push	r11
    3014:	cf 92       	push	r12
    3016:	df 92       	push	r13
    3018:	ef 92       	push	r14
    301a:	ff 92       	push	r15
    301c:	1f 93       	push	r17
    301e:	cf 93       	push	r28
    3020:	df 93       	push	r29
    3022:	1f 92       	push	r1
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	6b 01       	movw	r12, r22
    302a:	7c 01       	movw	r14, r24
    302c:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    302e:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3032:	ce 01       	movw	r24, r28
    3034:	01 96       	adiw	r24, 0x01	; 1
    3036:	66 df       	rcall	.-308    	; 0x2f04 <prvSampleTimeNow>
    3038:	4b 01       	movw	r8, r22
    303a:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	81 11       	cpse	r24, r1
    3040:	2d c0       	rjmp	.+90     	; 0x309c <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3042:	11 11       	cpse	r17, r1
    3044:	0d c0       	rjmp	.+26     	; 0x3060 <prvProcessTimerOrBlockTask+0x54>
    3046:	8c 14       	cp	r8, r12
    3048:	9d 04       	cpc	r9, r13
    304a:	ae 04       	cpc	r10, r14
    304c:	bf 04       	cpc	r11, r15
    304e:	40 f0       	brcs	.+16     	; 0x3060 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3050:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3054:	a5 01       	movw	r20, r10
    3056:	94 01       	movw	r18, r8
    3058:	c7 01       	movw	r24, r14
    305a:	b6 01       	movw	r22, r12
    305c:	81 df       	rcall	.-254    	; 0x2f60 <prvProcessExpiredTimer>
    305e:	20 c0       	rjmp	.+64     	; 0x30a0 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3060:	11 23       	and	r17, r17
    3062:	41 f0       	breq	.+16     	; 0x3074 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3064:	e0 91 69 14 	lds	r30, 0x1469	; 0x801469 <pxOverflowTimerList>
    3068:	f0 91 6a 14 	lds	r31, 0x146A	; 0x80146a <pxOverflowTimerList+0x1>
    306c:	80 81       	ld	r24, Z
    306e:	11 e0       	ldi	r17, 0x01	; 1
    3070:	81 11       	cpse	r24, r1
    3072:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3074:	b7 01       	movw	r22, r14
    3076:	a6 01       	movw	r20, r12
    3078:	48 19       	sub	r20, r8
    307a:	59 09       	sbc	r21, r9
    307c:	6a 09       	sbc	r22, r10
    307e:	7b 09       	sbc	r23, r11
    3080:	21 2f       	mov	r18, r17
    3082:	80 91 67 14 	lds	r24, 0x1467	; 0x801467 <xTimerQueue>
    3086:	90 91 68 14 	lds	r25, 0x1468	; 0x801468 <xTimerQueue+0x1>
    308a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    308e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <xTaskResumeAll>
    3092:	81 11       	cpse	r24, r1
    3094:	05 c0       	rjmp	.+10     	; 0x30a0 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3096:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vPortYield>
    309a:	02 c0       	rjmp	.+4      	; 0x30a0 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    309c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <xTaskResumeAll>
            }
        }
    }
    30a0:	0f 90       	pop	r0
    30a2:	df 91       	pop	r29
    30a4:	cf 91       	pop	r28
    30a6:	1f 91       	pop	r17
    30a8:	ff 90       	pop	r15
    30aa:	ef 90       	pop	r14
    30ac:	df 90       	pop	r13
    30ae:	cf 90       	pop	r12
    30b0:	bf 90       	pop	r11
    30b2:	af 90       	pop	r10
    30b4:	9f 90       	pop	r9
    30b6:	8f 90       	pop	r8
    30b8:	08 95       	ret

000030ba <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    30ba:	af 92       	push	r10
    30bc:	bf 92       	push	r11
    30be:	cf 92       	push	r12
    30c0:	df 92       	push	r13
    30c2:	ef 92       	push	r14
    30c4:	ff 92       	push	r15
    30c6:	0f 93       	push	r16
    30c8:	1f 93       	push	r17
    30ca:	cf 93       	push	r28
    30cc:	df 93       	push	r29
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
    30d2:	28 97       	sbiw	r28, 0x08	; 8
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	f8 94       	cli
    30d8:	de bf       	out	0x3e, r29	; 62
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    30de:	82 c0       	rjmp	.+260    	; 0x31e4 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	88 23       	and	r24, r24
    30e4:	0c f4       	brge	.+2      	; 0x30e8 <prvProcessReceivedCommands+0x2e>
    30e6:	7e c0       	rjmp	.+252    	; 0x31e4 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    30e8:	ae 80       	ldd	r10, Y+6	; 0x06
    30ea:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    30ec:	d5 01       	movw	r26, r10
    30ee:	1c 96       	adiw	r26, 0x0c	; 12
    30f0:	8d 91       	ld	r24, X+
    30f2:	9c 91       	ld	r25, X
    30f4:	1d 97       	sbiw	r26, 0x0d	; 13
    30f6:	89 2b       	or	r24, r25
    30f8:	21 f0       	breq	.+8      	; 0x3102 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    30fa:	c5 01       	movw	r24, r10
    30fc:	02 96       	adiw	r24, 0x02	; 2
    30fe:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3102:	ce 01       	movw	r24, r28
    3104:	08 96       	adiw	r24, 0x08	; 8
    3106:	fe de       	rcall	.-516    	; 0x2f04 <prvSampleTimeNow>
    3108:	8b 01       	movw	r16, r22
    310a:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    310c:	e9 81       	ldd	r30, Y+1	; 0x01
    310e:	0e 2e       	mov	r0, r30
    3110:	00 0c       	add	r0, r0
    3112:	ff 0b       	sbc	r31, r31
    3114:	ea 30       	cpi	r30, 0x0A	; 10
    3116:	f1 05       	cpc	r31, r1
    3118:	08 f0       	brcs	.+2      	; 0x311c <prvProcessReceivedCommands+0x62>
    311a:	64 c0       	rjmp	.+200    	; 0x31e4 <prvProcessReceivedCommands+0x12a>
    311c:	88 27       	eor	r24, r24
    311e:	ee 58       	subi	r30, 0x8E	; 142
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	8f 4f       	sbci	r24, 0xFF	; 255
    3124:	0c 94 eb 2c 	jmp	0x59d6	; 0x59d6 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3128:	f5 01       	movw	r30, r10
    312a:	86 89       	ldd	r24, Z+22	; 0x16
    312c:	81 60       	ori	r24, 0x01	; 1
    312e:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3130:	ca 80       	ldd	r12, Y+2	; 0x02
    3132:	db 80       	ldd	r13, Y+3	; 0x03
    3134:	ec 80       	ldd	r14, Y+4	; 0x04
    3136:	fd 80       	ldd	r15, Y+5	; 0x05
    3138:	46 85       	ldd	r20, Z+14	; 0x0e
    313a:	57 85       	ldd	r21, Z+15	; 0x0f
    313c:	60 89       	ldd	r22, Z+16	; 0x10
    313e:	71 89       	ldd	r23, Z+17	; 0x11
    3140:	4c 0d       	add	r20, r12
    3142:	5d 1d       	adc	r21, r13
    3144:	6e 1d       	adc	r22, r14
    3146:	7f 1d       	adc	r23, r15
    3148:	c5 01       	movw	r24, r10
    314a:	83 dd       	rcall	.-1274   	; 0x2c52 <prvInsertTimerInActiveList>
    314c:	88 23       	and	r24, r24
    314e:	09 f4       	brne	.+2      	; 0x3152 <prvProcessReceivedCommands+0x98>
    3150:	49 c0       	rjmp	.+146    	; 0x31e4 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3152:	d5 01       	movw	r26, r10
    3154:	54 96       	adiw	r26, 0x14	; 20
    3156:	ed 91       	ld	r30, X+
    3158:	fc 91       	ld	r31, X
    315a:	55 97       	sbiw	r26, 0x15	; 21
    315c:	c5 01       	movw	r24, r10
    315e:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3160:	f5 01       	movw	r30, r10
    3162:	86 89       	ldd	r24, Z+22	; 0x16
    3164:	82 ff       	sbrs	r24, 2
    3166:	3e c0       	rjmp	.+124    	; 0x31e4 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3168:	4a 81       	ldd	r20, Y+2	; 0x02
    316a:	5b 81       	ldd	r21, Y+3	; 0x03
    316c:	6c 81       	ldd	r22, Y+4	; 0x04
    316e:	7d 81       	ldd	r23, Y+5	; 0x05
    3170:	86 85       	ldd	r24, Z+14	; 0x0e
    3172:	97 85       	ldd	r25, Z+15	; 0x0f
    3174:	a0 89       	ldd	r26, Z+16	; 0x10
    3176:	b1 89       	ldd	r27, Z+17	; 0x11
    3178:	9a 01       	movw	r18, r20
    317a:	ab 01       	movw	r20, r22
    317c:	28 0f       	add	r18, r24
    317e:	39 1f       	adc	r19, r25
    3180:	4a 1f       	adc	r20, r26
    3182:	5b 1f       	adc	r21, r27
    3184:	c1 2c       	mov	r12, r1
    3186:	d1 2c       	mov	r13, r1
    3188:	76 01       	movw	r14, r12
    318a:	00 e0       	ldi	r16, 0x00	; 0
    318c:	10 e0       	ldi	r17, 0x00	; 0
    318e:	60 e0       	ldi	r22, 0x00	; 0
    3190:	c5 01       	movw	r24, r10
    3192:	f2 dd       	rcall	.-1052   	; 0x2d78 <xTimerGenericCommand>
    3194:	27 c0       	rjmp	.+78     	; 0x31e4 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3196:	d5 01       	movw	r26, r10
    3198:	56 96       	adiw	r26, 0x16	; 22
    319a:	8c 91       	ld	r24, X
    319c:	56 97       	sbiw	r26, 0x16	; 22
    319e:	8e 7f       	andi	r24, 0xFE	; 254
    31a0:	56 96       	adiw	r26, 0x16	; 22
    31a2:	8c 93       	st	X, r24
                        break;
    31a4:	1f c0       	rjmp	.+62     	; 0x31e4 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    31a6:	f5 01       	movw	r30, r10
    31a8:	86 89       	ldd	r24, Z+22	; 0x16
    31aa:	81 60       	ori	r24, 0x01	; 1
    31ac:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    31ae:	4a 81       	ldd	r20, Y+2	; 0x02
    31b0:	5b 81       	ldd	r21, Y+3	; 0x03
    31b2:	6c 81       	ldd	r22, Y+4	; 0x04
    31b4:	7d 81       	ldd	r23, Y+5	; 0x05
    31b6:	46 87       	std	Z+14, r20	; 0x0e
    31b8:	57 87       	std	Z+15, r21	; 0x0f
    31ba:	60 8b       	std	Z+16, r22	; 0x10
    31bc:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    31be:	40 0f       	add	r20, r16
    31c0:	51 1f       	adc	r21, r17
    31c2:	62 1f       	adc	r22, r18
    31c4:	73 1f       	adc	r23, r19
    31c6:	68 01       	movw	r12, r16
    31c8:	79 01       	movw	r14, r18
    31ca:	c5 01       	movw	r24, r10
    31cc:	42 dd       	rcall	.-1404   	; 0x2c52 <prvInsertTimerInActiveList>
                        break;
    31ce:	0a c0       	rjmp	.+20     	; 0x31e4 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    31d0:	f5 01       	movw	r30, r10
    31d2:	86 89       	ldd	r24, Z+22	; 0x16
    31d4:	81 fd       	sbrc	r24, 1
    31d6:	04 c0       	rjmp	.+8      	; 0x31e0 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    31d8:	c5 01       	movw	r24, r10
    31da:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vPortFree>
    31de:	02 c0       	rjmp	.+4      	; 0x31e4 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    31e0:	8e 7f       	andi	r24, 0xFE	; 254
    31e2:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	a9 01       	movw	r20, r18
    31ea:	be 01       	movw	r22, r28
    31ec:	6f 5f       	subi	r22, 0xFF	; 255
    31ee:	7f 4f       	sbci	r23, 0xFF	; 255
    31f0:	80 91 67 14 	lds	r24, 0x1467	; 0x801467 <xTimerQueue>
    31f4:	90 91 68 14 	lds	r25, 0x1468	; 0x801468 <xTimerQueue+0x1>
    31f8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <xQueueReceive>
    31fc:	81 11       	cpse	r24, r1
    31fe:	70 cf       	rjmp	.-288    	; 0x30e0 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3200:	28 96       	adiw	r28, 0x08	; 8
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	cd bf       	out	0x3d, r28	; 61
    320c:	df 91       	pop	r29
    320e:	cf 91       	pop	r28
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
    3214:	ff 90       	pop	r15
    3216:	ef 90       	pop	r14
    3218:	df 90       	pop	r13
    321a:	cf 90       	pop	r12
    321c:	bf 90       	pop	r11
    321e:	af 90       	pop	r10
    3220:	08 95       	ret

00003222 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3222:	08 95       	ret

00003224 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3224:	84 b1       	in	r24, 0x04	; 4
    3226:	80 68       	ori	r24, 0x80	; 128
    3228:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    322a:	85 b1       	in	r24, 0x05	; 5
    322c:	80 68       	ori	r24, 0x80	; 128
    322e:	85 b9       	out	0x05, r24	; 5
    3230:	08 95       	ret

00003232 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3232:	83 b1       	in	r24, 0x03	; 3
    3234:	80 68       	ori	r24, 0x80	; 128
    3236:	83 b9       	out	0x03, r24	; 3
    3238:	08 95       	ret

0000323a <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    323a:	f4 df       	rcall	.-24     	; 0x3224 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    323c:	2f ef       	ldi	r18, 0xFF	; 255
    323e:	80 e7       	ldi	r24, 0x70	; 112
    3240:	92 e0       	ldi	r25, 0x02	; 2
    3242:	21 50       	subi	r18, 0x01	; 1
    3244:	80 40       	sbci	r24, 0x00	; 0
    3246:	90 40       	sbci	r25, 0x00	; 0
    3248:	e1 f7       	brne	.-8      	; 0x3242 <vApplicationMallocFailedHook+0x8>
    324a:	00 c0       	rjmp	.+0      	; 0x324c <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    324c:	00 00       	nop
    324e:	f1 df       	rcall	.-30     	; 0x3232 <prvBlinkMainLed>
    3250:	f5 cf       	rjmp	.-22     	; 0x323c <vApplicationMallocFailedHook+0x2>

00003252 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3252:	e8 df       	rcall	.-48     	; 0x3224 <prvSetMainLedOn>
    3254:	2f ef       	ldi	r18, 0xFF	; 255
    3256:	87 ea       	ldi	r24, 0xA7	; 167
    3258:	91 e6       	ldi	r25, 0x61	; 97
    325a:	21 50       	subi	r18, 0x01	; 1
    325c:	80 40       	sbci	r24, 0x00	; 0
    325e:	90 40       	sbci	r25, 0x00	; 0
    3260:	e1 f7       	brne	.-8      	; 0x325a <vApplicationStackOverflowHook+0x8>
    3262:	00 c0       	rjmp	.+0      	; 0x3264 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3264:	00 00       	nop
    3266:	e5 df       	rcall	.-54     	; 0x3232 <prvBlinkMainLed>
    3268:	f5 cf       	rjmp	.-22     	; 0x3254 <vApplicationStackOverflowHook+0x2>

0000326a <humMotorTask>:
	(void) pvParameters;
	
	while (1) {
		//vTaskDelay(100);
		
		xSemaphoreTake(hardware_semaphore, portMAX_DELAY);
    326a:	4f ef       	ldi	r20, 0xFF	; 255
    326c:	5f ef       	ldi	r21, 0xFF	; 255
    326e:	ba 01       	movw	r22, r20
    3270:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <hardware_semaphore>
    3274:	90 91 fd 15 	lds	r25, 0x15FD	; 0x8015fd <hardware_semaphore+0x1>
    3278:	0e 94 fd 06 	call	0xdfa	; 0xdfa <xQueueSemaphoreTake>
		
		if (desired_data.desired_hum > entry_data.humidity)
    327c:	20 91 f6 15 	lds	r18, 0x15F6	; 0x8015f6 <desired_data+0x2>
    3280:	30 91 f7 15 	lds	r19, 0x15F7	; 0x8015f7 <desired_data+0x3>
    3284:	80 91 ee 15 	lds	r24, 0x15EE	; 0x8015ee <entry_data+0x2>
    3288:	90 91 ef 15 	lds	r25, 0x15EF	; 0x8015ef <entry_data+0x3>
    328c:	82 17       	cp	r24, r18
    328e:	93 07       	cpc	r25, r19
    3290:	70 f4       	brcc	.+28     	; 0x32ae <humMotorTask+0x44>
		{
			//printf("Water motor is moving right \n");
			rc_servo_setPosition(0,100);
    3292:	64 e6       	ldi	r22, 0x64	; 100
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	0e 94 62 22 	call	0x44c4	; 0x44c4 <rc_servo_setPosition>
			vTaskDelay(50);
    329a:	62 e3       	ldi	r22, 0x32	; 50
    329c:	70 e0       	ldi	r23, 0x00	; 0
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vTaskDelay>
			//printf("Water motor is moving left \n");
			rc_servo_setPosition(0,-100);
    32a6:	6c e9       	ldi	r22, 0x9C	; 156
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	0e 94 62 22 	call	0x44c4	; 0x44c4 <rc_servo_setPosition>
		}
		
		xSemaphoreGive(hardware_semaphore);
    32ae:	00 e0       	ldi	r16, 0x00	; 0
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	a9 01       	movw	r20, r18
    32b6:	60 e0       	ldi	r22, 0x00	; 0
    32b8:	70 e0       	ldi	r23, 0x00	; 0
    32ba:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <hardware_semaphore>
    32be:	90 91 fd 15 	lds	r25, 0x15FD	; 0x8015fd <hardware_semaphore+0x1>
    32c2:	0e 94 83 05 	call	0xb06	; 0xb06 <xQueueGenericSend>
		
		vTaskDelay(9800);
    32c6:	68 e4       	ldi	r22, 0x48	; 72
    32c8:	76 e2       	ldi	r23, 0x26	; 38
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vTaskDelay>
	}
    32d2:	cb cf       	rjmp	.-106    	; 0x326a <humMotorTask>

000032d4 <tempAndHumidityTask>:

void tempAndHumidityTask(void* pvParameters){
	(void) pvParameters;
	
	while(1){
		vTaskDelay(50);
    32d4:	62 e3       	ldi	r22, 0x32	; 50
    32d6:	70 e0       	ldi	r23, 0x00	; 0
    32d8:	80 e0       	ldi	r24, 0x00	; 0
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vTaskDelay>
		
		int returnCode = hih8120_wakeup();
    32e0:	67 d3       	rcall	.+1742   	; 0x39b0 <hih8120_wakeup>
    32e2:	28 2f       	mov	r18, r24
    32e4:	30 e0       	ldi	r19, 0x00	; 0
		if(HIH8120_OK != returnCode && returnCode!= HIH8120_TWI_BUSY){
    32e6:	21 15       	cp	r18, r1
    32e8:	31 05       	cpc	r19, r1
    32ea:	79 f0       	breq	.+30     	; 0x330a <tempAndHumidityTask+0x36>
    32ec:	23 30       	cpi	r18, 0x03	; 3
    32ee:	31 05       	cpc	r19, r1
    32f0:	61 f0       	breq	.+24     	; 0x330a <tempAndHumidityTask+0x36>
			printf("HIH8120 wakeup error %d \n",returnCode);
    32f2:	1f 92       	push	r1
    32f4:	8f 93       	push	r24
    32f6:	84 e9       	ldi	r24, 0x94	; 148
    32f8:	92 e0       	ldi	r25, 0x02	; 2
    32fa:	9f 93       	push	r25
    32fc:	8f 93       	push	r24
    32fe:	0e 94 77 2e 	call	0x5cee	; 0x5cee <printf>
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	0f 90       	pop	r0
		}
		
		vTaskDelay(10);
    330a:	6a e0       	ldi	r22, 0x0A	; 10
    330c:	70 e0       	ldi	r23, 0x00	; 0
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vTaskDelay>
		
		returnCode = hih8120_measure();
    3316:	61 d3       	rcall	.+1730   	; 0x39da <hih8120_measure>
    3318:	28 2f       	mov	r18, r24
    331a:	30 e0       	ldi	r19, 0x00	; 0
		if(HIH8120_OK!=returnCode && returnCode!= HIH8120_TWI_BUSY){
    331c:	21 15       	cp	r18, r1
    331e:	31 05       	cpc	r19, r1
    3320:	79 f0       	breq	.+30     	; 0x3340 <tempAndHumidityTask+0x6c>
    3322:	23 30       	cpi	r18, 0x03	; 3
    3324:	31 05       	cpc	r19, r1
    3326:	61 f0       	breq	.+24     	; 0x3340 <tempAndHumidityTask+0x6c>
			printf("HIH8120 measure error %d \n",returnCode);
    3328:	1f 92       	push	r1
    332a:	8f 93       	push	r24
    332c:	8e ea       	ldi	r24, 0xAE	; 174
    332e:	92 e0       	ldi	r25, 0x02	; 2
    3330:	9f 93       	push	r25
    3332:	8f 93       	push	r24
    3334:	0e 94 77 2e 	call	0x5cee	; 0x5cee <printf>
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	0f 90       	pop	r0
    333e:	0f 90       	pop	r0
		}
		
		vTaskDelay(15);
    3340:	6f e0       	ldi	r22, 0x0F	; 15
    3342:	70 e0       	ldi	r23, 0x00	; 0
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vTaskDelay>
		
		xSemaphoreTake(hardware_semaphore, portMAX_DELAY);
    334c:	4f ef       	ldi	r20, 0xFF	; 255
    334e:	5f ef       	ldi	r21, 0xFF	; 255
    3350:	ba 01       	movw	r22, r20
    3352:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <hardware_semaphore>
    3356:	90 91 fd 15 	lds	r25, 0x15FD	; 0x8015fd <hardware_semaphore+0x1>
    335a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <xQueueSemaphoreTake>
		
		entry_data.humidity=hih8120_getHumidityPercent_x10();
    335e:	63 d3       	rcall	.+1734   	; 0x3a26 <hih8120_getHumidityPercent_x10>
    3360:	cc ee       	ldi	r28, 0xEC	; 236
    3362:	d5 e1       	ldi	r29, 0x15	; 21
    3364:	9b 83       	std	Y+3, r25	; 0x03
		entry_data.temperature=hih8120_getTemperature_x10();
    3366:	8a 83       	std	Y+2, r24	; 0x02
    3368:	83 d3       	rcall	.+1798   	; 0x3a70 <hih8120_getTemperature_x10>
    336a:	99 83       	std	Y+1, r25	; 0x01
    336c:	88 83       	st	Y, r24
		//printf("Humidity= %d and Temperature= %d \n",entry_data.humidity,entry_data.temperature);
		
		xSemaphoreGive(hardware_semaphore);
    336e:	00 e0       	ldi	r16, 0x00	; 0
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	a9 01       	movw	r20, r18
    3376:	60 e0       	ldi	r22, 0x00	; 0
    3378:	70 e0       	ldi	r23, 0x00	; 0
    337a:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <hardware_semaphore>
    337e:	90 91 fd 15 	lds	r25, 0x15FD	; 0x8015fd <hardware_semaphore+0x1>
    3382:	0e 94 83 05 	call	0xb06	; 0xb06 <xQueueGenericSend>
		
		vTaskDelay(9900); 
    3386:	6c ea       	ldi	r22, 0xAC	; 172
    3388:	76 e2       	ldi	r23, 0x26	; 38
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vTaskDelay>
	}
    3392:	a0 cf       	rjmp	.-192    	; 0x32d4 <tempAndHumidityTask>

00003394 <lightTask>:

void lightTask(void* pvParameters) {
	(void)pvParameters;

	while (1) {
		vTaskDelay(70);
    3394:	66 e4       	ldi	r22, 0x46	; 70
    3396:	70 e0       	ldi	r23, 0x00	; 0
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vTaskDelay>
		int statusCode = tsl2591_fetchData();
    33a0:	0e 94 58 28 	call	0x50b0	; 0x50b0 <tsl2591_fetchData>
		if (statusCode != TSL2591_OK) {
    33a4:	88 23       	and	r24, r24
    33a6:	61 f0       	breq	.+24     	; 0x33c0 <lightTask+0x2c>
			printf("Light data error: %d\n", statusCode);
    33a8:	1f 92       	push	r1
    33aa:	8f 93       	push	r24
    33ac:	89 ec       	ldi	r24, 0xC9	; 201
    33ae:	92 e0       	ldi	r25, 0x02	; 2
    33b0:	9f 93       	push	r25
    33b2:	8f 93       	push	r24
    33b4:	0e 94 77 2e 	call	0x5cee	; 0x5cee <printf>
    33b8:	0f 90       	pop	r0
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
		} 
		vTaskDelay(9900);
    33c0:	6c ea       	ldi	r22, 0xAC	; 172
    33c2:	76 e2       	ldi	r23, 0x26	; 38
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vTaskDelay>
	}
    33cc:	e3 cf       	rjmp	.-58     	; 0x3394 <lightTask>

000033ce <lightCallback>:

}


void lightCallback(tsl2591_returnCode_t rc) {
    33ce:	0f 93       	push	r16
    33d0:	cf 93       	push	r28
    33d2:	df 93       	push	r29
    33d4:	00 d0       	rcall	.+0      	; 0x33d6 <lightCallback+0x8>
    33d6:	1f 92       	push	r1
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
	float lux;
	xSemaphoreTake(hardware_semaphore, portMAX_DELAY);
    33dc:	4f ef       	ldi	r20, 0xFF	; 255
    33de:	5f ef       	ldi	r21, 0xFF	; 255
    33e0:	ba 01       	movw	r22, r20
    33e2:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <hardware_semaphore>
    33e6:	90 91 fd 15 	lds	r25, 0x15FD	; 0x8015fd <hardware_semaphore+0x1>
    33ea:	0e 94 fd 06 	call	0xdfa	; 0xdfa <xQueueSemaphoreTake>
	
	if (TSL2591_OK == (rc = tsl2591_getLux(&lux)))
    33ee:	ce 01       	movw	r24, r28
    33f0:	01 96       	adiw	r24, 0x01	; 1
    33f2:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <tsl2591_getLux>
    33f6:	81 11       	cpse	r24, r1
    33f8:	0a c0       	rjmp	.+20     	; 0x340e <lightCallback+0x40>
	{
		//printf("Lux: %d\n", (uint16_t)lux);
		entry_data.light = (uint16_t)lux;
    33fa:	69 81       	ldd	r22, Y+1	; 0x01
    33fc:	7a 81       	ldd	r23, Y+2	; 0x02
    33fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3400:	9c 81       	ldd	r25, Y+4	; 0x04
    3402:	3c d2       	rcall	.+1144   	; 0x387c <__fixunssfsi>
    3404:	70 93 f3 15 	sts	0x15F3, r23	; 0x8015f3 <entry_data+0x7>
    3408:	60 93 f2 15 	sts	0x15F2, r22	; 0x8015f2 <entry_data+0x6>
    340c:	06 c0       	rjmp	.+12     	; 0x341a <lightCallback+0x4c>
	}
	else if (TSL2591_OVERFLOW == rc)
    340e:	83 30       	cpi	r24, 0x03	; 3
    3410:	21 f4       	brne	.+8      	; 0x341a <lightCallback+0x4c>
	{
		printf("Lux overflow\n");
    3412:	8f ed       	ldi	r24, 0xDF	; 223
    3414:	92 e0       	ldi	r25, 0x02	; 2
    3416:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <puts>
	}
	if(desired_data.desired_light>entry_data.light){
    341a:	20 91 fa 15 	lds	r18, 0x15FA	; 0x8015fa <desired_data+0x6>
    341e:	30 91 fb 15 	lds	r19, 0x15FB	; 0x8015fb <desired_data+0x7>
    3422:	80 91 f2 15 	lds	r24, 0x15F2	; 0x8015f2 <entry_data+0x6>
    3426:	90 91 f3 15 	lds	r25, 0x15F3	; 0x8015f3 <entry_data+0x7>
    342a:	82 17       	cp	r24, r18
    342c:	93 07       	cpc	r25, r19
    342e:	20 f4       	brcc	.+8      	; 0x3438 <lightCallback+0x6a>
		rc_servo_setPosition(1,100)	;
    3430:	64 e6       	ldi	r22, 0x64	; 100
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	0e 94 62 22 	call	0x44c4	; 0x44c4 <rc_servo_setPosition>
		//printf("Motor is moving right\n");
		//printf("Light level is turned up\n");
	}
	if(desired_data.desired_light<entry_data.light){
    3438:	20 91 fa 15 	lds	r18, 0x15FA	; 0x8015fa <desired_data+0x6>
    343c:	30 91 fb 15 	lds	r19, 0x15FB	; 0x8015fb <desired_data+0x7>
    3440:	80 91 f2 15 	lds	r24, 0x15F2	; 0x8015f2 <entry_data+0x6>
    3444:	90 91 f3 15 	lds	r25, 0x15F3	; 0x8015f3 <entry_data+0x7>
    3448:	28 17       	cp	r18, r24
    344a:	39 07       	cpc	r19, r25
    344c:	20 f4       	brcc	.+8      	; 0x3456 <lightCallback+0x88>
		rc_servo_setPosition(1,-100)	;
    344e:	6c e9       	ldi	r22, 0x9C	; 156
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	0e 94 62 22 	call	0x44c4	; 0x44c4 <rc_servo_setPosition>
		//printf("Motor is moving left\n");
		//printf("Light level is turned down\n");
	}
	
	xSemaphoreGive(hardware_semaphore);
    3456:	00 e0       	ldi	r16, 0x00	; 0
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	a9 01       	movw	r20, r18
    345e:	60 e0       	ldi	r22, 0x00	; 0
    3460:	70 e0       	ldi	r23, 0x00	; 0
    3462:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <hardware_semaphore>
    3466:	90 91 fd 15 	lds	r25, 0x15FD	; 0x8015fd <hardware_semaphore+0x1>
    346a:	0e 94 83 05 	call	0xb06	; 0xb06 <xQueueGenericSend>
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	0f 90       	pop	r0
    3474:	0f 90       	pop	r0
    3476:	df 91       	pop	r29
    3478:	cf 91       	pop	r28
    347a:	0f 91       	pop	r16
    347c:	08 95       	ret

0000347e <_lora_setup>:

static lora_driver_payload_t _uplink_payload;
static lora_driver_payload_t _downlink_payload;

static void _lora_setup(void)
{
    347e:	0f 93       	push	r16
    3480:	1f 93       	push	r17
    3482:	cf 93       	push	r28
    3484:	df 93       	push	r29
    3486:	cd b7       	in	r28, 0x3d	; 61
    3488:	de b7       	in	r29, 0x3e	; 62
    348a:	64 97       	sbiw	r28, 0x14	; 20
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	f8 94       	cli
    3490:	de bf       	out	0x3e, r29	; 62
    3492:	0f be       	out	0x3f, r0	; 63
    3494:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); 
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <status_leds_slowBlink>


	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    349c:	61 d4       	rcall	.+2242   	; 0x3d60 <lora_driver_rn2483FactoryReset>
    349e:	dd d6       	rcall	.+3514   	; 0x425a <lora_driver_mapReturnCodeToText>
    34a0:	9f 93       	push	r25
    34a2:	8f 93       	push	r24
    34a4:	8c ee       	ldi	r24, 0xEC	; 236
    34a6:	92 e0       	ldi	r25, 0x02	; 2
    34a8:	9f 93       	push	r25
    34aa:	8f 93       	push	r24
    34ac:	0e 94 77 2e 	call	0x5cee	; 0x5cee <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    34b0:	d5 d5       	rcall	.+2986   	; 0x405c <lora_driver_configureToEu868>
    34b2:	d3 d6       	rcall	.+3494   	; 0x425a <lora_driver_mapReturnCodeToText>
    34b4:	9f 93       	push	r25
    34b6:	8f 93       	push	r24
    34b8:	8f ef       	ldi	r24, 0xFF	; 255
    34ba:	92 e0       	ldi	r25, 0x02	; 2
    34bc:	9f 93       	push	r25
    34be:	8f 93       	push	r24
    34c0:	0e 94 77 2e 	call	0x5cee	; 0x5cee <printf>
    34c4:	8e 01       	movw	r16, r28
    34c6:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    34c8:	1f 4f       	sbci	r17, 0xFF	; 255
    34ca:	c8 01       	movw	r24, r16
    34cc:	5b d4       	rcall	.+2230   	; 0x3d84 <lora_driver_getRn2483Hweui>
    34ce:	c5 d6       	rcall	.+3466   	; 0x425a <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    34d0:	1f 93       	push	r17
    34d2:	0f 93       	push	r16
    34d4:	9f 93       	push	r25
    34d6:	8f 93       	push	r24
    34d8:	88 e1       	ldi	r24, 0x18	; 24
    34da:	93 e0       	ldi	r25, 0x03	; 3
    34dc:	9f 93       	push	r25
    34de:	8f 93       	push	r24
    34e0:	0e 94 77 2e 	call	0x5cee	; 0x5cee <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    34e4:	c8 01       	movw	r24, r16
    34e6:	6a d4       	rcall	.+2260   	; 0x3dbc <lora_driver_setDeviceIdentifier>
    34e8:	b8 d6       	rcall	.+3440   	; 0x425a <lora_driver_mapReturnCodeToText>
    34ea:	9f 93       	push	r25
    34ec:	8f 93       	push	r24
    34ee:	1f 93       	push	r17
    34f0:	0f 93       	push	r16
    34f2:	8c e2       	ldi	r24, 0x2C	; 44
    34f4:	93 e0       	ldi	r25, 0x03	; 3
    34f6:	9f 93       	push	r25
    34f8:	8f 93       	push	r24
    34fa:	0e 94 77 2e 	call	0x5cee	; 0x5cee <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    34fe:	a8 01       	movw	r20, r16
    3500:	61 e4       	ldi	r22, 0x41	; 65
    3502:	73 e0       	ldi	r23, 0x03	; 3
    3504:	82 e6       	ldi	r24, 0x62	; 98
    3506:	93 e0       	ldi	r25, 0x03	; 3
    3508:	87 d6       	rcall	.+3342   	; 0x4218 <lora_driver_setOtaaIdentity>
    350a:	a7 d6       	rcall	.+3406   	; 0x425a <lora_driver_mapReturnCodeToText>
    350c:	9f 93       	push	r25
    350e:	8f 93       	push	r24
    3510:	1f 93       	push	r17
    3512:	0f 93       	push	r16
    3514:	81 e4       	ldi	r24, 0x41	; 65
    3516:	93 e0       	ldi	r25, 0x03	; 3
    3518:	9f 93       	push	r25
    351a:	8f 93       	push	r24
    351c:	82 e6       	ldi	r24, 0x62	; 98
    351e:	93 e0       	ldi	r25, 0x03	; 3
    3520:	9f 93       	push	r25
    3522:	8f 93       	push	r24
    3524:	83 e7       	ldi	r24, 0x73	; 115
    3526:	93 e0       	ldi	r25, 0x03	; 3
    3528:	9f 93       	push	r25
    352a:	8f 93       	push	r24
    352c:	0e 94 77 2e 	call	0x5cee	; 0x5cee <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3530:	78 d4       	rcall	.+2288   	; 0x3e22 <lora_driver_saveMac>
    3532:	93 d6       	rcall	.+3366   	; 0x425a <lora_driver_mapReturnCodeToText>
    3534:	9f 93       	push	r25
    3536:	8f 93       	push	r24
    3538:	89 ea       	ldi	r24, 0xA9	; 169
    353a:	93 e0       	ldi	r25, 0x03	; 3
    353c:	9f 93       	push	r25
    353e:	8f 93       	push	r24
    3540:	0e 94 77 2e 	call	0x5cee	; 0x5cee <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3544:	0f b6       	in	r0, 0x3f	; 63
    3546:	f8 94       	cli
    3548:	de bf       	out	0x3e, r29	; 62
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	cd bf       	out	0x3d, r28	; 61
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	62 d5       	rcall	.+2756   	; 0x4016 <lora_driver_setAdaptiveDataRate>
    3552:	83 d6       	rcall	.+3334   	; 0x425a <lora_driver_mapReturnCodeToText>
    3554:	9f 93       	push	r25
    3556:	8f 93       	push	r24
    3558:	88 eb       	ldi	r24, 0xB8	; 184
    355a:	93 e0       	ldi	r25, 0x03	; 3
    355c:	9f 93       	push	r25
    355e:	8f 93       	push	r24
    3560:	0e 94 77 2e 	call	0x5cee	; 0x5cee <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3564:	84 ef       	ldi	r24, 0xF4	; 244
    3566:	91 e0       	ldi	r25, 0x01	; 1
    3568:	61 d5       	rcall	.+2754   	; 0x402c <lora_driver_setReceiveDelay>
    356a:	77 d6       	rcall	.+3310   	; 0x425a <lora_driver_mapReturnCodeToText>
    356c:	9f 93       	push	r25
    356e:	8f 93       	push	r24
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	8f 93       	push	r24
    3574:	84 ef       	ldi	r24, 0xF4	; 244
    3576:	8f 93       	push	r24
    3578:	89 ed       	ldi	r24, 0xD9	; 217
    357a:	93 e0       	ldi	r25, 0x03	; 3
    357c:	9f 93       	push	r25
    357e:	8f 93       	push	r24
    3580:	0e 94 77 2e 	call	0x5cee	; 0x5cee <printf>
    3584:	0f b6       	in	r0, 0x3f	; 63
    3586:	f8 94       	cli
    3588:	de bf       	out	0x3e, r29	; 62
    358a:	0f be       	out	0x3f, r0	; 63
    358c:	cd bf       	out	0x3d, r28	; 61
    358e:	1a e0       	ldi	r17, 0x0A	; 10



	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3590:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3592:	4d d4       	rcall	.+2202   	; 0x3e2e <lora_driver_join>
    3594:	08 2f       	mov	r16, r24
    3596:	88 30       	cpi	r24, 0x08	; 8
    3598:	41 f0       	breq	.+16     	; 0x35aa <_lora_setup+0x12c>
		//printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));

		if ( rc != LORA_ACCEPTED)
    359a:	66 e3       	ldi	r22, 0x36	; 54
    359c:	71 e0       	ldi	r23, 0x01	; 1
		{
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vTaskDelay>
    35a6:	11 50       	subi	r17, 0x01	; 1
    35a8:	99 f7       	brne	.-26     	; 0x3590 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    35aa:	08 30       	cpi	r16, 0x08	; 8
    35ac:	19 f0       	breq	.+6      	; 0x35b4 <_lora_setup+0x136>

	if (rc == LORA_ACCEPTED)
    35ae:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vPortYield>
	else
	{
		//puts("Connection failed \n");
		while (1)
		{
			taskYIELD();
    35b2:	fd cf       	rjmp	.-6      	; 0x35ae <_lora_setup+0x130>
    35b4:	64 96       	adiw	r28, 0x14	; 20
    35b6:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    35b8:	f8 94       	cli
    35ba:	de bf       	out	0x3e, r29	; 62
    35bc:	0f be       	out	0x3f, r0	; 63
    35be:	cd bf       	out	0x3d, r28	; 61
    35c0:	df 91       	pop	r29
    35c2:	cf 91       	pop	r28
    35c4:	1f 91       	pop	r17
    35c6:	0f 91       	pop	r16
    35c8:	08 95       	ret

000035ca <lora_handler_task>:
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	bb d3       	rcall	.+1910   	; 0x3d44 <lora_driver_resetRn2483>
/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
	vTaskDelay(2);
    35ce:	62 e0       	ldi	r22, 0x02	; 2
    35d0:	70 e0       	ldi	r23, 0x00	; 0
    35d2:	80 e0       	ldi	r24, 0x00	; 0
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vTaskDelay>
	lora_driver_resetRn2483(0);
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	b3 d3       	rcall	.+1894   	; 0x3d44 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    35de:	66 e9       	ldi	r22, 0x96	; 150
    35e0:	70 e0       	ldi	r23, 0x00	; 0
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    35ea:	65 d3       	rcall	.+1738   	; 0x3cb6 <lora_driver_flushBuffers>

	_lora_setup();
    35ec:	48 df       	rcall	.-368    	; 0x347e <_lora_setup>
    35ee:	e9 e9       	ldi	r30, 0x99	; 153

	_uplink_payload.len = 8;
    35f0:	f4 e1       	ldi	r31, 0x14	; 20
    35f2:	98 e0       	ldi	r25, 0x08	; 8
    35f4:	91 83       	std	Z+1, r25	; 0x01
    35f6:	81 e0       	ldi	r24, 0x01	; 1
	_uplink_payload.portNo = 1; 
    35f8:	80 83       	st	Z, r24
    35fa:	e3 e8       	ldi	r30, 0x83	; 131
	
	_downlink_payload.len = 8;
    35fc:	f4 e1       	ldi	r31, 0x14	; 20
    35fe:	91 83       	std	Z+1, r25	; 0x01
    3600:	80 83       	st	Z, r24
	_downlink_payload.portNo = 1;
    3602:	60 e1       	ldi	r22, 0x10	; 16
	
	for(;;)
	{
		vTaskDelay(10000); //500 = aprox 30 sec (10000 - aprox 3.5 min)
    3604:	77 e2       	ldi	r23, 0x27	; 39
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vTaskDelay>
    360e:	4f ef       	ldi	r20, 0xFF	; 255
		xSemaphoreTake(hardware_semaphore,portMAX_DELAY);
    3610:	5f ef       	ldi	r21, 0xFF	; 255
    3612:	ba 01       	movw	r22, r20
    3614:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <hardware_semaphore>
    3618:	90 91 fd 15 	lds	r25, 0x15FD	; 0x8015fd <hardware_semaphore+0x1>
    361c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <xQueueSemaphoreTake>
    3620:	ac ee       	ldi	r26, 0xEC	; 236
		
		_uplink_payload.bytes[0] = entry_data.humidity >> 8;
    3622:	b5 e1       	ldi	r27, 0x15	; 21
    3624:	12 96       	adiw	r26, 0x02	; 2
    3626:	8c 91       	ld	r24, X
    3628:	12 97       	sbiw	r26, 0x02	; 2
    362a:	13 96       	adiw	r26, 0x03	; 3
    362c:	9c 91       	ld	r25, X
    362e:	13 97       	sbiw	r26, 0x03	; 3
    3630:	e9 e9       	ldi	r30, 0x99	; 153
    3632:	f4 e1       	ldi	r31, 0x14	; 20
    3634:	92 83       	std	Z+2, r25	; 0x02
    3636:	83 83       	std	Z+3, r24	; 0x03
		_uplink_payload.bytes[1] = entry_data.humidity & 0xFF;
    3638:	8c 91       	ld	r24, X
		_uplink_payload.bytes[2] = entry_data.temperature >> 8;
    363a:	11 96       	adiw	r26, 0x01	; 1
    363c:	9c 91       	ld	r25, X
    363e:	11 97       	sbiw	r26, 0x01	; 1
    3640:	94 83       	std	Z+4, r25	; 0x04
    3642:	85 83       	std	Z+5, r24	; 0x05
		_uplink_payload.bytes[3] = entry_data.temperature & 0xFF;
    3644:	14 96       	adiw	r26, 0x04	; 4
		_uplink_payload.bytes[4] = entry_data.co2 >> 8;
    3646:	8c 91       	ld	r24, X
    3648:	14 97       	sbiw	r26, 0x04	; 4
    364a:	15 96       	adiw	r26, 0x05	; 5
    364c:	9c 91       	ld	r25, X
    364e:	15 97       	sbiw	r26, 0x05	; 5
    3650:	96 83       	std	Z+6, r25	; 0x06
    3652:	87 83       	std	Z+7, r24	; 0x07
		_uplink_payload.bytes[5] = entry_data.co2 & 0xFF;
    3654:	16 96       	adiw	r26, 0x06	; 6
		_uplink_payload.bytes[6] = entry_data.light >> 8;
    3656:	8c 91       	ld	r24, X
    3658:	16 97       	sbiw	r26, 0x06	; 6
    365a:	17 96       	adiw	r26, 0x07	; 7
    365c:	9c 91       	ld	r25, X
    365e:	90 87       	std	Z+8, r25	; 0x08
		_uplink_payload.bytes[7] = entry_data.light & 0xFF;
    3660:	81 87       	std	Z+9, r24	; 0x09
		
		lora_driver_returnCode_t rc;
		
		rc = lora_driver_sendUploadMessage(false, &_uplink_payload);
    3662:	bf 01       	movw	r22, r30
    3664:	80 e0       	ldi	r24, 0x00	; 0
    3666:	0c d4       	rcall	.+2072   	; 0x3e80 <lora_driver_sendUploadMessage>
    3668:	8d 30       	cpi	r24, 0x0D	; 13
		
		if (rc  == LORA_MAC_TX_OK )
    366a:	09 f4       	brne	.+2      	; 0x366e <lora_handler_task+0xa4>
    366c:	43 c0       	rjmp	.+134    	; 0x36f4 <lora_handler_task+0x12a>
    366e:	8e 30       	cpi	r24, 0x0E	; 14
		{
			//puts("MESSAGE SENT \n");
			// The uplink message is sent and there is no downlink message received
		}
		else if(rc==LORA_MAC_RX)
    3670:	09 f0       	breq	.+2      	; 0x3674 <lora_handler_task+0xaa>
    3672:	40 c0       	rjmp	.+128    	; 0x36f4 <lora_handler_task+0x12a>
    3674:	0f ef       	ldi	r16, 0xFF	; 255
		{
			// The uplink message is sent and a downlink message is received
			//puts("MESSAGE SENT \n");
			
			xMessageBufferReceive(downlink_buffer, &_downlink_payload, sizeof(lora_driver_payload_t),portMAX_DELAY);
    3676:	1f ef       	ldi	r17, 0xFF	; 255
    3678:	98 01       	movw	r18, r16
    367a:	46 e1       	ldi	r20, 0x16	; 22
    367c:	50 e0       	ldi	r21, 0x00	; 0
    367e:	63 e8       	ldi	r22, 0x83	; 131
    3680:	74 e1       	ldi	r23, 0x14	; 20
    3682:	80 91 ea 15 	lds	r24, 0x15EA	; 0x8015ea <downlink_buffer>
    3686:	90 91 eb 15 	lds	r25, 0x15EB	; 0x8015eb <downlink_buffer+0x1>
    368a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <xStreamBufferReceive>
    368e:	80 91 84 14 	lds	r24, 0x1484	; 0x801484 <_downlink_payload+0x1>
			//printf("DOWN LINK: from port: %d with %d bytes received! \n", _downlink_payload.portNo, _downlink_payload.len);
			
			
			if(_downlink_payload.len==8) //number of bytes we send and expect to receive
    3692:	88 30       	cpi	r24, 0x08	; 8
    3694:	79 f5       	brne	.+94     	; 0x36f4 <lora_handler_task+0x12a>
    3696:	e3 e8       	ldi	r30, 0x83	; 131
			{
				desired_data.desired_temp=(_downlink_payload.bytes[0] << 8) + _downlink_payload.bytes[1];
    3698:	f4 e1       	ldi	r31, 0x14	; 20
    369a:	82 81       	ldd	r24, Z+2	; 0x02
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	98 2f       	mov	r25, r24
    36a0:	88 27       	eor	r24, r24
    36a2:	23 81       	ldd	r18, Z+3	; 0x03
    36a4:	82 0f       	add	r24, r18
    36a6:	91 1d       	adc	r25, r1
    36a8:	a4 ef       	ldi	r26, 0xF4	; 244
    36aa:	b5 e1       	ldi	r27, 0x15	; 21
    36ac:	11 96       	adiw	r26, 0x01	; 1
    36ae:	9c 93       	st	X, r25
    36b0:	8e 93       	st	-X, r24
    36b2:	84 81       	ldd	r24, Z+4	; 0x04
				desired_data.desired_hum=(_downlink_payload.bytes[2] << 8) + _downlink_payload.bytes[3];
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	98 2f       	mov	r25, r24
    36b8:	88 27       	eor	r24, r24
    36ba:	25 81       	ldd	r18, Z+5	; 0x05
    36bc:	82 0f       	add	r24, r18
    36be:	91 1d       	adc	r25, r1
    36c0:	13 96       	adiw	r26, 0x03	; 3
    36c2:	9c 93       	st	X, r25
    36c4:	8e 93       	st	-X, r24
    36c6:	12 97       	sbiw	r26, 0x02	; 2
    36c8:	86 81       	ldd	r24, Z+6	; 0x06
				desired_data.desired_co2=(_downlink_payload.bytes[4] << 8) + _downlink_payload.bytes[5];
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	98 2f       	mov	r25, r24
    36ce:	88 27       	eor	r24, r24
    36d0:	27 81       	ldd	r18, Z+7	; 0x07
    36d2:	82 0f       	add	r24, r18
    36d4:	91 1d       	adc	r25, r1
    36d6:	15 96       	adiw	r26, 0x05	; 5
    36d8:	9c 93       	st	X, r25
    36da:	8e 93       	st	-X, r24
    36dc:	14 97       	sbiw	r26, 0x04	; 4
    36de:	80 85       	ldd	r24, Z+8	; 0x08
				desired_data.desired_light=(_downlink_payload.bytes[6] << 8) + _downlink_payload.bytes[7];
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	98 2f       	mov	r25, r24
    36e4:	88 27       	eor	r24, r24
    36e6:	21 85       	ldd	r18, Z+9	; 0x09
    36e8:	82 0f       	add	r24, r18
    36ea:	91 1d       	adc	r25, r1
    36ec:	17 96       	adiw	r26, 0x07	; 7
    36ee:	9c 93       	st	X, r25
    36f0:	8e 93       	st	-X, r24
    36f2:	16 97       	sbiw	r26, 0x06	; 6
    36f4:	00 e0       	ldi	r16, 0x00	; 0
				//printf("values received: %d, %d, %d, %d \n \n",desired_data.desired_temp,desired_data.desired_hum,desired_data.desired_co2,desired_data.desired_light);
			}	
		}
				
		xSemaphoreGive(hardware_semaphore);
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	a9 01       	movw	r20, r18
    36fc:	60 e0       	ldi	r22, 0x00	; 0
    36fe:	70 e0       	ldi	r23, 0x00	; 0
    3700:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <hardware_semaphore>
    3704:	90 91 fd 15 	lds	r25, 0x15FD	; 0x8015fd <hardware_semaphore+0x1>
    3708:	0e 94 83 05 	call	0xb06	; 0xb06 <xQueueGenericSend>
    370c:	7a cf       	rjmp	.-268    	; 0x3602 <lora_handler_task+0x38>

0000370e <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    370e:	81 b1       	in	r24, 0x01	; 1
    3710:	81 68       	ori	r24, 0x81	; 129
    3712:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <stdio_initialise>
	
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    371a:	85 e0       	ldi	r24, 0x05	; 5
    371c:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <status_leds_initialise>

	downlink_buffer = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3720:	41 e0       	ldi	r20, 0x01	; 1
    3722:	60 e0       	ldi	r22, 0x00	; 0
    3724:	70 e0       	ldi	r23, 0x00	; 0
    3726:	8c e2       	ldi	r24, 0x2C	; 44
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	0e 94 0d 09 	call	0x121a	; 0x121a <xStreamBufferGenericCreate>
    372e:	90 93 eb 15 	sts	0x15EB, r25	; 0x8015eb <downlink_buffer+0x1>
    3732:	80 93 ea 15 	sts	0x15EA, r24	; 0x8015ea <downlink_buffer>
	lora_driver_initialise(ser_USART1, downlink_buffer);
    3736:	bc 01       	movw	r22, r24
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	c4 d2       	rcall	.+1416   	; 0x3cc4 <lora_driver_initialise>
	//lora_handler_initialise(3);
	
	entry_data.co2 =0;
    373c:	ec ee       	ldi	r30, 0xEC	; 236
    373e:	f5 e1       	ldi	r31, 0x15	; 21
    3740:	15 82       	std	Z+5, r1	; 0x05
    3742:	14 82       	std	Z+4, r1	; 0x04
	entry_data.humidity=0;
    3744:	13 82       	std	Z+3, r1	; 0x03
    3746:	12 82       	std	Z+2, r1	; 0x02
	entry_data.light=0;
    3748:	17 82       	std	Z+7, r1	; 0x07
    374a:	16 82       	std	Z+6, r1	; 0x06
	entry_data.temperature=0;
    374c:	11 82       	std	Z+1, r1	; 0x01
	
	//temp&hum
	int returnCode = hih8120_initialise();
    374e:	10 82       	st	Z, r1
    3750:	17 d1       	rcall	.+558    	; 0x3980 <hih8120_initialise>
	if(HIH8120_OK!=returnCode){
    3752:	88 23       	and	r24, r24
    3754:	69 f0       	breq	.+26     	; 0x3770 <initialiseSystem+0x62>
		printf("HIH8120 initialize error %d \n",returnCode);
    3756:	1f 92       	push	r1
    3758:	8f 93       	push	r24
    375a:	89 ef       	ldi	r24, 0xF9	; 249
    375c:	93 e0       	ldi	r25, 0x03	; 3
    375e:	9f 93       	push	r25
    3760:	8f 93       	push	r24
    3762:	0e 94 77 2e 	call	0x5cee	; 0x5cee <printf>
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	04 c0       	rjmp	.+8      	; 0x3778 <initialiseSystem+0x6a>
		}
		else {
		puts("Humidity and Temperature driver initialized");
    3770:	87 e1       	ldi	r24, 0x17	; 23
    3772:	94 e0       	ldi	r25, 0x04	; 4
    3774:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <puts>
	}
	
	//co2
	mh_z19_initialise(ser_USART3);
    3778:	83 e0       	ldi	r24, 0x03	; 3
	mh_z19_injectCallBack(co2Callback);
    377a:	4b d6       	rcall	.+3222   	; 0x4412 <mh_z19_initialise>
    377c:	85 e2       	ldi	r24, 0x25	; 37
    377e:	91 e0       	ldi	r25, 0x01	; 1
    3780:	6d d6       	rcall	.+3290   	; 0x445c <mh_z19_injectCallBack>
	puts("Co2 driver started \n");
    3782:	83 e4       	ldi	r24, 0x43	; 67
    3784:	94 e0       	ldi	r25, 0x04	; 4
    3786:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <puts>
	
	//light 
	returnCode = tsl2591_initialise(lightCallback);
    378a:	87 ee       	ldi	r24, 0xE7	; 231
    378c:	99 e1       	ldi	r25, 0x19	; 25
    378e:	0e 94 28 28 	call	0x5050	; 0x5050 <tsl2591_initialise>

	if (returnCode != TSL2591_OK) {
    3792:	88 23       	and	r24, r24
    3794:	69 f0       	breq	.+26     	; 0x37b0 <initialiseSystem+0xa2>
		printf("TSL2591 initialize error %d \n", returnCode);
    3796:	1f 92       	push	r1
    3798:	8f 93       	push	r24
    379a:	88 e5       	ldi	r24, 0x58	; 88
    379c:	94 e0       	ldi	r25, 0x04	; 4
    379e:	9f 93       	push	r25
    37a0:	8f 93       	push	r24
    37a2:	0e 94 77 2e 	call	0x5cee	; 0x5cee <printf>
    37a6:	0f 90       	pop	r0
    37a8:	0f 90       	pop	r0
    37aa:	0f 90       	pop	r0
    37ac:	0f 90       	pop	r0
    37ae:	04 c0       	rjmp	.+8      	; 0x37b8 <initialiseSystem+0xaa>
	}
	else {
		puts("Light driver initialized");
    37b0:	86 e7       	ldi	r24, 0x76	; 118
    37b2:	94 e0       	ldi	r25, 0x04	; 4
    37b4:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <puts>
	}

	//enable light sensor
	returnCode = tsl2591_enable();
    37b8:	0e 94 43 28 	call	0x5086	; 0x5086 <tsl2591_enable>
	if (returnCode != TSL2591_OK) {
    37bc:	88 23       	and	r24, r24
    37be:	61 f0       	breq	.+24     	; 0x37d8 <initialiseSystem+0xca>
		printf("Failed to enable light sensor %d\n", returnCode);
    37c0:	1f 92       	push	r1
    37c2:	8f 93       	push	r24
    37c4:	8f e8       	ldi	r24, 0x8F	; 143
    37c6:	94 e0       	ldi	r25, 0x04	; 4
    37c8:	9f 93       	push	r25
    37ca:	8f 93       	push	r24
    37cc:	0e 94 77 2e 	call	0x5cee	; 0x5cee <printf>
    37d0:	0f 90       	pop	r0
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
	}
	
	//initialise servo
	rc_servo_initialise();
    37d6:	0f 90       	pop	r0
    37d8:	8d c6       	rjmp	.+3354   	; 0x44f4 <rc_servo_initialise>
    37da:	08 95       	ret

000037dc <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    37dc:	98 df       	rcall	.-208    	; 0x370e <initialiseSystem>
	
	
	xTaskCreate(lora_handler_task,  "Lora task",  configMINIMAL_STACK_SIZE+200, NULL, 3 , NULL );
    37de:	e1 2c       	mov	r14, r1
    37e0:	f1 2c       	mov	r15, r1
    37e2:	03 e0       	ldi	r16, 0x03	; 3
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	48 e8       	ldi	r20, 0x88	; 136
    37ea:	51 e0       	ldi	r21, 0x01	; 1
    37ec:	61 eb       	ldi	r22, 0xB1	; 177
    37ee:	74 e0       	ldi	r23, 0x04	; 4
    37f0:	85 ee       	ldi	r24, 0xE5	; 229
    37f2:	9a e1       	ldi	r25, 0x1A	; 26
    37f4:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <xTaskCreate>
	xTaskCreate(tempAndHumidityTask, "temp&hum task", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    37f8:	01 e0       	ldi	r16, 0x01	; 1
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	40 ec       	ldi	r20, 0xC0	; 192
    3800:	50 e0       	ldi	r21, 0x00	; 0
    3802:	6b eb       	ldi	r22, 0xBB	; 187
    3804:	74 e0       	ldi	r23, 0x04	; 4
    3806:	8a e6       	ldi	r24, 0x6A	; 106
    3808:	99 e1       	ldi	r25, 0x19	; 25
    380a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <xTaskCreate>
	xTaskCreate(co2Task, "co2 task", configMINIMAL_STACK_SIZE, NULL,1,NULL);
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	40 ec       	ldi	r20, 0xC0	; 192
    3814:	50 e0       	ldi	r21, 0x00	; 0
    3816:	69 ec       	ldi	r22, 0xC9	; 201
    3818:	74 e0       	ldi	r23, 0x04	; 4
    381a:	88 e0       	ldi	r24, 0x08	; 8
    381c:	91 e0       	ldi	r25, 0x01	; 1
    381e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <xTaskCreate>
	xTaskCreate(lightTask,"light task",configMINIMAL_STACK_SIZE,NULL,1,NULL);
    3822:	20 e0       	ldi	r18, 0x00	; 0
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	40 ec       	ldi	r20, 0xC0	; 192
    3828:	50 e0       	ldi	r21, 0x00	; 0
    382a:	62 ed       	ldi	r22, 0xD2	; 210
    382c:	74 e0       	ldi	r23, 0x04	; 4
    382e:	8a ec       	ldi	r24, 0xCA	; 202
    3830:	99 e1       	ldi	r25, 0x19	; 25
    3832:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <xTaskCreate>
	xTaskCreate(humMotorTask, "Humidity motor Task", configMINIMAL_STACK_SIZE + 200, NULL, 2, NULL);
    3836:	02 e0       	ldi	r16, 0x02	; 2
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	48 e8       	ldi	r20, 0x88	; 136
    383e:	51 e0       	ldi	r21, 0x01	; 1
    3840:	6d ed       	ldi	r22, 0xDD	; 221
    3842:	74 e0       	ldi	r23, 0x04	; 4
    3844:	85 e3       	ldi	r24, 0x35	; 53
    3846:	99 e1       	ldi	r25, 0x19	; 25
    3848:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <xTaskCreate>
	
	hardware_semaphore = xSemaphoreCreateMutex();
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	0e 94 27 06 	call	0xc4e	; 0xc4e <xQueueCreateMutex>
    3852:	90 93 fd 15 	sts	0x15FD, r25	; 0x8015fd <hardware_semaphore+0x1>
    3856:	80 93 fc 15 	sts	0x15FC, r24	; 0x8015fc <hardware_semaphore>
	if((hardware_semaphore)!=NULL){
    385a:	00 97       	sbiw	r24, 0x00	; 0
    385c:	41 f0       	breq	.+16     	; 0x386e <main+0x92>
		xSemaphoreGive((hardware_semaphore));
    385e:	00 e0       	ldi	r16, 0x00	; 0
    3860:	20 e0       	ldi	r18, 0x00	; 0
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	a9 01       	movw	r20, r18
    3866:	60 e0       	ldi	r22, 0x00	; 0
    3868:	70 e0       	ldi	r23, 0x00	; 0
    386a:	0e 94 83 05 	call	0xb06	; 0xb06 <xQueueGenericSend>
	}
	
	printf("Program Started!!\n");
    386e:	81 ef       	ldi	r24, 0xF1	; 241
    3870:	94 e0       	ldi	r25, 0x04	; 4
    3872:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <puts>
	vTaskStartScheduler(); 
    3876:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <vTaskStartScheduler>
    387a:	ff cf       	rjmp	.-2      	; 0x387a <main+0x9e>

0000387c <__fixunssfsi>:
    387c:	33 d0       	rcall	.+102    	; 0x38e4 <__fp_splitA>
    387e:	88 f0       	brcs	.+34     	; 0x38a2 <__fixunssfsi+0x26>
    3880:	9f 57       	subi	r25, 0x7F	; 127
    3882:	90 f0       	brcs	.+36     	; 0x38a8 <__fixunssfsi+0x2c>
    3884:	b9 2f       	mov	r27, r25
    3886:	99 27       	eor	r25, r25
    3888:	b7 51       	subi	r27, 0x17	; 23
    388a:	a0 f0       	brcs	.+40     	; 0x38b4 <__fixunssfsi+0x38>
    388c:	d1 f0       	breq	.+52     	; 0x38c2 <__fixunssfsi+0x46>
    388e:	66 0f       	add	r22, r22
    3890:	77 1f       	adc	r23, r23
    3892:	88 1f       	adc	r24, r24
    3894:	99 1f       	adc	r25, r25
    3896:	1a f0       	brmi	.+6      	; 0x389e <__fixunssfsi+0x22>
    3898:	ba 95       	dec	r27
    389a:	c9 f7       	brne	.-14     	; 0x388e <__fixunssfsi+0x12>
    389c:	12 c0       	rjmp	.+36     	; 0x38c2 <__fixunssfsi+0x46>
    389e:	b1 30       	cpi	r27, 0x01	; 1
    38a0:	81 f0       	breq	.+32     	; 0x38c2 <__fixunssfsi+0x46>
    38a2:	3a d0       	rcall	.+116    	; 0x3918 <__fp_zero>
    38a4:	b1 e0       	ldi	r27, 0x01	; 1
    38a6:	08 95       	ret
    38a8:	37 c0       	rjmp	.+110    	; 0x3918 <__fp_zero>
    38aa:	67 2f       	mov	r22, r23
    38ac:	78 2f       	mov	r23, r24
    38ae:	88 27       	eor	r24, r24
    38b0:	b8 5f       	subi	r27, 0xF8	; 248
    38b2:	39 f0       	breq	.+14     	; 0x38c2 <__fixunssfsi+0x46>
    38b4:	b9 3f       	cpi	r27, 0xF9	; 249
    38b6:	cc f3       	brlt	.-14     	; 0x38aa <__fixunssfsi+0x2e>
    38b8:	86 95       	lsr	r24
    38ba:	77 95       	ror	r23
    38bc:	67 95       	ror	r22
    38be:	b3 95       	inc	r27
    38c0:	d9 f7       	brne	.-10     	; 0x38b8 <__fixunssfsi+0x3c>
    38c2:	3e f4       	brtc	.+14     	; 0x38d2 <__fixunssfsi+0x56>
    38c4:	90 95       	com	r25
    38c6:	80 95       	com	r24
    38c8:	70 95       	com	r23
    38ca:	61 95       	neg	r22
    38cc:	7f 4f       	sbci	r23, 0xFF	; 255
    38ce:	8f 4f       	sbci	r24, 0xFF	; 255
    38d0:	9f 4f       	sbci	r25, 0xFF	; 255
    38d2:	08 95       	ret

000038d4 <__fp_split3>:
    38d4:	57 fd       	sbrc	r21, 7
    38d6:	90 58       	subi	r25, 0x80	; 128
    38d8:	44 0f       	add	r20, r20
    38da:	55 1f       	adc	r21, r21
    38dc:	59 f0       	breq	.+22     	; 0x38f4 <__fp_splitA+0x10>
    38de:	5f 3f       	cpi	r21, 0xFF	; 255
    38e0:	71 f0       	breq	.+28     	; 0x38fe <__fp_splitA+0x1a>
    38e2:	47 95       	ror	r20

000038e4 <__fp_splitA>:
    38e4:	88 0f       	add	r24, r24
    38e6:	97 fb       	bst	r25, 7
    38e8:	99 1f       	adc	r25, r25
    38ea:	61 f0       	breq	.+24     	; 0x3904 <__fp_splitA+0x20>
    38ec:	9f 3f       	cpi	r25, 0xFF	; 255
    38ee:	79 f0       	breq	.+30     	; 0x390e <__fp_splitA+0x2a>
    38f0:	87 95       	ror	r24
    38f2:	08 95       	ret
    38f4:	12 16       	cp	r1, r18
    38f6:	13 06       	cpc	r1, r19
    38f8:	14 06       	cpc	r1, r20
    38fa:	55 1f       	adc	r21, r21
    38fc:	f2 cf       	rjmp	.-28     	; 0x38e2 <__fp_split3+0xe>
    38fe:	46 95       	lsr	r20
    3900:	f1 df       	rcall	.-30     	; 0x38e4 <__fp_splitA>
    3902:	08 c0       	rjmp	.+16     	; 0x3914 <__fp_splitA+0x30>
    3904:	16 16       	cp	r1, r22
    3906:	17 06       	cpc	r1, r23
    3908:	18 06       	cpc	r1, r24
    390a:	99 1f       	adc	r25, r25
    390c:	f1 cf       	rjmp	.-30     	; 0x38f0 <__fp_splitA+0xc>
    390e:	86 95       	lsr	r24
    3910:	71 05       	cpc	r23, r1
    3912:	61 05       	cpc	r22, r1
    3914:	08 94       	sec
    3916:	08 95       	ret

00003918 <__fp_zero>:
    3918:	e8 94       	clt

0000391a <__fp_szero>:
    391a:	bb 27       	eor	r27, r27
    391c:	66 27       	eor	r22, r22
    391e:	77 27       	eor	r23, r23
    3920:	cb 01       	movw	r24, r22
    3922:	97 f9       	bld	r25, 7
    3924:	08 95       	ret

00003926 <_hihTwiCallback>:
    3926:	65 30       	cpi	r22, 0x05	; 5
    3928:	f1 f4       	brne	.+60     	; 0x3966 <_hihTwiCallback+0x40>
    392a:	fa 01       	movw	r30, r20
    392c:	80 81       	ld	r24, Z
    392e:	8f 73       	andi	r24, 0x3F	; 63
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	98 2f       	mov	r25, r24
    3934:	88 27       	eor	r24, r24
    3936:	21 81       	ldd	r18, Z+1	; 0x01
    3938:	82 2b       	or	r24, r18
    393a:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    393e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3942:	82 81       	ldd	r24, Z+2	; 0x02
    3944:	f0 e4       	ldi	r31, 0x40	; 64
    3946:	8f 9f       	mul	r24, r31
    3948:	c0 01       	movw	r24, r0
    394a:	11 24       	eor	r1, r1
    394c:	fa 01       	movw	r30, r20
    394e:	23 81       	ldd	r18, Z+3	; 0x03
    3950:	26 95       	lsr	r18
    3952:	26 95       	lsr	r18
    3954:	82 2b       	or	r24, r18
    3956:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    395a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    395e:	81 e0       	ldi	r24, 0x01	; 1
    3960:	80 93 af 14 	sts	0x14AF, r24	; 0x8014af <_measuringIsReady>
    3964:	08 95       	ret
    3966:	64 30       	cpi	r22, 0x04	; 4
    3968:	51 f0       	breq	.+20     	; 0x397e <_hihTwiCallback+0x58>
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	90 e4       	ldi	r25, 0x40	; 64
    396e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3972:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3976:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    397a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    397e:	08 95       	ret

00003980 <hih8120_initialise>:
    3980:	0f 93       	push	r16
    3982:	1f 93       	push	r17
    3984:	03 e9       	ldi	r16, 0x93	; 147
    3986:	1c e1       	ldi	r17, 0x1C	; 28
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	34 e2       	ldi	r19, 0x24	; 36
    398c:	44 ef       	ldi	r20, 0xF4	; 244
    398e:	50 e0       	ldi	r21, 0x00	; 0
    3990:	60 e0       	ldi	r22, 0x00	; 0
    3992:	87 e2       	ldi	r24, 0x27	; 39
    3994:	0e 94 54 29 	call	0x52a8	; 0x52a8 <twiCreate>
    3998:	90 93 b1 14 	sts	0x14B1, r25	; 0x8014b1 <_hih8120Handler+0x1>
    399c:	80 93 b0 14 	sts	0x14B0, r24	; 0x8014b0 <_hih8120Handler>
    39a0:	21 e0       	ldi	r18, 0x01	; 1
    39a2:	89 2b       	or	r24, r25
    39a4:	09 f0       	breq	.+2      	; 0x39a8 <hih8120_initialise+0x28>
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	82 2f       	mov	r24, r18
    39aa:	1f 91       	pop	r17
    39ac:	0f 91       	pop	r16
    39ae:	08 95       	ret

000039b0 <hih8120_wakeup>:
    39b0:	80 91 b0 14 	lds	r24, 0x14B0	; 0x8014b0 <_hih8120Handler>
    39b4:	90 91 b1 14 	lds	r25, 0x14B1	; 0x8014b1 <_hih8120Handler+0x1>
    39b8:	00 97       	sbiw	r24, 0x00	; 0
    39ba:	59 f0       	breq	.+22     	; 0x39d2 <hih8120_wakeup+0x22>
    39bc:	40 e0       	ldi	r20, 0x00	; 0
    39be:	60 e0       	ldi	r22, 0x00	; 0
    39c0:	70 e0       	ldi	r23, 0x00	; 0
    39c2:	0e 94 a5 29 	call	0x534a	; 0x534a <twiTransmit>
    39c6:	84 30       	cpi	r24, 0x04	; 4
    39c8:	31 f4       	brne	.+12     	; 0x39d6 <hih8120_wakeup+0x26>
    39ca:	10 92 af 14 	sts	0x14AF, r1	; 0x8014af <_measuringIsReady>
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	08 95       	ret
    39d2:	82 e0       	ldi	r24, 0x02	; 2
    39d4:	08 95       	ret
    39d6:	83 e0       	ldi	r24, 0x03	; 3
    39d8:	08 95       	ret

000039da <hih8120_measure>:
    39da:	80 91 b0 14 	lds	r24, 0x14B0	; 0x8014b0 <_hih8120Handler>
    39de:	90 91 b1 14 	lds	r25, 0x14B1	; 0x8014b1 <_hih8120Handler+0x1>
    39e2:	00 97       	sbiw	r24, 0x00	; 0
    39e4:	39 f0       	breq	.+14     	; 0x39f4 <hih8120_measure+0x1a>
    39e6:	64 e0       	ldi	r22, 0x04	; 4
    39e8:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <twiReceive>
    39ec:	85 30       	cpi	r24, 0x05	; 5
    39ee:	21 f0       	breq	.+8      	; 0x39f8 <hih8120_measure+0x1e>
    39f0:	83 e0       	ldi	r24, 0x03	; 3
    39f2:	08 95       	ret
    39f4:	82 e0       	ldi	r24, 0x02	; 2
    39f6:	08 95       	ret
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    39fa:	08 95       	ret

000039fc <hih8120_getHumidity>:
    39fc:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3a00:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3a04:	80 e0       	ldi	r24, 0x00	; 0
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__floatunsisf>
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	48 ec       	ldi	r20, 0xC8	; 200
    3a12:	52 e4       	ldi	r21, 0x42	; 66
    3a14:	0e 94 3f 2c 	call	0x587e	; 0x587e <__mulsf3>
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	38 ef       	ldi	r19, 0xF8	; 248
    3a1c:	4f e7       	ldi	r20, 0x7F	; 127
    3a1e:	56 e4       	ldi	r21, 0x46	; 70
    3a20:	0c 94 64 2b 	jmp	0x56c8	; 0x56c8 <__divsf3>
    3a24:	08 95       	ret

00003a26 <hih8120_getHumidityPercent_x10>:
    3a26:	ea df       	rcall	.-44     	; 0x39fc <hih8120_getHumidity>
    3a28:	20 e0       	ldi	r18, 0x00	; 0
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	40 e2       	ldi	r20, 0x20	; 32
    3a2e:	51 e4       	ldi	r21, 0x41	; 65
    3a30:	0e 94 3f 2c 	call	0x587e	; 0x587e <__mulsf3>
    3a34:	23 df       	rcall	.-442    	; 0x387c <__fixunssfsi>
    3a36:	cb 01       	movw	r24, r22
    3a38:	08 95       	ret

00003a3a <hih8120_getTemperature>:
    3a3a:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3a3e:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3a42:	80 e0       	ldi	r24, 0x00	; 0
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__floatunsisf>
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	45 e2       	ldi	r20, 0x25	; 37
    3a50:	53 e4       	ldi	r21, 0x43	; 67
    3a52:	0e 94 3f 2c 	call	0x587e	; 0x587e <__mulsf3>
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	38 ef       	ldi	r19, 0xF8	; 248
    3a5a:	4f e7       	ldi	r20, 0x7F	; 127
    3a5c:	56 e4       	ldi	r21, 0x46	; 70
    3a5e:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <__divsf3>
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	40 e2       	ldi	r20, 0x20	; 32
    3a68:	52 e4       	ldi	r21, 0x42	; 66
    3a6a:	0c 94 fd 2a 	jmp	0x55fa	; 0x55fa <__subsf3>
    3a6e:	08 95       	ret

00003a70 <hih8120_getTemperature_x10>:
    3a70:	e4 df       	rcall	.-56     	; 0x3a3a <hih8120_getTemperature>
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	40 e2       	ldi	r20, 0x20	; 32
    3a78:	51 e4       	ldi	r21, 0x41	; 65
    3a7a:	0e 94 3f 2c 	call	0x587e	; 0x587e <__mulsf3>
    3a7e:	0e 94 cf 2b 	call	0x579e	; 0x579e <__fixsfsi>
    3a82:	cb 01       	movw	r24, r22
    3a84:	08 95       	ret

00003a86 <_serialCallBack>:
    3a86:	0f 93       	push	r16
    3a88:	1f 93       	push	r17
    3a8a:	cf 93       	push	r28
    3a8c:	df 93       	push	r29
    3a8e:	1f 92       	push	r1
    3a90:	1f 92       	push	r1
    3a92:	cd b7       	in	r28, 0x3d	; 61
    3a94:	de b7       	in	r29, 0x3e	; 62
    3a96:	8c 01       	movw	r16, r24
    3a98:	19 82       	std	Y+1, r1	; 0x01
    3a9a:	2d c0       	rjmp	.+90     	; 0x3af6 <_serialCallBack+0x70>
    3a9c:	e0 91 e9 14 	lds	r30, 0x14E9	; 0x8014e9 <rec_buf_inp.2878>
    3aa0:	ec 32       	cpi	r30, 0x2C	; 44
    3aa2:	50 f4       	brcc	.+20     	; 0x3ab8 <_serialCallBack+0x32>
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	8e 0f       	add	r24, r30
    3aa8:	80 93 e9 14 	sts	0x14E9, r24	; 0x8014e9 <rec_buf_inp.2878>
    3aac:	f0 e0       	ldi	r31, 0x00	; 0
    3aae:	e5 5e       	subi	r30, 0xE5	; 229
    3ab0:	fa 4e       	sbci	r31, 0xEA	; 234
    3ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab4:	80 83       	st	Z, r24
    3ab6:	02 c0       	rjmp	.+4      	; 0x3abc <_serialCallBack+0x36>
    3ab8:	10 92 e9 14 	sts	0x14E9, r1	; 0x8014e9 <rec_buf_inp.2878>
    3abc:	8a 81       	ldd	r24, Y+2	; 0x02
    3abe:	8a 30       	cpi	r24, 0x0A	; 10
    3ac0:	d1 f4       	brne	.+52     	; 0x3af6 <_serialCallBack+0x70>
    3ac2:	40 91 e9 14 	lds	r20, 0x14E9	; 0x8014e9 <rec_buf_inp.2878>
    3ac6:	50 e0       	ldi	r21, 0x00	; 0
    3ac8:	fa 01       	movw	r30, r20
    3aca:	e7 5e       	subi	r30, 0xE7	; 231
    3acc:	fa 4e       	sbci	r31, 0xEA	; 234
    3ace:	10 82       	st	Z, r1
    3ad0:	41 50       	subi	r20, 0x01	; 1
    3ad2:	51 09       	sbc	r21, r1
    3ad4:	9e 01       	movw	r18, r28
    3ad6:	2f 5f       	subi	r18, 0xFF	; 255
    3ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    3ada:	6b e1       	ldi	r22, 0x1B	; 27
    3adc:	75 e1       	ldi	r23, 0x15	; 21
    3ade:	80 91 ec 14 	lds	r24, 0x14EC	; 0x8014ec <_serialReplyBufferHandle>
    3ae2:	90 91 ed 14 	lds	r25, 0x14ED	; 0x8014ed <_serialReplyBufferHandle+0x1>
    3ae6:	0e 94 32 0a 	call	0x1464	; 0x1464 <xStreamBufferSendFromISR>
    3aea:	89 81       	ldd	r24, Y+1	; 0x01
    3aec:	81 11       	cpse	r24, r1
    3aee:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vPortYield>
    3af2:	10 92 e9 14 	sts	0x14E9, r1	; 0x8014e9 <rec_buf_inp.2878>
    3af6:	be 01       	movw	r22, r28
    3af8:	6e 5f       	subi	r22, 0xFE	; 254
    3afa:	7f 4f       	sbci	r23, 0xFF	; 255
    3afc:	c8 01       	movw	r24, r16
    3afe:	3b d6       	rcall	.+3190   	; 0x4776 <serial_getByte>
    3b00:	88 23       	and	r24, r24
    3b02:	61 f2       	breq	.-104    	; 0x3a9c <_serialCallBack+0x16>
    3b04:	0f 90       	pop	r0
    3b06:	0f 90       	pop	r0
    3b08:	df 91       	pop	r29
    3b0a:	cf 91       	pop	r28
    3b0c:	1f 91       	pop	r17
    3b0e:	0f 91       	pop	r16
    3b10:	08 95       	ret

00003b12 <_uploadMessage>:
    3b12:	0f 93       	push	r16
    3b14:	1f 93       	push	r17
    3b16:	cf 93       	push	r28
    3b18:	df 93       	push	r29
    3b1a:	8c 01       	movw	r16, r24
    3b1c:	eb 01       	movw	r28, r22
    3b1e:	80 91 ec 14 	lds	r24, 0x14EC	; 0x8014ec <_serialReplyBufferHandle>
    3b22:	90 91 ed 14 	lds	r25, 0x14ED	; 0x8014ed <_serialReplyBufferHandle+0x1>
    3b26:	0e 94 3f 09 	call	0x127e	; 0x127e <xStreamBufferReset>
    3b2a:	b8 01       	movw	r22, r16
    3b2c:	82 eb       	ldi	r24, 0xB2	; 178
    3b2e:	94 e1       	ldi	r25, 0x14	; 20
    3b30:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <strcpy>
    3b34:	20 97       	sbiw	r28, 0x00	; 0
    3b36:	79 f0       	breq	.+30     	; 0x3b56 <_uploadMessage+0x44>
    3b38:	e2 eb       	ldi	r30, 0xB2	; 178
    3b3a:	f4 e1       	ldi	r31, 0x14	; 20
    3b3c:	01 90       	ld	r0, Z+
    3b3e:	00 20       	and	r0, r0
    3b40:	e9 f7       	brne	.-6      	; 0x3b3c <_uploadMessage+0x2a>
    3b42:	31 97       	sbiw	r30, 0x01	; 1
    3b44:	80 e2       	ldi	r24, 0x20	; 32
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	91 83       	std	Z+1, r25	; 0x01
    3b4a:	80 83       	st	Z, r24
    3b4c:	be 01       	movw	r22, r28
    3b4e:	82 eb       	ldi	r24, 0xB2	; 178
    3b50:	94 e1       	ldi	r25, 0x14	; 20
    3b52:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <strcat>
    3b56:	e2 eb       	ldi	r30, 0xB2	; 178
    3b58:	f4 e1       	ldi	r31, 0x14	; 20
    3b5a:	df 01       	movw	r26, r30
    3b5c:	0d 90       	ld	r0, X+
    3b5e:	00 20       	and	r0, r0
    3b60:	e9 f7       	brne	.-6      	; 0x3b5c <_uploadMessage+0x4a>
    3b62:	11 97       	sbiw	r26, 0x01	; 1
    3b64:	8d e0       	ldi	r24, 0x0D	; 13
    3b66:	9a e0       	ldi	r25, 0x0A	; 10
    3b68:	11 96       	adiw	r26, 0x01	; 1
    3b6a:	9c 93       	st	X, r25
    3b6c:	8e 93       	st	-X, r24
    3b6e:	12 96       	adiw	r26, 0x02	; 2
    3b70:	1c 92       	st	X, r1
    3b72:	01 90       	ld	r0, Z+
    3b74:	00 20       	and	r0, r0
    3b76:	e9 f7       	brne	.-6      	; 0x3b72 <_uploadMessage+0x60>
    3b78:	31 97       	sbiw	r30, 0x01	; 1
    3b7a:	e2 5b       	subi	r30, 0xB2	; 178
    3b7c:	f4 41       	sbci	r31, 0x14	; 20
    3b7e:	ae 2f       	mov	r26, r30
    3b80:	82 eb       	ldi	r24, 0xB2	; 178
    3b82:	94 e1       	ldi	r25, 0x14	; 20
    3b84:	ac 01       	movw	r20, r24
    3b86:	6a 2f       	mov	r22, r26
    3b88:	80 91 ee 14 	lds	r24, 0x14EE	; 0x8014ee <_rn2483_serial>
    3b8c:	90 91 ef 14 	lds	r25, 0x14EF	; 0x8014ef <_rn2483_serial+0x1>
    3b90:	9d d5       	rcall	.+2874   	; 0x46cc <serial_sendBytes>
    3b92:	81 11       	cpse	r24, r1
    3b94:	11 c0       	rjmp	.+34     	; 0x3bb8 <_uploadMessage+0xa6>
    3b96:	08 e2       	ldi	r16, 0x28	; 40
    3b98:	15 e0       	ldi	r17, 0x05	; 5
    3b9a:	20 e0       	ldi	r18, 0x00	; 0
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	4d e2       	ldi	r20, 0x2D	; 45
    3ba0:	50 e0       	ldi	r21, 0x00	; 0
    3ba2:	65 e7       	ldi	r22, 0x75	; 117
    3ba4:	75 e1       	ldi	r23, 0x15	; 21
    3ba6:	80 91 ec 14 	lds	r24, 0x14EC	; 0x8014ec <_serialReplyBufferHandle>
    3baa:	90 91 ed 14 	lds	r25, 0x14ED	; 0x8014ed <_serialReplyBufferHandle+0x1>
    3bae:	0e 94 76 0a 	call	0x14ec	; 0x14ec <xStreamBufferReceive>
    3bb2:	85 e7       	ldi	r24, 0x75	; 117
    3bb4:	95 e1       	ldi	r25, 0x15	; 21
    3bb6:	02 c0       	rjmp	.+4      	; 0x3bbc <_uploadMessage+0xaa>
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	df 91       	pop	r29
    3bbe:	cf 91       	pop	r28
    3bc0:	1f 91       	pop	r17
    3bc2:	0f 91       	pop	r16
    3bc4:	08 95       	ret

00003bc6 <_reply2ReturnCode>:
    3bc6:	2f 92       	push	r2
    3bc8:	3f 92       	push	r3
    3bca:	4f 92       	push	r4
    3bcc:	5f 92       	push	r5
    3bce:	6f 92       	push	r6
    3bd0:	7f 92       	push	r7
    3bd2:	8f 92       	push	r8
    3bd4:	9f 92       	push	r9
    3bd6:	af 92       	push	r10
    3bd8:	bf 92       	push	r11
    3bda:	cf 92       	push	r12
    3bdc:	df 92       	push	r13
    3bde:	ef 92       	push	r14
    3be0:	ff 92       	push	r15
    3be2:	0f 93       	push	r16
    3be4:	1f 93       	push	r17
    3be6:	cf 93       	push	r28
    3be8:	df 93       	push	r29
    3bea:	5c 01       	movw	r10, r24
    3bec:	fc 01       	movw	r30, r24
    3bee:	01 90       	ld	r0, Z+
    3bf0:	00 20       	and	r0, r0
    3bf2:	e9 f7       	brne	.-6      	; 0x3bee <_reply2ReturnCode+0x28>
    3bf4:	31 97       	sbiw	r30, 0x01	; 1
    3bf6:	6f 01       	movw	r12, r30
    3bf8:	c8 1a       	sub	r12, r24
    3bfa:	d9 0a       	sbc	r13, r25
    3bfc:	5c 2c       	mov	r5, r12
    3bfe:	0f 2e       	mov	r0, r31
    3c00:	fc e9       	ldi	r31, 0x9C	; 156
    3c02:	8f 2e       	mov	r8, r31
    3c04:	f7 e0       	ldi	r31, 0x07	; 7
    3c06:	9f 2e       	mov	r9, r31
    3c08:	f0 2d       	mov	r31, r0
    3c0a:	e1 2c       	mov	r14, r1
    3c0c:	f1 2c       	mov	r15, r1
    3c0e:	4c 2c       	mov	r4, r12
    3c10:	37 01       	movw	r6, r14
    3c12:	f4 01       	movw	r30, r8
    3c14:	01 81       	ldd	r16, Z+1	; 0x01
    3c16:	12 81       	ldd	r17, Z+2	; 0x02
    3c18:	e8 01       	movw	r28, r16
    3c1a:	09 90       	ld	r0, Y+
    3c1c:	00 20       	and	r0, r0
    3c1e:	e9 f7       	brne	.-6      	; 0x3c1a <_reply2ReturnCode+0x54>
    3c20:	21 97       	sbiw	r28, 0x01	; 1
    3c22:	c0 1b       	sub	r28, r16
    3c24:	d1 0b       	sbc	r29, r17
    3c26:	3c 2e       	mov	r3, r28
    3c28:	f9 e0       	ldi	r31, 0x09	; 9
    3c2a:	cf 16       	cp	r12, r31
    3c2c:	d1 04       	cpc	r13, r1
    3c2e:	58 f0       	brcs	.+22     	; 0x3c46 <_reply2ReturnCode+0x80>
    3c30:	f4 01       	movw	r30, r8
    3c32:	20 80       	ld	r2, Z
    3c34:	fe e0       	ldi	r31, 0x0E	; 14
    3c36:	2f 12       	cpse	r2, r31
    3c38:	06 c0       	rjmp	.+12     	; 0x3c46 <_reply2ReturnCode+0x80>
    3c3a:	b8 01       	movw	r22, r16
    3c3c:	c5 01       	movw	r24, r10
    3c3e:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <strcasestr>
    3c42:	89 2b       	or	r24, r25
    3c44:	09 f5       	brne	.+66     	; 0x3c88 <_reply2ReturnCode+0xc2>
    3c46:	44 2d       	mov	r20, r4
    3c48:	35 14       	cp	r3, r5
    3c4a:	08 f4       	brcc	.+2      	; 0x3c4e <_reply2ReturnCode+0x88>
    3c4c:	4c 2f       	mov	r20, r28
    3c4e:	50 e0       	ldi	r21, 0x00	; 0
    3c50:	b8 01       	movw	r22, r16
    3c52:	c5 01       	movw	r24, r10
    3c54:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <strncasecmp>
    3c58:	89 2b       	or	r24, r25
    3c5a:	49 f4       	brne	.+18     	; 0x3c6e <_reply2ReturnCode+0xa8>
    3c5c:	f3 01       	movw	r30, r6
    3c5e:	ee 0f       	add	r30, r30
    3c60:	ff 1f       	adc	r31, r31
    3c62:	e6 0d       	add	r30, r6
    3c64:	f7 1d       	adc	r31, r7
    3c66:	e4 56       	subi	r30, 0x64	; 100
    3c68:	f8 4f       	sbci	r31, 0xF8	; 248
    3c6a:	20 80       	ld	r2, Z
    3c6c:	0d c0       	rjmp	.+26     	; 0x3c88 <_reply2ReturnCode+0xc2>
    3c6e:	8f ef       	ldi	r24, 0xFF	; 255
    3c70:	e8 1a       	sub	r14, r24
    3c72:	f8 0a       	sbc	r15, r24
    3c74:	e3 e0       	ldi	r30, 0x03	; 3
    3c76:	8e 0e       	add	r8, r30
    3c78:	91 1c       	adc	r9, r1
    3c7a:	f1 e1       	ldi	r31, 0x11	; 17
    3c7c:	ef 16       	cp	r14, r31
    3c7e:	f1 04       	cpc	r15, r1
    3c80:	39 f6       	brne	.-114    	; 0x3c10 <_reply2ReturnCode+0x4a>
    3c82:	68 94       	set
    3c84:	22 24       	eor	r2, r2
    3c86:	24 f8       	bld	r2, 4
    3c88:	82 2d       	mov	r24, r2
    3c8a:	df 91       	pop	r29
    3c8c:	cf 91       	pop	r28
    3c8e:	1f 91       	pop	r17
    3c90:	0f 91       	pop	r16
    3c92:	ff 90       	pop	r15
    3c94:	ef 90       	pop	r14
    3c96:	df 90       	pop	r13
    3c98:	cf 90       	pop	r12
    3c9a:	bf 90       	pop	r11
    3c9c:	af 90       	pop	r10
    3c9e:	9f 90       	pop	r9
    3ca0:	8f 90       	pop	r8
    3ca2:	7f 90       	pop	r7
    3ca4:	6f 90       	pop	r6
    3ca6:	5f 90       	pop	r5
    3ca8:	4f 90       	pop	r4
    3caa:	3f 90       	pop	r3
    3cac:	2f 90       	pop	r2
    3cae:	08 95       	ret

00003cb0 <_uploadMessageRc>:
    3cb0:	30 df       	rcall	.-416    	; 0x3b12 <_uploadMessage>
    3cb2:	89 cf       	rjmp	.-238    	; 0x3bc6 <_reply2ReturnCode>
    3cb4:	08 95       	ret

00003cb6 <lora_driver_flushBuffers>:
    3cb6:	80 91 ec 14 	lds	r24, 0x14EC	; 0x8014ec <_serialReplyBufferHandle>
    3cba:	90 91 ed 14 	lds	r25, 0x14ED	; 0x8014ed <_serialReplyBufferHandle+0x1>
    3cbe:	0c 94 3f 09 	jmp	0x127e	; 0x127e <xStreamBufferReset>
    3cc2:	08 95       	ret

00003cc4 <lora_driver_initialise>:
    3cc4:	8f 92       	push	r8
    3cc6:	9f 92       	push	r9
    3cc8:	af 92       	push	r10
    3cca:	cf 92       	push	r12
    3ccc:	ef 92       	push	r14
    3cce:	0f 93       	push	r16
    3cd0:	1f 93       	push	r17
    3cd2:	cf 93       	push	r28
    3cd4:	c8 2f       	mov	r28, r24
    3cd6:	8b 01       	movw	r16, r22
    3cd8:	41 e0       	ldi	r20, 0x01	; 1
    3cda:	60 e0       	ldi	r22, 0x00	; 0
    3cdc:	70 e0       	ldi	r23, 0x00	; 0
    3cde:	88 ec       	ldi	r24, 0xC8	; 200
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	0e 94 0d 09 	call	0x121a	; 0x121a <xStreamBufferGenericCreate>
    3ce6:	90 93 ed 14 	sts	0x14ED, r25	; 0x8014ed <_serialReplyBufferHandle+0x1>
    3cea:	80 93 ec 14 	sts	0x14EC, r24	; 0x8014ec <_serialReplyBufferHandle>
    3cee:	10 93 eb 14 	sts	0x14EB, r17	; 0x8014eb <_downlinkMessageBuffer+0x1>
    3cf2:	00 93 ea 14 	sts	0x14EA, r16	; 0x8014ea <_downlinkMessageBuffer>
    3cf6:	0f 2e       	mov	r0, r31
    3cf8:	f3 e4       	ldi	r31, 0x43	; 67
    3cfa:	8f 2e       	mov	r8, r31
    3cfc:	fd e1       	ldi	r31, 0x1D	; 29
    3cfe:	9f 2e       	mov	r9, r31
    3d00:	f0 2d       	mov	r31, r0
    3d02:	68 94       	set
    3d04:	aa 24       	eor	r10, r10
    3d06:	a6 f8       	bld	r10, 6
    3d08:	68 94       	set
    3d0a:	cc 24       	eor	r12, r12
    3d0c:	c6 f8       	bld	r12, 6
    3d0e:	e1 2c       	mov	r14, r1
    3d10:	00 e0       	ldi	r16, 0x00	; 0
    3d12:	23 e0       	ldi	r18, 0x03	; 3
    3d14:	40 e0       	ldi	r20, 0x00	; 0
    3d16:	51 ee       	ldi	r21, 0xE1	; 225
    3d18:	60 e0       	ldi	r22, 0x00	; 0
    3d1a:	70 e0       	ldi	r23, 0x00	; 0
    3d1c:	8c 2f       	mov	r24, r28
    3d1e:	06 d4       	rcall	.+2060   	; 0x452c <serial_create>
    3d20:	90 93 ef 14 	sts	0x14EF, r25	; 0x8014ef <_rn2483_serial+0x1>
    3d24:	80 93 ee 14 	sts	0x14EE, r24	; 0x8014ee <_rn2483_serial>
    3d28:	e7 e0       	ldi	r30, 0x07	; 7
    3d2a:	f1 e0       	ldi	r31, 0x01	; 1
    3d2c:	80 81       	ld	r24, Z
    3d2e:	80 61       	ori	r24, 0x10	; 16
    3d30:	80 83       	st	Z, r24
    3d32:	cf 91       	pop	r28
    3d34:	1f 91       	pop	r17
    3d36:	0f 91       	pop	r16
    3d38:	ef 90       	pop	r14
    3d3a:	cf 90       	pop	r12
    3d3c:	af 90       	pop	r10
    3d3e:	9f 90       	pop	r9
    3d40:	8f 90       	pop	r8
    3d42:	08 95       	ret

00003d44 <lora_driver_resetRn2483>:
    3d44:	88 23       	and	r24, r24
    3d46:	31 f0       	breq	.+12     	; 0x3d54 <lora_driver_resetRn2483+0x10>
    3d48:	e8 e0       	ldi	r30, 0x08	; 8
    3d4a:	f1 e0       	ldi	r31, 0x01	; 1
    3d4c:	80 81       	ld	r24, Z
    3d4e:	8f 7e       	andi	r24, 0xEF	; 239
    3d50:	80 83       	st	Z, r24
    3d52:	08 95       	ret
    3d54:	e8 e0       	ldi	r30, 0x08	; 8
    3d56:	f1 e0       	ldi	r31, 0x01	; 1
    3d58:	80 81       	ld	r24, Z
    3d5a:	80 61       	ori	r24, 0x10	; 16
    3d5c:	80 83       	st	Z, r24
    3d5e:	08 95       	ret

00003d60 <lora_driver_rn2483FactoryReset>:
    3d60:	60 e0       	ldi	r22, 0x00	; 0
    3d62:	70 e0       	ldi	r23, 0x00	; 0
    3d64:	82 e2       	ldi	r24, 0x22	; 34
    3d66:	95 e0       	ldi	r25, 0x05	; 5
    3d68:	d4 de       	rcall	.-600    	; 0x3b12 <_uploadMessage>
    3d6a:	e5 e7       	ldi	r30, 0x75	; 117
    3d6c:	f5 e1       	ldi	r31, 0x15	; 21
    3d6e:	01 90       	ld	r0, Z+
    3d70:	00 20       	and	r0, r0
    3d72:	e9 f7       	brne	.-6      	; 0x3d6e <lora_driver_rn2483FactoryReset+0xe>
    3d74:	31 97       	sbiw	r30, 0x01	; 1
    3d76:	e5 57       	subi	r30, 0x75	; 117
    3d78:	f5 41       	sbci	r31, 0x15	; 21
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
    3d7c:	75 97       	sbiw	r30, 0x15	; 21
    3d7e:	08 f0       	brcs	.+2      	; 0x3d82 <lora_driver_rn2483FactoryReset+0x22>
    3d80:	80 e0       	ldi	r24, 0x00	; 0
    3d82:	08 95       	ret

00003d84 <lora_driver_getRn2483Hweui>:
    3d84:	cf 93       	push	r28
    3d86:	df 93       	push	r29
    3d88:	ec 01       	movw	r28, r24
    3d8a:	60 e0       	ldi	r22, 0x00	; 0
    3d8c:	70 e0       	ldi	r23, 0x00	; 0
    3d8e:	83 e3       	ldi	r24, 0x33	; 51
    3d90:	95 e0       	ldi	r25, 0x05	; 5
    3d92:	bf de       	rcall	.-642    	; 0x3b12 <_uploadMessage>
    3d94:	e5 e7       	ldi	r30, 0x75	; 117
    3d96:	f5 e1       	ldi	r31, 0x15	; 21
    3d98:	01 90       	ld	r0, Z+
    3d9a:	00 20       	and	r0, r0
    3d9c:	e9 f7       	brne	.-6      	; 0x3d98 <lora_driver_getRn2483Hweui+0x14>
    3d9e:	e6 58       	subi	r30, 0x86	; 134
    3da0:	f5 41       	sbci	r31, 0x15	; 21
    3da2:	39 f4       	brne	.+14     	; 0x3db2 <lora_driver_getRn2483Hweui+0x2e>
    3da4:	65 e7       	ldi	r22, 0x75	; 117
    3da6:	75 e1       	ldi	r23, 0x15	; 21
    3da8:	ce 01       	movw	r24, r28
    3daa:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <strcpy>
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	02 c0       	rjmp	.+4      	; 0x3db6 <lora_driver_getRn2483Hweui+0x32>
    3db2:	18 82       	st	Y, r1
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	df 91       	pop	r29
    3db8:	cf 91       	pop	r28
    3dba:	08 95       	ret

00003dbc <lora_driver_setDeviceIdentifier>:
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	01 90       	ld	r0, Z+
    3dc0:	00 20       	and	r0, r0
    3dc2:	e9 f7       	brne	.-6      	; 0x3dbe <lora_driver_setDeviceIdentifier+0x2>
    3dc4:	9f 01       	movw	r18, r30
    3dc6:	21 51       	subi	r18, 0x11	; 17
    3dc8:	31 09       	sbc	r19, r1
    3dca:	28 17       	cp	r18, r24
    3dcc:	39 07       	cpc	r19, r25
    3dce:	29 f4       	brne	.+10     	; 0x3dda <lora_driver_setDeviceIdentifier+0x1e>
    3dd0:	bc 01       	movw	r22, r24
    3dd2:	81 e6       	ldi	r24, 0x61	; 97
    3dd4:	95 e0       	ldi	r25, 0x05	; 5
    3dd6:	6c cf       	rjmp	.-296    	; 0x3cb0 <_uploadMessageRc>
    3dd8:	08 95       	ret
    3dda:	89 e0       	ldi	r24, 0x09	; 9
    3ddc:	08 95       	ret

00003dde <lora_driver_setApplicationIdentifier>:
    3dde:	fc 01       	movw	r30, r24
    3de0:	01 90       	ld	r0, Z+
    3de2:	00 20       	and	r0, r0
    3de4:	e9 f7       	brne	.-6      	; 0x3de0 <lora_driver_setApplicationIdentifier+0x2>
    3de6:	9f 01       	movw	r18, r30
    3de8:	21 51       	subi	r18, 0x11	; 17
    3dea:	31 09       	sbc	r19, r1
    3dec:	28 17       	cp	r18, r24
    3dee:	39 07       	cpc	r19, r25
    3df0:	29 f4       	brne	.+10     	; 0x3dfc <lora_driver_setApplicationIdentifier+0x1e>
    3df2:	bc 01       	movw	r22, r24
    3df4:	80 e7       	ldi	r24, 0x70	; 112
    3df6:	95 e0       	ldi	r25, 0x05	; 5
    3df8:	5b cf       	rjmp	.-330    	; 0x3cb0 <_uploadMessageRc>
    3dfa:	08 95       	ret
    3dfc:	89 e0       	ldi	r24, 0x09	; 9
    3dfe:	08 95       	ret

00003e00 <lora_driver_setApplicationKey>:
    3e00:	fc 01       	movw	r30, r24
    3e02:	01 90       	ld	r0, Z+
    3e04:	00 20       	and	r0, r0
    3e06:	e9 f7       	brne	.-6      	; 0x3e02 <lora_driver_setApplicationKey+0x2>
    3e08:	9f 01       	movw	r18, r30
    3e0a:	21 52       	subi	r18, 0x21	; 33
    3e0c:	31 09       	sbc	r19, r1
    3e0e:	28 17       	cp	r18, r24
    3e10:	39 07       	cpc	r19, r25
    3e12:	29 f4       	brne	.+10     	; 0x3e1e <lora_driver_setApplicationKey+0x1e>
    3e14:	bc 01       	movw	r22, r24
    3e16:	8f e7       	ldi	r24, 0x7F	; 127
    3e18:	95 e0       	ldi	r25, 0x05	; 5
    3e1a:	4a cf       	rjmp	.-364    	; 0x3cb0 <_uploadMessageRc>
    3e1c:	08 95       	ret
    3e1e:	89 e0       	ldi	r24, 0x09	; 9
    3e20:	08 95       	ret

00003e22 <lora_driver_saveMac>:
    3e22:	60 e0       	ldi	r22, 0x00	; 0
    3e24:	70 e0       	ldi	r23, 0x00	; 0
    3e26:	8e eb       	ldi	r24, 0xBE	; 190
    3e28:	95 e0       	ldi	r25, 0x05	; 5
    3e2a:	42 cf       	rjmp	.-380    	; 0x3cb0 <_uploadMessageRc>
    3e2c:	08 95       	ret

00003e2e <lora_driver_join>:
    3e2e:	0f 93       	push	r16
    3e30:	1f 93       	push	r17
    3e32:	e8 2f       	mov	r30, r24
    3e34:	f0 e0       	ldi	r31, 0x00	; 0
    3e36:	ee 0f       	add	r30, r30
    3e38:	ff 1f       	adc	r31, r31
    3e3a:	e8 56       	subi	r30, 0x68	; 104
    3e3c:	f8 4f       	sbci	r31, 0xF8	; 248
    3e3e:	60 81       	ld	r22, Z
    3e40:	71 81       	ldd	r23, Z+1	; 0x01
    3e42:	87 ec       	ldi	r24, 0xC7	; 199
    3e44:	95 e0       	ldi	r25, 0x05	; 5
    3e46:	34 df       	rcall	.-408    	; 0x3cb0 <_uploadMessageRc>
    3e48:	81 11       	cpse	r24, r1
    3e4a:	14 c0       	rjmp	.+40     	; 0x3e74 <lora_driver_join+0x46>
    3e4c:	08 e2       	ldi	r16, 0x28	; 40
    3e4e:	15 e0       	ldi	r17, 0x05	; 5
    3e50:	20 e0       	ldi	r18, 0x00	; 0
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	4d e2       	ldi	r20, 0x2D	; 45
    3e56:	50 e0       	ldi	r21, 0x00	; 0
    3e58:	65 e7       	ldi	r22, 0x75	; 117
    3e5a:	75 e1       	ldi	r23, 0x15	; 21
    3e5c:	80 91 ec 14 	lds	r24, 0x14EC	; 0x8014ec <_serialReplyBufferHandle>
    3e60:	90 91 ed 14 	lds	r25, 0x14ED	; 0x8014ed <_serialReplyBufferHandle+0x1>
    3e64:	0e 94 76 0a 	call	0x14ec	; 0x14ec <xStreamBufferReceive>
    3e68:	88 23       	and	r24, r24
    3e6a:	21 f0       	breq	.+8      	; 0x3e74 <lora_driver_join+0x46>
    3e6c:	85 e7       	ldi	r24, 0x75	; 117
    3e6e:	95 e1       	ldi	r25, 0x15	; 21
    3e70:	aa de       	rcall	.-684    	; 0x3bc6 <_reply2ReturnCode>
    3e72:	03 c0       	rjmp	.+6      	; 0x3e7a <lora_driver_join+0x4c>
    3e74:	85 e7       	ldi	r24, 0x75	; 117
    3e76:	95 e1       	ldi	r25, 0x15	; 21
    3e78:	a6 de       	rcall	.-692    	; 0x3bc6 <_reply2ReturnCode>
    3e7a:	1f 91       	pop	r17
    3e7c:	0f 91       	pop	r16
    3e7e:	08 95       	ret

00003e80 <lora_driver_sendUploadMessage>:
    3e80:	0f 93       	push	r16
    3e82:	1f 93       	push	r17
    3e84:	cf 93       	push	r28
    3e86:	df 93       	push	r29
    3e88:	1f 92       	push	r1
    3e8a:	cd b7       	in	r28, 0x3d	; 61
    3e8c:	de b7       	in	r29, 0x3e	; 62
    3e8e:	db 01       	movw	r26, r22
    3e90:	11 96       	adiw	r26, 0x01	; 1
    3e92:	9c 91       	ld	r25, X
    3e94:	11 97       	sbiw	r26, 0x01	; 1
    3e96:	95 31       	cpi	r25, 0x15	; 21
    3e98:	08 f0       	brcs	.+2      	; 0x3e9c <lora_driver_sendUploadMessage+0x1c>
    3e9a:	b4 c0       	rjmp	.+360    	; 0x4004 <lora_driver_sendUploadMessage+0x184>
    3e9c:	99 23       	and	r25, r25
    3e9e:	81 f1       	breq	.+96     	; 0x3f00 <lora_driver_sendUploadMessage+0x80>
    3ea0:	60 e0       	ldi	r22, 0x00	; 0
    3ea2:	70 e0       	ldi	r23, 0x00	; 0
    3ea4:	27 2f       	mov	r18, r23
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	46 2f       	mov	r20, r22
    3eaa:	50 e0       	ldi	r21, 0x00	; 0
    3eac:	fd 01       	movw	r30, r26
    3eae:	e4 0f       	add	r30, r20
    3eb0:	f5 1f       	adc	r31, r21
    3eb2:	92 81       	ldd	r25, Z+2	; 0x02
    3eb4:	92 95       	swap	r25
    3eb6:	9f 70       	andi	r25, 0x0F	; 15
    3eb8:	9a 30       	cpi	r25, 0x0A	; 10
    3eba:	10 f0       	brcs	.+4      	; 0x3ec0 <lora_driver_sendUploadMessage+0x40>
    3ebc:	99 5c       	subi	r25, 0xC9	; 201
    3ebe:	01 c0       	rjmp	.+2      	; 0x3ec2 <lora_driver_sendUploadMessage+0x42>
    3ec0:	90 5d       	subi	r25, 0xD0	; 208
    3ec2:	f9 01       	movw	r30, r18
    3ec4:	ea 5f       	subi	r30, 0xFA	; 250
    3ec6:	fa 4e       	sbci	r31, 0xEA	; 234
    3ec8:	90 83       	st	Z, r25
    3eca:	2f 5f       	subi	r18, 0xFF	; 255
    3ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ece:	fd 01       	movw	r30, r26
    3ed0:	e4 0f       	add	r30, r20
    3ed2:	f5 1f       	adc	r31, r21
    3ed4:	92 81       	ldd	r25, Z+2	; 0x02
    3ed6:	9f 70       	andi	r25, 0x0F	; 15
    3ed8:	49 2f       	mov	r20, r25
    3eda:	50 e0       	ldi	r21, 0x00	; 0
    3edc:	4a 30       	cpi	r20, 0x0A	; 10
    3ede:	51 05       	cpc	r21, r1
    3ee0:	14 f0       	brlt	.+4      	; 0x3ee6 <lora_driver_sendUploadMessage+0x66>
    3ee2:	99 5c       	subi	r25, 0xC9	; 201
    3ee4:	01 c0       	rjmp	.+2      	; 0x3ee8 <lora_driver_sendUploadMessage+0x68>
    3ee6:	90 5d       	subi	r25, 0xD0	; 208
    3ee8:	f9 01       	movw	r30, r18
    3eea:	ea 5f       	subi	r30, 0xFA	; 250
    3eec:	fa 4e       	sbci	r31, 0xEA	; 234
    3eee:	90 83       	st	Z, r25
    3ef0:	7e 5f       	subi	r23, 0xFE	; 254
    3ef2:	6f 5f       	subi	r22, 0xFF	; 255
    3ef4:	11 96       	adiw	r26, 0x01	; 1
    3ef6:	9c 91       	ld	r25, X
    3ef8:	11 97       	sbiw	r26, 0x01	; 1
    3efa:	69 17       	cp	r22, r25
    3efc:	98 f2       	brcs	.-90     	; 0x3ea4 <lora_driver_sendUploadMessage+0x24>
    3efe:	01 c0       	rjmp	.+2      	; 0x3f02 <lora_driver_sendUploadMessage+0x82>
    3f00:	70 e0       	ldi	r23, 0x00	; 0
    3f02:	e7 2f       	mov	r30, r23
    3f04:	f0 e0       	ldi	r31, 0x00	; 0
    3f06:	ea 5f       	subi	r30, 0xFA	; 250
    3f08:	fa 4e       	sbci	r31, 0xEA	; 234
    3f0a:	10 82       	st	Z, r1
    3f0c:	4c 91       	ld	r20, X
    3f0e:	81 11       	cpse	r24, r1
    3f10:	03 c0       	rjmp	.+6      	; 0x3f18 <lora_driver_sendUploadMessage+0x98>
    3f12:	80 ed       	ldi	r24, 0xD0	; 208
    3f14:	95 e0       	ldi	r25, 0x05	; 5
    3f16:	02 c0       	rjmp	.+4      	; 0x3f1c <lora_driver_sendUploadMessage+0x9c>
    3f18:	82 ed       	ldi	r24, 0xD2	; 210
    3f1a:	95 e0       	ldi	r25, 0x05	; 5
    3f1c:	26 e0       	ldi	r18, 0x06	; 6
    3f1e:	35 e1       	ldi	r19, 0x15	; 21
    3f20:	3f 93       	push	r19
    3f22:	2f 93       	push	r18
    3f24:	1f 92       	push	r1
    3f26:	4f 93       	push	r20
    3f28:	9f 93       	push	r25
    3f2a:	8f 93       	push	r24
    3f2c:	86 ed       	ldi	r24, 0xD6	; 214
    3f2e:	95 e0       	ldi	r25, 0x05	; 5
    3f30:	9f 93       	push	r25
    3f32:	8f 93       	push	r24
    3f34:	88 e4       	ldi	r24, 0x48	; 72
    3f36:	95 e1       	ldi	r25, 0x15	; 21
    3f38:	9f 93       	push	r25
    3f3a:	8f 93       	push	r24
    3f3c:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <sprintf>
    3f40:	60 e0       	ldi	r22, 0x00	; 0
    3f42:	70 e0       	ldi	r23, 0x00	; 0
    3f44:	88 e4       	ldi	r24, 0x48	; 72
    3f46:	95 e1       	ldi	r25, 0x15	; 21
    3f48:	b3 de       	rcall	.-666    	; 0x3cb0 <_uploadMessageRc>
    3f4a:	0f b6       	in	r0, 0x3f	; 63
    3f4c:	f8 94       	cli
    3f4e:	de bf       	out	0x3e, r29	; 62
    3f50:	0f be       	out	0x3f, r0	; 63
    3f52:	cd bf       	out	0x3d, r28	; 61
    3f54:	81 11       	cpse	r24, r1
    3f56:	59 c0       	rjmp	.+178    	; 0x400a <lora_driver_sendUploadMessage+0x18a>
    3f58:	08 e2       	ldi	r16, 0x28	; 40
    3f5a:	15 e0       	ldi	r17, 0x05	; 5
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	4d e2       	ldi	r20, 0x2D	; 45
    3f62:	50 e0       	ldi	r21, 0x00	; 0
    3f64:	65 e7       	ldi	r22, 0x75	; 117
    3f66:	75 e1       	ldi	r23, 0x15	; 21
    3f68:	80 91 ec 14 	lds	r24, 0x14EC	; 0x8014ec <_serialReplyBufferHandle>
    3f6c:	90 91 ed 14 	lds	r25, 0x14ED	; 0x8014ed <_serialReplyBufferHandle+0x1>
    3f70:	0e 94 76 0a 	call	0x14ec	; 0x14ec <xStreamBufferReceive>
    3f74:	88 23       	and	r24, r24
    3f76:	09 f4       	brne	.+2      	; 0x3f7a <lora_driver_sendUploadMessage+0xfa>
    3f78:	47 c0       	rjmp	.+142    	; 0x4008 <lora_driver_sendUploadMessage+0x188>
    3f7a:	85 e7       	ldi	r24, 0x75	; 117
    3f7c:	95 e1       	ldi	r25, 0x15	; 21
    3f7e:	23 de       	rcall	.-954    	; 0x3bc6 <_reply2ReturnCode>
    3f80:	8e 30       	cpi	r24, 0x0E	; 14
    3f82:	09 f0       	breq	.+2      	; 0x3f86 <lora_driver_sendUploadMessage+0x106>
    3f84:	42 c0       	rjmp	.+132    	; 0x400a <lora_driver_sendUploadMessage+0x18a>
    3f86:	87 e0       	ldi	r24, 0x07	; 7
    3f88:	89 83       	std	Y+1, r24	; 0x01
    3f8a:	80 91 ea 14 	lds	r24, 0x14EA	; 0x8014ea <_downlinkMessageBuffer>
    3f8e:	90 91 eb 14 	lds	r25, 0x14EB	; 0x8014eb <_downlinkMessageBuffer+0x1>
    3f92:	89 2b       	or	r24, r25
    3f94:	a9 f1       	breq	.+106    	; 0x4000 <lora_driver_sendUploadMessage+0x180>
    3f96:	be 01       	movw	r22, r28
    3f98:	6f 5f       	subi	r22, 0xFF	; 255
    3f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f9c:	85 e7       	ldi	r24, 0x75	; 117
    3f9e:	95 e1       	ldi	r25, 0x15	; 21
    3fa0:	68 d1       	rcall	.+720    	; 0x4272 <decode_port_no>
    3fa2:	80 93 f0 14 	sts	0x14F0, r24	; 0x8014f0 <_downlinkPayload>
    3fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    3fa8:	f0 e0       	ldi	r31, 0x00	; 0
    3faa:	eb 58       	subi	r30, 0x8B	; 139
    3fac:	fa 4e       	sbci	r31, 0xEA	; 234
    3fae:	df 01       	movw	r26, r30
    3fb0:	0d 90       	ld	r0, X+
    3fb2:	00 20       	and	r0, r0
    3fb4:	e9 f7       	brne	.-6      	; 0x3fb0 <lora_driver_sendUploadMessage+0x130>
    3fb6:	11 97       	sbiw	r26, 0x01	; 1
    3fb8:	ae 1b       	sub	r26, r30
    3fba:	bf 0b       	sbc	r27, r31
    3fbc:	aa 23       	and	r26, r26
    3fbe:	91 f0       	breq	.+36     	; 0x3fe4 <lora_driver_sendUploadMessage+0x164>
    3fc0:	bb 27       	eor	r27, r27
    3fc2:	cd 01       	movw	r24, r26
    3fc4:	01 97       	sbiw	r24, 0x01	; 1
    3fc6:	9c 01       	movw	r18, r24
    3fc8:	12 f4       	brpl	.+4      	; 0x3fce <lora_driver_sendUploadMessage+0x14e>
    3fca:	2f 5f       	subi	r18, 0xFF	; 255
    3fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    3fce:	35 95       	asr	r19
    3fd0:	27 95       	ror	r18
    3fd2:	20 93 f1 14 	sts	0x14F1, r18	; 0x8014f1 <_downlinkPayload+0x1>
    3fd6:	af 01       	movw	r20, r30
    3fd8:	4f 5f       	subi	r20, 0xFF	; 255
    3fda:	5f 4f       	sbci	r21, 0xFF	; 255
    3fdc:	64 e1       	ldi	r22, 0x14	; 20
    3fde:	82 ef       	ldi	r24, 0xF2	; 242
    3fe0:	94 e1       	ldi	r25, 0x14	; 20
    3fe2:	73 d1       	rcall	.+742    	; 0x42ca <decode_hexadecimal_string_bytes>
    3fe4:	01 e0       	ldi	r16, 0x01	; 1
    3fe6:	10 e0       	ldi	r17, 0x00	; 0
    3fe8:	20 e0       	ldi	r18, 0x00	; 0
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	46 e1       	ldi	r20, 0x16	; 22
    3fee:	50 e0       	ldi	r21, 0x00	; 0
    3ff0:	60 ef       	ldi	r22, 0xF0	; 240
    3ff2:	74 e1       	ldi	r23, 0x14	; 20
    3ff4:	80 91 ea 14 	lds	r24, 0x14EA	; 0x8014ea <_downlinkMessageBuffer>
    3ff8:	90 91 eb 14 	lds	r25, 0x14EB	; 0x8014eb <_downlinkMessageBuffer+0x1>
    3ffc:	0e 94 6f 09 	call	0x12de	; 0x12de <xStreamBufferSend>
    4000:	8e e0       	ldi	r24, 0x0E	; 14
    4002:	03 c0       	rjmp	.+6      	; 0x400a <lora_driver_sendUploadMessage+0x18a>
    4004:	84 e1       	ldi	r24, 0x14	; 20
    4006:	01 c0       	rjmp	.+2      	; 0x400a <lora_driver_sendUploadMessage+0x18a>
    4008:	80 e0       	ldi	r24, 0x00	; 0
    400a:	0f 90       	pop	r0
    400c:	df 91       	pop	r29
    400e:	cf 91       	pop	r28
    4010:	1f 91       	pop	r17
    4012:	0f 91       	pop	r16
    4014:	08 95       	ret

00004016 <lora_driver_setAdaptiveDataRate>:
    4016:	81 30       	cpi	r24, 0x01	; 1
    4018:	19 f0       	breq	.+6      	; 0x4020 <lora_driver_setAdaptiveDataRate+0xa>
    401a:	66 ee       	ldi	r22, 0xE6	; 230
    401c:	75 e0       	ldi	r23, 0x05	; 5
    401e:	02 c0       	rjmp	.+4      	; 0x4024 <lora_driver_setAdaptiveDataRate+0xe>
    4020:	6f eb       	ldi	r22, 0xBF	; 191
    4022:	76 e0       	ldi	r23, 0x06	; 6
    4024:	8a ee       	ldi	r24, 0xEA	; 234
    4026:	95 e0       	ldi	r25, 0x05	; 5
    4028:	43 ce       	rjmp	.-890    	; 0x3cb0 <_uploadMessageRc>
    402a:	08 95       	ret

0000402c <lora_driver_setReceiveDelay>:
    402c:	9f 93       	push	r25
    402e:	8f 93       	push	r24
    4030:	8b e1       	ldi	r24, 0x1B	; 27
    4032:	96 e0       	ldi	r25, 0x06	; 6
    4034:	9f 93       	push	r25
    4036:	8f 93       	push	r24
    4038:	88 e4       	ldi	r24, 0x48	; 72
    403a:	95 e1       	ldi	r25, 0x15	; 21
    403c:	9f 93       	push	r25
    403e:	8f 93       	push	r24
    4040:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <sprintf>
    4044:	60 e0       	ldi	r22, 0x00	; 0
    4046:	70 e0       	ldi	r23, 0x00	; 0
    4048:	88 e4       	ldi	r24, 0x48	; 72
    404a:	95 e1       	ldi	r25, 0x15	; 21
    404c:	31 de       	rcall	.-926    	; 0x3cb0 <_uploadMessageRc>
    404e:	0f 90       	pop	r0
    4050:	0f 90       	pop	r0
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
    405a:	08 95       	ret

0000405c <lora_driver_configureToEu868>:
    405c:	2f 92       	push	r2
    405e:	3f 92       	push	r3
    4060:	4f 92       	push	r4
    4062:	5f 92       	push	r5
    4064:	6f 92       	push	r6
    4066:	7f 92       	push	r7
    4068:	8f 92       	push	r8
    406a:	9f 92       	push	r9
    406c:	af 92       	push	r10
    406e:	bf 92       	push	r11
    4070:	cf 92       	push	r12
    4072:	df 92       	push	r13
    4074:	ef 92       	push	r14
    4076:	ff 92       	push	r15
    4078:	0f 93       	push	r16
    407a:	1f 93       	push	r17
    407c:	cf 93       	push	r28
    407e:	df 93       	push	r29
    4080:	cd b7       	in	r28, 0x3d	; 61
    4082:	de b7       	in	r29, 0x3e	; 62
    4084:	a0 97       	sbiw	r28, 0x20	; 32
    4086:	0f b6       	in	r0, 0x3f	; 63
    4088:	f8 94       	cli
    408a:	de bf       	out	0x3e, r29	; 62
    408c:	0f be       	out	0x3f, r0	; 63
    408e:	cd bf       	out	0x3d, r28	; 61
    4090:	68 e4       	ldi	r22, 0x48	; 72
    4092:	76 e0       	ldi	r23, 0x06	; 6
    4094:	84 e5       	ldi	r24, 0x54	; 84
    4096:	96 e0       	ldi	r25, 0x06	; 6
    4098:	3c dd       	rcall	.-1416   	; 0x3b12 <_uploadMessage>
    409a:	95 dd       	rcall	.-1238   	; 0x3bc6 <_reply2ReturnCode>
    409c:	81 11       	cpse	r24, r1
    409e:	a3 c0       	rjmp	.+326    	; 0x41e6 <lora_driver_configureToEu868+0x18a>
    40a0:	80 e2       	ldi	r24, 0x20	; 32
    40a2:	e2 e2       	ldi	r30, 0x22	; 34
    40a4:	f2 e0       	ldi	r31, 0x02	; 2
    40a6:	de 01       	movw	r26, r28
    40a8:	11 96       	adiw	r26, 0x01	; 1
    40aa:	01 90       	ld	r0, Z+
    40ac:	0d 92       	st	X+, r0
    40ae:	8a 95       	dec	r24
    40b0:	e1 f7       	brne	.-8      	; 0x40aa <lora_driver_configureToEu868+0x4e>
    40b2:	9e 01       	movw	r18, r28
    40b4:	2f 5f       	subi	r18, 0xFF	; 255
    40b6:	3f 4f       	sbci	r19, 0xFF	; 255
    40b8:	69 01       	movw	r12, r18
    40ba:	e1 2c       	mov	r14, r1
    40bc:	f1 2c       	mov	r15, r1
    40be:	0f 2e       	mov	r0, r31
    40c0:	f0 e6       	ldi	r31, 0x60	; 96
    40c2:	af 2e       	mov	r10, r31
    40c4:	f6 e0       	ldi	r31, 0x06	; 6
    40c6:	bf 2e       	mov	r11, r31
    40c8:	f0 2d       	mov	r31, r0
    40ca:	08 e4       	ldi	r16, 0x48	; 72
    40cc:	15 e1       	ldi	r17, 0x15	; 21
    40ce:	0f 2e       	mov	r0, r31
    40d0:	f9 e7       	ldi	r31, 0x79	; 121
    40d2:	4f 2e       	mov	r4, r31
    40d4:	f6 e0       	ldi	r31, 0x06	; 6
    40d6:	5f 2e       	mov	r5, r31
    40d8:	f0 2d       	mov	r31, r0
    40da:	0f 2e       	mov	r0, r31
    40dc:	f0 e9       	ldi	r31, 0x90	; 144
    40de:	8f 2e       	mov	r8, r31
    40e0:	f6 e0       	ldi	r31, 0x06	; 6
    40e2:	9f 2e       	mov	r9, r31
    40e4:	f0 2d       	mov	r31, r0
    40e6:	0f 2e       	mov	r0, r31
    40e8:	fa ea       	ldi	r31, 0xAA	; 170
    40ea:	6f 2e       	mov	r6, r31
    40ec:	f6 e0       	ldi	r31, 0x06	; 6
    40ee:	7f 2e       	mov	r7, r31
    40f0:	f0 2d       	mov	r31, r0
    40f2:	3e 2c       	mov	r3, r14
    40f4:	2f 2c       	mov	r2, r15
    40f6:	ff 92       	push	r15
    40f8:	ef 92       	push	r14
    40fa:	bf 92       	push	r11
    40fc:	af 92       	push	r10
    40fe:	1f 93       	push	r17
    4100:	0f 93       	push	r16
    4102:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <sprintf>
    4106:	60 e0       	ldi	r22, 0x00	; 0
    4108:	70 e0       	ldi	r23, 0x00	; 0
    410a:	c8 01       	movw	r24, r16
    410c:	02 dd       	rcall	.-1532   	; 0x3b12 <_uploadMessage>
    410e:	5b dd       	rcall	.-1354   	; 0x3bc6 <_reply2ReturnCode>
    4110:	0f 90       	pop	r0
    4112:	0f 90       	pop	r0
    4114:	0f 90       	pop	r0
    4116:	0f 90       	pop	r0
    4118:	0f 90       	pop	r0
    411a:	0f 90       	pop	r0
    411c:	81 11       	cpse	r24, r1
    411e:	63 c0       	rjmp	.+198    	; 0x41e6 <lora_driver_configureToEu868+0x18a>
    4120:	32 e0       	ldi	r19, 0x02	; 2
    4122:	3e 15       	cp	r19, r14
    4124:	e8 f4       	brcc	.+58     	; 0x4160 <lora_driver_configureToEu868+0x104>
    4126:	f6 01       	movw	r30, r12
    4128:	83 81       	ldd	r24, Z+3	; 0x03
    412a:	8f 93       	push	r24
    412c:	82 81       	ldd	r24, Z+2	; 0x02
    412e:	8f 93       	push	r24
    4130:	81 81       	ldd	r24, Z+1	; 0x01
    4132:	8f 93       	push	r24
    4134:	80 81       	ld	r24, Z
    4136:	8f 93       	push	r24
    4138:	ff 92       	push	r15
    413a:	ef 92       	push	r14
    413c:	5f 92       	push	r5
    413e:	4f 92       	push	r4
    4140:	1f 93       	push	r17
    4142:	0f 93       	push	r16
    4144:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <sprintf>
    4148:	60 e0       	ldi	r22, 0x00	; 0
    414a:	70 e0       	ldi	r23, 0x00	; 0
    414c:	c8 01       	movw	r24, r16
    414e:	e1 dc       	rcall	.-1598   	; 0x3b12 <_uploadMessage>
    4150:	3a dd       	rcall	.-1420   	; 0x3bc6 <_reply2ReturnCode>
    4152:	0f b6       	in	r0, 0x3f	; 63
    4154:	f8 94       	cli
    4156:	de bf       	out	0x3e, r29	; 62
    4158:	0f be       	out	0x3f, r0	; 63
    415a:	cd bf       	out	0x3d, r28	; 61
    415c:	81 11       	cpse	r24, r1
    415e:	43 c0       	rjmp	.+134    	; 0x41e6 <lora_driver_configureToEu868+0x18a>
    4160:	2f 92       	push	r2
    4162:	3f 92       	push	r3
    4164:	9f 92       	push	r9
    4166:	8f 92       	push	r8
    4168:	1f 93       	push	r17
    416a:	0f 93       	push	r16
    416c:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <sprintf>
    4170:	60 e0       	ldi	r22, 0x00	; 0
    4172:	70 e0       	ldi	r23, 0x00	; 0
    4174:	c8 01       	movw	r24, r16
    4176:	cd dc       	rcall	.-1638   	; 0x3b12 <_uploadMessage>
    4178:	26 dd       	rcall	.-1460   	; 0x3bc6 <_reply2ReturnCode>
    417a:	0f 90       	pop	r0
    417c:	0f 90       	pop	r0
    417e:	0f 90       	pop	r0
    4180:	0f 90       	pop	r0
    4182:	0f 90       	pop	r0
    4184:	0f 90       	pop	r0
    4186:	81 11       	cpse	r24, r1
    4188:	2e c0       	rjmp	.+92     	; 0x41e6 <lora_driver_configureToEu868+0x18a>
    418a:	2f 92       	push	r2
    418c:	3f 92       	push	r3
    418e:	7f 92       	push	r7
    4190:	6f 92       	push	r6
    4192:	1f 93       	push	r17
    4194:	0f 93       	push	r16
    4196:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <sprintf>
    419a:	60 e0       	ldi	r22, 0x00	; 0
    419c:	70 e0       	ldi	r23, 0x00	; 0
    419e:	c8 01       	movw	r24, r16
    41a0:	b8 dc       	rcall	.-1680   	; 0x3b12 <_uploadMessage>
    41a2:	11 dd       	rcall	.-1502   	; 0x3bc6 <_reply2ReturnCode>
    41a4:	0f 90       	pop	r0
    41a6:	0f 90       	pop	r0
    41a8:	0f 90       	pop	r0
    41aa:	0f 90       	pop	r0
    41ac:	0f 90       	pop	r0
    41ae:	0f 90       	pop	r0
    41b0:	81 11       	cpse	r24, r1
    41b2:	19 c0       	rjmp	.+50     	; 0x41e6 <lora_driver_configureToEu868+0x18a>
    41b4:	3f ef       	ldi	r19, 0xFF	; 255
    41b6:	e3 1a       	sub	r14, r19
    41b8:	f3 0a       	sbc	r15, r19
    41ba:	84 e0       	ldi	r24, 0x04	; 4
    41bc:	c8 0e       	add	r12, r24
    41be:	d1 1c       	adc	r13, r1
    41c0:	98 e0       	ldi	r25, 0x08	; 8
    41c2:	e9 16       	cp	r14, r25
    41c4:	f1 04       	cpc	r15, r1
    41c6:	09 f0       	breq	.+2      	; 0x41ca <lora_driver_configureToEu868+0x16e>
    41c8:	94 cf       	rjmp	.-216    	; 0x40f2 <lora_driver_configureToEu868+0x96>
    41ca:	60 e0       	ldi	r22, 0x00	; 0
    41cc:	70 e0       	ldi	r23, 0x00	; 0
    41ce:	82 ec       	ldi	r24, 0xC2	; 194
    41d0:	96 e0       	ldi	r25, 0x06	; 6
    41d2:	9f dc       	rcall	.-1730   	; 0x3b12 <_uploadMessage>
    41d4:	f8 dc       	rcall	.-1552   	; 0x3bc6 <_reply2ReturnCode>
    41d6:	81 11       	cpse	r24, r1
    41d8:	06 c0       	rjmp	.+12     	; 0x41e6 <lora_driver_configureToEu868+0x18a>
    41da:	60 e0       	ldi	r22, 0x00	; 0
    41dc:	70 e0       	ldi	r23, 0x00	; 0
    41de:	83 ed       	ldi	r24, 0xD3	; 211
    41e0:	96 e0       	ldi	r25, 0x06	; 6
    41e2:	97 dc       	rcall	.-1746   	; 0x3b12 <_uploadMessage>
    41e4:	f0 dc       	rcall	.-1568   	; 0x3bc6 <_reply2ReturnCode>
    41e6:	a0 96       	adiw	r28, 0x20	; 32
    41e8:	0f b6       	in	r0, 0x3f	; 63
    41ea:	f8 94       	cli
    41ec:	de bf       	out	0x3e, r29	; 62
    41ee:	0f be       	out	0x3f, r0	; 63
    41f0:	cd bf       	out	0x3d, r28	; 61
    41f2:	df 91       	pop	r29
    41f4:	cf 91       	pop	r28
    41f6:	1f 91       	pop	r17
    41f8:	0f 91       	pop	r16
    41fa:	ff 90       	pop	r15
    41fc:	ef 90       	pop	r14
    41fe:	df 90       	pop	r13
    4200:	cf 90       	pop	r12
    4202:	bf 90       	pop	r11
    4204:	af 90       	pop	r10
    4206:	9f 90       	pop	r9
    4208:	8f 90       	pop	r8
    420a:	7f 90       	pop	r7
    420c:	6f 90       	pop	r6
    420e:	5f 90       	pop	r5
    4210:	4f 90       	pop	r4
    4212:	3f 90       	pop	r3
    4214:	2f 90       	pop	r2
    4216:	08 95       	ret

00004218 <lora_driver_setOtaaIdentity>:
    4218:	ef 92       	push	r14
    421a:	ff 92       	push	r15
    421c:	0f 93       	push	r16
    421e:	1f 93       	push	r17
    4220:	cf 93       	push	r28
    4222:	df 93       	push	r29
    4224:	ec 01       	movw	r28, r24
    4226:	8b 01       	movw	r16, r22
    4228:	7a 01       	movw	r14, r20
    422a:	81 e0       	ldi	r24, 0x01	; 1
    422c:	f4 de       	rcall	.-536    	; 0x4016 <lora_driver_setAdaptiveDataRate>
    422e:	81 11       	cpse	r24, r1
    4230:	0d c0       	rjmp	.+26     	; 0x424c <lora_driver_setOtaaIdentity+0x34>
    4232:	ce 01       	movw	r24, r28
    4234:	d4 dd       	rcall	.-1112   	; 0x3dde <lora_driver_setApplicationIdentifier>
    4236:	81 11       	cpse	r24, r1
    4238:	09 c0       	rjmp	.+18     	; 0x424c <lora_driver_setOtaaIdentity+0x34>
    423a:	c8 01       	movw	r24, r16
    423c:	e1 dd       	rcall	.-1086   	; 0x3e00 <lora_driver_setApplicationKey>
    423e:	81 11       	cpse	r24, r1
    4240:	05 c0       	rjmp	.+10     	; 0x424c <lora_driver_setOtaaIdentity+0x34>
    4242:	c7 01       	movw	r24, r14
    4244:	bb dd       	rcall	.-1162   	; 0x3dbc <lora_driver_setDeviceIdentifier>
    4246:	81 11       	cpse	r24, r1
    4248:	01 c0       	rjmp	.+2      	; 0x424c <lora_driver_setOtaaIdentity+0x34>
    424a:	eb dd       	rcall	.-1066   	; 0x3e22 <lora_driver_saveMac>
    424c:	df 91       	pop	r29
    424e:	cf 91       	pop	r28
    4250:	1f 91       	pop	r17
    4252:	0f 91       	pop	r16
    4254:	ff 90       	pop	r15
    4256:	ef 90       	pop	r14
    4258:	08 95       	ret

0000425a <lora_driver_mapReturnCodeToText>:
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	fc 01       	movw	r30, r24
    425e:	ee 0f       	add	r30, r30
    4260:	ff 1f       	adc	r31, r31
    4262:	8e 0f       	add	r24, r30
    4264:	9f 1f       	adc	r25, r31
    4266:	fc 01       	movw	r30, r24
    4268:	e4 56       	subi	r30, 0x64	; 100
    426a:	f8 4f       	sbci	r31, 0xF8	; 248
    426c:	81 81       	ldd	r24, Z+1	; 0x01
    426e:	92 81       	ldd	r25, Z+2	; 0x02
    4270:	08 95       	ret

00004272 <decode_port_no>:
    4272:	dc 01       	movw	r26, r24
    4274:	00 97       	sbiw	r24, 0x00	; 0
    4276:	29 f1       	breq	.+74     	; 0x42c2 <decode_port_no+0x50>
    4278:	fb 01       	movw	r30, r22
    427a:	20 81       	ld	r18, Z
    427c:	fc 01       	movw	r30, r24
    427e:	01 90       	ld	r0, Z+
    4280:	00 20       	and	r0, r0
    4282:	e9 f7       	brne	.-6      	; 0x427e <decode_port_no+0xc>
    4284:	31 97       	sbiw	r30, 0x01	; 1
    4286:	e8 1b       	sub	r30, r24
    4288:	f9 0b       	sbc	r31, r25
    428a:	82 2f       	mov	r24, r18
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	e8 17       	cp	r30, r24
    4290:	f9 07       	cpc	r31, r25
    4292:	c8 f0       	brcs	.+50     	; 0x42c6 <decode_port_no+0x54>
    4294:	80 e0       	ldi	r24, 0x00	; 0
    4296:	08 c0       	rjmp	.+16     	; 0x42a8 <decode_port_no+0x36>
    4298:	88 0f       	add	r24, r24
    429a:	38 2f       	mov	r19, r24
    429c:	33 0f       	add	r19, r19
    429e:	33 0f       	add	r19, r19
    42a0:	83 0f       	add	r24, r19
    42a2:	80 53       	subi	r24, 0x30	; 48
    42a4:	89 0f       	add	r24, r25
    42a6:	2f 5f       	subi	r18, 0xFF	; 255
    42a8:	fd 01       	movw	r30, r26
    42aa:	e2 0f       	add	r30, r18
    42ac:	f1 1d       	adc	r31, r1
    42ae:	90 81       	ld	r25, Z
    42b0:	30 ed       	ldi	r19, 0xD0	; 208
    42b2:	39 0f       	add	r19, r25
    42b4:	3a 30       	cpi	r19, 0x0A	; 10
    42b6:	10 f4       	brcc	.+4      	; 0x42bc <decode_port_no+0x4a>
    42b8:	91 11       	cpse	r25, r1
    42ba:	ee cf       	rjmp	.-36     	; 0x4298 <decode_port_no+0x26>
    42bc:	fb 01       	movw	r30, r22
    42be:	20 83       	st	Z, r18
    42c0:	08 95       	ret
    42c2:	80 e0       	ldi	r24, 0x00	; 0
    42c4:	08 95       	ret
    42c6:	80 e0       	ldi	r24, 0x00	; 0
    42c8:	08 95       	ret

000042ca <decode_hexadecimal_string_bytes>:
    42ca:	0f 93       	push	r16
    42cc:	1f 93       	push	r17
    42ce:	cf 93       	push	r28
    42d0:	df 93       	push	r29
    42d2:	dc 01       	movw	r26, r24
    42d4:	ea 01       	movw	r28, r20
    42d6:	20 97       	sbiw	r28, 0x00	; 0
    42d8:	e1 f1       	breq	.+120    	; 0x4352 <decode_hexadecimal_string_bytes+0x88>
    42da:	fa 01       	movw	r30, r20
    42dc:	01 90       	ld	r0, Z+
    42de:	00 20       	and	r0, r0
    42e0:	e9 f7       	brne	.-6      	; 0x42dc <decode_hexadecimal_string_bytes+0x12>
    42e2:	31 97       	sbiw	r30, 0x01	; 1
    42e4:	e4 1b       	sub	r30, r20
    42e6:	f5 0b       	sbc	r31, r21
    42e8:	32 97       	sbiw	r30, 0x02	; 2
    42ea:	10 f5       	brcc	.+68     	; 0x4330 <decode_hexadecimal_string_bytes+0x66>
    42ec:	32 c0       	rjmp	.+100    	; 0x4352 <decode_hexadecimal_string_bytes+0x88>
    42ee:	8d 01       	movw	r16, r26
    42f0:	04 0f       	add	r16, r20
    42f2:	15 1f       	adc	r17, r21
    42f4:	30 e0       	ldi	r19, 0x00	; 0
    42f6:	ae 01       	movw	r20, r28
    42f8:	42 0f       	add	r20, r18
    42fa:	53 1f       	adc	r21, r19
    42fc:	fa 01       	movw	r30, r20
    42fe:	90 81       	ld	r25, Z
    4300:	91 34       	cpi	r25, 0x41	; 65
    4302:	28 f0       	brcs	.+10     	; 0x430e <decode_hexadecimal_string_bytes+0x44>
    4304:	97 53       	subi	r25, 0x37	; 55
    4306:	59 2f       	mov	r21, r25
    4308:	52 95       	swap	r21
    430a:	50 7f       	andi	r21, 0xF0	; 240
    430c:	03 c0       	rjmp	.+6      	; 0x4314 <decode_hexadecimal_string_bytes+0x4a>
    430e:	59 2f       	mov	r21, r25
    4310:	52 95       	swap	r21
    4312:	50 7f       	andi	r21, 0xF0	; 240
    4314:	2c 0f       	add	r18, r28
    4316:	3d 1f       	adc	r19, r29
    4318:	f9 01       	movw	r30, r18
    431a:	91 81       	ldd	r25, Z+1	; 0x01
    431c:	91 34       	cpi	r25, 0x41	; 65
    431e:	10 f0       	brcs	.+4      	; 0x4324 <decode_hexadecimal_string_bytes+0x5a>
    4320:	97 53       	subi	r25, 0x37	; 55
    4322:	01 c0       	rjmp	.+2      	; 0x4326 <decode_hexadecimal_string_bytes+0x5c>
    4324:	90 53       	subi	r25, 0x30	; 48
    4326:	95 0f       	add	r25, r21
    4328:	f8 01       	movw	r30, r16
    432a:	90 83       	st	Z, r25
    432c:	8f 5f       	subi	r24, 0xFF	; 255
    432e:	01 c0       	rjmp	.+2      	; 0x4332 <decode_hexadecimal_string_bytes+0x68>
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	28 2f       	mov	r18, r24
    4334:	22 0f       	add	r18, r18
    4336:	48 2f       	mov	r20, r24
    4338:	50 e0       	ldi	r21, 0x00	; 0
    433a:	fe 01       	movw	r30, r28
    433c:	01 90       	ld	r0, Z+
    433e:	00 20       	and	r0, r0
    4340:	e9 f7       	brne	.-6      	; 0x433c <decode_hexadecimal_string_bytes+0x72>
    4342:	31 97       	sbiw	r30, 0x01	; 1
    4344:	ec 1b       	sub	r30, r28
    4346:	fd 0b       	sbc	r31, r29
    4348:	4e 17       	cp	r20, r30
    434a:	5f 07       	cpc	r21, r31
    434c:	10 f4       	brcc	.+4      	; 0x4352 <decode_hexadecimal_string_bytes+0x88>
    434e:	86 13       	cpse	r24, r22
    4350:	ce cf       	rjmp	.-100    	; 0x42ee <decode_hexadecimal_string_bytes+0x24>
    4352:	df 91       	pop	r29
    4354:	cf 91       	pop	r28
    4356:	1f 91       	pop	r17
    4358:	0f 91       	pop	r16
    435a:	08 95       	ret

0000435c <_serialCallBack>:
    435c:	80 91 a5 15 	lds	r24, 0x15A5	; 0x8015a5 <crc_sum.1945>
    4360:	86 0f       	add	r24, r22
    4362:	80 93 a5 15 	sts	0x15A5, r24	; 0x8015a5 <crc_sum.1945>
    4366:	90 91 a8 15 	lds	r25, 0x15A8	; 0x8015a8 <_mh_state>
    436a:	91 30       	cpi	r25, 0x01	; 1
    436c:	79 f0       	breq	.+30     	; 0x438c <_serialCallBack+0x30>
    436e:	28 f0       	brcs	.+10     	; 0x437a <_serialCallBack+0x1e>
    4370:	92 30       	cpi	r25, 0x02	; 2
    4372:	a9 f0       	breq	.+42     	; 0x439e <_serialCallBack+0x42>
    4374:	93 30       	cpi	r25, 0x03	; 3
    4376:	19 f1       	breq	.+70     	; 0x43be <_serialCallBack+0x62>
    4378:	08 95       	ret
    437a:	6f 3f       	cpi	r22, 0xFF	; 255
    437c:	09 f0       	breq	.+2      	; 0x4380 <_serialCallBack+0x24>
    437e:	48 c0       	rjmp	.+144    	; 0x4410 <_serialCallBack+0xb4>
    4380:	10 92 a5 15 	sts	0x15A5, r1	; 0x8015a5 <crc_sum.1945>
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	80 93 a8 15 	sts	0x15A8, r24	; 0x8015a8 <_mh_state>
    438a:	08 95       	ret
    438c:	66 38       	cpi	r22, 0x86	; 134
    438e:	09 f0       	breq	.+2      	; 0x4392 <_serialCallBack+0x36>
    4390:	3f c0       	rjmp	.+126    	; 0x4410 <_serialCallBack+0xb4>
    4392:	10 92 a4 15 	sts	0x15A4, r1	; 0x8015a4 <inDex.1943>
    4396:	82 e0       	ldi	r24, 0x02	; 2
    4398:	80 93 a8 15 	sts	0x15A8, r24	; 0x8015a8 <_mh_state>
    439c:	08 95       	ret
    439e:	e0 91 a4 15 	lds	r30, 0x15A4	; 0x8015a4 <inDex.1943>
    43a2:	81 e0       	ldi	r24, 0x01	; 1
    43a4:	8e 0f       	add	r24, r30
    43a6:	80 93 a4 15 	sts	0x15A4, r24	; 0x8015a4 <inDex.1943>
    43aa:	f0 e0       	ldi	r31, 0x00	; 0
    43ac:	ee 55       	subi	r30, 0x5E	; 94
    43ae:	fa 4e       	sbci	r31, 0xEA	; 234
    43b0:	60 83       	st	Z, r22
    43b2:	82 30       	cpi	r24, 0x02	; 2
    43b4:	69 f5       	brne	.+90     	; 0x4410 <_serialCallBack+0xb4>
    43b6:	83 e0       	ldi	r24, 0x03	; 3
    43b8:	80 93 a8 15 	sts	0x15A8, r24	; 0x8015a8 <_mh_state>
    43bc:	08 95       	ret
    43be:	90 91 a4 15 	lds	r25, 0x15A4	; 0x8015a4 <inDex.1943>
    43c2:	21 e0       	ldi	r18, 0x01	; 1
    43c4:	29 0f       	add	r18, r25
    43c6:	20 93 a4 15 	sts	0x15A4, r18	; 0x8015a4 <inDex.1943>
    43ca:	96 30       	cpi	r25, 0x06	; 6
    43cc:	09 f5       	brne	.+66     	; 0x4410 <_serialCallBack+0xb4>
    43ce:	81 11       	cpse	r24, r1
    43d0:	0e c0       	rjmp	.+28     	; 0x43ee <_serialCallBack+0x92>
    43d2:	e2 ea       	ldi	r30, 0xA2	; 162
    43d4:	f5 e1       	ldi	r31, 0x15	; 21
    43d6:	80 81       	ld	r24, Z
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	98 2f       	mov	r25, r24
    43dc:	88 27       	eor	r24, r24
    43de:	21 81       	ldd	r18, Z+1	; 0x01
    43e0:	82 0f       	add	r24, r18
    43e2:	91 1d       	adc	r25, r1
    43e4:	90 93 aa 15 	sts	0x15AA, r25	; 0x8015aa <_ppm+0x1>
    43e8:	80 93 a9 15 	sts	0x15A9, r24	; 0x8015a9 <_ppm>
    43ec:	04 c0       	rjmp	.+8      	; 0x43f6 <_serialCallBack+0x9a>
    43ee:	10 92 aa 15 	sts	0x15AA, r1	; 0x8015aa <_ppm+0x1>
    43f2:	10 92 a9 15 	sts	0x15A9, r1	; 0x8015a9 <_ppm>
    43f6:	10 92 a8 15 	sts	0x15A8, r1	; 0x8015a8 <_mh_state>
    43fa:	e0 91 a6 15 	lds	r30, 0x15A6	; 0x8015a6 <_appCallBack>
    43fe:	f0 91 a7 15 	lds	r31, 0x15A7	; 0x8015a7 <_appCallBack+0x1>
    4402:	30 97       	sbiw	r30, 0x00	; 0
    4404:	29 f0       	breq	.+10     	; 0x4410 <_serialCallBack+0xb4>
    4406:	80 91 a9 15 	lds	r24, 0x15A9	; 0x8015a9 <_ppm>
    440a:	90 91 aa 15 	lds	r25, 0x15AA	; 0x8015aa <_ppm+0x1>
    440e:	19 95       	eicall
    4410:	08 95       	ret

00004412 <mh_z19_initialise>:
    4412:	8f 92       	push	r8
    4414:	9f 92       	push	r9
    4416:	af 92       	push	r10
    4418:	cf 92       	push	r12
    441a:	ef 92       	push	r14
    441c:	0f 93       	push	r16
    441e:	0f 2e       	mov	r0, r31
    4420:	fe ea       	ldi	r31, 0xAE	; 174
    4422:	8f 2e       	mov	r8, r31
    4424:	f1 e2       	ldi	r31, 0x21	; 33
    4426:	9f 2e       	mov	r9, r31
    4428:	f0 2d       	mov	r31, r0
    442a:	68 94       	set
    442c:	aa 24       	eor	r10, r10
    442e:	a4 f8       	bld	r10, 4
    4430:	68 94       	set
    4432:	cc 24       	eor	r12, r12
    4434:	c4 f8       	bld	r12, 4
    4436:	e1 2c       	mov	r14, r1
    4438:	00 e0       	ldi	r16, 0x00	; 0
    443a:	23 e0       	ldi	r18, 0x03	; 3
    443c:	40 e8       	ldi	r20, 0x80	; 128
    443e:	55 e2       	ldi	r21, 0x25	; 37
    4440:	60 e0       	ldi	r22, 0x00	; 0
    4442:	70 e0       	ldi	r23, 0x00	; 0
    4444:	73 d0       	rcall	.+230    	; 0x452c <serial_create>
    4446:	90 93 ac 15 	sts	0x15AC, r25	; 0x8015ac <_serial+0x1>
    444a:	80 93 ab 15 	sts	0x15AB, r24	; 0x8015ab <_serial>
    444e:	0f 91       	pop	r16
    4450:	ef 90       	pop	r14
    4452:	cf 90       	pop	r12
    4454:	af 90       	pop	r10
    4456:	9f 90       	pop	r9
    4458:	8f 90       	pop	r8
    445a:	08 95       	ret

0000445c <mh_z19_injectCallBack>:
    445c:	90 93 a7 15 	sts	0x15A7, r25	; 0x8015a7 <_appCallBack+0x1>
    4460:	80 93 a6 15 	sts	0x15A6, r24	; 0x8015a6 <_appCallBack>
    4464:	08 95       	ret

00004466 <mh_z19_takeMeassuring>:
    4466:	cf 93       	push	r28
    4468:	df 93       	push	r29
    446a:	cd b7       	in	r28, 0x3d	; 61
    446c:	de b7       	in	r29, 0x3e	; 62
    446e:	29 97       	sbiw	r28, 0x09	; 9
    4470:	0f b6       	in	r0, 0x3f	; 63
    4472:	f8 94       	cli
    4474:	de bf       	out	0x3e, r29	; 62
    4476:	0f be       	out	0x3f, r0	; 63
    4478:	cd bf       	out	0x3d, r28	; 61
    447a:	89 e0       	ldi	r24, 0x09	; 9
    447c:	e2 e4       	ldi	r30, 0x42	; 66
    447e:	f2 e0       	ldi	r31, 0x02	; 2
    4480:	9e 01       	movw	r18, r28
    4482:	2f 5f       	subi	r18, 0xFF	; 255
    4484:	3f 4f       	sbci	r19, 0xFF	; 255
    4486:	d9 01       	movw	r26, r18
    4488:	01 90       	ld	r0, Z+
    448a:	0d 92       	st	X+, r0
    448c:	8a 95       	dec	r24
    448e:	e1 f7       	brne	.-8      	; 0x4488 <mh_z19_takeMeassuring+0x22>
    4490:	10 92 aa 15 	sts	0x15AA, r1	; 0x8015aa <_ppm+0x1>
    4494:	10 92 a9 15 	sts	0x15A9, r1	; 0x8015a9 <_ppm>
    4498:	80 91 ab 15 	lds	r24, 0x15AB	; 0x8015ab <_serial>
    449c:	90 91 ac 15 	lds	r25, 0x15AC	; 0x8015ac <_serial+0x1>
    44a0:	00 97       	sbiw	r24, 0x00	; 0
    44a2:	31 f0       	breq	.+12     	; 0x44b0 <mh_z19_takeMeassuring+0x4a>
    44a4:	42 2f       	mov	r20, r18
    44a6:	53 2f       	mov	r21, r19
    44a8:	69 e0       	ldi	r22, 0x09	; 9
    44aa:	10 d1       	rcall	.+544    	; 0x46cc <serial_sendBytes>
    44ac:	80 e0       	ldi	r24, 0x00	; 0
    44ae:	01 c0       	rjmp	.+2      	; 0x44b2 <mh_z19_takeMeassuring+0x4c>
    44b0:	82 e0       	ldi	r24, 0x02	; 2
    44b2:	29 96       	adiw	r28, 0x09	; 9
    44b4:	0f b6       	in	r0, 0x3f	; 63
    44b6:	f8 94       	cli
    44b8:	de bf       	out	0x3e, r29	; 62
    44ba:	0f be       	out	0x3f, r0	; 63
    44bc:	cd bf       	out	0x3d, r28	; 61
    44be:	df 91       	pop	r29
    44c0:	cf 91       	pop	r28
    44c2:	08 95       	ret

000044c4 <rc_servo_setPosition>:
    44c4:	65 36       	cpi	r22, 0x65	; 101
    44c6:	0c f0       	brlt	.+2      	; 0x44ca <rc_servo_setPosition+0x6>
    44c8:	64 e6       	ldi	r22, 0x64	; 100
    44ca:	6c 39       	cpi	r22, 0x9C	; 156
    44cc:	0c f4       	brge	.+2      	; 0x44d0 <rc_servo_setPosition+0xc>
    44ce:	6c e9       	ldi	r22, 0x9C	; 156
    44d0:	96 ef       	ldi	r25, 0xF6	; 246
    44d2:	69 02       	muls	r22, r25
    44d4:	b0 01       	movw	r22, r0
    44d6:	11 24       	eor	r1, r1
    44d8:	68 54       	subi	r22, 0x48	; 72
    44da:	74 4f       	sbci	r23, 0xF4	; 244
    44dc:	81 11       	cpse	r24, r1
    44de:	05 c0       	rjmp	.+10     	; 0x44ea <rc_servo_setPosition+0x26>
    44e0:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    44e4:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    44e8:	08 95       	ret
    44ea:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    44ee:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    44f2:	08 95       	ret

000044f4 <rc_servo_initialise>:
    44f4:	ea e0       	ldi	r30, 0x0A	; 10
    44f6:	f1 e0       	ldi	r31, 0x01	; 1
    44f8:	80 81       	ld	r24, Z
    44fa:	88 61       	ori	r24, 0x18	; 24
    44fc:	80 83       	st	Z, r24
    44fe:	8f e3       	ldi	r24, 0x3F	; 63
    4500:	9c e9       	ldi	r25, 0x9C	; 156
    4502:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4506:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    450a:	60 e0       	ldi	r22, 0x00	; 0
    450c:	80 e0       	ldi	r24, 0x00	; 0
    450e:	da df       	rcall	.-76     	; 0x44c4 <rc_servo_setPosition>
    4510:	60 e0       	ldi	r22, 0x00	; 0
    4512:	81 e0       	ldi	r24, 0x01	; 1
    4514:	d7 df       	rcall	.-82     	; 0x44c4 <rc_servo_setPosition>
    4516:	e0 e2       	ldi	r30, 0x20	; 32
    4518:	f1 e0       	ldi	r31, 0x01	; 1
    451a:	80 81       	ld	r24, Z
    451c:	82 6a       	ori	r24, 0xA2	; 162
    451e:	80 83       	st	Z, r24
    4520:	e1 e2       	ldi	r30, 0x21	; 33
    4522:	f1 e0       	ldi	r31, 0x01	; 1
    4524:	80 81       	ld	r24, Z
    4526:	8a 61       	ori	r24, 0x1A	; 26
    4528:	80 83       	st	Z, r24
    452a:	08 95       	ret

0000452c <serial_create>:
    452c:	2f 92       	push	r2
    452e:	3f 92       	push	r3
    4530:	4f 92       	push	r4
    4532:	5f 92       	push	r5
    4534:	6f 92       	push	r6
    4536:	7f 92       	push	r7
    4538:	8f 92       	push	r8
    453a:	9f 92       	push	r9
    453c:	af 92       	push	r10
    453e:	cf 92       	push	r12
    4540:	ef 92       	push	r14
    4542:	ff 92       	push	r15
    4544:	0f 93       	push	r16
    4546:	1f 93       	push	r17
    4548:	cf 93       	push	r28
    454a:	df 93       	push	r29
    454c:	cd b7       	in	r28, 0x3d	; 61
    454e:	de b7       	in	r29, 0x3e	; 62
    4550:	f8 2e       	mov	r15, r24
    4552:	2a 01       	movw	r4, r20
    4554:	3b 01       	movw	r6, r22
    4556:	88 e0       	ldi	r24, 0x08	; 8
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <malloc>
    455e:	8c 01       	movw	r16, r24
    4560:	8f 2d       	mov	r24, r15
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	fc 01       	movw	r30, r24
    4566:	ee 0f       	add	r30, r30
    4568:	ff 1f       	adc	r31, r31
    456a:	e3 55       	subi	r30, 0x53	; 83
    456c:	fa 4e       	sbci	r31, 0xEA	; 234
    456e:	11 83       	std	Z+1, r17	; 0x01
    4570:	00 83       	st	Z, r16
    4572:	01 15       	cp	r16, r1
    4574:	11 05       	cpc	r17, r1
    4576:	09 f4       	brne	.+2      	; 0x457a <serial_create+0x4e>
    4578:	6c c0       	rjmp	.+216    	; 0x4652 <serial_create+0x126>
    457a:	88 0f       	add	r24, r24
    457c:	99 1f       	adc	r25, r25
    457e:	fc 01       	movw	r30, r24
    4580:	e5 5f       	subi	r30, 0xF5	; 245
    4582:	fd 4f       	sbci	r31, 0xFD	; 253
    4584:	80 81       	ld	r24, Z
    4586:	91 81       	ldd	r25, Z+1	; 0x01
    4588:	d8 01       	movw	r26, r16
    458a:	8d 93       	st	X+, r24
    458c:	9c 93       	st	X, r25
    458e:	8c 2d       	mov	r24, r12
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	88 0f       	add	r24, r24
    4594:	99 1f       	adc	r25, r25
    4596:	88 0f       	add	r24, r24
    4598:	99 1f       	adc	r25, r25
    459a:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <malloc>
    459e:	1c 01       	movw	r2, r24
    45a0:	86 e0       	ldi	r24, 0x06	; 6
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <malloc>
    45a8:	7c 01       	movw	r14, r24
    45aa:	4c 2d       	mov	r20, r12
    45ac:	b1 01       	movw	r22, r2
    45ae:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <fifo_init>
    45b2:	f8 01       	movw	r30, r16
    45b4:	f5 82       	std	Z+5, r15	; 0x05
    45b6:	e4 82       	std	Z+4, r14	; 0x04
    45b8:	8a 2d       	mov	r24, r10
    45ba:	90 e0       	ldi	r25, 0x00	; 0
    45bc:	88 0f       	add	r24, r24
    45be:	99 1f       	adc	r25, r25
    45c0:	88 0f       	add	r24, r24
    45c2:	99 1f       	adc	r25, r25
    45c4:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <malloc>
    45c8:	1c 01       	movw	r2, r24
    45ca:	86 e0       	ldi	r24, 0x06	; 6
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <malloc>
    45d2:	7c 01       	movw	r14, r24
    45d4:	4a 2d       	mov	r20, r10
    45d6:	b1 01       	movw	r22, r2
    45d8:	f4 d7       	rcall	.+4072   	; 0x55c2 <fifo_init>
    45da:	d8 01       	movw	r26, r16
    45dc:	13 96       	adiw	r26, 0x03	; 3
    45de:	fc 92       	st	X, r15
    45e0:	ee 92       	st	-X, r14
    45e2:	12 97       	sbiw	r26, 0x02	; 2
    45e4:	17 96       	adiw	r26, 0x07	; 7
    45e6:	9c 92       	st	X, r9
    45e8:	8e 92       	st	-X, r8
    45ea:	16 97       	sbiw	r26, 0x06	; 6
    45ec:	ff b6       	in	r15, 0x3f	; 63
    45ee:	f8 94       	cli
    45f0:	ed 91       	ld	r30, X+
    45f2:	fc 91       	ld	r31, X
    45f4:	11 97       	sbiw	r26, 0x01	; 1
    45f6:	36 97       	sbiw	r30, 0x06	; 6
    45f8:	80 81       	ld	r24, Z
    45fa:	82 60       	ori	r24, 0x02	; 2
    45fc:	80 83       	st	Z, r24
    45fe:	8d 90       	ld	r8, X+
    4600:	9c 90       	ld	r9, X
    4602:	c3 01       	movw	r24, r6
    4604:	b2 01       	movw	r22, r4
    4606:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__floatunsisf>
    460a:	20 e0       	ldi	r18, 0x00	; 0
    460c:	30 e0       	ldi	r19, 0x00	; 0
    460e:	40 e0       	ldi	r20, 0x00	; 0
    4610:	51 e4       	ldi	r21, 0x41	; 65
    4612:	0e 94 3f 2c 	call	0x587e	; 0x587e <__mulsf3>
    4616:	9b 01       	movw	r18, r22
    4618:	ac 01       	movw	r20, r24
    461a:	60 e0       	ldi	r22, 0x00	; 0
    461c:	74 e2       	ldi	r23, 0x24	; 36
    461e:	84 e7       	ldi	r24, 0x74	; 116
    4620:	9b e4       	ldi	r25, 0x4B	; 75
    4622:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <__divsf3>
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	40 e8       	ldi	r20, 0x80	; 128
    462c:	5f e3       	ldi	r21, 0x3F	; 63
    462e:	e5 d7       	rcall	.+4042   	; 0x55fa <__subsf3>
    4630:	25 d9       	rcall	.-3510   	; 0x387c <__fixunssfsi>
    4632:	f4 01       	movw	r30, r8
    4634:	32 97       	sbiw	r30, 0x02	; 2
    4636:	60 83       	st	Z, r22
    4638:	d8 01       	movw	r26, r16
    463a:	ed 91       	ld	r30, X+
    463c:	fc 91       	ld	r31, X
    463e:	11 97       	sbiw	r26, 0x01	; 1
    4640:	35 97       	sbiw	r30, 0x05	; 5
    4642:	88 e9       	ldi	r24, 0x98	; 152
    4644:	80 83       	st	Z, r24
    4646:	ed 91       	ld	r30, X+
    4648:	fc 91       	ld	r31, X
    464a:	34 97       	sbiw	r30, 0x04	; 4
    464c:	86 e0       	ldi	r24, 0x06	; 6
    464e:	80 83       	st	Z, r24
    4650:	ff be       	out	0x3f, r15	; 63
    4652:	c8 01       	movw	r24, r16
    4654:	df 91       	pop	r29
    4656:	cf 91       	pop	r28
    4658:	1f 91       	pop	r17
    465a:	0f 91       	pop	r16
    465c:	ff 90       	pop	r15
    465e:	ef 90       	pop	r14
    4660:	cf 90       	pop	r12
    4662:	af 90       	pop	r10
    4664:	9f 90       	pop	r9
    4666:	8f 90       	pop	r8
    4668:	7f 90       	pop	r7
    466a:	6f 90       	pop	r6
    466c:	5f 90       	pop	r5
    466e:	4f 90       	pop	r4
    4670:	3f 90       	pop	r3
    4672:	2f 90       	pop	r2
    4674:	08 95       	ret

00004676 <serial_sendByte>:
    4676:	cf 93       	push	r28
    4678:	df 93       	push	r29
    467a:	dc 01       	movw	r26, r24
    467c:	89 2b       	or	r24, r25
    467e:	01 f1       	breq	.+64     	; 0x46c0 <serial_sendByte+0x4a>
    4680:	12 96       	adiw	r26, 0x02	; 2
    4682:	ed 91       	ld	r30, X+
    4684:	fc 91       	ld	r31, X
    4686:	13 97       	sbiw	r26, 0x03	; 3
    4688:	93 81       	ldd	r25, Z+3	; 0x03
    468a:	82 81       	ldd	r24, Z+2	; 0x02
    468c:	25 81       	ldd	r18, Z+5	; 0x05
    468e:	98 1b       	sub	r25, r24
    4690:	92 23       	and	r25, r18
    4692:	84 81       	ldd	r24, Z+4	; 0x04
    4694:	98 17       	cp	r25, r24
    4696:	b1 f0       	breq	.+44     	; 0x46c4 <serial_sendByte+0x4e>
    4698:	83 81       	ldd	r24, Z+3	; 0x03
    469a:	26 95       	lsr	r18
    469c:	28 23       	and	r18, r24
    469e:	c0 81       	ld	r28, Z
    46a0:	d1 81       	ldd	r29, Z+1	; 0x01
    46a2:	c2 0f       	add	r28, r18
    46a4:	d1 1d       	adc	r29, r1
    46a6:	68 83       	st	Y, r22
    46a8:	8f 5f       	subi	r24, 0xFF	; 255
    46aa:	95 81       	ldd	r25, Z+5	; 0x05
    46ac:	89 23       	and	r24, r25
    46ae:	83 83       	std	Z+3, r24	; 0x03
    46b0:	ed 91       	ld	r30, X+
    46b2:	fc 91       	ld	r31, X
    46b4:	35 97       	sbiw	r30, 0x05	; 5
    46b6:	80 81       	ld	r24, Z
    46b8:	80 62       	ori	r24, 0x20	; 32
    46ba:	80 83       	st	Z, r24
    46bc:	80 e0       	ldi	r24, 0x00	; 0
    46be:	03 c0       	rjmp	.+6      	; 0x46c6 <serial_sendByte+0x50>
    46c0:	81 e0       	ldi	r24, 0x01	; 1
    46c2:	01 c0       	rjmp	.+2      	; 0x46c6 <serial_sendByte+0x50>
    46c4:	82 e0       	ldi	r24, 0x02	; 2
    46c6:	df 91       	pop	r29
    46c8:	cf 91       	pop	r28
    46ca:	08 95       	ret

000046cc <serial_sendBytes>:
    46cc:	ef 92       	push	r14
    46ce:	ff 92       	push	r15
    46d0:	0f 93       	push	r16
    46d2:	1f 93       	push	r17
    46d4:	cf 93       	push	r28
    46d6:	df 93       	push	r29
    46d8:	7c 01       	movw	r14, r24
    46da:	00 97       	sbiw	r24, 0x00	; 0
    46dc:	09 f4       	brne	.+2      	; 0x46e0 <serial_sendBytes+0x14>
    46de:	41 c0       	rjmp	.+130    	; 0x4762 <serial_sendBytes+0x96>
    46e0:	dc 01       	movw	r26, r24
    46e2:	12 96       	adiw	r26, 0x02	; 2
    46e4:	ed 91       	ld	r30, X+
    46e6:	fc 91       	ld	r31, X
    46e8:	13 97       	sbiw	r26, 0x03	; 3
    46ea:	93 81       	ldd	r25, Z+3	; 0x03
    46ec:	82 81       	ldd	r24, Z+2	; 0x02
    46ee:	98 1b       	sub	r25, r24
    46f0:	85 81       	ldd	r24, Z+5	; 0x05
    46f2:	98 23       	and	r25, r24
    46f4:	84 81       	ldd	r24, Z+4	; 0x04
    46f6:	89 1b       	sub	r24, r25
    46f8:	86 17       	cp	r24, r22
    46fa:	a8 f1       	brcs	.+106    	; 0x4766 <serial_sendBytes+0x9a>
    46fc:	66 23       	and	r22, r22
    46fe:	41 f1       	breq	.+80     	; 0x4750 <serial_sendBytes+0x84>
    4700:	84 2f       	mov	r24, r20
    4702:	95 2f       	mov	r25, r21
    4704:	dc 01       	movw	r26, r24
    4706:	61 50       	subi	r22, 0x01	; 1
    4708:	46 2f       	mov	r20, r22
    470a:	50 e0       	ldi	r21, 0x00	; 0
    470c:	4f 5f       	subi	r20, 0xFF	; 255
    470e:	5f 4f       	sbci	r21, 0xFF	; 255
    4710:	48 0f       	add	r20, r24
    4712:	59 1f       	adc	r21, r25
    4714:	e7 01       	movw	r28, r14
    4716:	ea 81       	ldd	r30, Y+2	; 0x02
    4718:	fb 81       	ldd	r31, Y+3	; 0x03
    471a:	93 81       	ldd	r25, Z+3	; 0x03
    471c:	82 81       	ldd	r24, Z+2	; 0x02
    471e:	25 81       	ldd	r18, Z+5	; 0x05
    4720:	98 1b       	sub	r25, r24
    4722:	92 23       	and	r25, r18
    4724:	84 81       	ldd	r24, Z+4	; 0x04
    4726:	98 17       	cp	r25, r24
    4728:	79 f0       	breq	.+30     	; 0x4748 <serial_sendBytes+0x7c>
    472a:	8c 91       	ld	r24, X
    472c:	93 81       	ldd	r25, Z+3	; 0x03
    472e:	26 95       	lsr	r18
    4730:	29 23       	and	r18, r25
    4732:	60 81       	ld	r22, Z
    4734:	71 81       	ldd	r23, Z+1	; 0x01
    4736:	8b 01       	movw	r16, r22
    4738:	02 0f       	add	r16, r18
    473a:	11 1d       	adc	r17, r1
    473c:	e8 01       	movw	r28, r16
    473e:	88 83       	st	Y, r24
    4740:	9f 5f       	subi	r25, 0xFF	; 255
    4742:	85 81       	ldd	r24, Z+5	; 0x05
    4744:	98 23       	and	r25, r24
    4746:	93 83       	std	Z+3, r25	; 0x03
    4748:	11 96       	adiw	r26, 0x01	; 1
    474a:	a4 17       	cp	r26, r20
    474c:	b5 07       	cpc	r27, r21
    474e:	11 f7       	brne	.-60     	; 0x4714 <serial_sendBytes+0x48>
    4750:	d7 01       	movw	r26, r14
    4752:	ed 91       	ld	r30, X+
    4754:	fc 91       	ld	r31, X
    4756:	35 97       	sbiw	r30, 0x05	; 5
    4758:	80 81       	ld	r24, Z
    475a:	80 62       	ori	r24, 0x20	; 32
    475c:	80 83       	st	Z, r24
    475e:	80 e0       	ldi	r24, 0x00	; 0
    4760:	03 c0       	rjmp	.+6      	; 0x4768 <serial_sendBytes+0x9c>
    4762:	81 e0       	ldi	r24, 0x01	; 1
    4764:	01 c0       	rjmp	.+2      	; 0x4768 <serial_sendBytes+0x9c>
    4766:	82 e0       	ldi	r24, 0x02	; 2
    4768:	df 91       	pop	r29
    476a:	cf 91       	pop	r28
    476c:	1f 91       	pop	r17
    476e:	0f 91       	pop	r16
    4770:	ff 90       	pop	r15
    4772:	ef 90       	pop	r14
    4774:	08 95       	ret

00004776 <serial_getByte>:
    4776:	00 97       	sbiw	r24, 0x00	; 0
    4778:	d1 f0       	breq	.+52     	; 0x47ae <serial_getByte+0x38>
    477a:	dc 01       	movw	r26, r24
    477c:	14 96       	adiw	r26, 0x04	; 4
    477e:	ed 91       	ld	r30, X+
    4780:	fc 91       	ld	r31, X
    4782:	15 97       	sbiw	r26, 0x05	; 5
    4784:	93 81       	ldd	r25, Z+3	; 0x03
    4786:	82 81       	ldd	r24, Z+2	; 0x02
    4788:	98 17       	cp	r25, r24
    478a:	99 f0       	breq	.+38     	; 0x47b2 <serial_getByte+0x3c>
    478c:	92 81       	ldd	r25, Z+2	; 0x02
    478e:	85 81       	ldd	r24, Z+5	; 0x05
    4790:	86 95       	lsr	r24
    4792:	89 23       	and	r24, r25
    4794:	a0 81       	ld	r26, Z
    4796:	b1 81       	ldd	r27, Z+1	; 0x01
    4798:	a8 0f       	add	r26, r24
    479a:	b1 1d       	adc	r27, r1
    479c:	8c 91       	ld	r24, X
    479e:	db 01       	movw	r26, r22
    47a0:	8c 93       	st	X, r24
    47a2:	9f 5f       	subi	r25, 0xFF	; 255
    47a4:	85 81       	ldd	r24, Z+5	; 0x05
    47a6:	98 23       	and	r25, r24
    47a8:	92 83       	std	Z+2, r25	; 0x02
    47aa:	80 e0       	ldi	r24, 0x00	; 0
    47ac:	08 95       	ret
    47ae:	81 e0       	ldi	r24, 0x01	; 1
    47b0:	08 95       	ret
    47b2:	83 e0       	ldi	r24, 0x03	; 3
    47b4:	08 95       	ret

000047b6 <__vector_25>:
    47b6:	1f 92       	push	r1
    47b8:	0f 92       	push	r0
    47ba:	0f b6       	in	r0, 0x3f	; 63
    47bc:	0f 92       	push	r0
    47be:	11 24       	eor	r1, r1
    47c0:	0b b6       	in	r0, 0x3b	; 59
    47c2:	0f 92       	push	r0
    47c4:	2f 93       	push	r18
    47c6:	3f 93       	push	r19
    47c8:	4f 93       	push	r20
    47ca:	5f 93       	push	r21
    47cc:	6f 93       	push	r22
    47ce:	7f 93       	push	r23
    47d0:	8f 93       	push	r24
    47d2:	9f 93       	push	r25
    47d4:	af 93       	push	r26
    47d6:	bf 93       	push	r27
    47d8:	cf 93       	push	r28
    47da:	df 93       	push	r29
    47dc:	ef 93       	push	r30
    47de:	ff 93       	push	r31
    47e0:	a0 91 ad 15 	lds	r26, 0x15AD	; 0x8015ad <_ser_handle>
    47e4:	b0 91 ae 15 	lds	r27, 0x15AE	; 0x8015ae <_ser_handle+0x1>
    47e8:	10 97       	sbiw	r26, 0x00	; 0
    47ea:	11 f1       	breq	.+68     	; 0x4830 <__vector_25+0x7a>
    47ec:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    47f0:	14 96       	adiw	r26, 0x04	; 4
    47f2:	ed 91       	ld	r30, X+
    47f4:	fc 91       	ld	r31, X
    47f6:	15 97       	sbiw	r26, 0x05	; 5
    47f8:	93 81       	ldd	r25, Z+3	; 0x03
    47fa:	82 81       	ldd	r24, Z+2	; 0x02
    47fc:	25 81       	ldd	r18, Z+5	; 0x05
    47fe:	98 1b       	sub	r25, r24
    4800:	92 23       	and	r25, r18
    4802:	84 81       	ldd	r24, Z+4	; 0x04
    4804:	98 17       	cp	r25, r24
    4806:	61 f0       	breq	.+24     	; 0x4820 <__vector_25+0x6a>
    4808:	83 81       	ldd	r24, Z+3	; 0x03
    480a:	26 95       	lsr	r18
    480c:	28 23       	and	r18, r24
    480e:	c0 81       	ld	r28, Z
    4810:	d1 81       	ldd	r29, Z+1	; 0x01
    4812:	c2 0f       	add	r28, r18
    4814:	d1 1d       	adc	r29, r1
    4816:	68 83       	st	Y, r22
    4818:	8f 5f       	subi	r24, 0xFF	; 255
    481a:	95 81       	ldd	r25, Z+5	; 0x05
    481c:	89 23       	and	r24, r25
    481e:	83 83       	std	Z+3, r24	; 0x03
    4820:	16 96       	adiw	r26, 0x06	; 6
    4822:	ed 91       	ld	r30, X+
    4824:	fc 91       	ld	r31, X
    4826:	17 97       	sbiw	r26, 0x07	; 7
    4828:	30 97       	sbiw	r30, 0x00	; 0
    482a:	11 f0       	breq	.+4      	; 0x4830 <__vector_25+0x7a>
    482c:	cd 01       	movw	r24, r26
    482e:	19 95       	eicall
    4830:	ff 91       	pop	r31
    4832:	ef 91       	pop	r30
    4834:	df 91       	pop	r29
    4836:	cf 91       	pop	r28
    4838:	bf 91       	pop	r27
    483a:	af 91       	pop	r26
    483c:	9f 91       	pop	r25
    483e:	8f 91       	pop	r24
    4840:	7f 91       	pop	r23
    4842:	6f 91       	pop	r22
    4844:	5f 91       	pop	r21
    4846:	4f 91       	pop	r20
    4848:	3f 91       	pop	r19
    484a:	2f 91       	pop	r18
    484c:	0f 90       	pop	r0
    484e:	0b be       	out	0x3b, r0	; 59
    4850:	0f 90       	pop	r0
    4852:	0f be       	out	0x3f, r0	; 63
    4854:	0f 90       	pop	r0
    4856:	1f 90       	pop	r1
    4858:	18 95       	reti

0000485a <__vector_26>:
    485a:	1f 92       	push	r1
    485c:	0f 92       	push	r0
    485e:	0f b6       	in	r0, 0x3f	; 63
    4860:	0f 92       	push	r0
    4862:	11 24       	eor	r1, r1
    4864:	0b b6       	in	r0, 0x3b	; 59
    4866:	0f 92       	push	r0
    4868:	2f 93       	push	r18
    486a:	8f 93       	push	r24
    486c:	9f 93       	push	r25
    486e:	af 93       	push	r26
    4870:	bf 93       	push	r27
    4872:	ef 93       	push	r30
    4874:	ff 93       	push	r31
    4876:	e0 91 ad 15 	lds	r30, 0x15AD	; 0x8015ad <_ser_handle>
    487a:	f0 91 ae 15 	lds	r31, 0x15AE	; 0x8015ae <_ser_handle+0x1>
    487e:	30 97       	sbiw	r30, 0x00	; 0
    4880:	b9 f0       	breq	.+46     	; 0x48b0 <__vector_26+0x56>
    4882:	02 80       	ldd	r0, Z+2	; 0x02
    4884:	f3 81       	ldd	r31, Z+3	; 0x03
    4886:	e0 2d       	mov	r30, r0
    4888:	93 81       	ldd	r25, Z+3	; 0x03
    488a:	82 81       	ldd	r24, Z+2	; 0x02
    488c:	98 17       	cp	r25, r24
    488e:	b1 f0       	breq	.+44     	; 0x48bc <__vector_26+0x62>
    4890:	92 81       	ldd	r25, Z+2	; 0x02
    4892:	85 81       	ldd	r24, Z+5	; 0x05
    4894:	28 2f       	mov	r18, r24
    4896:	26 95       	lsr	r18
    4898:	29 23       	and	r18, r25
    489a:	a0 81       	ld	r26, Z
    489c:	b1 81       	ldd	r27, Z+1	; 0x01
    489e:	a2 0f       	add	r26, r18
    48a0:	b1 1d       	adc	r27, r1
    48a2:	2c 91       	ld	r18, X
    48a4:	9f 5f       	subi	r25, 0xFF	; 255
    48a6:	89 23       	and	r24, r25
    48a8:	82 83       	std	Z+2, r24	; 0x02
    48aa:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    48ae:	0b c0       	rjmp	.+22     	; 0x48c6 <__vector_26+0x6c>
    48b0:	e1 ec       	ldi	r30, 0xC1	; 193
    48b2:	f0 e0       	ldi	r31, 0x00	; 0
    48b4:	80 81       	ld	r24, Z
    48b6:	8f 7d       	andi	r24, 0xDF	; 223
    48b8:	80 83       	st	Z, r24
    48ba:	05 c0       	rjmp	.+10     	; 0x48c6 <__vector_26+0x6c>
    48bc:	e1 ec       	ldi	r30, 0xC1	; 193
    48be:	f0 e0       	ldi	r31, 0x00	; 0
    48c0:	80 81       	ld	r24, Z
    48c2:	8f 7d       	andi	r24, 0xDF	; 223
    48c4:	80 83       	st	Z, r24
    48c6:	ff 91       	pop	r31
    48c8:	ef 91       	pop	r30
    48ca:	bf 91       	pop	r27
    48cc:	af 91       	pop	r26
    48ce:	9f 91       	pop	r25
    48d0:	8f 91       	pop	r24
    48d2:	2f 91       	pop	r18
    48d4:	0f 90       	pop	r0
    48d6:	0b be       	out	0x3b, r0	; 59
    48d8:	0f 90       	pop	r0
    48da:	0f be       	out	0x3f, r0	; 63
    48dc:	0f 90       	pop	r0
    48de:	1f 90       	pop	r1
    48e0:	18 95       	reti

000048e2 <__vector_36>:
    48e2:	1f 92       	push	r1
    48e4:	0f 92       	push	r0
    48e6:	0f b6       	in	r0, 0x3f	; 63
    48e8:	0f 92       	push	r0
    48ea:	11 24       	eor	r1, r1
    48ec:	0b b6       	in	r0, 0x3b	; 59
    48ee:	0f 92       	push	r0
    48f0:	2f 93       	push	r18
    48f2:	3f 93       	push	r19
    48f4:	4f 93       	push	r20
    48f6:	5f 93       	push	r21
    48f8:	6f 93       	push	r22
    48fa:	7f 93       	push	r23
    48fc:	8f 93       	push	r24
    48fe:	9f 93       	push	r25
    4900:	af 93       	push	r26
    4902:	bf 93       	push	r27
    4904:	cf 93       	push	r28
    4906:	df 93       	push	r29
    4908:	ef 93       	push	r30
    490a:	ff 93       	push	r31
    490c:	a0 91 af 15 	lds	r26, 0x15AF	; 0x8015af <_ser_handle+0x2>
    4910:	b0 91 b0 15 	lds	r27, 0x15B0	; 0x8015b0 <_ser_handle+0x3>
    4914:	10 97       	sbiw	r26, 0x00	; 0
    4916:	11 f1       	breq	.+68     	; 0x495c <__vector_36+0x7a>
    4918:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    491c:	14 96       	adiw	r26, 0x04	; 4
    491e:	ed 91       	ld	r30, X+
    4920:	fc 91       	ld	r31, X
    4922:	15 97       	sbiw	r26, 0x05	; 5
    4924:	93 81       	ldd	r25, Z+3	; 0x03
    4926:	82 81       	ldd	r24, Z+2	; 0x02
    4928:	25 81       	ldd	r18, Z+5	; 0x05
    492a:	98 1b       	sub	r25, r24
    492c:	92 23       	and	r25, r18
    492e:	84 81       	ldd	r24, Z+4	; 0x04
    4930:	98 17       	cp	r25, r24
    4932:	61 f0       	breq	.+24     	; 0x494c <__vector_36+0x6a>
    4934:	83 81       	ldd	r24, Z+3	; 0x03
    4936:	26 95       	lsr	r18
    4938:	28 23       	and	r18, r24
    493a:	c0 81       	ld	r28, Z
    493c:	d1 81       	ldd	r29, Z+1	; 0x01
    493e:	c2 0f       	add	r28, r18
    4940:	d1 1d       	adc	r29, r1
    4942:	68 83       	st	Y, r22
    4944:	8f 5f       	subi	r24, 0xFF	; 255
    4946:	95 81       	ldd	r25, Z+5	; 0x05
    4948:	89 23       	and	r24, r25
    494a:	83 83       	std	Z+3, r24	; 0x03
    494c:	16 96       	adiw	r26, 0x06	; 6
    494e:	ed 91       	ld	r30, X+
    4950:	fc 91       	ld	r31, X
    4952:	17 97       	sbiw	r26, 0x07	; 7
    4954:	30 97       	sbiw	r30, 0x00	; 0
    4956:	11 f0       	breq	.+4      	; 0x495c <__vector_36+0x7a>
    4958:	cd 01       	movw	r24, r26
    495a:	19 95       	eicall
    495c:	ff 91       	pop	r31
    495e:	ef 91       	pop	r30
    4960:	df 91       	pop	r29
    4962:	cf 91       	pop	r28
    4964:	bf 91       	pop	r27
    4966:	af 91       	pop	r26
    4968:	9f 91       	pop	r25
    496a:	8f 91       	pop	r24
    496c:	7f 91       	pop	r23
    496e:	6f 91       	pop	r22
    4970:	5f 91       	pop	r21
    4972:	4f 91       	pop	r20
    4974:	3f 91       	pop	r19
    4976:	2f 91       	pop	r18
    4978:	0f 90       	pop	r0
    497a:	0b be       	out	0x3b, r0	; 59
    497c:	0f 90       	pop	r0
    497e:	0f be       	out	0x3f, r0	; 63
    4980:	0f 90       	pop	r0
    4982:	1f 90       	pop	r1
    4984:	18 95       	reti

00004986 <__vector_37>:
    4986:	1f 92       	push	r1
    4988:	0f 92       	push	r0
    498a:	0f b6       	in	r0, 0x3f	; 63
    498c:	0f 92       	push	r0
    498e:	11 24       	eor	r1, r1
    4990:	0b b6       	in	r0, 0x3b	; 59
    4992:	0f 92       	push	r0
    4994:	2f 93       	push	r18
    4996:	8f 93       	push	r24
    4998:	9f 93       	push	r25
    499a:	af 93       	push	r26
    499c:	bf 93       	push	r27
    499e:	ef 93       	push	r30
    49a0:	ff 93       	push	r31
    49a2:	e0 91 af 15 	lds	r30, 0x15AF	; 0x8015af <_ser_handle+0x2>
    49a6:	f0 91 b0 15 	lds	r31, 0x15B0	; 0x8015b0 <_ser_handle+0x3>
    49aa:	30 97       	sbiw	r30, 0x00	; 0
    49ac:	b9 f0       	breq	.+46     	; 0x49dc <__vector_37+0x56>
    49ae:	02 80       	ldd	r0, Z+2	; 0x02
    49b0:	f3 81       	ldd	r31, Z+3	; 0x03
    49b2:	e0 2d       	mov	r30, r0
    49b4:	93 81       	ldd	r25, Z+3	; 0x03
    49b6:	82 81       	ldd	r24, Z+2	; 0x02
    49b8:	98 17       	cp	r25, r24
    49ba:	b1 f0       	breq	.+44     	; 0x49e8 <__vector_37+0x62>
    49bc:	92 81       	ldd	r25, Z+2	; 0x02
    49be:	85 81       	ldd	r24, Z+5	; 0x05
    49c0:	28 2f       	mov	r18, r24
    49c2:	26 95       	lsr	r18
    49c4:	29 23       	and	r18, r25
    49c6:	a0 81       	ld	r26, Z
    49c8:	b1 81       	ldd	r27, Z+1	; 0x01
    49ca:	a2 0f       	add	r26, r18
    49cc:	b1 1d       	adc	r27, r1
    49ce:	2c 91       	ld	r18, X
    49d0:	9f 5f       	subi	r25, 0xFF	; 255
    49d2:	89 23       	and	r24, r25
    49d4:	82 83       	std	Z+2, r24	; 0x02
    49d6:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    49da:	0b c0       	rjmp	.+22     	; 0x49f2 <__vector_37+0x6c>
    49dc:	e9 ec       	ldi	r30, 0xC9	; 201
    49de:	f0 e0       	ldi	r31, 0x00	; 0
    49e0:	80 81       	ld	r24, Z
    49e2:	8f 7d       	andi	r24, 0xDF	; 223
    49e4:	80 83       	st	Z, r24
    49e6:	05 c0       	rjmp	.+10     	; 0x49f2 <__vector_37+0x6c>
    49e8:	e9 ec       	ldi	r30, 0xC9	; 201
    49ea:	f0 e0       	ldi	r31, 0x00	; 0
    49ec:	80 81       	ld	r24, Z
    49ee:	8f 7d       	andi	r24, 0xDF	; 223
    49f0:	80 83       	st	Z, r24
    49f2:	ff 91       	pop	r31
    49f4:	ef 91       	pop	r30
    49f6:	bf 91       	pop	r27
    49f8:	af 91       	pop	r26
    49fa:	9f 91       	pop	r25
    49fc:	8f 91       	pop	r24
    49fe:	2f 91       	pop	r18
    4a00:	0f 90       	pop	r0
    4a02:	0b be       	out	0x3b, r0	; 59
    4a04:	0f 90       	pop	r0
    4a06:	0f be       	out	0x3f, r0	; 63
    4a08:	0f 90       	pop	r0
    4a0a:	1f 90       	pop	r1
    4a0c:	18 95       	reti

00004a0e <__vector_51>:
    4a0e:	1f 92       	push	r1
    4a10:	0f 92       	push	r0
    4a12:	0f b6       	in	r0, 0x3f	; 63
    4a14:	0f 92       	push	r0
    4a16:	11 24       	eor	r1, r1
    4a18:	0b b6       	in	r0, 0x3b	; 59
    4a1a:	0f 92       	push	r0
    4a1c:	2f 93       	push	r18
    4a1e:	3f 93       	push	r19
    4a20:	4f 93       	push	r20
    4a22:	5f 93       	push	r21
    4a24:	6f 93       	push	r22
    4a26:	7f 93       	push	r23
    4a28:	8f 93       	push	r24
    4a2a:	9f 93       	push	r25
    4a2c:	af 93       	push	r26
    4a2e:	bf 93       	push	r27
    4a30:	cf 93       	push	r28
    4a32:	df 93       	push	r29
    4a34:	ef 93       	push	r30
    4a36:	ff 93       	push	r31
    4a38:	a0 91 b1 15 	lds	r26, 0x15B1	; 0x8015b1 <_ser_handle+0x4>
    4a3c:	b0 91 b2 15 	lds	r27, 0x15B2	; 0x8015b2 <_ser_handle+0x5>
    4a40:	10 97       	sbiw	r26, 0x00	; 0
    4a42:	11 f1       	breq	.+68     	; 0x4a88 <__vector_51+0x7a>
    4a44:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4a48:	14 96       	adiw	r26, 0x04	; 4
    4a4a:	ed 91       	ld	r30, X+
    4a4c:	fc 91       	ld	r31, X
    4a4e:	15 97       	sbiw	r26, 0x05	; 5
    4a50:	93 81       	ldd	r25, Z+3	; 0x03
    4a52:	82 81       	ldd	r24, Z+2	; 0x02
    4a54:	25 81       	ldd	r18, Z+5	; 0x05
    4a56:	98 1b       	sub	r25, r24
    4a58:	92 23       	and	r25, r18
    4a5a:	84 81       	ldd	r24, Z+4	; 0x04
    4a5c:	98 17       	cp	r25, r24
    4a5e:	61 f0       	breq	.+24     	; 0x4a78 <__vector_51+0x6a>
    4a60:	83 81       	ldd	r24, Z+3	; 0x03
    4a62:	26 95       	lsr	r18
    4a64:	28 23       	and	r18, r24
    4a66:	c0 81       	ld	r28, Z
    4a68:	d1 81       	ldd	r29, Z+1	; 0x01
    4a6a:	c2 0f       	add	r28, r18
    4a6c:	d1 1d       	adc	r29, r1
    4a6e:	68 83       	st	Y, r22
    4a70:	8f 5f       	subi	r24, 0xFF	; 255
    4a72:	95 81       	ldd	r25, Z+5	; 0x05
    4a74:	89 23       	and	r24, r25
    4a76:	83 83       	std	Z+3, r24	; 0x03
    4a78:	16 96       	adiw	r26, 0x06	; 6
    4a7a:	ed 91       	ld	r30, X+
    4a7c:	fc 91       	ld	r31, X
    4a7e:	17 97       	sbiw	r26, 0x07	; 7
    4a80:	30 97       	sbiw	r30, 0x00	; 0
    4a82:	11 f0       	breq	.+4      	; 0x4a88 <__vector_51+0x7a>
    4a84:	cd 01       	movw	r24, r26
    4a86:	19 95       	eicall
    4a88:	ff 91       	pop	r31
    4a8a:	ef 91       	pop	r30
    4a8c:	df 91       	pop	r29
    4a8e:	cf 91       	pop	r28
    4a90:	bf 91       	pop	r27
    4a92:	af 91       	pop	r26
    4a94:	9f 91       	pop	r25
    4a96:	8f 91       	pop	r24
    4a98:	7f 91       	pop	r23
    4a9a:	6f 91       	pop	r22
    4a9c:	5f 91       	pop	r21
    4a9e:	4f 91       	pop	r20
    4aa0:	3f 91       	pop	r19
    4aa2:	2f 91       	pop	r18
    4aa4:	0f 90       	pop	r0
    4aa6:	0b be       	out	0x3b, r0	; 59
    4aa8:	0f 90       	pop	r0
    4aaa:	0f be       	out	0x3f, r0	; 63
    4aac:	0f 90       	pop	r0
    4aae:	1f 90       	pop	r1
    4ab0:	18 95       	reti

00004ab2 <__vector_52>:
    4ab2:	1f 92       	push	r1
    4ab4:	0f 92       	push	r0
    4ab6:	0f b6       	in	r0, 0x3f	; 63
    4ab8:	0f 92       	push	r0
    4aba:	11 24       	eor	r1, r1
    4abc:	0b b6       	in	r0, 0x3b	; 59
    4abe:	0f 92       	push	r0
    4ac0:	2f 93       	push	r18
    4ac2:	8f 93       	push	r24
    4ac4:	9f 93       	push	r25
    4ac6:	af 93       	push	r26
    4ac8:	bf 93       	push	r27
    4aca:	ef 93       	push	r30
    4acc:	ff 93       	push	r31
    4ace:	e0 91 b1 15 	lds	r30, 0x15B1	; 0x8015b1 <_ser_handle+0x4>
    4ad2:	f0 91 b2 15 	lds	r31, 0x15B2	; 0x8015b2 <_ser_handle+0x5>
    4ad6:	30 97       	sbiw	r30, 0x00	; 0
    4ad8:	b9 f0       	breq	.+46     	; 0x4b08 <__vector_52+0x56>
    4ada:	02 80       	ldd	r0, Z+2	; 0x02
    4adc:	f3 81       	ldd	r31, Z+3	; 0x03
    4ade:	e0 2d       	mov	r30, r0
    4ae0:	93 81       	ldd	r25, Z+3	; 0x03
    4ae2:	82 81       	ldd	r24, Z+2	; 0x02
    4ae4:	98 17       	cp	r25, r24
    4ae6:	b1 f0       	breq	.+44     	; 0x4b14 <__vector_52+0x62>
    4ae8:	92 81       	ldd	r25, Z+2	; 0x02
    4aea:	85 81       	ldd	r24, Z+5	; 0x05
    4aec:	28 2f       	mov	r18, r24
    4aee:	26 95       	lsr	r18
    4af0:	29 23       	and	r18, r25
    4af2:	a0 81       	ld	r26, Z
    4af4:	b1 81       	ldd	r27, Z+1	; 0x01
    4af6:	a2 0f       	add	r26, r18
    4af8:	b1 1d       	adc	r27, r1
    4afa:	2c 91       	ld	r18, X
    4afc:	9f 5f       	subi	r25, 0xFF	; 255
    4afe:	89 23       	and	r24, r25
    4b00:	82 83       	std	Z+2, r24	; 0x02
    4b02:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4b06:	0b c0       	rjmp	.+22     	; 0x4b1e <__vector_52+0x6c>
    4b08:	e1 ed       	ldi	r30, 0xD1	; 209
    4b0a:	f0 e0       	ldi	r31, 0x00	; 0
    4b0c:	80 81       	ld	r24, Z
    4b0e:	8f 7d       	andi	r24, 0xDF	; 223
    4b10:	80 83       	st	Z, r24
    4b12:	05 c0       	rjmp	.+10     	; 0x4b1e <__vector_52+0x6c>
    4b14:	e1 ed       	ldi	r30, 0xD1	; 209
    4b16:	f0 e0       	ldi	r31, 0x00	; 0
    4b18:	80 81       	ld	r24, Z
    4b1a:	8f 7d       	andi	r24, 0xDF	; 223
    4b1c:	80 83       	st	Z, r24
    4b1e:	ff 91       	pop	r31
    4b20:	ef 91       	pop	r30
    4b22:	bf 91       	pop	r27
    4b24:	af 91       	pop	r26
    4b26:	9f 91       	pop	r25
    4b28:	8f 91       	pop	r24
    4b2a:	2f 91       	pop	r18
    4b2c:	0f 90       	pop	r0
    4b2e:	0b be       	out	0x3b, r0	; 59
    4b30:	0f 90       	pop	r0
    4b32:	0f be       	out	0x3f, r0	; 63
    4b34:	0f 90       	pop	r0
    4b36:	1f 90       	pop	r1
    4b38:	18 95       	reti

00004b3a <__vector_54>:
    4b3a:	1f 92       	push	r1
    4b3c:	0f 92       	push	r0
    4b3e:	0f b6       	in	r0, 0x3f	; 63
    4b40:	0f 92       	push	r0
    4b42:	11 24       	eor	r1, r1
    4b44:	0b b6       	in	r0, 0x3b	; 59
    4b46:	0f 92       	push	r0
    4b48:	2f 93       	push	r18
    4b4a:	3f 93       	push	r19
    4b4c:	4f 93       	push	r20
    4b4e:	5f 93       	push	r21
    4b50:	6f 93       	push	r22
    4b52:	7f 93       	push	r23
    4b54:	8f 93       	push	r24
    4b56:	9f 93       	push	r25
    4b58:	af 93       	push	r26
    4b5a:	bf 93       	push	r27
    4b5c:	cf 93       	push	r28
    4b5e:	df 93       	push	r29
    4b60:	ef 93       	push	r30
    4b62:	ff 93       	push	r31
    4b64:	a0 91 b3 15 	lds	r26, 0x15B3	; 0x8015b3 <_ser_handle+0x6>
    4b68:	b0 91 b4 15 	lds	r27, 0x15B4	; 0x8015b4 <_ser_handle+0x7>
    4b6c:	10 97       	sbiw	r26, 0x00	; 0
    4b6e:	11 f1       	breq	.+68     	; 0x4bb4 <__vector_54+0x7a>
    4b70:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4b74:	14 96       	adiw	r26, 0x04	; 4
    4b76:	ed 91       	ld	r30, X+
    4b78:	fc 91       	ld	r31, X
    4b7a:	15 97       	sbiw	r26, 0x05	; 5
    4b7c:	93 81       	ldd	r25, Z+3	; 0x03
    4b7e:	82 81       	ldd	r24, Z+2	; 0x02
    4b80:	25 81       	ldd	r18, Z+5	; 0x05
    4b82:	98 1b       	sub	r25, r24
    4b84:	92 23       	and	r25, r18
    4b86:	84 81       	ldd	r24, Z+4	; 0x04
    4b88:	98 17       	cp	r25, r24
    4b8a:	61 f0       	breq	.+24     	; 0x4ba4 <__vector_54+0x6a>
    4b8c:	83 81       	ldd	r24, Z+3	; 0x03
    4b8e:	26 95       	lsr	r18
    4b90:	28 23       	and	r18, r24
    4b92:	c0 81       	ld	r28, Z
    4b94:	d1 81       	ldd	r29, Z+1	; 0x01
    4b96:	c2 0f       	add	r28, r18
    4b98:	d1 1d       	adc	r29, r1
    4b9a:	68 83       	st	Y, r22
    4b9c:	8f 5f       	subi	r24, 0xFF	; 255
    4b9e:	95 81       	ldd	r25, Z+5	; 0x05
    4ba0:	89 23       	and	r24, r25
    4ba2:	83 83       	std	Z+3, r24	; 0x03
    4ba4:	16 96       	adiw	r26, 0x06	; 6
    4ba6:	ed 91       	ld	r30, X+
    4ba8:	fc 91       	ld	r31, X
    4baa:	17 97       	sbiw	r26, 0x07	; 7
    4bac:	30 97       	sbiw	r30, 0x00	; 0
    4bae:	11 f0       	breq	.+4      	; 0x4bb4 <__vector_54+0x7a>
    4bb0:	cd 01       	movw	r24, r26
    4bb2:	19 95       	eicall
    4bb4:	ff 91       	pop	r31
    4bb6:	ef 91       	pop	r30
    4bb8:	df 91       	pop	r29
    4bba:	cf 91       	pop	r28
    4bbc:	bf 91       	pop	r27
    4bbe:	af 91       	pop	r26
    4bc0:	9f 91       	pop	r25
    4bc2:	8f 91       	pop	r24
    4bc4:	7f 91       	pop	r23
    4bc6:	6f 91       	pop	r22
    4bc8:	5f 91       	pop	r21
    4bca:	4f 91       	pop	r20
    4bcc:	3f 91       	pop	r19
    4bce:	2f 91       	pop	r18
    4bd0:	0f 90       	pop	r0
    4bd2:	0b be       	out	0x3b, r0	; 59
    4bd4:	0f 90       	pop	r0
    4bd6:	0f be       	out	0x3f, r0	; 63
    4bd8:	0f 90       	pop	r0
    4bda:	1f 90       	pop	r1
    4bdc:	18 95       	reti

00004bde <__vector_55>:
    4bde:	1f 92       	push	r1
    4be0:	0f 92       	push	r0
    4be2:	0f b6       	in	r0, 0x3f	; 63
    4be4:	0f 92       	push	r0
    4be6:	11 24       	eor	r1, r1
    4be8:	0b b6       	in	r0, 0x3b	; 59
    4bea:	0f 92       	push	r0
    4bec:	2f 93       	push	r18
    4bee:	8f 93       	push	r24
    4bf0:	9f 93       	push	r25
    4bf2:	af 93       	push	r26
    4bf4:	bf 93       	push	r27
    4bf6:	ef 93       	push	r30
    4bf8:	ff 93       	push	r31
    4bfa:	e0 91 b3 15 	lds	r30, 0x15B3	; 0x8015b3 <_ser_handle+0x6>
    4bfe:	f0 91 b4 15 	lds	r31, 0x15B4	; 0x8015b4 <_ser_handle+0x7>
    4c02:	30 97       	sbiw	r30, 0x00	; 0
    4c04:	b9 f0       	breq	.+46     	; 0x4c34 <__vector_55+0x56>
    4c06:	02 80       	ldd	r0, Z+2	; 0x02
    4c08:	f3 81       	ldd	r31, Z+3	; 0x03
    4c0a:	e0 2d       	mov	r30, r0
    4c0c:	93 81       	ldd	r25, Z+3	; 0x03
    4c0e:	82 81       	ldd	r24, Z+2	; 0x02
    4c10:	98 17       	cp	r25, r24
    4c12:	b1 f0       	breq	.+44     	; 0x4c40 <__vector_55+0x62>
    4c14:	92 81       	ldd	r25, Z+2	; 0x02
    4c16:	85 81       	ldd	r24, Z+5	; 0x05
    4c18:	28 2f       	mov	r18, r24
    4c1a:	26 95       	lsr	r18
    4c1c:	29 23       	and	r18, r25
    4c1e:	a0 81       	ld	r26, Z
    4c20:	b1 81       	ldd	r27, Z+1	; 0x01
    4c22:	a2 0f       	add	r26, r18
    4c24:	b1 1d       	adc	r27, r1
    4c26:	2c 91       	ld	r18, X
    4c28:	9f 5f       	subi	r25, 0xFF	; 255
    4c2a:	89 23       	and	r24, r25
    4c2c:	82 83       	std	Z+2, r24	; 0x02
    4c2e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4c32:	0b c0       	rjmp	.+22     	; 0x4c4a <__vector_55+0x6c>
    4c34:	e1 e3       	ldi	r30, 0x31	; 49
    4c36:	f1 e0       	ldi	r31, 0x01	; 1
    4c38:	80 81       	ld	r24, Z
    4c3a:	8f 7d       	andi	r24, 0xDF	; 223
    4c3c:	80 83       	st	Z, r24
    4c3e:	05 c0       	rjmp	.+10     	; 0x4c4a <__vector_55+0x6c>
    4c40:	e1 e3       	ldi	r30, 0x31	; 49
    4c42:	f1 e0       	ldi	r31, 0x01	; 1
    4c44:	80 81       	ld	r24, Z
    4c46:	8f 7d       	andi	r24, 0xDF	; 223
    4c48:	80 83       	st	Z, r24
    4c4a:	ff 91       	pop	r31
    4c4c:	ef 91       	pop	r30
    4c4e:	bf 91       	pop	r27
    4c50:	af 91       	pop	r26
    4c52:	9f 91       	pop	r25
    4c54:	8f 91       	pop	r24
    4c56:	2f 91       	pop	r18
    4c58:	0f 90       	pop	r0
    4c5a:	0b be       	out	0x3b, r0	; 59
    4c5c:	0f 90       	pop	r0
    4c5e:	0f be       	out	0x3f, r0	; 63
    4c60:	0f 90       	pop	r0
    4c62:	1f 90       	pop	r1
    4c64:	18 95       	reti

00004c66 <usart_getchar>:
    4c66:	cf 93       	push	r28
    4c68:	df 93       	push	r29
    4c6a:	1f 92       	push	r1
    4c6c:	cd b7       	in	r28, 0x3d	; 61
    4c6e:	de b7       	in	r29, 0x3e	; 62
    4c70:	be 01       	movw	r22, r28
    4c72:	6f 5f       	subi	r22, 0xFF	; 255
    4c74:	7f 4f       	sbci	r23, 0xFF	; 255
    4c76:	80 91 b5 15 	lds	r24, 0x15B5	; 0x8015b5 <_com_serial_instance>
    4c7a:	90 91 b6 15 	lds	r25, 0x15B6	; 0x8015b6 <_com_serial_instance+0x1>
    4c7e:	7b dd       	rcall	.-1290   	; 0x4776 <serial_getByte>
    4c80:	81 11       	cpse	r24, r1
    4c82:	f6 cf       	rjmp	.-20     	; 0x4c70 <usart_getchar+0xa>
    4c84:	89 81       	ldd	r24, Y+1	; 0x01
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	0f 90       	pop	r0
    4c8a:	df 91       	pop	r29
    4c8c:	cf 91       	pop	r28
    4c8e:	08 95       	ret

00004c90 <usart_putchar>:
    4c90:	68 2f       	mov	r22, r24
    4c92:	80 91 b5 15 	lds	r24, 0x15B5	; 0x8015b5 <_com_serial_instance>
    4c96:	90 91 b6 15 	lds	r25, 0x15B6	; 0x8015b6 <_com_serial_instance+0x1>
    4c9a:	ed dc       	rcall	.-1574   	; 0x4676 <serial_sendByte>
    4c9c:	80 e0       	ldi	r24, 0x00	; 0
    4c9e:	90 e0       	ldi	r25, 0x00	; 0
    4ca0:	08 95       	ret

00004ca2 <stdio_initialise>:
    4ca2:	8f 92       	push	r8
    4ca4:	9f 92       	push	r9
    4ca6:	af 92       	push	r10
    4ca8:	cf 92       	push	r12
    4caa:	ef 92       	push	r14
    4cac:	0f 93       	push	r16
    4cae:	81 2c       	mov	r8, r1
    4cb0:	91 2c       	mov	r9, r1
    4cb2:	68 94       	set
    4cb4:	aa 24       	eor	r10, r10
    4cb6:	a7 f8       	bld	r10, 7
    4cb8:	68 94       	set
    4cba:	cc 24       	eor	r12, r12
    4cbc:	c7 f8       	bld	r12, 7
    4cbe:	e1 2c       	mov	r14, r1
    4cc0:	00 e0       	ldi	r16, 0x00	; 0
    4cc2:	23 e0       	ldi	r18, 0x03	; 3
    4cc4:	40 e0       	ldi	r20, 0x00	; 0
    4cc6:	51 ee       	ldi	r21, 0xE1	; 225
    4cc8:	60 e0       	ldi	r22, 0x00	; 0
    4cca:	70 e0       	ldi	r23, 0x00	; 0
    4ccc:	2f dc       	rcall	.-1954   	; 0x452c <serial_create>
    4cce:	90 93 b6 15 	sts	0x15B6, r25	; 0x8015b6 <_com_serial_instance+0x1>
    4cd2:	80 93 b5 15 	sts	0x15B5, r24	; 0x8015b5 <_com_serial_instance>
    4cd6:	e2 e0       	ldi	r30, 0x02	; 2
    4cd8:	f6 e1       	ldi	r31, 0x16	; 22
    4cda:	83 e1       	ldi	r24, 0x13	; 19
    4cdc:	92 e0       	ldi	r25, 0x02	; 2
    4cde:	91 83       	std	Z+1, r25	; 0x01
    4ce0:	80 83       	st	Z, r24
    4ce2:	93 83       	std	Z+3, r25	; 0x03
    4ce4:	82 83       	std	Z+2, r24	; 0x02
    4ce6:	0f 91       	pop	r16
    4ce8:	ef 90       	pop	r14
    4cea:	cf 90       	pop	r12
    4cec:	af 90       	pop	r10
    4cee:	9f 90       	pop	r9
    4cf0:	8f 90       	pop	r8
    4cf2:	08 95       	ret

00004cf4 <_turn_off>:
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	fc 01       	movw	r30, r24
    4cf8:	ee 0f       	add	r30, r30
    4cfa:	ff 1f       	adc	r31, r31
    4cfc:	e8 0f       	add	r30, r24
    4cfe:	f9 1f       	adc	r31, r25
    4d00:	ee 0f       	add	r30, r30
    4d02:	ff 1f       	adc	r31, r31
    4d04:	e9 54       	subi	r30, 0x49	; 73
    4d06:	fa 4e       	sbci	r31, 0xEA	; 234
    4d08:	23 81       	ldd	r18, Z+3	; 0x03
    4d0a:	21 11       	cpse	r18, r1
    4d0c:	1f c0       	rjmp	.+62     	; 0x4d4c <_turn_off+0x58>
    4d0e:	9c 01       	movw	r18, r24
    4d10:	22 0f       	add	r18, r18
    4d12:	33 1f       	adc	r19, r19
    4d14:	f9 01       	movw	r30, r18
    4d16:	e8 0f       	add	r30, r24
    4d18:	f9 1f       	adc	r31, r25
    4d1a:	ee 0f       	add	r30, r30
    4d1c:	ff 1f       	adc	r31, r31
    4d1e:	e9 54       	subi	r30, 0x49	; 73
    4d20:	fa 4e       	sbci	r31, 0xEA	; 234
    4d22:	a0 81       	ld	r26, Z
    4d24:	b1 81       	ldd	r27, Z+1	; 0x01
    4d26:	4c 91       	ld	r20, X
    4d28:	f9 01       	movw	r30, r18
    4d2a:	e8 0f       	add	r30, r24
    4d2c:	f9 1f       	adc	r31, r25
    4d2e:	ee 0f       	add	r30, r30
    4d30:	ff 1f       	adc	r31, r31
    4d32:	e9 54       	subi	r30, 0x49	; 73
    4d34:	fa 4e       	sbci	r31, 0xEA	; 234
    4d36:	81 e0       	ldi	r24, 0x01	; 1
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	02 80       	ldd	r0, Z+2	; 0x02
    4d3c:	02 c0       	rjmp	.+4      	; 0x4d42 <_turn_off+0x4e>
    4d3e:	88 0f       	add	r24, r24
    4d40:	99 1f       	adc	r25, r25
    4d42:	0a 94       	dec	r0
    4d44:	e2 f7       	brpl	.-8      	; 0x4d3e <_turn_off+0x4a>
    4d46:	84 2b       	or	r24, r20
    4d48:	8c 93       	st	X, r24
    4d4a:	08 95       	ret
    4d4c:	fc 01       	movw	r30, r24
    4d4e:	ee 0f       	add	r30, r30
    4d50:	ff 1f       	adc	r31, r31
    4d52:	df 01       	movw	r26, r30
    4d54:	a8 0f       	add	r26, r24
    4d56:	b9 1f       	adc	r27, r25
    4d58:	aa 0f       	add	r26, r26
    4d5a:	bb 1f       	adc	r27, r27
    4d5c:	a9 54       	subi	r26, 0x49	; 73
    4d5e:	ba 4e       	sbci	r27, 0xEA	; 234
    4d60:	0d 90       	ld	r0, X+
    4d62:	bc 91       	ld	r27, X
    4d64:	a0 2d       	mov	r26, r0
    4d66:	2c 91       	ld	r18, X
    4d68:	e8 0f       	add	r30, r24
    4d6a:	f9 1f       	adc	r31, r25
    4d6c:	ee 0f       	add	r30, r30
    4d6e:	ff 1f       	adc	r31, r31
    4d70:	e9 54       	subi	r30, 0x49	; 73
    4d72:	fa 4e       	sbci	r31, 0xEA	; 234
    4d74:	81 e0       	ldi	r24, 0x01	; 1
    4d76:	90 e0       	ldi	r25, 0x00	; 0
    4d78:	02 80       	ldd	r0, Z+2	; 0x02
    4d7a:	02 c0       	rjmp	.+4      	; 0x4d80 <_turn_off+0x8c>
    4d7c:	88 0f       	add	r24, r24
    4d7e:	99 1f       	adc	r25, r25
    4d80:	0a 94       	dec	r0
    4d82:	e2 f7       	brpl	.-8      	; 0x4d7c <_turn_off+0x88>
    4d84:	80 95       	com	r24
    4d86:	82 23       	and	r24, r18
    4d88:	8c 93       	st	X, r24
    4d8a:	08 95       	ret

00004d8c <_turn_on>:
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	fc 01       	movw	r30, r24
    4d90:	ee 0f       	add	r30, r30
    4d92:	ff 1f       	adc	r31, r31
    4d94:	e8 0f       	add	r30, r24
    4d96:	f9 1f       	adc	r31, r25
    4d98:	ee 0f       	add	r30, r30
    4d9a:	ff 1f       	adc	r31, r31
    4d9c:	e9 54       	subi	r30, 0x49	; 73
    4d9e:	fa 4e       	sbci	r31, 0xEA	; 234
    4da0:	23 81       	ldd	r18, Z+3	; 0x03
    4da2:	21 11       	cpse	r18, r1
    4da4:	20 c0       	rjmp	.+64     	; 0x4de6 <_turn_on+0x5a>
    4da6:	9c 01       	movw	r18, r24
    4da8:	22 0f       	add	r18, r18
    4daa:	33 1f       	adc	r19, r19
    4dac:	f9 01       	movw	r30, r18
    4dae:	e8 0f       	add	r30, r24
    4db0:	f9 1f       	adc	r31, r25
    4db2:	ee 0f       	add	r30, r30
    4db4:	ff 1f       	adc	r31, r31
    4db6:	e9 54       	subi	r30, 0x49	; 73
    4db8:	fa 4e       	sbci	r31, 0xEA	; 234
    4dba:	a0 81       	ld	r26, Z
    4dbc:	b1 81       	ldd	r27, Z+1	; 0x01
    4dbe:	4c 91       	ld	r20, X
    4dc0:	f9 01       	movw	r30, r18
    4dc2:	e8 0f       	add	r30, r24
    4dc4:	f9 1f       	adc	r31, r25
    4dc6:	ee 0f       	add	r30, r30
    4dc8:	ff 1f       	adc	r31, r31
    4dca:	e9 54       	subi	r30, 0x49	; 73
    4dcc:	fa 4e       	sbci	r31, 0xEA	; 234
    4dce:	81 e0       	ldi	r24, 0x01	; 1
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	02 80       	ldd	r0, Z+2	; 0x02
    4dd4:	02 c0       	rjmp	.+4      	; 0x4dda <_turn_on+0x4e>
    4dd6:	88 0f       	add	r24, r24
    4dd8:	99 1f       	adc	r25, r25
    4dda:	0a 94       	dec	r0
    4ddc:	e2 f7       	brpl	.-8      	; 0x4dd6 <_turn_on+0x4a>
    4dde:	80 95       	com	r24
    4de0:	84 23       	and	r24, r20
    4de2:	8c 93       	st	X, r24
    4de4:	08 95       	ret
    4de6:	fc 01       	movw	r30, r24
    4de8:	ee 0f       	add	r30, r30
    4dea:	ff 1f       	adc	r31, r31
    4dec:	df 01       	movw	r26, r30
    4dee:	a8 0f       	add	r26, r24
    4df0:	b9 1f       	adc	r27, r25
    4df2:	aa 0f       	add	r26, r26
    4df4:	bb 1f       	adc	r27, r27
    4df6:	a9 54       	subi	r26, 0x49	; 73
    4df8:	ba 4e       	sbci	r27, 0xEA	; 234
    4dfa:	0d 90       	ld	r0, X+
    4dfc:	bc 91       	ld	r27, X
    4dfe:	a0 2d       	mov	r26, r0
    4e00:	2c 91       	ld	r18, X
    4e02:	e8 0f       	add	r30, r24
    4e04:	f9 1f       	adc	r31, r25
    4e06:	ee 0f       	add	r30, r30
    4e08:	ff 1f       	adc	r31, r31
    4e0a:	e9 54       	subi	r30, 0x49	; 73
    4e0c:	fa 4e       	sbci	r31, 0xEA	; 234
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	02 80       	ldd	r0, Z+2	; 0x02
    4e14:	02 c0       	rjmp	.+4      	; 0x4e1a <_turn_on+0x8e>
    4e16:	88 0f       	add	r24, r24
    4e18:	99 1f       	adc	r25, r25
    4e1a:	0a 94       	dec	r0
    4e1c:	e2 f7       	brpl	.-8      	; 0x4e16 <_turn_on+0x8a>
    4e1e:	82 2b       	or	r24, r18
    4e20:	8c 93       	st	X, r24
    4e22:	08 95       	ret

00004e24 <_hal_led_task>:
    4e24:	cc 24       	eor	r12, r12
    4e26:	c3 94       	inc	r12
    4e28:	d1 2c       	mov	r13, r1
    4e2a:	68 94       	set
    4e2c:	bb 24       	eor	r11, r11
    4e2e:	b2 f8       	bld	r11, 2
    4e30:	c7 eb       	ldi	r28, 0xB7	; 183
    4e32:	d5 e1       	ldi	r29, 0x15	; 21
    4e34:	10 e0       	ldi	r17, 0x00	; 0
    4e36:	8c 81       	ldd	r24, Y+4	; 0x04
    4e38:	81 30       	cpi	r24, 0x01	; 1
    4e3a:	81 f0       	breq	.+32     	; 0x4e5c <_hal_led_task+0x38>
    4e3c:	18 f1       	brcs	.+70     	; 0x4e84 <_hal_led_task+0x60>
    4e3e:	82 30       	cpi	r24, 0x02	; 2
    4e40:	61 f5       	brne	.+88     	; 0x4e9a <_hal_led_task+0x76>
    4e42:	e8 81       	ld	r30, Y
    4e44:	f9 81       	ldd	r31, Y+1	; 0x01
    4e46:	20 81       	ld	r18, Z
    4e48:	c6 01       	movw	r24, r12
    4e4a:	0a 80       	ldd	r0, Y+2	; 0x02
    4e4c:	02 c0       	rjmp	.+4      	; 0x4e52 <_hal_led_task+0x2e>
    4e4e:	88 0f       	add	r24, r24
    4e50:	99 1f       	adc	r25, r25
    4e52:	0a 94       	dec	r0
    4e54:	e2 f7       	brpl	.-8      	; 0x4e4e <_hal_led_task+0x2a>
    4e56:	82 27       	eor	r24, r18
    4e58:	80 83       	st	Z, r24
    4e5a:	1f c0       	rjmp	.+62     	; 0x4e9a <_hal_led_task+0x76>
    4e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e5e:	8f 5f       	subi	r24, 0xFF	; 255
    4e60:	8a 30       	cpi	r24, 0x0A	; 10
    4e62:	10 f4       	brcc	.+4      	; 0x4e68 <_hal_led_task+0x44>
    4e64:	8d 83       	std	Y+5, r24	; 0x05
    4e66:	19 c0       	rjmp	.+50     	; 0x4e9a <_hal_led_task+0x76>
    4e68:	1d 82       	std	Y+5, r1	; 0x05
    4e6a:	e8 81       	ld	r30, Y
    4e6c:	f9 81       	ldd	r31, Y+1	; 0x01
    4e6e:	20 81       	ld	r18, Z
    4e70:	c6 01       	movw	r24, r12
    4e72:	0a 80       	ldd	r0, Y+2	; 0x02
    4e74:	02 c0       	rjmp	.+4      	; 0x4e7a <_hal_led_task+0x56>
    4e76:	88 0f       	add	r24, r24
    4e78:	99 1f       	adc	r25, r25
    4e7a:	0a 94       	dec	r0
    4e7c:	e2 f7       	brpl	.-8      	; 0x4e76 <_hal_led_task+0x52>
    4e7e:	82 27       	eor	r24, r18
    4e80:	80 83       	st	Z, r24
    4e82:	0b c0       	rjmp	.+22     	; 0x4e9a <_hal_led_task+0x76>
    4e84:	0d 81       	ldd	r16, Y+5	; 0x05
    4e86:	00 23       	and	r16, r16
    4e88:	29 f0       	breq	.+10     	; 0x4e94 <_hal_led_task+0x70>
    4e8a:	81 2f       	mov	r24, r17
    4e8c:	7f df       	rcall	.-258    	; 0x4d8c <_turn_on>
    4e8e:	01 50       	subi	r16, 0x01	; 1
    4e90:	0d 83       	std	Y+5, r16	; 0x05
    4e92:	03 c0       	rjmp	.+6      	; 0x4e9a <_hal_led_task+0x76>
    4e94:	bc 82       	std	Y+4, r11	; 0x04
    4e96:	81 2f       	mov	r24, r17
    4e98:	2d df       	rcall	.-422    	; 0x4cf4 <_turn_off>
    4e9a:	1f 5f       	subi	r17, 0xFF	; 255
    4e9c:	26 96       	adiw	r28, 0x06	; 6
    4e9e:	14 30       	cpi	r17, 0x04	; 4
    4ea0:	51 f6       	brne	.-108    	; 0x4e36 <_hal_led_task+0x12>
    4ea2:	65 e0       	ldi	r22, 0x05	; 5
    4ea4:	70 e0       	ldi	r23, 0x00	; 0
    4ea6:	80 e0       	ldi	r24, 0x00	; 0
    4ea8:	90 e0       	ldi	r25, 0x00	; 0
    4eaa:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vTaskDelay>
    4eae:	c0 cf       	rjmp	.-128    	; 0x4e30 <_hal_led_task+0xc>

00004eb0 <status_leds_initialise>:
    4eb0:	ef 92       	push	r14
    4eb2:	ff 92       	push	r15
    4eb4:	0f 93       	push	r16
    4eb6:	1f 93       	push	r17
    4eb8:	cf 93       	push	r28
    4eba:	df 93       	push	r29
    4ebc:	08 2f       	mov	r16, r24
    4ebe:	80 e4       	ldi	r24, 0x40	; 64
    4ec0:	87 b9       	out	0x07, r24	; 7
    4ec2:	c7 eb       	ldi	r28, 0xB7	; 183
    4ec4:	d5 e1       	ldi	r29, 0x15	; 21
    4ec6:	0f 2e       	mov	r0, r31
    4ec8:	f8 e2       	ldi	r31, 0x28	; 40
    4eca:	ef 2e       	mov	r14, r31
    4ecc:	f1 2c       	mov	r15, r1
    4ece:	f0 2d       	mov	r31, r0
    4ed0:	f9 82       	std	Y+1, r15	; 0x01
    4ed2:	e8 82       	st	Y, r14
    4ed4:	86 e0       	ldi	r24, 0x06	; 6
    4ed6:	8a 83       	std	Y+2, r24	; 0x02
    4ed8:	1b 82       	std	Y+3, r1	; 0x03
    4eda:	14 e0       	ldi	r17, 0x04	; 4
    4edc:	1c 83       	std	Y+4, r17	; 0x04
    4ede:	80 e0       	ldi	r24, 0x00	; 0
    4ee0:	09 df       	rcall	.-494    	; 0x4cf4 <_turn_off>
    4ee2:	80 e8       	ldi	r24, 0x80	; 128
    4ee4:	87 b9       	out	0x07, r24	; 7
    4ee6:	ff 82       	std	Y+7, r15	; 0x07
    4ee8:	ee 82       	std	Y+6, r14	; 0x06
    4eea:	87 e0       	ldi	r24, 0x07	; 7
    4eec:	88 87       	std	Y+8, r24	; 0x08
    4eee:	19 86       	std	Y+9, r1	; 0x09
    4ef0:	1a 87       	std	Y+10, r17	; 0x0a
    4ef2:	81 e0       	ldi	r24, 0x01	; 1
    4ef4:	ff de       	rcall	.-514    	; 0x4cf4 <_turn_off>
    4ef6:	80 e2       	ldi	r24, 0x20	; 32
    4ef8:	83 bb       	out	0x13, r24	; 19
    4efa:	84 e3       	ldi	r24, 0x34	; 52
    4efc:	90 e0       	ldi	r25, 0x00	; 0
    4efe:	9d 87       	std	Y+13, r25	; 0x0d
    4f00:	8c 87       	std	Y+12, r24	; 0x0c
    4f02:	85 e0       	ldi	r24, 0x05	; 5
    4f04:	8e 87       	std	Y+14, r24	; 0x0e
    4f06:	1f 86       	std	Y+15, r1	; 0x0f
    4f08:	18 8b       	std	Y+16, r17	; 0x10
    4f0a:	82 e0       	ldi	r24, 0x02	; 2
    4f0c:	f3 de       	rcall	.-538    	; 0x4cf4 <_turn_off>
    4f0e:	80 e1       	ldi	r24, 0x10	; 16
    4f10:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    4f14:	82 e0       	ldi	r24, 0x02	; 2
    4f16:	91 e0       	ldi	r25, 0x01	; 1
    4f18:	9b 8b       	std	Y+19, r25	; 0x13
    4f1a:	8a 8b       	std	Y+18, r24	; 0x12
    4f1c:	1c 8b       	std	Y+20, r17	; 0x14
    4f1e:	1d 8a       	std	Y+21, r1	; 0x15
    4f20:	1e 8b       	std	Y+22, r17	; 0x16
    4f22:	83 e0       	ldi	r24, 0x03	; 3
    4f24:	e7 de       	rcall	.-562    	; 0x4cf4 <_turn_off>
    4f26:	e1 2c       	mov	r14, r1
    4f28:	f1 2c       	mov	r15, r1
    4f2a:	20 e0       	ldi	r18, 0x00	; 0
    4f2c:	30 e0       	ldi	r19, 0x00	; 0
    4f2e:	40 ec       	ldi	r20, 0xC0	; 192
    4f30:	50 e0       	ldi	r21, 0x00	; 0
    4f32:	6f ec       	ldi	r22, 0xCF	; 207
    4f34:	77 e0       	ldi	r23, 0x07	; 7
    4f36:	82 e1       	ldi	r24, 0x12	; 18
    4f38:	97 e2       	ldi	r25, 0x27	; 39
    4f3a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <xTaskCreate>
    4f3e:	df 91       	pop	r29
    4f40:	cf 91       	pop	r28
    4f42:	1f 91       	pop	r17
    4f44:	0f 91       	pop	r16
    4f46:	ff 90       	pop	r15
    4f48:	ef 90       	pop	r14
    4f4a:	08 95       	ret

00004f4c <status_leds_slowBlink>:
    4f4c:	cf 93       	push	r28
    4f4e:	df 93       	push	r29
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	fc 01       	movw	r30, r24
    4f54:	ee 0f       	add	r30, r30
    4f56:	ff 1f       	adc	r31, r31
    4f58:	df 01       	movw	r26, r30
    4f5a:	a8 0f       	add	r26, r24
    4f5c:	b9 1f       	adc	r27, r25
    4f5e:	aa 0f       	add	r26, r26
    4f60:	bb 1f       	adc	r27, r27
    4f62:	a9 54       	subi	r26, 0x49	; 73
    4f64:	ba 4e       	sbci	r27, 0xEA	; 234
    4f66:	cd 91       	ld	r28, X+
    4f68:	dc 91       	ld	r29, X
    4f6a:	11 97       	sbiw	r26, 0x01	; 1
    4f6c:	48 81       	ld	r20, Y
    4f6e:	21 e0       	ldi	r18, 0x01	; 1
    4f70:	30 e0       	ldi	r19, 0x00	; 0
    4f72:	12 96       	adiw	r26, 0x02	; 2
    4f74:	0c 90       	ld	r0, X
    4f76:	12 97       	sbiw	r26, 0x02	; 2
    4f78:	02 c0       	rjmp	.+4      	; 0x4f7e <status_leds_slowBlink+0x32>
    4f7a:	22 0f       	add	r18, r18
    4f7c:	33 1f       	adc	r19, r19
    4f7e:	0a 94       	dec	r0
    4f80:	e2 f7       	brpl	.-8      	; 0x4f7a <status_leds_slowBlink+0x2e>
    4f82:	24 27       	eor	r18, r20
    4f84:	28 83       	st	Y, r18
    4f86:	fd 01       	movw	r30, r26
    4f88:	81 e0       	ldi	r24, 0x01	; 1
    4f8a:	84 83       	std	Z+4, r24	; 0x04
    4f8c:	df 91       	pop	r29
    4f8e:	cf 91       	pop	r28
    4f90:	08 95       	ret

00004f92 <_callBack>:
    4f92:	e0 91 d7 15 	lds	r30, 0x15D7	; 0x8015d7 <_callBackFunction>
    4f96:	f0 91 d8 15 	lds	r31, 0x15D8	; 0x8015d8 <_callBackFunction+0x1>
    4f9a:	30 97       	sbiw	r30, 0x00	; 0
    4f9c:	09 f0       	breq	.+2      	; 0x4fa0 <_callBack+0xe>
    4f9e:	19 95       	eicall
    4fa0:	08 95       	ret

00004fa2 <_tsl2591TwiCallback>:
    4fa2:	64 50       	subi	r22, 0x04	; 4
    4fa4:	62 30       	cpi	r22, 0x02	; 2
    4fa6:	08 f0       	brcs	.+2      	; 0x4faa <_tsl2591TwiCallback+0x8>
    4fa8:	3b c0       	rjmp	.+118    	; 0x5020 <_tsl2591TwiCallback+0x7e>
    4faa:	20 91 d6 15 	lds	r18, 0x15D6	; 0x8015d6 <_nextState>
    4fae:	22 30       	cpi	r18, 0x02	; 2
    4fb0:	79 f0       	breq	.+30     	; 0x4fd0 <_tsl2591TwiCallback+0x2e>
    4fb2:	18 f4       	brcc	.+6      	; 0x4fba <_tsl2591TwiCallback+0x18>
    4fb4:	21 30       	cpi	r18, 0x01	; 1
    4fb6:	31 f0       	breq	.+12     	; 0x4fc4 <_tsl2591TwiCallback+0x22>
    4fb8:	30 c0       	rjmp	.+96     	; 0x501a <_tsl2591TwiCallback+0x78>
    4fba:	23 30       	cpi	r18, 0x03	; 3
    4fbc:	81 f0       	breq	.+32     	; 0x4fde <_tsl2591TwiCallback+0x3c>
    4fbe:	24 30       	cpi	r18, 0x04	; 4
    4fc0:	a1 f0       	breq	.+40     	; 0x4fea <_tsl2591TwiCallback+0x48>
    4fc2:	2b c0       	rjmp	.+86     	; 0x501a <_tsl2591TwiCallback+0x78>
    4fc4:	22 e0       	ldi	r18, 0x02	; 2
    4fc6:	20 93 d6 15 	sts	0x15D6, r18	; 0x8015d6 <_nextState>
    4fca:	61 e0       	ldi	r22, 0x01	; 1
    4fcc:	0a c2       	rjmp	.+1044   	; 0x53e2 <twiReceive>
    4fce:	08 95       	ret
    4fd0:	fa 01       	movw	r30, r20
    4fd2:	80 81       	ld	r24, Z
    4fd4:	80 93 d3 15 	sts	0x15D3, r24	; 0x8015d3 <_deviceId>
    4fd8:	82 e0       	ldi	r24, 0x02	; 2
    4fda:	db cf       	rjmp	.-74     	; 0x4f92 <_callBack>
    4fdc:	08 95       	ret
    4fde:	24 e0       	ldi	r18, 0x04	; 4
    4fe0:	20 93 d6 15 	sts	0x15D6, r18	; 0x8015d6 <_nextState>
    4fe4:	64 e0       	ldi	r22, 0x04	; 4
    4fe6:	fd c1       	rjmp	.+1018   	; 0x53e2 <twiReceive>
    4fe8:	08 95       	ret
    4fea:	fa 01       	movw	r30, r20
    4fec:	81 81       	ldd	r24, Z+1	; 0x01
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	98 2f       	mov	r25, r24
    4ff2:	88 27       	eor	r24, r24
    4ff4:	20 81       	ld	r18, Z
    4ff6:	82 2b       	or	r24, r18
    4ff8:	90 93 d2 15 	sts	0x15D2, r25	; 0x8015d2 <_fullSpectrumRaw+0x1>
    4ffc:	80 93 d1 15 	sts	0x15D1, r24	; 0x8015d1 <_fullSpectrumRaw>
    5000:	83 81       	ldd	r24, Z+3	; 0x03
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	98 2f       	mov	r25, r24
    5006:	88 27       	eor	r24, r24
    5008:	22 81       	ldd	r18, Z+2	; 0x02
    500a:	82 2b       	or	r24, r18
    500c:	90 93 d0 15 	sts	0x15D0, r25	; 0x8015d0 <_infraredRaw+0x1>
    5010:	80 93 cf 15 	sts	0x15CF, r24	; 0x8015cf <_infraredRaw>
    5014:	81 e0       	ldi	r24, 0x01	; 1
    5016:	bd cf       	rjmp	.-134    	; 0x4f92 <_callBack>
    5018:	08 95       	ret
    501a:	80 e0       	ldi	r24, 0x00	; 0
    501c:	ba cf       	rjmp	.-140    	; 0x4f92 <_callBack>
    501e:	08 95       	ret
    5020:	10 92 d6 15 	sts	0x15D6, r1	; 0x8015d6 <_nextState>
    5024:	86 e0       	ldi	r24, 0x06	; 6
    5026:	b5 cf       	rjmp	.-150    	; 0x4f92 <_callBack>
    5028:	08 95       	ret

0000502a <_twiTransmit>:
    502a:	20 91 d9 15 	lds	r18, 0x15D9	; 0x8015d9 <_twiHandler>
    502e:	30 91 da 15 	lds	r19, 0x15DA	; 0x8015da <_twiHandler+0x1>
    5032:	21 15       	cp	r18, r1
    5034:	31 05       	cpc	r19, r1
    5036:	41 f0       	breq	.+16     	; 0x5048 <_twiTransmit+0x1e>
    5038:	46 2f       	mov	r20, r22
    503a:	bc 01       	movw	r22, r24
    503c:	c9 01       	movw	r24, r18
    503e:	85 d1       	rcall	.+778    	; 0x534a <twiTransmit>
    5040:	82 30       	cpi	r24, 0x02	; 2
    5042:	21 f0       	breq	.+8      	; 0x504c <_twiTransmit+0x22>
    5044:	80 e0       	ldi	r24, 0x00	; 0
    5046:	08 95       	ret
    5048:	87 e0       	ldi	r24, 0x07	; 7
    504a:	08 95       	ret
    504c:	85 e0       	ldi	r24, 0x05	; 5
    504e:	08 95       	ret

00005050 <tsl2591_initialise>:
    5050:	0f 93       	push	r16
    5052:	1f 93       	push	r17
    5054:	90 93 d8 15 	sts	0x15D8, r25	; 0x8015d8 <_callBackFunction+0x1>
    5058:	80 93 d7 15 	sts	0x15D7, r24	; 0x8015d7 <_callBackFunction>
    505c:	01 ed       	ldi	r16, 0xD1	; 209
    505e:	17 e2       	ldi	r17, 0x27	; 39
    5060:	20 e0       	ldi	r18, 0x00	; 0
    5062:	34 e2       	ldi	r19, 0x24	; 36
    5064:	44 ef       	ldi	r20, 0xF4	; 244
    5066:	50 e0       	ldi	r21, 0x00	; 0
    5068:	60 e0       	ldi	r22, 0x00	; 0
    506a:	89 e2       	ldi	r24, 0x29	; 41
    506c:	1d d1       	rcall	.+570    	; 0x52a8 <twiCreate>
    506e:	90 93 da 15 	sts	0x15DA, r25	; 0x8015da <_twiHandler+0x1>
    5072:	80 93 d9 15 	sts	0x15D9, r24	; 0x8015d9 <_twiHandler>
    5076:	89 2b       	or	r24, r25
    5078:	11 f0       	breq	.+4      	; 0x507e <tsl2591_initialise+0x2e>
    507a:	80 e0       	ldi	r24, 0x00	; 0
    507c:	01 c0       	rjmp	.+2      	; 0x5080 <tsl2591_initialise+0x30>
    507e:	88 e0       	ldi	r24, 0x08	; 8
    5080:	1f 91       	pop	r17
    5082:	0f 91       	pop	r16
    5084:	08 95       	ret

00005086 <tsl2591_enable>:
    5086:	cf 93       	push	r28
    5088:	df 93       	push	r29
    508a:	1f 92       	push	r1
    508c:	1f 92       	push	r1
    508e:	cd b7       	in	r28, 0x3d	; 61
    5090:	de b7       	in	r29, 0x3e	; 62
    5092:	80 ea       	ldi	r24, 0xA0	; 160
    5094:	89 83       	std	Y+1, r24	; 0x01
    5096:	83 e0       	ldi	r24, 0x03	; 3
    5098:	8a 83       	std	Y+2, r24	; 0x02
    509a:	10 92 d6 15 	sts	0x15D6, r1	; 0x8015d6 <_nextState>
    509e:	62 e0       	ldi	r22, 0x02	; 2
    50a0:	ce 01       	movw	r24, r28
    50a2:	01 96       	adiw	r24, 0x01	; 1
    50a4:	c2 df       	rcall	.-124    	; 0x502a <_twiTransmit>
    50a6:	0f 90       	pop	r0
    50a8:	0f 90       	pop	r0
    50aa:	df 91       	pop	r29
    50ac:	cf 91       	pop	r28
    50ae:	08 95       	ret

000050b0 <tsl2591_fetchData>:
    50b0:	cf 93       	push	r28
    50b2:	df 93       	push	r29
    50b4:	1f 92       	push	r1
    50b6:	cd b7       	in	r28, 0x3d	; 61
    50b8:	de b7       	in	r29, 0x3e	; 62
    50ba:	84 eb       	ldi	r24, 0xB4	; 180
    50bc:	89 83       	std	Y+1, r24	; 0x01
    50be:	83 e0       	ldi	r24, 0x03	; 3
    50c0:	80 93 d6 15 	sts	0x15D6, r24	; 0x8015d6 <_nextState>
    50c4:	61 e0       	ldi	r22, 0x01	; 1
    50c6:	ce 01       	movw	r24, r28
    50c8:	01 96       	adiw	r24, 0x01	; 1
    50ca:	af df       	rcall	.-162    	; 0x502a <_twiTransmit>
    50cc:	0f 90       	pop	r0
    50ce:	df 91       	pop	r29
    50d0:	cf 91       	pop	r28
    50d2:	08 95       	ret

000050d4 <tsl2591_getLux>:
    50d4:	2f 92       	push	r2
    50d6:	3f 92       	push	r3
    50d8:	4f 92       	push	r4
    50da:	5f 92       	push	r5
    50dc:	6f 92       	push	r6
    50de:	7f 92       	push	r7
    50e0:	8f 92       	push	r8
    50e2:	9f 92       	push	r9
    50e4:	af 92       	push	r10
    50e6:	bf 92       	push	r11
    50e8:	cf 92       	push	r12
    50ea:	df 92       	push	r13
    50ec:	ef 92       	push	r14
    50ee:	ff 92       	push	r15
    50f0:	0f 93       	push	r16
    50f2:	1f 93       	push	r17
    50f4:	cf 93       	push	r28
    50f6:	df 93       	push	r29
    50f8:	c0 91 cf 15 	lds	r28, 0x15CF	; 0x8015cf <_infraredRaw>
    50fc:	d0 91 d0 15 	lds	r29, 0x15D0	; 0x8015d0 <_infraredRaw+0x1>
    5100:	cf 3f       	cpi	r28, 0xFF	; 255
    5102:	2f ef       	ldi	r18, 0xFF	; 255
    5104:	d2 07       	cpc	r29, r18
    5106:	41 f0       	breq	.+16     	; 0x5118 <tsl2591_getLux+0x44>
    5108:	60 91 d1 15 	lds	r22, 0x15D1	; 0x8015d1 <_fullSpectrumRaw>
    510c:	70 91 d2 15 	lds	r23, 0x15D2	; 0x8015d2 <_fullSpectrumRaw+0x1>
    5110:	6f 3f       	cpi	r22, 0xFF	; 255
    5112:	ef ef       	ldi	r30, 0xFF	; 255
    5114:	7e 07       	cpc	r23, r30
    5116:	59 f4       	brne	.+22     	; 0x512e <tsl2591_getLux+0x5a>
    5118:	4f ef       	ldi	r20, 0xFF	; 255
    511a:	5f ef       	ldi	r21, 0xFF	; 255
    511c:	6f e7       	ldi	r22, 0x7F	; 127
    511e:	7f e7       	ldi	r23, 0x7F	; 127
    5120:	fc 01       	movw	r30, r24
    5122:	40 83       	st	Z, r20
    5124:	51 83       	std	Z+1, r21	; 0x01
    5126:	62 83       	std	Z+2, r22	; 0x02
    5128:	73 83       	std	Z+3, r23	; 0x03
    512a:	83 e0       	ldi	r24, 0x03	; 3
    512c:	99 c0       	rjmp	.+306    	; 0x5260 <tsl2591_getLux+0x18c>
    512e:	1c 01       	movw	r2, r24
    5130:	80 e0       	ldi	r24, 0x00	; 0
    5132:	90 e0       	ldi	r25, 0x00	; 0
    5134:	3b d3       	rcall	.+1654   	; 0x57ac <__floatunsisf>
    5136:	2b 01       	movw	r4, r22
    5138:	3c 01       	movw	r6, r24
    513a:	be 01       	movw	r22, r28
    513c:	80 e0       	ldi	r24, 0x00	; 0
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	35 d3       	rcall	.+1642   	; 0x57ac <__floatunsisf>
    5142:	4b 01       	movw	r8, r22
    5144:	5c 01       	movw	r10, r24
    5146:	80 91 d4 15 	lds	r24, 0x15D4	; 0x8015d4 <_currentIntegrationTime>
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	01 96       	adiw	r24, 0x01	; 1
    514e:	24 e6       	ldi	r18, 0x64	; 100
    5150:	28 9f       	mul	r18, r24
    5152:	b0 01       	movw	r22, r0
    5154:	29 9f       	mul	r18, r25
    5156:	70 0d       	add	r23, r0
    5158:	11 24       	eor	r1, r1
    515a:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <_currentGain>
    515e:	80 32       	cpi	r24, 0x20	; 32
    5160:	69 f0       	breq	.+26     	; 0x517c <tsl2591_getLux+0xa8>
    5162:	80 33       	cpi	r24, 0x30	; 48
    5164:	a1 f0       	breq	.+40     	; 0x518e <tsl2591_getLux+0xba>
    5166:	80 31       	cpi	r24, 0x10	; 16
    5168:	e1 f4       	brne	.+56     	; 0x51a2 <tsl2591_getLux+0xce>
    516a:	0f 2e       	mov	r0, r31
    516c:	c1 2c       	mov	r12, r1
    516e:	d1 2c       	mov	r13, r1
    5170:	f8 ec       	ldi	r31, 0xC8	; 200
    5172:	ef 2e       	mov	r14, r31
    5174:	f1 e4       	ldi	r31, 0x41	; 65
    5176:	ff 2e       	mov	r15, r31
    5178:	f0 2d       	mov	r31, r0
    517a:	1b c0       	rjmp	.+54     	; 0x51b2 <tsl2591_getLux+0xde>
    517c:	0f 2e       	mov	r0, r31
    517e:	c1 2c       	mov	r12, r1
    5180:	d1 2c       	mov	r13, r1
    5182:	f6 ed       	ldi	r31, 0xD6	; 214
    5184:	ef 2e       	mov	r14, r31
    5186:	f3 e4       	ldi	r31, 0x43	; 67
    5188:	ff 2e       	mov	r15, r31
    518a:	f0 2d       	mov	r31, r0
    518c:	12 c0       	rjmp	.+36     	; 0x51b2 <tsl2591_getLux+0xde>
    518e:	0f 2e       	mov	r0, r31
    5190:	c1 2c       	mov	r12, r1
    5192:	f0 e5       	ldi	r31, 0x50	; 80
    5194:	df 2e       	mov	r13, r31
    5196:	fa e1       	ldi	r31, 0x1A	; 26
    5198:	ef 2e       	mov	r14, r31
    519a:	f6 e4       	ldi	r31, 0x46	; 70
    519c:	ff 2e       	mov	r15, r31
    519e:	f0 2d       	mov	r31, r0
    51a0:	08 c0       	rjmp	.+16     	; 0x51b2 <tsl2591_getLux+0xde>
    51a2:	0f 2e       	mov	r0, r31
    51a4:	c1 2c       	mov	r12, r1
    51a6:	d1 2c       	mov	r13, r1
    51a8:	f0 e8       	ldi	r31, 0x80	; 128
    51aa:	ef 2e       	mov	r14, r31
    51ac:	ff e3       	ldi	r31, 0x3F	; 63
    51ae:	ff 2e       	mov	r15, r31
    51b0:	f0 2d       	mov	r31, r0
    51b2:	07 2e       	mov	r0, r23
    51b4:	00 0c       	add	r0, r0
    51b6:	88 0b       	sbc	r24, r24
    51b8:	99 0b       	sbc	r25, r25
    51ba:	fa d2       	rcall	.+1524   	; 0x57b0 <__floatsisf>
    51bc:	a7 01       	movw	r20, r14
    51be:	96 01       	movw	r18, r12
    51c0:	5e d3       	rcall	.+1724   	; 0x587e <__mulsf3>
    51c2:	20 e0       	ldi	r18, 0x00	; 0
    51c4:	30 e0       	ldi	r19, 0x00	; 0
    51c6:	4c ec       	ldi	r20, 0xCC	; 204
    51c8:	53 e4       	ldi	r21, 0x43	; 67
    51ca:	7e d2       	rcall	.+1276   	; 0x56c8 <__divsf3>
    51cc:	6b 01       	movw	r12, r22
    51ce:	7c 01       	movw	r14, r24
    51d0:	25 e8       	ldi	r18, 0x85	; 133
    51d2:	3b ee       	ldi	r19, 0xEB	; 235
    51d4:	41 ed       	ldi	r20, 0xD1	; 209
    51d6:	5f e3       	ldi	r21, 0x3F	; 63
    51d8:	c5 01       	movw	r24, r10
    51da:	b4 01       	movw	r22, r8
    51dc:	50 d3       	rcall	.+1696   	; 0x587e <__mulsf3>
    51de:	9b 01       	movw	r18, r22
    51e0:	ac 01       	movw	r20, r24
    51e2:	c3 01       	movw	r24, r6
    51e4:	b2 01       	movw	r22, r4
    51e6:	09 d2       	rcall	.+1042   	; 0x55fa <__subsf3>
    51e8:	a7 01       	movw	r20, r14
    51ea:	96 01       	movw	r18, r12
    51ec:	6d d2       	rcall	.+1242   	; 0x56c8 <__divsf3>
    51ee:	16 2f       	mov	r17, r22
    51f0:	d7 2f       	mov	r29, r23
    51f2:	c8 2f       	mov	r28, r24
    51f4:	09 2f       	mov	r16, r25
    51f6:	2d e3       	ldi	r18, 0x3D	; 61
    51f8:	3a e0       	ldi	r19, 0x0A	; 10
    51fa:	47 e1       	ldi	r20, 0x17	; 23
    51fc:	5f e3       	ldi	r21, 0x3F	; 63
    51fe:	c3 01       	movw	r24, r6
    5200:	b2 01       	movw	r22, r4
    5202:	3d d3       	rcall	.+1658   	; 0x587e <__mulsf3>
    5204:	2b 01       	movw	r4, r22
    5206:	3c 01       	movw	r6, r24
    5208:	26 ef       	ldi	r18, 0xF6	; 246
    520a:	38 e2       	ldi	r19, 0x28	; 40
    520c:	4c e5       	ldi	r20, 0x5C	; 92
    520e:	5f e3       	ldi	r21, 0x3F	; 63
    5210:	c5 01       	movw	r24, r10
    5212:	b4 01       	movw	r22, r8
    5214:	34 d3       	rcall	.+1640   	; 0x587e <__mulsf3>
    5216:	9b 01       	movw	r18, r22
    5218:	ac 01       	movw	r20, r24
    521a:	c3 01       	movw	r24, r6
    521c:	b2 01       	movw	r22, r4
    521e:	ed d1       	rcall	.+986    	; 0x55fa <__subsf3>
    5220:	a7 01       	movw	r20, r14
    5222:	96 01       	movw	r18, r12
    5224:	51 d2       	rcall	.+1186   	; 0x56c8 <__divsf3>
    5226:	c6 2e       	mov	r12, r22
    5228:	d7 2e       	mov	r13, r23
    522a:	e8 2e       	mov	r14, r24
    522c:	f9 2e       	mov	r15, r25
    522e:	26 2f       	mov	r18, r22
    5230:	37 2f       	mov	r19, r23
    5232:	48 2f       	mov	r20, r24
    5234:	59 2f       	mov	r21, r25
    5236:	61 2f       	mov	r22, r17
    5238:	7d 2f       	mov	r23, r29
    523a:	8c 2f       	mov	r24, r28
    523c:	90 2f       	mov	r25, r16
    523e:	1b d3       	rcall	.+1590   	; 0x5876 <__gesf2>
    5240:	18 16       	cp	r1, r24
    5242:	24 f0       	brlt	.+8      	; 0x524c <tsl2591_getLux+0x178>
    5244:	1c 2d       	mov	r17, r12
    5246:	dd 2d       	mov	r29, r13
    5248:	ce 2d       	mov	r28, r14
    524a:	0f 2d       	mov	r16, r15
    524c:	41 2f       	mov	r20, r17
    524e:	5d 2f       	mov	r21, r29
    5250:	6c 2f       	mov	r22, r28
    5252:	70 2f       	mov	r23, r16
    5254:	f1 01       	movw	r30, r2
    5256:	40 83       	st	Z, r20
    5258:	51 83       	std	Z+1, r21	; 0x01
    525a:	62 83       	std	Z+2, r22	; 0x02
    525c:	73 83       	std	Z+3, r23	; 0x03
    525e:	80 e0       	ldi	r24, 0x00	; 0
    5260:	df 91       	pop	r29
    5262:	cf 91       	pop	r28
    5264:	1f 91       	pop	r17
    5266:	0f 91       	pop	r16
    5268:	ff 90       	pop	r15
    526a:	ef 90       	pop	r14
    526c:	df 90       	pop	r13
    526e:	cf 90       	pop	r12
    5270:	bf 90       	pop	r11
    5272:	af 90       	pop	r10
    5274:	9f 90       	pop	r9
    5276:	8f 90       	pop	r8
    5278:	7f 90       	pop	r7
    527a:	6f 90       	pop	r6
    527c:	5f 90       	pop	r5
    527e:	4f 90       	pop	r4
    5280:	3f 90       	pop	r3
    5282:	2f 90       	pop	r2
    5284:	08 95       	ret

00005286 <_initTwiInterface>:
    5286:	80 91 e9 15 	lds	r24, 0x15E9	; 0x8015e9 <_twiIsInitiated>
    528a:	81 11       	cpse	r24, r1
    528c:	0c c0       	rjmp	.+24     	; 0x52a6 <_initTwiInterface+0x20>
    528e:	8c e0       	ldi	r24, 0x0C	; 12
    5290:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5294:	8f ef       	ldi	r24, 0xFF	; 255
    5296:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    529a:	84 e0       	ldi	r24, 0x04	; 4
    529c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    52a0:	81 e0       	ldi	r24, 0x01	; 1
    52a2:	80 93 e9 15 	sts	0x15E9, r24	; 0x8015e9 <_twiIsInitiated>
    52a6:	08 95       	ret

000052a8 <twiCreate>:
    52a8:	af 92       	push	r10
    52aa:	bf 92       	push	r11
    52ac:	cf 92       	push	r12
    52ae:	df 92       	push	r13
    52b0:	ef 92       	push	r14
    52b2:	ff 92       	push	r15
    52b4:	0f 93       	push	r16
    52b6:	1f 93       	push	r17
    52b8:	cf 93       	push	r28
    52ba:	df 93       	push	r29
    52bc:	a8 2e       	mov	r10, r24
    52be:	b6 2e       	mov	r11, r22
    52c0:	69 01       	movw	r12, r18
    52c2:	7a 01       	movw	r14, r20
    52c4:	84 e0       	ldi	r24, 0x04	; 4
    52c6:	90 e0       	ldi	r25, 0x00	; 0
    52c8:	8e d3       	rcall	.+1820   	; 0x59e6 <malloc>
    52ca:	ec 01       	movw	r28, r24
    52cc:	89 2b       	or	r24, r25
    52ce:	61 f1       	breq	.+88     	; 0x5328 <twiCreate+0x80>
    52d0:	a8 82       	st	Y, r10
    52d2:	81 e0       	ldi	r24, 0x01	; 1
    52d4:	b8 12       	cpse	r11, r24
    52d6:	12 c0       	rjmp	.+36     	; 0x52fc <twiCreate+0x54>
    52d8:	c7 01       	movw	r24, r14
    52da:	b6 01       	movw	r22, r12
    52dc:	20 ea       	ldi	r18, 0xA0	; 160
    52de:	36 e8       	ldi	r19, 0x86	; 134
    52e0:	41 e0       	ldi	r20, 0x01	; 1
    52e2:	50 e0       	ldi	r21, 0x00	; 0
    52e4:	56 d3       	rcall	.+1708   	; 0x5992 <__udivmodsi4>
    52e6:	da 01       	movw	r26, r20
    52e8:	c9 01       	movw	r24, r18
    52ea:	40 97       	sbiw	r24, 0x10	; 16
    52ec:	a1 09       	sbc	r26, r1
    52ee:	b1 09       	sbc	r27, r1
    52f0:	b6 95       	lsr	r27
    52f2:	a7 95       	ror	r26
    52f4:	97 95       	ror	r25
    52f6:	87 95       	ror	r24
    52f8:	89 83       	std	Y+1, r24	; 0x01
    52fa:	11 c0       	rjmp	.+34     	; 0x531e <twiCreate+0x76>
    52fc:	c7 01       	movw	r24, r14
    52fe:	b6 01       	movw	r22, r12
    5300:	20 e8       	ldi	r18, 0x80	; 128
    5302:	3a e1       	ldi	r19, 0x1A	; 26
    5304:	46 e0       	ldi	r20, 0x06	; 6
    5306:	50 e0       	ldi	r21, 0x00	; 0
    5308:	44 d3       	rcall	.+1672   	; 0x5992 <__udivmodsi4>
    530a:	da 01       	movw	r26, r20
    530c:	c9 01       	movw	r24, r18
    530e:	40 97       	sbiw	r24, 0x10	; 16
    5310:	a1 09       	sbc	r26, r1
    5312:	b1 09       	sbc	r27, r1
    5314:	b6 95       	lsr	r27
    5316:	a7 95       	ror	r26
    5318:	97 95       	ror	r25
    531a:	87 95       	ror	r24
    531c:	89 83       	std	Y+1, r24	; 0x01
    531e:	1b 83       	std	Y+3, r17	; 0x03
    5320:	0a 83       	std	Y+2, r16	; 0x02
    5322:	8c 2f       	mov	r24, r28
    5324:	9d 2f       	mov	r25, r29
    5326:	02 c0       	rjmp	.+4      	; 0x532c <twiCreate+0x84>
    5328:	80 e0       	ldi	r24, 0x00	; 0
    532a:	90 e0       	ldi	r25, 0x00	; 0
    532c:	df 91       	pop	r29
    532e:	cf 91       	pop	r28
    5330:	1f 91       	pop	r17
    5332:	0f 91       	pop	r16
    5334:	ff 90       	pop	r15
    5336:	ef 90       	pop	r14
    5338:	df 90       	pop	r13
    533a:	cf 90       	pop	r12
    533c:	bf 90       	pop	r11
    533e:	af 90       	pop	r10
    5340:	08 95       	ret

00005342 <twiIsBusy>:
    5342:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5346:	81 70       	andi	r24, 0x01	; 1
    5348:	08 95       	ret

0000534a <twiTransmit>:
    534a:	ff 92       	push	r15
    534c:	0f 93       	push	r16
    534e:	1f 93       	push	r17
    5350:	cf 93       	push	r28
    5352:	df 93       	push	r29
    5354:	00 97       	sbiw	r24, 0x00	; 0
    5356:	d1 f1       	breq	.+116    	; 0x53cc <twiTransmit+0x82>
    5358:	4a 30       	cpi	r20, 0x0A	; 10
    535a:	d0 f5       	brcc	.+116    	; 0x53d0 <twiTransmit+0x86>
    535c:	f4 2e       	mov	r15, r20
    535e:	8b 01       	movw	r16, r22
    5360:	ec 01       	movw	r28, r24
    5362:	ef df       	rcall	.-34     	; 0x5342 <twiIsBusy>
    5364:	81 11       	cpse	r24, r1
    5366:	36 c0       	rjmp	.+108    	; 0x53d4 <twiTransmit+0x8a>
    5368:	80 91 dc 15 	lds	r24, 0x15DC	; 0x8015dc <_twiCurrentHandler>
    536c:	90 91 dd 15 	lds	r25, 0x15DD	; 0x8015dd <_twiCurrentHandler+0x1>
    5370:	c8 17       	cp	r28, r24
    5372:	d9 07       	cpc	r29, r25
    5374:	41 f0       	breq	.+16     	; 0x5386 <twiTransmit+0x3c>
    5376:	87 df       	rcall	.-242    	; 0x5286 <_initTwiInterface>
    5378:	89 81       	ldd	r24, Y+1	; 0x01
    537a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    537e:	d0 93 dd 15 	sts	0x15DD, r29	; 0x8015dd <_twiCurrentHandler+0x1>
    5382:	c0 93 dc 15 	sts	0x15DC, r28	; 0x8015dc <_twiCurrentHandler>
    5386:	81 e0       	ldi	r24, 0x01	; 1
    5388:	8f 0d       	add	r24, r15
    538a:	80 93 de 15 	sts	0x15DE, r24	; 0x8015de <_twiMessageLen>
    538e:	88 81       	ld	r24, Y
    5390:	88 0f       	add	r24, r24
    5392:	80 93 df 15 	sts	0x15DF, r24	; 0x8015df <_twiMessageBuffer>
    5396:	ff 20       	and	r15, r15
    5398:	89 f0       	breq	.+34     	; 0x53bc <twiTransmit+0x72>
    539a:	f8 01       	movw	r30, r16
    539c:	a0 ee       	ldi	r26, 0xE0	; 224
    539e:	b5 e1       	ldi	r27, 0x15	; 21
    53a0:	4f ef       	ldi	r20, 0xFF	; 255
    53a2:	4f 0d       	add	r20, r15
    53a4:	64 2f       	mov	r22, r20
    53a6:	70 e0       	ldi	r23, 0x00	; 0
    53a8:	cb 01       	movw	r24, r22
    53aa:	01 96       	adiw	r24, 0x01	; 1
    53ac:	b8 01       	movw	r22, r16
    53ae:	68 0f       	add	r22, r24
    53b0:	79 1f       	adc	r23, r25
    53b2:	81 91       	ld	r24, Z+
    53b4:	8d 93       	st	X+, r24
    53b6:	e6 17       	cp	r30, r22
    53b8:	f7 07       	cpc	r31, r23
    53ba:	d9 f7       	brne	.-10     	; 0x53b2 <twiTransmit+0x68>
    53bc:	88 ef       	ldi	r24, 0xF8	; 248
    53be:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    53c2:	85 ea       	ldi	r24, 0xA5	; 165
    53c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53c8:	84 e0       	ldi	r24, 0x04	; 4
    53ca:	05 c0       	rjmp	.+10     	; 0x53d6 <twiTransmit+0x8c>
    53cc:	86 e0       	ldi	r24, 0x06	; 6
    53ce:	03 c0       	rjmp	.+6      	; 0x53d6 <twiTransmit+0x8c>
    53d0:	87 e0       	ldi	r24, 0x07	; 7
    53d2:	01 c0       	rjmp	.+2      	; 0x53d6 <twiTransmit+0x8c>
    53d4:	82 e0       	ldi	r24, 0x02	; 2
    53d6:	df 91       	pop	r29
    53d8:	cf 91       	pop	r28
    53da:	1f 91       	pop	r17
    53dc:	0f 91       	pop	r16
    53de:	ff 90       	pop	r15
    53e0:	08 95       	ret

000053e2 <twiReceive>:
    53e2:	1f 93       	push	r17
    53e4:	cf 93       	push	r28
    53e6:	df 93       	push	r29
    53e8:	00 97       	sbiw	r24, 0x00	; 0
    53ea:	29 f1       	breq	.+74     	; 0x5436 <twiReceive+0x54>
    53ec:	6b 30       	cpi	r22, 0x0B	; 11
    53ee:	28 f5       	brcc	.+74     	; 0x543a <twiReceive+0x58>
    53f0:	16 2f       	mov	r17, r22
    53f2:	ec 01       	movw	r28, r24
    53f4:	a6 df       	rcall	.-180    	; 0x5342 <twiIsBusy>
    53f6:	81 11       	cpse	r24, r1
    53f8:	22 c0       	rjmp	.+68     	; 0x543e <twiReceive+0x5c>
    53fa:	80 91 dc 15 	lds	r24, 0x15DC	; 0x8015dc <_twiCurrentHandler>
    53fe:	90 91 dd 15 	lds	r25, 0x15DD	; 0x8015dd <_twiCurrentHandler+0x1>
    5402:	c8 17       	cp	r28, r24
    5404:	d9 07       	cpc	r29, r25
    5406:	41 f0       	breq	.+16     	; 0x5418 <twiReceive+0x36>
    5408:	3e df       	rcall	.-388    	; 0x5286 <_initTwiInterface>
    540a:	89 81       	ldd	r24, Y+1	; 0x01
    540c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5410:	d0 93 dd 15 	sts	0x15DD, r29	; 0x8015dd <_twiCurrentHandler+0x1>
    5414:	c0 93 dc 15 	sts	0x15DC, r28	; 0x8015dc <_twiCurrentHandler>
    5418:	10 93 de 15 	sts	0x15DE, r17	; 0x8015de <_twiMessageLen>
    541c:	88 81       	ld	r24, Y
    541e:	88 0f       	add	r24, r24
    5420:	81 60       	ori	r24, 0x01	; 1
    5422:	80 93 df 15 	sts	0x15DF, r24	; 0x8015df <_twiMessageBuffer>
    5426:	88 ef       	ldi	r24, 0xF8	; 248
    5428:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    542c:	85 ea       	ldi	r24, 0xA5	; 165
    542e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5432:	85 e0       	ldi	r24, 0x05	; 5
    5434:	05 c0       	rjmp	.+10     	; 0x5440 <twiReceive+0x5e>
    5436:	86 e0       	ldi	r24, 0x06	; 6
    5438:	03 c0       	rjmp	.+6      	; 0x5440 <twiReceive+0x5e>
    543a:	87 e0       	ldi	r24, 0x07	; 7
    543c:	01 c0       	rjmp	.+2      	; 0x5440 <twiReceive+0x5e>
    543e:	82 e0       	ldi	r24, 0x02	; 2
    5440:	df 91       	pop	r29
    5442:	cf 91       	pop	r28
    5444:	1f 91       	pop	r17
    5446:	08 95       	ret

00005448 <__vector_39>:
    5448:	1f 92       	push	r1
    544a:	0f 92       	push	r0
    544c:	0f b6       	in	r0, 0x3f	; 63
    544e:	0f 92       	push	r0
    5450:	11 24       	eor	r1, r1
    5452:	0b b6       	in	r0, 0x3b	; 59
    5454:	0f 92       	push	r0
    5456:	2f 93       	push	r18
    5458:	3f 93       	push	r19
    545a:	4f 93       	push	r20
    545c:	5f 93       	push	r21
    545e:	6f 93       	push	r22
    5460:	7f 93       	push	r23
    5462:	8f 93       	push	r24
    5464:	9f 93       	push	r25
    5466:	af 93       	push	r26
    5468:	bf 93       	push	r27
    546a:	ef 93       	push	r30
    546c:	ff 93       	push	r31
    546e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5472:	8e 2f       	mov	r24, r30
    5474:	90 e0       	ldi	r25, 0x00	; 0
    5476:	fc 01       	movw	r30, r24
    5478:	38 97       	sbiw	r30, 0x08	; 8
    547a:	e1 35       	cpi	r30, 0x51	; 81
    547c:	f1 05       	cpc	r31, r1
    547e:	08 f0       	brcs	.+2      	; 0x5482 <__vector_39+0x3a>
    5480:	75 c0       	rjmp	.+234    	; 0x556c <__vector_39+0x124>
    5482:	88 27       	eor	r24, r24
    5484:	e4 58       	subi	r30, 0x84	; 132
    5486:	ff 4f       	sbci	r31, 0xFF	; 255
    5488:	8f 4f       	sbci	r24, 0xFF	; 255
    548a:	a5 c2       	rjmp	.+1354   	; 0x59d6 <__tablejump2__>
    548c:	10 92 db 15 	sts	0x15DB, r1	; 0x8015db <_index.1885>
    5490:	e0 91 db 15 	lds	r30, 0x15DB	; 0x8015db <_index.1885>
    5494:	80 91 de 15 	lds	r24, 0x15DE	; 0x8015de <_twiMessageLen>
    5498:	e8 17       	cp	r30, r24
    549a:	70 f4       	brcc	.+28     	; 0x54b8 <__vector_39+0x70>
    549c:	81 e0       	ldi	r24, 0x01	; 1
    549e:	8e 0f       	add	r24, r30
    54a0:	80 93 db 15 	sts	0x15DB, r24	; 0x8015db <_index.1885>
    54a4:	f0 e0       	ldi	r31, 0x00	; 0
    54a6:	e1 52       	subi	r30, 0x21	; 33
    54a8:	fa 4e       	sbci	r31, 0xEA	; 234
    54aa:	80 81       	ld	r24, Z
    54ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    54b0:	85 e8       	ldi	r24, 0x85	; 133
    54b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54b6:	72 c0       	rjmp	.+228    	; 0x559c <__vector_39+0x154>
    54b8:	84 e9       	ldi	r24, 0x94	; 148
    54ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54be:	80 91 dc 15 	lds	r24, 0x15DC	; 0x8015dc <_twiCurrentHandler>
    54c2:	90 91 dd 15 	lds	r25, 0x15DD	; 0x8015dd <_twiCurrentHandler+0x1>
    54c6:	dc 01       	movw	r26, r24
    54c8:	12 96       	adiw	r26, 0x02	; 2
    54ca:	ed 91       	ld	r30, X+
    54cc:	fc 91       	ld	r31, X
    54ce:	13 97       	sbiw	r26, 0x03	; 3
    54d0:	30 97       	sbiw	r30, 0x00	; 0
    54d2:	09 f4       	brne	.+2      	; 0x54d6 <__vector_39+0x8e>
    54d4:	63 c0       	rjmp	.+198    	; 0x559c <__vector_39+0x154>
    54d6:	20 e0       	ldi	r18, 0x00	; 0
    54d8:	40 e0       	ldi	r20, 0x00	; 0
    54da:	50 e0       	ldi	r21, 0x00	; 0
    54dc:	64 e0       	ldi	r22, 0x04	; 4
    54de:	19 95       	eicall
    54e0:	5d c0       	rjmp	.+186    	; 0x559c <__vector_39+0x154>
    54e2:	e0 91 db 15 	lds	r30, 0x15DB	; 0x8015db <_index.1885>
    54e6:	81 e0       	ldi	r24, 0x01	; 1
    54e8:	8e 0f       	add	r24, r30
    54ea:	80 93 db 15 	sts	0x15DB, r24	; 0x8015db <_index.1885>
    54ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    54f2:	f0 e0       	ldi	r31, 0x00	; 0
    54f4:	e1 52       	subi	r30, 0x21	; 33
    54f6:	fa 4e       	sbci	r31, 0xEA	; 234
    54f8:	80 83       	st	Z, r24
    54fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    54fe:	80 34       	cpi	r24, 0x40	; 64
    5500:	11 f4       	brne	.+4      	; 0x5506 <__vector_39+0xbe>
    5502:	10 92 db 15 	sts	0x15DB, r1	; 0x8015db <_index.1885>
    5506:	20 91 db 15 	lds	r18, 0x15DB	; 0x8015db <_index.1885>
    550a:	30 e0       	ldi	r19, 0x00	; 0
    550c:	80 91 de 15 	lds	r24, 0x15DE	; 0x8015de <_twiMessageLen>
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	01 97       	sbiw	r24, 0x01	; 1
    5514:	28 17       	cp	r18, r24
    5516:	39 07       	cpc	r19, r25
    5518:	24 f4       	brge	.+8      	; 0x5522 <__vector_39+0xda>
    551a:	85 ec       	ldi	r24, 0xC5	; 197
    551c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5520:	3d c0       	rjmp	.+122    	; 0x559c <__vector_39+0x154>
    5522:	85 e8       	ldi	r24, 0x85	; 133
    5524:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5528:	39 c0       	rjmp	.+114    	; 0x559c <__vector_39+0x154>
    552a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    552e:	e0 91 db 15 	lds	r30, 0x15DB	; 0x8015db <_index.1885>
    5532:	f0 e0       	ldi	r31, 0x00	; 0
    5534:	e1 52       	subi	r30, 0x21	; 33
    5536:	fa 4e       	sbci	r31, 0xEA	; 234
    5538:	80 83       	st	Z, r24
    553a:	84 e9       	ldi	r24, 0x94	; 148
    553c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5540:	80 91 dc 15 	lds	r24, 0x15DC	; 0x8015dc <_twiCurrentHandler>
    5544:	90 91 dd 15 	lds	r25, 0x15DD	; 0x8015dd <_twiCurrentHandler+0x1>
    5548:	dc 01       	movw	r26, r24
    554a:	12 96       	adiw	r26, 0x02	; 2
    554c:	ed 91       	ld	r30, X+
    554e:	fc 91       	ld	r31, X
    5550:	13 97       	sbiw	r26, 0x03	; 3
    5552:	30 97       	sbiw	r30, 0x00	; 0
    5554:	19 f1       	breq	.+70     	; 0x559c <__vector_39+0x154>
    5556:	20 91 de 15 	lds	r18, 0x15DE	; 0x8015de <_twiMessageLen>
    555a:	4f ed       	ldi	r20, 0xDF	; 223
    555c:	55 e1       	ldi	r21, 0x15	; 21
    555e:	65 e0       	ldi	r22, 0x05	; 5
    5560:	19 95       	eicall
    5562:	1c c0       	rjmp	.+56     	; 0x559c <__vector_39+0x154>
    5564:	85 ea       	ldi	r24, 0xA5	; 165
    5566:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    556a:	18 c0       	rjmp	.+48     	; 0x559c <__vector_39+0x154>
    556c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5570:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5574:	84 e0       	ldi	r24, 0x04	; 4
    5576:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    557a:	80 91 dc 15 	lds	r24, 0x15DC	; 0x8015dc <_twiCurrentHandler>
    557e:	90 91 dd 15 	lds	r25, 0x15DD	; 0x8015dd <_twiCurrentHandler+0x1>
    5582:	dc 01       	movw	r26, r24
    5584:	12 96       	adiw	r26, 0x02	; 2
    5586:	ed 91       	ld	r30, X+
    5588:	fc 91       	ld	r31, X
    558a:	13 97       	sbiw	r26, 0x03	; 3
    558c:	30 97       	sbiw	r30, 0x00	; 0
    558e:	31 f0       	breq	.+12     	; 0x559c <__vector_39+0x154>
    5590:	20 e0       	ldi	r18, 0x00	; 0
    5592:	40 e0       	ldi	r20, 0x00	; 0
    5594:	50 e0       	ldi	r21, 0x00	; 0
    5596:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    559a:	19 95       	eicall
    559c:	ff 91       	pop	r31
    559e:	ef 91       	pop	r30
    55a0:	bf 91       	pop	r27
    55a2:	af 91       	pop	r26
    55a4:	9f 91       	pop	r25
    55a6:	8f 91       	pop	r24
    55a8:	7f 91       	pop	r23
    55aa:	6f 91       	pop	r22
    55ac:	5f 91       	pop	r21
    55ae:	4f 91       	pop	r20
    55b0:	3f 91       	pop	r19
    55b2:	2f 91       	pop	r18
    55b4:	0f 90       	pop	r0
    55b6:	0b be       	out	0x3b, r0	; 59
    55b8:	0f 90       	pop	r0
    55ba:	0f be       	out	0x3f, r0	; 63
    55bc:	0f 90       	pop	r0
    55be:	1f 90       	pop	r1
    55c0:	18 95       	reti

000055c2 <fifo_init>:
    55c2:	fc 01       	movw	r30, r24
    55c4:	41 11       	cpse	r20, r1
    55c6:	01 c0       	rjmp	.+2      	; 0x55ca <fifo_init+0x8>
    55c8:	2f d3       	rcall	.+1630   	; 0x5c28 <abort>
    55ca:	84 2f       	mov	r24, r20
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	9c 01       	movw	r18, r24
    55d0:	21 50       	subi	r18, 0x01	; 1
    55d2:	31 09       	sbc	r19, r1
    55d4:	82 23       	and	r24, r18
    55d6:	93 23       	and	r25, r19
    55d8:	89 2b       	or	r24, r25
    55da:	09 f0       	breq	.+2      	; 0x55de <fifo_init+0x1c>
    55dc:	25 d3       	rcall	.+1610   	; 0x5c28 <abort>
    55de:	41 38       	cpi	r20, 0x81	; 129
    55e0:	08 f0       	brcs	.+2      	; 0x55e4 <fifo_init+0x22>
    55e2:	22 d3       	rcall	.+1604   	; 0x5c28 <abort>
    55e4:	12 82       	std	Z+2, r1	; 0x02
    55e6:	13 82       	std	Z+3, r1	; 0x03
    55e8:	44 83       	std	Z+4, r20	; 0x04
    55ea:	44 0f       	add	r20, r20
    55ec:	41 50       	subi	r20, 0x01	; 1
    55ee:	45 83       	std	Z+5, r20	; 0x05
    55f0:	71 83       	std	Z+1, r23	; 0x01
    55f2:	60 83       	st	Z, r22
    55f4:	80 e0       	ldi	r24, 0x00	; 0
    55f6:	90 e0       	ldi	r25, 0x00	; 0
    55f8:	08 95       	ret

000055fa <__subsf3>:
    55fa:	50 58       	subi	r21, 0x80	; 128

000055fc <__addsf3>:
    55fc:	bb 27       	eor	r27, r27
    55fe:	aa 27       	eor	r26, r26
    5600:	0e d0       	rcall	.+28     	; 0x561e <__addsf3x>
    5602:	28 c1       	rjmp	.+592    	; 0x5854 <__fp_round>
    5604:	19 d1       	rcall	.+562    	; 0x5838 <__fp_pscA>
    5606:	30 f0       	brcs	.+12     	; 0x5614 <__addsf3+0x18>
    5608:	1e d1       	rcall	.+572    	; 0x5846 <__fp_pscB>
    560a:	20 f0       	brcs	.+8      	; 0x5614 <__addsf3+0x18>
    560c:	31 f4       	brne	.+12     	; 0x561a <__addsf3+0x1e>
    560e:	9f 3f       	cpi	r25, 0xFF	; 255
    5610:	11 f4       	brne	.+4      	; 0x5616 <__addsf3+0x1a>
    5612:	1e f4       	brtc	.+6      	; 0x561a <__addsf3+0x1e>
    5614:	0e c1       	rjmp	.+540    	; 0x5832 <__fp_nan>
    5616:	0e f4       	brtc	.+2      	; 0x561a <__addsf3+0x1e>
    5618:	e0 95       	com	r30
    561a:	e7 fb       	bst	r30, 7
    561c:	04 c1       	rjmp	.+520    	; 0x5826 <__fp_inf>

0000561e <__addsf3x>:
    561e:	e9 2f       	mov	r30, r25
    5620:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__fp_split3>
    5624:	78 f3       	brcs	.-34     	; 0x5604 <__addsf3+0x8>
    5626:	ba 17       	cp	r27, r26
    5628:	62 07       	cpc	r22, r18
    562a:	73 07       	cpc	r23, r19
    562c:	84 07       	cpc	r24, r20
    562e:	95 07       	cpc	r25, r21
    5630:	20 f0       	brcs	.+8      	; 0x563a <__addsf3x+0x1c>
    5632:	79 f4       	brne	.+30     	; 0x5652 <__addsf3x+0x34>
    5634:	a6 f5       	brtc	.+104    	; 0x569e <__addsf3x+0x80>
    5636:	0c 94 8c 1c 	jmp	0x3918	; 0x3918 <__fp_zero>
    563a:	0e f4       	brtc	.+2      	; 0x563e <__addsf3x+0x20>
    563c:	e0 95       	com	r30
    563e:	0b 2e       	mov	r0, r27
    5640:	ba 2f       	mov	r27, r26
    5642:	a0 2d       	mov	r26, r0
    5644:	0b 01       	movw	r0, r22
    5646:	b9 01       	movw	r22, r18
    5648:	90 01       	movw	r18, r0
    564a:	0c 01       	movw	r0, r24
    564c:	ca 01       	movw	r24, r20
    564e:	a0 01       	movw	r20, r0
    5650:	11 24       	eor	r1, r1
    5652:	ff 27       	eor	r31, r31
    5654:	59 1b       	sub	r21, r25
    5656:	99 f0       	breq	.+38     	; 0x567e <__addsf3x+0x60>
    5658:	59 3f       	cpi	r21, 0xF9	; 249
    565a:	50 f4       	brcc	.+20     	; 0x5670 <__addsf3x+0x52>
    565c:	50 3e       	cpi	r21, 0xE0	; 224
    565e:	68 f1       	brcs	.+90     	; 0x56ba <__addsf3x+0x9c>
    5660:	1a 16       	cp	r1, r26
    5662:	f0 40       	sbci	r31, 0x00	; 0
    5664:	a2 2f       	mov	r26, r18
    5666:	23 2f       	mov	r18, r19
    5668:	34 2f       	mov	r19, r20
    566a:	44 27       	eor	r20, r20
    566c:	58 5f       	subi	r21, 0xF8	; 248
    566e:	f3 cf       	rjmp	.-26     	; 0x5656 <__addsf3x+0x38>
    5670:	46 95       	lsr	r20
    5672:	37 95       	ror	r19
    5674:	27 95       	ror	r18
    5676:	a7 95       	ror	r26
    5678:	f0 40       	sbci	r31, 0x00	; 0
    567a:	53 95       	inc	r21
    567c:	c9 f7       	brne	.-14     	; 0x5670 <__addsf3x+0x52>
    567e:	7e f4       	brtc	.+30     	; 0x569e <__addsf3x+0x80>
    5680:	1f 16       	cp	r1, r31
    5682:	ba 0b       	sbc	r27, r26
    5684:	62 0b       	sbc	r22, r18
    5686:	73 0b       	sbc	r23, r19
    5688:	84 0b       	sbc	r24, r20
    568a:	ba f0       	brmi	.+46     	; 0x56ba <__addsf3x+0x9c>
    568c:	91 50       	subi	r25, 0x01	; 1
    568e:	a1 f0       	breq	.+40     	; 0x56b8 <__addsf3x+0x9a>
    5690:	ff 0f       	add	r31, r31
    5692:	bb 1f       	adc	r27, r27
    5694:	66 1f       	adc	r22, r22
    5696:	77 1f       	adc	r23, r23
    5698:	88 1f       	adc	r24, r24
    569a:	c2 f7       	brpl	.-16     	; 0x568c <__addsf3x+0x6e>
    569c:	0e c0       	rjmp	.+28     	; 0x56ba <__addsf3x+0x9c>
    569e:	ba 0f       	add	r27, r26
    56a0:	62 1f       	adc	r22, r18
    56a2:	73 1f       	adc	r23, r19
    56a4:	84 1f       	adc	r24, r20
    56a6:	48 f4       	brcc	.+18     	; 0x56ba <__addsf3x+0x9c>
    56a8:	87 95       	ror	r24
    56aa:	77 95       	ror	r23
    56ac:	67 95       	ror	r22
    56ae:	b7 95       	ror	r27
    56b0:	f7 95       	ror	r31
    56b2:	9e 3f       	cpi	r25, 0xFE	; 254
    56b4:	08 f0       	brcs	.+2      	; 0x56b8 <__addsf3x+0x9a>
    56b6:	b1 cf       	rjmp	.-158    	; 0x561a <__addsf3+0x1e>
    56b8:	93 95       	inc	r25
    56ba:	88 0f       	add	r24, r24
    56bc:	08 f0       	brcs	.+2      	; 0x56c0 <__addsf3x+0xa2>
    56be:	99 27       	eor	r25, r25
    56c0:	ee 0f       	add	r30, r30
    56c2:	97 95       	ror	r25
    56c4:	87 95       	ror	r24
    56c6:	08 95       	ret

000056c8 <__divsf3>:
    56c8:	0d d0       	rcall	.+26     	; 0x56e4 <__divsf3x>
    56ca:	c4 c0       	rjmp	.+392    	; 0x5854 <__fp_round>
    56cc:	bc d0       	rcall	.+376    	; 0x5846 <__fp_pscB>
    56ce:	48 f0       	brcs	.+18     	; 0x56e2 <__divsf3+0x1a>
    56d0:	b3 d0       	rcall	.+358    	; 0x5838 <__fp_pscA>
    56d2:	38 f0       	brcs	.+14     	; 0x56e2 <__divsf3+0x1a>
    56d4:	21 f4       	brne	.+8      	; 0x56de <__divsf3+0x16>
    56d6:	5f 3f       	cpi	r21, 0xFF	; 255
    56d8:	21 f0       	breq	.+8      	; 0x56e2 <__divsf3+0x1a>
    56da:	a5 c0       	rjmp	.+330    	; 0x5826 <__fp_inf>
    56dc:	51 11       	cpse	r21, r1
    56de:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__fp_szero>
    56e2:	a7 c0       	rjmp	.+334    	; 0x5832 <__fp_nan>

000056e4 <__divsf3x>:
    56e4:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__fp_split3>
    56e8:	88 f3       	brcs	.-30     	; 0x56cc <__divsf3+0x4>

000056ea <__divsf3_pse>:
    56ea:	99 23       	and	r25, r25
    56ec:	b9 f3       	breq	.-18     	; 0x56dc <__divsf3+0x14>
    56ee:	55 23       	and	r21, r21
    56f0:	a1 f3       	breq	.-24     	; 0x56da <__divsf3+0x12>
    56f2:	95 1b       	sub	r25, r21
    56f4:	55 0b       	sbc	r21, r21
    56f6:	bb 27       	eor	r27, r27
    56f8:	aa 27       	eor	r26, r26
    56fa:	62 17       	cp	r22, r18
    56fc:	73 07       	cpc	r23, r19
    56fe:	84 07       	cpc	r24, r20
    5700:	38 f0       	brcs	.+14     	; 0x5710 <__divsf3_pse+0x26>
    5702:	9f 5f       	subi	r25, 0xFF	; 255
    5704:	5f 4f       	sbci	r21, 0xFF	; 255
    5706:	22 0f       	add	r18, r18
    5708:	33 1f       	adc	r19, r19
    570a:	44 1f       	adc	r20, r20
    570c:	aa 1f       	adc	r26, r26
    570e:	a9 f3       	breq	.-22     	; 0x56fa <__divsf3_pse+0x10>
    5710:	34 d0       	rcall	.+104    	; 0x577a <__divsf3_pse+0x90>
    5712:	0e 2e       	mov	r0, r30
    5714:	3a f0       	brmi	.+14     	; 0x5724 <__divsf3_pse+0x3a>
    5716:	e0 e8       	ldi	r30, 0x80	; 128
    5718:	31 d0       	rcall	.+98     	; 0x577c <__divsf3_pse+0x92>
    571a:	91 50       	subi	r25, 0x01	; 1
    571c:	50 40       	sbci	r21, 0x00	; 0
    571e:	e6 95       	lsr	r30
    5720:	00 1c       	adc	r0, r0
    5722:	ca f7       	brpl	.-14     	; 0x5716 <__divsf3_pse+0x2c>
    5724:	2a d0       	rcall	.+84     	; 0x577a <__divsf3_pse+0x90>
    5726:	fe 2f       	mov	r31, r30
    5728:	28 d0       	rcall	.+80     	; 0x577a <__divsf3_pse+0x90>
    572a:	66 0f       	add	r22, r22
    572c:	77 1f       	adc	r23, r23
    572e:	88 1f       	adc	r24, r24
    5730:	bb 1f       	adc	r27, r27
    5732:	26 17       	cp	r18, r22
    5734:	37 07       	cpc	r19, r23
    5736:	48 07       	cpc	r20, r24
    5738:	ab 07       	cpc	r26, r27
    573a:	b0 e8       	ldi	r27, 0x80	; 128
    573c:	09 f0       	breq	.+2      	; 0x5740 <__divsf3_pse+0x56>
    573e:	bb 0b       	sbc	r27, r27
    5740:	80 2d       	mov	r24, r0
    5742:	bf 01       	movw	r22, r30
    5744:	ff 27       	eor	r31, r31
    5746:	93 58       	subi	r25, 0x83	; 131
    5748:	5f 4f       	sbci	r21, 0xFF	; 255
    574a:	32 f0       	brmi	.+12     	; 0x5758 <__divsf3_pse+0x6e>
    574c:	9e 3f       	cpi	r25, 0xFE	; 254
    574e:	51 05       	cpc	r21, r1
    5750:	70 f0       	brcs	.+28     	; 0x576e <__divsf3_pse+0x84>
    5752:	69 c0       	rjmp	.+210    	; 0x5826 <__fp_inf>
    5754:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__fp_szero>
    5758:	5f 3f       	cpi	r21, 0xFF	; 255
    575a:	e4 f3       	brlt	.-8      	; 0x5754 <__divsf3_pse+0x6a>
    575c:	98 3e       	cpi	r25, 0xE8	; 232
    575e:	d4 f3       	brlt	.-12     	; 0x5754 <__divsf3_pse+0x6a>
    5760:	86 95       	lsr	r24
    5762:	77 95       	ror	r23
    5764:	67 95       	ror	r22
    5766:	b7 95       	ror	r27
    5768:	f7 95       	ror	r31
    576a:	9f 5f       	subi	r25, 0xFF	; 255
    576c:	c9 f7       	brne	.-14     	; 0x5760 <__divsf3_pse+0x76>
    576e:	88 0f       	add	r24, r24
    5770:	91 1d       	adc	r25, r1
    5772:	96 95       	lsr	r25
    5774:	87 95       	ror	r24
    5776:	97 f9       	bld	r25, 7
    5778:	08 95       	ret
    577a:	e1 e0       	ldi	r30, 0x01	; 1
    577c:	66 0f       	add	r22, r22
    577e:	77 1f       	adc	r23, r23
    5780:	88 1f       	adc	r24, r24
    5782:	bb 1f       	adc	r27, r27
    5784:	62 17       	cp	r22, r18
    5786:	73 07       	cpc	r23, r19
    5788:	84 07       	cpc	r24, r20
    578a:	ba 07       	cpc	r27, r26
    578c:	20 f0       	brcs	.+8      	; 0x5796 <__divsf3_pse+0xac>
    578e:	62 1b       	sub	r22, r18
    5790:	73 0b       	sbc	r23, r19
    5792:	84 0b       	sbc	r24, r20
    5794:	ba 0b       	sbc	r27, r26
    5796:	ee 1f       	adc	r30, r30
    5798:	88 f7       	brcc	.-30     	; 0x577c <__divsf3_pse+0x92>
    579a:	e0 95       	com	r30
    579c:	08 95       	ret

0000579e <__fixsfsi>:
    579e:	0e 94 3e 1c 	call	0x387c	; 0x387c <__fixunssfsi>
    57a2:	68 94       	set
    57a4:	b1 11       	cpse	r27, r1
    57a6:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__fp_szero>
    57aa:	08 95       	ret

000057ac <__floatunsisf>:
    57ac:	e8 94       	clt
    57ae:	09 c0       	rjmp	.+18     	; 0x57c2 <__floatsisf+0x12>

000057b0 <__floatsisf>:
    57b0:	97 fb       	bst	r25, 7
    57b2:	3e f4       	brtc	.+14     	; 0x57c2 <__floatsisf+0x12>
    57b4:	90 95       	com	r25
    57b6:	80 95       	com	r24
    57b8:	70 95       	com	r23
    57ba:	61 95       	neg	r22
    57bc:	7f 4f       	sbci	r23, 0xFF	; 255
    57be:	8f 4f       	sbci	r24, 0xFF	; 255
    57c0:	9f 4f       	sbci	r25, 0xFF	; 255
    57c2:	99 23       	and	r25, r25
    57c4:	a9 f0       	breq	.+42     	; 0x57f0 <__floatsisf+0x40>
    57c6:	f9 2f       	mov	r31, r25
    57c8:	96 e9       	ldi	r25, 0x96	; 150
    57ca:	bb 27       	eor	r27, r27
    57cc:	93 95       	inc	r25
    57ce:	f6 95       	lsr	r31
    57d0:	87 95       	ror	r24
    57d2:	77 95       	ror	r23
    57d4:	67 95       	ror	r22
    57d6:	b7 95       	ror	r27
    57d8:	f1 11       	cpse	r31, r1
    57da:	f8 cf       	rjmp	.-16     	; 0x57cc <__floatsisf+0x1c>
    57dc:	fa f4       	brpl	.+62     	; 0x581c <__floatsisf+0x6c>
    57de:	bb 0f       	add	r27, r27
    57e0:	11 f4       	brne	.+4      	; 0x57e6 <__floatsisf+0x36>
    57e2:	60 ff       	sbrs	r22, 0
    57e4:	1b c0       	rjmp	.+54     	; 0x581c <__floatsisf+0x6c>
    57e6:	6f 5f       	subi	r22, 0xFF	; 255
    57e8:	7f 4f       	sbci	r23, 0xFF	; 255
    57ea:	8f 4f       	sbci	r24, 0xFF	; 255
    57ec:	9f 4f       	sbci	r25, 0xFF	; 255
    57ee:	16 c0       	rjmp	.+44     	; 0x581c <__floatsisf+0x6c>
    57f0:	88 23       	and	r24, r24
    57f2:	11 f0       	breq	.+4      	; 0x57f8 <__floatsisf+0x48>
    57f4:	96 e9       	ldi	r25, 0x96	; 150
    57f6:	11 c0       	rjmp	.+34     	; 0x581a <__floatsisf+0x6a>
    57f8:	77 23       	and	r23, r23
    57fa:	21 f0       	breq	.+8      	; 0x5804 <__floatsisf+0x54>
    57fc:	9e e8       	ldi	r25, 0x8E	; 142
    57fe:	87 2f       	mov	r24, r23
    5800:	76 2f       	mov	r23, r22
    5802:	05 c0       	rjmp	.+10     	; 0x580e <__floatsisf+0x5e>
    5804:	66 23       	and	r22, r22
    5806:	71 f0       	breq	.+28     	; 0x5824 <__floatsisf+0x74>
    5808:	96 e8       	ldi	r25, 0x86	; 134
    580a:	86 2f       	mov	r24, r22
    580c:	70 e0       	ldi	r23, 0x00	; 0
    580e:	60 e0       	ldi	r22, 0x00	; 0
    5810:	2a f0       	brmi	.+10     	; 0x581c <__floatsisf+0x6c>
    5812:	9a 95       	dec	r25
    5814:	66 0f       	add	r22, r22
    5816:	77 1f       	adc	r23, r23
    5818:	88 1f       	adc	r24, r24
    581a:	da f7       	brpl	.-10     	; 0x5812 <__floatsisf+0x62>
    581c:	88 0f       	add	r24, r24
    581e:	96 95       	lsr	r25
    5820:	87 95       	ror	r24
    5822:	97 f9       	bld	r25, 7
    5824:	08 95       	ret

00005826 <__fp_inf>:
    5826:	97 f9       	bld	r25, 7
    5828:	9f 67       	ori	r25, 0x7F	; 127
    582a:	80 e8       	ldi	r24, 0x80	; 128
    582c:	70 e0       	ldi	r23, 0x00	; 0
    582e:	60 e0       	ldi	r22, 0x00	; 0
    5830:	08 95       	ret

00005832 <__fp_nan>:
    5832:	9f ef       	ldi	r25, 0xFF	; 255
    5834:	80 ec       	ldi	r24, 0xC0	; 192
    5836:	08 95       	ret

00005838 <__fp_pscA>:
    5838:	00 24       	eor	r0, r0
    583a:	0a 94       	dec	r0
    583c:	16 16       	cp	r1, r22
    583e:	17 06       	cpc	r1, r23
    5840:	18 06       	cpc	r1, r24
    5842:	09 06       	cpc	r0, r25
    5844:	08 95       	ret

00005846 <__fp_pscB>:
    5846:	00 24       	eor	r0, r0
    5848:	0a 94       	dec	r0
    584a:	12 16       	cp	r1, r18
    584c:	13 06       	cpc	r1, r19
    584e:	14 06       	cpc	r1, r20
    5850:	05 06       	cpc	r0, r21
    5852:	08 95       	ret

00005854 <__fp_round>:
    5854:	09 2e       	mov	r0, r25
    5856:	03 94       	inc	r0
    5858:	00 0c       	add	r0, r0
    585a:	11 f4       	brne	.+4      	; 0x5860 <__fp_round+0xc>
    585c:	88 23       	and	r24, r24
    585e:	52 f0       	brmi	.+20     	; 0x5874 <__fp_round+0x20>
    5860:	bb 0f       	add	r27, r27
    5862:	40 f4       	brcc	.+16     	; 0x5874 <__fp_round+0x20>
    5864:	bf 2b       	or	r27, r31
    5866:	11 f4       	brne	.+4      	; 0x586c <__fp_round+0x18>
    5868:	60 ff       	sbrs	r22, 0
    586a:	04 c0       	rjmp	.+8      	; 0x5874 <__fp_round+0x20>
    586c:	6f 5f       	subi	r22, 0xFF	; 255
    586e:	7f 4f       	sbci	r23, 0xFF	; 255
    5870:	8f 4f       	sbci	r24, 0xFF	; 255
    5872:	9f 4f       	sbci	r25, 0xFF	; 255
    5874:	08 95       	ret

00005876 <__gesf2>:
    5876:	69 d0       	rcall	.+210    	; 0x594a <__fp_cmp>
    5878:	08 f4       	brcc	.+2      	; 0x587c <__gesf2+0x6>
    587a:	8f ef       	ldi	r24, 0xFF	; 255
    587c:	08 95       	ret

0000587e <__mulsf3>:
    587e:	0c d0       	rcall	.+24     	; 0x5898 <__mulsf3x>
    5880:	e9 cf       	rjmp	.-46     	; 0x5854 <__fp_round>
    5882:	da df       	rcall	.-76     	; 0x5838 <__fp_pscA>
    5884:	28 f0       	brcs	.+10     	; 0x5890 <__mulsf3+0x12>
    5886:	df df       	rcall	.-66     	; 0x5846 <__fp_pscB>
    5888:	18 f0       	brcs	.+6      	; 0x5890 <__mulsf3+0x12>
    588a:	95 23       	and	r25, r21
    588c:	09 f0       	breq	.+2      	; 0x5890 <__mulsf3+0x12>
    588e:	cb cf       	rjmp	.-106    	; 0x5826 <__fp_inf>
    5890:	d0 cf       	rjmp	.-96     	; 0x5832 <__fp_nan>
    5892:	11 24       	eor	r1, r1
    5894:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__fp_szero>

00005898 <__mulsf3x>:
    5898:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__fp_split3>
    589c:	90 f3       	brcs	.-28     	; 0x5882 <__mulsf3+0x4>

0000589e <__mulsf3_pse>:
    589e:	95 9f       	mul	r25, r21
    58a0:	c1 f3       	breq	.-16     	; 0x5892 <__mulsf3+0x14>
    58a2:	95 0f       	add	r25, r21
    58a4:	50 e0       	ldi	r21, 0x00	; 0
    58a6:	55 1f       	adc	r21, r21
    58a8:	62 9f       	mul	r22, r18
    58aa:	f0 01       	movw	r30, r0
    58ac:	72 9f       	mul	r23, r18
    58ae:	bb 27       	eor	r27, r27
    58b0:	f0 0d       	add	r31, r0
    58b2:	b1 1d       	adc	r27, r1
    58b4:	63 9f       	mul	r22, r19
    58b6:	aa 27       	eor	r26, r26
    58b8:	f0 0d       	add	r31, r0
    58ba:	b1 1d       	adc	r27, r1
    58bc:	aa 1f       	adc	r26, r26
    58be:	64 9f       	mul	r22, r20
    58c0:	66 27       	eor	r22, r22
    58c2:	b0 0d       	add	r27, r0
    58c4:	a1 1d       	adc	r26, r1
    58c6:	66 1f       	adc	r22, r22
    58c8:	82 9f       	mul	r24, r18
    58ca:	22 27       	eor	r18, r18
    58cc:	b0 0d       	add	r27, r0
    58ce:	a1 1d       	adc	r26, r1
    58d0:	62 1f       	adc	r22, r18
    58d2:	73 9f       	mul	r23, r19
    58d4:	b0 0d       	add	r27, r0
    58d6:	a1 1d       	adc	r26, r1
    58d8:	62 1f       	adc	r22, r18
    58da:	83 9f       	mul	r24, r19
    58dc:	a0 0d       	add	r26, r0
    58de:	61 1d       	adc	r22, r1
    58e0:	22 1f       	adc	r18, r18
    58e2:	74 9f       	mul	r23, r20
    58e4:	33 27       	eor	r19, r19
    58e6:	a0 0d       	add	r26, r0
    58e8:	61 1d       	adc	r22, r1
    58ea:	23 1f       	adc	r18, r19
    58ec:	84 9f       	mul	r24, r20
    58ee:	60 0d       	add	r22, r0
    58f0:	21 1d       	adc	r18, r1
    58f2:	82 2f       	mov	r24, r18
    58f4:	76 2f       	mov	r23, r22
    58f6:	6a 2f       	mov	r22, r26
    58f8:	11 24       	eor	r1, r1
    58fa:	9f 57       	subi	r25, 0x7F	; 127
    58fc:	50 40       	sbci	r21, 0x00	; 0
    58fe:	92 f0       	brmi	.+36     	; 0x5924 <__mulsf3_pse+0x86>
    5900:	e9 f0       	breq	.+58     	; 0x593c <__mulsf3_pse+0x9e>
    5902:	88 23       	and	r24, r24
    5904:	4a f0       	brmi	.+18     	; 0x5918 <__mulsf3_pse+0x7a>
    5906:	ee 0f       	add	r30, r30
    5908:	ff 1f       	adc	r31, r31
    590a:	bb 1f       	adc	r27, r27
    590c:	66 1f       	adc	r22, r22
    590e:	77 1f       	adc	r23, r23
    5910:	88 1f       	adc	r24, r24
    5912:	91 50       	subi	r25, 0x01	; 1
    5914:	50 40       	sbci	r21, 0x00	; 0
    5916:	a9 f7       	brne	.-22     	; 0x5902 <__mulsf3_pse+0x64>
    5918:	9e 3f       	cpi	r25, 0xFE	; 254
    591a:	51 05       	cpc	r21, r1
    591c:	78 f0       	brcs	.+30     	; 0x593c <__mulsf3_pse+0x9e>
    591e:	83 cf       	rjmp	.-250    	; 0x5826 <__fp_inf>
    5920:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__fp_szero>
    5924:	5f 3f       	cpi	r21, 0xFF	; 255
    5926:	e4 f3       	brlt	.-8      	; 0x5920 <__mulsf3_pse+0x82>
    5928:	98 3e       	cpi	r25, 0xE8	; 232
    592a:	d4 f3       	brlt	.-12     	; 0x5920 <__mulsf3_pse+0x82>
    592c:	86 95       	lsr	r24
    592e:	77 95       	ror	r23
    5930:	67 95       	ror	r22
    5932:	b7 95       	ror	r27
    5934:	f7 95       	ror	r31
    5936:	e7 95       	ror	r30
    5938:	9f 5f       	subi	r25, 0xFF	; 255
    593a:	c1 f7       	brne	.-16     	; 0x592c <__mulsf3_pse+0x8e>
    593c:	fe 2b       	or	r31, r30
    593e:	88 0f       	add	r24, r24
    5940:	91 1d       	adc	r25, r1
    5942:	96 95       	lsr	r25
    5944:	87 95       	ror	r24
    5946:	97 f9       	bld	r25, 7
    5948:	08 95       	ret

0000594a <__fp_cmp>:
    594a:	99 0f       	add	r25, r25
    594c:	00 08       	sbc	r0, r0
    594e:	55 0f       	add	r21, r21
    5950:	aa 0b       	sbc	r26, r26
    5952:	e0 e8       	ldi	r30, 0x80	; 128
    5954:	fe ef       	ldi	r31, 0xFE	; 254
    5956:	16 16       	cp	r1, r22
    5958:	17 06       	cpc	r1, r23
    595a:	e8 07       	cpc	r30, r24
    595c:	f9 07       	cpc	r31, r25
    595e:	c0 f0       	brcs	.+48     	; 0x5990 <__fp_cmp+0x46>
    5960:	12 16       	cp	r1, r18
    5962:	13 06       	cpc	r1, r19
    5964:	e4 07       	cpc	r30, r20
    5966:	f5 07       	cpc	r31, r21
    5968:	98 f0       	brcs	.+38     	; 0x5990 <__fp_cmp+0x46>
    596a:	62 1b       	sub	r22, r18
    596c:	73 0b       	sbc	r23, r19
    596e:	84 0b       	sbc	r24, r20
    5970:	95 0b       	sbc	r25, r21
    5972:	39 f4       	brne	.+14     	; 0x5982 <__fp_cmp+0x38>
    5974:	0a 26       	eor	r0, r26
    5976:	61 f0       	breq	.+24     	; 0x5990 <__fp_cmp+0x46>
    5978:	23 2b       	or	r18, r19
    597a:	24 2b       	or	r18, r20
    597c:	25 2b       	or	r18, r21
    597e:	21 f4       	brne	.+8      	; 0x5988 <__fp_cmp+0x3e>
    5980:	08 95       	ret
    5982:	0a 26       	eor	r0, r26
    5984:	09 f4       	brne	.+2      	; 0x5988 <__fp_cmp+0x3e>
    5986:	a1 40       	sbci	r26, 0x01	; 1
    5988:	a6 95       	lsr	r26
    598a:	8f ef       	ldi	r24, 0xFF	; 255
    598c:	81 1d       	adc	r24, r1
    598e:	81 1d       	adc	r24, r1
    5990:	08 95       	ret

00005992 <__udivmodsi4>:
    5992:	a1 e2       	ldi	r26, 0x21	; 33
    5994:	1a 2e       	mov	r1, r26
    5996:	aa 1b       	sub	r26, r26
    5998:	bb 1b       	sub	r27, r27
    599a:	fd 01       	movw	r30, r26
    599c:	0d c0       	rjmp	.+26     	; 0x59b8 <__udivmodsi4_ep>

0000599e <__udivmodsi4_loop>:
    599e:	aa 1f       	adc	r26, r26
    59a0:	bb 1f       	adc	r27, r27
    59a2:	ee 1f       	adc	r30, r30
    59a4:	ff 1f       	adc	r31, r31
    59a6:	a2 17       	cp	r26, r18
    59a8:	b3 07       	cpc	r27, r19
    59aa:	e4 07       	cpc	r30, r20
    59ac:	f5 07       	cpc	r31, r21
    59ae:	20 f0       	brcs	.+8      	; 0x59b8 <__udivmodsi4_ep>
    59b0:	a2 1b       	sub	r26, r18
    59b2:	b3 0b       	sbc	r27, r19
    59b4:	e4 0b       	sbc	r30, r20
    59b6:	f5 0b       	sbc	r31, r21

000059b8 <__udivmodsi4_ep>:
    59b8:	66 1f       	adc	r22, r22
    59ba:	77 1f       	adc	r23, r23
    59bc:	88 1f       	adc	r24, r24
    59be:	99 1f       	adc	r25, r25
    59c0:	1a 94       	dec	r1
    59c2:	69 f7       	brne	.-38     	; 0x599e <__udivmodsi4_loop>
    59c4:	60 95       	com	r22
    59c6:	70 95       	com	r23
    59c8:	80 95       	com	r24
    59ca:	90 95       	com	r25
    59cc:	9b 01       	movw	r18, r22
    59ce:	ac 01       	movw	r20, r24
    59d0:	bd 01       	movw	r22, r26
    59d2:	cf 01       	movw	r24, r30
    59d4:	08 95       	ret

000059d6 <__tablejump2__>:
    59d6:	ee 0f       	add	r30, r30
    59d8:	ff 1f       	adc	r31, r31
    59da:	88 1f       	adc	r24, r24
    59dc:	8b bf       	out	0x3b, r24	; 59
    59de:	07 90       	elpm	r0, Z+
    59e0:	f6 91       	elpm	r31, Z
    59e2:	e0 2d       	mov	r30, r0
    59e4:	19 94       	eijmp

000059e6 <malloc>:
    59e6:	0f 93       	push	r16
    59e8:	1f 93       	push	r17
    59ea:	cf 93       	push	r28
    59ec:	df 93       	push	r29
    59ee:	82 30       	cpi	r24, 0x02	; 2
    59f0:	91 05       	cpc	r25, r1
    59f2:	10 f4       	brcc	.+4      	; 0x59f8 <malloc+0x12>
    59f4:	82 e0       	ldi	r24, 0x02	; 2
    59f6:	90 e0       	ldi	r25, 0x00	; 0
    59f8:	e0 91 00 16 	lds	r30, 0x1600	; 0x801600 <__flp>
    59fc:	f0 91 01 16 	lds	r31, 0x1601	; 0x801601 <__flp+0x1>
    5a00:	20 e0       	ldi	r18, 0x00	; 0
    5a02:	30 e0       	ldi	r19, 0x00	; 0
    5a04:	a0 e0       	ldi	r26, 0x00	; 0
    5a06:	b0 e0       	ldi	r27, 0x00	; 0
    5a08:	30 97       	sbiw	r30, 0x00	; 0
    5a0a:	19 f1       	breq	.+70     	; 0x5a52 <malloc+0x6c>
    5a0c:	40 81       	ld	r20, Z
    5a0e:	51 81       	ldd	r21, Z+1	; 0x01
    5a10:	02 81       	ldd	r16, Z+2	; 0x02
    5a12:	13 81       	ldd	r17, Z+3	; 0x03
    5a14:	48 17       	cp	r20, r24
    5a16:	59 07       	cpc	r21, r25
    5a18:	c8 f0       	brcs	.+50     	; 0x5a4c <malloc+0x66>
    5a1a:	84 17       	cp	r24, r20
    5a1c:	95 07       	cpc	r25, r21
    5a1e:	69 f4       	brne	.+26     	; 0x5a3a <malloc+0x54>
    5a20:	10 97       	sbiw	r26, 0x00	; 0
    5a22:	31 f0       	breq	.+12     	; 0x5a30 <malloc+0x4a>
    5a24:	12 96       	adiw	r26, 0x02	; 2
    5a26:	0c 93       	st	X, r16
    5a28:	12 97       	sbiw	r26, 0x02	; 2
    5a2a:	13 96       	adiw	r26, 0x03	; 3
    5a2c:	1c 93       	st	X, r17
    5a2e:	27 c0       	rjmp	.+78     	; 0x5a7e <malloc+0x98>
    5a30:	00 93 00 16 	sts	0x1600, r16	; 0x801600 <__flp>
    5a34:	10 93 01 16 	sts	0x1601, r17	; 0x801601 <__flp+0x1>
    5a38:	22 c0       	rjmp	.+68     	; 0x5a7e <malloc+0x98>
    5a3a:	21 15       	cp	r18, r1
    5a3c:	31 05       	cpc	r19, r1
    5a3e:	19 f0       	breq	.+6      	; 0x5a46 <malloc+0x60>
    5a40:	42 17       	cp	r20, r18
    5a42:	53 07       	cpc	r21, r19
    5a44:	18 f4       	brcc	.+6      	; 0x5a4c <malloc+0x66>
    5a46:	9a 01       	movw	r18, r20
    5a48:	bd 01       	movw	r22, r26
    5a4a:	ef 01       	movw	r28, r30
    5a4c:	df 01       	movw	r26, r30
    5a4e:	f8 01       	movw	r30, r16
    5a50:	db cf       	rjmp	.-74     	; 0x5a08 <malloc+0x22>
    5a52:	21 15       	cp	r18, r1
    5a54:	31 05       	cpc	r19, r1
    5a56:	f9 f0       	breq	.+62     	; 0x5a96 <malloc+0xb0>
    5a58:	28 1b       	sub	r18, r24
    5a5a:	39 0b       	sbc	r19, r25
    5a5c:	24 30       	cpi	r18, 0x04	; 4
    5a5e:	31 05       	cpc	r19, r1
    5a60:	80 f4       	brcc	.+32     	; 0x5a82 <malloc+0x9c>
    5a62:	8a 81       	ldd	r24, Y+2	; 0x02
    5a64:	9b 81       	ldd	r25, Y+3	; 0x03
    5a66:	61 15       	cp	r22, r1
    5a68:	71 05       	cpc	r23, r1
    5a6a:	21 f0       	breq	.+8      	; 0x5a74 <malloc+0x8e>
    5a6c:	fb 01       	movw	r30, r22
    5a6e:	93 83       	std	Z+3, r25	; 0x03
    5a70:	82 83       	std	Z+2, r24	; 0x02
    5a72:	04 c0       	rjmp	.+8      	; 0x5a7c <malloc+0x96>
    5a74:	90 93 01 16 	sts	0x1601, r25	; 0x801601 <__flp+0x1>
    5a78:	80 93 00 16 	sts	0x1600, r24	; 0x801600 <__flp>
    5a7c:	fe 01       	movw	r30, r28
    5a7e:	32 96       	adiw	r30, 0x02	; 2
    5a80:	44 c0       	rjmp	.+136    	; 0x5b0a <malloc+0x124>
    5a82:	fe 01       	movw	r30, r28
    5a84:	e2 0f       	add	r30, r18
    5a86:	f3 1f       	adc	r31, r19
    5a88:	81 93       	st	Z+, r24
    5a8a:	91 93       	st	Z+, r25
    5a8c:	22 50       	subi	r18, 0x02	; 2
    5a8e:	31 09       	sbc	r19, r1
    5a90:	39 83       	std	Y+1, r19	; 0x01
    5a92:	28 83       	st	Y, r18
    5a94:	3a c0       	rjmp	.+116    	; 0x5b0a <malloc+0x124>
    5a96:	20 91 fe 15 	lds	r18, 0x15FE	; 0x8015fe <__brkval>
    5a9a:	30 91 ff 15 	lds	r19, 0x15FF	; 0x8015ff <__brkval+0x1>
    5a9e:	23 2b       	or	r18, r19
    5aa0:	41 f4       	brne	.+16     	; 0x5ab2 <malloc+0xcc>
    5aa2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5aa6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5aaa:	30 93 ff 15 	sts	0x15FF, r19	; 0x8015ff <__brkval+0x1>
    5aae:	20 93 fe 15 	sts	0x15FE, r18	; 0x8015fe <__brkval>
    5ab2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5ab6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5aba:	21 15       	cp	r18, r1
    5abc:	31 05       	cpc	r19, r1
    5abe:	41 f4       	brne	.+16     	; 0x5ad0 <malloc+0xea>
    5ac0:	2d b7       	in	r18, 0x3d	; 61
    5ac2:	3e b7       	in	r19, 0x3e	; 62
    5ac4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5ac8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5acc:	24 1b       	sub	r18, r20
    5ace:	35 0b       	sbc	r19, r21
    5ad0:	e0 91 fe 15 	lds	r30, 0x15FE	; 0x8015fe <__brkval>
    5ad4:	f0 91 ff 15 	lds	r31, 0x15FF	; 0x8015ff <__brkval+0x1>
    5ad8:	e2 17       	cp	r30, r18
    5ada:	f3 07       	cpc	r31, r19
    5adc:	a0 f4       	brcc	.+40     	; 0x5b06 <malloc+0x120>
    5ade:	2e 1b       	sub	r18, r30
    5ae0:	3f 0b       	sbc	r19, r31
    5ae2:	28 17       	cp	r18, r24
    5ae4:	39 07       	cpc	r19, r25
    5ae6:	78 f0       	brcs	.+30     	; 0x5b06 <malloc+0x120>
    5ae8:	ac 01       	movw	r20, r24
    5aea:	4e 5f       	subi	r20, 0xFE	; 254
    5aec:	5f 4f       	sbci	r21, 0xFF	; 255
    5aee:	24 17       	cp	r18, r20
    5af0:	35 07       	cpc	r19, r21
    5af2:	48 f0       	brcs	.+18     	; 0x5b06 <malloc+0x120>
    5af4:	4e 0f       	add	r20, r30
    5af6:	5f 1f       	adc	r21, r31
    5af8:	50 93 ff 15 	sts	0x15FF, r21	; 0x8015ff <__brkval+0x1>
    5afc:	40 93 fe 15 	sts	0x15FE, r20	; 0x8015fe <__brkval>
    5b00:	81 93       	st	Z+, r24
    5b02:	91 93       	st	Z+, r25
    5b04:	02 c0       	rjmp	.+4      	; 0x5b0a <malloc+0x124>
    5b06:	e0 e0       	ldi	r30, 0x00	; 0
    5b08:	f0 e0       	ldi	r31, 0x00	; 0
    5b0a:	cf 01       	movw	r24, r30
    5b0c:	df 91       	pop	r29
    5b0e:	cf 91       	pop	r28
    5b10:	1f 91       	pop	r17
    5b12:	0f 91       	pop	r16
    5b14:	08 95       	ret

00005b16 <free>:
    5b16:	cf 93       	push	r28
    5b18:	df 93       	push	r29
    5b1a:	00 97       	sbiw	r24, 0x00	; 0
    5b1c:	09 f4       	brne	.+2      	; 0x5b20 <free+0xa>
    5b1e:	81 c0       	rjmp	.+258    	; 0x5c22 <free+0x10c>
    5b20:	fc 01       	movw	r30, r24
    5b22:	32 97       	sbiw	r30, 0x02	; 2
    5b24:	13 82       	std	Z+3, r1	; 0x03
    5b26:	12 82       	std	Z+2, r1	; 0x02
    5b28:	a0 91 00 16 	lds	r26, 0x1600	; 0x801600 <__flp>
    5b2c:	b0 91 01 16 	lds	r27, 0x1601	; 0x801601 <__flp+0x1>
    5b30:	10 97       	sbiw	r26, 0x00	; 0
    5b32:	81 f4       	brne	.+32     	; 0x5b54 <free+0x3e>
    5b34:	20 81       	ld	r18, Z
    5b36:	31 81       	ldd	r19, Z+1	; 0x01
    5b38:	82 0f       	add	r24, r18
    5b3a:	93 1f       	adc	r25, r19
    5b3c:	20 91 fe 15 	lds	r18, 0x15FE	; 0x8015fe <__brkval>
    5b40:	30 91 ff 15 	lds	r19, 0x15FF	; 0x8015ff <__brkval+0x1>
    5b44:	28 17       	cp	r18, r24
    5b46:	39 07       	cpc	r19, r25
    5b48:	51 f5       	brne	.+84     	; 0x5b9e <free+0x88>
    5b4a:	f0 93 ff 15 	sts	0x15FF, r31	; 0x8015ff <__brkval+0x1>
    5b4e:	e0 93 fe 15 	sts	0x15FE, r30	; 0x8015fe <__brkval>
    5b52:	67 c0       	rjmp	.+206    	; 0x5c22 <free+0x10c>
    5b54:	ed 01       	movw	r28, r26
    5b56:	20 e0       	ldi	r18, 0x00	; 0
    5b58:	30 e0       	ldi	r19, 0x00	; 0
    5b5a:	ce 17       	cp	r28, r30
    5b5c:	df 07       	cpc	r29, r31
    5b5e:	40 f4       	brcc	.+16     	; 0x5b70 <free+0x5a>
    5b60:	4a 81       	ldd	r20, Y+2	; 0x02
    5b62:	5b 81       	ldd	r21, Y+3	; 0x03
    5b64:	9e 01       	movw	r18, r28
    5b66:	41 15       	cp	r20, r1
    5b68:	51 05       	cpc	r21, r1
    5b6a:	f1 f0       	breq	.+60     	; 0x5ba8 <free+0x92>
    5b6c:	ea 01       	movw	r28, r20
    5b6e:	f5 cf       	rjmp	.-22     	; 0x5b5a <free+0x44>
    5b70:	d3 83       	std	Z+3, r29	; 0x03
    5b72:	c2 83       	std	Z+2, r28	; 0x02
    5b74:	40 81       	ld	r20, Z
    5b76:	51 81       	ldd	r21, Z+1	; 0x01
    5b78:	84 0f       	add	r24, r20
    5b7a:	95 1f       	adc	r25, r21
    5b7c:	c8 17       	cp	r28, r24
    5b7e:	d9 07       	cpc	r29, r25
    5b80:	59 f4       	brne	.+22     	; 0x5b98 <free+0x82>
    5b82:	88 81       	ld	r24, Y
    5b84:	99 81       	ldd	r25, Y+1	; 0x01
    5b86:	84 0f       	add	r24, r20
    5b88:	95 1f       	adc	r25, r21
    5b8a:	02 96       	adiw	r24, 0x02	; 2
    5b8c:	91 83       	std	Z+1, r25	; 0x01
    5b8e:	80 83       	st	Z, r24
    5b90:	8a 81       	ldd	r24, Y+2	; 0x02
    5b92:	9b 81       	ldd	r25, Y+3	; 0x03
    5b94:	93 83       	std	Z+3, r25	; 0x03
    5b96:	82 83       	std	Z+2, r24	; 0x02
    5b98:	21 15       	cp	r18, r1
    5b9a:	31 05       	cpc	r19, r1
    5b9c:	29 f4       	brne	.+10     	; 0x5ba8 <free+0x92>
    5b9e:	f0 93 01 16 	sts	0x1601, r31	; 0x801601 <__flp+0x1>
    5ba2:	e0 93 00 16 	sts	0x1600, r30	; 0x801600 <__flp>
    5ba6:	3d c0       	rjmp	.+122    	; 0x5c22 <free+0x10c>
    5ba8:	e9 01       	movw	r28, r18
    5baa:	fb 83       	std	Y+3, r31	; 0x03
    5bac:	ea 83       	std	Y+2, r30	; 0x02
    5bae:	49 91       	ld	r20, Y+
    5bb0:	59 91       	ld	r21, Y+
    5bb2:	c4 0f       	add	r28, r20
    5bb4:	d5 1f       	adc	r29, r21
    5bb6:	ec 17       	cp	r30, r28
    5bb8:	fd 07       	cpc	r31, r29
    5bba:	61 f4       	brne	.+24     	; 0x5bd4 <free+0xbe>
    5bbc:	80 81       	ld	r24, Z
    5bbe:	91 81       	ldd	r25, Z+1	; 0x01
    5bc0:	84 0f       	add	r24, r20
    5bc2:	95 1f       	adc	r25, r21
    5bc4:	02 96       	adiw	r24, 0x02	; 2
    5bc6:	e9 01       	movw	r28, r18
    5bc8:	99 83       	std	Y+1, r25	; 0x01
    5bca:	88 83       	st	Y, r24
    5bcc:	82 81       	ldd	r24, Z+2	; 0x02
    5bce:	93 81       	ldd	r25, Z+3	; 0x03
    5bd0:	9b 83       	std	Y+3, r25	; 0x03
    5bd2:	8a 83       	std	Y+2, r24	; 0x02
    5bd4:	e0 e0       	ldi	r30, 0x00	; 0
    5bd6:	f0 e0       	ldi	r31, 0x00	; 0
    5bd8:	12 96       	adiw	r26, 0x02	; 2
    5bda:	8d 91       	ld	r24, X+
    5bdc:	9c 91       	ld	r25, X
    5bde:	13 97       	sbiw	r26, 0x03	; 3
    5be0:	00 97       	sbiw	r24, 0x00	; 0
    5be2:	19 f0       	breq	.+6      	; 0x5bea <free+0xd4>
    5be4:	fd 01       	movw	r30, r26
    5be6:	dc 01       	movw	r26, r24
    5be8:	f7 cf       	rjmp	.-18     	; 0x5bd8 <free+0xc2>
    5bea:	8d 91       	ld	r24, X+
    5bec:	9c 91       	ld	r25, X
    5bee:	11 97       	sbiw	r26, 0x01	; 1
    5bf0:	9d 01       	movw	r18, r26
    5bf2:	2e 5f       	subi	r18, 0xFE	; 254
    5bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    5bf6:	82 0f       	add	r24, r18
    5bf8:	93 1f       	adc	r25, r19
    5bfa:	20 91 fe 15 	lds	r18, 0x15FE	; 0x8015fe <__brkval>
    5bfe:	30 91 ff 15 	lds	r19, 0x15FF	; 0x8015ff <__brkval+0x1>
    5c02:	28 17       	cp	r18, r24
    5c04:	39 07       	cpc	r19, r25
    5c06:	69 f4       	brne	.+26     	; 0x5c22 <free+0x10c>
    5c08:	30 97       	sbiw	r30, 0x00	; 0
    5c0a:	29 f4       	brne	.+10     	; 0x5c16 <free+0x100>
    5c0c:	10 92 01 16 	sts	0x1601, r1	; 0x801601 <__flp+0x1>
    5c10:	10 92 00 16 	sts	0x1600, r1	; 0x801600 <__flp>
    5c14:	02 c0       	rjmp	.+4      	; 0x5c1a <free+0x104>
    5c16:	13 82       	std	Z+3, r1	; 0x03
    5c18:	12 82       	std	Z+2, r1	; 0x02
    5c1a:	b0 93 ff 15 	sts	0x15FF, r27	; 0x8015ff <__brkval+0x1>
    5c1e:	a0 93 fe 15 	sts	0x15FE, r26	; 0x8015fe <__brkval>
    5c22:	df 91       	pop	r29
    5c24:	cf 91       	pop	r28
    5c26:	08 95       	ret

00005c28 <abort>:
    5c28:	81 e0       	ldi	r24, 0x01	; 1
    5c2a:	90 e0       	ldi	r25, 0x00	; 0
    5c2c:	f8 94       	cli
    5c2e:	7d c3       	rjmp	.+1786   	; 0x632a <_exit>

00005c30 <memcpy>:
    5c30:	fb 01       	movw	r30, r22
    5c32:	dc 01       	movw	r26, r24
    5c34:	02 c0       	rjmp	.+4      	; 0x5c3a <memcpy+0xa>
    5c36:	01 90       	ld	r0, Z+
    5c38:	0d 92       	st	X+, r0
    5c3a:	41 50       	subi	r20, 0x01	; 1
    5c3c:	50 40       	sbci	r21, 0x00	; 0
    5c3e:	d8 f7       	brcc	.-10     	; 0x5c36 <memcpy+0x6>
    5c40:	08 95       	ret

00005c42 <memset>:
    5c42:	dc 01       	movw	r26, r24
    5c44:	01 c0       	rjmp	.+2      	; 0x5c48 <memset+0x6>
    5c46:	6d 93       	st	X+, r22
    5c48:	41 50       	subi	r20, 0x01	; 1
    5c4a:	50 40       	sbci	r21, 0x00	; 0
    5c4c:	e0 f7       	brcc	.-8      	; 0x5c46 <memset+0x4>
    5c4e:	08 95       	ret

00005c50 <strcasestr>:
    5c50:	fb 01       	movw	r30, r22
    5c52:	51 91       	ld	r21, Z+
    5c54:	55 23       	and	r21, r21
    5c56:	b1 f0       	breq	.+44     	; 0x5c84 <strcasestr+0x34>
    5c58:	bf 01       	movw	r22, r30
    5c5a:	dc 01       	movw	r26, r24
    5c5c:	05 2e       	mov	r0, r21
    5c5e:	4d 91       	ld	r20, X+
    5c60:	44 23       	and	r20, r20
    5c62:	69 f0       	breq	.+26     	; 0x5c7e <strcasestr+0x2e>
    5c64:	10 d0       	rcall	.+32     	; 0x5c86 <strcasestr+0x36>
    5c66:	d9 f7       	brne	.-10     	; 0x5c5e <strcasestr+0xe>
    5c68:	cd 01       	movw	r24, r26
    5c6a:	01 90       	ld	r0, Z+
    5c6c:	00 20       	and	r0, r0
    5c6e:	49 f0       	breq	.+18     	; 0x5c82 <strcasestr+0x32>
    5c70:	4d 91       	ld	r20, X+
    5c72:	41 11       	cpse	r20, r1
    5c74:	08 d0       	rcall	.+16     	; 0x5c86 <strcasestr+0x36>
    5c76:	c9 f3       	breq	.-14     	; 0x5c6a <strcasestr+0x1a>
    5c78:	fb 01       	movw	r30, r22
    5c7a:	41 11       	cpse	r20, r1
    5c7c:	ee cf       	rjmp	.-36     	; 0x5c5a <strcasestr+0xa>
    5c7e:	81 e0       	ldi	r24, 0x01	; 1
    5c80:	90 e0       	ldi	r25, 0x00	; 0
    5c82:	01 97       	sbiw	r24, 0x01	; 1
    5c84:	08 95       	ret
    5c86:	40 25       	eor	r20, r0
    5c88:	39 f0       	breq	.+14     	; 0x5c98 <strcasestr+0x48>
    5c8a:	40 32       	cpi	r20, 0x20	; 32
    5c8c:	29 f4       	brne	.+10     	; 0x5c98 <strcasestr+0x48>
    5c8e:	40 29       	or	r20, r0
    5c90:	4b 57       	subi	r20, 0x7B	; 123
    5c92:	46 5e       	subi	r20, 0xE6	; 230
    5c94:	08 f0       	brcs	.+2      	; 0x5c98 <strcasestr+0x48>
    5c96:	18 94       	sez
    5c98:	08 95       	ret

00005c9a <strcat>:
    5c9a:	fb 01       	movw	r30, r22
    5c9c:	dc 01       	movw	r26, r24
    5c9e:	0d 90       	ld	r0, X+
    5ca0:	00 20       	and	r0, r0
    5ca2:	e9 f7       	brne	.-6      	; 0x5c9e <strcat+0x4>
    5ca4:	11 97       	sbiw	r26, 0x01	; 1
    5ca6:	01 90       	ld	r0, Z+
    5ca8:	0d 92       	st	X+, r0
    5caa:	00 20       	and	r0, r0
    5cac:	e1 f7       	brne	.-8      	; 0x5ca6 <strcat+0xc>
    5cae:	08 95       	ret

00005cb0 <strcpy>:
    5cb0:	fb 01       	movw	r30, r22
    5cb2:	dc 01       	movw	r26, r24
    5cb4:	01 90       	ld	r0, Z+
    5cb6:	0d 92       	st	X+, r0
    5cb8:	00 20       	and	r0, r0
    5cba:	e1 f7       	brne	.-8      	; 0x5cb4 <strcpy+0x4>
    5cbc:	08 95       	ret

00005cbe <strncasecmp>:
    5cbe:	fb 01       	movw	r30, r22
    5cc0:	dc 01       	movw	r26, r24
    5cc2:	41 50       	subi	r20, 0x01	; 1
    5cc4:	50 40       	sbci	r21, 0x00	; 0
    5cc6:	88 f0       	brcs	.+34     	; 0x5cea <strncasecmp+0x2c>
    5cc8:	8d 91       	ld	r24, X+
    5cca:	81 34       	cpi	r24, 0x41	; 65
    5ccc:	1c f0       	brlt	.+6      	; 0x5cd4 <strncasecmp+0x16>
    5cce:	8b 35       	cpi	r24, 0x5B	; 91
    5cd0:	0c f4       	brge	.+2      	; 0x5cd4 <strncasecmp+0x16>
    5cd2:	80 5e       	subi	r24, 0xE0	; 224
    5cd4:	61 91       	ld	r22, Z+
    5cd6:	61 34       	cpi	r22, 0x41	; 65
    5cd8:	1c f0       	brlt	.+6      	; 0x5ce0 <strncasecmp+0x22>
    5cda:	6b 35       	cpi	r22, 0x5B	; 91
    5cdc:	0c f4       	brge	.+2      	; 0x5ce0 <strncasecmp+0x22>
    5cde:	60 5e       	subi	r22, 0xE0	; 224
    5ce0:	86 1b       	sub	r24, r22
    5ce2:	61 11       	cpse	r22, r1
    5ce4:	71 f3       	breq	.-36     	; 0x5cc2 <strncasecmp+0x4>
    5ce6:	99 0b       	sbc	r25, r25
    5ce8:	08 95       	ret
    5cea:	88 1b       	sub	r24, r24
    5cec:	fc cf       	rjmp	.-8      	; 0x5ce6 <strncasecmp+0x28>

00005cee <printf>:
    5cee:	cf 93       	push	r28
    5cf0:	df 93       	push	r29
    5cf2:	cd b7       	in	r28, 0x3d	; 61
    5cf4:	de b7       	in	r29, 0x3e	; 62
    5cf6:	ae 01       	movw	r20, r28
    5cf8:	4a 5f       	subi	r20, 0xFA	; 250
    5cfa:	5f 4f       	sbci	r21, 0xFF	; 255
    5cfc:	fa 01       	movw	r30, r20
    5cfe:	61 91       	ld	r22, Z+
    5d00:	71 91       	ld	r23, Z+
    5d02:	af 01       	movw	r20, r30
    5d04:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <__iob+0x2>
    5d08:	90 91 05 16 	lds	r25, 0x1605	; 0x801605 <__iob+0x3>
    5d0c:	61 d0       	rcall	.+194    	; 0x5dd0 <vfprintf>
    5d0e:	df 91       	pop	r29
    5d10:	cf 91       	pop	r28
    5d12:	08 95       	ret

00005d14 <puts>:
    5d14:	0f 93       	push	r16
    5d16:	1f 93       	push	r17
    5d18:	cf 93       	push	r28
    5d1a:	df 93       	push	r29
    5d1c:	e0 91 04 16 	lds	r30, 0x1604	; 0x801604 <__iob+0x2>
    5d20:	f0 91 05 16 	lds	r31, 0x1605	; 0x801605 <__iob+0x3>
    5d24:	23 81       	ldd	r18, Z+3	; 0x03
    5d26:	21 ff       	sbrs	r18, 1
    5d28:	1b c0       	rjmp	.+54     	; 0x5d60 <puts+0x4c>
    5d2a:	8c 01       	movw	r16, r24
    5d2c:	d0 e0       	ldi	r29, 0x00	; 0
    5d2e:	c0 e0       	ldi	r28, 0x00	; 0
    5d30:	f8 01       	movw	r30, r16
    5d32:	81 91       	ld	r24, Z+
    5d34:	8f 01       	movw	r16, r30
    5d36:	60 91 04 16 	lds	r22, 0x1604	; 0x801604 <__iob+0x2>
    5d3a:	70 91 05 16 	lds	r23, 0x1605	; 0x801605 <__iob+0x3>
    5d3e:	db 01       	movw	r26, r22
    5d40:	18 96       	adiw	r26, 0x08	; 8
    5d42:	ed 91       	ld	r30, X+
    5d44:	fc 91       	ld	r31, X
    5d46:	19 97       	sbiw	r26, 0x09	; 9
    5d48:	88 23       	and	r24, r24
    5d4a:	31 f0       	breq	.+12     	; 0x5d58 <puts+0x44>
    5d4c:	19 95       	eicall
    5d4e:	89 2b       	or	r24, r25
    5d50:	79 f3       	breq	.-34     	; 0x5d30 <puts+0x1c>
    5d52:	df ef       	ldi	r29, 0xFF	; 255
    5d54:	cf ef       	ldi	r28, 0xFF	; 255
    5d56:	ec cf       	rjmp	.-40     	; 0x5d30 <puts+0x1c>
    5d58:	8a e0       	ldi	r24, 0x0A	; 10
    5d5a:	19 95       	eicall
    5d5c:	89 2b       	or	r24, r25
    5d5e:	19 f0       	breq	.+6      	; 0x5d66 <puts+0x52>
    5d60:	8f ef       	ldi	r24, 0xFF	; 255
    5d62:	9f ef       	ldi	r25, 0xFF	; 255
    5d64:	02 c0       	rjmp	.+4      	; 0x5d6a <puts+0x56>
    5d66:	8d 2f       	mov	r24, r29
    5d68:	9c 2f       	mov	r25, r28
    5d6a:	df 91       	pop	r29
    5d6c:	cf 91       	pop	r28
    5d6e:	1f 91       	pop	r17
    5d70:	0f 91       	pop	r16
    5d72:	08 95       	ret

00005d74 <sprintf>:
    5d74:	0f 93       	push	r16
    5d76:	1f 93       	push	r17
    5d78:	cf 93       	push	r28
    5d7a:	df 93       	push	r29
    5d7c:	cd b7       	in	r28, 0x3d	; 61
    5d7e:	de b7       	in	r29, 0x3e	; 62
    5d80:	2e 97       	sbiw	r28, 0x0e	; 14
    5d82:	0f b6       	in	r0, 0x3f	; 63
    5d84:	f8 94       	cli
    5d86:	de bf       	out	0x3e, r29	; 62
    5d88:	0f be       	out	0x3f, r0	; 63
    5d8a:	cd bf       	out	0x3d, r28	; 61
    5d8c:	0e 89       	ldd	r16, Y+22	; 0x16
    5d8e:	1f 89       	ldd	r17, Y+23	; 0x17
    5d90:	86 e0       	ldi	r24, 0x06	; 6
    5d92:	8c 83       	std	Y+4, r24	; 0x04
    5d94:	1a 83       	std	Y+2, r17	; 0x02
    5d96:	09 83       	std	Y+1, r16	; 0x01
    5d98:	8f ef       	ldi	r24, 0xFF	; 255
    5d9a:	9f e7       	ldi	r25, 0x7F	; 127
    5d9c:	9e 83       	std	Y+6, r25	; 0x06
    5d9e:	8d 83       	std	Y+5, r24	; 0x05
    5da0:	ae 01       	movw	r20, r28
    5da2:	46 5e       	subi	r20, 0xE6	; 230
    5da4:	5f 4f       	sbci	r21, 0xFF	; 255
    5da6:	68 8d       	ldd	r22, Y+24	; 0x18
    5da8:	79 8d       	ldd	r23, Y+25	; 0x19
    5daa:	ce 01       	movw	r24, r28
    5dac:	01 96       	adiw	r24, 0x01	; 1
    5dae:	10 d0       	rcall	.+32     	; 0x5dd0 <vfprintf>
    5db0:	ef 81       	ldd	r30, Y+7	; 0x07
    5db2:	f8 85       	ldd	r31, Y+8	; 0x08
    5db4:	e0 0f       	add	r30, r16
    5db6:	f1 1f       	adc	r31, r17
    5db8:	10 82       	st	Z, r1
    5dba:	2e 96       	adiw	r28, 0x0e	; 14
    5dbc:	0f b6       	in	r0, 0x3f	; 63
    5dbe:	f8 94       	cli
    5dc0:	de bf       	out	0x3e, r29	; 62
    5dc2:	0f be       	out	0x3f, r0	; 63
    5dc4:	cd bf       	out	0x3d, r28	; 61
    5dc6:	df 91       	pop	r29
    5dc8:	cf 91       	pop	r28
    5dca:	1f 91       	pop	r17
    5dcc:	0f 91       	pop	r16
    5dce:	08 95       	ret

00005dd0 <vfprintf>:
    5dd0:	2f 92       	push	r2
    5dd2:	3f 92       	push	r3
    5dd4:	4f 92       	push	r4
    5dd6:	5f 92       	push	r5
    5dd8:	6f 92       	push	r6
    5dda:	7f 92       	push	r7
    5ddc:	8f 92       	push	r8
    5dde:	9f 92       	push	r9
    5de0:	af 92       	push	r10
    5de2:	bf 92       	push	r11
    5de4:	cf 92       	push	r12
    5de6:	df 92       	push	r13
    5de8:	ef 92       	push	r14
    5dea:	ff 92       	push	r15
    5dec:	0f 93       	push	r16
    5dee:	1f 93       	push	r17
    5df0:	cf 93       	push	r28
    5df2:	df 93       	push	r29
    5df4:	cd b7       	in	r28, 0x3d	; 61
    5df6:	de b7       	in	r29, 0x3e	; 62
    5df8:	2b 97       	sbiw	r28, 0x0b	; 11
    5dfa:	0f b6       	in	r0, 0x3f	; 63
    5dfc:	f8 94       	cli
    5dfe:	de bf       	out	0x3e, r29	; 62
    5e00:	0f be       	out	0x3f, r0	; 63
    5e02:	cd bf       	out	0x3d, r28	; 61
    5e04:	6c 01       	movw	r12, r24
    5e06:	7b 01       	movw	r14, r22
    5e08:	8a 01       	movw	r16, r20
    5e0a:	fc 01       	movw	r30, r24
    5e0c:	17 82       	std	Z+7, r1	; 0x07
    5e0e:	16 82       	std	Z+6, r1	; 0x06
    5e10:	83 81       	ldd	r24, Z+3	; 0x03
    5e12:	81 ff       	sbrs	r24, 1
    5e14:	bf c1       	rjmp	.+894    	; 0x6194 <vfprintf+0x3c4>
    5e16:	ce 01       	movw	r24, r28
    5e18:	01 96       	adiw	r24, 0x01	; 1
    5e1a:	3c 01       	movw	r6, r24
    5e1c:	f6 01       	movw	r30, r12
    5e1e:	93 81       	ldd	r25, Z+3	; 0x03
    5e20:	f7 01       	movw	r30, r14
    5e22:	93 fd       	sbrc	r25, 3
    5e24:	85 91       	lpm	r24, Z+
    5e26:	93 ff       	sbrs	r25, 3
    5e28:	81 91       	ld	r24, Z+
    5e2a:	7f 01       	movw	r14, r30
    5e2c:	88 23       	and	r24, r24
    5e2e:	09 f4       	brne	.+2      	; 0x5e32 <vfprintf+0x62>
    5e30:	ad c1       	rjmp	.+858    	; 0x618c <vfprintf+0x3bc>
    5e32:	85 32       	cpi	r24, 0x25	; 37
    5e34:	39 f4       	brne	.+14     	; 0x5e44 <vfprintf+0x74>
    5e36:	93 fd       	sbrc	r25, 3
    5e38:	85 91       	lpm	r24, Z+
    5e3a:	93 ff       	sbrs	r25, 3
    5e3c:	81 91       	ld	r24, Z+
    5e3e:	7f 01       	movw	r14, r30
    5e40:	85 32       	cpi	r24, 0x25	; 37
    5e42:	21 f4       	brne	.+8      	; 0x5e4c <vfprintf+0x7c>
    5e44:	b6 01       	movw	r22, r12
    5e46:	90 e0       	ldi	r25, 0x00	; 0
    5e48:	d6 d1       	rcall	.+940    	; 0x61f6 <fputc>
    5e4a:	e8 cf       	rjmp	.-48     	; 0x5e1c <vfprintf+0x4c>
    5e4c:	91 2c       	mov	r9, r1
    5e4e:	21 2c       	mov	r2, r1
    5e50:	31 2c       	mov	r3, r1
    5e52:	ff e1       	ldi	r31, 0x1F	; 31
    5e54:	f3 15       	cp	r31, r3
    5e56:	d8 f0       	brcs	.+54     	; 0x5e8e <vfprintf+0xbe>
    5e58:	8b 32       	cpi	r24, 0x2B	; 43
    5e5a:	79 f0       	breq	.+30     	; 0x5e7a <vfprintf+0xaa>
    5e5c:	38 f4       	brcc	.+14     	; 0x5e6c <vfprintf+0x9c>
    5e5e:	80 32       	cpi	r24, 0x20	; 32
    5e60:	79 f0       	breq	.+30     	; 0x5e80 <vfprintf+0xb0>
    5e62:	83 32       	cpi	r24, 0x23	; 35
    5e64:	a1 f4       	brne	.+40     	; 0x5e8e <vfprintf+0xbe>
    5e66:	23 2d       	mov	r18, r3
    5e68:	20 61       	ori	r18, 0x10	; 16
    5e6a:	1d c0       	rjmp	.+58     	; 0x5ea6 <vfprintf+0xd6>
    5e6c:	8d 32       	cpi	r24, 0x2D	; 45
    5e6e:	61 f0       	breq	.+24     	; 0x5e88 <vfprintf+0xb8>
    5e70:	80 33       	cpi	r24, 0x30	; 48
    5e72:	69 f4       	brne	.+26     	; 0x5e8e <vfprintf+0xbe>
    5e74:	23 2d       	mov	r18, r3
    5e76:	21 60       	ori	r18, 0x01	; 1
    5e78:	16 c0       	rjmp	.+44     	; 0x5ea6 <vfprintf+0xd6>
    5e7a:	83 2d       	mov	r24, r3
    5e7c:	82 60       	ori	r24, 0x02	; 2
    5e7e:	38 2e       	mov	r3, r24
    5e80:	e3 2d       	mov	r30, r3
    5e82:	e4 60       	ori	r30, 0x04	; 4
    5e84:	3e 2e       	mov	r3, r30
    5e86:	2a c0       	rjmp	.+84     	; 0x5edc <vfprintf+0x10c>
    5e88:	f3 2d       	mov	r31, r3
    5e8a:	f8 60       	ori	r31, 0x08	; 8
    5e8c:	1d c0       	rjmp	.+58     	; 0x5ec8 <vfprintf+0xf8>
    5e8e:	37 fc       	sbrc	r3, 7
    5e90:	2d c0       	rjmp	.+90     	; 0x5eec <vfprintf+0x11c>
    5e92:	20 ed       	ldi	r18, 0xD0	; 208
    5e94:	28 0f       	add	r18, r24
    5e96:	2a 30       	cpi	r18, 0x0A	; 10
    5e98:	40 f0       	brcs	.+16     	; 0x5eaa <vfprintf+0xda>
    5e9a:	8e 32       	cpi	r24, 0x2E	; 46
    5e9c:	b9 f4       	brne	.+46     	; 0x5ecc <vfprintf+0xfc>
    5e9e:	36 fc       	sbrc	r3, 6
    5ea0:	75 c1       	rjmp	.+746    	; 0x618c <vfprintf+0x3bc>
    5ea2:	23 2d       	mov	r18, r3
    5ea4:	20 64       	ori	r18, 0x40	; 64
    5ea6:	32 2e       	mov	r3, r18
    5ea8:	19 c0       	rjmp	.+50     	; 0x5edc <vfprintf+0x10c>
    5eaa:	36 fe       	sbrs	r3, 6
    5eac:	06 c0       	rjmp	.+12     	; 0x5eba <vfprintf+0xea>
    5eae:	8a e0       	ldi	r24, 0x0A	; 10
    5eb0:	98 9e       	mul	r9, r24
    5eb2:	20 0d       	add	r18, r0
    5eb4:	11 24       	eor	r1, r1
    5eb6:	92 2e       	mov	r9, r18
    5eb8:	11 c0       	rjmp	.+34     	; 0x5edc <vfprintf+0x10c>
    5eba:	ea e0       	ldi	r30, 0x0A	; 10
    5ebc:	2e 9e       	mul	r2, r30
    5ebe:	20 0d       	add	r18, r0
    5ec0:	11 24       	eor	r1, r1
    5ec2:	22 2e       	mov	r2, r18
    5ec4:	f3 2d       	mov	r31, r3
    5ec6:	f0 62       	ori	r31, 0x20	; 32
    5ec8:	3f 2e       	mov	r3, r31
    5eca:	08 c0       	rjmp	.+16     	; 0x5edc <vfprintf+0x10c>
    5ecc:	8c 36       	cpi	r24, 0x6C	; 108
    5ece:	21 f4       	brne	.+8      	; 0x5ed8 <vfprintf+0x108>
    5ed0:	83 2d       	mov	r24, r3
    5ed2:	80 68       	ori	r24, 0x80	; 128
    5ed4:	38 2e       	mov	r3, r24
    5ed6:	02 c0       	rjmp	.+4      	; 0x5edc <vfprintf+0x10c>
    5ed8:	88 36       	cpi	r24, 0x68	; 104
    5eda:	41 f4       	brne	.+16     	; 0x5eec <vfprintf+0x11c>
    5edc:	f7 01       	movw	r30, r14
    5ede:	93 fd       	sbrc	r25, 3
    5ee0:	85 91       	lpm	r24, Z+
    5ee2:	93 ff       	sbrs	r25, 3
    5ee4:	81 91       	ld	r24, Z+
    5ee6:	7f 01       	movw	r14, r30
    5ee8:	81 11       	cpse	r24, r1
    5eea:	b3 cf       	rjmp	.-154    	; 0x5e52 <vfprintf+0x82>
    5eec:	98 2f       	mov	r25, r24
    5eee:	9f 7d       	andi	r25, 0xDF	; 223
    5ef0:	95 54       	subi	r25, 0x45	; 69
    5ef2:	93 30       	cpi	r25, 0x03	; 3
    5ef4:	28 f4       	brcc	.+10     	; 0x5f00 <vfprintf+0x130>
    5ef6:	0c 5f       	subi	r16, 0xFC	; 252
    5ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    5efa:	9f e3       	ldi	r25, 0x3F	; 63
    5efc:	99 83       	std	Y+1, r25	; 0x01
    5efe:	0d c0       	rjmp	.+26     	; 0x5f1a <vfprintf+0x14a>
    5f00:	83 36       	cpi	r24, 0x63	; 99
    5f02:	31 f0       	breq	.+12     	; 0x5f10 <vfprintf+0x140>
    5f04:	83 37       	cpi	r24, 0x73	; 115
    5f06:	71 f0       	breq	.+28     	; 0x5f24 <vfprintf+0x154>
    5f08:	83 35       	cpi	r24, 0x53	; 83
    5f0a:	09 f0       	breq	.+2      	; 0x5f0e <vfprintf+0x13e>
    5f0c:	55 c0       	rjmp	.+170    	; 0x5fb8 <vfprintf+0x1e8>
    5f0e:	20 c0       	rjmp	.+64     	; 0x5f50 <vfprintf+0x180>
    5f10:	f8 01       	movw	r30, r16
    5f12:	80 81       	ld	r24, Z
    5f14:	89 83       	std	Y+1, r24	; 0x01
    5f16:	0e 5f       	subi	r16, 0xFE	; 254
    5f18:	1f 4f       	sbci	r17, 0xFF	; 255
    5f1a:	88 24       	eor	r8, r8
    5f1c:	83 94       	inc	r8
    5f1e:	91 2c       	mov	r9, r1
    5f20:	53 01       	movw	r10, r6
    5f22:	12 c0       	rjmp	.+36     	; 0x5f48 <vfprintf+0x178>
    5f24:	28 01       	movw	r4, r16
    5f26:	f2 e0       	ldi	r31, 0x02	; 2
    5f28:	4f 0e       	add	r4, r31
    5f2a:	51 1c       	adc	r5, r1
    5f2c:	f8 01       	movw	r30, r16
    5f2e:	a0 80       	ld	r10, Z
    5f30:	b1 80       	ldd	r11, Z+1	; 0x01
    5f32:	36 fe       	sbrs	r3, 6
    5f34:	03 c0       	rjmp	.+6      	; 0x5f3c <vfprintf+0x16c>
    5f36:	69 2d       	mov	r22, r9
    5f38:	70 e0       	ldi	r23, 0x00	; 0
    5f3a:	02 c0       	rjmp	.+4      	; 0x5f40 <vfprintf+0x170>
    5f3c:	6f ef       	ldi	r22, 0xFF	; 255
    5f3e:	7f ef       	ldi	r23, 0xFF	; 255
    5f40:	c5 01       	movw	r24, r10
    5f42:	4e d1       	rcall	.+668    	; 0x61e0 <strnlen>
    5f44:	4c 01       	movw	r8, r24
    5f46:	82 01       	movw	r16, r4
    5f48:	f3 2d       	mov	r31, r3
    5f4a:	ff 77       	andi	r31, 0x7F	; 127
    5f4c:	3f 2e       	mov	r3, r31
    5f4e:	15 c0       	rjmp	.+42     	; 0x5f7a <vfprintf+0x1aa>
    5f50:	28 01       	movw	r4, r16
    5f52:	22 e0       	ldi	r18, 0x02	; 2
    5f54:	42 0e       	add	r4, r18
    5f56:	51 1c       	adc	r5, r1
    5f58:	f8 01       	movw	r30, r16
    5f5a:	a0 80       	ld	r10, Z
    5f5c:	b1 80       	ldd	r11, Z+1	; 0x01
    5f5e:	36 fe       	sbrs	r3, 6
    5f60:	03 c0       	rjmp	.+6      	; 0x5f68 <vfprintf+0x198>
    5f62:	69 2d       	mov	r22, r9
    5f64:	70 e0       	ldi	r23, 0x00	; 0
    5f66:	02 c0       	rjmp	.+4      	; 0x5f6c <vfprintf+0x19c>
    5f68:	6f ef       	ldi	r22, 0xFF	; 255
    5f6a:	7f ef       	ldi	r23, 0xFF	; 255
    5f6c:	c5 01       	movw	r24, r10
    5f6e:	2d d1       	rcall	.+602    	; 0x61ca <strnlen_P>
    5f70:	4c 01       	movw	r8, r24
    5f72:	f3 2d       	mov	r31, r3
    5f74:	f0 68       	ori	r31, 0x80	; 128
    5f76:	3f 2e       	mov	r3, r31
    5f78:	82 01       	movw	r16, r4
    5f7a:	33 fc       	sbrc	r3, 3
    5f7c:	19 c0       	rjmp	.+50     	; 0x5fb0 <vfprintf+0x1e0>
    5f7e:	82 2d       	mov	r24, r2
    5f80:	90 e0       	ldi	r25, 0x00	; 0
    5f82:	88 16       	cp	r8, r24
    5f84:	99 06       	cpc	r9, r25
    5f86:	a0 f4       	brcc	.+40     	; 0x5fb0 <vfprintf+0x1e0>
    5f88:	b6 01       	movw	r22, r12
    5f8a:	80 e2       	ldi	r24, 0x20	; 32
    5f8c:	90 e0       	ldi	r25, 0x00	; 0
    5f8e:	33 d1       	rcall	.+614    	; 0x61f6 <fputc>
    5f90:	2a 94       	dec	r2
    5f92:	f5 cf       	rjmp	.-22     	; 0x5f7e <vfprintf+0x1ae>
    5f94:	f5 01       	movw	r30, r10
    5f96:	37 fc       	sbrc	r3, 7
    5f98:	85 91       	lpm	r24, Z+
    5f9a:	37 fe       	sbrs	r3, 7
    5f9c:	81 91       	ld	r24, Z+
    5f9e:	5f 01       	movw	r10, r30
    5fa0:	b6 01       	movw	r22, r12
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	28 d1       	rcall	.+592    	; 0x61f6 <fputc>
    5fa6:	21 10       	cpse	r2, r1
    5fa8:	2a 94       	dec	r2
    5faa:	21 e0       	ldi	r18, 0x01	; 1
    5fac:	82 1a       	sub	r8, r18
    5fae:	91 08       	sbc	r9, r1
    5fb0:	81 14       	cp	r8, r1
    5fb2:	91 04       	cpc	r9, r1
    5fb4:	79 f7       	brne	.-34     	; 0x5f94 <vfprintf+0x1c4>
    5fb6:	e1 c0       	rjmp	.+450    	; 0x617a <vfprintf+0x3aa>
    5fb8:	84 36       	cpi	r24, 0x64	; 100
    5fba:	11 f0       	breq	.+4      	; 0x5fc0 <vfprintf+0x1f0>
    5fbc:	89 36       	cpi	r24, 0x69	; 105
    5fbe:	39 f5       	brne	.+78     	; 0x600e <vfprintf+0x23e>
    5fc0:	f8 01       	movw	r30, r16
    5fc2:	37 fe       	sbrs	r3, 7
    5fc4:	07 c0       	rjmp	.+14     	; 0x5fd4 <vfprintf+0x204>
    5fc6:	60 81       	ld	r22, Z
    5fc8:	71 81       	ldd	r23, Z+1	; 0x01
    5fca:	82 81       	ldd	r24, Z+2	; 0x02
    5fcc:	93 81       	ldd	r25, Z+3	; 0x03
    5fce:	0c 5f       	subi	r16, 0xFC	; 252
    5fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    5fd2:	08 c0       	rjmp	.+16     	; 0x5fe4 <vfprintf+0x214>
    5fd4:	60 81       	ld	r22, Z
    5fd6:	71 81       	ldd	r23, Z+1	; 0x01
    5fd8:	07 2e       	mov	r0, r23
    5fda:	00 0c       	add	r0, r0
    5fdc:	88 0b       	sbc	r24, r24
    5fde:	99 0b       	sbc	r25, r25
    5fe0:	0e 5f       	subi	r16, 0xFE	; 254
    5fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    5fe4:	f3 2d       	mov	r31, r3
    5fe6:	ff 76       	andi	r31, 0x6F	; 111
    5fe8:	3f 2e       	mov	r3, r31
    5fea:	97 ff       	sbrs	r25, 7
    5fec:	09 c0       	rjmp	.+18     	; 0x6000 <vfprintf+0x230>
    5fee:	90 95       	com	r25
    5ff0:	80 95       	com	r24
    5ff2:	70 95       	com	r23
    5ff4:	61 95       	neg	r22
    5ff6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ff8:	8f 4f       	sbci	r24, 0xFF	; 255
    5ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    5ffc:	f0 68       	ori	r31, 0x80	; 128
    5ffe:	3f 2e       	mov	r3, r31
    6000:	2a e0       	ldi	r18, 0x0A	; 10
    6002:	30 e0       	ldi	r19, 0x00	; 0
    6004:	a3 01       	movw	r20, r6
    6006:	33 d1       	rcall	.+614    	; 0x626e <__ultoa_invert>
    6008:	88 2e       	mov	r8, r24
    600a:	86 18       	sub	r8, r6
    600c:	44 c0       	rjmp	.+136    	; 0x6096 <vfprintf+0x2c6>
    600e:	85 37       	cpi	r24, 0x75	; 117
    6010:	31 f4       	brne	.+12     	; 0x601e <vfprintf+0x24e>
    6012:	23 2d       	mov	r18, r3
    6014:	2f 7e       	andi	r18, 0xEF	; 239
    6016:	b2 2e       	mov	r11, r18
    6018:	2a e0       	ldi	r18, 0x0A	; 10
    601a:	30 e0       	ldi	r19, 0x00	; 0
    601c:	25 c0       	rjmp	.+74     	; 0x6068 <vfprintf+0x298>
    601e:	93 2d       	mov	r25, r3
    6020:	99 7f       	andi	r25, 0xF9	; 249
    6022:	b9 2e       	mov	r11, r25
    6024:	8f 36       	cpi	r24, 0x6F	; 111
    6026:	c1 f0       	breq	.+48     	; 0x6058 <vfprintf+0x288>
    6028:	18 f4       	brcc	.+6      	; 0x6030 <vfprintf+0x260>
    602a:	88 35       	cpi	r24, 0x58	; 88
    602c:	79 f0       	breq	.+30     	; 0x604c <vfprintf+0x27c>
    602e:	ae c0       	rjmp	.+348    	; 0x618c <vfprintf+0x3bc>
    6030:	80 37       	cpi	r24, 0x70	; 112
    6032:	19 f0       	breq	.+6      	; 0x603a <vfprintf+0x26a>
    6034:	88 37       	cpi	r24, 0x78	; 120
    6036:	21 f0       	breq	.+8      	; 0x6040 <vfprintf+0x270>
    6038:	a9 c0       	rjmp	.+338    	; 0x618c <vfprintf+0x3bc>
    603a:	e9 2f       	mov	r30, r25
    603c:	e0 61       	ori	r30, 0x10	; 16
    603e:	be 2e       	mov	r11, r30
    6040:	b4 fe       	sbrs	r11, 4
    6042:	0d c0       	rjmp	.+26     	; 0x605e <vfprintf+0x28e>
    6044:	fb 2d       	mov	r31, r11
    6046:	f4 60       	ori	r31, 0x04	; 4
    6048:	bf 2e       	mov	r11, r31
    604a:	09 c0       	rjmp	.+18     	; 0x605e <vfprintf+0x28e>
    604c:	34 fe       	sbrs	r3, 4
    604e:	0a c0       	rjmp	.+20     	; 0x6064 <vfprintf+0x294>
    6050:	29 2f       	mov	r18, r25
    6052:	26 60       	ori	r18, 0x06	; 6
    6054:	b2 2e       	mov	r11, r18
    6056:	06 c0       	rjmp	.+12     	; 0x6064 <vfprintf+0x294>
    6058:	28 e0       	ldi	r18, 0x08	; 8
    605a:	30 e0       	ldi	r19, 0x00	; 0
    605c:	05 c0       	rjmp	.+10     	; 0x6068 <vfprintf+0x298>
    605e:	20 e1       	ldi	r18, 0x10	; 16
    6060:	30 e0       	ldi	r19, 0x00	; 0
    6062:	02 c0       	rjmp	.+4      	; 0x6068 <vfprintf+0x298>
    6064:	20 e1       	ldi	r18, 0x10	; 16
    6066:	32 e0       	ldi	r19, 0x02	; 2
    6068:	f8 01       	movw	r30, r16
    606a:	b7 fe       	sbrs	r11, 7
    606c:	07 c0       	rjmp	.+14     	; 0x607c <vfprintf+0x2ac>
    606e:	60 81       	ld	r22, Z
    6070:	71 81       	ldd	r23, Z+1	; 0x01
    6072:	82 81       	ldd	r24, Z+2	; 0x02
    6074:	93 81       	ldd	r25, Z+3	; 0x03
    6076:	0c 5f       	subi	r16, 0xFC	; 252
    6078:	1f 4f       	sbci	r17, 0xFF	; 255
    607a:	06 c0       	rjmp	.+12     	; 0x6088 <vfprintf+0x2b8>
    607c:	60 81       	ld	r22, Z
    607e:	71 81       	ldd	r23, Z+1	; 0x01
    6080:	80 e0       	ldi	r24, 0x00	; 0
    6082:	90 e0       	ldi	r25, 0x00	; 0
    6084:	0e 5f       	subi	r16, 0xFE	; 254
    6086:	1f 4f       	sbci	r17, 0xFF	; 255
    6088:	a3 01       	movw	r20, r6
    608a:	f1 d0       	rcall	.+482    	; 0x626e <__ultoa_invert>
    608c:	88 2e       	mov	r8, r24
    608e:	86 18       	sub	r8, r6
    6090:	fb 2d       	mov	r31, r11
    6092:	ff 77       	andi	r31, 0x7F	; 127
    6094:	3f 2e       	mov	r3, r31
    6096:	36 fe       	sbrs	r3, 6
    6098:	0d c0       	rjmp	.+26     	; 0x60b4 <vfprintf+0x2e4>
    609a:	23 2d       	mov	r18, r3
    609c:	2e 7f       	andi	r18, 0xFE	; 254
    609e:	a2 2e       	mov	r10, r18
    60a0:	89 14       	cp	r8, r9
    60a2:	58 f4       	brcc	.+22     	; 0x60ba <vfprintf+0x2ea>
    60a4:	34 fe       	sbrs	r3, 4
    60a6:	0b c0       	rjmp	.+22     	; 0x60be <vfprintf+0x2ee>
    60a8:	32 fc       	sbrc	r3, 2
    60aa:	09 c0       	rjmp	.+18     	; 0x60be <vfprintf+0x2ee>
    60ac:	83 2d       	mov	r24, r3
    60ae:	8e 7e       	andi	r24, 0xEE	; 238
    60b0:	a8 2e       	mov	r10, r24
    60b2:	05 c0       	rjmp	.+10     	; 0x60be <vfprintf+0x2ee>
    60b4:	b8 2c       	mov	r11, r8
    60b6:	a3 2c       	mov	r10, r3
    60b8:	03 c0       	rjmp	.+6      	; 0x60c0 <vfprintf+0x2f0>
    60ba:	b8 2c       	mov	r11, r8
    60bc:	01 c0       	rjmp	.+2      	; 0x60c0 <vfprintf+0x2f0>
    60be:	b9 2c       	mov	r11, r9
    60c0:	a4 fe       	sbrs	r10, 4
    60c2:	0f c0       	rjmp	.+30     	; 0x60e2 <vfprintf+0x312>
    60c4:	fe 01       	movw	r30, r28
    60c6:	e8 0d       	add	r30, r8
    60c8:	f1 1d       	adc	r31, r1
    60ca:	80 81       	ld	r24, Z
    60cc:	80 33       	cpi	r24, 0x30	; 48
    60ce:	21 f4       	brne	.+8      	; 0x60d8 <vfprintf+0x308>
    60d0:	9a 2d       	mov	r25, r10
    60d2:	99 7e       	andi	r25, 0xE9	; 233
    60d4:	a9 2e       	mov	r10, r25
    60d6:	09 c0       	rjmp	.+18     	; 0x60ea <vfprintf+0x31a>
    60d8:	a2 fe       	sbrs	r10, 2
    60da:	06 c0       	rjmp	.+12     	; 0x60e8 <vfprintf+0x318>
    60dc:	b3 94       	inc	r11
    60de:	b3 94       	inc	r11
    60e0:	04 c0       	rjmp	.+8      	; 0x60ea <vfprintf+0x31a>
    60e2:	8a 2d       	mov	r24, r10
    60e4:	86 78       	andi	r24, 0x86	; 134
    60e6:	09 f0       	breq	.+2      	; 0x60ea <vfprintf+0x31a>
    60e8:	b3 94       	inc	r11
    60ea:	a3 fc       	sbrc	r10, 3
    60ec:	10 c0       	rjmp	.+32     	; 0x610e <vfprintf+0x33e>
    60ee:	a0 fe       	sbrs	r10, 0
    60f0:	06 c0       	rjmp	.+12     	; 0x60fe <vfprintf+0x32e>
    60f2:	b2 14       	cp	r11, r2
    60f4:	80 f4       	brcc	.+32     	; 0x6116 <vfprintf+0x346>
    60f6:	28 0c       	add	r2, r8
    60f8:	92 2c       	mov	r9, r2
    60fa:	9b 18       	sub	r9, r11
    60fc:	0d c0       	rjmp	.+26     	; 0x6118 <vfprintf+0x348>
    60fe:	b2 14       	cp	r11, r2
    6100:	58 f4       	brcc	.+22     	; 0x6118 <vfprintf+0x348>
    6102:	b6 01       	movw	r22, r12
    6104:	80 e2       	ldi	r24, 0x20	; 32
    6106:	90 e0       	ldi	r25, 0x00	; 0
    6108:	76 d0       	rcall	.+236    	; 0x61f6 <fputc>
    610a:	b3 94       	inc	r11
    610c:	f8 cf       	rjmp	.-16     	; 0x60fe <vfprintf+0x32e>
    610e:	b2 14       	cp	r11, r2
    6110:	18 f4       	brcc	.+6      	; 0x6118 <vfprintf+0x348>
    6112:	2b 18       	sub	r2, r11
    6114:	02 c0       	rjmp	.+4      	; 0x611a <vfprintf+0x34a>
    6116:	98 2c       	mov	r9, r8
    6118:	21 2c       	mov	r2, r1
    611a:	a4 fe       	sbrs	r10, 4
    611c:	0f c0       	rjmp	.+30     	; 0x613c <vfprintf+0x36c>
    611e:	b6 01       	movw	r22, r12
    6120:	80 e3       	ldi	r24, 0x30	; 48
    6122:	90 e0       	ldi	r25, 0x00	; 0
    6124:	68 d0       	rcall	.+208    	; 0x61f6 <fputc>
    6126:	a2 fe       	sbrs	r10, 2
    6128:	16 c0       	rjmp	.+44     	; 0x6156 <vfprintf+0x386>
    612a:	a1 fc       	sbrc	r10, 1
    612c:	03 c0       	rjmp	.+6      	; 0x6134 <vfprintf+0x364>
    612e:	88 e7       	ldi	r24, 0x78	; 120
    6130:	90 e0       	ldi	r25, 0x00	; 0
    6132:	02 c0       	rjmp	.+4      	; 0x6138 <vfprintf+0x368>
    6134:	88 e5       	ldi	r24, 0x58	; 88
    6136:	90 e0       	ldi	r25, 0x00	; 0
    6138:	b6 01       	movw	r22, r12
    613a:	0c c0       	rjmp	.+24     	; 0x6154 <vfprintf+0x384>
    613c:	8a 2d       	mov	r24, r10
    613e:	86 78       	andi	r24, 0x86	; 134
    6140:	51 f0       	breq	.+20     	; 0x6156 <vfprintf+0x386>
    6142:	a1 fe       	sbrs	r10, 1
    6144:	02 c0       	rjmp	.+4      	; 0x614a <vfprintf+0x37a>
    6146:	8b e2       	ldi	r24, 0x2B	; 43
    6148:	01 c0       	rjmp	.+2      	; 0x614c <vfprintf+0x37c>
    614a:	80 e2       	ldi	r24, 0x20	; 32
    614c:	a7 fc       	sbrc	r10, 7
    614e:	8d e2       	ldi	r24, 0x2D	; 45
    6150:	b6 01       	movw	r22, r12
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	50 d0       	rcall	.+160    	; 0x61f6 <fputc>
    6156:	89 14       	cp	r8, r9
    6158:	30 f4       	brcc	.+12     	; 0x6166 <vfprintf+0x396>
    615a:	b6 01       	movw	r22, r12
    615c:	80 e3       	ldi	r24, 0x30	; 48
    615e:	90 e0       	ldi	r25, 0x00	; 0
    6160:	4a d0       	rcall	.+148    	; 0x61f6 <fputc>
    6162:	9a 94       	dec	r9
    6164:	f8 cf       	rjmp	.-16     	; 0x6156 <vfprintf+0x386>
    6166:	8a 94       	dec	r8
    6168:	f3 01       	movw	r30, r6
    616a:	e8 0d       	add	r30, r8
    616c:	f1 1d       	adc	r31, r1
    616e:	80 81       	ld	r24, Z
    6170:	b6 01       	movw	r22, r12
    6172:	90 e0       	ldi	r25, 0x00	; 0
    6174:	40 d0       	rcall	.+128    	; 0x61f6 <fputc>
    6176:	81 10       	cpse	r8, r1
    6178:	f6 cf       	rjmp	.-20     	; 0x6166 <vfprintf+0x396>
    617a:	22 20       	and	r2, r2
    617c:	09 f4       	brne	.+2      	; 0x6180 <vfprintf+0x3b0>
    617e:	4e ce       	rjmp	.-868    	; 0x5e1c <vfprintf+0x4c>
    6180:	b6 01       	movw	r22, r12
    6182:	80 e2       	ldi	r24, 0x20	; 32
    6184:	90 e0       	ldi	r25, 0x00	; 0
    6186:	37 d0       	rcall	.+110    	; 0x61f6 <fputc>
    6188:	2a 94       	dec	r2
    618a:	f7 cf       	rjmp	.-18     	; 0x617a <vfprintf+0x3aa>
    618c:	f6 01       	movw	r30, r12
    618e:	86 81       	ldd	r24, Z+6	; 0x06
    6190:	97 81       	ldd	r25, Z+7	; 0x07
    6192:	02 c0       	rjmp	.+4      	; 0x6198 <vfprintf+0x3c8>
    6194:	8f ef       	ldi	r24, 0xFF	; 255
    6196:	9f ef       	ldi	r25, 0xFF	; 255
    6198:	2b 96       	adiw	r28, 0x0b	; 11
    619a:	0f b6       	in	r0, 0x3f	; 63
    619c:	f8 94       	cli
    619e:	de bf       	out	0x3e, r29	; 62
    61a0:	0f be       	out	0x3f, r0	; 63
    61a2:	cd bf       	out	0x3d, r28	; 61
    61a4:	df 91       	pop	r29
    61a6:	cf 91       	pop	r28
    61a8:	1f 91       	pop	r17
    61aa:	0f 91       	pop	r16
    61ac:	ff 90       	pop	r15
    61ae:	ef 90       	pop	r14
    61b0:	df 90       	pop	r13
    61b2:	cf 90       	pop	r12
    61b4:	bf 90       	pop	r11
    61b6:	af 90       	pop	r10
    61b8:	9f 90       	pop	r9
    61ba:	8f 90       	pop	r8
    61bc:	7f 90       	pop	r7
    61be:	6f 90       	pop	r6
    61c0:	5f 90       	pop	r5
    61c2:	4f 90       	pop	r4
    61c4:	3f 90       	pop	r3
    61c6:	2f 90       	pop	r2
    61c8:	08 95       	ret

000061ca <strnlen_P>:
    61ca:	fc 01       	movw	r30, r24
    61cc:	05 90       	lpm	r0, Z+
    61ce:	61 50       	subi	r22, 0x01	; 1
    61d0:	70 40       	sbci	r23, 0x00	; 0
    61d2:	01 10       	cpse	r0, r1
    61d4:	d8 f7       	brcc	.-10     	; 0x61cc <strnlen_P+0x2>
    61d6:	80 95       	com	r24
    61d8:	90 95       	com	r25
    61da:	8e 0f       	add	r24, r30
    61dc:	9f 1f       	adc	r25, r31
    61de:	08 95       	ret

000061e0 <strnlen>:
    61e0:	fc 01       	movw	r30, r24
    61e2:	61 50       	subi	r22, 0x01	; 1
    61e4:	70 40       	sbci	r23, 0x00	; 0
    61e6:	01 90       	ld	r0, Z+
    61e8:	01 10       	cpse	r0, r1
    61ea:	d8 f7       	brcc	.-10     	; 0x61e2 <strnlen+0x2>
    61ec:	80 95       	com	r24
    61ee:	90 95       	com	r25
    61f0:	8e 0f       	add	r24, r30
    61f2:	9f 1f       	adc	r25, r31
    61f4:	08 95       	ret

000061f6 <fputc>:
    61f6:	0f 93       	push	r16
    61f8:	1f 93       	push	r17
    61fa:	cf 93       	push	r28
    61fc:	df 93       	push	r29
    61fe:	fb 01       	movw	r30, r22
    6200:	23 81       	ldd	r18, Z+3	; 0x03
    6202:	21 fd       	sbrc	r18, 1
    6204:	03 c0       	rjmp	.+6      	; 0x620c <fputc+0x16>
    6206:	8f ef       	ldi	r24, 0xFF	; 255
    6208:	9f ef       	ldi	r25, 0xFF	; 255
    620a:	2c c0       	rjmp	.+88     	; 0x6264 <fputc+0x6e>
    620c:	22 ff       	sbrs	r18, 2
    620e:	16 c0       	rjmp	.+44     	; 0x623c <fputc+0x46>
    6210:	46 81       	ldd	r20, Z+6	; 0x06
    6212:	57 81       	ldd	r21, Z+7	; 0x07
    6214:	24 81       	ldd	r18, Z+4	; 0x04
    6216:	35 81       	ldd	r19, Z+5	; 0x05
    6218:	42 17       	cp	r20, r18
    621a:	53 07       	cpc	r21, r19
    621c:	44 f4       	brge	.+16     	; 0x622e <fputc+0x38>
    621e:	a0 81       	ld	r26, Z
    6220:	b1 81       	ldd	r27, Z+1	; 0x01
    6222:	9d 01       	movw	r18, r26
    6224:	2f 5f       	subi	r18, 0xFF	; 255
    6226:	3f 4f       	sbci	r19, 0xFF	; 255
    6228:	31 83       	std	Z+1, r19	; 0x01
    622a:	20 83       	st	Z, r18
    622c:	8c 93       	st	X, r24
    622e:	26 81       	ldd	r18, Z+6	; 0x06
    6230:	37 81       	ldd	r19, Z+7	; 0x07
    6232:	2f 5f       	subi	r18, 0xFF	; 255
    6234:	3f 4f       	sbci	r19, 0xFF	; 255
    6236:	37 83       	std	Z+7, r19	; 0x07
    6238:	26 83       	std	Z+6, r18	; 0x06
    623a:	14 c0       	rjmp	.+40     	; 0x6264 <fputc+0x6e>
    623c:	8b 01       	movw	r16, r22
    623e:	ec 01       	movw	r28, r24
    6240:	fb 01       	movw	r30, r22
    6242:	00 84       	ldd	r0, Z+8	; 0x08
    6244:	f1 85       	ldd	r31, Z+9	; 0x09
    6246:	e0 2d       	mov	r30, r0
    6248:	19 95       	eicall
    624a:	89 2b       	or	r24, r25
    624c:	e1 f6       	brne	.-72     	; 0x6206 <fputc+0x10>
    624e:	d8 01       	movw	r26, r16
    6250:	16 96       	adiw	r26, 0x06	; 6
    6252:	8d 91       	ld	r24, X+
    6254:	9c 91       	ld	r25, X
    6256:	17 97       	sbiw	r26, 0x07	; 7
    6258:	01 96       	adiw	r24, 0x01	; 1
    625a:	17 96       	adiw	r26, 0x07	; 7
    625c:	9c 93       	st	X, r25
    625e:	8e 93       	st	-X, r24
    6260:	16 97       	sbiw	r26, 0x06	; 6
    6262:	ce 01       	movw	r24, r28
    6264:	df 91       	pop	r29
    6266:	cf 91       	pop	r28
    6268:	1f 91       	pop	r17
    626a:	0f 91       	pop	r16
    626c:	08 95       	ret

0000626e <__ultoa_invert>:
    626e:	fa 01       	movw	r30, r20
    6270:	aa 27       	eor	r26, r26
    6272:	28 30       	cpi	r18, 0x08	; 8
    6274:	51 f1       	breq	.+84     	; 0x62ca <__ultoa_invert+0x5c>
    6276:	20 31       	cpi	r18, 0x10	; 16
    6278:	81 f1       	breq	.+96     	; 0x62da <__ultoa_invert+0x6c>
    627a:	e8 94       	clt
    627c:	6f 93       	push	r22
    627e:	6e 7f       	andi	r22, 0xFE	; 254
    6280:	6e 5f       	subi	r22, 0xFE	; 254
    6282:	7f 4f       	sbci	r23, 0xFF	; 255
    6284:	8f 4f       	sbci	r24, 0xFF	; 255
    6286:	9f 4f       	sbci	r25, 0xFF	; 255
    6288:	af 4f       	sbci	r26, 0xFF	; 255
    628a:	b1 e0       	ldi	r27, 0x01	; 1
    628c:	3e d0       	rcall	.+124    	; 0x630a <__ultoa_invert+0x9c>
    628e:	b4 e0       	ldi	r27, 0x04	; 4
    6290:	3c d0       	rcall	.+120    	; 0x630a <__ultoa_invert+0x9c>
    6292:	67 0f       	add	r22, r23
    6294:	78 1f       	adc	r23, r24
    6296:	89 1f       	adc	r24, r25
    6298:	9a 1f       	adc	r25, r26
    629a:	a1 1d       	adc	r26, r1
    629c:	68 0f       	add	r22, r24
    629e:	79 1f       	adc	r23, r25
    62a0:	8a 1f       	adc	r24, r26
    62a2:	91 1d       	adc	r25, r1
    62a4:	a1 1d       	adc	r26, r1
    62a6:	6a 0f       	add	r22, r26
    62a8:	71 1d       	adc	r23, r1
    62aa:	81 1d       	adc	r24, r1
    62ac:	91 1d       	adc	r25, r1
    62ae:	a1 1d       	adc	r26, r1
    62b0:	20 d0       	rcall	.+64     	; 0x62f2 <__ultoa_invert+0x84>
    62b2:	09 f4       	brne	.+2      	; 0x62b6 <__ultoa_invert+0x48>
    62b4:	68 94       	set
    62b6:	3f 91       	pop	r19
    62b8:	2a e0       	ldi	r18, 0x0A	; 10
    62ba:	26 9f       	mul	r18, r22
    62bc:	11 24       	eor	r1, r1
    62be:	30 19       	sub	r19, r0
    62c0:	30 5d       	subi	r19, 0xD0	; 208
    62c2:	31 93       	st	Z+, r19
    62c4:	de f6       	brtc	.-74     	; 0x627c <__ultoa_invert+0xe>
    62c6:	cf 01       	movw	r24, r30
    62c8:	08 95       	ret
    62ca:	46 2f       	mov	r20, r22
    62cc:	47 70       	andi	r20, 0x07	; 7
    62ce:	40 5d       	subi	r20, 0xD0	; 208
    62d0:	41 93       	st	Z+, r20
    62d2:	b3 e0       	ldi	r27, 0x03	; 3
    62d4:	0f d0       	rcall	.+30     	; 0x62f4 <__ultoa_invert+0x86>
    62d6:	c9 f7       	brne	.-14     	; 0x62ca <__ultoa_invert+0x5c>
    62d8:	f6 cf       	rjmp	.-20     	; 0x62c6 <__ultoa_invert+0x58>
    62da:	46 2f       	mov	r20, r22
    62dc:	4f 70       	andi	r20, 0x0F	; 15
    62de:	40 5d       	subi	r20, 0xD0	; 208
    62e0:	4a 33       	cpi	r20, 0x3A	; 58
    62e2:	18 f0       	brcs	.+6      	; 0x62ea <__ultoa_invert+0x7c>
    62e4:	49 5d       	subi	r20, 0xD9	; 217
    62e6:	31 fd       	sbrc	r19, 1
    62e8:	40 52       	subi	r20, 0x20	; 32
    62ea:	41 93       	st	Z+, r20
    62ec:	02 d0       	rcall	.+4      	; 0x62f2 <__ultoa_invert+0x84>
    62ee:	a9 f7       	brne	.-22     	; 0x62da <__ultoa_invert+0x6c>
    62f0:	ea cf       	rjmp	.-44     	; 0x62c6 <__ultoa_invert+0x58>
    62f2:	b4 e0       	ldi	r27, 0x04	; 4
    62f4:	a6 95       	lsr	r26
    62f6:	97 95       	ror	r25
    62f8:	87 95       	ror	r24
    62fa:	77 95       	ror	r23
    62fc:	67 95       	ror	r22
    62fe:	ba 95       	dec	r27
    6300:	c9 f7       	brne	.-14     	; 0x62f4 <__ultoa_invert+0x86>
    6302:	00 97       	sbiw	r24, 0x00	; 0
    6304:	61 05       	cpc	r22, r1
    6306:	71 05       	cpc	r23, r1
    6308:	08 95       	ret
    630a:	9b 01       	movw	r18, r22
    630c:	ac 01       	movw	r20, r24
    630e:	0a 2e       	mov	r0, r26
    6310:	06 94       	lsr	r0
    6312:	57 95       	ror	r21
    6314:	47 95       	ror	r20
    6316:	37 95       	ror	r19
    6318:	27 95       	ror	r18
    631a:	ba 95       	dec	r27
    631c:	c9 f7       	brne	.-14     	; 0x6310 <__ultoa_invert+0xa2>
    631e:	62 0f       	add	r22, r18
    6320:	73 1f       	adc	r23, r19
    6322:	84 1f       	adc	r24, r20
    6324:	95 1f       	adc	r25, r21
    6326:	a0 1d       	adc	r26, r0
    6328:	08 95       	ret

0000632a <_exit>:
    632a:	f8 94       	cli

0000632c <__stop_program>:
    632c:	ff cf       	rjmp	.-2      	; 0x632c <__stop_program>
