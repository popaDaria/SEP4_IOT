
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000716  00800200  000063e0  00006474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000063e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c3c  00800916  00800916  00006b8a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006b8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006be8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ad0  00000000  00000000  00006c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000db98  00000000  00000000  000076f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003641  00000000  00000000  00015290  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006be9  00000000  00000000  000188d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002640  00000000  00000000  0001f4bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000045e7  00000000  00000000  00021afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bea6  00000000  00000000  000260e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a08  00000000  00000000  00031f89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	25 c4       	rjmp	.+2122   	; 0x87c <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 34 24 	jmp	0x4868	; 0x4868 <__vector_25>
      68:	0c 94 86 24 	jmp	0x490c	; 0x490c <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ca 24 	jmp	0x4994	; 0x4994 <__vector_36>
      94:	0c 94 1c 25 	jmp	0x4a38	; 0x4a38 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 7d 2a 	jmp	0x54fa	; 0x54fa <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__vector_51>
      d0:	0c 94 b2 25 	jmp	0x4b64	; 0x4b64 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 f6 25 	jmp	0x4bec	; 0x4bec <__vector_54>
      dc:	0c 94 48 26 	jmp	0x4c90	; 0x4c90 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a1 18       	sub	r10, r1
      e6:	a1 18       	sub	r10, r1
      e8:	a1 18       	sub	r10, r1
      ea:	d8 18       	sub	r13, r8
      ec:	e0 18       	sub	r14, r0
      ee:	f5 18       	sub	r15, r5
      f0:	a1 18       	sub	r10, r1
      f2:	a1 18       	sub	r10, r1
      f4:	d8 18       	sub	r13, r8
      f6:	e0 18       	sub	r14, r0
      f8:	9f 2a       	or	r9, r31
      fa:	0f 2b       	or	r16, r31
      fc:	0f 2b       	or	r16, r31
      fe:	0f 2b       	or	r16, r31
     100:	0f 2b       	or	r16, r31
     102:	0f 2b       	or	r16, r31
     104:	0f 2b       	or	r16, r31
     106:	0f 2b       	or	r16, r31
     108:	9f 2a       	or	r9, r31
     10a:	0f 2b       	or	r16, r31
     10c:	0f 2b       	or	r16, r31
     10e:	0f 2b       	or	r16, r31
     110:	0f 2b       	or	r16, r31
     112:	0f 2b       	or	r16, r31
     114:	0f 2b       	or	r16, r31
     116:	0f 2b       	or	r16, r31
     118:	a1 2a       	or	r10, r17
     11a:	0f 2b       	or	r16, r31
     11c:	0f 2b       	or	r16, r31
     11e:	0f 2b       	or	r16, r31
     120:	0f 2b       	or	r16, r31
     122:	0f 2b       	or	r16, r31
     124:	0f 2b       	or	r16, r31
     126:	0f 2b       	or	r16, r31
     128:	0f 2b       	or	r16, r31
     12a:	0f 2b       	or	r16, r31
     12c:	0f 2b       	or	r16, r31
     12e:	0f 2b       	or	r16, r31
     130:	0f 2b       	or	r16, r31
     132:	0f 2b       	or	r16, r31
     134:	0f 2b       	or	r16, r31
     136:	0f 2b       	or	r16, r31
     138:	a1 2a       	or	r10, r17
     13a:	0f 2b       	or	r16, r31
     13c:	0f 2b       	or	r16, r31
     13e:	0f 2b       	or	r16, r31
     140:	0f 2b       	or	r16, r31
     142:	0f 2b       	or	r16, r31
     144:	0f 2b       	or	r16, r31
     146:	0f 2b       	or	r16, r31
     148:	0f 2b       	or	r16, r31
     14a:	0f 2b       	or	r16, r31
     14c:	0f 2b       	or	r16, r31
     14e:	0f 2b       	or	r16, r31
     150:	0f 2b       	or	r16, r31
     152:	0f 2b       	or	r16, r31
     154:	0f 2b       	or	r16, r31
     156:	0f 2b       	or	r16, r31
     158:	0b 2b       	or	r16, r27
     15a:	0f 2b       	or	r16, r31
     15c:	0f 2b       	or	r16, r31
     15e:	0f 2b       	or	r16, r31
     160:	0f 2b       	or	r16, r31
     162:	0f 2b       	or	r16, r31
     164:	0f 2b       	or	r16, r31
     166:	0f 2b       	or	r16, r31
     168:	d6 2a       	or	r13, r22
     16a:	0f 2b       	or	r16, r31
     16c:	0f 2b       	or	r16, r31
     16e:	0f 2b       	or	r16, r31
     170:	0f 2b       	or	r16, r31
     172:	0f 2b       	or	r16, r31
     174:	0f 2b       	or	r16, r31
     176:	0f 2b       	or	r16, r31
     178:	0f 2b       	or	r16, r31
     17a:	0f 2b       	or	r16, r31
     17c:	0f 2b       	or	r16, r31
     17e:	0f 2b       	or	r16, r31
     180:	0f 2b       	or	r16, r31
     182:	0f 2b       	or	r16, r31
     184:	0f 2b       	or	r16, r31
     186:	0f 2b       	or	r16, r31
     188:	ca 2a       	or	r12, r26
     18a:	0f 2b       	or	r16, r31
     18c:	0f 2b       	or	r16, r31
     18e:	0f 2b       	or	r16, r31
     190:	0f 2b       	or	r16, r31
     192:	0f 2b       	or	r16, r31
     194:	0f 2b       	or	r16, r31
     196:	0f 2b       	or	r16, r31
     198:	ee 2a       	or	r14, r30

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <prvCheckTasksWaitingTermination>
     19e:	80 91 3b 13 	lds	r24, 0x133B	; 0x80133b <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	a4 d2       	rcall	.+1352   	; 0x6f0 <vPortYield>
     1a8:	0e 94 1e 19 	call	0x323c	; 0x323c <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 13 18 	call	0x3026	; 0x3026 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	19 e0       	ldi	r17, 0x09	; 9
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e0 ee       	ldi	r30, 0xE0	; 224
     1e4:	f3 e6       	ldi	r31, 0x63	; 99
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a6 31       	cpi	r26, 0x16	; 22
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	25 e1       	ldi	r18, 0x15	; 21
     1f8:	a6 e1       	ldi	r26, 0x16	; 22
     1fa:	b9 e0       	ldi	r27, 0x09	; 9
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a2 35       	cpi	r26, 0x52	; 82
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <main>
     20a:	0c 94 ee 31 	jmp	0x63dc	; 0x63dc <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <co2Task>:

void co2Task(void *pvParameters){
	(void)pvParameters;
	while(1){
		//vTaskDelay(pdMS_TO_TICKS(5000UL));
		vTaskDelay(100);
     210:	64 e6       	ldi	r22, 0x64	; 100
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vTaskDelay>
		int statusCode = mh_z19_takeMeassuring();
     21c:	0e 94 8c 22 	call	0x4518	; 0x4518 <mh_z19_takeMeassuring>
		if(statusCode!=MHZ19_OK){
     220:	88 23       	and	r24, r24
     222:	61 f0       	breq	.+24     	; 0x23c <co2Task+0x2c>
			printf("CO2 measuring error %d\n",statusCode);
     224:	1f 92       	push	r1
     226:	8f 93       	push	r24
     228:	8f e6       	ldi	r24, 0x6F	; 111
     22a:	92 e0       	ldi	r25, 0x02	; 2
     22c:	9f 93       	push	r25
     22e:	8f 93       	push	r24
     230:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
		}
		vTaskDelay(9900);
     23c:	6c ea       	ldi	r22, 0xAC	; 172
     23e:	76 e2       	ldi	r23, 0x26	; 38
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vTaskDelay>
	}
     248:	e3 cf       	rjmp	.-58     	; 0x210 <co2Task>

0000024a <co2Callback>:
}
void co2Callback(uint16_t ppm){
     24a:	0f 93       	push	r16
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	c8 2f       	mov	r28, r24
     252:	d9 2f       	mov	r29, r25
	xSemaphoreTake(hardware_semaphore,portMAX_DELAY);
     254:	4f ef       	ldi	r20, 0xFF	; 255
     256:	5f ef       	ldi	r21, 0xFF	; 255
     258:	ba 01       	movw	r22, r20
     25a:	80 91 46 15 	lds	r24, 0x1546	; 0x801546 <hardware_semaphore>
     25e:	90 91 47 15 	lds	r25, 0x1547	; 0x801547 <hardware_semaphore+0x1>
     262:	d8 d5       	rcall	.+2992   	; 0xe14 <xQueueSemaphoreTake>
	entry_data.co2=ppm;
     264:	e6 e3       	ldi	r30, 0x36	; 54
     266:	f5 e1       	ldi	r31, 0x15	; 21
     268:	c4 83       	std	Z+4, r28	; 0x04
     26a:	d5 83       	std	Z+5, r29	; 0x05
	printf("CO2 VALUE : %d ", entry_data.co2);
     26c:	df 93       	push	r29
     26e:	cf 93       	push	r28
     270:	87 e8       	ldi	r24, 0x87	; 135
     272:	92 e0       	ldi	r25, 0x02	; 2
     274:	9f 93       	push	r25
     276:	8f 93       	push	r24
     278:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>
	xSemaphoreGive(hardware_semaphore);
     27c:	00 e0       	ldi	r16, 0x00	; 0
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	a9 01       	movw	r20, r18
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	80 91 46 15 	lds	r24, 0x1546	; 0x801546 <hardware_semaphore>
     28c:	90 91 47 15 	lds	r25, 0x1547	; 0x801547 <hardware_semaphore+0x1>
     290:	47 d4       	rcall	.+2190   	; 0xb20 <xQueueGenericSend>
}
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	0f 91       	pop	r16
     2a0:	08 95       	ret

000002a2 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     2a2:	e2 e2       	ldi	r30, 0x22	; 34
     2a4:	f9 e0       	ldi	r31, 0x09	; 9
     2a6:	a6 e2       	ldi	r26, 0x26	; 38
     2a8:	b9 e0       	ldi	r27, 0x09	; 9
     2aa:	b1 83       	std	Z+1, r27	; 0x01
     2ac:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     2ae:	13 82       	std	Z+3, r1	; 0x03
     2b0:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     2b2:	e6 ee       	ldi	r30, 0xE6	; 230
     2b4:	f2 e1       	ldi	r31, 0x12	; 18
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     2b6:	f0 93 21 09 	sts	0x0921, r31	; 0x800921 <pxEnd+0x1>
     2ba:	e0 93 20 09 	sts	0x0920, r30	; 0x800920 <pxEnd>
    pxEnd->xBlockSize = 0;
     2be:	13 82       	std	Z+3, r1	; 0x03
     2c0:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     2c2:	11 82       	std	Z+1, r1	; 0x01
     2c4:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     2c6:	80 ec       	ldi	r24, 0xC0	; 192
     2c8:	99 e0       	ldi	r25, 0x09	; 9
     2ca:	13 96       	adiw	r26, 0x03	; 3
     2cc:	9c 93       	st	X, r25
     2ce:	8e 93       	st	-X, r24
     2d0:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     2d2:	ed 93       	st	X+, r30
     2d4:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     2d6:	90 93 1d 09 	sts	0x091D, r25	; 0x80091d <xMinimumEverFreeBytesRemaining+0x1>
     2da:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     2de:	90 93 1f 09 	sts	0x091F, r25	; 0x80091f <xFreeBytesRemaining+0x1>
     2e2:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	90 e8       	ldi	r25, 0x80	; 128
     2ea:	90 93 17 09 	sts	0x0917, r25	; 0x800917 <__data_end+0x1>
     2ee:	80 93 16 09 	sts	0x0916, r24	; 0x800916 <__data_end>
     2f2:	08 95       	ret

000002f4 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     2fa:	a2 e2       	ldi	r26, 0x22	; 34
     2fc:	b9 e0       	ldi	r27, 0x09	; 9
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <prvInsertBlockIntoFreeList+0xe>
     300:	df 01       	movw	r26, r30
     302:	ed 91       	ld	r30, X+
     304:	fc 91       	ld	r31, X
     306:	11 97       	sbiw	r26, 0x01	; 1
     308:	ec 17       	cp	r30, r28
     30a:	fd 07       	cpc	r31, r29
     30c:	c8 f3       	brcs	.-14     	; 0x300 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     30e:	12 96       	adiw	r26, 0x02	; 2
     310:	8d 91       	ld	r24, X+
     312:	9c 91       	ld	r25, X
     314:	13 97       	sbiw	r26, 0x03	; 3
     316:	9d 01       	movw	r18, r26
     318:	28 0f       	add	r18, r24
     31a:	39 1f       	adc	r19, r25
     31c:	c2 17       	cp	r28, r18
     31e:	d3 07       	cpc	r29, r19
     320:	49 f4       	brne	.+18     	; 0x334 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     322:	2a 81       	ldd	r18, Y+2	; 0x02
     324:	3b 81       	ldd	r19, Y+3	; 0x03
     326:	82 0f       	add	r24, r18
     328:	93 1f       	adc	r25, r19
     32a:	13 96       	adiw	r26, 0x03	; 3
     32c:	9c 93       	st	X, r25
     32e:	8e 93       	st	-X, r24
     330:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     332:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     334:	8a 81       	ldd	r24, Y+2	; 0x02
     336:	9b 81       	ldd	r25, Y+3	; 0x03
     338:	9e 01       	movw	r18, r28
     33a:	28 0f       	add	r18, r24
     33c:	39 1f       	adc	r19, r25
     33e:	e2 17       	cp	r30, r18
     340:	f3 07       	cpc	r31, r19
     342:	c1 f4       	brne	.+48     	; 0x374 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     344:	20 91 20 09 	lds	r18, 0x0920	; 0x800920 <pxEnd>
     348:	30 91 21 09 	lds	r19, 0x0921	; 0x800921 <pxEnd+0x1>
     34c:	e2 17       	cp	r30, r18
     34e:	f3 07       	cpc	r31, r19
     350:	71 f0       	breq	.+28     	; 0x36e <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     352:	22 81       	ldd	r18, Z+2	; 0x02
     354:	33 81       	ldd	r19, Z+3	; 0x03
     356:	82 0f       	add	r24, r18
     358:	93 1f       	adc	r25, r19
     35a:	9b 83       	std	Y+3, r25	; 0x03
     35c:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     35e:	ed 91       	ld	r30, X+
     360:	fc 91       	ld	r31, X
     362:	11 97       	sbiw	r26, 0x01	; 1
     364:	80 81       	ld	r24, Z
     366:	91 81       	ldd	r25, Z+1	; 0x01
     368:	99 83       	std	Y+1, r25	; 0x01
     36a:	88 83       	st	Y, r24
     36c:	05 c0       	rjmp	.+10     	; 0x378 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     36e:	39 83       	std	Y+1, r19	; 0x01
     370:	28 83       	st	Y, r18
     372:	02 c0       	rjmp	.+4      	; 0x378 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     374:	f9 83       	std	Y+1, r31	; 0x01
     376:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     378:	ca 17       	cp	r28, r26
     37a:	db 07       	cpc	r29, r27
     37c:	11 f0       	breq	.+4      	; 0x382 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     37e:	cd 93       	st	X+, r28
     380:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     396:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     39a:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <pxEnd>
     39e:	90 91 21 09 	lds	r25, 0x0921	; 0x800921 <pxEnd+0x1>
     3a2:	89 2b       	or	r24, r25
     3a4:	09 f4       	brne	.+2      	; 0x3a8 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     3a6:	7d df       	rcall	.-262    	; 0x2a2 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     3a8:	80 91 16 09 	lds	r24, 0x0916	; 0x800916 <__data_end>
     3ac:	90 91 17 09 	lds	r25, 0x0917	; 0x800917 <__data_end+0x1>
     3b0:	80 23       	and	r24, r16
     3b2:	91 23       	and	r25, r17
     3b4:	89 2b       	or	r24, r25
     3b6:	09 f0       	breq	.+2      	; 0x3ba <pvPortMalloc+0x32>
     3b8:	76 c0       	rjmp	.+236    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     3ba:	01 15       	cp	r16, r1
     3bc:	11 05       	cpc	r17, r1
     3be:	49 f0       	breq	.+18     	; 0x3d2 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     3c0:	c8 01       	movw	r24, r16
     3c2:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     3c4:	08 17       	cp	r16, r24
     3c6:	19 07       	cpc	r17, r25
     3c8:	18 f0       	brcs	.+6      	; 0x3d0 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     3ca:	00 e0       	ldi	r16, 0x00	; 0
     3cc:	10 e0       	ldi	r17, 0x00	; 0
     3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     3d0:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     3d2:	01 15       	cp	r16, r1
     3d4:	11 05       	cpc	r17, r1
     3d6:	09 f4       	brne	.+2      	; 0x3da <pvPortMalloc+0x52>
     3d8:	69 c0       	rjmp	.+210    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     3da:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <xFreeBytesRemaining>
     3de:	90 91 1f 09 	lds	r25, 0x091F	; 0x80091f <xFreeBytesRemaining+0x1>
     3e2:	80 17       	cp	r24, r16
     3e4:	91 07       	cpc	r25, r17
     3e6:	08 f4       	brcc	.+2      	; 0x3ea <pvPortMalloc+0x62>
     3e8:	64 c0       	rjmp	.+200    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     3ea:	c0 91 22 09 	lds	r28, 0x0922	; 0x800922 <xStart>
     3ee:	d0 91 23 09 	lds	r29, 0x0923	; 0x800923 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     3f2:	e2 e2       	ldi	r30, 0x22	; 34
     3f4:	f9 e0       	ldi	r31, 0x09	; 9
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     3f8:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     3fa:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     3fc:	8a 81       	ldd	r24, Y+2	; 0x02
     3fe:	9b 81       	ldd	r25, Y+3	; 0x03
     400:	80 17       	cp	r24, r16
     402:	91 07       	cpc	r25, r17
     404:	20 f4       	brcc	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     406:	88 81       	ld	r24, Y
     408:	99 81       	ldd	r25, Y+1	; 0x01
     40a:	00 97       	sbiw	r24, 0x00	; 0
     40c:	a9 f7       	brne	.-22     	; 0x3f8 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     40e:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <pxEnd>
     412:	90 91 21 09 	lds	r25, 0x0921	; 0x800921 <pxEnd+0x1>
     416:	c8 17       	cp	r28, r24
     418:	d9 07       	cpc	r29, r25
     41a:	09 f4       	brne	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41c:	4d c0       	rjmp	.+154    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     41e:	e0 80       	ld	r14, Z
     420:	f1 80       	ldd	r15, Z+1	; 0x01
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	e8 0e       	add	r14, r24
     426:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     428:	88 81       	ld	r24, Y
     42a:	99 81       	ldd	r25, Y+1	; 0x01
     42c:	91 83       	std	Z+1, r25	; 0x01
     42e:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     430:	2a 81       	ldd	r18, Y+2	; 0x02
     432:	3b 81       	ldd	r19, Y+3	; 0x03
     434:	20 1b       	sub	r18, r16
     436:	31 0b       	sbc	r19, r17
     438:	29 30       	cpi	r18, 0x09	; 9
     43a:	31 05       	cpc	r19, r1
     43c:	48 f0       	brcs	.+18     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     43e:	ce 01       	movw	r24, r28
     440:	80 0f       	add	r24, r16
     442:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     444:	fc 01       	movw	r30, r24
     446:	33 83       	std	Z+3, r19	; 0x03
     448:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     44a:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     44c:	0a 83       	std	Y+2, r16	; 0x02
     44e:	52 df       	rcall	.-348    	; 0x2f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     450:	2a 81       	ldd	r18, Y+2	; 0x02
     452:	3b 81       	ldd	r19, Y+3	; 0x03
     454:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <xFreeBytesRemaining>
     458:	90 91 1f 09 	lds	r25, 0x091F	; 0x80091f <xFreeBytesRemaining+0x1>
     45c:	82 1b       	sub	r24, r18
     45e:	93 0b       	sbc	r25, r19
     460:	90 93 1f 09 	sts	0x091F, r25	; 0x80091f <xFreeBytesRemaining+0x1>
     464:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     468:	40 91 1c 09 	lds	r20, 0x091C	; 0x80091c <xMinimumEverFreeBytesRemaining>
     46c:	50 91 1d 09 	lds	r21, 0x091D	; 0x80091d <xMinimumEverFreeBytesRemaining+0x1>
     470:	84 17       	cp	r24, r20
     472:	95 07       	cpc	r25, r21
     474:	20 f4       	brcc	.+8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     476:	90 93 1d 09 	sts	0x091D, r25	; 0x80091d <xMinimumEverFreeBytesRemaining+0x1>
     47a:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     47e:	80 91 16 09 	lds	r24, 0x0916	; 0x800916 <__data_end>
     482:	90 91 17 09 	lds	r25, 0x0917	; 0x800917 <__data_end+0x1>
     486:	28 2b       	or	r18, r24
     488:	39 2b       	or	r19, r25
     48a:	3b 83       	std	Y+3, r19	; 0x03
     48c:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     48e:	19 82       	std	Y+1, r1	; 0x01
     490:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     492:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <xNumberOfSuccessfulAllocations>
     496:	90 91 1b 09 	lds	r25, 0x091B	; 0x80091b <xNumberOfSuccessfulAllocations+0x1>
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	90 93 1b 09 	sts	0x091B, r25	; 0x80091b <xNumberOfSuccessfulAllocations+0x1>
     4a0:	80 93 1a 09 	sts	0x091A, r24	; 0x80091a <xNumberOfSuccessfulAllocations>
     4a4:	0b c0       	rjmp	.+22     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     4a6:	e1 2c       	mov	r14, r1
     4a8:	f1 2c       	mov	r15, r1
     4aa:	08 c0       	rjmp	.+16     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4ac:	e1 2c       	mov	r14, r1
     4ae:	f1 2c       	mov	r15, r1
     4b0:	05 c0       	rjmp	.+10     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4b2:	e1 2c       	mov	r14, r1
     4b4:	f1 2c       	mov	r15, r1
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4b8:	e1 2c       	mov	r14, r1
     4ba:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     4bc:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     4c0:	e1 14       	cp	r14, r1
     4c2:	f1 04       	cpc	r15, r1
     4c4:	11 f4       	brne	.+4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     4c6:	0e 94 2a 19 	call	0x3254	; 0x3254 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     4ca:	c7 01       	movw	r24, r14
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	08 95       	ret

000004da <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     4e2:	00 97       	sbiw	r24, 0x00	; 0
     4e4:	91 f1       	breq	.+100    	; 0x54a <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     4e6:	ec 01       	movw	r28, r24
     4e8:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     4ea:	4a 81       	ldd	r20, Y+2	; 0x02
     4ec:	5b 81       	ldd	r21, Y+3	; 0x03
     4ee:	20 91 16 09 	lds	r18, 0x0916	; 0x800916 <__data_end>
     4f2:	30 91 17 09 	lds	r19, 0x0917	; 0x800917 <__data_end+0x1>
     4f6:	ba 01       	movw	r22, r20
     4f8:	62 23       	and	r22, r18
     4fa:	73 23       	and	r23, r19
     4fc:	67 2b       	or	r22, r23
     4fe:	29 f1       	breq	.+74     	; 0x54a <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     500:	68 81       	ld	r22, Y
     502:	79 81       	ldd	r23, Y+1	; 0x01
     504:	67 2b       	or	r22, r23
     506:	09 f5       	brne	.+66     	; 0x54a <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     508:	20 95       	com	r18
     50a:	30 95       	com	r19
     50c:	24 23       	and	r18, r20
     50e:	35 23       	and	r19, r21
     510:	3b 83       	std	Y+3, r19	; 0x03
     512:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     514:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     518:	8a 81       	ldd	r24, Y+2	; 0x02
     51a:	9b 81       	ldd	r25, Y+3	; 0x03
     51c:	20 91 1e 09 	lds	r18, 0x091E	; 0x80091e <xFreeBytesRemaining>
     520:	30 91 1f 09 	lds	r19, 0x091F	; 0x80091f <xFreeBytesRemaining+0x1>
     524:	82 0f       	add	r24, r18
     526:	93 1f       	adc	r25, r19
     528:	90 93 1f 09 	sts	0x091F, r25	; 0x80091f <xFreeBytesRemaining+0x1>
     52c:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     530:	ce 01       	movw	r24, r28
     532:	e0 de       	rcall	.-576    	; 0x2f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     534:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <xNumberOfSuccessfulFrees>
     538:	90 91 19 09 	lds	r25, 0x0919	; 0x800919 <xNumberOfSuccessfulFrees+0x1>
     53c:	01 96       	adiw	r24, 0x01	; 1
     53e:	90 93 19 09 	sts	0x0919, r25	; 0x800919 <xNumberOfSuccessfulFrees+0x1>
     542:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     546:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	08 95       	ret

00000554 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     554:	fc 01       	movw	r30, r24
     556:	03 96       	adiw	r24, 0x03	; 3
     558:	92 83       	std	Z+2, r25	; 0x02
     55a:	81 83       	std	Z+1, r24	; 0x01
     55c:	4f ef       	ldi	r20, 0xFF	; 255
     55e:	5f ef       	ldi	r21, 0xFF	; 255
     560:	ba 01       	movw	r22, r20
     562:	43 83       	std	Z+3, r20	; 0x03
     564:	54 83       	std	Z+4, r21	; 0x04
     566:	65 83       	std	Z+5, r22	; 0x05
     568:	76 83       	std	Z+6, r23	; 0x06
     56a:	90 87       	std	Z+8, r25	; 0x08
     56c:	87 83       	std	Z+7, r24	; 0x07
     56e:	92 87       	std	Z+10, r25	; 0x0a
     570:	81 87       	std	Z+9, r24	; 0x09
     572:	10 82       	st	Z, r1
     574:	08 95       	ret

00000576 <vListInitialiseItem>:
     576:	fc 01       	movw	r30, r24
     578:	13 86       	std	Z+11, r1	; 0x0b
     57a:	12 86       	std	Z+10, r1	; 0x0a
     57c:	08 95       	ret

0000057e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     588:	08 81       	ld	r16, Y
     58a:	19 81       	ldd	r17, Y+1	; 0x01
     58c:	2a 81       	ldd	r18, Y+2	; 0x02
     58e:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     590:	0f 3f       	cpi	r16, 0xFF	; 255
     592:	4f ef       	ldi	r20, 0xFF	; 255
     594:	14 07       	cpc	r17, r20
     596:	24 07       	cpc	r18, r20
     598:	34 07       	cpc	r19, r20
     59a:	21 f4       	brne	.+8      	; 0x5a4 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     59c:	fc 01       	movw	r30, r24
     59e:	a1 85       	ldd	r26, Z+9	; 0x09
     5a0:	b2 85       	ldd	r27, Z+10	; 0x0a
     5a2:	11 c0       	rjmp	.+34     	; 0x5c6 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     5a4:	dc 01       	movw	r26, r24
     5a6:	13 96       	adiw	r26, 0x03	; 3
     5a8:	01 c0       	rjmp	.+2      	; 0x5ac <vListInsert+0x2e>
     5aa:	df 01       	movw	r26, r30
     5ac:	14 96       	adiw	r26, 0x04	; 4
     5ae:	ed 91       	ld	r30, X+
     5b0:	fc 91       	ld	r31, X
     5b2:	15 97       	sbiw	r26, 0x05	; 5
     5b4:	40 81       	ld	r20, Z
     5b6:	51 81       	ldd	r21, Z+1	; 0x01
     5b8:	62 81       	ldd	r22, Z+2	; 0x02
     5ba:	73 81       	ldd	r23, Z+3	; 0x03
     5bc:	04 17       	cp	r16, r20
     5be:	15 07       	cpc	r17, r21
     5c0:	26 07       	cpc	r18, r22
     5c2:	37 07       	cpc	r19, r23
     5c4:	90 f7       	brcc	.-28     	; 0x5aa <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     5c6:	14 96       	adiw	r26, 0x04	; 4
     5c8:	ed 91       	ld	r30, X+
     5ca:	fc 91       	ld	r31, X
     5cc:	15 97       	sbiw	r26, 0x05	; 5
     5ce:	fd 83       	std	Y+5, r31	; 0x05
     5d0:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     5d2:	d7 83       	std	Z+7, r29	; 0x07
     5d4:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     5d6:	bf 83       	std	Y+7, r27	; 0x07
     5d8:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     5da:	15 96       	adiw	r26, 0x05	; 5
     5dc:	dc 93       	st	X, r29
     5de:	ce 93       	st	-X, r28
     5e0:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     5e2:	9b 87       	std	Y+11, r25	; 0x0b
     5e4:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 81       	ld	r18, Z
     5ea:	2f 5f       	subi	r18, 0xFF	; 255
     5ec:	20 83       	st	Z, r18
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	08 95       	ret

000005f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     5fe:	a2 85       	ldd	r26, Z+10	; 0x0a
     600:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     602:	c4 81       	ldd	r28, Z+4	; 0x04
     604:	d5 81       	ldd	r29, Z+5	; 0x05
     606:	86 81       	ldd	r24, Z+6	; 0x06
     608:	97 81       	ldd	r25, Z+7	; 0x07
     60a:	9f 83       	std	Y+7, r25	; 0x07
     60c:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     60e:	c6 81       	ldd	r28, Z+6	; 0x06
     610:	d7 81       	ldd	r29, Z+7	; 0x07
     612:	84 81       	ldd	r24, Z+4	; 0x04
     614:	95 81       	ldd	r25, Z+5	; 0x05
     616:	9d 83       	std	Y+5, r25	; 0x05
     618:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     61a:	11 96       	adiw	r26, 0x01	; 1
     61c:	8d 91       	ld	r24, X+
     61e:	9c 91       	ld	r25, X
     620:	12 97       	sbiw	r26, 0x02	; 2
     622:	e8 17       	cp	r30, r24
     624:	f9 07       	cpc	r31, r25
     626:	31 f4       	brne	.+12     	; 0x634 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     628:	86 81       	ldd	r24, Z+6	; 0x06
     62a:	97 81       	ldd	r25, Z+7	; 0x07
     62c:	12 96       	adiw	r26, 0x02	; 2
     62e:	9c 93       	st	X, r25
     630:	8e 93       	st	-X, r24
     632:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     634:	13 86       	std	Z+11, r1	; 0x0b
     636:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     638:	8c 91       	ld	r24, X
     63a:	81 50       	subi	r24, 0x01	; 1
     63c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     63e:	8c 91       	ld	r24, X
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     646:	a8 95       	wdr
     648:	90 ec       	ldi	r25, 0xC0	; 192
     64a:	88 e1       	ldi	r24, 0x18	; 24
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	a8 95       	wdr
     652:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     656:	0f be       	out	0x3f, r0	; 63
     658:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     65c:	08 95       	ret

0000065e <pxPortInitialiseStack>:
     65e:	fc 01       	movw	r30, r24
     660:	60 83       	st	Z, r22
     662:	31 97       	sbiw	r30, 0x01	; 1
     664:	70 83       	st	Z, r23
     666:	31 97       	sbiw	r30, 0x01	; 1
     668:	10 82       	st	Z, r1
     66a:	31 97       	sbiw	r30, 0x01	; 1
     66c:	10 82       	st	Z, r1
     66e:	31 97       	sbiw	r30, 0x01	; 1
     670:	20 e8       	ldi	r18, 0x80	; 128
     672:	20 83       	st	Z, r18
     674:	31 97       	sbiw	r30, 0x01	; 1
     676:	10 82       	st	Z, r1
     678:	31 97       	sbiw	r30, 0x01	; 1
     67a:	10 82       	st	Z, r1
     67c:	31 97       	sbiw	r30, 0x01	; 1
     67e:	10 82       	st	Z, r1
     680:	77 97       	sbiw	r30, 0x17	; 23
     682:	40 83       	st	Z, r20
     684:	31 97       	sbiw	r30, 0x01	; 1
     686:	50 83       	st	Z, r21
     688:	86 97       	sbiw	r24, 0x26	; 38
     68a:	08 95       	ret

0000068c <xPortStartScheduler>:
     68c:	dc df       	rcall	.-72     	; 0x646 <prvSetupTimerInterrupt>
     68e:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
     692:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
     696:	cd 91       	ld	r28, X+
     698:	cd bf       	out	0x3d, r28	; 61
     69a:	dd 91       	ld	r29, X+
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	ff 91       	pop	r31
     6a0:	ef 91       	pop	r30
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	bf 91       	pop	r27
     6a8:	af 91       	pop	r26
     6aa:	9f 91       	pop	r25
     6ac:	8f 91       	pop	r24
     6ae:	7f 91       	pop	r23
     6b0:	6f 91       	pop	r22
     6b2:	5f 91       	pop	r21
     6b4:	4f 91       	pop	r20
     6b6:	3f 91       	pop	r19
     6b8:	2f 91       	pop	r18
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	df 90       	pop	r13
     6c4:	cf 90       	pop	r12
     6c6:	bf 90       	pop	r11
     6c8:	af 90       	pop	r10
     6ca:	9f 90       	pop	r9
     6cc:	8f 90       	pop	r8
     6ce:	7f 90       	pop	r7
     6d0:	6f 90       	pop	r6
     6d2:	5f 90       	pop	r5
     6d4:	4f 90       	pop	r4
     6d6:	3f 90       	pop	r3
     6d8:	2f 90       	pop	r2
     6da:	1f 90       	pop	r1
     6dc:	0f 90       	pop	r0
     6de:	0c be       	out	0x3c, r0	; 60
     6e0:	0f 90       	pop	r0
     6e2:	0b be       	out	0x3b, r0	; 59
     6e4:	0f 90       	pop	r0
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	0f 90       	pop	r0
     6ea:	08 95       	ret
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	08 95       	ret

000006f0 <vPortYield>:
     6f0:	0f 92       	push	r0
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	0f 92       	push	r0
     6f8:	0b b6       	in	r0, 0x3b	; 59
     6fa:	0f 92       	push	r0
     6fc:	0c b6       	in	r0, 0x3c	; 60
     6fe:	0f 92       	push	r0
     700:	1f 92       	push	r1
     702:	11 24       	eor	r1, r1
     704:	2f 92       	push	r2
     706:	3f 92       	push	r3
     708:	4f 92       	push	r4
     70a:	5f 92       	push	r5
     70c:	6f 92       	push	r6
     70e:	7f 92       	push	r7
     710:	8f 92       	push	r8
     712:	9f 92       	push	r9
     714:	af 92       	push	r10
     716:	bf 92       	push	r11
     718:	cf 92       	push	r12
     71a:	df 92       	push	r13
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	2f 93       	push	r18
     726:	3f 93       	push	r19
     728:	4f 93       	push	r20
     72a:	5f 93       	push	r21
     72c:	6f 93       	push	r22
     72e:	7f 93       	push	r23
     730:	8f 93       	push	r24
     732:	9f 93       	push	r25
     734:	af 93       	push	r26
     736:	bf 93       	push	r27
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	ef 93       	push	r30
     73e:	ff 93       	push	r31
     740:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
     744:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
     748:	0d b6       	in	r0, 0x3d	; 61
     74a:	0d 92       	st	X+, r0
     74c:	0e b6       	in	r0, 0x3e	; 62
     74e:	0d 92       	st	X+, r0
     750:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <vTaskSwitchContext>
     754:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
     758:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
     75c:	cd 91       	ld	r28, X+
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	dd 91       	ld	r29, X+
     762:	de bf       	out	0x3e, r29	; 62
     764:	ff 91       	pop	r31
     766:	ef 91       	pop	r30
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	bf 91       	pop	r27
     76e:	af 91       	pop	r26
     770:	9f 91       	pop	r25
     772:	8f 91       	pop	r24
     774:	7f 91       	pop	r23
     776:	6f 91       	pop	r22
     778:	5f 91       	pop	r21
     77a:	4f 91       	pop	r20
     77c:	3f 91       	pop	r19
     77e:	2f 91       	pop	r18
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	cf 90       	pop	r12
     78c:	bf 90       	pop	r11
     78e:	af 90       	pop	r10
     790:	9f 90       	pop	r9
     792:	8f 90       	pop	r8
     794:	7f 90       	pop	r7
     796:	6f 90       	pop	r6
     798:	5f 90       	pop	r5
     79a:	4f 90       	pop	r4
     79c:	3f 90       	pop	r3
     79e:	2f 90       	pop	r2
     7a0:	1f 90       	pop	r1
     7a2:	0f 90       	pop	r0
     7a4:	0c be       	out	0x3c, r0	; 60
     7a6:	0f 90       	pop	r0
     7a8:	0b be       	out	0x3b, r0	; 59
     7aa:	0f 90       	pop	r0
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	0f 90       	pop	r0
     7b0:	08 95       	ret

000007b2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     7b2:	0f 92       	push	r0
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	0f 92       	push	r0
     7ba:	0b b6       	in	r0, 0x3b	; 59
     7bc:	0f 92       	push	r0
     7be:	0c b6       	in	r0, 0x3c	; 60
     7c0:	0f 92       	push	r0
     7c2:	1f 92       	push	r1
     7c4:	11 24       	eor	r1, r1
     7c6:	2f 92       	push	r2
     7c8:	3f 92       	push	r3
     7ca:	4f 92       	push	r4
     7cc:	5f 92       	push	r5
     7ce:	6f 92       	push	r6
     7d0:	7f 92       	push	r7
     7d2:	8f 92       	push	r8
     7d4:	9f 92       	push	r9
     7d6:	af 92       	push	r10
     7d8:	bf 92       	push	r11
     7da:	cf 92       	push	r12
     7dc:	df 92       	push	r13
     7de:	ef 92       	push	r14
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	2f 93       	push	r18
     7e8:	3f 93       	push	r19
     7ea:	4f 93       	push	r20
     7ec:	5f 93       	push	r21
     7ee:	6f 93       	push	r22
     7f0:	7f 93       	push	r23
     7f2:	8f 93       	push	r24
     7f4:	9f 93       	push	r25
     7f6:	af 93       	push	r26
     7f8:	bf 93       	push	r27
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	ef 93       	push	r30
     800:	ff 93       	push	r31
     802:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
     806:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
     80a:	0d b6       	in	r0, 0x3d	; 61
     80c:	0d 92       	st	X+, r0
     80e:	0e b6       	in	r0, 0x3e	; 62
     810:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     812:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     814:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <xTaskIncrementTick>
     818:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     81a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     81e:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
     822:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
     826:	cd 91       	ld	r28, X+
     828:	cd bf       	out	0x3d, r28	; 61
     82a:	dd 91       	ld	r29, X+
     82c:	de bf       	out	0x3e, r29	; 62
     82e:	ff 91       	pop	r31
     830:	ef 91       	pop	r30
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	bf 91       	pop	r27
     838:	af 91       	pop	r26
     83a:	9f 91       	pop	r25
     83c:	8f 91       	pop	r24
     83e:	7f 91       	pop	r23
     840:	6f 91       	pop	r22
     842:	5f 91       	pop	r21
     844:	4f 91       	pop	r20
     846:	3f 91       	pop	r19
     848:	2f 91       	pop	r18
     84a:	1f 91       	pop	r17
     84c:	0f 91       	pop	r16
     84e:	ff 90       	pop	r15
     850:	ef 90       	pop	r14
     852:	df 90       	pop	r13
     854:	cf 90       	pop	r12
     856:	bf 90       	pop	r11
     858:	af 90       	pop	r10
     85a:	9f 90       	pop	r9
     85c:	8f 90       	pop	r8
     85e:	7f 90       	pop	r7
     860:	6f 90       	pop	r6
     862:	5f 90       	pop	r5
     864:	4f 90       	pop	r4
     866:	3f 90       	pop	r3
     868:	2f 90       	pop	r2
     86a:	1f 90       	pop	r1
     86c:	0f 90       	pop	r0
     86e:	0c be       	out	0x3c, r0	; 60
     870:	0f 90       	pop	r0
     872:	0b be       	out	0x3b, r0	; 59
     874:	0f 90       	pop	r0
     876:	0f be       	out	0x3f, r0	; 63
     878:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     87a:	08 95       	ret

0000087c <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     87c:	9a df       	rcall	.-204    	; 0x7b2 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     87e:	18 95       	reti

00000880 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     880:	dc 01       	movw	r26, r24
     882:	53 96       	adiw	r26, 0x13	; 19
     884:	2c 91       	ld	r18, X
     886:	53 97       	sbiw	r26, 0x13	; 19
     888:	22 23       	and	r18, r18
     88a:	41 f0       	breq	.+16     	; 0x89c <prvGetDisinheritPriorityAfterTimeout+0x1c>
     88c:	5a 96       	adiw	r26, 0x1a	; 26
     88e:	ed 91       	ld	r30, X+
     890:	fc 91       	ld	r31, X
     892:	5b 97       	sbiw	r26, 0x1b	; 27
     894:	90 81       	ld	r25, Z
     896:	8a e0       	ldi	r24, 0x0A	; 10
     898:	89 1b       	sub	r24, r25
     89a:	08 95       	ret
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	08 95       	ret

000008a0 <prvIsQueueEmpty>:
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	0f 92       	push	r0
     8a6:	fc 01       	movw	r30, r24
     8a8:	86 8d       	ldd	r24, Z+30	; 0x1e
     8aa:	81 11       	cpse	r24, r1
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <prvIsQueueEmpty+0x12>
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <prvIsQueueEmpty+0x14>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	0f 90       	pop	r0
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	08 95       	ret

000008ba <prvIsQueueFull>:
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	0f 92       	push	r0
     8c0:	fc 01       	movw	r30, r24
     8c2:	26 8d       	ldd	r18, Z+30	; 0x1e
     8c4:	87 8d       	ldd	r24, Z+31	; 0x1f
     8c6:	28 13       	cpse	r18, r24
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <prvIsQueueFull+0x14>
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <prvIsQueueFull+0x16>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0f 90       	pop	r0
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	08 95       	ret

000008d6 <prvCopyDataToQueue>:
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	ec 01       	movw	r28, r24
     8e0:	04 2f       	mov	r16, r20
     8e2:	1e 8d       	ldd	r17, Y+30	; 0x1e
     8e4:	48 a1       	ldd	r20, Y+32	; 0x20
     8e6:	41 11       	cpse	r20, r1
     8e8:	0c c0       	rjmp	.+24     	; 0x902 <prvCopyDataToQueue+0x2c>
     8ea:	88 81       	ld	r24, Y
     8ec:	99 81       	ldd	r25, Y+1	; 0x01
     8ee:	89 2b       	or	r24, r25
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <prvCopyDataToQueue+0x1e>
     8f2:	42 c0       	rjmp	.+132    	; 0x978 <prvCopyDataToQueue+0xa2>
     8f4:	8c 81       	ldd	r24, Y+4	; 0x04
     8f6:	9d 81       	ldd	r25, Y+5	; 0x05
     8f8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <xTaskPriorityDisinherit>
     8fc:	1d 82       	std	Y+5, r1	; 0x05
     8fe:	1c 82       	std	Y+4, r1	; 0x04
     900:	42 c0       	rjmp	.+132    	; 0x986 <prvCopyDataToQueue+0xb0>
     902:	01 11       	cpse	r16, r1
     904:	17 c0       	rjmp	.+46     	; 0x934 <prvCopyDataToQueue+0x5e>
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	8a 81       	ldd	r24, Y+2	; 0x02
     90a:	9b 81       	ldd	r25, Y+3	; 0x03
     90c:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <memcpy>
     910:	28 a1       	ldd	r18, Y+32	; 0x20
     912:	8a 81       	ldd	r24, Y+2	; 0x02
     914:	9b 81       	ldd	r25, Y+3	; 0x03
     916:	82 0f       	add	r24, r18
     918:	91 1d       	adc	r25, r1
     91a:	9b 83       	std	Y+3, r25	; 0x03
     91c:	8a 83       	std	Y+2, r24	; 0x02
     91e:	2c 81       	ldd	r18, Y+4	; 0x04
     920:	3d 81       	ldd	r19, Y+5	; 0x05
     922:	82 17       	cp	r24, r18
     924:	93 07       	cpc	r25, r19
     926:	50 f1       	brcs	.+84     	; 0x97c <prvCopyDataToQueue+0xa6>
     928:	88 81       	ld	r24, Y
     92a:	99 81       	ldd	r25, Y+1	; 0x01
     92c:	9b 83       	std	Y+3, r25	; 0x03
     92e:	8a 83       	std	Y+2, r24	; 0x02
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	29 c0       	rjmp	.+82     	; 0x986 <prvCopyDataToQueue+0xb0>
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	8e 81       	ldd	r24, Y+6	; 0x06
     938:	9f 81       	ldd	r25, Y+7	; 0x07
     93a:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <memcpy>
     93e:	88 a1       	ldd	r24, Y+32	; 0x20
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	91 95       	neg	r25
     944:	81 95       	neg	r24
     946:	91 09       	sbc	r25, r1
     948:	2e 81       	ldd	r18, Y+6	; 0x06
     94a:	3f 81       	ldd	r19, Y+7	; 0x07
     94c:	28 0f       	add	r18, r24
     94e:	39 1f       	adc	r19, r25
     950:	3f 83       	std	Y+7, r19	; 0x07
     952:	2e 83       	std	Y+6, r18	; 0x06
     954:	48 81       	ld	r20, Y
     956:	59 81       	ldd	r21, Y+1	; 0x01
     958:	24 17       	cp	r18, r20
     95a:	35 07       	cpc	r19, r21
     95c:	30 f4       	brcc	.+12     	; 0x96a <prvCopyDataToQueue+0x94>
     95e:	2c 81       	ldd	r18, Y+4	; 0x04
     960:	3d 81       	ldd	r19, Y+5	; 0x05
     962:	82 0f       	add	r24, r18
     964:	93 1f       	adc	r25, r19
     966:	9f 83       	std	Y+7, r25	; 0x07
     968:	8e 83       	std	Y+6, r24	; 0x06
     96a:	02 30       	cpi	r16, 0x02	; 2
     96c:	49 f4       	brne	.+18     	; 0x980 <prvCopyDataToQueue+0xaa>
     96e:	11 23       	and	r17, r17
     970:	49 f0       	breq	.+18     	; 0x984 <prvCopyDataToQueue+0xae>
     972:	11 50       	subi	r17, 0x01	; 1
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	07 c0       	rjmp	.+14     	; 0x986 <prvCopyDataToQueue+0xb0>
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	05 c0       	rjmp	.+10     	; 0x986 <prvCopyDataToQueue+0xb0>
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	03 c0       	rjmp	.+6      	; 0x986 <prvCopyDataToQueue+0xb0>
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	01 c0       	rjmp	.+2      	; 0x986 <prvCopyDataToQueue+0xb0>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	1f 5f       	subi	r17, 0xFF	; 255
     988:	1e 8f       	std	Y+30, r17	; 0x1e
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	08 95       	ret

00000994 <prvCopyDataFromQueue>:
     994:	fc 01       	movw	r30, r24
     996:	40 a1       	ldd	r20, Z+32	; 0x20
     998:	44 23       	and	r20, r20
     99a:	a9 f0       	breq	.+42     	; 0x9c6 <prvCopyDataFromQueue+0x32>
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	26 81       	ldd	r18, Z+6	; 0x06
     9a0:	37 81       	ldd	r19, Z+7	; 0x07
     9a2:	24 0f       	add	r18, r20
     9a4:	35 1f       	adc	r19, r21
     9a6:	37 83       	std	Z+7, r19	; 0x07
     9a8:	26 83       	std	Z+6, r18	; 0x06
     9aa:	84 81       	ldd	r24, Z+4	; 0x04
     9ac:	95 81       	ldd	r25, Z+5	; 0x05
     9ae:	28 17       	cp	r18, r24
     9b0:	39 07       	cpc	r19, r25
     9b2:	20 f0       	brcs	.+8      	; 0x9bc <prvCopyDataFromQueue+0x28>
     9b4:	80 81       	ld	r24, Z
     9b6:	91 81       	ldd	r25, Z+1	; 0x01
     9b8:	97 83       	std	Z+7, r25	; 0x07
     9ba:	86 83       	std	Z+6, r24	; 0x06
     9bc:	cb 01       	movw	r24, r22
     9be:	66 81       	ldd	r22, Z+6	; 0x06
     9c0:	77 81       	ldd	r23, Z+7	; 0x07
     9c2:	0c 94 71 2e 	jmp	0x5ce2	; 0x5ce2 <memcpy>
     9c6:	08 95       	ret

000009c8 <prvUnlockQueue>:
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	ec 01       	movw	r28, r24
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	0f 92       	push	r0
     9d6:	1a a1       	ldd	r17, Y+34	; 0x22
     9d8:	0b c0       	rjmp	.+22     	; 0x9f0 <prvUnlockQueue+0x28>
     9da:	8b 89       	ldd	r24, Y+19	; 0x13
     9dc:	88 23       	and	r24, r24
     9de:	51 f0       	breq	.+20     	; 0x9f4 <prvUnlockQueue+0x2c>
     9e0:	ce 01       	movw	r24, r28
     9e2:	43 96       	adiw	r24, 0x13	; 19
     9e4:	0e 94 96 10 	call	0x212c	; 0x212c <xTaskRemoveFromEventList>
     9e8:	81 11       	cpse	r24, r1
     9ea:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <vTaskMissedYield>
     9ee:	11 50       	subi	r17, 0x01	; 1
     9f0:	11 16       	cp	r1, r17
     9f2:	9c f3       	brlt	.-26     	; 0x9da <prvUnlockQueue+0x12>
     9f4:	8f ef       	ldi	r24, 0xFF	; 255
     9f6:	8a a3       	std	Y+34, r24	; 0x22
     9f8:	0f 90       	pop	r0
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	0f 92       	push	r0
     a02:	19 a1       	ldd	r17, Y+33	; 0x21
     a04:	0b c0       	rjmp	.+22     	; 0xa1c <prvUnlockQueue+0x54>
     a06:	88 85       	ldd	r24, Y+8	; 0x08
     a08:	88 23       	and	r24, r24
     a0a:	51 f0       	breq	.+20     	; 0xa20 <prvUnlockQueue+0x58>
     a0c:	ce 01       	movw	r24, r28
     a0e:	08 96       	adiw	r24, 0x08	; 8
     a10:	0e 94 96 10 	call	0x212c	; 0x212c <xTaskRemoveFromEventList>
     a14:	81 11       	cpse	r24, r1
     a16:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <vTaskMissedYield>
     a1a:	11 50       	subi	r17, 0x01	; 1
     a1c:	11 16       	cp	r1, r17
     a1e:	9c f3       	brlt	.-26     	; 0xa06 <prvUnlockQueue+0x3e>
     a20:	8f ef       	ldi	r24, 0xFF	; 255
     a22:	89 a3       	std	Y+33, r24	; 0x21
     a24:	0f 90       	pop	r0
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	08 95       	ret

00000a30 <xQueueGenericReset>:
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	ec 01       	movw	r28, r24
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	0f 92       	push	r0
     a3c:	e8 81       	ld	r30, Y
     a3e:	f9 81       	ldd	r31, Y+1	; 0x01
     a40:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a42:	28 a1       	ldd	r18, Y+32	; 0x20
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	82 9f       	mul	r24, r18
     a4a:	a0 01       	movw	r20, r0
     a4c:	83 9f       	mul	r24, r19
     a4e:	50 0d       	add	r21, r0
     a50:	92 9f       	mul	r25, r18
     a52:	50 0d       	add	r21, r0
     a54:	11 24       	eor	r1, r1
     a56:	4e 0f       	add	r20, r30
     a58:	5f 1f       	adc	r21, r31
     a5a:	5d 83       	std	Y+5, r21	; 0x05
     a5c:	4c 83       	std	Y+4, r20	; 0x04
     a5e:	1e 8e       	std	Y+30, r1	; 0x1e
     a60:	fb 83       	std	Y+3, r31	; 0x03
     a62:	ea 83       	std	Y+2, r30	; 0x02
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	28 9f       	mul	r18, r24
     a68:	a0 01       	movw	r20, r0
     a6a:	29 9f       	mul	r18, r25
     a6c:	50 0d       	add	r21, r0
     a6e:	38 9f       	mul	r19, r24
     a70:	50 0d       	add	r21, r0
     a72:	11 24       	eor	r1, r1
     a74:	cf 01       	movw	r24, r30
     a76:	84 0f       	add	r24, r20
     a78:	95 1f       	adc	r25, r21
     a7a:	9f 83       	std	Y+7, r25	; 0x07
     a7c:	8e 83       	std	Y+6, r24	; 0x06
     a7e:	8f ef       	ldi	r24, 0xFF	; 255
     a80:	89 a3       	std	Y+33, r24	; 0x21
     a82:	8a a3       	std	Y+34, r24	; 0x22
     a84:	61 11       	cpse	r22, r1
     a86:	0b c0       	rjmp	.+22     	; 0xa9e <xQueueGenericReset+0x6e>
     a88:	88 85       	ldd	r24, Y+8	; 0x08
     a8a:	88 23       	and	r24, r24
     a8c:	71 f0       	breq	.+28     	; 0xaaa <xQueueGenericReset+0x7a>
     a8e:	ce 01       	movw	r24, r28
     a90:	08 96       	adiw	r24, 0x08	; 8
     a92:	0e 94 96 10 	call	0x212c	; 0x212c <xTaskRemoveFromEventList>
     a96:	88 23       	and	r24, r24
     a98:	41 f0       	breq	.+16     	; 0xaaa <xQueueGenericReset+0x7a>
     a9a:	2a de       	rcall	.-940    	; 0x6f0 <vPortYield>
     a9c:	06 c0       	rjmp	.+12     	; 0xaaa <xQueueGenericReset+0x7a>
     a9e:	ce 01       	movw	r24, r28
     aa0:	08 96       	adiw	r24, 0x08	; 8
     aa2:	58 dd       	rcall	.-1360   	; 0x554 <vListInitialise>
     aa4:	ce 01       	movw	r24, r28
     aa6:	43 96       	adiw	r24, 0x13	; 19
     aa8:	55 dd       	rcall	.-1366   	; 0x554 <vListInitialise>
     aaa:	0f 90       	pop	r0
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <prvInitialiseNewQueue>:
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	f8 01       	movw	r30, r16
     abc:	61 11       	cpse	r22, r1
     abe:	03 c0       	rjmp	.+6      	; 0xac6 <prvInitialiseNewQueue+0x10>
     ac0:	11 83       	std	Z+1, r17	; 0x01
     ac2:	00 83       	st	Z, r16
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <prvInitialiseNewQueue+0x14>
     ac6:	51 83       	std	Z+1, r21	; 0x01
     ac8:	40 83       	st	Z, r20
     aca:	87 8f       	std	Z+31, r24	; 0x1f
     acc:	60 a3       	std	Z+32, r22	; 0x20
     ace:	61 e0       	ldi	r22, 0x01	; 1
     ad0:	cf 01       	movw	r24, r30
     ad2:	ae df       	rcall	.-164    	; 0xa30 <xQueueGenericReset>
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	08 95       	ret

00000ada <xQueueGenericCreate>:
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	f8 2e       	mov	r15, r24
     aea:	e6 2e       	mov	r14, r22
     aec:	d4 2e       	mov	r13, r20
     aee:	86 9f       	mul	r24, r22
     af0:	c0 01       	movw	r24, r0
     af2:	11 24       	eor	r1, r1
     af4:	83 96       	adiw	r24, 0x23	; 35
     af6:	48 dc       	rcall	.-1904   	; 0x388 <pvPortMalloc>
     af8:	ec 01       	movw	r28, r24
     afa:	00 97       	sbiw	r24, 0x00	; 0
     afc:	41 f0       	breq	.+16     	; 0xb0e <xQueueGenericCreate+0x34>
     afe:	8c 01       	movw	r16, r24
     b00:	2d 2d       	mov	r18, r13
     b02:	ac 01       	movw	r20, r24
     b04:	4d 5d       	subi	r20, 0xDD	; 221
     b06:	5f 4f       	sbci	r21, 0xFF	; 255
     b08:	6e 2d       	mov	r22, r14
     b0a:	8f 2d       	mov	r24, r15
     b0c:	d4 df       	rcall	.-88     	; 0xab6 <prvInitialiseNewQueue>
     b0e:	ce 01       	movw	r24, r28
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	08 95       	ret

00000b20 <xQueueGenericSend>:
     b20:	cf 92       	push	r12
     b22:	df 92       	push	r13
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	29 97       	sbiw	r28, 0x09	; 9
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
     b40:	7c 01       	movw	r14, r24
     b42:	6b 01       	movw	r12, r22
     b44:	2e 83       	std	Y+6, r18	; 0x06
     b46:	3f 83       	std	Y+7, r19	; 0x07
     b48:	48 87       	std	Y+8, r20	; 0x08
     b4a:	59 87       	std	Y+9, r21	; 0x09
     b4c:	10 e0       	ldi	r17, 0x00	; 0
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	0f 92       	push	r0
     b54:	f7 01       	movw	r30, r14
     b56:	96 8d       	ldd	r25, Z+30	; 0x1e
     b58:	87 8d       	ldd	r24, Z+31	; 0x1f
     b5a:	98 17       	cp	r25, r24
     b5c:	10 f0       	brcs	.+4      	; 0xb62 <xQueueGenericSend+0x42>
     b5e:	02 30       	cpi	r16, 0x02	; 2
     b60:	b1 f4       	brne	.+44     	; 0xb8e <xQueueGenericSend+0x6e>
     b62:	40 2f       	mov	r20, r16
     b64:	b6 01       	movw	r22, r12
     b66:	c7 01       	movw	r24, r14
     b68:	b6 de       	rcall	.-660    	; 0x8d6 <prvCopyDataToQueue>
     b6a:	f7 01       	movw	r30, r14
     b6c:	93 89       	ldd	r25, Z+19	; 0x13
     b6e:	99 23       	and	r25, r25
     b70:	41 f0       	breq	.+16     	; 0xb82 <xQueueGenericSend+0x62>
     b72:	c7 01       	movw	r24, r14
     b74:	43 96       	adiw	r24, 0x13	; 19
     b76:	0e 94 96 10 	call	0x212c	; 0x212c <xTaskRemoveFromEventList>
     b7a:	88 23       	and	r24, r24
     b7c:	21 f0       	breq	.+8      	; 0xb86 <xQueueGenericSend+0x66>
     b7e:	b8 dd       	rcall	.-1168   	; 0x6f0 <vPortYield>
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <xQueueGenericSend+0x66>
     b82:	81 11       	cpse	r24, r1
     b84:	b5 dd       	rcall	.-1174   	; 0x6f0 <vPortYield>
     b86:	0f 90       	pop	r0
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	4c c0       	rjmp	.+152    	; 0xc26 <xQueueGenericSend+0x106>
     b8e:	8e 81       	ldd	r24, Y+6	; 0x06
     b90:	9f 81       	ldd	r25, Y+7	; 0x07
     b92:	a8 85       	ldd	r26, Y+8	; 0x08
     b94:	b9 85       	ldd	r27, Y+9	; 0x09
     b96:	89 2b       	or	r24, r25
     b98:	8a 2b       	or	r24, r26
     b9a:	8b 2b       	or	r24, r27
     b9c:	21 f4       	brne	.+8      	; 0xba6 <xQueueGenericSend+0x86>
     b9e:	0f 90       	pop	r0
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	40 c0       	rjmp	.+128    	; 0xc26 <xQueueGenericSend+0x106>
     ba6:	11 11       	cpse	r17, r1
     ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <xQueueGenericSend+0x94>
     baa:	ce 01       	movw	r24, r28
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <vTaskInternalSetTimeOutState>
     bb2:	11 e0       	ldi	r17, 0x01	; 1
     bb4:	0f 90       	pop	r0
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	c4 d7       	rcall	.+3976   	; 0x1b42 <vTaskSuspendAll>
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	0f 92       	push	r0
     bc0:	f7 01       	movw	r30, r14
     bc2:	81 a1       	ldd	r24, Z+33	; 0x21
     bc4:	8f 3f       	cpi	r24, 0xFF	; 255
     bc6:	09 f4       	brne	.+2      	; 0xbca <xQueueGenericSend+0xaa>
     bc8:	11 a2       	std	Z+33, r1	; 0x21
     bca:	f7 01       	movw	r30, r14
     bcc:	82 a1       	ldd	r24, Z+34	; 0x22
     bce:	8f 3f       	cpi	r24, 0xFF	; 255
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <xQueueGenericSend+0xb4>
     bd2:	12 a2       	std	Z+34, r1	; 0x22
     bd4:	0f 90       	pop	r0
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	be 01       	movw	r22, r28
     bda:	6a 5f       	subi	r22, 0xFA	; 250
     bdc:	7f 4f       	sbci	r23, 0xFF	; 255
     bde:	ce 01       	movw	r24, r28
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <xTaskCheckForTimeOut>
     be6:	81 11       	cpse	r24, r1
     be8:	19 c0       	rjmp	.+50     	; 0xc1c <xQueueGenericSend+0xfc>
     bea:	c7 01       	movw	r24, r14
     bec:	66 de       	rcall	.-820    	; 0x8ba <prvIsQueueFull>
     bee:	88 23       	and	r24, r24
     bf0:	81 f0       	breq	.+32     	; 0xc12 <xQueueGenericSend+0xf2>
     bf2:	4e 81       	ldd	r20, Y+6	; 0x06
     bf4:	5f 81       	ldd	r21, Y+7	; 0x07
     bf6:	68 85       	ldd	r22, Y+8	; 0x08
     bf8:	79 85       	ldd	r23, Y+9	; 0x09
     bfa:	c7 01       	movw	r24, r14
     bfc:	08 96       	adiw	r24, 0x08	; 8
     bfe:	0e 94 3d 10 	call	0x207a	; 0x207a <vTaskPlaceOnEventList>
     c02:	c7 01       	movw	r24, r14
     c04:	e1 de       	rcall	.-574    	; 0x9c8 <prvUnlockQueue>
     c06:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <xTaskResumeAll>
     c0a:	81 11       	cpse	r24, r1
     c0c:	a0 cf       	rjmp	.-192    	; 0xb4e <xQueueGenericSend+0x2e>
     c0e:	70 dd       	rcall	.-1312   	; 0x6f0 <vPortYield>
     c10:	9e cf       	rjmp	.-196    	; 0xb4e <xQueueGenericSend+0x2e>
     c12:	c7 01       	movw	r24, r14
     c14:	d9 de       	rcall	.-590    	; 0x9c8 <prvUnlockQueue>
     c16:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <xTaskResumeAll>
     c1a:	99 cf       	rjmp	.-206    	; 0xb4e <xQueueGenericSend+0x2e>
     c1c:	c7 01       	movw	r24, r14
     c1e:	d4 de       	rcall	.-600    	; 0x9c8 <prvUnlockQueue>
     c20:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <xTaskResumeAll>
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	29 96       	adiw	r28, 0x09	; 9
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
     c42:	08 95       	ret

00000c44 <prvInitialiseMutex>:
     c44:	0f 93       	push	r16
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	69 f0       	breq	.+26     	; 0xc64 <prvInitialiseMutex+0x20>
     c4a:	fc 01       	movw	r30, r24
     c4c:	15 82       	std	Z+5, r1	; 0x05
     c4e:	14 82       	std	Z+4, r1	; 0x04
     c50:	11 82       	std	Z+1, r1	; 0x01
     c52:	10 82       	st	Z, r1
     c54:	16 82       	std	Z+6, r1	; 0x06
     c56:	00 e0       	ldi	r16, 0x00	; 0
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	a9 01       	movw	r20, r18
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	5e df       	rcall	.-324    	; 0xb20 <xQueueGenericSend>
     c64:	0f 91       	pop	r16
     c66:	08 95       	ret

00000c68 <xQueueCreateMutex>:
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	48 2f       	mov	r20, r24
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	33 df       	rcall	.-410    	; 0xada <xQueueGenericCreate>
     c74:	ec 01       	movw	r28, r24
     c76:	e6 df       	rcall	.-52     	; 0xc44 <prvInitialiseMutex>
     c78:	ce 01       	movw	r24, r28
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	08 95       	ret

00000c80 <xQueueGenericSendFromISR>:
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	8a 01       	movw	r16, r20
     c8e:	fc 01       	movw	r30, r24
     c90:	56 8d       	ldd	r21, Z+30	; 0x1e
     c92:	37 8d       	ldd	r19, Z+31	; 0x1f
     c94:	53 17       	cp	r21, r19
     c96:	10 f0       	brcs	.+4      	; 0xc9c <xQueueGenericSendFromISR+0x1c>
     c98:	22 30       	cpi	r18, 0x02	; 2
     c9a:	f9 f4       	brne	.+62     	; 0xcda <xQueueGenericSendFromISR+0x5a>
     c9c:	42 2f       	mov	r20, r18
     c9e:	78 01       	movw	r14, r16
     ca0:	ec 01       	movw	r28, r24
     ca2:	1a a1       	ldd	r17, Y+34	; 0x22
     ca4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ca6:	ce 01       	movw	r24, r28
     ca8:	16 de       	rcall	.-980    	; 0x8d6 <prvCopyDataToQueue>
     caa:	1f 3f       	cpi	r17, 0xFF	; 255
     cac:	81 f4       	brne	.+32     	; 0xcce <xQueueGenericSendFromISR+0x4e>
     cae:	8b 89       	ldd	r24, Y+19	; 0x13
     cb0:	88 23       	and	r24, r24
     cb2:	a9 f0       	breq	.+42     	; 0xcde <xQueueGenericSendFromISR+0x5e>
     cb4:	ce 01       	movw	r24, r28
     cb6:	43 96       	adiw	r24, 0x13	; 19
     cb8:	0e 94 96 10 	call	0x212c	; 0x212c <xTaskRemoveFromEventList>
     cbc:	88 23       	and	r24, r24
     cbe:	89 f0       	breq	.+34     	; 0xce2 <xQueueGenericSendFromISR+0x62>
     cc0:	e1 14       	cp	r14, r1
     cc2:	f1 04       	cpc	r15, r1
     cc4:	81 f0       	breq	.+32     	; 0xce6 <xQueueGenericSendFromISR+0x66>
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	f7 01       	movw	r30, r14
     cca:	80 83       	st	Z, r24
     ccc:	0d c0       	rjmp	.+26     	; 0xce8 <xQueueGenericSendFromISR+0x68>
     cce:	ff 24       	eor	r15, r15
     cd0:	f3 94       	inc	r15
     cd2:	f1 0e       	add	r15, r17
     cd4:	fa a2       	std	Y+34, r15	; 0x22
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	07 c0       	rjmp	.+14     	; 0xce8 <xQueueGenericSendFromISR+0x68>
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	05 c0       	rjmp	.+10     	; 0xce8 <xQueueGenericSendFromISR+0x68>
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	03 c0       	rjmp	.+6      	; 0xce8 <xQueueGenericSendFromISR+0x68>
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <xQueueGenericSendFromISR+0x68>
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	08 95       	ret

00000cf6 <xQueueReceive>:
     cf6:	cf 92       	push	r12
     cf8:	df 92       	push	r13
     cfa:	ef 92       	push	r14
     cfc:	ff 92       	push	r15
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	29 97       	sbiw	r28, 0x09	; 9
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	8c 01       	movw	r16, r24
     d18:	6b 01       	movw	r12, r22
     d1a:	2e 83       	std	Y+6, r18	; 0x06
     d1c:	3f 83       	std	Y+7, r19	; 0x07
     d1e:	48 87       	std	Y+8, r20	; 0x08
     d20:	59 87       	std	Y+9, r21	; 0x09
     d22:	e1 2c       	mov	r14, r1
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	0f 92       	push	r0
     d2a:	f8 01       	movw	r30, r16
     d2c:	f6 8c       	ldd	r15, Z+30	; 0x1e
     d2e:	ff 20       	and	r15, r15
     d30:	99 f0       	breq	.+38     	; 0xd58 <xQueueReceive+0x62>
     d32:	b6 01       	movw	r22, r12
     d34:	c8 01       	movw	r24, r16
     d36:	2e de       	rcall	.-932    	; 0x994 <prvCopyDataFromQueue>
     d38:	fa 94       	dec	r15
     d3a:	f8 01       	movw	r30, r16
     d3c:	f6 8e       	std	Z+30, r15	; 0x1e
     d3e:	80 85       	ldd	r24, Z+8	; 0x08
     d40:	88 23       	and	r24, r24
     d42:	31 f0       	breq	.+12     	; 0xd50 <xQueueReceive+0x5a>
     d44:	c8 01       	movw	r24, r16
     d46:	08 96       	adiw	r24, 0x08	; 8
     d48:	0e 94 96 10 	call	0x212c	; 0x212c <xTaskRemoveFromEventList>
     d4c:	81 11       	cpse	r24, r1
     d4e:	d0 dc       	rcall	.-1632   	; 0x6f0 <vPortYield>
     d50:	0f 90       	pop	r0
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	4f c0       	rjmp	.+158    	; 0xdf6 <xQueueReceive+0x100>
     d58:	8e 81       	ldd	r24, Y+6	; 0x06
     d5a:	9f 81       	ldd	r25, Y+7	; 0x07
     d5c:	a8 85       	ldd	r26, Y+8	; 0x08
     d5e:	b9 85       	ldd	r27, Y+9	; 0x09
     d60:	89 2b       	or	r24, r25
     d62:	8a 2b       	or	r24, r26
     d64:	8b 2b       	or	r24, r27
     d66:	21 f4       	brne	.+8      	; 0xd70 <xQueueReceive+0x7a>
     d68:	0f 90       	pop	r0
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	43 c0       	rjmp	.+134    	; 0xdf6 <xQueueReceive+0x100>
     d70:	e1 10       	cpse	r14, r1
     d72:	06 c0       	rjmp	.+12     	; 0xd80 <xQueueReceive+0x8a>
     d74:	ce 01       	movw	r24, r28
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <vTaskInternalSetTimeOutState>
     d7c:	ee 24       	eor	r14, r14
     d7e:	e3 94       	inc	r14
     d80:	0f 90       	pop	r0
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	de d6       	rcall	.+3516   	; 0x1b42 <vTaskSuspendAll>
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	0f 92       	push	r0
     d8c:	f8 01       	movw	r30, r16
     d8e:	81 a1       	ldd	r24, Z+33	; 0x21
     d90:	8f 3f       	cpi	r24, 0xFF	; 255
     d92:	09 f4       	brne	.+2      	; 0xd96 <xQueueReceive+0xa0>
     d94:	11 a2       	std	Z+33, r1	; 0x21
     d96:	f8 01       	movw	r30, r16
     d98:	82 a1       	ldd	r24, Z+34	; 0x22
     d9a:	8f 3f       	cpi	r24, 0xFF	; 255
     d9c:	09 f4       	brne	.+2      	; 0xda0 <xQueueReceive+0xaa>
     d9e:	12 a2       	std	Z+34, r1	; 0x22
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	be 01       	movw	r22, r28
     da6:	6a 5f       	subi	r22, 0xFA	; 250
     da8:	7f 4f       	sbci	r23, 0xFF	; 255
     daa:	ce 01       	movw	r24, r28
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <xTaskCheckForTimeOut>
     db2:	81 11       	cpse	r24, r1
     db4:	17 c0       	rjmp	.+46     	; 0xde4 <xQueueReceive+0xee>
     db6:	c8 01       	movw	r24, r16
     db8:	73 dd       	rcall	.-1306   	; 0x8a0 <prvIsQueueEmpty>
     dba:	88 23       	and	r24, r24
     dbc:	79 f0       	breq	.+30     	; 0xddc <xQueueReceive+0xe6>
     dbe:	4e 81       	ldd	r20, Y+6	; 0x06
     dc0:	5f 81       	ldd	r21, Y+7	; 0x07
     dc2:	68 85       	ldd	r22, Y+8	; 0x08
     dc4:	79 85       	ldd	r23, Y+9	; 0x09
     dc6:	c8 01       	movw	r24, r16
     dc8:	43 96       	adiw	r24, 0x13	; 19
     dca:	0e 94 3d 10 	call	0x207a	; 0x207a <vTaskPlaceOnEventList>
     dce:	c8 01       	movw	r24, r16
     dd0:	fb dd       	rcall	.-1034   	; 0x9c8 <prvUnlockQueue>
     dd2:	f7 d7       	rcall	.+4078   	; 0x1dc2 <xTaskResumeAll>
     dd4:	81 11       	cpse	r24, r1
     dd6:	a6 cf       	rjmp	.-180    	; 0xd24 <xQueueReceive+0x2e>
     dd8:	8b dc       	rcall	.-1770   	; 0x6f0 <vPortYield>
     dda:	a4 cf       	rjmp	.-184    	; 0xd24 <xQueueReceive+0x2e>
     ddc:	c8 01       	movw	r24, r16
     dde:	f4 dd       	rcall	.-1048   	; 0x9c8 <prvUnlockQueue>
     de0:	f0 d7       	rcall	.+4064   	; 0x1dc2 <xTaskResumeAll>
     de2:	a0 cf       	rjmp	.-192    	; 0xd24 <xQueueReceive+0x2e>
     de4:	c8 01       	movw	r24, r16
     de6:	f0 dd       	rcall	.-1056   	; 0x9c8 <prvUnlockQueue>
     de8:	ec d7       	rcall	.+4056   	; 0x1dc2 <xTaskResumeAll>
     dea:	c8 01       	movw	r24, r16
     dec:	59 dd       	rcall	.-1358   	; 0x8a0 <prvIsQueueEmpty>
     dee:	88 23       	and	r24, r24
     df0:	09 f4       	brne	.+2      	; 0xdf4 <xQueueReceive+0xfe>
     df2:	98 cf       	rjmp	.-208    	; 0xd24 <xQueueReceive+0x2e>
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	29 96       	adiw	r28, 0x09	; 9
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	ff 90       	pop	r15
     e0c:	ef 90       	pop	r14
     e0e:	df 90       	pop	r13
     e10:	cf 90       	pop	r12
     e12:	08 95       	ret

00000e14 <xQueueSemaphoreTake>:
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	29 97       	sbiw	r28, 0x09	; 9
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	8c 01       	movw	r16, r24
     e32:	4e 83       	std	Y+6, r20	; 0x06
     e34:	5f 83       	std	Y+7, r21	; 0x07
     e36:	68 87       	std	Y+8, r22	; 0x08
     e38:	79 87       	std	Y+9, r23	; 0x09
     e3a:	e1 2c       	mov	r14, r1
     e3c:	f1 2c       	mov	r15, r1
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	0f 92       	push	r0
     e44:	f8 01       	movw	r30, r16
     e46:	86 8d       	ldd	r24, Z+30	; 0x1e
     e48:	88 23       	and	r24, r24
     e4a:	c9 f0       	breq	.+50     	; 0xe7e <xQueueSemaphoreTake+0x6a>
     e4c:	81 50       	subi	r24, 0x01	; 1
     e4e:	86 8f       	std	Z+30, r24	; 0x1e
     e50:	80 81       	ld	r24, Z
     e52:	91 81       	ldd	r25, Z+1	; 0x01
     e54:	89 2b       	or	r24, r25
     e56:	29 f4       	brne	.+10     	; 0xe62 <xQueueSemaphoreTake+0x4e>
     e58:	0e 94 32 13 	call	0x2664	; 0x2664 <pvTaskIncrementMutexHeldCount>
     e5c:	f8 01       	movw	r30, r16
     e5e:	95 83       	std	Z+5, r25	; 0x05
     e60:	84 83       	std	Z+4, r24	; 0x04
     e62:	f8 01       	movw	r30, r16
     e64:	80 85       	ldd	r24, Z+8	; 0x08
     e66:	88 23       	and	r24, r24
     e68:	31 f0       	breq	.+12     	; 0xe76 <xQueueSemaphoreTake+0x62>
     e6a:	c8 01       	movw	r24, r16
     e6c:	08 96       	adiw	r24, 0x08	; 8
     e6e:	0e 94 96 10 	call	0x212c	; 0x212c <xTaskRemoveFromEventList>
     e72:	81 11       	cpse	r24, r1
     e74:	3d dc       	rcall	.-1926   	; 0x6f0 <vPortYield>
     e76:	0f 90       	pop	r0
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	6f c0       	rjmp	.+222    	; 0xf5c <xQueueSemaphoreTake+0x148>
     e7e:	8e 81       	ldd	r24, Y+6	; 0x06
     e80:	9f 81       	ldd	r25, Y+7	; 0x07
     e82:	a8 85       	ldd	r26, Y+8	; 0x08
     e84:	b9 85       	ldd	r27, Y+9	; 0x09
     e86:	89 2b       	or	r24, r25
     e88:	8a 2b       	or	r24, r26
     e8a:	8b 2b       	or	r24, r27
     e8c:	21 f4       	brne	.+8      	; 0xe96 <xQueueSemaphoreTake+0x82>
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	63 c0       	rjmp	.+198    	; 0xf5c <xQueueSemaphoreTake+0x148>
     e96:	f1 10       	cpse	r15, r1
     e98:	06 c0       	rjmp	.+12     	; 0xea6 <xQueueSemaphoreTake+0x92>
     e9a:	ce 01       	movw	r24, r28
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <vTaskInternalSetTimeOutState>
     ea2:	ff 24       	eor	r15, r15
     ea4:	f3 94       	inc	r15
     ea6:	0f 90       	pop	r0
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	4b d6       	rcall	.+3222   	; 0x1b42 <vTaskSuspendAll>
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	0f 92       	push	r0
     eb2:	f8 01       	movw	r30, r16
     eb4:	81 a1       	ldd	r24, Z+33	; 0x21
     eb6:	8f 3f       	cpi	r24, 0xFF	; 255
     eb8:	09 f4       	brne	.+2      	; 0xebc <xQueueSemaphoreTake+0xa8>
     eba:	11 a2       	std	Z+33, r1	; 0x21
     ebc:	f8 01       	movw	r30, r16
     ebe:	82 a1       	ldd	r24, Z+34	; 0x22
     ec0:	8f 3f       	cpi	r24, 0xFF	; 255
     ec2:	09 f4       	brne	.+2      	; 0xec6 <xQueueSemaphoreTake+0xb2>
     ec4:	12 a2       	std	Z+34, r1	; 0x22
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	be 01       	movw	r22, r28
     ecc:	6a 5f       	subi	r22, 0xFA	; 250
     ece:	7f 4f       	sbci	r23, 0xFF	; 255
     ed0:	ce 01       	movw	r24, r28
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <xTaskCheckForTimeOut>
     ed8:	81 11       	cpse	r24, r1
     eda:	26 c0       	rjmp	.+76     	; 0xf28 <xQueueSemaphoreTake+0x114>
     edc:	c8 01       	movw	r24, r16
     ede:	e0 dc       	rcall	.-1600   	; 0x8a0 <prvIsQueueEmpty>
     ee0:	88 23       	and	r24, r24
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <xQueueSemaphoreTake+0x10c>
     ee4:	f8 01       	movw	r30, r16
     ee6:	80 81       	ld	r24, Z
     ee8:	91 81       	ldd	r25, Z+1	; 0x01
     eea:	89 2b       	or	r24, r25
     eec:	51 f4       	brne	.+20     	; 0xf02 <xQueueSemaphoreTake+0xee>
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	0f 92       	push	r0
     ef4:	84 81       	ldd	r24, Z+4	; 0x04
     ef6:	95 81       	ldd	r25, Z+5	; 0x05
     ef8:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <xTaskPriorityInherit>
     efc:	e8 2e       	mov	r14, r24
     efe:	0f 90       	pop	r0
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	4e 81       	ldd	r20, Y+6	; 0x06
     f04:	5f 81       	ldd	r21, Y+7	; 0x07
     f06:	68 85       	ldd	r22, Y+8	; 0x08
     f08:	79 85       	ldd	r23, Y+9	; 0x09
     f0a:	c8 01       	movw	r24, r16
     f0c:	43 96       	adiw	r24, 0x13	; 19
     f0e:	0e 94 3d 10 	call	0x207a	; 0x207a <vTaskPlaceOnEventList>
     f12:	c8 01       	movw	r24, r16
     f14:	59 dd       	rcall	.-1358   	; 0x9c8 <prvUnlockQueue>
     f16:	55 d7       	rcall	.+3754   	; 0x1dc2 <xTaskResumeAll>
     f18:	81 11       	cpse	r24, r1
     f1a:	91 cf       	rjmp	.-222    	; 0xe3e <xQueueSemaphoreTake+0x2a>
     f1c:	e9 db       	rcall	.-2094   	; 0x6f0 <vPortYield>
     f1e:	8f cf       	rjmp	.-226    	; 0xe3e <xQueueSemaphoreTake+0x2a>
     f20:	c8 01       	movw	r24, r16
     f22:	52 dd       	rcall	.-1372   	; 0x9c8 <prvUnlockQueue>
     f24:	4e d7       	rcall	.+3740   	; 0x1dc2 <xTaskResumeAll>
     f26:	8b cf       	rjmp	.-234    	; 0xe3e <xQueueSemaphoreTake+0x2a>
     f28:	c8 01       	movw	r24, r16
     f2a:	4e dd       	rcall	.-1380   	; 0x9c8 <prvUnlockQueue>
     f2c:	4a d7       	rcall	.+3732   	; 0x1dc2 <xTaskResumeAll>
     f2e:	c8 01       	movw	r24, r16
     f30:	b7 dc       	rcall	.-1682   	; 0x8a0 <prvIsQueueEmpty>
     f32:	88 23       	and	r24, r24
     f34:	09 f4       	brne	.+2      	; 0xf38 <xQueueSemaphoreTake+0x124>
     f36:	83 cf       	rjmp	.-250    	; 0xe3e <xQueueSemaphoreTake+0x2a>
     f38:	ee 20       	and	r14, r14
     f3a:	79 f0       	breq	.+30     	; 0xf5a <xQueueSemaphoreTake+0x146>
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	0f 92       	push	r0
     f42:	c8 01       	movw	r24, r16
     f44:	9d dc       	rcall	.-1734   	; 0x880 <prvGetDisinheritPriorityAfterTimeout>
     f46:	68 2f       	mov	r22, r24
     f48:	f8 01       	movw	r30, r16
     f4a:	84 81       	ldd	r24, Z+4	; 0x04
     f4c:	95 81       	ldd	r25, Z+5	; 0x05
     f4e:	0e 94 cb 12 	call	0x2596	; 0x2596 <vTaskPriorityDisinheritAfterTimeout>
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	01 c0       	rjmp	.+2      	; 0xf5c <xQueueSemaphoreTake+0x148>
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	29 96       	adiw	r28, 0x09	; 9
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	08 95       	ret

00000f76 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	0f 92       	push	r0
     f82:	89 a1       	ldd	r24, Y+33	; 0x21
     f84:	8f 3f       	cpi	r24, 0xFF	; 255
     f86:	09 f4       	brne	.+2      	; 0xf8a <vQueueWaitForMessageRestricted+0x14>
     f88:	19 a2       	std	Y+33, r1	; 0x21
     f8a:	8a a1       	ldd	r24, Y+34	; 0x22
     f8c:	8f 3f       	cpi	r24, 0xFF	; 255
     f8e:	09 f4       	brne	.+2      	; 0xf92 <vQueueWaitForMessageRestricted+0x1c>
     f90:	1a a2       	std	Y+34, r1	; 0x22
     f92:	0f 90       	pop	r0
     f94:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     f96:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f98:	81 11       	cpse	r24, r1
     f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     f9c:	ce 01       	movw	r24, r28
     f9e:	43 96       	adiw	r24, 0x13	; 19
     fa0:	0e 94 54 10 	call	0x20a8	; 0x20a8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     fa4:	ce 01       	movw	r24, r28
     fa6:	10 dd       	rcall	.-1504   	; 0x9c8 <prvUnlockQueue>
    }
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	08 95       	ret

00000fae <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     fae:	fc 01       	movw	r30, r24
     fb0:	44 81       	ldd	r20, Z+4	; 0x04
     fb2:	55 81       	ldd	r21, Z+5	; 0x05
     fb4:	22 81       	ldd	r18, Z+2	; 0x02
     fb6:	33 81       	ldd	r19, Z+3	; 0x03
     fb8:	24 0f       	add	r18, r20
     fba:	35 1f       	adc	r19, r21
     fbc:	80 81       	ld	r24, Z
     fbe:	91 81       	ldd	r25, Z+1	; 0x01
     fc0:	b9 01       	movw	r22, r18
     fc2:	68 1b       	sub	r22, r24
     fc4:	79 0b       	sbc	r23, r25
     fc6:	cb 01       	movw	r24, r22
     fc8:	64 17       	cp	r22, r20
     fca:	75 07       	cpc	r23, r21
     fcc:	10 f0       	brcs	.+4      	; 0xfd2 <prvBytesInBuffer+0x24>
     fce:	84 1b       	sub	r24, r20
     fd0:	95 0b       	sbc	r25, r21
     fd2:	08 95       	ret

00000fd4 <prvInitialiseNewStreamBuffer>:
     fd4:	0f 93       	push	r16
     fd6:	fc 01       	movw	r30, r24
     fd8:	8f e0       	ldi	r24, 0x0F	; 15
     fda:	df 01       	movw	r26, r30
     fdc:	1d 92       	st	X+, r1
     fde:	8a 95       	dec	r24
     fe0:	e9 f7       	brne	.-6      	; 0xfdc <prvInitialiseNewStreamBuffer+0x8>
     fe2:	75 87       	std	Z+13, r23	; 0x0d
     fe4:	64 87       	std	Z+12, r22	; 0x0c
     fe6:	55 83       	std	Z+5, r21	; 0x05
     fe8:	44 83       	std	Z+4, r20	; 0x04
     fea:	37 83       	std	Z+7, r19	; 0x07
     fec:	26 83       	std	Z+6, r18	; 0x06
     fee:	06 87       	std	Z+14, r16	; 0x0e
     ff0:	0f 91       	pop	r16
     ff2:	08 95       	ret

00000ff4 <prvWriteBytesToBuffer>:
     ff4:	af 92       	push	r10
     ff6:	bf 92       	push	r11
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	6c 01       	movw	r12, r24
    100a:	5b 01       	movw	r10, r22
    100c:	7a 01       	movw	r14, r20
    100e:	fc 01       	movw	r30, r24
    1010:	c2 81       	ldd	r28, Z+2	; 0x02
    1012:	d3 81       	ldd	r29, Z+3	; 0x03
    1014:	04 81       	ldd	r16, Z+4	; 0x04
    1016:	15 81       	ldd	r17, Z+5	; 0x05
    1018:	0c 1b       	sub	r16, r28
    101a:	1d 0b       	sbc	r17, r29
    101c:	40 17       	cp	r20, r16
    101e:	51 07       	cpc	r21, r17
    1020:	08 f4       	brcc	.+2      	; 0x1024 <__EEPROM_REGION_LENGTH__+0x24>
    1022:	8a 01       	movw	r16, r20
    1024:	f6 01       	movw	r30, r12
    1026:	84 85       	ldd	r24, Z+12	; 0x0c
    1028:	95 85       	ldd	r25, Z+13	; 0x0d
    102a:	a8 01       	movw	r20, r16
    102c:	b5 01       	movw	r22, r10
    102e:	8c 0f       	add	r24, r28
    1030:	9d 1f       	adc	r25, r29
    1032:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <memcpy>
    1036:	0e 15       	cp	r16, r14
    1038:	1f 05       	cpc	r17, r15
    103a:	58 f4       	brcc	.+22     	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>
    103c:	a7 01       	movw	r20, r14
    103e:	40 1b       	sub	r20, r16
    1040:	51 0b       	sbc	r21, r17
    1042:	b5 01       	movw	r22, r10
    1044:	60 0f       	add	r22, r16
    1046:	71 1f       	adc	r23, r17
    1048:	f6 01       	movw	r30, r12
    104a:	84 85       	ldd	r24, Z+12	; 0x0c
    104c:	95 85       	ldd	r25, Z+13	; 0x0d
    104e:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <memcpy>
    1052:	ce 01       	movw	r24, r28
    1054:	8e 0d       	add	r24, r14
    1056:	9f 1d       	adc	r25, r15
    1058:	f6 01       	movw	r30, r12
    105a:	24 81       	ldd	r18, Z+4	; 0x04
    105c:	35 81       	ldd	r19, Z+5	; 0x05
    105e:	82 17       	cp	r24, r18
    1060:	93 07       	cpc	r25, r19
    1062:	10 f0       	brcs	.+4      	; 0x1068 <__EEPROM_REGION_LENGTH__+0x68>
    1064:	82 1b       	sub	r24, r18
    1066:	93 0b       	sbc	r25, r19
    1068:	f6 01       	movw	r30, r12
    106a:	93 83       	std	Z+3, r25	; 0x03
    106c:	82 83       	std	Z+2, r24	; 0x02
    106e:	c7 01       	movw	r24, r14
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	ff 90       	pop	r15
    107a:	ef 90       	pop	r14
    107c:	df 90       	pop	r13
    107e:	cf 90       	pop	r12
    1080:	bf 90       	pop	r11
    1082:	af 90       	pop	r10
    1084:	08 95       	ret

00001086 <prvWriteMessageToBuffer>:
    1086:	cf 92       	push	r12
    1088:	df 92       	push	r13
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	1f 92       	push	r1
    1098:	1f 92       	push	r1
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	7c 01       	movw	r14, r24
    10a0:	6b 01       	movw	r12, r22
    10a2:	5a 83       	std	Y+2, r21	; 0x02
    10a4:	49 83       	std	Y+1, r20	; 0x01
    10a6:	21 15       	cp	r18, r1
    10a8:	31 05       	cpc	r19, r1
    10aa:	c1 f0       	breq	.+48     	; 0x10dc <prvWriteMessageToBuffer+0x56>
    10ac:	fc 01       	movw	r30, r24
    10ae:	86 85       	ldd	r24, Z+14	; 0x0e
    10b0:	80 fd       	sbrc	r24, 0
    10b2:	08 c0       	rjmp	.+16     	; 0x10c4 <prvWriteMessageToBuffer+0x3e>
    10b4:	42 17       	cp	r20, r18
    10b6:	53 07       	cpc	r21, r19
    10b8:	08 f4       	brcc	.+2      	; 0x10bc <prvWriteMessageToBuffer+0x36>
    10ba:	9a 01       	movw	r18, r20
    10bc:	3a 83       	std	Y+2, r19	; 0x02
    10be:	29 83       	std	Y+1, r18	; 0x01
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	0f c0       	rjmp	.+30     	; 0x10e2 <prvWriteMessageToBuffer+0x5c>
    10c4:	20 17       	cp	r18, r16
    10c6:	31 07       	cpc	r19, r17
    10c8:	58 f0       	brcs	.+22     	; 0x10e0 <prvWriteMessageToBuffer+0x5a>
    10ca:	42 e0       	ldi	r20, 0x02	; 2
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	be 01       	movw	r22, r28
    10d0:	6f 5f       	subi	r22, 0xFF	; 255
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	c7 01       	movw	r24, r14
    10d6:	8e df       	rcall	.-228    	; 0xff4 <prvWriteBytesToBuffer>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	03 c0       	rjmp	.+6      	; 0x10e2 <prvWriteMessageToBuffer+0x5c>
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <prvWriteMessageToBuffer+0x5c>
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	88 23       	and	r24, r24
    10e4:	31 f0       	breq	.+12     	; 0x10f2 <prvWriteMessageToBuffer+0x6c>
    10e6:	49 81       	ldd	r20, Y+1	; 0x01
    10e8:	5a 81       	ldd	r21, Y+2	; 0x02
    10ea:	b6 01       	movw	r22, r12
    10ec:	c7 01       	movw	r24, r14
    10ee:	82 df       	rcall	.-252    	; 0xff4 <prvWriteBytesToBuffer>
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <prvWriteMessageToBuffer+0x70>
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	df 90       	pop	r13
    1108:	cf 90       	pop	r12
    110a:	08 95       	ret

0000110c <prvReadBytesFromBuffer>:
    110c:	af 92       	push	r10
    110e:	bf 92       	push	r11
    1110:	cf 92       	push	r12
    1112:	df 92       	push	r13
    1114:	ef 92       	push	r14
    1116:	ff 92       	push	r15
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	7c 01       	movw	r14, r24
    1122:	5b 01       	movw	r10, r22
    1124:	e9 01       	movw	r28, r18
    1126:	42 17       	cp	r20, r18
    1128:	53 07       	cpc	r21, r19
    112a:	08 f4       	brcc	.+2      	; 0x112e <prvReadBytesFromBuffer+0x22>
    112c:	ea 01       	movw	r28, r20
    112e:	20 97       	sbiw	r28, 0x00	; 0
    1130:	81 f1       	breq	.+96     	; 0x1192 <prvReadBytesFromBuffer+0x86>
    1132:	f7 01       	movw	r30, r14
    1134:	00 81       	ld	r16, Z
    1136:	11 81       	ldd	r17, Z+1	; 0x01
    1138:	84 81       	ldd	r24, Z+4	; 0x04
    113a:	95 81       	ldd	r25, Z+5	; 0x05
    113c:	80 1b       	sub	r24, r16
    113e:	91 0b       	sbc	r25, r17
    1140:	6e 01       	movw	r12, r28
    1142:	8c 17       	cp	r24, r28
    1144:	9d 07       	cpc	r25, r29
    1146:	08 f4       	brcc	.+2      	; 0x114a <prvReadBytesFromBuffer+0x3e>
    1148:	6c 01       	movw	r12, r24
    114a:	f7 01       	movw	r30, r14
    114c:	64 85       	ldd	r22, Z+12	; 0x0c
    114e:	75 85       	ldd	r23, Z+13	; 0x0d
    1150:	60 0f       	add	r22, r16
    1152:	71 1f       	adc	r23, r17
    1154:	a6 01       	movw	r20, r12
    1156:	c5 01       	movw	r24, r10
    1158:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <memcpy>
    115c:	cc 16       	cp	r12, r28
    115e:	dd 06       	cpc	r13, r29
    1160:	58 f4       	brcc	.+22     	; 0x1178 <prvReadBytesFromBuffer+0x6c>
    1162:	ae 01       	movw	r20, r28
    1164:	4c 19       	sub	r20, r12
    1166:	5d 09       	sbc	r21, r13
    1168:	f7 01       	movw	r30, r14
    116a:	64 85       	ldd	r22, Z+12	; 0x0c
    116c:	75 85       	ldd	r23, Z+13	; 0x0d
    116e:	c5 01       	movw	r24, r10
    1170:	8c 0d       	add	r24, r12
    1172:	9d 1d       	adc	r25, r13
    1174:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <memcpy>
    1178:	0c 0f       	add	r16, r28
    117a:	1d 1f       	adc	r17, r29
    117c:	f7 01       	movw	r30, r14
    117e:	84 81       	ldd	r24, Z+4	; 0x04
    1180:	95 81       	ldd	r25, Z+5	; 0x05
    1182:	08 17       	cp	r16, r24
    1184:	19 07       	cpc	r17, r25
    1186:	10 f0       	brcs	.+4      	; 0x118c <prvReadBytesFromBuffer+0x80>
    1188:	08 1b       	sub	r16, r24
    118a:	19 0b       	sbc	r17, r25
    118c:	f7 01       	movw	r30, r14
    118e:	11 83       	std	Z+1, r17	; 0x01
    1190:	00 83       	st	Z, r16
    1192:	ce 01       	movw	r24, r28
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	df 90       	pop	r13
    11a2:	cf 90       	pop	r12
    11a4:	bf 90       	pop	r11
    11a6:	af 90       	pop	r10
    11a8:	08 95       	ret

000011aa <prvReadMessageFromBuffer>:
    11aa:	6f 92       	push	r6
    11ac:	7f 92       	push	r7
    11ae:	8f 92       	push	r8
    11b0:	9f 92       	push	r9
    11b2:	af 92       	push	r10
    11b4:	bf 92       	push	r11
    11b6:	cf 92       	push	r12
    11b8:	df 92       	push	r13
    11ba:	ef 92       	push	r14
    11bc:	ff 92       	push	r15
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	1f 92       	push	r1
    11c8:	1f 92       	push	r1
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	6c 01       	movw	r12, r24
    11d0:	4b 01       	movw	r8, r22
    11d2:	5a 01       	movw	r10, r20
    11d4:	79 01       	movw	r14, r18
    11d6:	01 15       	cp	r16, r1
    11d8:	11 05       	cpc	r17, r1
    11da:	b1 f0       	breq	.+44     	; 0x1208 <prvReadMessageFromBuffer+0x5e>
    11dc:	fc 01       	movw	r30, r24
    11de:	60 80       	ld	r6, Z
    11e0:	71 80       	ldd	r7, Z+1	; 0x01
    11e2:	a8 01       	movw	r20, r16
    11e4:	be 01       	movw	r22, r28
    11e6:	6f 5f       	subi	r22, 0xFF	; 255
    11e8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ea:	90 df       	rcall	.-224    	; 0x110c <prvReadBytesFromBuffer>
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	e0 1a       	sub	r14, r16
    11f2:	f1 0a       	sbc	r15, r17
    11f4:	a8 16       	cp	r10, r24
    11f6:	b9 06       	cpc	r11, r25
    11f8:	30 f4       	brcc	.+12     	; 0x1206 <prvReadMessageFromBuffer+0x5c>
    11fa:	f6 01       	movw	r30, r12
    11fc:	71 82       	std	Z+1, r7	; 0x01
    11fe:	60 82       	st	Z, r6
    1200:	a1 2c       	mov	r10, r1
    1202:	b1 2c       	mov	r11, r1
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <prvReadMessageFromBuffer+0x5e>
    1206:	5c 01       	movw	r10, r24
    1208:	97 01       	movw	r18, r14
    120a:	a5 01       	movw	r20, r10
    120c:	b4 01       	movw	r22, r8
    120e:	c6 01       	movw	r24, r12
    1210:	7d df       	rcall	.-262    	; 0x110c <prvReadBytesFromBuffer>
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	0f 91       	pop	r16
    121e:	ff 90       	pop	r15
    1220:	ef 90       	pop	r14
    1222:	df 90       	pop	r13
    1224:	cf 90       	pop	r12
    1226:	bf 90       	pop	r11
    1228:	af 90       	pop	r10
    122a:	9f 90       	pop	r9
    122c:	8f 90       	pop	r8
    122e:	7f 90       	pop	r7
    1230:	6f 90       	pop	r6
    1232:	08 95       	ret

00001234 <xStreamBufferGenericCreate>:
    1234:	cf 92       	push	r12
    1236:	df 92       	push	r13
    1238:	ef 92       	push	r14
    123a:	ff 92       	push	r15
    123c:	0f 93       	push	r16
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	ec 01       	movw	r28, r24
    1244:	6b 01       	movw	r12, r22
    1246:	41 30       	cpi	r20, 0x01	; 1
    1248:	11 f4       	brne	.+4      	; 0x124e <xStreamBufferGenericCreate+0x1a>
    124a:	01 e0       	ldi	r16, 0x01	; 1
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <xStreamBufferGenericCreate+0x1c>
    124e:	00 e0       	ldi	r16, 0x00	; 0
    1250:	c1 14       	cp	r12, r1
    1252:	d1 04       	cpc	r13, r1
    1254:	19 f4       	brne	.+6      	; 0x125c <xStreamBufferGenericCreate+0x28>
    1256:	cc 24       	eor	r12, r12
    1258:	c3 94       	inc	r12
    125a:	d1 2c       	mov	r13, r1
    125c:	ce 01       	movw	r24, r28
    125e:	40 96       	adiw	r24, 0x10	; 16
    1260:	c8 17       	cp	r28, r24
    1262:	d9 07       	cpc	r29, r25
    1264:	20 f4       	brcc	.+8      	; 0x126e <xStreamBufferGenericCreate+0x3a>
    1266:	21 96       	adiw	r28, 0x01	; 1
    1268:	8f d8       	rcall	.-3810   	; 0x388 <pvPortMalloc>
    126a:	7c 01       	movw	r14, r24
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <xStreamBufferGenericCreate+0x3e>
    126e:	e1 2c       	mov	r14, r1
    1270:	f1 2c       	mov	r15, r1
    1272:	e1 14       	cp	r14, r1
    1274:	f1 04       	cpc	r15, r1
    1276:	39 f0       	breq	.+14     	; 0x1286 <xStreamBufferGenericCreate+0x52>
    1278:	96 01       	movw	r18, r12
    127a:	ae 01       	movw	r20, r28
    127c:	b7 01       	movw	r22, r14
    127e:	61 5f       	subi	r22, 0xF1	; 241
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	c7 01       	movw	r24, r14
    1284:	a7 de       	rcall	.-690    	; 0xfd4 <prvInitialiseNewStreamBuffer>
    1286:	c7 01       	movw	r24, r14
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	0f 91       	pop	r16
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	df 90       	pop	r13
    1294:	cf 90       	pop	r12
    1296:	08 95       	ret

00001298 <xStreamBufferReset>:
    1298:	0f 93       	push	r16
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	0f 92       	push	r0
    12a0:	fc 01       	movw	r30, r24
    12a2:	20 85       	ldd	r18, Z+8	; 0x08
    12a4:	31 85       	ldd	r19, Z+9	; 0x09
    12a6:	23 2b       	or	r18, r19
    12a8:	71 f4       	brne	.+28     	; 0x12c6 <xStreamBufferReset+0x2e>
    12aa:	22 85       	ldd	r18, Z+10	; 0x0a
    12ac:	33 85       	ldd	r19, Z+11	; 0x0b
    12ae:	23 2b       	or	r18, r19
    12b0:	61 f4       	brne	.+24     	; 0x12ca <xStreamBufferReset+0x32>
    12b2:	26 81       	ldd	r18, Z+6	; 0x06
    12b4:	37 81       	ldd	r19, Z+7	; 0x07
    12b6:	44 81       	ldd	r20, Z+4	; 0x04
    12b8:	55 81       	ldd	r21, Z+5	; 0x05
    12ba:	64 85       	ldd	r22, Z+12	; 0x0c
    12bc:	75 85       	ldd	r23, Z+13	; 0x0d
    12be:	06 85       	ldd	r16, Z+14	; 0x0e
    12c0:	89 de       	rcall	.-750    	; 0xfd4 <prvInitialiseNewStreamBuffer>
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	03 c0       	rjmp	.+6      	; 0x12cc <xStreamBufferReset+0x34>
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <xStreamBufferReset+0x34>
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	0f 91       	pop	r16
    12d2:	08 95       	ret

000012d4 <xStreamBufferSpacesAvailable>:
    12d4:	fc 01       	movw	r30, r24
    12d6:	24 81       	ldd	r18, Z+4	; 0x04
    12d8:	35 81       	ldd	r19, Z+5	; 0x05
    12da:	80 81       	ld	r24, Z
    12dc:	91 81       	ldd	r25, Z+1	; 0x01
    12de:	82 0f       	add	r24, r18
    12e0:	93 1f       	adc	r25, r19
    12e2:	42 81       	ldd	r20, Z+2	; 0x02
    12e4:	53 81       	ldd	r21, Z+3	; 0x03
    12e6:	84 1b       	sub	r24, r20
    12e8:	95 0b       	sbc	r25, r21
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	82 17       	cp	r24, r18
    12ee:	93 07       	cpc	r25, r19
    12f0:	10 f0       	brcs	.+4      	; 0x12f6 <xStreamBufferSpacesAvailable+0x22>
    12f2:	82 1b       	sub	r24, r18
    12f4:	93 0b       	sbc	r25, r19
    12f6:	08 95       	ret

000012f8 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    12f8:	2f 92       	push	r2
    12fa:	3f 92       	push	r3
    12fc:	4f 92       	push	r4
    12fe:	5f 92       	push	r5
    1300:	6f 92       	push	r6
    1302:	7f 92       	push	r7
    1304:	8f 92       	push	r8
    1306:	9f 92       	push	r9
    1308:	af 92       	push	r10
    130a:	bf 92       	push	r11
    130c:	cf 92       	push	r12
    130e:	df 92       	push	r13
    1310:	ef 92       	push	r14
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	2b 97       	sbiw	r28, 0x0b	; 11
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	4c 01       	movw	r8, r24
    132e:	7b 87       	std	Y+11, r23	; 0x0b
    1330:	6a 87       	std	Y+10, r22	; 0x0a
    1332:	1a 01       	movw	r2, r20
    1334:	0e 83       	std	Y+6, r16	; 0x06
    1336:	1f 83       	std	Y+7, r17	; 0x07
    1338:	28 87       	std	Y+8, r18	; 0x08
    133a:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    133c:	fc 01       	movw	r30, r24
    133e:	84 81       	ldd	r24, Z+4	; 0x04
    1340:	95 81       	ldd	r25, Z+5	; 0x05
    1342:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1344:	26 85       	ldd	r18, Z+14	; 0x0e
    1346:	20 ff       	sbrs	r18, 0
    1348:	0c c0       	rjmp	.+24     	; 0x1362 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    134a:	2a 01       	movw	r4, r20
    134c:	f2 e0       	ldi	r31, 0x02	; 2
    134e:	4f 0e       	add	r4, r31
    1350:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1352:	84 15       	cp	r24, r4
    1354:	95 05       	cpc	r25, r5
    1356:	58 f4       	brcc	.+22     	; 0x136e <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1358:	1e 82       	std	Y+6, r1	; 0x06
    135a:	1f 82       	std	Y+7, r1	; 0x07
    135c:	18 86       	std	Y+8, r1	; 0x08
    135e:	19 86       	std	Y+9, r1	; 0x09
    1360:	06 c0       	rjmp	.+12     	; 0x136e <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1362:	84 17       	cp	r24, r20
    1364:	95 07       	cpc	r25, r21
    1366:	10 f0       	brcs	.+4      	; 0x136c <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1368:	2a 01       	movw	r4, r20
    136a:	01 c0       	rjmp	.+2      	; 0x136e <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    136c:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    136e:	8e 81       	ldd	r24, Y+6	; 0x06
    1370:	9f 81       	ldd	r25, Y+7	; 0x07
    1372:	a8 85       	ldd	r26, Y+8	; 0x08
    1374:	b9 85       	ldd	r27, Y+9	; 0x09
    1376:	89 2b       	or	r24, r25
    1378:	8a 2b       	or	r24, r26
    137a:	8b 2b       	or	r24, r27
    137c:	09 f4       	brne	.+2      	; 0x1380 <xStreamBufferSend+0x88>
    137e:	36 c0       	rjmp	.+108    	; 0x13ec <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1380:	ce 01       	movw	r24, r28
    1382:	01 96       	adiw	r24, 0x01	; 1
    1384:	82 d7       	rcall	.+3844   	; 0x228a <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    138c:	c4 01       	movw	r24, r8
    138e:	a2 df       	rcall	.-188    	; 0x12d4 <xStreamBufferSpacesAvailable>
    1390:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1392:	84 15       	cp	r24, r4
    1394:	95 05       	cpc	r25, r5
    1396:	38 f5       	brcc	.+78     	; 0x13e6 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 04 16 	call	0x2c08	; 0x2c08 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    13a2:	0e 94 d6 11 	call	0x23ac	; 0x23ac <xTaskGetCurrentTaskHandle>
    13a6:	f4 01       	movw	r30, r8
    13a8:	93 87       	std	Z+11, r25	; 0x0b
    13aa:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    13ac:	0f 90       	pop	r0
    13ae:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    13b0:	ae 80       	ldd	r10, Y+6	; 0x06
    13b2:	bf 80       	ldd	r11, Y+7	; 0x07
    13b4:	c8 84       	ldd	r12, Y+8	; 0x08
    13b6:	d9 84       	ldd	r13, Y+9	; 0x09
    13b8:	e1 2c       	mov	r14, r1
    13ba:	f1 2c       	mov	r15, r1
    13bc:	00 e0       	ldi	r16, 0x00	; 0
    13be:	10 e0       	ldi	r17, 0x00	; 0
    13c0:	98 01       	movw	r18, r16
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	ba 01       	movw	r22, r20
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	0e 94 44 13 	call	0x2688	; 0x2688 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    13ce:	f4 01       	movw	r30, r8
    13d0:	13 86       	std	Z+11, r1	; 0x0b
    13d2:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    13d4:	be 01       	movw	r22, r28
    13d6:	6a 5f       	subi	r22, 0xFA	; 250
    13d8:	7f 4f       	sbci	r23, 0xFF	; 255
    13da:	ce 01       	movw	r24, r28
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	7c d7       	rcall	.+3832   	; 0x22d8 <xTaskCheckForTimeOut>
    13e0:	88 23       	and	r24, r24
    13e2:	89 f2       	breq	.-94     	; 0x1386 <xStreamBufferSend+0x8e>
    13e4:	05 c0       	rjmp	.+10     	; 0x13f0 <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    13e6:	0f 90       	pop	r0
    13e8:	0f be       	out	0x3f, r0	; 63
                    break;
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    13ec:	61 2c       	mov	r6, r1
    13ee:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    13f0:	61 14       	cp	r6, r1
    13f2:	71 04       	cpc	r7, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    13f4:	19 f4       	brne	.+6      	; 0x13fc <xStreamBufferSend+0x104>
    13f6:	c4 01       	movw	r24, r8
    13f8:	6d df       	rcall	.-294    	; 0x12d4 <xStreamBufferSpacesAvailable>
    13fa:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    13fc:	82 01       	movw	r16, r4
    13fe:	93 01       	movw	r18, r6
    1400:	a1 01       	movw	r20, r2
    1402:	6a 85       	ldd	r22, Y+10	; 0x0a
    1404:	7b 85       	ldd	r23, Y+11	; 0x0b
    1406:	c4 01       	movw	r24, r8
    1408:	3e de       	rcall	.-900    	; 0x1086 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    140a:	6c 01       	movw	r12, r24
    140c:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    140e:	e9 f0       	breq	.+58     	; 0x144a <xStreamBufferSend+0x152>
    1410:	c4 01       	movw	r24, r8
    1412:	cd dd       	rcall	.-1126   	; 0xfae <prvBytesInBuffer>
    1414:	f4 01       	movw	r30, r8
    1416:	26 81       	ldd	r18, Z+6	; 0x06
    1418:	37 81       	ldd	r19, Z+7	; 0x07
    141a:	82 17       	cp	r24, r18
    141c:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    141e:	a8 f0       	brcs	.+42     	; 0x144a <xStreamBufferSend+0x152>
    1420:	90 d3       	rcall	.+1824   	; 0x1b42 <vTaskSuspendAll>
    1422:	f4 01       	movw	r30, r8
    1424:	80 85       	ldd	r24, Z+8	; 0x08
    1426:	91 85       	ldd	r25, Z+9	; 0x09
    1428:	89 2b       	or	r24, r25
    142a:	71 f0       	breq	.+28     	; 0x1448 <xStreamBufferSend+0x150>
    142c:	80 85       	ldd	r24, Z+8	; 0x08
    142e:	91 85       	ldd	r25, Z+9	; 0x09
    1430:	e1 2c       	mov	r14, r1
    1432:	f1 2c       	mov	r15, r1
    1434:	00 e0       	ldi	r16, 0x00	; 0
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	a9 01       	movw	r20, r18
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <xTaskGenericNotify>
    1442:	f4 01       	movw	r30, r8
    1444:	11 86       	std	Z+9, r1	; 0x09
    1446:	10 86       	std	Z+8, r1	; 0x08
    1448:	bc d4       	rcall	.+2424   	; 0x1dc2 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    144a:	c6 01       	movw	r24, r12
    144c:	2b 96       	adiw	r28, 0x0b	; 11
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	ff 90       	pop	r15
    1462:	ef 90       	pop	r14
    1464:	df 90       	pop	r13
    1466:	cf 90       	pop	r12
    1468:	bf 90       	pop	r11
    146a:	af 90       	pop	r10
    146c:	9f 90       	pop	r9
    146e:	8f 90       	pop	r8
    1470:	7f 90       	pop	r7
    1472:	6f 90       	pop	r6
    1474:	5f 90       	pop	r5
    1476:	4f 90       	pop	r4
    1478:	3f 90       	pop	r3
    147a:	2f 90       	pop	r2
    147c:	08 95       	ret

0000147e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    147e:	af 92       	push	r10
    1480:	bf 92       	push	r11
    1482:	cf 92       	push	r12
    1484:	df 92       	push	r13
    1486:	ef 92       	push	r14
    1488:	ff 92       	push	r15
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	ec 01       	movw	r28, r24
    1494:	7b 01       	movw	r14, r22
    1496:	5a 01       	movw	r10, r20
    1498:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    149a:	8e 85       	ldd	r24, Y+14	; 0x0e
    149c:	80 ff       	sbrs	r24, 0
    149e:	04 c0       	rjmp	.+8      	; 0x14a8 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    14a0:	8a 01       	movw	r16, r20
    14a2:	0e 5f       	subi	r16, 0xFE	; 254
    14a4:	1f 4f       	sbci	r17, 0xFF	; 255
    14a6:	01 c0       	rjmp	.+2      	; 0x14aa <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    14a8:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    14aa:	ce 01       	movw	r24, r28
    14ac:	13 df       	rcall	.-474    	; 0x12d4 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    14ae:	9c 01       	movw	r18, r24
    14b0:	a5 01       	movw	r20, r10
    14b2:	b7 01       	movw	r22, r14
    14b4:	ce 01       	movw	r24, r28
    14b6:	e7 dd       	rcall	.-1074   	; 0x1086 <prvWriteMessageToBuffer>
    14b8:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    14ba:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    14bc:	c1 f0       	breq	.+48     	; 0x14ee <xStreamBufferSendFromISR+0x70>
    14be:	ce 01       	movw	r24, r28
    14c0:	76 dd       	rcall	.-1300   	; 0xfae <prvBytesInBuffer>
    14c2:	2e 81       	ldd	r18, Y+6	; 0x06
    14c4:	3f 81       	ldd	r19, Y+7	; 0x07
    14c6:	82 17       	cp	r24, r18
    14c8:	93 07       	cpc	r25, r19
    14ca:	88 f0       	brcs	.+34     	; 0x14ee <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    14cc:	88 85       	ldd	r24, Y+8	; 0x08
    14ce:	99 85       	ldd	r25, Y+9	; 0x09
    14d0:	89 2b       	or	r24, r25
    14d2:	69 f0       	breq	.+26     	; 0x14ee <xStreamBufferSendFromISR+0x70>
    14d4:	88 85       	ldd	r24, Y+8	; 0x08
    14d6:	99 85       	ldd	r25, Y+9	; 0x09
    14d8:	e1 2c       	mov	r14, r1
    14da:	f1 2c       	mov	r15, r1
    14dc:	00 e0       	ldi	r16, 0x00	; 0
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	a9 01       	movw	r20, r18
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <xTaskGenericNotifyFromISR>
    14ea:	19 86       	std	Y+9, r1	; 0x09
    14ec:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    14ee:	c5 01       	movw	r24, r10
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	ff 90       	pop	r15
    14fa:	ef 90       	pop	r14
    14fc:	df 90       	pop	r13
    14fe:	cf 90       	pop	r12
    1500:	bf 90       	pop	r11
    1502:	af 90       	pop	r10
    1504:	08 95       	ret

00001506 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1506:	4f 92       	push	r4
    1508:	5f 92       	push	r5
    150a:	6f 92       	push	r6
    150c:	7f 92       	push	r7
    150e:	8f 92       	push	r8
    1510:	9f 92       	push	r9
    1512:	af 92       	push	r10
    1514:	bf 92       	push	r11
    1516:	cf 92       	push	r12
    1518:	df 92       	push	r13
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	ec 01       	movw	r28, r24
    1528:	2b 01       	movw	r4, r22
    152a:	3a 01       	movw	r6, r20
    152c:	58 01       	movw	r10, r16
    152e:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1530:	8e 85       	ldd	r24, Y+14	; 0x0e
    1532:	80 ff       	sbrs	r24, 0
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1536:	68 94       	set
    1538:	88 24       	eor	r8, r8
    153a:	81 f8       	bld	r8, 1
    153c:	91 2c       	mov	r9, r1
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1540:	81 2c       	mov	r8, r1
    1542:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1544:	a1 14       	cp	r10, r1
    1546:	b1 04       	cpc	r11, r1
    1548:	c1 04       	cpc	r12, r1
    154a:	d1 04       	cpc	r13, r1
    154c:	39 f1       	breq	.+78     	; 0x159c <xStreamBufferReceive+0x96>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1554:	ce 01       	movw	r24, r28
    1556:	2b dd       	rcall	.-1450   	; 0xfae <prvBytesInBuffer>
    1558:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    155a:	88 16       	cp	r8, r24
    155c:	99 06       	cpc	r9, r25
    155e:	40 f0       	brcs	.+16     	; 0x1570 <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e 94 04 16 	call	0x2c08	; 0x2c08 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    156a:	20 d7       	rcall	.+3648   	; 0x23ac <xTaskGetCurrentTaskHandle>
    156c:	99 87       	std	Y+9, r25	; 0x09
    156e:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1570:	0f 90       	pop	r0
    1572:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1574:	8e 14       	cp	r8, r14
    1576:	9f 04       	cpc	r9, r15
    1578:	a0 f0       	brcs	.+40     	; 0x15a2 <xStreamBufferReceive+0x9c>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    157a:	e1 2c       	mov	r14, r1
    157c:	f1 2c       	mov	r15, r1
    157e:	00 e0       	ldi	r16, 0x00	; 0
    1580:	10 e0       	ldi	r17, 0x00	; 0
    1582:	98 01       	movw	r18, r16
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	ba 01       	movw	r22, r20
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	0e 94 44 13 	call	0x2688	; 0x2688 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1590:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1592:	18 86       	std	Y+8, r1	; 0x08
    1594:	ce 01       	movw	r24, r28
    1596:	0b dd       	rcall	.-1514   	; 0xfae <prvBytesInBuffer>
    1598:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    159a:	03 c0       	rjmp	.+6      	; 0x15a2 <xStreamBufferReceive+0x9c>
    159c:	ce 01       	movw	r24, r28
    159e:	07 dd       	rcall	.-1522   	; 0xfae <prvBytesInBuffer>
    15a0:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    15a2:	8e 14       	cp	r8, r14
    15a4:	9f 04       	cpc	r9, r15
    15a6:	e8 f4       	brcc	.+58     	; 0x15e2 <xStreamBufferReceive+0xdc>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    15a8:	84 01       	movw	r16, r8
    15aa:	97 01       	movw	r18, r14
    15ac:	a3 01       	movw	r20, r6
    15ae:	b2 01       	movw	r22, r4
    15b0:	ce 01       	movw	r24, r28
    15b2:	fb dd       	rcall	.-1034   	; 0x11aa <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    15b4:	6c 01       	movw	r12, r24
    15b6:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    15b8:	b1 f0       	breq	.+44     	; 0x15e6 <xStreamBufferReceive+0xe0>
    15ba:	c3 d2       	rcall	.+1414   	; 0x1b42 <vTaskSuspendAll>
    15bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    15be:	9b 85       	ldd	r25, Y+11	; 0x0b
    15c0:	89 2b       	or	r24, r25
    15c2:	69 f0       	breq	.+26     	; 0x15de <xStreamBufferReceive+0xd8>
    15c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    15c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    15c8:	e1 2c       	mov	r14, r1
    15ca:	f1 2c       	mov	r15, r1
    15cc:	00 e0       	ldi	r16, 0x00	; 0
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	a9 01       	movw	r20, r18
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <xTaskGenericNotify>
    15da:	1b 86       	std	Y+11, r1	; 0x0b
    15dc:	1a 86       	std	Y+10, r1	; 0x0a
    15de:	f1 d3       	rcall	.+2018   	; 0x1dc2 <xTaskResumeAll>
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <xStreamBufferReceive+0xe0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    15e2:	c1 2c       	mov	r12, r1
    15e4:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    15e6:	c6 01       	movw	r24, r12
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	df 90       	pop	r13
    15f6:	cf 90       	pop	r12
    15f8:	bf 90       	pop	r11
    15fa:	af 90       	pop	r10
    15fc:	9f 90       	pop	r9
    15fe:	8f 90       	pop	r8
    1600:	7f 90       	pop	r7
    1602:	6f 90       	pop	r6
    1604:	5f 90       	pop	r5
    1606:	4f 90       	pop	r4
    1608:	08 95       	ret

0000160a <prvResetNextTaskUnblockTime>:
    160a:	e0 91 23 13 	lds	r30, 0x1323	; 0x801323 <pxDelayedTaskList>
    160e:	f0 91 24 13 	lds	r31, 0x1324	; 0x801324 <pxDelayedTaskList+0x1>
    1612:	80 81       	ld	r24, Z
    1614:	81 11       	cpse	r24, r1
    1616:	0c c0       	rjmp	.+24     	; 0x1630 <prvResetNextTaskUnblockTime+0x26>
    1618:	8f ef       	ldi	r24, 0xFF	; 255
    161a:	9f ef       	ldi	r25, 0xFF	; 255
    161c:	dc 01       	movw	r26, r24
    161e:	80 93 ed 12 	sts	0x12ED, r24	; 0x8012ed <xNextTaskUnblockTime>
    1622:	90 93 ee 12 	sts	0x12EE, r25	; 0x8012ee <xNextTaskUnblockTime+0x1>
    1626:	a0 93 ef 12 	sts	0x12EF, r26	; 0x8012ef <xNextTaskUnblockTime+0x2>
    162a:	b0 93 f0 12 	sts	0x12F0, r27	; 0x8012f0 <xNextTaskUnblockTime+0x3>
    162e:	08 95       	ret
    1630:	e0 91 23 13 	lds	r30, 0x1323	; 0x801323 <pxDelayedTaskList>
    1634:	f0 91 24 13 	lds	r31, 0x1324	; 0x801324 <pxDelayedTaskList+0x1>
    1638:	07 80       	ldd	r0, Z+7	; 0x07
    163a:	f0 85       	ldd	r31, Z+8	; 0x08
    163c:	e0 2d       	mov	r30, r0
    163e:	80 81       	ld	r24, Z
    1640:	91 81       	ldd	r25, Z+1	; 0x01
    1642:	a2 81       	ldd	r26, Z+2	; 0x02
    1644:	b3 81       	ldd	r27, Z+3	; 0x03
    1646:	80 93 ed 12 	sts	0x12ED, r24	; 0x8012ed <xNextTaskUnblockTime>
    164a:	90 93 ee 12 	sts	0x12EE, r25	; 0x8012ee <xNextTaskUnblockTime+0x1>
    164e:	a0 93 ef 12 	sts	0x12EF, r26	; 0x8012ef <xNextTaskUnblockTime+0x2>
    1652:	b0 93 f0 12 	sts	0x12F0, r27	; 0x8012f0 <xNextTaskUnblockTime+0x3>
    1656:	08 95       	ret

00001658 <prvDeleteTCB>:
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	ec 01       	movw	r28, r24
    165e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1660:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1662:	0e 94 6d 02 	call	0x4da	; 0x4da <vPortFree>
    1666:	ce 01       	movw	r24, r28
    1668:	0e 94 6d 02 	call	0x4da	; 0x4da <vPortFree>
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	08 95       	ret

00001672 <prvInitialiseNewTask>:
    1672:	4f 92       	push	r4
    1674:	5f 92       	push	r5
    1676:	6f 92       	push	r6
    1678:	7f 92       	push	r7
    167a:	8f 92       	push	r8
    167c:	9f 92       	push	r9
    167e:	af 92       	push	r10
    1680:	bf 92       	push	r11
    1682:	cf 92       	push	r12
    1684:	df 92       	push	r13
    1686:	ef 92       	push	r14
    1688:	ff 92       	push	r15
    168a:	0f 93       	push	r16
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	2c 01       	movw	r4, r24
    1692:	5b 01       	movw	r10, r22
    1694:	4a 01       	movw	r8, r20
    1696:	39 01       	movw	r6, r18
    1698:	e6 01       	movw	r28, r12
    169a:	65 ea       	ldi	r22, 0xA5	; 165
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16a2:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <memset>
    16a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16aa:	21 e0       	ldi	r18, 0x01	; 1
    16ac:	82 1a       	sub	r8, r18
    16ae:	91 08       	sbc	r9, r1
    16b0:	88 0e       	add	r8, r24
    16b2:	99 1e       	adc	r9, r25
    16b4:	a1 14       	cp	r10, r1
    16b6:	b1 04       	cpc	r11, r1
    16b8:	89 f4       	brne	.+34     	; 0x16dc <prvInitialiseNewTask+0x6a>
    16ba:	15 c0       	rjmp	.+42     	; 0x16e6 <prvInitialiseNewTask+0x74>
    16bc:	82 2f       	mov	r24, r18
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	f5 01       	movw	r30, r10
    16c2:	e8 0f       	add	r30, r24
    16c4:	f9 1f       	adc	r31, r25
    16c6:	30 81       	ld	r19, Z
    16c8:	de 01       	movw	r26, r28
    16ca:	a8 0f       	add	r26, r24
    16cc:	b9 1f       	adc	r27, r25
    16ce:	5d 96       	adiw	r26, 0x1d	; 29
    16d0:	3c 93       	st	X, r19
    16d2:	80 81       	ld	r24, Z
    16d4:	88 23       	and	r24, r24
    16d6:	29 f0       	breq	.+10     	; 0x16e2 <prvInitialiseNewTask+0x70>
    16d8:	2f 5f       	subi	r18, 0xFF	; 255
    16da:	01 c0       	rjmp	.+2      	; 0x16de <prvInitialiseNewTask+0x6c>
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	20 31       	cpi	r18, 0x10	; 16
    16e0:	68 f3       	brcs	.-38     	; 0x16bc <prvInitialiseNewTask+0x4a>
    16e2:	1c a6       	std	Y+44, r1	; 0x2c
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <prvInitialiseNewTask+0x76>
    16e6:	1d 8e       	std	Y+29, r1	; 0x1d
    16e8:	0a 30       	cpi	r16, 0x0A	; 10
    16ea:	08 f0       	brcs	.+2      	; 0x16ee <prvInitialiseNewTask+0x7c>
    16ec:	09 e0       	ldi	r16, 0x09	; 9
    16ee:	0a 8f       	std	Y+26, r16	; 0x1a
    16f0:	0d a7       	std	Y+45, r16	; 0x2d
    16f2:	1e a6       	std	Y+46, r1	; 0x2e
    16f4:	ce 01       	movw	r24, r28
    16f6:	02 96       	adiw	r24, 0x02	; 2
    16f8:	0e 94 bb 02 	call	0x576	; 0x576 <vListInitialiseItem>
    16fc:	ce 01       	movw	r24, r28
    16fe:	0e 96       	adiw	r24, 0x0e	; 14
    1700:	0e 94 bb 02 	call	0x576	; 0x576 <vListInitialiseItem>
    1704:	db 87       	std	Y+11, r29	; 0x0b
    1706:	ca 87       	std	Y+10, r28	; 0x0a
    1708:	8a e0       	ldi	r24, 0x0A	; 10
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	80 1b       	sub	r24, r16
    1712:	91 09       	sbc	r25, r1
    1714:	a1 09       	sbc	r26, r1
    1716:	b1 09       	sbc	r27, r1
    1718:	8e 87       	std	Y+14, r24	; 0x0e
    171a:	9f 87       	std	Y+15, r25	; 0x0f
    171c:	a8 8b       	std	Y+16, r26	; 0x10
    171e:	b9 8b       	std	Y+17, r27	; 0x11
    1720:	df 8b       	std	Y+23, r29	; 0x17
    1722:	ce 8b       	std	Y+22, r28	; 0x16
    1724:	84 e0       	ldi	r24, 0x04	; 4
    1726:	fe 01       	movw	r30, r28
    1728:	bf 96       	adiw	r30, 0x2f	; 47
    172a:	df 01       	movw	r26, r30
    172c:	1d 92       	st	X+, r1
    172e:	8a 95       	dec	r24
    1730:	e9 f7       	brne	.-6      	; 0x172c <prvInitialiseNewTask+0xba>
    1732:	1b aa       	std	Y+51, r1	; 0x33
    1734:	a3 01       	movw	r20, r6
    1736:	b2 01       	movw	r22, r4
    1738:	c4 01       	movw	r24, r8
    173a:	0e 94 2f 03 	call	0x65e	; 0x65e <pxPortInitialiseStack>
    173e:	99 83       	std	Y+1, r25	; 0x01
    1740:	88 83       	st	Y, r24
    1742:	e1 14       	cp	r14, r1
    1744:	f1 04       	cpc	r15, r1
    1746:	19 f0       	breq	.+6      	; 0x174e <prvInitialiseNewTask+0xdc>
    1748:	f7 01       	movw	r30, r14
    174a:	d1 83       	std	Z+1, r29	; 0x01
    174c:	c0 83       	st	Z, r28
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	0f 91       	pop	r16
    1754:	ff 90       	pop	r15
    1756:	ef 90       	pop	r14
    1758:	df 90       	pop	r13
    175a:	cf 90       	pop	r12
    175c:	bf 90       	pop	r11
    175e:	af 90       	pop	r10
    1760:	9f 90       	pop	r9
    1762:	8f 90       	pop	r8
    1764:	7f 90       	pop	r7
    1766:	6f 90       	pop	r6
    1768:	5f 90       	pop	r5
    176a:	4f 90       	pop	r4
    176c:	08 95       	ret

0000176e <prvInitialiseTaskLists>:
    176e:	cf 93       	push	r28
    1770:	c0 e0       	ldi	r28, 0x00	; 0
    1772:	09 c0       	rjmp	.+18     	; 0x1786 <prvInitialiseTaskLists+0x18>
    1774:	2b e0       	ldi	r18, 0x0B	; 11
    1776:	c2 9f       	mul	r28, r18
    1778:	c0 01       	movw	r24, r0
    177a:	11 24       	eor	r1, r1
    177c:	85 5c       	subi	r24, 0xC5	; 197
    177e:	9c 4e       	sbci	r25, 0xEC	; 236
    1780:	0e 94 aa 02 	call	0x554	; 0x554 <vListInitialise>
    1784:	cf 5f       	subi	r28, 0xFF	; 255
    1786:	ca 30       	cpi	r28, 0x0A	; 10
    1788:	a8 f3       	brcs	.-22     	; 0x1774 <prvInitialiseTaskLists+0x6>
    178a:	80 e3       	ldi	r24, 0x30	; 48
    178c:	93 e1       	ldi	r25, 0x13	; 19
    178e:	0e 94 aa 02 	call	0x554	; 0x554 <vListInitialise>
    1792:	85 e2       	ldi	r24, 0x25	; 37
    1794:	93 e1       	ldi	r25, 0x13	; 19
    1796:	0e 94 aa 02 	call	0x554	; 0x554 <vListInitialise>
    179a:	86 e1       	ldi	r24, 0x16	; 22
    179c:	93 e1       	ldi	r25, 0x13	; 19
    179e:	0e 94 aa 02 	call	0x554	; 0x554 <vListInitialise>
    17a2:	8b e0       	ldi	r24, 0x0B	; 11
    17a4:	93 e1       	ldi	r25, 0x13	; 19
    17a6:	0e 94 aa 02 	call	0x554	; 0x554 <vListInitialise>
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	92 e1       	ldi	r25, 0x12	; 18
    17ae:	0e 94 aa 02 	call	0x554	; 0x554 <vListInitialise>
    17b2:	80 e3       	ldi	r24, 0x30	; 48
    17b4:	93 e1       	ldi	r25, 0x13	; 19
    17b6:	90 93 24 13 	sts	0x1324, r25	; 0x801324 <pxDelayedTaskList+0x1>
    17ba:	80 93 23 13 	sts	0x1323, r24	; 0x801323 <pxDelayedTaskList>
    17be:	85 e2       	ldi	r24, 0x25	; 37
    17c0:	93 e1       	ldi	r25, 0x13	; 19
    17c2:	90 93 22 13 	sts	0x1322, r25	; 0x801322 <pxOverflowDelayedTaskList+0x1>
    17c6:	80 93 21 13 	sts	0x1321, r24	; 0x801321 <pxOverflowDelayedTaskList>
    17ca:	cf 91       	pop	r28
    17cc:	08 95       	ret

000017ce <prvAddNewTaskToReadyList>:
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	ec 01       	movw	r28, r24
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	0f 92       	push	r0
    17da:	80 91 fe 12 	lds	r24, 0x12FE	; 0x8012fe <uxCurrentNumberOfTasks>
    17de:	8f 5f       	subi	r24, 0xFF	; 255
    17e0:	80 93 fe 12 	sts	0x12FE, r24	; 0x8012fe <uxCurrentNumberOfTasks>
    17e4:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    17e8:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    17ec:	89 2b       	or	r24, r25
    17ee:	51 f4       	brne	.+20     	; 0x1804 <prvAddNewTaskToReadyList+0x36>
    17f0:	d0 93 aa 13 	sts	0x13AA, r29	; 0x8013aa <pxCurrentTCB+0x1>
    17f4:	c0 93 a9 13 	sts	0x13A9, r28	; 0x8013a9 <pxCurrentTCB>
    17f8:	80 91 fe 12 	lds	r24, 0x12FE	; 0x8012fe <uxCurrentNumberOfTasks>
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	91 f4       	brne	.+36     	; 0x1824 <prvAddNewTaskToReadyList+0x56>
    1800:	b6 df       	rcall	.-148    	; 0x176e <prvInitialiseTaskLists>
    1802:	10 c0       	rjmp	.+32     	; 0x1824 <prvAddNewTaskToReadyList+0x56>
    1804:	80 91 f8 12 	lds	r24, 0x12F8	; 0x8012f8 <xSchedulerRunning>
    1808:	81 11       	cpse	r24, r1
    180a:	0c c0       	rjmp	.+24     	; 0x1824 <prvAddNewTaskToReadyList+0x56>
    180c:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1810:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    1814:	92 8d       	ldd	r25, Z+26	; 0x1a
    1816:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1818:	89 17       	cp	r24, r25
    181a:	20 f0       	brcs	.+8      	; 0x1824 <prvAddNewTaskToReadyList+0x56>
    181c:	d0 93 aa 13 	sts	0x13AA, r29	; 0x8013aa <pxCurrentTCB+0x1>
    1820:	c0 93 a9 13 	sts	0x13A9, r28	; 0x8013a9 <pxCurrentTCB>
    1824:	80 91 f1 12 	lds	r24, 0x12F1	; 0x8012f1 <uxTaskNumber>
    1828:	8f 5f       	subi	r24, 0xFF	; 255
    182a:	80 93 f1 12 	sts	0x12F1, r24	; 0x8012f1 <uxTaskNumber>
    182e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1830:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    1834:	8e 17       	cp	r24, r30
    1836:	10 f4       	brcc	.+4      	; 0x183c <prvAddNewTaskToReadyList+0x6e>
    1838:	e0 93 f9 12 	sts	0x12F9, r30	; 0x8012f9 <uxTopReadyPriority>
    183c:	8b e0       	ldi	r24, 0x0B	; 11
    183e:	8e 9f       	mul	r24, r30
    1840:	f0 01       	movw	r30, r0
    1842:	11 24       	eor	r1, r1
    1844:	e5 5c       	subi	r30, 0xC5	; 197
    1846:	fc 4e       	sbci	r31, 0xEC	; 236
    1848:	01 80       	ldd	r0, Z+1	; 0x01
    184a:	f2 81       	ldd	r31, Z+2	; 0x02
    184c:	e0 2d       	mov	r30, r0
    184e:	ff 83       	std	Y+7, r31	; 0x07
    1850:	ee 83       	std	Y+6, r30	; 0x06
    1852:	26 81       	ldd	r18, Z+6	; 0x06
    1854:	37 81       	ldd	r19, Z+7	; 0x07
    1856:	39 87       	std	Y+9, r19	; 0x09
    1858:	28 87       	std	Y+8, r18	; 0x08
    185a:	a6 81       	ldd	r26, Z+6	; 0x06
    185c:	b7 81       	ldd	r27, Z+7	; 0x07
    185e:	9e 01       	movw	r18, r28
    1860:	2e 5f       	subi	r18, 0xFE	; 254
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	15 96       	adiw	r26, 0x05	; 5
    1866:	3c 93       	st	X, r19
    1868:	2e 93       	st	-X, r18
    186a:	14 97       	sbiw	r26, 0x04	; 4
    186c:	37 83       	std	Z+7, r19	; 0x07
    186e:	26 83       	std	Z+6, r18	; 0x06
    1870:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1872:	8e 9f       	mul	r24, r30
    1874:	f0 01       	movw	r30, r0
    1876:	11 24       	eor	r1, r1
    1878:	e5 5c       	subi	r30, 0xC5	; 197
    187a:	fc 4e       	sbci	r31, 0xEC	; 236
    187c:	fd 87       	std	Y+13, r31	; 0x0d
    187e:	ec 87       	std	Y+12, r30	; 0x0c
    1880:	80 81       	ld	r24, Z
    1882:	8f 5f       	subi	r24, 0xFF	; 255
    1884:	80 83       	st	Z, r24
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	80 91 f8 12 	lds	r24, 0x12F8	; 0x8012f8 <xSchedulerRunning>
    188e:	88 23       	and	r24, r24
    1890:	51 f0       	breq	.+20     	; 0x18a6 <prvAddNewTaskToReadyList+0xd8>
    1892:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1896:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    189a:	92 8d       	ldd	r25, Z+26	; 0x1a
    189c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    189e:	98 17       	cp	r25, r24
    18a0:	10 f4       	brcc	.+4      	; 0x18a6 <prvAddNewTaskToReadyList+0xd8>
    18a2:	0e 94 78 03 	call	0x6f0	; 0x6f0 <vPortYield>
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	08 95       	ret

000018ac <prvCheckTasksWaitingTermination>:
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	1b c0       	rjmp	.+54     	; 0x18e8 <prvCheckTasksWaitingTermination+0x3c>
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	0f 92       	push	r0
    18b8:	e0 91 12 13 	lds	r30, 0x1312	; 0x801312 <xTasksWaitingTermination+0x7>
    18bc:	f0 91 13 13 	lds	r31, 0x1313	; 0x801313 <xTasksWaitingTermination+0x8>
    18c0:	c0 85       	ldd	r28, Z+8	; 0x08
    18c2:	d1 85       	ldd	r29, Z+9	; 0x09
    18c4:	ce 01       	movw	r24, r28
    18c6:	02 96       	adiw	r24, 0x02	; 2
    18c8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <uxListRemove>
    18cc:	80 91 fe 12 	lds	r24, 0x12FE	; 0x8012fe <uxCurrentNumberOfTasks>
    18d0:	81 50       	subi	r24, 0x01	; 1
    18d2:	80 93 fe 12 	sts	0x12FE, r24	; 0x8012fe <uxCurrentNumberOfTasks>
    18d6:	80 91 0a 13 	lds	r24, 0x130A	; 0x80130a <uxDeletedTasksWaitingCleanUp>
    18da:	81 50       	subi	r24, 0x01	; 1
    18dc:	80 93 0a 13 	sts	0x130A, r24	; 0x80130a <uxDeletedTasksWaitingCleanUp>
    18e0:	0f 90       	pop	r0
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	ce 01       	movw	r24, r28
    18e6:	b8 de       	rcall	.-656    	; 0x1658 <prvDeleteTCB>
    18e8:	80 91 0a 13 	lds	r24, 0x130A	; 0x80130a <uxDeletedTasksWaitingCleanUp>
    18ec:	81 11       	cpse	r24, r1
    18ee:	e1 cf       	rjmp	.-62     	; 0x18b2 <prvCheckTasksWaitingTermination+0x6>
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	08 95       	ret

000018f6 <prvAddCurrentTaskToDelayedList>:
    18f6:	8f 92       	push	r8
    18f8:	9f 92       	push	r9
    18fa:	af 92       	push	r10
    18fc:	bf 92       	push	r11
    18fe:	cf 92       	push	r12
    1900:	df 92       	push	r13
    1902:	ef 92       	push	r14
    1904:	ff 92       	push	r15
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	6b 01       	movw	r12, r22
    190c:	7c 01       	movw	r14, r24
    190e:	c4 2f       	mov	r28, r20
    1910:	80 90 fa 12 	lds	r8, 0x12FA	; 0x8012fa <xTickCount>
    1914:	90 90 fb 12 	lds	r9, 0x12FB	; 0x8012fb <xTickCount+0x1>
    1918:	a0 90 fc 12 	lds	r10, 0x12FC	; 0x8012fc <xTickCount+0x2>
    191c:	b0 90 fd 12 	lds	r11, 0x12FD	; 0x8012fd <xTickCount+0x3>
    1920:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1924:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    1928:	02 96       	adiw	r24, 0x02	; 2
    192a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <uxListRemove>
    192e:	8f ef       	ldi	r24, 0xFF	; 255
    1930:	c8 16       	cp	r12, r24
    1932:	d8 06       	cpc	r13, r24
    1934:	e8 06       	cpc	r14, r24
    1936:	f8 06       	cpc	r15, r24
    1938:	b1 f5       	brne	.+108    	; 0x19a6 <prvAddCurrentTaskToDelayedList+0xb0>
    193a:	cc 23       	and	r28, r28
    193c:	a1 f1       	breq	.+104    	; 0x19a6 <prvAddCurrentTaskToDelayedList+0xb0>
    193e:	ef ef       	ldi	r30, 0xFF	; 255
    1940:	f2 e1       	ldi	r31, 0x12	; 18
    1942:	a1 81       	ldd	r26, Z+1	; 0x01
    1944:	b2 81       	ldd	r27, Z+2	; 0x02
    1946:	c0 91 a9 13 	lds	r28, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    194a:	d0 91 aa 13 	lds	r29, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    194e:	bf 83       	std	Y+7, r27	; 0x07
    1950:	ae 83       	std	Y+6, r26	; 0x06
    1952:	c0 91 a9 13 	lds	r28, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1956:	d0 91 aa 13 	lds	r29, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    195a:	16 96       	adiw	r26, 0x06	; 6
    195c:	8d 91       	ld	r24, X+
    195e:	9c 91       	ld	r25, X
    1960:	17 97       	sbiw	r26, 0x07	; 7
    1962:	99 87       	std	Y+9, r25	; 0x09
    1964:	88 87       	std	Y+8, r24	; 0x08
    1966:	16 96       	adiw	r26, 0x06	; 6
    1968:	cd 91       	ld	r28, X+
    196a:	dc 91       	ld	r29, X
    196c:	17 97       	sbiw	r26, 0x07	; 7
    196e:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1972:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    1976:	02 96       	adiw	r24, 0x02	; 2
    1978:	9d 83       	std	Y+5, r25	; 0x05
    197a:	8c 83       	std	Y+4, r24	; 0x04
    197c:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1980:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    1984:	02 96       	adiw	r24, 0x02	; 2
    1986:	17 96       	adiw	r26, 0x07	; 7
    1988:	9c 93       	st	X, r25
    198a:	8e 93       	st	-X, r24
    198c:	16 97       	sbiw	r26, 0x06	; 6
    198e:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1992:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    1996:	1d 96       	adiw	r26, 0x0d	; 13
    1998:	fc 93       	st	X, r31
    199a:	ee 93       	st	-X, r30
    199c:	1c 97       	sbiw	r26, 0x0c	; 12
    199e:	80 81       	ld	r24, Z
    19a0:	8f 5f       	subi	r24, 0xFF	; 255
    19a2:	80 83       	st	Z, r24
    19a4:	3f c0       	rjmp	.+126    	; 0x1a24 <prvAddCurrentTaskToDelayedList+0x12e>
    19a6:	c8 0c       	add	r12, r8
    19a8:	d9 1c       	adc	r13, r9
    19aa:	ea 1c       	adc	r14, r10
    19ac:	fb 1c       	adc	r15, r11
    19ae:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    19b2:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    19b6:	c2 82       	std	Z+2, r12	; 0x02
    19b8:	d3 82       	std	Z+3, r13	; 0x03
    19ba:	e4 82       	std	Z+4, r14	; 0x04
    19bc:	f5 82       	std	Z+5, r15	; 0x05
    19be:	c8 14       	cp	r12, r8
    19c0:	d9 04       	cpc	r13, r9
    19c2:	ea 04       	cpc	r14, r10
    19c4:	fb 04       	cpc	r15, r11
    19c6:	68 f4       	brcc	.+26     	; 0x19e2 <prvAddCurrentTaskToDelayedList+0xec>
    19c8:	60 91 a9 13 	lds	r22, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    19cc:	70 91 aa 13 	lds	r23, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    19d0:	80 91 21 13 	lds	r24, 0x1321	; 0x801321 <pxOverflowDelayedTaskList>
    19d4:	90 91 22 13 	lds	r25, 0x1322	; 0x801322 <pxOverflowDelayedTaskList+0x1>
    19d8:	6e 5f       	subi	r22, 0xFE	; 254
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	0e 94 bf 02 	call	0x57e	; 0x57e <vListInsert>
    19e0:	21 c0       	rjmp	.+66     	; 0x1a24 <prvAddCurrentTaskToDelayedList+0x12e>
    19e2:	60 91 a9 13 	lds	r22, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    19e6:	70 91 aa 13 	lds	r23, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    19ea:	80 91 23 13 	lds	r24, 0x1323	; 0x801323 <pxDelayedTaskList>
    19ee:	90 91 24 13 	lds	r25, 0x1324	; 0x801324 <pxDelayedTaskList+0x1>
    19f2:	6e 5f       	subi	r22, 0xFE	; 254
    19f4:	7f 4f       	sbci	r23, 0xFF	; 255
    19f6:	0e 94 bf 02 	call	0x57e	; 0x57e <vListInsert>
    19fa:	80 91 ed 12 	lds	r24, 0x12ED	; 0x8012ed <xNextTaskUnblockTime>
    19fe:	90 91 ee 12 	lds	r25, 0x12EE	; 0x8012ee <xNextTaskUnblockTime+0x1>
    1a02:	a0 91 ef 12 	lds	r26, 0x12EF	; 0x8012ef <xNextTaskUnblockTime+0x2>
    1a06:	b0 91 f0 12 	lds	r27, 0x12F0	; 0x8012f0 <xNextTaskUnblockTime+0x3>
    1a0a:	c8 16       	cp	r12, r24
    1a0c:	d9 06       	cpc	r13, r25
    1a0e:	ea 06       	cpc	r14, r26
    1a10:	fb 06       	cpc	r15, r27
    1a12:	40 f4       	brcc	.+16     	; 0x1a24 <prvAddCurrentTaskToDelayedList+0x12e>
    1a14:	c0 92 ed 12 	sts	0x12ED, r12	; 0x8012ed <xNextTaskUnblockTime>
    1a18:	d0 92 ee 12 	sts	0x12EE, r13	; 0x8012ee <xNextTaskUnblockTime+0x1>
    1a1c:	e0 92 ef 12 	sts	0x12EF, r14	; 0x8012ef <xNextTaskUnblockTime+0x2>
    1a20:	f0 92 f0 12 	sts	0x12F0, r15	; 0x8012f0 <xNextTaskUnblockTime+0x3>
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	ff 90       	pop	r15
    1a2a:	ef 90       	pop	r14
    1a2c:	df 90       	pop	r13
    1a2e:	cf 90       	pop	r12
    1a30:	bf 90       	pop	r11
    1a32:	af 90       	pop	r10
    1a34:	9f 90       	pop	r9
    1a36:	8f 90       	pop	r8
    1a38:	08 95       	ret

00001a3a <xTaskCreate>:
    1a3a:	2f 92       	push	r2
    1a3c:	3f 92       	push	r3
    1a3e:	4f 92       	push	r4
    1a40:	5f 92       	push	r5
    1a42:	6f 92       	push	r6
    1a44:	7f 92       	push	r7
    1a46:	8f 92       	push	r8
    1a48:	9f 92       	push	r9
    1a4a:	af 92       	push	r10
    1a4c:	bf 92       	push	r11
    1a4e:	cf 92       	push	r12
    1a50:	df 92       	push	r13
    1a52:	ef 92       	push	r14
    1a54:	ff 92       	push	r15
    1a56:	0f 93       	push	r16
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	3c 01       	movw	r6, r24
    1a5e:	1b 01       	movw	r2, r22
    1a60:	4a 01       	movw	r8, r20
    1a62:	29 01       	movw	r4, r18
    1a64:	ca 01       	movw	r24, r20
    1a66:	0e 94 c4 01 	call	0x388	; 0x388 <pvPortMalloc>
    1a6a:	6c 01       	movw	r12, r24
    1a6c:	89 2b       	or	r24, r25
    1a6e:	71 f0       	breq	.+28     	; 0x1a8c <xTaskCreate+0x52>
    1a70:	84 e3       	ldi	r24, 0x34	; 52
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0e 94 c4 01 	call	0x388	; 0x388 <pvPortMalloc>
    1a78:	ec 01       	movw	r28, r24
    1a7a:	89 2b       	or	r24, r25
    1a7c:	19 f0       	breq	.+6      	; 0x1a84 <xTaskCreate+0x4a>
    1a7e:	dc 8e       	std	Y+28, r13	; 0x1c
    1a80:	cb 8e       	std	Y+27, r12	; 0x1b
    1a82:	06 c0       	rjmp	.+12     	; 0x1a90 <xTaskCreate+0x56>
    1a84:	c6 01       	movw	r24, r12
    1a86:	0e 94 6d 02 	call	0x4da	; 0x4da <vPortFree>
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <xTaskCreate+0x56>
    1a8c:	c0 e0       	ldi	r28, 0x00	; 0
    1a8e:	d0 e0       	ldi	r29, 0x00	; 0
    1a90:	20 97       	sbiw	r28, 0x00	; 0
    1a92:	61 f0       	breq	.+24     	; 0x1aac <xTaskCreate+0x72>
    1a94:	a1 2c       	mov	r10, r1
    1a96:	b1 2c       	mov	r11, r1
    1a98:	6e 01       	movw	r12, r28
    1a9a:	92 01       	movw	r18, r4
    1a9c:	a4 01       	movw	r20, r8
    1a9e:	b1 01       	movw	r22, r2
    1aa0:	c3 01       	movw	r24, r6
    1aa2:	e7 dd       	rcall	.-1074   	; 0x1672 <prvInitialiseNewTask>
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	93 de       	rcall	.-730    	; 0x17ce <prvAddNewTaskToReadyList>
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <xTaskCreate+0x74>
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	0f 91       	pop	r16
    1ab4:	ff 90       	pop	r15
    1ab6:	ef 90       	pop	r14
    1ab8:	df 90       	pop	r13
    1aba:	cf 90       	pop	r12
    1abc:	bf 90       	pop	r11
    1abe:	af 90       	pop	r10
    1ac0:	9f 90       	pop	r9
    1ac2:	8f 90       	pop	r8
    1ac4:	7f 90       	pop	r7
    1ac6:	6f 90       	pop	r6
    1ac8:	5f 90       	pop	r5
    1aca:	4f 90       	pop	r4
    1acc:	3f 90       	pop	r3
    1ace:	2f 90       	pop	r2
    1ad0:	08 95       	ret

00001ad2 <vTaskStartScheduler>:
    1ad2:	ef 92       	push	r14
    1ad4:	ff 92       	push	r15
    1ad6:	0f 93       	push	r16
    1ad8:	0f 2e       	mov	r0, r31
    1ada:	fb ee       	ldi	r31, 0xEB	; 235
    1adc:	ef 2e       	mov	r14, r31
    1ade:	f2 e1       	ldi	r31, 0x12	; 18
    1ae0:	ff 2e       	mov	r15, r31
    1ae2:	f0 2d       	mov	r31, r0
    1ae4:	00 e0       	ldi	r16, 0x00	; 0
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 ec       	ldi	r20, 0xC0	; 192
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	67 e9       	ldi	r22, 0x97	; 151
    1af0:	72 e0       	ldi	r23, 0x02	; 2
    1af2:	8d ec       	ldi	r24, 0xCD	; 205
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	a1 df       	rcall	.-190    	; 0x1a3a <xTaskCreate>
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	11 f4       	brne	.+4      	; 0x1b00 <vTaskStartScheduler+0x2e>
    1afc:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <xTimerCreateTimerTask>
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	c9 f4       	brne	.+50     	; 0x1b36 <vTaskStartScheduler+0x64>
    1b04:	f8 94       	cli
    1b06:	8f ef       	ldi	r24, 0xFF	; 255
    1b08:	9f ef       	ldi	r25, 0xFF	; 255
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	80 93 ed 12 	sts	0x12ED, r24	; 0x8012ed <xNextTaskUnblockTime>
    1b10:	90 93 ee 12 	sts	0x12EE, r25	; 0x8012ee <xNextTaskUnblockTime+0x1>
    1b14:	a0 93 ef 12 	sts	0x12EF, r26	; 0x8012ef <xNextTaskUnblockTime+0x2>
    1b18:	b0 93 f0 12 	sts	0x12F0, r27	; 0x8012f0 <xNextTaskUnblockTime+0x3>
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	80 93 f8 12 	sts	0x12F8, r24	; 0x8012f8 <xSchedulerRunning>
    1b22:	10 92 fa 12 	sts	0x12FA, r1	; 0x8012fa <xTickCount>
    1b26:	10 92 fb 12 	sts	0x12FB, r1	; 0x8012fb <xTickCount+0x1>
    1b2a:	10 92 fc 12 	sts	0x12FC, r1	; 0x8012fc <xTickCount+0x2>
    1b2e:	10 92 fd 12 	sts	0x12FD, r1	; 0x8012fd <xTickCount+0x3>
    1b32:	0e 94 46 03 	call	0x68c	; 0x68c <xPortStartScheduler>
    1b36:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1b3a:	0f 91       	pop	r16
    1b3c:	ff 90       	pop	r15
    1b3e:	ef 90       	pop	r14
    1b40:	08 95       	ret

00001b42 <vTaskSuspendAll>:
    1b42:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <uxSchedulerSuspended>
    1b46:	8f 5f       	subi	r24, 0xFF	; 255
    1b48:	80 93 ea 12 	sts	0x12EA, r24	; 0x8012ea <uxSchedulerSuspended>
    1b4c:	08 95       	ret

00001b4e <xTaskGetTickCount>:
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	0f 92       	push	r0
    1b54:	60 91 fa 12 	lds	r22, 0x12FA	; 0x8012fa <xTickCount>
    1b58:	70 91 fb 12 	lds	r23, 0x12FB	; 0x8012fb <xTickCount+0x1>
    1b5c:	80 91 fc 12 	lds	r24, 0x12FC	; 0x8012fc <xTickCount+0x2>
    1b60:	90 91 fd 12 	lds	r25, 0x12FD	; 0x8012fd <xTickCount+0x3>
    1b64:	0f 90       	pop	r0
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	08 95       	ret

00001b6a <xTaskIncrementTick>:
    1b6a:	cf 92       	push	r12
    1b6c:	df 92       	push	r13
    1b6e:	ef 92       	push	r14
    1b70:	ff 92       	push	r15
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <uxSchedulerSuspended>
    1b7a:	81 11       	cpse	r24, r1
    1b7c:	05 c1       	rjmp	.+522    	; 0x1d88 <xTaskIncrementTick+0x21e>
    1b7e:	c0 90 fa 12 	lds	r12, 0x12FA	; 0x8012fa <xTickCount>
    1b82:	d0 90 fb 12 	lds	r13, 0x12FB	; 0x8012fb <xTickCount+0x1>
    1b86:	e0 90 fc 12 	lds	r14, 0x12FC	; 0x8012fc <xTickCount+0x2>
    1b8a:	f0 90 fd 12 	lds	r15, 0x12FD	; 0x8012fd <xTickCount+0x3>
    1b8e:	8f ef       	ldi	r24, 0xFF	; 255
    1b90:	c8 1a       	sub	r12, r24
    1b92:	d8 0a       	sbc	r13, r24
    1b94:	e8 0a       	sbc	r14, r24
    1b96:	f8 0a       	sbc	r15, r24
    1b98:	c0 92 fa 12 	sts	0x12FA, r12	; 0x8012fa <xTickCount>
    1b9c:	d0 92 fb 12 	sts	0x12FB, r13	; 0x8012fb <xTickCount+0x1>
    1ba0:	e0 92 fc 12 	sts	0x12FC, r14	; 0x8012fc <xTickCount+0x2>
    1ba4:	f0 92 fd 12 	sts	0x12FD, r15	; 0x8012fd <xTickCount+0x3>
    1ba8:	c1 14       	cp	r12, r1
    1baa:	d1 04       	cpc	r13, r1
    1bac:	e1 04       	cpc	r14, r1
    1bae:	f1 04       	cpc	r15, r1
    1bb0:	b1 f4       	brne	.+44     	; 0x1bde <xTaskIncrementTick+0x74>
    1bb2:	80 91 23 13 	lds	r24, 0x1323	; 0x801323 <pxDelayedTaskList>
    1bb6:	90 91 24 13 	lds	r25, 0x1324	; 0x801324 <pxDelayedTaskList+0x1>
    1bba:	20 91 21 13 	lds	r18, 0x1321	; 0x801321 <pxOverflowDelayedTaskList>
    1bbe:	30 91 22 13 	lds	r19, 0x1322	; 0x801322 <pxOverflowDelayedTaskList+0x1>
    1bc2:	30 93 24 13 	sts	0x1324, r19	; 0x801324 <pxDelayedTaskList+0x1>
    1bc6:	20 93 23 13 	sts	0x1323, r18	; 0x801323 <pxDelayedTaskList>
    1bca:	90 93 22 13 	sts	0x1322, r25	; 0x801322 <pxOverflowDelayedTaskList+0x1>
    1bce:	80 93 21 13 	sts	0x1321, r24	; 0x801321 <pxOverflowDelayedTaskList>
    1bd2:	80 91 f2 12 	lds	r24, 0x12F2	; 0x8012f2 <xNumOfOverflows>
    1bd6:	8f 5f       	subi	r24, 0xFF	; 255
    1bd8:	80 93 f2 12 	sts	0x12F2, r24	; 0x8012f2 <xNumOfOverflows>
    1bdc:	16 dd       	rcall	.-1492   	; 0x160a <prvResetNextTaskUnblockTime>
    1bde:	80 91 ed 12 	lds	r24, 0x12ED	; 0x8012ed <xNextTaskUnblockTime>
    1be2:	90 91 ee 12 	lds	r25, 0x12EE	; 0x8012ee <xNextTaskUnblockTime+0x1>
    1be6:	a0 91 ef 12 	lds	r26, 0x12EF	; 0x8012ef <xNextTaskUnblockTime+0x2>
    1bea:	b0 91 f0 12 	lds	r27, 0x12F0	; 0x8012f0 <xNextTaskUnblockTime+0x3>
    1bee:	c8 16       	cp	r12, r24
    1bf0:	d9 06       	cpc	r13, r25
    1bf2:	ea 06       	cpc	r14, r26
    1bf4:	fb 06       	cpc	r15, r27
    1bf6:	20 f4       	brcc	.+8      	; 0x1c00 <xTaskIncrementTick+0x96>
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	b2 c0       	rjmp	.+356    	; 0x1d60 <xTaskIncrementTick+0x1f6>
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	01 c0       	rjmp	.+2      	; 0x1c02 <xTaskIncrementTick+0x98>
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	e0 91 23 13 	lds	r30, 0x1323	; 0x801323 <pxDelayedTaskList>
    1c06:	f0 91 24 13 	lds	r31, 0x1324	; 0x801324 <pxDelayedTaskList+0x1>
    1c0a:	90 81       	ld	r25, Z
    1c0c:	91 11       	cpse	r25, r1
    1c0e:	0c c0       	rjmp	.+24     	; 0x1c28 <xTaskIncrementTick+0xbe>
    1c10:	4f ef       	ldi	r20, 0xFF	; 255
    1c12:	5f ef       	ldi	r21, 0xFF	; 255
    1c14:	ba 01       	movw	r22, r20
    1c16:	40 93 ed 12 	sts	0x12ED, r20	; 0x8012ed <xNextTaskUnblockTime>
    1c1a:	50 93 ee 12 	sts	0x12EE, r21	; 0x8012ee <xNextTaskUnblockTime+0x1>
    1c1e:	60 93 ef 12 	sts	0x12EF, r22	; 0x8012ef <xNextTaskUnblockTime+0x2>
    1c22:	70 93 f0 12 	sts	0x12F0, r23	; 0x8012f0 <xNextTaskUnblockTime+0x3>
    1c26:	9c c0       	rjmp	.+312    	; 0x1d60 <xTaskIncrementTick+0x1f6>
    1c28:	e0 91 23 13 	lds	r30, 0x1323	; 0x801323 <pxDelayedTaskList>
    1c2c:	f0 91 24 13 	lds	r31, 0x1324	; 0x801324 <pxDelayedTaskList+0x1>
    1c30:	07 80       	ldd	r0, Z+7	; 0x07
    1c32:	f0 85       	ldd	r31, Z+8	; 0x08
    1c34:	e0 2d       	mov	r30, r0
    1c36:	00 84       	ldd	r0, Z+8	; 0x08
    1c38:	f1 85       	ldd	r31, Z+9	; 0x09
    1c3a:	e0 2d       	mov	r30, r0
    1c3c:	42 81       	ldd	r20, Z+2	; 0x02
    1c3e:	53 81       	ldd	r21, Z+3	; 0x03
    1c40:	64 81       	ldd	r22, Z+4	; 0x04
    1c42:	75 81       	ldd	r23, Z+5	; 0x05
    1c44:	c4 16       	cp	r12, r20
    1c46:	d5 06       	cpc	r13, r21
    1c48:	e6 06       	cpc	r14, r22
    1c4a:	f7 06       	cpc	r15, r23
    1c4c:	48 f4       	brcc	.+18     	; 0x1c60 <xTaskIncrementTick+0xf6>
    1c4e:	40 93 ed 12 	sts	0x12ED, r20	; 0x8012ed <xNextTaskUnblockTime>
    1c52:	50 93 ee 12 	sts	0x12EE, r21	; 0x8012ee <xNextTaskUnblockTime+0x1>
    1c56:	60 93 ef 12 	sts	0x12EF, r22	; 0x8012ef <xNextTaskUnblockTime+0x2>
    1c5a:	70 93 f0 12 	sts	0x12F0, r23	; 0x8012f0 <xNextTaskUnblockTime+0x3>
    1c5e:	80 c0       	rjmp	.+256    	; 0x1d60 <xTaskIncrementTick+0x1f6>
    1c60:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c62:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c64:	c6 81       	ldd	r28, Z+6	; 0x06
    1c66:	d7 81       	ldd	r29, Z+7	; 0x07
    1c68:	20 85       	ldd	r18, Z+8	; 0x08
    1c6a:	31 85       	ldd	r19, Z+9	; 0x09
    1c6c:	3f 83       	std	Y+7, r19	; 0x07
    1c6e:	2e 83       	std	Y+6, r18	; 0x06
    1c70:	c0 85       	ldd	r28, Z+8	; 0x08
    1c72:	d1 85       	ldd	r29, Z+9	; 0x09
    1c74:	26 81       	ldd	r18, Z+6	; 0x06
    1c76:	37 81       	ldd	r19, Z+7	; 0x07
    1c78:	3d 83       	std	Y+5, r19	; 0x05
    1c7a:	2c 83       	std	Y+4, r18	; 0x04
    1c7c:	11 96       	adiw	r26, 0x01	; 1
    1c7e:	4d 91       	ld	r20, X+
    1c80:	5c 91       	ld	r21, X
    1c82:	12 97       	sbiw	r26, 0x02	; 2
    1c84:	9f 01       	movw	r18, r30
    1c86:	2e 5f       	subi	r18, 0xFE	; 254
    1c88:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8a:	42 17       	cp	r20, r18
    1c8c:	53 07       	cpc	r21, r19
    1c8e:	31 f4       	brne	.+12     	; 0x1c9c <xTaskIncrementTick+0x132>
    1c90:	40 85       	ldd	r20, Z+8	; 0x08
    1c92:	51 85       	ldd	r21, Z+9	; 0x09
    1c94:	12 96       	adiw	r26, 0x02	; 2
    1c96:	5c 93       	st	X, r21
    1c98:	4e 93       	st	-X, r20
    1c9a:	11 97       	sbiw	r26, 0x01	; 1
    1c9c:	15 86       	std	Z+13, r1	; 0x0d
    1c9e:	14 86       	std	Z+12, r1	; 0x0c
    1ca0:	9c 91       	ld	r25, X
    1ca2:	91 50       	subi	r25, 0x01	; 1
    1ca4:	9c 93       	st	X, r25
    1ca6:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ca8:	b1 8d       	ldd	r27, Z+25	; 0x19
    1caa:	10 97       	sbiw	r26, 0x00	; 0
    1cac:	09 f1       	breq	.+66     	; 0x1cf0 <xTaskIncrementTick+0x186>
    1cae:	c2 89       	ldd	r28, Z+18	; 0x12
    1cb0:	d3 89       	ldd	r29, Z+19	; 0x13
    1cb2:	44 89       	ldd	r20, Z+20	; 0x14
    1cb4:	55 89       	ldd	r21, Z+21	; 0x15
    1cb6:	5f 83       	std	Y+7, r21	; 0x07
    1cb8:	4e 83       	std	Y+6, r20	; 0x06
    1cba:	c4 89       	ldd	r28, Z+20	; 0x14
    1cbc:	d5 89       	ldd	r29, Z+21	; 0x15
    1cbe:	42 89       	ldd	r20, Z+18	; 0x12
    1cc0:	53 89       	ldd	r21, Z+19	; 0x13
    1cc2:	5d 83       	std	Y+5, r21	; 0x05
    1cc4:	4c 83       	std	Y+4, r20	; 0x04
    1cc6:	11 96       	adiw	r26, 0x01	; 1
    1cc8:	6d 91       	ld	r22, X+
    1cca:	7c 91       	ld	r23, X
    1ccc:	12 97       	sbiw	r26, 0x02	; 2
    1cce:	af 01       	movw	r20, r30
    1cd0:	42 5f       	subi	r20, 0xF2	; 242
    1cd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd4:	64 17       	cp	r22, r20
    1cd6:	75 07       	cpc	r23, r21
    1cd8:	31 f4       	brne	.+12     	; 0x1ce6 <xTaskIncrementTick+0x17c>
    1cda:	44 89       	ldd	r20, Z+20	; 0x14
    1cdc:	55 89       	ldd	r21, Z+21	; 0x15
    1cde:	12 96       	adiw	r26, 0x02	; 2
    1ce0:	5c 93       	st	X, r21
    1ce2:	4e 93       	st	-X, r20
    1ce4:	11 97       	sbiw	r26, 0x01	; 1
    1ce6:	11 8e       	std	Z+25, r1	; 0x19
    1ce8:	10 8e       	std	Z+24, r1	; 0x18
    1cea:	9c 91       	ld	r25, X
    1cec:	91 50       	subi	r25, 0x01	; 1
    1cee:	9c 93       	st	X, r25
    1cf0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1cf2:	90 91 f9 12 	lds	r25, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    1cf6:	9a 17       	cp	r25, r26
    1cf8:	10 f4       	brcc	.+4      	; 0x1cfe <xTaskIncrementTick+0x194>
    1cfa:	a0 93 f9 12 	sts	0x12F9, r26	; 0x8012f9 <uxTopReadyPriority>
    1cfe:	9b e0       	ldi	r25, 0x0B	; 11
    1d00:	9a 9f       	mul	r25, r26
    1d02:	d0 01       	movw	r26, r0
    1d04:	11 24       	eor	r1, r1
    1d06:	a5 5c       	subi	r26, 0xC5	; 197
    1d08:	bc 4e       	sbci	r27, 0xEC	; 236
    1d0a:	11 96       	adiw	r26, 0x01	; 1
    1d0c:	0d 90       	ld	r0, X+
    1d0e:	bc 91       	ld	r27, X
    1d10:	a0 2d       	mov	r26, r0
    1d12:	b7 83       	std	Z+7, r27	; 0x07
    1d14:	a6 83       	std	Z+6, r26	; 0x06
    1d16:	16 96       	adiw	r26, 0x06	; 6
    1d18:	4d 91       	ld	r20, X+
    1d1a:	5c 91       	ld	r21, X
    1d1c:	17 97       	sbiw	r26, 0x07	; 7
    1d1e:	51 87       	std	Z+9, r21	; 0x09
    1d20:	40 87       	std	Z+8, r20	; 0x08
    1d22:	16 96       	adiw	r26, 0x06	; 6
    1d24:	cd 91       	ld	r28, X+
    1d26:	dc 91       	ld	r29, X
    1d28:	17 97       	sbiw	r26, 0x07	; 7
    1d2a:	3d 83       	std	Y+5, r19	; 0x05
    1d2c:	2c 83       	std	Y+4, r18	; 0x04
    1d2e:	17 96       	adiw	r26, 0x07	; 7
    1d30:	3c 93       	st	X, r19
    1d32:	2e 93       	st	-X, r18
    1d34:	16 97       	sbiw	r26, 0x06	; 6
    1d36:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d38:	9a 9f       	mul	r25, r26
    1d3a:	d0 01       	movw	r26, r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	a5 5c       	subi	r26, 0xC5	; 197
    1d40:	bc 4e       	sbci	r27, 0xEC	; 236
    1d42:	b5 87       	std	Z+13, r27	; 0x0d
    1d44:	a4 87       	std	Z+12, r26	; 0x0c
    1d46:	9c 91       	ld	r25, X
    1d48:	9f 5f       	subi	r25, 0xFF	; 255
    1d4a:	9c 93       	st	X, r25
    1d4c:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d4e:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1d52:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    1d56:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d58:	29 17       	cp	r18, r25
    1d5a:	08 f0       	brcs	.+2      	; 0x1d5e <xTaskIncrementTick+0x1f4>
    1d5c:	4f cf       	rjmp	.-354    	; 0x1bfc <xTaskIncrementTick+0x92>
    1d5e:	51 cf       	rjmp	.-350    	; 0x1c02 <xTaskIncrementTick+0x98>
    1d60:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1d64:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    1d68:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1d6a:	9b e0       	ldi	r25, 0x0B	; 11
    1d6c:	e9 9f       	mul	r30, r25
    1d6e:	f0 01       	movw	r30, r0
    1d70:	11 24       	eor	r1, r1
    1d72:	e5 5c       	subi	r30, 0xC5	; 197
    1d74:	fc 4e       	sbci	r31, 0xEC	; 236
    1d76:	90 81       	ld	r25, Z
    1d78:	92 30       	cpi	r25, 0x02	; 2
    1d7a:	08 f0       	brcs	.+2      	; 0x1d7e <xTaskIncrementTick+0x214>
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 91 f3 12 	lds	r25, 0x12F3	; 0x8012f3 <xYieldPending>
    1d82:	91 11       	cpse	r25, r1
    1d84:	16 c0       	rjmp	.+44     	; 0x1db2 <xTaskIncrementTick+0x248>
    1d86:	16 c0       	rjmp	.+44     	; 0x1db4 <xTaskIncrementTick+0x24a>
    1d88:	80 91 f4 12 	lds	r24, 0x12F4	; 0x8012f4 <xPendedTicks>
    1d8c:	90 91 f5 12 	lds	r25, 0x12F5	; 0x8012f5 <xPendedTicks+0x1>
    1d90:	a0 91 f6 12 	lds	r26, 0x12F6	; 0x8012f6 <xPendedTicks+0x2>
    1d94:	b0 91 f7 12 	lds	r27, 0x12F7	; 0x8012f7 <xPendedTicks+0x3>
    1d98:	01 96       	adiw	r24, 0x01	; 1
    1d9a:	a1 1d       	adc	r26, r1
    1d9c:	b1 1d       	adc	r27, r1
    1d9e:	80 93 f4 12 	sts	0x12F4, r24	; 0x8012f4 <xPendedTicks>
    1da2:	90 93 f5 12 	sts	0x12F5, r25	; 0x8012f5 <xPendedTicks+0x1>
    1da6:	a0 93 f6 12 	sts	0x12F6, r26	; 0x8012f6 <xPendedTicks+0x2>
    1daa:	b0 93 f7 12 	sts	0x12F7, r27	; 0x8012f7 <xPendedTicks+0x3>
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	01 c0       	rjmp	.+2      	; 0x1db4 <xTaskIncrementTick+0x24a>
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	ff 90       	pop	r15
    1dba:	ef 90       	pop	r14
    1dbc:	df 90       	pop	r13
    1dbe:	cf 90       	pop	r12
    1dc0:	08 95       	ret

00001dc2 <xTaskResumeAll>:
    1dc2:	cf 92       	push	r12
    1dc4:	df 92       	push	r13
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	0f 92       	push	r0
    1dd4:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <uxSchedulerSuspended>
    1dd8:	81 50       	subi	r24, 0x01	; 1
    1dda:	80 93 ea 12 	sts	0x12EA, r24	; 0x8012ea <uxSchedulerSuspended>
    1dde:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <uxSchedulerSuspended>
    1de2:	81 11       	cpse	r24, r1
    1de4:	be c0       	rjmp	.+380    	; 0x1f62 <xTaskResumeAll+0x1a0>
    1de6:	80 91 fe 12 	lds	r24, 0x12FE	; 0x8012fe <uxCurrentNumberOfTasks>
    1dea:	81 11       	cpse	r24, r1
    1dec:	88 c0       	rjmp	.+272    	; 0x1efe <xTaskResumeAll+0x13c>
    1dee:	bc c0       	rjmp	.+376    	; 0x1f68 <xTaskResumeAll+0x1a6>
    1df0:	e0 91 1d 13 	lds	r30, 0x131D	; 0x80131d <xPendingReadyList+0x7>
    1df4:	f0 91 1e 13 	lds	r31, 0x131E	; 0x80131e <xPendingReadyList+0x8>
    1df8:	00 84       	ldd	r0, Z+8	; 0x08
    1dfa:	f1 85       	ldd	r31, Z+9	; 0x09
    1dfc:	e0 2d       	mov	r30, r0
    1dfe:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e00:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e02:	c2 89       	ldd	r28, Z+18	; 0x12
    1e04:	d3 89       	ldd	r29, Z+19	; 0x13
    1e06:	84 89       	ldd	r24, Z+20	; 0x14
    1e08:	95 89       	ldd	r25, Z+21	; 0x15
    1e0a:	9f 83       	std	Y+7, r25	; 0x07
    1e0c:	8e 83       	std	Y+6, r24	; 0x06
    1e0e:	c4 89       	ldd	r28, Z+20	; 0x14
    1e10:	d5 89       	ldd	r29, Z+21	; 0x15
    1e12:	82 89       	ldd	r24, Z+18	; 0x12
    1e14:	93 89       	ldd	r25, Z+19	; 0x13
    1e16:	9d 83       	std	Y+5, r25	; 0x05
    1e18:	8c 83       	std	Y+4, r24	; 0x04
    1e1a:	11 96       	adiw	r26, 0x01	; 1
    1e1c:	2d 91       	ld	r18, X+
    1e1e:	3c 91       	ld	r19, X
    1e20:	12 97       	sbiw	r26, 0x02	; 2
    1e22:	cf 01       	movw	r24, r30
    1e24:	0e 96       	adiw	r24, 0x0e	; 14
    1e26:	28 17       	cp	r18, r24
    1e28:	39 07       	cpc	r19, r25
    1e2a:	31 f4       	brne	.+12     	; 0x1e38 <xTaskResumeAll+0x76>
    1e2c:	84 89       	ldd	r24, Z+20	; 0x14
    1e2e:	95 89       	ldd	r25, Z+21	; 0x15
    1e30:	12 96       	adiw	r26, 0x02	; 2
    1e32:	9c 93       	st	X, r25
    1e34:	8e 93       	st	-X, r24
    1e36:	11 97       	sbiw	r26, 0x01	; 1
    1e38:	11 8e       	std	Z+25, r1	; 0x19
    1e3a:	10 8e       	std	Z+24, r1	; 0x18
    1e3c:	8c 91       	ld	r24, X
    1e3e:	81 50       	subi	r24, 0x01	; 1
    1e40:	8c 93       	st	X, r24
    1e42:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e44:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e46:	c6 81       	ldd	r28, Z+6	; 0x06
    1e48:	d7 81       	ldd	r29, Z+7	; 0x07
    1e4a:	80 85       	ldd	r24, Z+8	; 0x08
    1e4c:	91 85       	ldd	r25, Z+9	; 0x09
    1e4e:	9f 83       	std	Y+7, r25	; 0x07
    1e50:	8e 83       	std	Y+6, r24	; 0x06
    1e52:	c0 85       	ldd	r28, Z+8	; 0x08
    1e54:	d1 85       	ldd	r29, Z+9	; 0x09
    1e56:	86 81       	ldd	r24, Z+6	; 0x06
    1e58:	97 81       	ldd	r25, Z+7	; 0x07
    1e5a:	9d 83       	std	Y+5, r25	; 0x05
    1e5c:	8c 83       	std	Y+4, r24	; 0x04
    1e5e:	11 96       	adiw	r26, 0x01	; 1
    1e60:	8d 91       	ld	r24, X+
    1e62:	9c 91       	ld	r25, X
    1e64:	12 97       	sbiw	r26, 0x02	; 2
    1e66:	9f 01       	movw	r18, r30
    1e68:	2e 5f       	subi	r18, 0xFE	; 254
    1e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6c:	82 17       	cp	r24, r18
    1e6e:	93 07       	cpc	r25, r19
    1e70:	31 f4       	brne	.+12     	; 0x1e7e <xTaskResumeAll+0xbc>
    1e72:	80 85       	ldd	r24, Z+8	; 0x08
    1e74:	91 85       	ldd	r25, Z+9	; 0x09
    1e76:	12 96       	adiw	r26, 0x02	; 2
    1e78:	9c 93       	st	X, r25
    1e7a:	8e 93       	st	-X, r24
    1e7c:	11 97       	sbiw	r26, 0x01	; 1
    1e7e:	15 86       	std	Z+13, r1	; 0x0d
    1e80:	14 86       	std	Z+12, r1	; 0x0c
    1e82:	8c 91       	ld	r24, X
    1e84:	81 50       	subi	r24, 0x01	; 1
    1e86:	8c 93       	st	X, r24
    1e88:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e8a:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    1e8e:	8a 17       	cp	r24, r26
    1e90:	10 f4       	brcc	.+4      	; 0x1e96 <xTaskResumeAll+0xd4>
    1e92:	a0 93 f9 12 	sts	0x12F9, r26	; 0x8012f9 <uxTopReadyPriority>
    1e96:	8b e0       	ldi	r24, 0x0B	; 11
    1e98:	8a 9f       	mul	r24, r26
    1e9a:	d0 01       	movw	r26, r0
    1e9c:	11 24       	eor	r1, r1
    1e9e:	a5 5c       	subi	r26, 0xC5	; 197
    1ea0:	bc 4e       	sbci	r27, 0xEC	; 236
    1ea2:	11 96       	adiw	r26, 0x01	; 1
    1ea4:	0d 90       	ld	r0, X+
    1ea6:	bc 91       	ld	r27, X
    1ea8:	a0 2d       	mov	r26, r0
    1eaa:	b7 83       	std	Z+7, r27	; 0x07
    1eac:	a6 83       	std	Z+6, r26	; 0x06
    1eae:	16 96       	adiw	r26, 0x06	; 6
    1eb0:	4d 91       	ld	r20, X+
    1eb2:	5c 91       	ld	r21, X
    1eb4:	17 97       	sbiw	r26, 0x07	; 7
    1eb6:	51 87       	std	Z+9, r21	; 0x09
    1eb8:	40 87       	std	Z+8, r20	; 0x08
    1eba:	16 96       	adiw	r26, 0x06	; 6
    1ebc:	cd 91       	ld	r28, X+
    1ebe:	dc 91       	ld	r29, X
    1ec0:	17 97       	sbiw	r26, 0x07	; 7
    1ec2:	3d 83       	std	Y+5, r19	; 0x05
    1ec4:	2c 83       	std	Y+4, r18	; 0x04
    1ec6:	17 96       	adiw	r26, 0x07	; 7
    1ec8:	3c 93       	st	X, r19
    1eca:	2e 93       	st	-X, r18
    1ecc:	16 97       	sbiw	r26, 0x06	; 6
    1ece:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ed0:	8a 9f       	mul	r24, r26
    1ed2:	d0 01       	movw	r26, r0
    1ed4:	11 24       	eor	r1, r1
    1ed6:	a5 5c       	subi	r26, 0xC5	; 197
    1ed8:	bc 4e       	sbci	r27, 0xEC	; 236
    1eda:	b5 87       	std	Z+13, r27	; 0x0d
    1edc:	a4 87       	std	Z+12, r26	; 0x0c
    1ede:	8c 91       	ld	r24, X
    1ee0:	8f 5f       	subi	r24, 0xFF	; 255
    1ee2:	8c 93       	st	X, r24
    1ee4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ee6:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1eea:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    1eee:	5a 96       	adiw	r26, 0x1a	; 26
    1ef0:	8c 91       	ld	r24, X
    1ef2:	98 17       	cp	r25, r24
    1ef4:	30 f0       	brcs	.+12     	; 0x1f02 <xTaskResumeAll+0x140>
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <xYieldPending>
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <xTaskResumeAll+0x140>
    1efe:	e0 e0       	ldi	r30, 0x00	; 0
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 91 16 13 	lds	r24, 0x1316	; 0x801316 <xPendingReadyList>
    1f06:	81 11       	cpse	r24, r1
    1f08:	73 cf       	rjmp	.-282    	; 0x1df0 <xTaskResumeAll+0x2e>
    1f0a:	ef 2b       	or	r30, r31
    1f0c:	09 f0       	breq	.+2      	; 0x1f10 <xTaskResumeAll+0x14e>
    1f0e:	7d db       	rcall	.-2310   	; 0x160a <prvResetNextTaskUnblockTime>
    1f10:	c0 90 f4 12 	lds	r12, 0x12F4	; 0x8012f4 <xPendedTicks>
    1f14:	d0 90 f5 12 	lds	r13, 0x12F5	; 0x8012f5 <xPendedTicks+0x1>
    1f18:	e0 90 f6 12 	lds	r14, 0x12F6	; 0x8012f6 <xPendedTicks+0x2>
    1f1c:	f0 90 f7 12 	lds	r15, 0x12F7	; 0x8012f7 <xPendedTicks+0x3>
    1f20:	c1 14       	cp	r12, r1
    1f22:	d1 04       	cpc	r13, r1
    1f24:	e1 04       	cpc	r14, r1
    1f26:	f1 04       	cpc	r15, r1
    1f28:	a1 f0       	breq	.+40     	; 0x1f52 <xTaskResumeAll+0x190>
    1f2a:	1f de       	rcall	.-962    	; 0x1b6a <xTaskIncrementTick>
    1f2c:	88 23       	and	r24, r24
    1f2e:	19 f0       	breq	.+6      	; 0x1f36 <xTaskResumeAll+0x174>
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <xYieldPending>
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	c8 1a       	sub	r12, r24
    1f3a:	d1 08       	sbc	r13, r1
    1f3c:	e1 08       	sbc	r14, r1
    1f3e:	f1 08       	sbc	r15, r1
    1f40:	a1 f7       	brne	.-24     	; 0x1f2a <xTaskResumeAll+0x168>
    1f42:	10 92 f4 12 	sts	0x12F4, r1	; 0x8012f4 <xPendedTicks>
    1f46:	10 92 f5 12 	sts	0x12F5, r1	; 0x8012f5 <xPendedTicks+0x1>
    1f4a:	10 92 f6 12 	sts	0x12F6, r1	; 0x8012f6 <xPendedTicks+0x2>
    1f4e:	10 92 f7 12 	sts	0x12F7, r1	; 0x8012f7 <xPendedTicks+0x3>
    1f52:	80 91 f3 12 	lds	r24, 0x12F3	; 0x8012f3 <xYieldPending>
    1f56:	88 23       	and	r24, r24
    1f58:	31 f0       	breq	.+12     	; 0x1f66 <xTaskResumeAll+0x1a4>
    1f5a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <vPortYield>
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	03 c0       	rjmp	.+6      	; 0x1f68 <xTaskResumeAll+0x1a6>
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <xTaskResumeAll+0x1a6>
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	0f 90       	pop	r0
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	ff 90       	pop	r15
    1f72:	ef 90       	pop	r14
    1f74:	df 90       	pop	r13
    1f76:	cf 90       	pop	r12
    1f78:	08 95       	ret

00001f7a <vTaskDelay>:
    1f7a:	cf 92       	push	r12
    1f7c:	df 92       	push	r13
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	6b 01       	movw	r12, r22
    1f84:	7c 01       	movw	r14, r24
    1f86:	67 2b       	or	r22, r23
    1f88:	68 2b       	or	r22, r24
    1f8a:	69 2b       	or	r22, r25
    1f8c:	39 f0       	breq	.+14     	; 0x1f9c <vTaskDelay+0x22>
    1f8e:	d9 dd       	rcall	.-1102   	; 0x1b42 <vTaskSuspendAll>
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	c7 01       	movw	r24, r14
    1f94:	b6 01       	movw	r22, r12
    1f96:	af dc       	rcall	.-1698   	; 0x18f6 <prvAddCurrentTaskToDelayedList>
    1f98:	14 df       	rcall	.-472    	; 0x1dc2 <xTaskResumeAll>
    1f9a:	01 c0       	rjmp	.+2      	; 0x1f9e <vTaskDelay+0x24>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	81 11       	cpse	r24, r1
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <vTaskDelay+0x2c>
    1fa2:	0e 94 78 03 	call	0x6f0	; 0x6f0 <vPortYield>
    1fa6:	ff 90       	pop	r15
    1fa8:	ef 90       	pop	r14
    1faa:	df 90       	pop	r13
    1fac:	cf 90       	pop	r12
    1fae:	08 95       	ret

00001fb0 <vTaskSwitchContext>:
    1fb0:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <uxSchedulerSuspended>
    1fb4:	88 23       	and	r24, r24
    1fb6:	21 f0       	breq	.+8      	; 0x1fc0 <vTaskSwitchContext+0x10>
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <xYieldPending>
    1fbe:	08 95       	ret
    1fc0:	10 92 f3 12 	sts	0x12F3, r1	; 0x8012f3 <xYieldPending>
    1fc4:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1fc8:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    1fcc:	20 81       	ld	r18, Z
    1fce:	31 81       	ldd	r19, Z+1	; 0x01
    1fd0:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1fd4:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    1fd8:	83 8d       	ldd	r24, Z+27	; 0x1b
    1fda:	94 8d       	ldd	r25, Z+28	; 0x1c
    1fdc:	82 17       	cp	r24, r18
    1fde:	93 07       	cpc	r25, r19
    1fe0:	60 f0       	brcs	.+24     	; 0x1ffa <vTaskSwitchContext+0x4a>
    1fe2:	60 91 a9 13 	lds	r22, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1fe6:	70 91 aa 13 	lds	r23, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    1fea:	63 5e       	subi	r22, 0xE3	; 227
    1fec:	7f 4f       	sbci	r23, 0xFF	; 255
    1fee:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    1ff2:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    1ff6:	0e 94 36 19 	call	0x326c	; 0x326c <vApplicationStackOverflowHook>
    1ffa:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    1ffe:	01 c0       	rjmp	.+2      	; 0x2002 <__DATA_REGION_LENGTH__+0x2>
    2000:	81 50       	subi	r24, 0x01	; 1
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	9b e0       	ldi	r25, 0x0B	; 11
    2008:	92 9f       	mul	r25, r18
    200a:	f0 01       	movw	r30, r0
    200c:	93 9f       	mul	r25, r19
    200e:	f0 0d       	add	r31, r0
    2010:	11 24       	eor	r1, r1
    2012:	e5 5c       	subi	r30, 0xC5	; 197
    2014:	fc 4e       	sbci	r31, 0xEC	; 236
    2016:	90 81       	ld	r25, Z
    2018:	99 23       	and	r25, r25
    201a:	91 f3       	breq	.-28     	; 0x2000 <__DATA_REGION_LENGTH__>
    201c:	9b e0       	ldi	r25, 0x0B	; 11
    201e:	92 9f       	mul	r25, r18
    2020:	a0 01       	movw	r20, r0
    2022:	93 9f       	mul	r25, r19
    2024:	50 0d       	add	r21, r0
    2026:	11 24       	eor	r1, r1
    2028:	df 01       	movw	r26, r30
    202a:	01 80       	ldd	r0, Z+1	; 0x01
    202c:	f2 81       	ldd	r31, Z+2	; 0x02
    202e:	e0 2d       	mov	r30, r0
    2030:	04 80       	ldd	r0, Z+4	; 0x04
    2032:	f5 81       	ldd	r31, Z+5	; 0x05
    2034:	e0 2d       	mov	r30, r0
    2036:	12 96       	adiw	r26, 0x02	; 2
    2038:	fc 93       	st	X, r31
    203a:	ee 93       	st	-X, r30
    203c:	11 97       	sbiw	r26, 0x01	; 1
    203e:	42 5c       	subi	r20, 0xC2	; 194
    2040:	5c 4e       	sbci	r21, 0xEC	; 236
    2042:	e4 17       	cp	r30, r20
    2044:	f5 07       	cpc	r31, r21
    2046:	29 f4       	brne	.+10     	; 0x2052 <__DATA_REGION_LENGTH__+0x52>
    2048:	44 81       	ldd	r20, Z+4	; 0x04
    204a:	55 81       	ldd	r21, Z+5	; 0x05
    204c:	fd 01       	movw	r30, r26
    204e:	52 83       	std	Z+2, r21	; 0x02
    2050:	41 83       	std	Z+1, r20	; 0x01
    2052:	9b e0       	ldi	r25, 0x0B	; 11
    2054:	92 9f       	mul	r25, r18
    2056:	f0 01       	movw	r30, r0
    2058:	93 9f       	mul	r25, r19
    205a:	f0 0d       	add	r31, r0
    205c:	11 24       	eor	r1, r1
    205e:	e5 5c       	subi	r30, 0xC5	; 197
    2060:	fc 4e       	sbci	r31, 0xEC	; 236
    2062:	01 80       	ldd	r0, Z+1	; 0x01
    2064:	f2 81       	ldd	r31, Z+2	; 0x02
    2066:	e0 2d       	mov	r30, r0
    2068:	20 85       	ldd	r18, Z+8	; 0x08
    206a:	31 85       	ldd	r19, Z+9	; 0x09
    206c:	30 93 aa 13 	sts	0x13AA, r19	; 0x8013aa <pxCurrentTCB+0x1>
    2070:	20 93 a9 13 	sts	0x13A9, r18	; 0x8013a9 <pxCurrentTCB>
    2074:	80 93 f9 12 	sts	0x12F9, r24	; 0x8012f9 <uxTopReadyPriority>
    2078:	08 95       	ret

0000207a <vTaskPlaceOnEventList>:
    207a:	cf 92       	push	r12
    207c:	df 92       	push	r13
    207e:	ef 92       	push	r14
    2080:	ff 92       	push	r15
    2082:	6a 01       	movw	r12, r20
    2084:	7b 01       	movw	r14, r22
    2086:	60 91 a9 13 	lds	r22, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    208a:	70 91 aa 13 	lds	r23, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    208e:	62 5f       	subi	r22, 0xF2	; 242
    2090:	7f 4f       	sbci	r23, 0xFF	; 255
    2092:	0e 94 bf 02 	call	0x57e	; 0x57e <vListInsert>
    2096:	41 e0       	ldi	r20, 0x01	; 1
    2098:	c7 01       	movw	r24, r14
    209a:	b6 01       	movw	r22, r12
    209c:	2c dc       	rcall	.-1960   	; 0x18f6 <prvAddCurrentTaskToDelayedList>
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	df 90       	pop	r13
    20a4:	cf 90       	pop	r12
    20a6:	08 95       	ret

000020a8 <vTaskPlaceOnEventListRestricted>:
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	fc 01       	movw	r30, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	ba 01       	movw	r22, r20
    20b2:	a1 81       	ldd	r26, Z+1	; 0x01
    20b4:	b2 81       	ldd	r27, Z+2	; 0x02
    20b6:	c0 91 a9 13 	lds	r28, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    20ba:	d0 91 aa 13 	lds	r29, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    20be:	bb 8b       	std	Y+19, r27	; 0x13
    20c0:	aa 8b       	std	Y+18, r26	; 0x12
    20c2:	c0 91 a9 13 	lds	r28, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    20c6:	d0 91 aa 13 	lds	r29, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    20ca:	16 96       	adiw	r26, 0x06	; 6
    20cc:	4d 91       	ld	r20, X+
    20ce:	5c 91       	ld	r21, X
    20d0:	17 97       	sbiw	r26, 0x07	; 7
    20d2:	5d 8b       	std	Y+21, r21	; 0x15
    20d4:	4c 8b       	std	Y+20, r20	; 0x14
    20d6:	16 96       	adiw	r26, 0x06	; 6
    20d8:	cd 91       	ld	r28, X+
    20da:	dc 91       	ld	r29, X
    20dc:	17 97       	sbiw	r26, 0x07	; 7
    20de:	40 91 a9 13 	lds	r20, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    20e2:	50 91 aa 13 	lds	r21, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    20e6:	42 5f       	subi	r20, 0xF2	; 242
    20e8:	5f 4f       	sbci	r21, 0xFF	; 255
    20ea:	5d 83       	std	Y+5, r21	; 0x05
    20ec:	4c 83       	std	Y+4, r20	; 0x04
    20ee:	40 91 a9 13 	lds	r20, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    20f2:	50 91 aa 13 	lds	r21, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    20f6:	42 5f       	subi	r20, 0xF2	; 242
    20f8:	5f 4f       	sbci	r21, 0xFF	; 255
    20fa:	17 96       	adiw	r26, 0x07	; 7
    20fc:	5c 93       	st	X, r21
    20fe:	4e 93       	st	-X, r20
    2100:	16 97       	sbiw	r26, 0x06	; 6
    2102:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2106:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    210a:	59 96       	adiw	r26, 0x19	; 25
    210c:	fc 93       	st	X, r31
    210e:	ee 93       	st	-X, r30
    2110:	58 97       	sbiw	r26, 0x18	; 24
    2112:	30 81       	ld	r19, Z
    2114:	3f 5f       	subi	r19, 0xFF	; 255
    2116:	30 83       	st	Z, r19
    2118:	22 23       	and	r18, r18
    211a:	19 f0       	breq	.+6      	; 0x2122 <vTaskPlaceOnEventListRestricted+0x7a>
    211c:	6f ef       	ldi	r22, 0xFF	; 255
    211e:	7f ef       	ldi	r23, 0xFF	; 255
    2120:	cb 01       	movw	r24, r22
    2122:	42 2f       	mov	r20, r18
    2124:	e8 db       	rcall	.-2096   	; 0x18f6 <prvAddCurrentTaskToDelayedList>
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	08 95       	ret

0000212c <xTaskRemoveFromEventList>:
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
    2130:	dc 01       	movw	r26, r24
    2132:	17 96       	adiw	r26, 0x07	; 7
    2134:	ed 91       	ld	r30, X+
    2136:	fc 91       	ld	r31, X
    2138:	18 97       	sbiw	r26, 0x08	; 8
    213a:	00 84       	ldd	r0, Z+8	; 0x08
    213c:	f1 85       	ldd	r31, Z+9	; 0x09
    213e:	e0 2d       	mov	r30, r0
    2140:	a0 8d       	ldd	r26, Z+24	; 0x18
    2142:	b1 8d       	ldd	r27, Z+25	; 0x19
    2144:	c2 89       	ldd	r28, Z+18	; 0x12
    2146:	d3 89       	ldd	r29, Z+19	; 0x13
    2148:	84 89       	ldd	r24, Z+20	; 0x14
    214a:	95 89       	ldd	r25, Z+21	; 0x15
    214c:	9f 83       	std	Y+7, r25	; 0x07
    214e:	8e 83       	std	Y+6, r24	; 0x06
    2150:	c4 89       	ldd	r28, Z+20	; 0x14
    2152:	d5 89       	ldd	r29, Z+21	; 0x15
    2154:	82 89       	ldd	r24, Z+18	; 0x12
    2156:	93 89       	ldd	r25, Z+19	; 0x13
    2158:	9d 83       	std	Y+5, r25	; 0x05
    215a:	8c 83       	std	Y+4, r24	; 0x04
    215c:	11 96       	adiw	r26, 0x01	; 1
    215e:	8d 91       	ld	r24, X+
    2160:	9c 91       	ld	r25, X
    2162:	12 97       	sbiw	r26, 0x02	; 2
    2164:	9f 01       	movw	r18, r30
    2166:	22 5f       	subi	r18, 0xF2	; 242
    2168:	3f 4f       	sbci	r19, 0xFF	; 255
    216a:	82 17       	cp	r24, r18
    216c:	93 07       	cpc	r25, r19
    216e:	31 f4       	brne	.+12     	; 0x217c <xTaskRemoveFromEventList+0x50>
    2170:	84 89       	ldd	r24, Z+20	; 0x14
    2172:	95 89       	ldd	r25, Z+21	; 0x15
    2174:	12 96       	adiw	r26, 0x02	; 2
    2176:	9c 93       	st	X, r25
    2178:	8e 93       	st	-X, r24
    217a:	11 97       	sbiw	r26, 0x01	; 1
    217c:	11 8e       	std	Z+25, r1	; 0x19
    217e:	10 8e       	std	Z+24, r1	; 0x18
    2180:	8c 91       	ld	r24, X
    2182:	81 50       	subi	r24, 0x01	; 1
    2184:	8c 93       	st	X, r24
    2186:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <uxSchedulerSuspended>
    218a:	81 11       	cpse	r24, r1
    218c:	52 c0       	rjmp	.+164    	; 0x2232 <__stack+0x33>
    218e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2190:	b5 85       	ldd	r27, Z+13	; 0x0d
    2192:	c6 81       	ldd	r28, Z+6	; 0x06
    2194:	d7 81       	ldd	r29, Z+7	; 0x07
    2196:	80 85       	ldd	r24, Z+8	; 0x08
    2198:	91 85       	ldd	r25, Z+9	; 0x09
    219a:	9f 83       	std	Y+7, r25	; 0x07
    219c:	8e 83       	std	Y+6, r24	; 0x06
    219e:	c0 85       	ldd	r28, Z+8	; 0x08
    21a0:	d1 85       	ldd	r29, Z+9	; 0x09
    21a2:	86 81       	ldd	r24, Z+6	; 0x06
    21a4:	97 81       	ldd	r25, Z+7	; 0x07
    21a6:	9d 83       	std	Y+5, r25	; 0x05
    21a8:	8c 83       	std	Y+4, r24	; 0x04
    21aa:	11 96       	adiw	r26, 0x01	; 1
    21ac:	8d 91       	ld	r24, X+
    21ae:	9c 91       	ld	r25, X
    21b0:	12 97       	sbiw	r26, 0x02	; 2
    21b2:	9f 01       	movw	r18, r30
    21b4:	2e 5f       	subi	r18, 0xFE	; 254
    21b6:	3f 4f       	sbci	r19, 0xFF	; 255
    21b8:	82 17       	cp	r24, r18
    21ba:	93 07       	cpc	r25, r19
    21bc:	31 f4       	brne	.+12     	; 0x21ca <xTaskRemoveFromEventList+0x9e>
    21be:	80 85       	ldd	r24, Z+8	; 0x08
    21c0:	91 85       	ldd	r25, Z+9	; 0x09
    21c2:	12 96       	adiw	r26, 0x02	; 2
    21c4:	9c 93       	st	X, r25
    21c6:	8e 93       	st	-X, r24
    21c8:	11 97       	sbiw	r26, 0x01	; 1
    21ca:	15 86       	std	Z+13, r1	; 0x0d
    21cc:	14 86       	std	Z+12, r1	; 0x0c
    21ce:	8c 91       	ld	r24, X
    21d0:	81 50       	subi	r24, 0x01	; 1
    21d2:	8c 93       	st	X, r24
    21d4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21d6:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    21da:	8a 17       	cp	r24, r26
    21dc:	10 f4       	brcc	.+4      	; 0x21e2 <xTaskRemoveFromEventList+0xb6>
    21de:	a0 93 f9 12 	sts	0x12F9, r26	; 0x8012f9 <uxTopReadyPriority>
    21e2:	8b e0       	ldi	r24, 0x0B	; 11
    21e4:	8a 9f       	mul	r24, r26
    21e6:	d0 01       	movw	r26, r0
    21e8:	11 24       	eor	r1, r1
    21ea:	a5 5c       	subi	r26, 0xC5	; 197
    21ec:	bc 4e       	sbci	r27, 0xEC	; 236
    21ee:	11 96       	adiw	r26, 0x01	; 1
    21f0:	0d 90       	ld	r0, X+
    21f2:	bc 91       	ld	r27, X
    21f4:	a0 2d       	mov	r26, r0
    21f6:	b7 83       	std	Z+7, r27	; 0x07
    21f8:	a6 83       	std	Z+6, r26	; 0x06
    21fa:	16 96       	adiw	r26, 0x06	; 6
    21fc:	4d 91       	ld	r20, X+
    21fe:	5c 91       	ld	r21, X
    2200:	17 97       	sbiw	r26, 0x07	; 7
    2202:	51 87       	std	Z+9, r21	; 0x09
    2204:	40 87       	std	Z+8, r20	; 0x08
    2206:	16 96       	adiw	r26, 0x06	; 6
    2208:	cd 91       	ld	r28, X+
    220a:	dc 91       	ld	r29, X
    220c:	17 97       	sbiw	r26, 0x07	; 7
    220e:	3d 83       	std	Y+5, r19	; 0x05
    2210:	2c 83       	std	Y+4, r18	; 0x04
    2212:	17 96       	adiw	r26, 0x07	; 7
    2214:	3c 93       	st	X, r19
    2216:	2e 93       	st	-X, r18
    2218:	16 97       	sbiw	r26, 0x06	; 6
    221a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    221c:	8a 9f       	mul	r24, r26
    221e:	d0 01       	movw	r26, r0
    2220:	11 24       	eor	r1, r1
    2222:	a5 5c       	subi	r26, 0xC5	; 197
    2224:	bc 4e       	sbci	r27, 0xEC	; 236
    2226:	b5 87       	std	Z+13, r27	; 0x0d
    2228:	a4 87       	std	Z+12, r26	; 0x0c
    222a:	8c 91       	ld	r24, X
    222c:	8f 5f       	subi	r24, 0xFF	; 255
    222e:	8c 93       	st	X, r24
    2230:	1c c0       	rjmp	.+56     	; 0x226a <__stack+0x6b>
    2232:	46 e1       	ldi	r20, 0x16	; 22
    2234:	53 e1       	ldi	r21, 0x13	; 19
    2236:	da 01       	movw	r26, r20
    2238:	11 96       	adiw	r26, 0x01	; 1
    223a:	cd 91       	ld	r28, X+
    223c:	dc 91       	ld	r29, X
    223e:	12 97       	sbiw	r26, 0x02	; 2
    2240:	d3 8b       	std	Z+19, r29	; 0x13
    2242:	c2 8b       	std	Z+18, r28	; 0x12
    2244:	8e 81       	ldd	r24, Y+6	; 0x06
    2246:	9f 81       	ldd	r25, Y+7	; 0x07
    2248:	95 8b       	std	Z+21, r25	; 0x15
    224a:	84 8b       	std	Z+20, r24	; 0x14
    224c:	8e 81       	ldd	r24, Y+6	; 0x06
    224e:	9f 81       	ldd	r25, Y+7	; 0x07
    2250:	dc 01       	movw	r26, r24
    2252:	15 96       	adiw	r26, 0x05	; 5
    2254:	3c 93       	st	X, r19
    2256:	2e 93       	st	-X, r18
    2258:	14 97       	sbiw	r26, 0x04	; 4
    225a:	3f 83       	std	Y+7, r19	; 0x07
    225c:	2e 83       	std	Y+6, r18	; 0x06
    225e:	51 8f       	std	Z+25, r21	; 0x19
    2260:	40 8f       	std	Z+24, r20	; 0x18
    2262:	da 01       	movw	r26, r20
    2264:	8c 91       	ld	r24, X
    2266:	8f 5f       	subi	r24, 0xFF	; 255
    2268:	8c 93       	st	X, r24
    226a:	92 8d       	ldd	r25, Z+26	; 0x1a
    226c:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2270:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2274:	82 8d       	ldd	r24, Z+26	; 0x1a
    2276:	89 17       	cp	r24, r25
    2278:	20 f4       	brcc	.+8      	; 0x2282 <__stack+0x83>
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <xYieldPending>
    2280:	01 c0       	rjmp	.+2      	; 0x2284 <__stack+0x85>
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	08 95       	ret

0000228a <vTaskSetTimeOutState>:
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	0f 92       	push	r0
    2290:	20 91 f2 12 	lds	r18, 0x12F2	; 0x8012f2 <xNumOfOverflows>
    2294:	fc 01       	movw	r30, r24
    2296:	20 83       	st	Z, r18
    2298:	40 91 fa 12 	lds	r20, 0x12FA	; 0x8012fa <xTickCount>
    229c:	50 91 fb 12 	lds	r21, 0x12FB	; 0x8012fb <xTickCount+0x1>
    22a0:	60 91 fc 12 	lds	r22, 0x12FC	; 0x8012fc <xTickCount+0x2>
    22a4:	70 91 fd 12 	lds	r23, 0x12FD	; 0x8012fd <xTickCount+0x3>
    22a8:	41 83       	std	Z+1, r20	; 0x01
    22aa:	52 83       	std	Z+2, r21	; 0x02
    22ac:	63 83       	std	Z+3, r22	; 0x03
    22ae:	74 83       	std	Z+4, r23	; 0x04
    22b0:	0f 90       	pop	r0
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	08 95       	ret

000022b6 <vTaskInternalSetTimeOutState>:
    22b6:	20 91 f2 12 	lds	r18, 0x12F2	; 0x8012f2 <xNumOfOverflows>
    22ba:	fc 01       	movw	r30, r24
    22bc:	20 83       	st	Z, r18
    22be:	40 91 fa 12 	lds	r20, 0x12FA	; 0x8012fa <xTickCount>
    22c2:	50 91 fb 12 	lds	r21, 0x12FB	; 0x8012fb <xTickCount+0x1>
    22c6:	60 91 fc 12 	lds	r22, 0x12FC	; 0x8012fc <xTickCount+0x2>
    22ca:	70 91 fd 12 	lds	r23, 0x12FD	; 0x8012fd <xTickCount+0x3>
    22ce:	41 83       	std	Z+1, r20	; 0x01
    22d0:	52 83       	std	Z+2, r21	; 0x02
    22d2:	63 83       	std	Z+3, r22	; 0x03
    22d4:	74 83       	std	Z+4, r23	; 0x04
    22d6:	08 95       	ret

000022d8 <xTaskCheckForTimeOut>:
    22d8:	8f 92       	push	r8
    22da:	9f 92       	push	r9
    22dc:	af 92       	push	r10
    22de:	bf 92       	push	r11
    22e0:	cf 92       	push	r12
    22e2:	df 92       	push	r13
    22e4:	ef 92       	push	r14
    22e6:	ff 92       	push	r15
    22e8:	0f 93       	push	r16
    22ea:	1f 93       	push	r17
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	fb 01       	movw	r30, r22
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	0f 92       	push	r0
    22f8:	c0 90 fa 12 	lds	r12, 0x12FA	; 0x8012fa <xTickCount>
    22fc:	d0 90 fb 12 	lds	r13, 0x12FB	; 0x8012fb <xTickCount+0x1>
    2300:	e0 90 fc 12 	lds	r14, 0x12FC	; 0x8012fc <xTickCount+0x2>
    2304:	f0 90 fd 12 	lds	r15, 0x12FD	; 0x8012fd <xTickCount+0x3>
    2308:	dc 01       	movw	r26, r24
    230a:	11 96       	adiw	r26, 0x01	; 1
    230c:	0d 91       	ld	r16, X+
    230e:	1d 91       	ld	r17, X+
    2310:	2d 91       	ld	r18, X+
    2312:	3c 91       	ld	r19, X
    2314:	14 97       	sbiw	r26, 0x04	; 4
    2316:	46 01       	movw	r8, r12
    2318:	57 01       	movw	r10, r14
    231a:	80 1a       	sub	r8, r16
    231c:	91 0a       	sbc	r9, r17
    231e:	a2 0a       	sbc	r10, r18
    2320:	b3 0a       	sbc	r11, r19
    2322:	40 81       	ld	r20, Z
    2324:	51 81       	ldd	r21, Z+1	; 0x01
    2326:	62 81       	ldd	r22, Z+2	; 0x02
    2328:	73 81       	ldd	r23, Z+3	; 0x03
    232a:	4f 3f       	cpi	r20, 0xFF	; 255
    232c:	bf ef       	ldi	r27, 0xFF	; 255
    232e:	5b 07       	cpc	r21, r27
    2330:	6b 07       	cpc	r22, r27
    2332:	7b 07       	cpc	r23, r27
    2334:	39 f1       	breq	.+78     	; 0x2384 <xTaskCheckForTimeOut+0xac>
    2336:	ec 01       	movw	r28, r24
    2338:	b8 81       	ld	r27, Y
    233a:	a0 91 f2 12 	lds	r26, 0x12F2	; 0x8012f2 <xNumOfOverflows>
    233e:	ba 17       	cp	r27, r26
    2340:	59 f0       	breq	.+22     	; 0x2358 <xTaskCheckForTimeOut+0x80>
    2342:	c0 16       	cp	r12, r16
    2344:	d1 06       	cpc	r13, r17
    2346:	e2 06       	cpc	r14, r18
    2348:	f3 06       	cpc	r15, r19
    234a:	30 f0       	brcs	.+12     	; 0x2358 <xTaskCheckForTimeOut+0x80>
    234c:	10 82       	st	Z, r1
    234e:	11 82       	std	Z+1, r1	; 0x01
    2350:	12 82       	std	Z+2, r1	; 0x02
    2352:	13 82       	std	Z+3, r1	; 0x03
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	17 c0       	rjmp	.+46     	; 0x2386 <xTaskCheckForTimeOut+0xae>
    2358:	84 16       	cp	r8, r20
    235a:	95 06       	cpc	r9, r21
    235c:	a6 06       	cpc	r10, r22
    235e:	b7 06       	cpc	r11, r23
    2360:	58 f4       	brcc	.+22     	; 0x2378 <xTaskCheckForTimeOut+0xa0>
    2362:	48 19       	sub	r20, r8
    2364:	59 09       	sbc	r21, r9
    2366:	6a 09       	sbc	r22, r10
    2368:	7b 09       	sbc	r23, r11
    236a:	40 83       	st	Z, r20
    236c:	51 83       	std	Z+1, r21	; 0x01
    236e:	62 83       	std	Z+2, r22	; 0x02
    2370:	73 83       	std	Z+3, r23	; 0x03
    2372:	a1 df       	rcall	.-190    	; 0x22b6 <vTaskInternalSetTimeOutState>
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	07 c0       	rjmp	.+14     	; 0x2386 <xTaskCheckForTimeOut+0xae>
    2378:	10 82       	st	Z, r1
    237a:	11 82       	std	Z+1, r1	; 0x01
    237c:	12 82       	std	Z+2, r1	; 0x02
    237e:	13 82       	std	Z+3, r1	; 0x03
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	01 c0       	rjmp	.+2      	; 0x2386 <xTaskCheckForTimeOut+0xae>
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	0f 90       	pop	r0
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	1f 91       	pop	r17
    2390:	0f 91       	pop	r16
    2392:	ff 90       	pop	r15
    2394:	ef 90       	pop	r14
    2396:	df 90       	pop	r13
    2398:	cf 90       	pop	r12
    239a:	bf 90       	pop	r11
    239c:	af 90       	pop	r10
    239e:	9f 90       	pop	r9
    23a0:	8f 90       	pop	r8
    23a2:	08 95       	ret

000023a4 <vTaskMissedYield>:
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <xYieldPending>
    23aa:	08 95       	ret

000023ac <xTaskGetCurrentTaskHandle>:
    23ac:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    23b0:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    23b4:	08 95       	ret

000023b6 <xTaskGetSchedulerState>:
    23b6:	80 91 f8 12 	lds	r24, 0x12F8	; 0x8012f8 <xSchedulerRunning>
    23ba:	88 23       	and	r24, r24
    23bc:	31 f0       	breq	.+12     	; 0x23ca <xTaskGetSchedulerState+0x14>
    23be:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <uxSchedulerSuspended>
    23c2:	81 11       	cpse	r24, r1
    23c4:	04 c0       	rjmp	.+8      	; 0x23ce <xTaskGetSchedulerState+0x18>
    23c6:	82 e0       	ldi	r24, 0x02	; 2
    23c8:	08 95       	ret
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	08 95       	ret
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	08 95       	ret

000023d2 <xTaskPriorityInherit>:
    23d2:	0f 93       	push	r16
    23d4:	1f 93       	push	r17
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	fc 01       	movw	r30, r24
    23dc:	89 2b       	or	r24, r25
    23de:	09 f4       	brne	.+2      	; 0x23e2 <xTaskPriorityInherit+0x10>
    23e0:	77 c0       	rjmp	.+238    	; 0x24d0 <xTaskPriorityInherit+0xfe>
    23e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    23e4:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    23e8:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    23ec:	5a 96       	adiw	r26, 0x1a	; 26
    23ee:	9c 91       	ld	r25, X
    23f0:	89 17       	cp	r24, r25
    23f2:	08 f0       	brcs	.+2      	; 0x23f6 <xTaskPriorityInherit+0x24>
    23f4:	63 c0       	rjmp	.+198    	; 0x24bc <xTaskPriorityInherit+0xea>
    23f6:	46 85       	ldd	r20, Z+14	; 0x0e
    23f8:	57 85       	ldd	r21, Z+15	; 0x0f
    23fa:	60 89       	ldd	r22, Z+16	; 0x10
    23fc:	71 89       	ldd	r23, Z+17	; 0x11
    23fe:	77 23       	and	r23, r23
    2400:	94 f0       	brlt	.+36     	; 0x2426 <xTaskPriorityInherit+0x54>
    2402:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2406:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    240a:	5a 96       	adiw	r26, 0x1a	; 26
    240c:	9c 91       	ld	r25, X
    240e:	4a e0       	ldi	r20, 0x0A	; 10
    2410:	50 e0       	ldi	r21, 0x00	; 0
    2412:	60 e0       	ldi	r22, 0x00	; 0
    2414:	70 e0       	ldi	r23, 0x00	; 0
    2416:	49 1b       	sub	r20, r25
    2418:	51 09       	sbc	r21, r1
    241a:	61 09       	sbc	r22, r1
    241c:	71 09       	sbc	r23, r1
    241e:	46 87       	std	Z+14, r20	; 0x0e
    2420:	57 87       	std	Z+15, r21	; 0x0f
    2422:	60 8b       	std	Z+16, r22	; 0x10
    2424:	71 8b       	std	Z+17, r23	; 0x11
    2426:	24 85       	ldd	r18, Z+12	; 0x0c
    2428:	35 85       	ldd	r19, Z+13	; 0x0d
    242a:	4b e0       	ldi	r20, 0x0B	; 11
    242c:	84 9f       	mul	r24, r20
    242e:	c0 01       	movw	r24, r0
    2430:	11 24       	eor	r1, r1
    2432:	85 5c       	subi	r24, 0xC5	; 197
    2434:	9c 4e       	sbci	r25, 0xEC	; 236
    2436:	28 17       	cp	r18, r24
    2438:	39 07       	cpc	r19, r25
    243a:	b9 f5       	brne	.+110    	; 0x24aa <xTaskPriorityInherit+0xd8>
    243c:	ef 01       	movw	r28, r30
    243e:	8f 01       	movw	r16, r30
    2440:	0e 5f       	subi	r16, 0xFE	; 254
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	c8 01       	movw	r24, r16
    2446:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <uxListRemove>
    244a:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    244e:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2452:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2454:	ea 8f       	std	Y+26, r30	; 0x1a
    2456:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    245a:	8e 17       	cp	r24, r30
    245c:	10 f4       	brcc	.+4      	; 0x2462 <xTaskPriorityInherit+0x90>
    245e:	e0 93 f9 12 	sts	0x12F9, r30	; 0x8012f9 <uxTopReadyPriority>
    2462:	8b e0       	ldi	r24, 0x0B	; 11
    2464:	8e 9f       	mul	r24, r30
    2466:	f0 01       	movw	r30, r0
    2468:	11 24       	eor	r1, r1
    246a:	e5 5c       	subi	r30, 0xC5	; 197
    246c:	fc 4e       	sbci	r31, 0xEC	; 236
    246e:	01 80       	ldd	r0, Z+1	; 0x01
    2470:	f2 81       	ldd	r31, Z+2	; 0x02
    2472:	e0 2d       	mov	r30, r0
    2474:	ff 83       	std	Y+7, r31	; 0x07
    2476:	ee 83       	std	Y+6, r30	; 0x06
    2478:	26 81       	ldd	r18, Z+6	; 0x06
    247a:	37 81       	ldd	r19, Z+7	; 0x07
    247c:	39 87       	std	Y+9, r19	; 0x09
    247e:	28 87       	std	Y+8, r18	; 0x08
    2480:	a6 81       	ldd	r26, Z+6	; 0x06
    2482:	b7 81       	ldd	r27, Z+7	; 0x07
    2484:	15 96       	adiw	r26, 0x05	; 5
    2486:	1c 93       	st	X, r17
    2488:	0e 93       	st	-X, r16
    248a:	14 97       	sbiw	r26, 0x04	; 4
    248c:	17 83       	std	Z+7, r17	; 0x07
    248e:	06 83       	std	Z+6, r16	; 0x06
    2490:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2492:	8e 9f       	mul	r24, r30
    2494:	f0 01       	movw	r30, r0
    2496:	11 24       	eor	r1, r1
    2498:	e5 5c       	subi	r30, 0xC5	; 197
    249a:	fc 4e       	sbci	r31, 0xEC	; 236
    249c:	fd 87       	std	Y+13, r31	; 0x0d
    249e:	ec 87       	std	Y+12, r30	; 0x0c
    24a0:	80 81       	ld	r24, Z
    24a2:	8f 5f       	subi	r24, 0xFF	; 255
    24a4:	80 83       	st	Z, r24
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	16 c0       	rjmp	.+44     	; 0x24d6 <xTaskPriorityInherit+0x104>
    24aa:	a0 91 a9 13 	lds	r26, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    24ae:	b0 91 aa 13 	lds	r27, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    24b2:	5a 96       	adiw	r26, 0x1a	; 26
    24b4:	8c 91       	ld	r24, X
    24b6:	82 8f       	std	Z+26, r24	; 0x1a
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	0d c0       	rjmp	.+26     	; 0x24d6 <xTaskPriorityInherit+0x104>
    24bc:	95 a5       	ldd	r25, Z+45	; 0x2d
    24be:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    24c2:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    24c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    24c8:	98 17       	cp	r25, r24
    24ca:	20 f0       	brcs	.+8      	; 0x24d4 <xTaskPriorityInherit+0x102>
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	03 c0       	rjmp	.+6      	; 0x24d6 <xTaskPriorityInherit+0x104>
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	01 c0       	rjmp	.+2      	; 0x24d6 <xTaskPriorityInherit+0x104>
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	df 91       	pop	r29
    24d8:	cf 91       	pop	r28
    24da:	1f 91       	pop	r17
    24dc:	0f 91       	pop	r16
    24de:	08 95       	ret

000024e0 <xTaskPriorityDisinherit>:
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	fc 01       	movw	r30, r24
    24ea:	89 2b       	or	r24, r25
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <xTaskPriorityDisinherit+0x10>
    24ee:	49 c0       	rjmp	.+146    	; 0x2582 <xTaskPriorityDisinherit+0xa2>
    24f0:	86 a5       	ldd	r24, Z+46	; 0x2e
    24f2:	81 50       	subi	r24, 0x01	; 1
    24f4:	86 a7       	std	Z+46, r24	; 0x2e
    24f6:	22 8d       	ldd	r18, Z+26	; 0x1a
    24f8:	95 a5       	ldd	r25, Z+45	; 0x2d
    24fa:	29 17       	cp	r18, r25
    24fc:	09 f4       	brne	.+2      	; 0x2500 <xTaskPriorityDisinherit+0x20>
    24fe:	43 c0       	rjmp	.+134    	; 0x2586 <xTaskPriorityDisinherit+0xa6>
    2500:	81 11       	cpse	r24, r1
    2502:	43 c0       	rjmp	.+134    	; 0x258a <xTaskPriorityDisinherit+0xaa>
    2504:	ef 01       	movw	r28, r30
    2506:	8f 01       	movw	r16, r30
    2508:	0e 5f       	subi	r16, 0xFE	; 254
    250a:	1f 4f       	sbci	r17, 0xFF	; 255
    250c:	c8 01       	movw	r24, r16
    250e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <uxListRemove>
    2512:	ed a5       	ldd	r30, Y+45	; 0x2d
    2514:	ea 8f       	std	Y+26, r30	; 0x1a
    2516:	8a e0       	ldi	r24, 0x0A	; 10
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	a0 e0       	ldi	r26, 0x00	; 0
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	8e 1b       	sub	r24, r30
    2520:	91 09       	sbc	r25, r1
    2522:	a1 09       	sbc	r26, r1
    2524:	b1 09       	sbc	r27, r1
    2526:	8e 87       	std	Y+14, r24	; 0x0e
    2528:	9f 87       	std	Y+15, r25	; 0x0f
    252a:	a8 8b       	std	Y+16, r26	; 0x10
    252c:	b9 8b       	std	Y+17, r27	; 0x11
    252e:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    2532:	8e 17       	cp	r24, r30
    2534:	10 f4       	brcc	.+4      	; 0x253a <xTaskPriorityDisinherit+0x5a>
    2536:	e0 93 f9 12 	sts	0x12F9, r30	; 0x8012f9 <uxTopReadyPriority>
    253a:	8b e0       	ldi	r24, 0x0B	; 11
    253c:	8e 9f       	mul	r24, r30
    253e:	f0 01       	movw	r30, r0
    2540:	11 24       	eor	r1, r1
    2542:	e5 5c       	subi	r30, 0xC5	; 197
    2544:	fc 4e       	sbci	r31, 0xEC	; 236
    2546:	01 80       	ldd	r0, Z+1	; 0x01
    2548:	f2 81       	ldd	r31, Z+2	; 0x02
    254a:	e0 2d       	mov	r30, r0
    254c:	ff 83       	std	Y+7, r31	; 0x07
    254e:	ee 83       	std	Y+6, r30	; 0x06
    2550:	26 81       	ldd	r18, Z+6	; 0x06
    2552:	37 81       	ldd	r19, Z+7	; 0x07
    2554:	39 87       	std	Y+9, r19	; 0x09
    2556:	28 87       	std	Y+8, r18	; 0x08
    2558:	a6 81       	ldd	r26, Z+6	; 0x06
    255a:	b7 81       	ldd	r27, Z+7	; 0x07
    255c:	15 96       	adiw	r26, 0x05	; 5
    255e:	1c 93       	st	X, r17
    2560:	0e 93       	st	-X, r16
    2562:	14 97       	sbiw	r26, 0x04	; 4
    2564:	17 83       	std	Z+7, r17	; 0x07
    2566:	06 83       	std	Z+6, r16	; 0x06
    2568:	ea 8d       	ldd	r30, Y+26	; 0x1a
    256a:	8e 9f       	mul	r24, r30
    256c:	f0 01       	movw	r30, r0
    256e:	11 24       	eor	r1, r1
    2570:	e5 5c       	subi	r30, 0xC5	; 197
    2572:	fc 4e       	sbci	r31, 0xEC	; 236
    2574:	fd 87       	std	Y+13, r31	; 0x0d
    2576:	ec 87       	std	Y+12, r30	; 0x0c
    2578:	80 81       	ld	r24, Z
    257a:	8f 5f       	subi	r24, 0xFF	; 255
    257c:	80 83       	st	Z, r24
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	05 c0       	rjmp	.+10     	; 0x258c <xTaskPriorityDisinherit+0xac>
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	03 c0       	rjmp	.+6      	; 0x258c <xTaskPriorityDisinherit+0xac>
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	01 c0       	rjmp	.+2      	; 0x258c <xTaskPriorityDisinherit+0xac>
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	1f 91       	pop	r17
    2592:	0f 91       	pop	r16
    2594:	08 95       	ret

00002596 <vTaskPriorityDisinheritAfterTimeout>:
    2596:	0f 93       	push	r16
    2598:	1f 93       	push	r17
    259a:	cf 93       	push	r28
    259c:	df 93       	push	r29
    259e:	fc 01       	movw	r30, r24
    25a0:	89 2b       	or	r24, r25
    25a2:	09 f4       	brne	.+2      	; 0x25a6 <vTaskPriorityDisinheritAfterTimeout+0x10>
    25a4:	5a c0       	rjmp	.+180    	; 0x265a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    25a6:	85 a5       	ldd	r24, Z+45	; 0x2d
    25a8:	86 17       	cp	r24, r22
    25aa:	08 f4       	brcc	.+2      	; 0x25ae <vTaskPriorityDisinheritAfterTimeout+0x18>
    25ac:	86 2f       	mov	r24, r22
    25ae:	92 8d       	ldd	r25, Z+26	; 0x1a
    25b0:	89 17       	cp	r24, r25
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <vTaskPriorityDisinheritAfterTimeout+0x20>
    25b4:	52 c0       	rjmp	.+164    	; 0x265a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    25b6:	26 a5       	ldd	r18, Z+46	; 0x2e
    25b8:	21 30       	cpi	r18, 0x01	; 1
    25ba:	09 f0       	breq	.+2      	; 0x25be <vTaskPriorityDisinheritAfterTimeout+0x28>
    25bc:	4e c0       	rjmp	.+156    	; 0x265a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    25be:	82 8f       	std	Z+26, r24	; 0x1a
    25c0:	46 85       	ldd	r20, Z+14	; 0x0e
    25c2:	57 85       	ldd	r21, Z+15	; 0x0f
    25c4:	60 89       	ldd	r22, Z+16	; 0x10
    25c6:	71 89       	ldd	r23, Z+17	; 0x11
    25c8:	77 23       	and	r23, r23
    25ca:	64 f0       	brlt	.+24     	; 0x25e4 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    25cc:	4a e0       	ldi	r20, 0x0A	; 10
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	48 1b       	sub	r20, r24
    25d6:	51 09       	sbc	r21, r1
    25d8:	61 09       	sbc	r22, r1
    25da:	71 09       	sbc	r23, r1
    25dc:	46 87       	std	Z+14, r20	; 0x0e
    25de:	57 87       	std	Z+15, r21	; 0x0f
    25e0:	60 8b       	std	Z+16, r22	; 0x10
    25e2:	71 8b       	std	Z+17, r23	; 0x11
    25e4:	24 85       	ldd	r18, Z+12	; 0x0c
    25e6:	35 85       	ldd	r19, Z+13	; 0x0d
    25e8:	4b e0       	ldi	r20, 0x0B	; 11
    25ea:	94 9f       	mul	r25, r20
    25ec:	c0 01       	movw	r24, r0
    25ee:	11 24       	eor	r1, r1
    25f0:	85 5c       	subi	r24, 0xC5	; 197
    25f2:	9c 4e       	sbci	r25, 0xEC	; 236
    25f4:	28 17       	cp	r18, r24
    25f6:	39 07       	cpc	r19, r25
    25f8:	81 f5       	brne	.+96     	; 0x265a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    25fa:	ef 01       	movw	r28, r30
    25fc:	8f 01       	movw	r16, r30
    25fe:	0e 5f       	subi	r16, 0xFE	; 254
    2600:	1f 4f       	sbci	r17, 0xFF	; 255
    2602:	c8 01       	movw	r24, r16
    2604:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <uxListRemove>
    2608:	ea 8d       	ldd	r30, Y+26	; 0x1a
    260a:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    260e:	8e 17       	cp	r24, r30
    2610:	10 f4       	brcc	.+4      	; 0x2616 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2612:	e0 93 f9 12 	sts	0x12F9, r30	; 0x8012f9 <uxTopReadyPriority>
    2616:	8b e0       	ldi	r24, 0x0B	; 11
    2618:	8e 9f       	mul	r24, r30
    261a:	f0 01       	movw	r30, r0
    261c:	11 24       	eor	r1, r1
    261e:	e5 5c       	subi	r30, 0xC5	; 197
    2620:	fc 4e       	sbci	r31, 0xEC	; 236
    2622:	01 80       	ldd	r0, Z+1	; 0x01
    2624:	f2 81       	ldd	r31, Z+2	; 0x02
    2626:	e0 2d       	mov	r30, r0
    2628:	ff 83       	std	Y+7, r31	; 0x07
    262a:	ee 83       	std	Y+6, r30	; 0x06
    262c:	26 81       	ldd	r18, Z+6	; 0x06
    262e:	37 81       	ldd	r19, Z+7	; 0x07
    2630:	39 87       	std	Y+9, r19	; 0x09
    2632:	28 87       	std	Y+8, r18	; 0x08
    2634:	a6 81       	ldd	r26, Z+6	; 0x06
    2636:	b7 81       	ldd	r27, Z+7	; 0x07
    2638:	15 96       	adiw	r26, 0x05	; 5
    263a:	1c 93       	st	X, r17
    263c:	0e 93       	st	-X, r16
    263e:	14 97       	sbiw	r26, 0x04	; 4
    2640:	17 83       	std	Z+7, r17	; 0x07
    2642:	06 83       	std	Z+6, r16	; 0x06
    2644:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2646:	8e 9f       	mul	r24, r30
    2648:	f0 01       	movw	r30, r0
    264a:	11 24       	eor	r1, r1
    264c:	e5 5c       	subi	r30, 0xC5	; 197
    264e:	fc 4e       	sbci	r31, 0xEC	; 236
    2650:	fd 87       	std	Y+13, r31	; 0x0d
    2652:	ec 87       	std	Y+12, r30	; 0x0c
    2654:	80 81       	ld	r24, Z
    2656:	8f 5f       	subi	r24, 0xFF	; 255
    2658:	80 83       	st	Z, r24
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	08 95       	ret

00002664 <pvTaskIncrementMutexHeldCount>:
    2664:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2668:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    266c:	89 2b       	or	r24, r25
    266e:	39 f0       	breq	.+14     	; 0x267e <pvTaskIncrementMutexHeldCount+0x1a>
    2670:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2674:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2678:	86 a5       	ldd	r24, Z+46	; 0x2e
    267a:	8f 5f       	subi	r24, 0xFF	; 255
    267c:	86 a7       	std	Z+46, r24	; 0x2e
    267e:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2682:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2686:	08 95       	ret

00002688 <xTaskGenericNotifyWait>:
    2688:	4f 92       	push	r4
    268a:	5f 92       	push	r5
    268c:	6f 92       	push	r6
    268e:	7f 92       	push	r7
    2690:	af 92       	push	r10
    2692:	bf 92       	push	r11
    2694:	cf 92       	push	r12
    2696:	df 92       	push	r13
    2698:	ef 92       	push	r14
    269a:	ff 92       	push	r15
    269c:	0f 93       	push	r16
    269e:	1f 93       	push	r17
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	28 01       	movw	r4, r16
    26a6:	39 01       	movw	r6, r18
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	0f 92       	push	r0
    26ae:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    26b2:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    26b6:	c8 2f       	mov	r28, r24
    26b8:	d0 e0       	ldi	r29, 0x00	; 0
    26ba:	ec 0f       	add	r30, r28
    26bc:	fd 1f       	adc	r31, r29
    26be:	83 a9       	ldd	r24, Z+51	; 0x33
    26c0:	82 30       	cpi	r24, 0x02	; 2
    26c2:	71 f1       	breq	.+92     	; 0x2720 <xTaskGenericNotifyWait+0x98>
    26c4:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    26c8:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    26cc:	ce 01       	movw	r24, r28
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	e8 0f       	add	r30, r24
    26d8:	f9 1f       	adc	r31, r25
    26da:	87 a5       	ldd	r24, Z+47	; 0x2f
    26dc:	90 a9       	ldd	r25, Z+48	; 0x30
    26de:	a1 a9       	ldd	r26, Z+49	; 0x31
    26e0:	b2 a9       	ldd	r27, Z+50	; 0x32
    26e2:	40 95       	com	r20
    26e4:	50 95       	com	r21
    26e6:	60 95       	com	r22
    26e8:	70 95       	com	r23
    26ea:	48 23       	and	r20, r24
    26ec:	59 23       	and	r21, r25
    26ee:	6a 23       	and	r22, r26
    26f0:	7b 23       	and	r23, r27
    26f2:	47 a7       	std	Z+47, r20	; 0x2f
    26f4:	50 ab       	std	Z+48, r21	; 0x30
    26f6:	61 ab       	std	Z+49, r22	; 0x31
    26f8:	72 ab       	std	Z+50, r23	; 0x32
    26fa:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    26fe:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2702:	ec 0f       	add	r30, r28
    2704:	fd 1f       	adc	r31, r29
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	83 ab       	std	Z+51, r24	; 0x33
    270a:	a1 14       	cp	r10, r1
    270c:	b1 04       	cpc	r11, r1
    270e:	c1 04       	cpc	r12, r1
    2710:	d1 04       	cpc	r13, r1
    2712:	31 f0       	breq	.+12     	; 0x2720 <xTaskGenericNotifyWait+0x98>
    2714:	41 e0       	ldi	r20, 0x01	; 1
    2716:	c6 01       	movw	r24, r12
    2718:	b5 01       	movw	r22, r10
    271a:	ed d8       	rcall	.-3622   	; 0x18f6 <prvAddCurrentTaskToDelayedList>
    271c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <vPortYield>
    2720:	0f 90       	pop	r0
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	0f 92       	push	r0
    272a:	e1 14       	cp	r14, r1
    272c:	f1 04       	cpc	r15, r1
    272e:	a1 f0       	breq	.+40     	; 0x2758 <xTaskGenericNotifyWait+0xd0>
    2730:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2734:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2738:	ce 01       	movw	r24, r28
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	88 0f       	add	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	e8 0f       	add	r30, r24
    2744:	f9 1f       	adc	r31, r25
    2746:	87 a5       	ldd	r24, Z+47	; 0x2f
    2748:	90 a9       	ldd	r25, Z+48	; 0x30
    274a:	a1 a9       	ldd	r26, Z+49	; 0x31
    274c:	b2 a9       	ldd	r27, Z+50	; 0x32
    274e:	f7 01       	movw	r30, r14
    2750:	80 83       	st	Z, r24
    2752:	91 83       	std	Z+1, r25	; 0x01
    2754:	a2 83       	std	Z+2, r26	; 0x02
    2756:	b3 83       	std	Z+3, r27	; 0x03
    2758:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    275c:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2760:	ec 0f       	add	r30, r28
    2762:	fd 1f       	adc	r31, r29
    2764:	83 a9       	ldd	r24, Z+51	; 0x33
    2766:	82 30       	cpi	r24, 0x02	; 2
    2768:	e9 f4       	brne	.+58     	; 0x27a4 <xTaskGenericNotifyWait+0x11c>
    276a:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    276e:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2772:	ce 01       	movw	r24, r28
    2774:	88 0f       	add	r24, r24
    2776:	99 1f       	adc	r25, r25
    2778:	88 0f       	add	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	e8 0f       	add	r30, r24
    277e:	f9 1f       	adc	r31, r25
    2780:	87 a5       	ldd	r24, Z+47	; 0x2f
    2782:	90 a9       	ldd	r25, Z+48	; 0x30
    2784:	a1 a9       	ldd	r26, Z+49	; 0x31
    2786:	b2 a9       	ldd	r27, Z+50	; 0x32
    2788:	40 94       	com	r4
    278a:	50 94       	com	r5
    278c:	60 94       	com	r6
    278e:	70 94       	com	r7
    2790:	48 22       	and	r4, r24
    2792:	59 22       	and	r5, r25
    2794:	6a 22       	and	r6, r26
    2796:	7b 22       	and	r7, r27
    2798:	47 a6       	std	Z+47, r4	; 0x2f
    279a:	50 aa       	std	Z+48, r5	; 0x30
    279c:	61 aa       	std	Z+49, r6	; 0x31
    279e:	72 aa       	std	Z+50, r7	; 0x32
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	01 c0       	rjmp	.+2      	; 0x27a6 <xTaskGenericNotifyWait+0x11e>
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	20 91 a9 13 	lds	r18, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    27aa:	30 91 aa 13 	lds	r19, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    27ae:	c2 0f       	add	r28, r18
    27b0:	d3 1f       	adc	r29, r19
    27b2:	1b aa       	std	Y+51, r1	; 0x33
    27b4:	0f 90       	pop	r0
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	ff 90       	pop	r15
    27c2:	ef 90       	pop	r14
    27c4:	df 90       	pop	r13
    27c6:	cf 90       	pop	r12
    27c8:	bf 90       	pop	r11
    27ca:	af 90       	pop	r10
    27cc:	7f 90       	pop	r7
    27ce:	6f 90       	pop	r6
    27d0:	5f 90       	pop	r5
    27d2:	4f 90       	pop	r4
    27d4:	08 95       	ret

000027d6 <xTaskGenericNotify>:
    27d6:	8f 92       	push	r8
    27d8:	9f 92       	push	r9
    27da:	af 92       	push	r10
    27dc:	bf 92       	push	r11
    27de:	ef 92       	push	r14
    27e0:	ff 92       	push	r15
    27e2:	0f 93       	push	r16
    27e4:	cf 93       	push	r28
    27e6:	df 93       	push	r29
    27e8:	dc 01       	movw	r26, r24
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	f8 94       	cli
    27ee:	0f 92       	push	r0
    27f0:	e1 14       	cp	r14, r1
    27f2:	f1 04       	cpc	r15, r1
    27f4:	89 f0       	breq	.+34     	; 0x2818 <xTaskGenericNotify+0x42>
    27f6:	e6 2f       	mov	r30, r22
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	ee 0f       	add	r30, r30
    27fc:	ff 1f       	adc	r31, r31
    27fe:	ee 0f       	add	r30, r30
    2800:	ff 1f       	adc	r31, r31
    2802:	e8 0f       	add	r30, r24
    2804:	f9 1f       	adc	r31, r25
    2806:	87 a4       	ldd	r8, Z+47	; 0x2f
    2808:	90 a8       	ldd	r9, Z+48	; 0x30
    280a:	a1 a8       	ldd	r10, Z+49	; 0x31
    280c:	b2 a8       	ldd	r11, Z+50	; 0x32
    280e:	f7 01       	movw	r30, r14
    2810:	80 82       	st	Z, r8
    2812:	91 82       	std	Z+1, r9	; 0x01
    2814:	a2 82       	std	Z+2, r10	; 0x02
    2816:	b3 82       	std	Z+3, r11	; 0x03
    2818:	70 e0       	ldi	r23, 0x00	; 0
    281a:	fd 01       	movw	r30, r26
    281c:	e6 0f       	add	r30, r22
    281e:	f7 1f       	adc	r31, r23
    2820:	83 a9       	ldd	r24, Z+51	; 0x33
    2822:	92 e0       	ldi	r25, 0x02	; 2
    2824:	93 ab       	std	Z+51, r25	; 0x33
    2826:	02 30       	cpi	r16, 0x02	; 2
    2828:	01 f1       	breq	.+64     	; 0x286a <xTaskGenericNotify+0x94>
    282a:	18 f4       	brcc	.+6      	; 0x2832 <xTaskGenericNotify+0x5c>
    282c:	01 30       	cpi	r16, 0x01	; 1
    282e:	31 f0       	breq	.+12     	; 0x283c <xTaskGenericNotify+0x66>
    2830:	4d c0       	rjmp	.+154    	; 0x28cc <xTaskGenericNotify+0xf6>
    2832:	03 30       	cpi	r16, 0x03	; 3
    2834:	79 f1       	breq	.+94     	; 0x2894 <xTaskGenericNotify+0xbe>
    2836:	04 30       	cpi	r16, 0x04	; 4
    2838:	d1 f1       	breq	.+116    	; 0x28ae <xTaskGenericNotify+0xd8>
    283a:	48 c0       	rjmp	.+144    	; 0x28cc <xTaskGenericNotify+0xf6>
    283c:	66 0f       	add	r22, r22
    283e:	77 1f       	adc	r23, r23
    2840:	66 0f       	add	r22, r22
    2842:	77 1f       	adc	r23, r23
    2844:	fd 01       	movw	r30, r26
    2846:	e6 0f       	add	r30, r22
    2848:	f7 1f       	adc	r31, r23
    284a:	87 a4       	ldd	r8, Z+47	; 0x2f
    284c:	90 a8       	ldd	r9, Z+48	; 0x30
    284e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2850:	b2 a8       	ldd	r11, Z+50	; 0x32
    2852:	ba 01       	movw	r22, r20
    2854:	a9 01       	movw	r20, r18
    2856:	48 29       	or	r20, r8
    2858:	59 29       	or	r21, r9
    285a:	6a 29       	or	r22, r10
    285c:	7b 29       	or	r23, r11
    285e:	47 a7       	std	Z+47, r20	; 0x2f
    2860:	50 ab       	std	Z+48, r21	; 0x30
    2862:	61 ab       	std	Z+49, r22	; 0x31
    2864:	72 ab       	std	Z+50, r23	; 0x32
    2866:	01 e0       	ldi	r16, 0x01	; 1
    2868:	34 c0       	rjmp	.+104    	; 0x28d2 <xTaskGenericNotify+0xfc>
    286a:	66 0f       	add	r22, r22
    286c:	77 1f       	adc	r23, r23
    286e:	66 0f       	add	r22, r22
    2870:	77 1f       	adc	r23, r23
    2872:	fd 01       	movw	r30, r26
    2874:	e6 0f       	add	r30, r22
    2876:	f7 1f       	adc	r31, r23
    2878:	47 a5       	ldd	r20, Z+47	; 0x2f
    287a:	50 a9       	ldd	r21, Z+48	; 0x30
    287c:	61 a9       	ldd	r22, Z+49	; 0x31
    287e:	72 a9       	ldd	r23, Z+50	; 0x32
    2880:	4f 5f       	subi	r20, 0xFF	; 255
    2882:	5f 4f       	sbci	r21, 0xFF	; 255
    2884:	6f 4f       	sbci	r22, 0xFF	; 255
    2886:	7f 4f       	sbci	r23, 0xFF	; 255
    2888:	47 a7       	std	Z+47, r20	; 0x2f
    288a:	50 ab       	std	Z+48, r21	; 0x30
    288c:	61 ab       	std	Z+49, r22	; 0x31
    288e:	72 ab       	std	Z+50, r23	; 0x32
    2890:	01 e0       	ldi	r16, 0x01	; 1
    2892:	1f c0       	rjmp	.+62     	; 0x28d2 <xTaskGenericNotify+0xfc>
    2894:	66 0f       	add	r22, r22
    2896:	77 1f       	adc	r23, r23
    2898:	66 0f       	add	r22, r22
    289a:	77 1f       	adc	r23, r23
    289c:	fd 01       	movw	r30, r26
    289e:	e6 0f       	add	r30, r22
    28a0:	f7 1f       	adc	r31, r23
    28a2:	27 a7       	std	Z+47, r18	; 0x2f
    28a4:	30 ab       	std	Z+48, r19	; 0x30
    28a6:	41 ab       	std	Z+49, r20	; 0x31
    28a8:	52 ab       	std	Z+50, r21	; 0x32
    28aa:	01 e0       	ldi	r16, 0x01	; 1
    28ac:	12 c0       	rjmp	.+36     	; 0x28d2 <xTaskGenericNotify+0xfc>
    28ae:	82 30       	cpi	r24, 0x02	; 2
    28b0:	79 f0       	breq	.+30     	; 0x28d0 <xTaskGenericNotify+0xfa>
    28b2:	66 0f       	add	r22, r22
    28b4:	77 1f       	adc	r23, r23
    28b6:	66 0f       	add	r22, r22
    28b8:	77 1f       	adc	r23, r23
    28ba:	fd 01       	movw	r30, r26
    28bc:	e6 0f       	add	r30, r22
    28be:	f7 1f       	adc	r31, r23
    28c0:	27 a7       	std	Z+47, r18	; 0x2f
    28c2:	30 ab       	std	Z+48, r19	; 0x30
    28c4:	41 ab       	std	Z+49, r20	; 0x31
    28c6:	52 ab       	std	Z+50, r21	; 0x32
    28c8:	01 e0       	ldi	r16, 0x01	; 1
    28ca:	03 c0       	rjmp	.+6      	; 0x28d2 <xTaskGenericNotify+0xfc>
    28cc:	01 e0       	ldi	r16, 0x01	; 1
    28ce:	01 c0       	rjmp	.+2      	; 0x28d2 <xTaskGenericNotify+0xfc>
    28d0:	00 e0       	ldi	r16, 0x00	; 0
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	09 f0       	breq	.+2      	; 0x28d8 <xTaskGenericNotify+0x102>
    28d6:	69 c0       	rjmp	.+210    	; 0x29aa <xTaskGenericNotify+0x1d4>
    28d8:	1c 96       	adiw	r26, 0x0c	; 12
    28da:	ed 91       	ld	r30, X+
    28dc:	fc 91       	ld	r31, X
    28de:	1d 97       	sbiw	r26, 0x0d	; 13
    28e0:	16 96       	adiw	r26, 0x06	; 6
    28e2:	cd 91       	ld	r28, X+
    28e4:	dc 91       	ld	r29, X
    28e6:	17 97       	sbiw	r26, 0x07	; 7
    28e8:	18 96       	adiw	r26, 0x08	; 8
    28ea:	8d 91       	ld	r24, X+
    28ec:	9c 91       	ld	r25, X
    28ee:	19 97       	sbiw	r26, 0x09	; 9
    28f0:	9f 83       	std	Y+7, r25	; 0x07
    28f2:	8e 83       	std	Y+6, r24	; 0x06
    28f4:	18 96       	adiw	r26, 0x08	; 8
    28f6:	cd 91       	ld	r28, X+
    28f8:	dc 91       	ld	r29, X
    28fa:	19 97       	sbiw	r26, 0x09	; 9
    28fc:	16 96       	adiw	r26, 0x06	; 6
    28fe:	8d 91       	ld	r24, X+
    2900:	9c 91       	ld	r25, X
    2902:	17 97       	sbiw	r26, 0x07	; 7
    2904:	9d 83       	std	Y+5, r25	; 0x05
    2906:	8c 83       	std	Y+4, r24	; 0x04
    2908:	81 81       	ldd	r24, Z+1	; 0x01
    290a:	92 81       	ldd	r25, Z+2	; 0x02
    290c:	9d 01       	movw	r18, r26
    290e:	2e 5f       	subi	r18, 0xFE	; 254
    2910:	3f 4f       	sbci	r19, 0xFF	; 255
    2912:	82 17       	cp	r24, r18
    2914:	93 07       	cpc	r25, r19
    2916:	31 f4       	brne	.+12     	; 0x2924 <xTaskGenericNotify+0x14e>
    2918:	18 96       	adiw	r26, 0x08	; 8
    291a:	8d 91       	ld	r24, X+
    291c:	9c 91       	ld	r25, X
    291e:	19 97       	sbiw	r26, 0x09	; 9
    2920:	92 83       	std	Z+2, r25	; 0x02
    2922:	81 83       	std	Z+1, r24	; 0x01
    2924:	1d 96       	adiw	r26, 0x0d	; 13
    2926:	1c 92       	st	X, r1
    2928:	1e 92       	st	-X, r1
    292a:	1c 97       	sbiw	r26, 0x0c	; 12
    292c:	80 81       	ld	r24, Z
    292e:	81 50       	subi	r24, 0x01	; 1
    2930:	80 83       	st	Z, r24
    2932:	5a 96       	adiw	r26, 0x1a	; 26
    2934:	ec 91       	ld	r30, X
    2936:	5a 97       	sbiw	r26, 0x1a	; 26
    2938:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    293c:	8e 17       	cp	r24, r30
    293e:	10 f4       	brcc	.+4      	; 0x2944 <xTaskGenericNotify+0x16e>
    2940:	e0 93 f9 12 	sts	0x12F9, r30	; 0x8012f9 <uxTopReadyPriority>
    2944:	8b e0       	ldi	r24, 0x0B	; 11
    2946:	8e 9f       	mul	r24, r30
    2948:	f0 01       	movw	r30, r0
    294a:	11 24       	eor	r1, r1
    294c:	e5 5c       	subi	r30, 0xC5	; 197
    294e:	fc 4e       	sbci	r31, 0xEC	; 236
    2950:	01 80       	ldd	r0, Z+1	; 0x01
    2952:	f2 81       	ldd	r31, Z+2	; 0x02
    2954:	e0 2d       	mov	r30, r0
    2956:	17 96       	adiw	r26, 0x07	; 7
    2958:	fc 93       	st	X, r31
    295a:	ee 93       	st	-X, r30
    295c:	16 97       	sbiw	r26, 0x06	; 6
    295e:	46 81       	ldd	r20, Z+6	; 0x06
    2960:	57 81       	ldd	r21, Z+7	; 0x07
    2962:	19 96       	adiw	r26, 0x09	; 9
    2964:	5c 93       	st	X, r21
    2966:	4e 93       	st	-X, r20
    2968:	18 97       	sbiw	r26, 0x08	; 8
    296a:	c6 81       	ldd	r28, Z+6	; 0x06
    296c:	d7 81       	ldd	r29, Z+7	; 0x07
    296e:	3d 83       	std	Y+5, r19	; 0x05
    2970:	2c 83       	std	Y+4, r18	; 0x04
    2972:	37 83       	std	Z+7, r19	; 0x07
    2974:	26 83       	std	Z+6, r18	; 0x06
    2976:	5a 96       	adiw	r26, 0x1a	; 26
    2978:	ec 91       	ld	r30, X
    297a:	5a 97       	sbiw	r26, 0x1a	; 26
    297c:	8e 9f       	mul	r24, r30
    297e:	f0 01       	movw	r30, r0
    2980:	11 24       	eor	r1, r1
    2982:	e5 5c       	subi	r30, 0xC5	; 197
    2984:	fc 4e       	sbci	r31, 0xEC	; 236
    2986:	1d 96       	adiw	r26, 0x0d	; 13
    2988:	fc 93       	st	X, r31
    298a:	ee 93       	st	-X, r30
    298c:	1c 97       	sbiw	r26, 0x0c	; 12
    298e:	80 81       	ld	r24, Z
    2990:	8f 5f       	subi	r24, 0xFF	; 255
    2992:	80 83       	st	Z, r24
    2994:	5a 96       	adiw	r26, 0x1a	; 26
    2996:	9c 91       	ld	r25, X
    2998:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    299c:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    29a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    29a2:	89 17       	cp	r24, r25
    29a4:	10 f4       	brcc	.+4      	; 0x29aa <xTaskGenericNotify+0x1d4>
    29a6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <vPortYield>
    29aa:	0f 90       	pop	r0
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	80 2f       	mov	r24, r16
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	0f 91       	pop	r16
    29b6:	ff 90       	pop	r15
    29b8:	ef 90       	pop	r14
    29ba:	bf 90       	pop	r11
    29bc:	af 90       	pop	r10
    29be:	9f 90       	pop	r9
    29c0:	8f 90       	pop	r8
    29c2:	08 95       	ret

000029c4 <xTaskGenericNotifyFromISR>:
    29c4:	8f 92       	push	r8
    29c6:	9f 92       	push	r9
    29c8:	af 92       	push	r10
    29ca:	bf 92       	push	r11
    29cc:	cf 92       	push	r12
    29ce:	df 92       	push	r13
    29d0:	ef 92       	push	r14
    29d2:	ff 92       	push	r15
    29d4:	0f 93       	push	r16
    29d6:	cf 93       	push	r28
    29d8:	df 93       	push	r29
    29da:	dc 01       	movw	r26, r24
    29dc:	e1 14       	cp	r14, r1
    29de:	f1 04       	cpc	r15, r1
    29e0:	89 f0       	breq	.+34     	; 0x2a04 <xTaskGenericNotifyFromISR+0x40>
    29e2:	e6 2f       	mov	r30, r22
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	ee 0f       	add	r30, r30
    29e8:	ff 1f       	adc	r31, r31
    29ea:	ee 0f       	add	r30, r30
    29ec:	ff 1f       	adc	r31, r31
    29ee:	e8 0f       	add	r30, r24
    29f0:	f9 1f       	adc	r31, r25
    29f2:	87 a4       	ldd	r8, Z+47	; 0x2f
    29f4:	90 a8       	ldd	r9, Z+48	; 0x30
    29f6:	a1 a8       	ldd	r10, Z+49	; 0x31
    29f8:	b2 a8       	ldd	r11, Z+50	; 0x32
    29fa:	f7 01       	movw	r30, r14
    29fc:	80 82       	st	Z, r8
    29fe:	91 82       	std	Z+1, r9	; 0x01
    2a00:	a2 82       	std	Z+2, r10	; 0x02
    2a02:	b3 82       	std	Z+3, r11	; 0x03
    2a04:	70 e0       	ldi	r23, 0x00	; 0
    2a06:	fd 01       	movw	r30, r26
    2a08:	e6 0f       	add	r30, r22
    2a0a:	f7 1f       	adc	r31, r23
    2a0c:	93 a9       	ldd	r25, Z+51	; 0x33
    2a0e:	82 e0       	ldi	r24, 0x02	; 2
    2a10:	83 ab       	std	Z+51, r24	; 0x33
    2a12:	02 30       	cpi	r16, 0x02	; 2
    2a14:	01 f1       	breq	.+64     	; 0x2a56 <xTaskGenericNotifyFromISR+0x92>
    2a16:	18 f4       	brcc	.+6      	; 0x2a1e <xTaskGenericNotifyFromISR+0x5a>
    2a18:	01 30       	cpi	r16, 0x01	; 1
    2a1a:	31 f0       	breq	.+12     	; 0x2a28 <xTaskGenericNotifyFromISR+0x64>
    2a1c:	4d c0       	rjmp	.+154    	; 0x2ab8 <xTaskGenericNotifyFromISR+0xf4>
    2a1e:	03 30       	cpi	r16, 0x03	; 3
    2a20:	79 f1       	breq	.+94     	; 0x2a80 <xTaskGenericNotifyFromISR+0xbc>
    2a22:	04 30       	cpi	r16, 0x04	; 4
    2a24:	d1 f1       	breq	.+116    	; 0x2a9a <xTaskGenericNotifyFromISR+0xd6>
    2a26:	48 c0       	rjmp	.+144    	; 0x2ab8 <xTaskGenericNotifyFromISR+0xf4>
    2a28:	66 0f       	add	r22, r22
    2a2a:	77 1f       	adc	r23, r23
    2a2c:	66 0f       	add	r22, r22
    2a2e:	77 1f       	adc	r23, r23
    2a30:	fd 01       	movw	r30, r26
    2a32:	e6 0f       	add	r30, r22
    2a34:	f7 1f       	adc	r31, r23
    2a36:	87 a4       	ldd	r8, Z+47	; 0x2f
    2a38:	90 a8       	ldd	r9, Z+48	; 0x30
    2a3a:	a1 a8       	ldd	r10, Z+49	; 0x31
    2a3c:	b2 a8       	ldd	r11, Z+50	; 0x32
    2a3e:	ba 01       	movw	r22, r20
    2a40:	a9 01       	movw	r20, r18
    2a42:	48 29       	or	r20, r8
    2a44:	59 29       	or	r21, r9
    2a46:	6a 29       	or	r22, r10
    2a48:	7b 29       	or	r23, r11
    2a4a:	47 a7       	std	Z+47, r20	; 0x2f
    2a4c:	50 ab       	std	Z+48, r21	; 0x30
    2a4e:	61 ab       	std	Z+49, r22	; 0x31
    2a50:	72 ab       	std	Z+50, r23	; 0x32
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	34 c0       	rjmp	.+104    	; 0x2abe <xTaskGenericNotifyFromISR+0xfa>
    2a56:	66 0f       	add	r22, r22
    2a58:	77 1f       	adc	r23, r23
    2a5a:	66 0f       	add	r22, r22
    2a5c:	77 1f       	adc	r23, r23
    2a5e:	fd 01       	movw	r30, r26
    2a60:	e6 0f       	add	r30, r22
    2a62:	f7 1f       	adc	r31, r23
    2a64:	47 a5       	ldd	r20, Z+47	; 0x2f
    2a66:	50 a9       	ldd	r21, Z+48	; 0x30
    2a68:	61 a9       	ldd	r22, Z+49	; 0x31
    2a6a:	72 a9       	ldd	r23, Z+50	; 0x32
    2a6c:	4f 5f       	subi	r20, 0xFF	; 255
    2a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a70:	6f 4f       	sbci	r22, 0xFF	; 255
    2a72:	7f 4f       	sbci	r23, 0xFF	; 255
    2a74:	47 a7       	std	Z+47, r20	; 0x2f
    2a76:	50 ab       	std	Z+48, r21	; 0x30
    2a78:	61 ab       	std	Z+49, r22	; 0x31
    2a7a:	72 ab       	std	Z+50, r23	; 0x32
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	1f c0       	rjmp	.+62     	; 0x2abe <xTaskGenericNotifyFromISR+0xfa>
    2a80:	66 0f       	add	r22, r22
    2a82:	77 1f       	adc	r23, r23
    2a84:	66 0f       	add	r22, r22
    2a86:	77 1f       	adc	r23, r23
    2a88:	fd 01       	movw	r30, r26
    2a8a:	e6 0f       	add	r30, r22
    2a8c:	f7 1f       	adc	r31, r23
    2a8e:	27 a7       	std	Z+47, r18	; 0x2f
    2a90:	30 ab       	std	Z+48, r19	; 0x30
    2a92:	41 ab       	std	Z+49, r20	; 0x31
    2a94:	52 ab       	std	Z+50, r21	; 0x32
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	12 c0       	rjmp	.+36     	; 0x2abe <xTaskGenericNotifyFromISR+0xfa>
    2a9a:	92 30       	cpi	r25, 0x02	; 2
    2a9c:	79 f0       	breq	.+30     	; 0x2abc <xTaskGenericNotifyFromISR+0xf8>
    2a9e:	66 0f       	add	r22, r22
    2aa0:	77 1f       	adc	r23, r23
    2aa2:	66 0f       	add	r22, r22
    2aa4:	77 1f       	adc	r23, r23
    2aa6:	fd 01       	movw	r30, r26
    2aa8:	e6 0f       	add	r30, r22
    2aaa:	f7 1f       	adc	r31, r23
    2aac:	27 a7       	std	Z+47, r18	; 0x2f
    2aae:	30 ab       	std	Z+48, r19	; 0x30
    2ab0:	41 ab       	std	Z+49, r20	; 0x31
    2ab2:	52 ab       	std	Z+50, r21	; 0x32
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	03 c0       	rjmp	.+6      	; 0x2abe <xTaskGenericNotifyFromISR+0xfa>
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	01 c0       	rjmp	.+2      	; 0x2abe <xTaskGenericNotifyFromISR+0xfa>
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	91 30       	cpi	r25, 0x01	; 1
    2ac0:	09 f0       	breq	.+2      	; 0x2ac4 <xTaskGenericNotifyFromISR+0x100>
    2ac2:	96 c0       	rjmp	.+300    	; 0x2bf0 <xTaskGenericNotifyFromISR+0x22c>
    2ac4:	90 91 ea 12 	lds	r25, 0x12EA	; 0x8012ea <uxSchedulerSuspended>
    2ac8:	91 11       	cpse	r25, r1
    2aca:	5f c0       	rjmp	.+190    	; 0x2b8a <xTaskGenericNotifyFromISR+0x1c6>
    2acc:	1c 96       	adiw	r26, 0x0c	; 12
    2ace:	ed 91       	ld	r30, X+
    2ad0:	fc 91       	ld	r31, X
    2ad2:	1d 97       	sbiw	r26, 0x0d	; 13
    2ad4:	16 96       	adiw	r26, 0x06	; 6
    2ad6:	cd 91       	ld	r28, X+
    2ad8:	dc 91       	ld	r29, X
    2ada:	17 97       	sbiw	r26, 0x07	; 7
    2adc:	18 96       	adiw	r26, 0x08	; 8
    2ade:	2d 91       	ld	r18, X+
    2ae0:	3c 91       	ld	r19, X
    2ae2:	19 97       	sbiw	r26, 0x09	; 9
    2ae4:	3f 83       	std	Y+7, r19	; 0x07
    2ae6:	2e 83       	std	Y+6, r18	; 0x06
    2ae8:	18 96       	adiw	r26, 0x08	; 8
    2aea:	cd 91       	ld	r28, X+
    2aec:	dc 91       	ld	r29, X
    2aee:	19 97       	sbiw	r26, 0x09	; 9
    2af0:	16 96       	adiw	r26, 0x06	; 6
    2af2:	2d 91       	ld	r18, X+
    2af4:	3c 91       	ld	r19, X
    2af6:	17 97       	sbiw	r26, 0x07	; 7
    2af8:	3d 83       	std	Y+5, r19	; 0x05
    2afa:	2c 83       	std	Y+4, r18	; 0x04
    2afc:	41 81       	ldd	r20, Z+1	; 0x01
    2afe:	52 81       	ldd	r21, Z+2	; 0x02
    2b00:	9d 01       	movw	r18, r26
    2b02:	2e 5f       	subi	r18, 0xFE	; 254
    2b04:	3f 4f       	sbci	r19, 0xFF	; 255
    2b06:	42 17       	cp	r20, r18
    2b08:	53 07       	cpc	r21, r19
    2b0a:	31 f4       	brne	.+12     	; 0x2b18 <xTaskGenericNotifyFromISR+0x154>
    2b0c:	18 96       	adiw	r26, 0x08	; 8
    2b0e:	4d 91       	ld	r20, X+
    2b10:	5c 91       	ld	r21, X
    2b12:	19 97       	sbiw	r26, 0x09	; 9
    2b14:	52 83       	std	Z+2, r21	; 0x02
    2b16:	41 83       	std	Z+1, r20	; 0x01
    2b18:	1d 96       	adiw	r26, 0x0d	; 13
    2b1a:	1c 92       	st	X, r1
    2b1c:	1e 92       	st	-X, r1
    2b1e:	1c 97       	sbiw	r26, 0x0c	; 12
    2b20:	90 81       	ld	r25, Z
    2b22:	91 50       	subi	r25, 0x01	; 1
    2b24:	90 83       	st	Z, r25
    2b26:	5a 96       	adiw	r26, 0x1a	; 26
    2b28:	ec 91       	ld	r30, X
    2b2a:	5a 97       	sbiw	r26, 0x1a	; 26
    2b2c:	90 91 f9 12 	lds	r25, 0x12F9	; 0x8012f9 <uxTopReadyPriority>
    2b30:	9e 17       	cp	r25, r30
    2b32:	10 f4       	brcc	.+4      	; 0x2b38 <xTaskGenericNotifyFromISR+0x174>
    2b34:	e0 93 f9 12 	sts	0x12F9, r30	; 0x8012f9 <uxTopReadyPriority>
    2b38:	9b e0       	ldi	r25, 0x0B	; 11
    2b3a:	9e 9f       	mul	r25, r30
    2b3c:	f0 01       	movw	r30, r0
    2b3e:	11 24       	eor	r1, r1
    2b40:	e5 5c       	subi	r30, 0xC5	; 197
    2b42:	fc 4e       	sbci	r31, 0xEC	; 236
    2b44:	01 80       	ldd	r0, Z+1	; 0x01
    2b46:	f2 81       	ldd	r31, Z+2	; 0x02
    2b48:	e0 2d       	mov	r30, r0
    2b4a:	17 96       	adiw	r26, 0x07	; 7
    2b4c:	fc 93       	st	X, r31
    2b4e:	ee 93       	st	-X, r30
    2b50:	16 97       	sbiw	r26, 0x06	; 6
    2b52:	46 81       	ldd	r20, Z+6	; 0x06
    2b54:	57 81       	ldd	r21, Z+7	; 0x07
    2b56:	19 96       	adiw	r26, 0x09	; 9
    2b58:	5c 93       	st	X, r21
    2b5a:	4e 93       	st	-X, r20
    2b5c:	18 97       	sbiw	r26, 0x08	; 8
    2b5e:	c6 81       	ldd	r28, Z+6	; 0x06
    2b60:	d7 81       	ldd	r29, Z+7	; 0x07
    2b62:	3d 83       	std	Y+5, r19	; 0x05
    2b64:	2c 83       	std	Y+4, r18	; 0x04
    2b66:	37 83       	std	Z+7, r19	; 0x07
    2b68:	26 83       	std	Z+6, r18	; 0x06
    2b6a:	5a 96       	adiw	r26, 0x1a	; 26
    2b6c:	ec 91       	ld	r30, X
    2b6e:	5a 97       	sbiw	r26, 0x1a	; 26
    2b70:	9e 9f       	mul	r25, r30
    2b72:	f0 01       	movw	r30, r0
    2b74:	11 24       	eor	r1, r1
    2b76:	e5 5c       	subi	r30, 0xC5	; 197
    2b78:	fc 4e       	sbci	r31, 0xEC	; 236
    2b7a:	1d 96       	adiw	r26, 0x0d	; 13
    2b7c:	fc 93       	st	X, r31
    2b7e:	ee 93       	st	-X, r30
    2b80:	1c 97       	sbiw	r26, 0x0c	; 12
    2b82:	90 81       	ld	r25, Z
    2b84:	9f 5f       	subi	r25, 0xFF	; 255
    2b86:	90 83       	st	Z, r25
    2b88:	21 c0       	rjmp	.+66     	; 0x2bcc <xTaskGenericNotifyFromISR+0x208>
    2b8a:	66 e1       	ldi	r22, 0x16	; 22
    2b8c:	73 e1       	ldi	r23, 0x13	; 19
    2b8e:	fb 01       	movw	r30, r22
    2b90:	c1 81       	ldd	r28, Z+1	; 0x01
    2b92:	d2 81       	ldd	r29, Z+2	; 0x02
    2b94:	53 96       	adiw	r26, 0x13	; 19
    2b96:	dc 93       	st	X, r29
    2b98:	ce 93       	st	-X, r28
    2b9a:	52 97       	sbiw	r26, 0x12	; 18
    2b9c:	2e 81       	ldd	r18, Y+6	; 0x06
    2b9e:	3f 81       	ldd	r19, Y+7	; 0x07
    2ba0:	55 96       	adiw	r26, 0x15	; 21
    2ba2:	3c 93       	st	X, r19
    2ba4:	2e 93       	st	-X, r18
    2ba6:	54 97       	sbiw	r26, 0x14	; 20
    2ba8:	4e 81       	ldd	r20, Y+6	; 0x06
    2baa:	5f 81       	ldd	r21, Y+7	; 0x07
    2bac:	9d 01       	movw	r18, r26
    2bae:	22 5f       	subi	r18, 0xF2	; 242
    2bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb2:	fa 01       	movw	r30, r20
    2bb4:	35 83       	std	Z+5, r19	; 0x05
    2bb6:	24 83       	std	Z+4, r18	; 0x04
    2bb8:	3f 83       	std	Y+7, r19	; 0x07
    2bba:	2e 83       	std	Y+6, r18	; 0x06
    2bbc:	59 96       	adiw	r26, 0x19	; 25
    2bbe:	7c 93       	st	X, r23
    2bc0:	6e 93       	st	-X, r22
    2bc2:	58 97       	sbiw	r26, 0x18	; 24
    2bc4:	fb 01       	movw	r30, r22
    2bc6:	90 81       	ld	r25, Z
    2bc8:	9f 5f       	subi	r25, 0xFF	; 255
    2bca:	90 83       	st	Z, r25
    2bcc:	5a 96       	adiw	r26, 0x1a	; 26
    2bce:	2c 91       	ld	r18, X
    2bd0:	e0 91 a9 13 	lds	r30, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2bd4:	f0 91 aa 13 	lds	r31, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>
    2bd8:	92 8d       	ldd	r25, Z+26	; 0x1a
    2bda:	92 17       	cp	r25, r18
    2bdc:	48 f4       	brcc	.+18     	; 0x2bf0 <xTaskGenericNotifyFromISR+0x22c>
    2bde:	c1 14       	cp	r12, r1
    2be0:	d1 04       	cpc	r13, r1
    2be2:	19 f0       	breq	.+6      	; 0x2bea <xTaskGenericNotifyFromISR+0x226>
    2be4:	91 e0       	ldi	r25, 0x01	; 1
    2be6:	f6 01       	movw	r30, r12
    2be8:	90 83       	st	Z, r25
    2bea:	91 e0       	ldi	r25, 0x01	; 1
    2bec:	90 93 f3 12 	sts	0x12F3, r25	; 0x8012f3 <xYieldPending>
    2bf0:	df 91       	pop	r29
    2bf2:	cf 91       	pop	r28
    2bf4:	0f 91       	pop	r16
    2bf6:	ff 90       	pop	r15
    2bf8:	ef 90       	pop	r14
    2bfa:	df 90       	pop	r13
    2bfc:	cf 90       	pop	r12
    2bfe:	bf 90       	pop	r11
    2c00:	af 90       	pop	r10
    2c02:	9f 90       	pop	r9
    2c04:	8f 90       	pop	r8
    2c06:	08 95       	ret

00002c08 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	21 f4       	brne	.+8      	; 0x2c14 <xTaskGenericNotifyStateClear+0xc>
    2c0c:	80 91 a9 13 	lds	r24, 0x13A9	; 0x8013a9 <pxCurrentTCB>
    2c10:	90 91 aa 13 	lds	r25, 0x13AA	; 0x8013aa <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	f8 94       	cli
    2c18:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2c1a:	70 e0       	ldi	r23, 0x00	; 0
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	e6 0f       	add	r30, r22
    2c20:	f7 1f       	adc	r31, r23
    2c22:	23 a9       	ldd	r18, Z+51	; 0x33
    2c24:	22 30       	cpi	r18, 0x02	; 2
    2c26:	31 f4       	brne	.+12     	; 0x2c34 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2c28:	fc 01       	movw	r30, r24
    2c2a:	e6 0f       	add	r30, r22
    2c2c:	f7 1f       	adc	r31, r23
    2c2e:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	01 c0       	rjmp	.+2      	; 0x2c36 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2c34:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2c36:	0f 90       	pop	r0
    2c38:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2c3a:	08 95       	ret

00002c3c <prvGetNextExpireTime>:
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	e0 91 b5 13 	lds	r30, 0x13B5	; 0x8013b5 <pxCurrentTimerList>
    2c42:	f0 91 b6 13 	lds	r31, 0x13B6	; 0x8013b6 <pxCurrentTimerList+0x1>
    2c46:	80 81       	ld	r24, Z
    2c48:	91 e0       	ldi	r25, 0x01	; 1
    2c4a:	81 11       	cpse	r24, r1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	9c 93       	st	X, r25
    2c50:	91 11       	cpse	r25, r1
    2c52:	08 c0       	rjmp	.+16     	; 0x2c64 <prvGetNextExpireTime+0x28>
    2c54:	07 80       	ldd	r0, Z+7	; 0x07
    2c56:	f0 85       	ldd	r31, Z+8	; 0x08
    2c58:	e0 2d       	mov	r30, r0
    2c5a:	60 81       	ld	r22, Z
    2c5c:	71 81       	ldd	r23, Z+1	; 0x01
    2c5e:	82 81       	ldd	r24, Z+2	; 0x02
    2c60:	93 81       	ldd	r25, Z+3	; 0x03
    2c62:	08 95       	ret
    2c64:	60 e0       	ldi	r22, 0x00	; 0
    2c66:	70 e0       	ldi	r23, 0x00	; 0
    2c68:	cb 01       	movw	r24, r22
    2c6a:	08 95       	ret

00002c6c <prvInsertTimerInActiveList>:
    2c6c:	cf 92       	push	r12
    2c6e:	df 92       	push	r13
    2c70:	ef 92       	push	r14
    2c72:	ff 92       	push	r15
    2c74:	0f 93       	push	r16
    2c76:	1f 93       	push	r17
    2c78:	fc 01       	movw	r30, r24
    2c7a:	42 83       	std	Z+2, r20	; 0x02
    2c7c:	53 83       	std	Z+3, r21	; 0x03
    2c7e:	64 83       	std	Z+4, r22	; 0x04
    2c80:	75 83       	std	Z+5, r23	; 0x05
    2c82:	93 87       	std	Z+11, r25	; 0x0b
    2c84:	82 87       	std	Z+10, r24	; 0x0a
    2c86:	04 17       	cp	r16, r20
    2c88:	15 07       	cpc	r17, r21
    2c8a:	26 07       	cpc	r18, r22
    2c8c:	37 07       	cpc	r19, r23
    2c8e:	c0 f0       	brcs	.+48     	; 0x2cc0 <prvInsertTimerInActiveList+0x54>
    2c90:	0c 19       	sub	r16, r12
    2c92:	1d 09       	sbc	r17, r13
    2c94:	2e 09       	sbc	r18, r14
    2c96:	3f 09       	sbc	r19, r15
    2c98:	86 85       	ldd	r24, Z+14	; 0x0e
    2c9a:	97 85       	ldd	r25, Z+15	; 0x0f
    2c9c:	a0 89       	ldd	r26, Z+16	; 0x10
    2c9e:	b1 89       	ldd	r27, Z+17	; 0x11
    2ca0:	08 17       	cp	r16, r24
    2ca2:	19 07       	cpc	r17, r25
    2ca4:	2a 07       	cpc	r18, r26
    2ca6:	3b 07       	cpc	r19, r27
    2ca8:	00 f5       	brcc	.+64     	; 0x2cea <prvInsertTimerInActiveList+0x7e>
    2caa:	bf 01       	movw	r22, r30
    2cac:	6e 5f       	subi	r22, 0xFE	; 254
    2cae:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb0:	80 91 b3 13 	lds	r24, 0x13B3	; 0x8013b3 <pxOverflowTimerList>
    2cb4:	90 91 b4 13 	lds	r25, 0x13B4	; 0x8013b4 <pxOverflowTimerList+0x1>
    2cb8:	0e 94 bf 02 	call	0x57e	; 0x57e <vListInsert>
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	18 c0       	rjmp	.+48     	; 0x2cf0 <prvInsertTimerInActiveList+0x84>
    2cc0:	0c 15       	cp	r16, r12
    2cc2:	1d 05       	cpc	r17, r13
    2cc4:	2e 05       	cpc	r18, r14
    2cc6:	3f 05       	cpc	r19, r15
    2cc8:	28 f4       	brcc	.+10     	; 0x2cd4 <prvInsertTimerInActiveList+0x68>
    2cca:	4c 15       	cp	r20, r12
    2ccc:	5d 05       	cpc	r21, r13
    2cce:	6e 05       	cpc	r22, r14
    2cd0:	7f 05       	cpc	r23, r15
    2cd2:	68 f4       	brcc	.+26     	; 0x2cee <prvInsertTimerInActiveList+0x82>
    2cd4:	bf 01       	movw	r22, r30
    2cd6:	6e 5f       	subi	r22, 0xFE	; 254
    2cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cda:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <pxCurrentTimerList>
    2cde:	90 91 b6 13 	lds	r25, 0x13B6	; 0x8013b6 <pxCurrentTimerList+0x1>
    2ce2:	0e 94 bf 02 	call	0x57e	; 0x57e <vListInsert>
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	03 c0       	rjmp	.+6      	; 0x2cf0 <prvInsertTimerInActiveList+0x84>
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	01 c0       	rjmp	.+2      	; 0x2cf0 <prvInsertTimerInActiveList+0x84>
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	1f 91       	pop	r17
    2cf2:	0f 91       	pop	r16
    2cf4:	ff 90       	pop	r15
    2cf6:	ef 90       	pop	r14
    2cf8:	df 90       	pop	r13
    2cfa:	cf 90       	pop	r12
    2cfc:	08 95       	ret

00002cfe <prvCheckForValidListAndQueue>:
    2cfe:	0f b6       	in	r0, 0x3f	; 63
    2d00:	f8 94       	cli
    2d02:	0f 92       	push	r0
    2d04:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <xTimerQueue>
    2d08:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <xTimerQueue+0x1>
    2d0c:	89 2b       	or	r24, r25
    2d0e:	e9 f4       	brne	.+58     	; 0x2d4a <prvCheckForValidListAndQueue+0x4c>
    2d10:	82 ec       	ldi	r24, 0xC2	; 194
    2d12:	93 e1       	ldi	r25, 0x13	; 19
    2d14:	0e 94 aa 02 	call	0x554	; 0x554 <vListInitialise>
    2d18:	87 eb       	ldi	r24, 0xB7	; 183
    2d1a:	93 e1       	ldi	r25, 0x13	; 19
    2d1c:	0e 94 aa 02 	call	0x554	; 0x554 <vListInitialise>
    2d20:	82 ec       	ldi	r24, 0xC2	; 194
    2d22:	93 e1       	ldi	r25, 0x13	; 19
    2d24:	90 93 b6 13 	sts	0x13B6, r25	; 0x8013b6 <pxCurrentTimerList+0x1>
    2d28:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <pxCurrentTimerList>
    2d2c:	87 eb       	ldi	r24, 0xB7	; 183
    2d2e:	93 e1       	ldi	r25, 0x13	; 19
    2d30:	90 93 b4 13 	sts	0x13B4, r25	; 0x8013b4 <pxOverflowTimerList+0x1>
    2d34:	80 93 b3 13 	sts	0x13B3, r24	; 0x8013b3 <pxOverflowTimerList>
    2d38:	40 e0       	ldi	r20, 0x00	; 0
    2d3a:	67 e0       	ldi	r22, 0x07	; 7
    2d3c:	8a e0       	ldi	r24, 0x0A	; 10
    2d3e:	0e 94 6d 05 	call	0xada	; 0xada <xQueueGenericCreate>
    2d42:	90 93 b2 13 	sts	0x13B2, r25	; 0x8013b2 <xTimerQueue+0x1>
    2d46:	80 93 b1 13 	sts	0x13B1, r24	; 0x8013b1 <xTimerQueue>
    2d4a:	0f 90       	pop	r0
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	08 95       	ret

00002d50 <xTimerCreateTimerTask>:
    2d50:	ef 92       	push	r14
    2d52:	ff 92       	push	r15
    2d54:	0f 93       	push	r16
    2d56:	d3 df       	rcall	.-90     	; 0x2cfe <prvCheckForValidListAndQueue>
    2d58:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <xTimerQueue>
    2d5c:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <xTimerQueue+0x1>
    2d60:	89 2b       	or	r24, r25
    2d62:	91 f0       	breq	.+36     	; 0x2d88 <xTimerCreateTimerTask+0x38>
    2d64:	0f 2e       	mov	r0, r31
    2d66:	ff ea       	ldi	r31, 0xAF	; 175
    2d68:	ef 2e       	mov	r14, r31
    2d6a:	f3 e1       	ldi	r31, 0x13	; 19
    2d6c:	ff 2e       	mov	r15, r31
    2d6e:	f0 2d       	mov	r31, r0
    2d70:	03 e0       	ldi	r16, 0x03	; 3
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	40 ec       	ldi	r20, 0xC0	; 192
    2d78:	50 e0       	ldi	r21, 0x00	; 0
    2d7a:	6c e9       	ldi	r22, 0x9C	; 156
    2d7c:	72 e0       	ldi	r23, 0x02	; 2
    2d7e:	87 ed       	ldi	r24, 0xD7	; 215
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <xTaskCreate>
    2d86:	01 c0       	rjmp	.+2      	; 0x2d8a <xTimerCreateTimerTask+0x3a>
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	0f 91       	pop	r16
    2d8c:	ff 90       	pop	r15
    2d8e:	ef 90       	pop	r14
    2d90:	08 95       	ret

00002d92 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2d92:	8f 92       	push	r8
    2d94:	9f 92       	push	r9
    2d96:	af 92       	push	r10
    2d98:	bf 92       	push	r11
    2d9a:	cf 92       	push	r12
    2d9c:	df 92       	push	r13
    2d9e:	ef 92       	push	r14
    2da0:	ff 92       	push	r15
    2da2:	0f 93       	push	r16
    2da4:	1f 93       	push	r17
    2da6:	cf 93       	push	r28
    2da8:	df 93       	push	r29
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	27 97       	sbiw	r28, 0x07	; 7
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	f8 94       	cli
    2db4:	de bf       	out	0x3e, r29	; 62
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2dba:	e0 91 b1 13 	lds	r30, 0x13B1	; 0x8013b1 <xTimerQueue>
    2dbe:	f0 91 b2 13 	lds	r31, 0x13B2	; 0x8013b2 <xTimerQueue+0x1>
    2dc2:	30 97       	sbiw	r30, 0x00	; 0
    2dc4:	81 f1       	breq	.+96     	; 0x2e26 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2dc6:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2dc8:	2a 83       	std	Y+2, r18	; 0x02
    2dca:	3b 83       	std	Y+3, r19	; 0x03
    2dcc:	4c 83       	std	Y+4, r20	; 0x04
    2dce:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2dd0:	9f 83       	std	Y+7, r25	; 0x07
    2dd2:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2dd4:	66 30       	cpi	r22, 0x06	; 6
    2dd6:	f4 f4       	brge	.+60     	; 0x2e14 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2dd8:	ee da       	rcall	.-2596   	; 0x23b6 <xTaskGetSchedulerState>
    2dda:	82 30       	cpi	r24, 0x02	; 2
    2ddc:	69 f4       	brne	.+26     	; 0x2df8 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2dde:	00 e0       	ldi	r16, 0x00	; 0
    2de0:	a7 01       	movw	r20, r14
    2de2:	96 01       	movw	r18, r12
    2de4:	be 01       	movw	r22, r28
    2de6:	6f 5f       	subi	r22, 0xFF	; 255
    2de8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dea:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <xTimerQueue>
    2dee:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <xTimerQueue+0x1>
    2df2:	0e 94 90 05 	call	0xb20	; 0xb20 <xQueueGenericSend>
    2df6:	18 c0       	rjmp	.+48     	; 0x2e28 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2df8:	00 e0       	ldi	r16, 0x00	; 0
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	a9 01       	movw	r20, r18
    2e00:	be 01       	movw	r22, r28
    2e02:	6f 5f       	subi	r22, 0xFF	; 255
    2e04:	7f 4f       	sbci	r23, 0xFF	; 255
    2e06:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <xTimerQueue>
    2e0a:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <xTimerQueue+0x1>
    2e0e:	0e 94 90 05 	call	0xb20	; 0xb20 <xQueueGenericSend>
    2e12:	0a c0       	rjmp	.+20     	; 0x2e28 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	a8 01       	movw	r20, r16
    2e18:	be 01       	movw	r22, r28
    2e1a:	6f 5f       	subi	r22, 0xFF	; 255
    2e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e1e:	cf 01       	movw	r24, r30
    2e20:	0e 94 40 06 	call	0xc80	; 0xc80 <xQueueGenericSendFromISR>
    2e24:	01 c0       	rjmp	.+2      	; 0x2e28 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2e26:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2e28:	27 96       	adiw	r28, 0x07	; 7
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	df 91       	pop	r29
    2e36:	cf 91       	pop	r28
    2e38:	1f 91       	pop	r17
    2e3a:	0f 91       	pop	r16
    2e3c:	ff 90       	pop	r15
    2e3e:	ef 90       	pop	r14
    2e40:	df 90       	pop	r13
    2e42:	cf 90       	pop	r12
    2e44:	bf 90       	pop	r11
    2e46:	af 90       	pop	r10
    2e48:	9f 90       	pop	r9
    2e4a:	8f 90       	pop	r8
    2e4c:	08 95       	ret

00002e4e <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2e4e:	8f 92       	push	r8
    2e50:	9f 92       	push	r9
    2e52:	af 92       	push	r10
    2e54:	bf 92       	push	r11
    2e56:	cf 92       	push	r12
    2e58:	df 92       	push	r13
    2e5a:	ef 92       	push	r14
    2e5c:	ff 92       	push	r15
    2e5e:	0f 93       	push	r16
    2e60:	1f 93       	push	r17
    2e62:	cf 93       	push	r28
    2e64:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2e66:	3b c0       	rjmp	.+118    	; 0x2ede <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2e68:	07 80       	ldd	r0, Z+7	; 0x07
    2e6a:	f0 85       	ldd	r31, Z+8	; 0x08
    2e6c:	e0 2d       	mov	r30, r0
    2e6e:	80 80       	ld	r8, Z
    2e70:	91 80       	ldd	r9, Z+1	; 0x01
    2e72:	a2 80       	ldd	r10, Z+2	; 0x02
    2e74:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2e76:	c0 85       	ldd	r28, Z+8	; 0x08
    2e78:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e7a:	8e 01       	movw	r16, r28
    2e7c:	0e 5f       	subi	r16, 0xFE	; 254
    2e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e80:	c8 01       	movw	r24, r16
    2e82:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e86:	ec 89       	ldd	r30, Y+20	; 0x14
    2e88:	fd 89       	ldd	r31, Y+21	; 0x15
    2e8a:	ce 01       	movw	r24, r28
    2e8c:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2e8e:	8e 89       	ldd	r24, Y+22	; 0x16
    2e90:	82 ff       	sbrs	r24, 2
    2e92:	25 c0       	rjmp	.+74     	; 0x2ede <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2e94:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e96:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e98:	a8 89       	ldd	r26, Y+16	; 0x10
    2e9a:	b9 89       	ldd	r27, Y+17	; 0x11
    2e9c:	88 0d       	add	r24, r8
    2e9e:	99 1d       	adc	r25, r9
    2ea0:	aa 1d       	adc	r26, r10
    2ea2:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2ea4:	88 16       	cp	r8, r24
    2ea6:	99 06       	cpc	r9, r25
    2ea8:	aa 06       	cpc	r10, r26
    2eaa:	bb 06       	cpc	r11, r27
    2eac:	70 f4       	brcc	.+28     	; 0x2eca <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2eae:	8a 83       	std	Y+2, r24	; 0x02
    2eb0:	9b 83       	std	Y+3, r25	; 0x03
    2eb2:	ac 83       	std	Y+4, r26	; 0x04
    2eb4:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2eb6:	db 87       	std	Y+11, r29	; 0x0b
    2eb8:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2eba:	b8 01       	movw	r22, r16
    2ebc:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <pxCurrentTimerList>
    2ec0:	90 91 b6 13 	lds	r25, 0x13B6	; 0x8013b6 <pxCurrentTimerList+0x1>
    2ec4:	0e 94 bf 02 	call	0x57e	; 0x57e <vListInsert>
    2ec8:	0a c0       	rjmp	.+20     	; 0x2ede <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2eca:	c1 2c       	mov	r12, r1
    2ecc:	d1 2c       	mov	r13, r1
    2ece:	76 01       	movw	r14, r12
    2ed0:	00 e0       	ldi	r16, 0x00	; 0
    2ed2:	10 e0       	ldi	r17, 0x00	; 0
    2ed4:	a5 01       	movw	r20, r10
    2ed6:	94 01       	movw	r18, r8
    2ed8:	60 e0       	ldi	r22, 0x00	; 0
    2eda:	ce 01       	movw	r24, r28
    2edc:	5a df       	rcall	.-332    	; 0x2d92 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2ede:	e0 91 b5 13 	lds	r30, 0x13B5	; 0x8013b5 <pxCurrentTimerList>
    2ee2:	f0 91 b6 13 	lds	r31, 0x13B6	; 0x8013b6 <pxCurrentTimerList+0x1>
    2ee6:	80 81       	ld	r24, Z
    2ee8:	81 11       	cpse	r24, r1
    2eea:	be cf       	rjmp	.-132    	; 0x2e68 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2eec:	80 91 b3 13 	lds	r24, 0x13B3	; 0x8013b3 <pxOverflowTimerList>
    2ef0:	90 91 b4 13 	lds	r25, 0x13B4	; 0x8013b4 <pxOverflowTimerList+0x1>
    2ef4:	90 93 b6 13 	sts	0x13B6, r25	; 0x8013b6 <pxCurrentTimerList+0x1>
    2ef8:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2efc:	f0 93 b4 13 	sts	0x13B4, r31	; 0x8013b4 <pxOverflowTimerList+0x1>
    2f00:	e0 93 b3 13 	sts	0x13B3, r30	; 0x8013b3 <pxOverflowTimerList>
    }
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	1f 91       	pop	r17
    2f0a:	0f 91       	pop	r16
    2f0c:	ff 90       	pop	r15
    2f0e:	ef 90       	pop	r14
    2f10:	df 90       	pop	r13
    2f12:	cf 90       	pop	r12
    2f14:	bf 90       	pop	r11
    2f16:	af 90       	pop	r10
    2f18:	9f 90       	pop	r9
    2f1a:	8f 90       	pop	r8
    2f1c:	08 95       	ret

00002f1e <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2f1e:	cf 92       	push	r12
    2f20:	df 92       	push	r13
    2f22:	ef 92       	push	r14
    2f24:	ff 92       	push	r15
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2f2c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <xTaskGetTickCount>
    2f30:	6b 01       	movw	r12, r22
    2f32:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2f34:	80 91 ab 13 	lds	r24, 0x13AB	; 0x8013ab <xLastTime.2436>
    2f38:	90 91 ac 13 	lds	r25, 0x13AC	; 0x8013ac <xLastTime.2436+0x1>
    2f3c:	a0 91 ad 13 	lds	r26, 0x13AD	; 0x8013ad <xLastTime.2436+0x2>
    2f40:	b0 91 ae 13 	lds	r27, 0x13AE	; 0x8013ae <xLastTime.2436+0x3>
    2f44:	c8 16       	cp	r12, r24
    2f46:	d9 06       	cpc	r13, r25
    2f48:	ea 06       	cpc	r14, r26
    2f4a:	fb 06       	cpc	r15, r27
    2f4c:	20 f4       	brcc	.+8      	; 0x2f56 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2f4e:	7f df       	rcall	.-258    	; 0x2e4e <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	88 83       	st	Y, r24
    2f54:	01 c0       	rjmp	.+2      	; 0x2f58 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2f56:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2f58:	c0 92 ab 13 	sts	0x13AB, r12	; 0x8013ab <xLastTime.2436>
    2f5c:	d0 92 ac 13 	sts	0x13AC, r13	; 0x8013ac <xLastTime.2436+0x1>
    2f60:	e0 92 ad 13 	sts	0x13AD, r14	; 0x8013ad <xLastTime.2436+0x2>
    2f64:	f0 92 ae 13 	sts	0x13AE, r15	; 0x8013ae <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2f68:	c7 01       	movw	r24, r14
    2f6a:	b6 01       	movw	r22, r12
    2f6c:	df 91       	pop	r29
    2f6e:	cf 91       	pop	r28
    2f70:	ff 90       	pop	r15
    2f72:	ef 90       	pop	r14
    2f74:	df 90       	pop	r13
    2f76:	cf 90       	pop	r12
    2f78:	08 95       	ret

00002f7a <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2f7a:	4f 92       	push	r4
    2f7c:	5f 92       	push	r5
    2f7e:	6f 92       	push	r6
    2f80:	7f 92       	push	r7
    2f82:	8f 92       	push	r8
    2f84:	9f 92       	push	r9
    2f86:	af 92       	push	r10
    2f88:	bf 92       	push	r11
    2f8a:	cf 92       	push	r12
    2f8c:	df 92       	push	r13
    2f8e:	ef 92       	push	r14
    2f90:	ff 92       	push	r15
    2f92:	0f 93       	push	r16
    2f94:	1f 93       	push	r17
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29
    2f9a:	4b 01       	movw	r8, r22
    2f9c:	5c 01       	movw	r10, r24
    2f9e:	29 01       	movw	r4, r18
    2fa0:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2fa2:	e0 91 b5 13 	lds	r30, 0x13B5	; 0x8013b5 <pxCurrentTimerList>
    2fa6:	f0 91 b6 13 	lds	r31, 0x13B6	; 0x8013b6 <pxCurrentTimerList+0x1>
    2faa:	07 80       	ldd	r0, Z+7	; 0x07
    2fac:	f0 85       	ldd	r31, Z+8	; 0x08
    2fae:	e0 2d       	mov	r30, r0
    2fb0:	c0 85       	ldd	r28, Z+8	; 0x08
    2fb2:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2fb4:	ce 01       	movw	r24, r28
    2fb6:	02 96       	adiw	r24, 0x02	; 2
    2fb8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2fbc:	8e 89       	ldd	r24, Y+22	; 0x16
    2fbe:	82 ff       	sbrs	r24, 2
    2fc0:	1b c0       	rjmp	.+54     	; 0x2ff8 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2fc2:	4e 85       	ldd	r20, Y+14	; 0x0e
    2fc4:	5f 85       	ldd	r21, Y+15	; 0x0f
    2fc6:	68 89       	ldd	r22, Y+16	; 0x10
    2fc8:	79 89       	ldd	r23, Y+17	; 0x11
    2fca:	48 0d       	add	r20, r8
    2fcc:	59 1d       	adc	r21, r9
    2fce:	6a 1d       	adc	r22, r10
    2fd0:	7b 1d       	adc	r23, r11
    2fd2:	75 01       	movw	r14, r10
    2fd4:	64 01       	movw	r12, r8
    2fd6:	93 01       	movw	r18, r6
    2fd8:	82 01       	movw	r16, r4
    2fda:	ce 01       	movw	r24, r28
    2fdc:	47 de       	rcall	.-882    	; 0x2c6c <prvInsertTimerInActiveList>
    2fde:	88 23       	and	r24, r24
    2fe0:	69 f0       	breq	.+26     	; 0x2ffc <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2fe2:	c1 2c       	mov	r12, r1
    2fe4:	d1 2c       	mov	r13, r1
    2fe6:	76 01       	movw	r14, r12
    2fe8:	00 e0       	ldi	r16, 0x00	; 0
    2fea:	10 e0       	ldi	r17, 0x00	; 0
    2fec:	a5 01       	movw	r20, r10
    2fee:	94 01       	movw	r18, r8
    2ff0:	60 e0       	ldi	r22, 0x00	; 0
    2ff2:	ce 01       	movw	r24, r28
    2ff4:	ce de       	rcall	.-612    	; 0x2d92 <xTimerGenericCommand>
    2ff6:	02 c0       	rjmp	.+4      	; 0x2ffc <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2ff8:	8e 7f       	andi	r24, 0xFE	; 254
    2ffa:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2ffc:	ec 89       	ldd	r30, Y+20	; 0x14
    2ffe:	fd 89       	ldd	r31, Y+21	; 0x15
    3000:	ce 01       	movw	r24, r28
    3002:	19 95       	eicall
    }
    3004:	df 91       	pop	r29
    3006:	cf 91       	pop	r28
    3008:	1f 91       	pop	r17
    300a:	0f 91       	pop	r16
    300c:	ff 90       	pop	r15
    300e:	ef 90       	pop	r14
    3010:	df 90       	pop	r13
    3012:	cf 90       	pop	r12
    3014:	bf 90       	pop	r11
    3016:	af 90       	pop	r10
    3018:	9f 90       	pop	r9
    301a:	8f 90       	pop	r8
    301c:	7f 90       	pop	r7
    301e:	6f 90       	pop	r6
    3020:	5f 90       	pop	r5
    3022:	4f 90       	pop	r4
    3024:	08 95       	ret

00003026 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3026:	8f 92       	push	r8
    3028:	9f 92       	push	r9
    302a:	af 92       	push	r10
    302c:	bf 92       	push	r11
    302e:	cf 92       	push	r12
    3030:	df 92       	push	r13
    3032:	ef 92       	push	r14
    3034:	ff 92       	push	r15
    3036:	1f 93       	push	r17
    3038:	cf 93       	push	r28
    303a:	df 93       	push	r29
    303c:	1f 92       	push	r1
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
    3042:	6b 01       	movw	r12, r22
    3044:	7c 01       	movw	r14, r24
    3046:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3048:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    304c:	ce 01       	movw	r24, r28
    304e:	01 96       	adiw	r24, 0x01	; 1
    3050:	66 df       	rcall	.-308    	; 0x2f1e <prvSampleTimeNow>
    3052:	4b 01       	movw	r8, r22
    3054:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3056:	89 81       	ldd	r24, Y+1	; 0x01
    3058:	81 11       	cpse	r24, r1
    305a:	2d c0       	rjmp	.+90     	; 0x30b6 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    305c:	11 11       	cpse	r17, r1
    305e:	0d c0       	rjmp	.+26     	; 0x307a <prvProcessTimerOrBlockTask+0x54>
    3060:	8c 14       	cp	r8, r12
    3062:	9d 04       	cpc	r9, r13
    3064:	ae 04       	cpc	r10, r14
    3066:	bf 04       	cpc	r11, r15
    3068:	40 f0       	brcs	.+16     	; 0x307a <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    306a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    306e:	a5 01       	movw	r20, r10
    3070:	94 01       	movw	r18, r8
    3072:	c7 01       	movw	r24, r14
    3074:	b6 01       	movw	r22, r12
    3076:	81 df       	rcall	.-254    	; 0x2f7a <prvProcessExpiredTimer>
    3078:	20 c0       	rjmp	.+64     	; 0x30ba <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    307a:	11 23       	and	r17, r17
    307c:	41 f0       	breq	.+16     	; 0x308e <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    307e:	e0 91 b3 13 	lds	r30, 0x13B3	; 0x8013b3 <pxOverflowTimerList>
    3082:	f0 91 b4 13 	lds	r31, 0x13B4	; 0x8013b4 <pxOverflowTimerList+0x1>
    3086:	80 81       	ld	r24, Z
    3088:	11 e0       	ldi	r17, 0x01	; 1
    308a:	81 11       	cpse	r24, r1
    308c:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    308e:	b7 01       	movw	r22, r14
    3090:	a6 01       	movw	r20, r12
    3092:	48 19       	sub	r20, r8
    3094:	59 09       	sbc	r21, r9
    3096:	6a 09       	sbc	r22, r10
    3098:	7b 09       	sbc	r23, r11
    309a:	21 2f       	mov	r18, r17
    309c:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <xTimerQueue>
    30a0:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <xTimerQueue+0x1>
    30a4:	0e 94 bb 07 	call	0xf76	; 0xf76 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    30a8:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <xTaskResumeAll>
    30ac:	81 11       	cpse	r24, r1
    30ae:	05 c0       	rjmp	.+10     	; 0x30ba <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    30b0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <vPortYield>
    30b4:	02 c0       	rjmp	.+4      	; 0x30ba <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    30b6:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <xTaskResumeAll>
            }
        }
    }
    30ba:	0f 90       	pop	r0
    30bc:	df 91       	pop	r29
    30be:	cf 91       	pop	r28
    30c0:	1f 91       	pop	r17
    30c2:	ff 90       	pop	r15
    30c4:	ef 90       	pop	r14
    30c6:	df 90       	pop	r13
    30c8:	cf 90       	pop	r12
    30ca:	bf 90       	pop	r11
    30cc:	af 90       	pop	r10
    30ce:	9f 90       	pop	r9
    30d0:	8f 90       	pop	r8
    30d2:	08 95       	ret

000030d4 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    30d4:	af 92       	push	r10
    30d6:	bf 92       	push	r11
    30d8:	cf 92       	push	r12
    30da:	df 92       	push	r13
    30dc:	ef 92       	push	r14
    30de:	ff 92       	push	r15
    30e0:	0f 93       	push	r16
    30e2:	1f 93       	push	r17
    30e4:	cf 93       	push	r28
    30e6:	df 93       	push	r29
    30e8:	cd b7       	in	r28, 0x3d	; 61
    30ea:	de b7       	in	r29, 0x3e	; 62
    30ec:	28 97       	sbiw	r28, 0x08	; 8
    30ee:	0f b6       	in	r0, 0x3f	; 63
    30f0:	f8 94       	cli
    30f2:	de bf       	out	0x3e, r29	; 62
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    30f8:	82 c0       	rjmp	.+260    	; 0x31fe <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    30fa:	89 81       	ldd	r24, Y+1	; 0x01
    30fc:	88 23       	and	r24, r24
    30fe:	0c f4       	brge	.+2      	; 0x3102 <prvProcessReceivedCommands+0x2e>
    3100:	7e c0       	rjmp	.+252    	; 0x31fe <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3102:	ae 80       	ldd	r10, Y+6	; 0x06
    3104:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3106:	d5 01       	movw	r26, r10
    3108:	1c 96       	adiw	r26, 0x0c	; 12
    310a:	8d 91       	ld	r24, X+
    310c:	9c 91       	ld	r25, X
    310e:	1d 97       	sbiw	r26, 0x0d	; 13
    3110:	89 2b       	or	r24, r25
    3112:	21 f0       	breq	.+8      	; 0x311c <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3114:	c5 01       	movw	r24, r10
    3116:	02 96       	adiw	r24, 0x02	; 2
    3118:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    311c:	ce 01       	movw	r24, r28
    311e:	08 96       	adiw	r24, 0x08	; 8
    3120:	fe de       	rcall	.-516    	; 0x2f1e <prvSampleTimeNow>
    3122:	8b 01       	movw	r16, r22
    3124:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3126:	e9 81       	ldd	r30, Y+1	; 0x01
    3128:	0e 2e       	mov	r0, r30
    312a:	00 0c       	add	r0, r0
    312c:	ff 0b       	sbc	r31, r31
    312e:	ea 30       	cpi	r30, 0x0A	; 10
    3130:	f1 05       	cpc	r31, r1
    3132:	08 f0       	brcs	.+2      	; 0x3136 <prvProcessReceivedCommands+0x62>
    3134:	64 c0       	rjmp	.+200    	; 0x31fe <prvProcessReceivedCommands+0x12a>
    3136:	88 27       	eor	r24, r24
    3138:	ee 58       	subi	r30, 0x8E	; 142
    313a:	ff 4f       	sbci	r31, 0xFF	; 255
    313c:	8f 4f       	sbci	r24, 0xFF	; 255
    313e:	0c 94 44 2d 	jmp	0x5a88	; 0x5a88 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3142:	f5 01       	movw	r30, r10
    3144:	86 89       	ldd	r24, Z+22	; 0x16
    3146:	81 60       	ori	r24, 0x01	; 1
    3148:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    314a:	ca 80       	ldd	r12, Y+2	; 0x02
    314c:	db 80       	ldd	r13, Y+3	; 0x03
    314e:	ec 80       	ldd	r14, Y+4	; 0x04
    3150:	fd 80       	ldd	r15, Y+5	; 0x05
    3152:	46 85       	ldd	r20, Z+14	; 0x0e
    3154:	57 85       	ldd	r21, Z+15	; 0x0f
    3156:	60 89       	ldd	r22, Z+16	; 0x10
    3158:	71 89       	ldd	r23, Z+17	; 0x11
    315a:	4c 0d       	add	r20, r12
    315c:	5d 1d       	adc	r21, r13
    315e:	6e 1d       	adc	r22, r14
    3160:	7f 1d       	adc	r23, r15
    3162:	c5 01       	movw	r24, r10
    3164:	83 dd       	rcall	.-1274   	; 0x2c6c <prvInsertTimerInActiveList>
    3166:	88 23       	and	r24, r24
    3168:	09 f4       	brne	.+2      	; 0x316c <prvProcessReceivedCommands+0x98>
    316a:	49 c0       	rjmp	.+146    	; 0x31fe <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    316c:	d5 01       	movw	r26, r10
    316e:	54 96       	adiw	r26, 0x14	; 20
    3170:	ed 91       	ld	r30, X+
    3172:	fc 91       	ld	r31, X
    3174:	55 97       	sbiw	r26, 0x15	; 21
    3176:	c5 01       	movw	r24, r10
    3178:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    317a:	f5 01       	movw	r30, r10
    317c:	86 89       	ldd	r24, Z+22	; 0x16
    317e:	82 ff       	sbrs	r24, 2
    3180:	3e c0       	rjmp	.+124    	; 0x31fe <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3182:	4a 81       	ldd	r20, Y+2	; 0x02
    3184:	5b 81       	ldd	r21, Y+3	; 0x03
    3186:	6c 81       	ldd	r22, Y+4	; 0x04
    3188:	7d 81       	ldd	r23, Y+5	; 0x05
    318a:	86 85       	ldd	r24, Z+14	; 0x0e
    318c:	97 85       	ldd	r25, Z+15	; 0x0f
    318e:	a0 89       	ldd	r26, Z+16	; 0x10
    3190:	b1 89       	ldd	r27, Z+17	; 0x11
    3192:	9a 01       	movw	r18, r20
    3194:	ab 01       	movw	r20, r22
    3196:	28 0f       	add	r18, r24
    3198:	39 1f       	adc	r19, r25
    319a:	4a 1f       	adc	r20, r26
    319c:	5b 1f       	adc	r21, r27
    319e:	c1 2c       	mov	r12, r1
    31a0:	d1 2c       	mov	r13, r1
    31a2:	76 01       	movw	r14, r12
    31a4:	00 e0       	ldi	r16, 0x00	; 0
    31a6:	10 e0       	ldi	r17, 0x00	; 0
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	c5 01       	movw	r24, r10
    31ac:	f2 dd       	rcall	.-1052   	; 0x2d92 <xTimerGenericCommand>
    31ae:	27 c0       	rjmp	.+78     	; 0x31fe <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    31b0:	d5 01       	movw	r26, r10
    31b2:	56 96       	adiw	r26, 0x16	; 22
    31b4:	8c 91       	ld	r24, X
    31b6:	56 97       	sbiw	r26, 0x16	; 22
    31b8:	8e 7f       	andi	r24, 0xFE	; 254
    31ba:	56 96       	adiw	r26, 0x16	; 22
    31bc:	8c 93       	st	X, r24
                        break;
    31be:	1f c0       	rjmp	.+62     	; 0x31fe <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    31c0:	f5 01       	movw	r30, r10
    31c2:	86 89       	ldd	r24, Z+22	; 0x16
    31c4:	81 60       	ori	r24, 0x01	; 1
    31c6:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    31c8:	4a 81       	ldd	r20, Y+2	; 0x02
    31ca:	5b 81       	ldd	r21, Y+3	; 0x03
    31cc:	6c 81       	ldd	r22, Y+4	; 0x04
    31ce:	7d 81       	ldd	r23, Y+5	; 0x05
    31d0:	46 87       	std	Z+14, r20	; 0x0e
    31d2:	57 87       	std	Z+15, r21	; 0x0f
    31d4:	60 8b       	std	Z+16, r22	; 0x10
    31d6:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    31d8:	40 0f       	add	r20, r16
    31da:	51 1f       	adc	r21, r17
    31dc:	62 1f       	adc	r22, r18
    31de:	73 1f       	adc	r23, r19
    31e0:	68 01       	movw	r12, r16
    31e2:	79 01       	movw	r14, r18
    31e4:	c5 01       	movw	r24, r10
    31e6:	42 dd       	rcall	.-1404   	; 0x2c6c <prvInsertTimerInActiveList>
                        break;
    31e8:	0a c0       	rjmp	.+20     	; 0x31fe <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    31ea:	f5 01       	movw	r30, r10
    31ec:	86 89       	ldd	r24, Z+22	; 0x16
    31ee:	81 fd       	sbrc	r24, 1
    31f0:	04 c0       	rjmp	.+8      	; 0x31fa <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    31f2:	c5 01       	movw	r24, r10
    31f4:	0e 94 6d 02 	call	0x4da	; 0x4da <vPortFree>
    31f8:	02 c0       	rjmp	.+4      	; 0x31fe <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    31fa:	8e 7f       	andi	r24, 0xFE	; 254
    31fc:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	a9 01       	movw	r20, r18
    3204:	be 01       	movw	r22, r28
    3206:	6f 5f       	subi	r22, 0xFF	; 255
    3208:	7f 4f       	sbci	r23, 0xFF	; 255
    320a:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <xTimerQueue>
    320e:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <xTimerQueue+0x1>
    3212:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <xQueueReceive>
    3216:	81 11       	cpse	r24, r1
    3218:	70 cf       	rjmp	.-288    	; 0x30fa <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    321a:	28 96       	adiw	r28, 0x08	; 8
    321c:	0f b6       	in	r0, 0x3f	; 63
    321e:	f8 94       	cli
    3220:	de bf       	out	0x3e, r29	; 62
    3222:	0f be       	out	0x3f, r0	; 63
    3224:	cd bf       	out	0x3d, r28	; 61
    3226:	df 91       	pop	r29
    3228:	cf 91       	pop	r28
    322a:	1f 91       	pop	r17
    322c:	0f 91       	pop	r16
    322e:	ff 90       	pop	r15
    3230:	ef 90       	pop	r14
    3232:	df 90       	pop	r13
    3234:	cf 90       	pop	r12
    3236:	bf 90       	pop	r11
    3238:	af 90       	pop	r10
    323a:	08 95       	ret

0000323c <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    323c:	08 95       	ret

0000323e <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    323e:	84 b1       	in	r24, 0x04	; 4
    3240:	80 68       	ori	r24, 0x80	; 128
    3242:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3244:	85 b1       	in	r24, 0x05	; 5
    3246:	80 68       	ori	r24, 0x80	; 128
    3248:	85 b9       	out	0x05, r24	; 5
    324a:	08 95       	ret

0000324c <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    324c:	83 b1       	in	r24, 0x03	; 3
    324e:	80 68       	ori	r24, 0x80	; 128
    3250:	83 b9       	out	0x03, r24	; 3
    3252:	08 95       	ret

00003254 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3254:	f4 df       	rcall	.-24     	; 0x323e <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3256:	2f ef       	ldi	r18, 0xFF	; 255
    3258:	80 e7       	ldi	r24, 0x70	; 112
    325a:	92 e0       	ldi	r25, 0x02	; 2
    325c:	21 50       	subi	r18, 0x01	; 1
    325e:	80 40       	sbci	r24, 0x00	; 0
    3260:	90 40       	sbci	r25, 0x00	; 0
    3262:	e1 f7       	brne	.-8      	; 0x325c <vApplicationMallocFailedHook+0x8>
    3264:	00 c0       	rjmp	.+0      	; 0x3266 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3266:	00 00       	nop
    3268:	f1 df       	rcall	.-30     	; 0x324c <prvBlinkMainLed>
    326a:	f5 cf       	rjmp	.-22     	; 0x3256 <vApplicationMallocFailedHook+0x2>

0000326c <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    326c:	e8 df       	rcall	.-48     	; 0x323e <prvSetMainLedOn>
    326e:	2f ef       	ldi	r18, 0xFF	; 255
    3270:	87 ea       	ldi	r24, 0xA7	; 167
    3272:	91 e6       	ldi	r25, 0x61	; 97
    3274:	21 50       	subi	r18, 0x01	; 1
    3276:	80 40       	sbci	r24, 0x00	; 0
    3278:	90 40       	sbci	r25, 0x00	; 0
    327a:	e1 f7       	brne	.-8      	; 0x3274 <vApplicationStackOverflowHook+0x8>
    327c:	00 c0       	rjmp	.+0      	; 0x327e <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    327e:	00 00       	nop
    3280:	e5 df       	rcall	.-54     	; 0x324c <prvBlinkMainLed>
    3282:	f5 cf       	rjmp	.-22     	; 0x326e <vApplicationStackOverflowHook+0x2>

00003284 <tempAndHumidityTask>:
	(void) pvParameters;
	
	while(1){
		//vTaskDelay(pdMS_TO_TICKS(2000UL)); //every 2 sec
		
		int returnCode = hih8120_wakeup();
    3284:	ee d3       	rcall	.+2012   	; 0x3a62 <hih8120_wakeup>
    3286:	28 2f       	mov	r18, r24
    3288:	30 e0       	ldi	r19, 0x00	; 0
		if(HIH8120_OK != returnCode && returnCode!= HIH8120_TWI_BUSY){
    328a:	21 15       	cp	r18, r1
    328c:	31 05       	cpc	r19, r1
    328e:	79 f0       	breq	.+30     	; 0x32ae <tempAndHumidityTask+0x2a>
    3290:	23 30       	cpi	r18, 0x03	; 3
    3292:	31 05       	cpc	r19, r1
    3294:	61 f0       	breq	.+24     	; 0x32ae <tempAndHumidityTask+0x2a>
			printf("HIH8120 wakeup error %d \n",returnCode);
    3296:	1f 92       	push	r1
    3298:	8f 93       	push	r24
    329a:	84 ea       	ldi	r24, 0xA4	; 164
    329c:	92 e0       	ldi	r25, 0x02	; 2
    329e:	9f 93       	push	r25
    32a0:	8f 93       	push	r24
    32a2:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	0f 90       	pop	r0
		}
		
		//vTaskDelay(pdMS_TO_TICKS(100UL));
		vTaskDelay(100); // maybe 50 works too
    32ae:	64 e6       	ldi	r22, 0x64	; 100
    32b0:	70 e0       	ldi	r23, 0x00	; 0
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vTaskDelay>
		
		returnCode = hih8120_measure();
    32ba:	e8 d3       	rcall	.+2000   	; 0x3a8c <hih8120_measure>
    32bc:	28 2f       	mov	r18, r24
    32be:	30 e0       	ldi	r19, 0x00	; 0
		if(HIH8120_OK!=returnCode && returnCode!= HIH8120_TWI_BUSY){
    32c0:	21 15       	cp	r18, r1
    32c2:	31 05       	cpc	r19, r1
    32c4:	79 f0       	breq	.+30     	; 0x32e4 <tempAndHumidityTask+0x60>
    32c6:	23 30       	cpi	r18, 0x03	; 3
    32c8:	31 05       	cpc	r19, r1
    32ca:	61 f0       	breq	.+24     	; 0x32e4 <tempAndHumidityTask+0x60>
			printf("HIH8120 measure error %d \n",returnCode);
    32cc:	1f 92       	push	r1
    32ce:	8f 93       	push	r24
    32d0:	8e eb       	ldi	r24, 0xBE	; 190
    32d2:	92 e0       	ldi	r25, 0x02	; 2
    32d4:	9f 93       	push	r25
    32d6:	8f 93       	push	r24
    32d8:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>
    32dc:	0f 90       	pop	r0
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
		}
		
		vTaskDelay(100); //might need to prolongue this
    32e4:	64 e6       	ldi	r22, 0x64	; 100
    32e6:	70 e0       	ldi	r23, 0x00	; 0
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vTaskDelay>
		
		xSemaphoreTake(hardware_semaphore, portMAX_DELAY);
    32f0:	4f ef       	ldi	r20, 0xFF	; 255
    32f2:	5f ef       	ldi	r21, 0xFF	; 255
    32f4:	ba 01       	movw	r22, r20
    32f6:	80 91 46 15 	lds	r24, 0x1546	; 0x801546 <hardware_semaphore>
    32fa:	90 91 47 15 	lds	r25, 0x1547	; 0x801547 <hardware_semaphore+0x1>
    32fe:	0e 94 0a 07 	call	0xe14	; 0xe14 <xQueueSemaphoreTake>
		
		entry_data.humidity=hih8120_getHumidityPercent_x10();
    3302:	ea d3       	rcall	.+2004   	; 0x3ad8 <hih8120_getHumidityPercent_x10>
    3304:	c6 e3       	ldi	r28, 0x36	; 54
    3306:	d5 e1       	ldi	r29, 0x15	; 21
    3308:	9b 83       	std	Y+3, r25	; 0x03
		entry_data.temperature=hih8120_getTemperature_x10();
    330a:	8a 83       	std	Y+2, r24	; 0x02
    330c:	0a d4       	rcall	.+2068   	; 0x3b22 <hih8120_getTemperature_x10>
    330e:	88 83       	st	Y, r24
    3310:	99 83       	std	Y+1, r25	; 0x01
		printf("Humidity= %d and Temperature= %d \n",entry_data.humidity,entry_data.temperature);
    3312:	9f 93       	push	r25
    3314:	8f 93       	push	r24
    3316:	8b 81       	ldd	r24, Y+3	; 0x03
    3318:	8f 93       	push	r24
    331a:	8a 81       	ldd	r24, Y+2	; 0x02
    331c:	8f 93       	push	r24
    331e:	89 ed       	ldi	r24, 0xD9	; 217
    3320:	92 e0       	ldi	r25, 0x02	; 2
    3322:	9f 93       	push	r25
    3324:	8f 93       	push	r24
    3326:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>
		
		if(desired_data.desired_hum>entry_data.humidity){
    332a:	20 91 40 15 	lds	r18, 0x1540	; 0x801540 <desired_data+0x2>
    332e:	30 91 41 15 	lds	r19, 0x1541	; 0x801541 <desired_data+0x3>
    3332:	8a 81       	ldd	r24, Y+2	; 0x02
    3334:	9b 81       	ldd	r25, Y+3	; 0x03
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	0f 90       	pop	r0
    333e:	0f 90       	pop	r0
    3340:	0f 90       	pop	r0
    3342:	82 17       	cp	r24, r18
    3344:	93 07       	cpc	r25, r19
    3346:	b0 f4       	brcc	.+44     	; 0x3374 <tempAndHumidityTask+0xf0>
			printf("Water motor is moving right\n");
    3348:	8c ef       	ldi	r24, 0xFC	; 252
    334a:	92 e0       	ldi	r25, 0x02	; 2
    334c:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <puts>
			rc_servo_setPosition(0,100)	;
    3350:	64 e6       	ldi	r22, 0x64	; 100
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	0e 94 bb 22 	call	0x4576	; 0x4576 <rc_servo_setPosition>
			vTaskDelay(40);
    3358:	68 e2       	ldi	r22, 0x28	; 40
    335a:	70 e0       	ldi	r23, 0x00	; 0
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vTaskDelay>
			printf("Water motor is moving left\n");
    3364:	88 e1       	ldi	r24, 0x18	; 24
    3366:	93 e0       	ldi	r25, 0x03	; 3
    3368:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <puts>
			rc_servo_setPosition(0,-100);
    336c:	6c e9       	ldi	r22, 0x9C	; 156
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	0e 94 bb 22 	call	0x4576	; 0x4576 <rc_servo_setPosition>
			//desired_data.desired_hum=0;
		}
		xSemaphoreGive(hardware_semaphore);
    3374:	00 e0       	ldi	r16, 0x00	; 0
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	a9 01       	movw	r20, r18
    337c:	60 e0       	ldi	r22, 0x00	; 0
    337e:	70 e0       	ldi	r23, 0x00	; 0
    3380:	80 91 46 15 	lds	r24, 0x1546	; 0x801546 <hardware_semaphore>
    3384:	90 91 47 15 	lds	r25, 0x1547	; 0x801547 <hardware_semaphore+0x1>
    3388:	0e 94 90 05 	call	0xb20	; 0xb20 <xQueueGenericSend>
		
		vTaskDelay(9800); // can try 9760 to be more precise
    338c:	68 e4       	ldi	r22, 0x48	; 72
    338e:	76 e2       	ldi	r23, 0x26	; 38
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vTaskDelay>
	}
    3398:	75 cf       	rjmp	.-278    	; 0x3284 <tempAndHumidityTask>

0000339a <lightTask>:
void lightTask(void* pvParameters) {
	(void)pvParameters;

	while (1) {
		//vTaskDelay(pdMS_TO_TICKS(7000UL));
		vTaskDelay(200);
    339a:	68 ec       	ldi	r22, 0xC8	; 200
    339c:	70 e0       	ldi	r23, 0x00	; 0
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vTaskDelay>
		int statusCode = tsl2591_fetchData();
    33a6:	0e 94 b1 28 	call	0x5162	; 0x5162 <tsl2591_fetchData>
		if (statusCode != TSL2591_OK) {
    33aa:	88 23       	and	r24, r24
    33ac:	61 f0       	breq	.+24     	; 0x33c6 <lightTask+0x2c>
			printf("Light data error: %d\n", statusCode);
    33ae:	1f 92       	push	r1
    33b0:	8f 93       	push	r24
    33b2:	83 e3       	ldi	r24, 0x33	; 51
    33b4:	93 e0       	ldi	r25, 0x03	; 3
    33b6:	9f 93       	push	r25
    33b8:	8f 93       	push	r24
    33ba:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
		}
		vTaskDelay(9800);
    33c6:	68 e4       	ldi	r22, 0x48	; 72
    33c8:	76 e2       	ldi	r23, 0x26	; 38
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vTaskDelay>
	}
    33d2:	e3 cf       	rjmp	.-58     	; 0x339a <lightTask>

000033d4 <lightCallback>:

}


void lightCallback(tsl2591_returnCode_t rc) {
    33d4:	0f 93       	push	r16
    33d6:	cf 93       	push	r28
    33d8:	df 93       	push	r29
    33da:	00 d0       	rcall	.+0      	; 0x33dc <lightCallback+0x8>
    33dc:	1f 92       	push	r1
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
	float lux;
	xSemaphoreTake(hardware_semaphore, portMAX_DELAY);
    33e2:	4f ef       	ldi	r20, 0xFF	; 255
    33e4:	5f ef       	ldi	r21, 0xFF	; 255
    33e6:	ba 01       	movw	r22, r20
    33e8:	80 91 46 15 	lds	r24, 0x1546	; 0x801546 <hardware_semaphore>
    33ec:	90 91 47 15 	lds	r25, 0x1547	; 0x801547 <hardware_semaphore+0x1>
    33f0:	0e 94 0a 07 	call	0xe14	; 0xe14 <xQueueSemaphoreTake>
	
	if (TSL2591_OK == (rc = tsl2591_getLux(&lux)))
    33f4:	ce 01       	movw	r24, r28
    33f6:	01 96       	adiw	r24, 0x01	; 1
    33f8:	0e 94 c3 28 	call	0x5186	; 0x5186 <tsl2591_getLux>
    33fc:	81 11       	cpse	r24, r1
    33fe:	1b c0       	rjmp	.+54     	; 0x3436 <lightCallback+0x62>
	{
		printf("Lux: %d\n", (uint16_t)lux);
    3400:	69 81       	ldd	r22, Y+1	; 0x01
    3402:	7a 81       	ldd	r23, Y+2	; 0x02
    3404:	8b 81       	ldd	r24, Y+3	; 0x03
    3406:	9c 81       	ldd	r25, Y+4	; 0x04
    3408:	92 d2       	rcall	.+1316   	; 0x392e <__fixunssfsi>
    340a:	7f 93       	push	r23
    340c:	6f 93       	push	r22
    340e:	89 e4       	ldi	r24, 0x49	; 73
    3410:	93 e0       	ldi	r25, 0x03	; 3
    3412:	9f 93       	push	r25
    3414:	8f 93       	push	r24
    3416:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>
		entry_data.light = (uint16_t)lux;
    341a:	69 81       	ldd	r22, Y+1	; 0x01
    341c:	7a 81       	ldd	r23, Y+2	; 0x02
    341e:	8b 81       	ldd	r24, Y+3	; 0x03
    3420:	9c 81       	ldd	r25, Y+4	; 0x04
    3422:	85 d2       	rcall	.+1290   	; 0x392e <__fixunssfsi>
    3424:	70 93 3d 15 	sts	0x153D, r23	; 0x80153d <entry_data+0x7>
    3428:	60 93 3c 15 	sts	0x153C, r22	; 0x80153c <entry_data+0x6>
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	06 c0       	rjmp	.+12     	; 0x3442 <lightCallback+0x6e>
	}
	else if (TSL2591_OVERFLOW == rc)
    3436:	83 30       	cpi	r24, 0x03	; 3
    3438:	21 f4       	brne	.+8      	; 0x3442 <lightCallback+0x6e>
	{
		printf("Lux overflow\n");
    343a:	82 e5       	ldi	r24, 0x52	; 82
    343c:	93 e0       	ldi	r25, 0x03	; 3
    343e:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <puts>
	}
	if(desired_data.desired_light>entry_data.light){
    3442:	20 91 44 15 	lds	r18, 0x1544	; 0x801544 <desired_data+0x6>
    3446:	30 91 45 15 	lds	r19, 0x1545	; 0x801545 <desired_data+0x7>
    344a:	80 91 3c 15 	lds	r24, 0x153C	; 0x80153c <entry_data+0x6>
    344e:	90 91 3d 15 	lds	r25, 0x153D	; 0x80153d <entry_data+0x7>
    3452:	82 17       	cp	r24, r18
    3454:	93 07       	cpc	r25, r19
    3456:	40 f4       	brcc	.+16     	; 0x3468 <lightCallback+0x94>
		rc_servo_setPosition(1,100)	;
    3458:	64 e6       	ldi	r22, 0x64	; 100
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	0e 94 bb 22 	call	0x4576	; 0x4576 <rc_servo_setPosition>
		//printf("Motor is moving right\n");
		printf("Light level is turned up\n");
    3460:	8f e5       	ldi	r24, 0x5F	; 95
    3462:	93 e0       	ldi	r25, 0x03	; 3
    3464:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <puts>
	}
	if(desired_data.desired_light<entry_data.light){
    3468:	20 91 44 15 	lds	r18, 0x1544	; 0x801544 <desired_data+0x6>
    346c:	30 91 45 15 	lds	r19, 0x1545	; 0x801545 <desired_data+0x7>
    3470:	80 91 3c 15 	lds	r24, 0x153C	; 0x80153c <entry_data+0x6>
    3474:	90 91 3d 15 	lds	r25, 0x153D	; 0x80153d <entry_data+0x7>
    3478:	28 17       	cp	r18, r24
    347a:	39 07       	cpc	r19, r25
    347c:	40 f4       	brcc	.+16     	; 0x348e <lightCallback+0xba>
		rc_servo_setPosition(1,-100)	;
    347e:	6c e9       	ldi	r22, 0x9C	; 156
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	0e 94 bb 22 	call	0x4576	; 0x4576 <rc_servo_setPosition>
		//printf("Motor is moving left\n");
		printf("Light level is turned down\n");
    3486:	88 e7       	ldi	r24, 0x78	; 120
    3488:	93 e0       	ldi	r25, 0x03	; 3
    348a:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <puts>
	}
	
	xSemaphoreGive(hardware_semaphore);
    348e:	00 e0       	ldi	r16, 0x00	; 0
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	a9 01       	movw	r20, r18
    3496:	60 e0       	ldi	r22, 0x00	; 0
    3498:	70 e0       	ldi	r23, 0x00	; 0
    349a:	80 91 46 15 	lds	r24, 0x1546	; 0x801546 <hardware_semaphore>
    349e:	90 91 47 15 	lds	r25, 0x1547	; 0x801547 <hardware_semaphore+0x1>
    34a2:	0e 94 90 05 	call	0xb20	; 0xb20 <xQueueGenericSend>
    34a6:	0f 90       	pop	r0
    34a8:	0f 90       	pop	r0
    34aa:	0f 90       	pop	r0
    34ac:	0f 90       	pop	r0
    34ae:	df 91       	pop	r29
    34b0:	cf 91       	pop	r28
    34b2:	0f 91       	pop	r16
    34b4:	08 95       	ret

000034b6 <_lora_setup>:

static lora_driver_payload_t _uplink_payload;
static lora_driver_payload_t _downlink_payload;

static void _lora_setup(void)
{
    34b6:	0f 93       	push	r16
    34b8:	1f 93       	push	r17
    34ba:	cf 93       	push	r28
    34bc:	df 93       	push	r29
    34be:	cd b7       	in	r28, 0x3d	; 61
    34c0:	de b7       	in	r29, 0x3e	; 62
    34c2:	64 97       	sbiw	r28, 0x14	; 20
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    34d4:	9e d4       	rcall	.+2364   	; 0x3e12 <lora_driver_rn2483FactoryReset>
    34d6:	1a d7       	rcall	.+3636   	; 0x430c <lora_driver_mapReturnCodeToText>
    34d8:	9f 93       	push	r25
    34da:	8f 93       	push	r24
    34dc:	83 e9       	ldi	r24, 0x93	; 147
    34de:	93 e0       	ldi	r25, 0x03	; 3
    34e0:	9f 93       	push	r25
    34e2:	8f 93       	push	r24
    34e4:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    34e8:	12 d6       	rcall	.+3108   	; 0x410e <lora_driver_configureToEu868>
    34ea:	10 d7       	rcall	.+3616   	; 0x430c <lora_driver_mapReturnCodeToText>
    34ec:	9f 93       	push	r25
    34ee:	8f 93       	push	r24
    34f0:	86 ea       	ldi	r24, 0xA6	; 166
    34f2:	93 e0       	ldi	r25, 0x03	; 3
    34f4:	9f 93       	push	r25
    34f6:	8f 93       	push	r24
    34f8:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>
    34fc:	8e 01       	movw	r16, r28
    34fe:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3500:	1f 4f       	sbci	r17, 0xFF	; 255
    3502:	c8 01       	movw	r24, r16
    3504:	98 d4       	rcall	.+2352   	; 0x3e36 <lora_driver_getRn2483Hweui>
    3506:	02 d7       	rcall	.+3588   	; 0x430c <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3508:	1f 93       	push	r17
    350a:	0f 93       	push	r16
    350c:	9f 93       	push	r25
    350e:	8f 93       	push	r24
    3510:	8f eb       	ldi	r24, 0xBF	; 191
    3512:	93 e0       	ldi	r25, 0x03	; 3
    3514:	9f 93       	push	r25
    3516:	8f 93       	push	r24
    3518:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    351c:	c8 01       	movw	r24, r16
    351e:	a7 d4       	rcall	.+2382   	; 0x3e6e <lora_driver_setDeviceIdentifier>
    3520:	f5 d6       	rcall	.+3562   	; 0x430c <lora_driver_mapReturnCodeToText>
    3522:	9f 93       	push	r25
    3524:	8f 93       	push	r24
    3526:	1f 93       	push	r17
    3528:	0f 93       	push	r16
    352a:	83 ed       	ldi	r24, 0xD3	; 211
    352c:	93 e0       	ldi	r25, 0x03	; 3
    352e:	9f 93       	push	r25
    3530:	8f 93       	push	r24
    3532:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3536:	a8 01       	movw	r20, r16
    3538:	68 ee       	ldi	r22, 0xE8	; 232
    353a:	73 e0       	ldi	r23, 0x03	; 3
    353c:	89 e0       	ldi	r24, 0x09	; 9
    353e:	94 e0       	ldi	r25, 0x04	; 4
    3540:	c4 d6       	rcall	.+3464   	; 0x42ca <lora_driver_setOtaaIdentity>
    3542:	e4 d6       	rcall	.+3528   	; 0x430c <lora_driver_mapReturnCodeToText>
    3544:	9f 93       	push	r25
    3546:	8f 93       	push	r24
    3548:	1f 93       	push	r17
    354a:	0f 93       	push	r16
    354c:	88 ee       	ldi	r24, 0xE8	; 232
    354e:	93 e0       	ldi	r25, 0x03	; 3
    3550:	9f 93       	push	r25
    3552:	8f 93       	push	r24
    3554:	89 e0       	ldi	r24, 0x09	; 9
    3556:	94 e0       	ldi	r25, 0x04	; 4
    3558:	9f 93       	push	r25
    355a:	8f 93       	push	r24
    355c:	8a e1       	ldi	r24, 0x1A	; 26
    355e:	94 e0       	ldi	r25, 0x04	; 4
    3560:	9f 93       	push	r25
    3562:	8f 93       	push	r24
    3564:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3568:	b5 d4       	rcall	.+2410   	; 0x3ed4 <lora_driver_saveMac>
    356a:	d0 d6       	rcall	.+3488   	; 0x430c <lora_driver_mapReturnCodeToText>
    356c:	9f 93       	push	r25
    356e:	8f 93       	push	r24
    3570:	80 e5       	ldi	r24, 0x50	; 80
    3572:	94 e0       	ldi	r25, 0x04	; 4
    3574:	9f 93       	push	r25
    3576:	8f 93       	push	r24
    3578:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    357c:	0f b6       	in	r0, 0x3f	; 63
    357e:	f8 94       	cli
    3580:	de bf       	out	0x3e, r29	; 62
    3582:	0f be       	out	0x3f, r0	; 63
    3584:	cd bf       	out	0x3d, r28	; 61
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	9f d5       	rcall	.+2878   	; 0x40c8 <lora_driver_setAdaptiveDataRate>
    358a:	c0 d6       	rcall	.+3456   	; 0x430c <lora_driver_mapReturnCodeToText>
    358c:	9f 93       	push	r25
    358e:	8f 93       	push	r24
    3590:	8f e5       	ldi	r24, 0x5F	; 95
    3592:	94 e0       	ldi	r25, 0x04	; 4
    3594:	9f 93       	push	r25
    3596:	8f 93       	push	r24
    3598:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    359c:	84 ef       	ldi	r24, 0xF4	; 244
    359e:	91 e0       	ldi	r25, 0x01	; 1
    35a0:	9e d5       	rcall	.+2876   	; 0x40de <lora_driver_setReceiveDelay>
    35a2:	b4 d6       	rcall	.+3432   	; 0x430c <lora_driver_mapReturnCodeToText>
    35a4:	9f 93       	push	r25
    35a6:	8f 93       	push	r24
    35a8:	81 e0       	ldi	r24, 0x01	; 1
    35aa:	8f 93       	push	r24
    35ac:	84 ef       	ldi	r24, 0xF4	; 244
    35ae:	8f 93       	push	r24
    35b0:	80 e8       	ldi	r24, 0x80	; 128
    35b2:	94 e0       	ldi	r25, 0x04	; 4
    35b4:	9f 93       	push	r25
    35b6:	8f 93       	push	r24
    35b8:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>
    35bc:	0f b6       	in	r0, 0x3f	; 63
    35be:	f8 94       	cli
    35c0:	de bf       	out	0x3e, r29	; 62
    35c2:	0f be       	out	0x3f, r0	; 63
    35c4:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    35c6:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	8a d4       	rcall	.+2324   	; 0x3ee0 <lora_driver_join>
    35cc:	08 2f       	mov	r16, r24
    35ce:	9e d6       	rcall	.+3388   	; 0x430c <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    35d0:	9f 93       	push	r25
    35d2:	8f 93       	push	r24
    35d4:	1f 92       	push	r1
    35d6:	1f 93       	push	r17
    35d8:	80 ea       	ldi	r24, 0xA0	; 160
    35da:	94 e0       	ldi	r25, 0x04	; 4
    35dc:	9f 93       	push	r25
    35de:	8f 93       	push	r24
    35e0:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>
    35e4:	0f 90       	pop	r0
    35e6:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	0f 90       	pop	r0
    35f0:	08 30       	cpi	r16, 0x08	; 8
    35f2:	41 f0       	breq	.+16     	; 0x3604 <_lora_setup+0x14e>
    35f4:	66 e3       	ldi	r22, 0x36	; 54
    35f6:	71 e0       	ldi	r23, 0x01	; 1
		{
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    35f8:	80 e0       	ldi	r24, 0x00	; 0
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vTaskDelay>
    3600:	11 50       	subi	r17, 0x01	; 1
    3602:	11 f7       	brne	.-60     	; 0x35c8 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3604:	08 30       	cpi	r16, 0x08	; 8
    3606:	29 f4       	brne	.+10     	; 0x3612 <_lora_setup+0x15c>

	if (rc == LORA_ACCEPTED)
    3608:	80 ec       	ldi	r24, 0xC0	; 192
    360a:	94 e0       	ldi	r25, 0x04	; 4
	{
		// Connected to LoRaWAN :-)
		puts("Connection succeeded \n");
    360c:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <puts>
    3610:	07 c0       	rjmp	.+14     	; 0x3620 <_lora_setup+0x16a>
    3612:	87 ed       	ldi	r24, 0xD7	; 215
		while (1)
		{
			taskYIELD();
		}
	}
}
    3614:	94 e0       	ldi	r25, 0x04	; 4
		puts("Connection succeeded \n");
		//vTaskDelay(pdMS_TO_TICKS(5000UL)); //maybe some delay after
	}
	else
	{
		puts("Connection failed \n");
    3616:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <puts>
    361a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <vPortYield>
		while (1)
		{
			taskYIELD();
    361e:	fd cf       	rjmp	.-6      	; 0x361a <_lora_setup+0x164>
    3620:	64 96       	adiw	r28, 0x14	; 20
    3622:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3624:	f8 94       	cli
    3626:	de bf       	out	0x3e, r29	; 62
    3628:	0f be       	out	0x3f, r0	; 63
    362a:	cd bf       	out	0x3d, r28	; 61
    362c:	df 91       	pop	r29
    362e:	cf 91       	pop	r28
    3630:	1f 91       	pop	r17
    3632:	0f 91       	pop	r16
    3634:	08 95       	ret

00003636 <lora_handler_task>:
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	de d3       	rcall	.+1980   	; 0x3df6 <lora_driver_resetRn2483>
/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
	vTaskDelay(2);
    363a:	62 e0       	ldi	r22, 0x02	; 2
    363c:	70 e0       	ldi	r23, 0x00	; 0
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vTaskDelay>
	lora_driver_resetRn2483(0);
    3646:	80 e0       	ldi	r24, 0x00	; 0
    3648:	d6 d3       	rcall	.+1964   	; 0x3df6 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    364a:	66 e9       	ldi	r22, 0x96	; 150
    364c:	70 e0       	ldi	r23, 0x00	; 0
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3656:	88 d3       	rcall	.+1808   	; 0x3d68 <lora_driver_flushBuffers>

	_lora_setup();
    3658:	2e df       	rcall	.-420    	; 0x34b6 <_lora_setup>
    365a:	e3 ee       	ldi	r30, 0xE3	; 227
	//vTaskDelay(150); //make sure the setup had time 

	_uplink_payload.len = 8;
    365c:	f3 e1       	ldi	r31, 0x13	; 19
    365e:	98 e0       	ldi	r25, 0x08	; 8
    3660:	91 83       	std	Z+1, r25	; 0x01
    3662:	81 e0       	ldi	r24, 0x01	; 1
	_uplink_payload.portNo = 1; 
    3664:	80 83       	st	Z, r24
    3666:	ed ec       	ldi	r30, 0xCD	; 205
	
	_downlink_payload.len = 8;
    3668:	f3 e1       	ldi	r31, 0x13	; 19
    366a:	91 83       	std	Z+1, r25	; 0x01
    366c:	80 83       	st	Z, r24
	_downlink_payload.portNo = 1;
    366e:	60 e1       	ldi	r22, 0x10	; 16
	//xLastWakeTime = xTaskGetTickCount();
	
	for(;;)
	{
		//xTaskDelayUntil( &xLastWakeTime, xFrequency );
		vTaskDelay(10000); //500 = aprox 30 sec (10000 - aprox 3.5 min)
    3670:	77 e2       	ldi	r23, 0x27	; 39
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vTaskDelay>
    367a:	4f ef       	ldi	r20, 0xFF	; 255
		xSemaphoreTake(hardware_semaphore,portMAX_DELAY);
    367c:	5f ef       	ldi	r21, 0xFF	; 255
    367e:	ba 01       	movw	r22, r20
    3680:	80 91 46 15 	lds	r24, 0x1546	; 0x801546 <hardware_semaphore>
    3684:	90 91 47 15 	lds	r25, 0x1547	; 0x801547 <hardware_semaphore+0x1>
    3688:	0e 94 0a 07 	call	0xe14	; 0xe14 <xQueueSemaphoreTake>
    368c:	8b ee       	ldi	r24, 0xEB	; 235
		puts("in semaphore\n");
    368e:	94 e0       	ldi	r25, 0x04	; 4
    3690:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <puts>
    3694:	a6 e3       	ldi	r26, 0x36	; 54
		
		_uplink_payload.bytes[0] = entry_data.humidity >> 8;
    3696:	b5 e1       	ldi	r27, 0x15	; 21
    3698:	12 96       	adiw	r26, 0x02	; 2
    369a:	8c 91       	ld	r24, X
    369c:	12 97       	sbiw	r26, 0x02	; 2
    369e:	13 96       	adiw	r26, 0x03	; 3
    36a0:	9c 91       	ld	r25, X
    36a2:	13 97       	sbiw	r26, 0x03	; 3
    36a4:	e3 ee       	ldi	r30, 0xE3	; 227
    36a6:	f3 e1       	ldi	r31, 0x13	; 19
    36a8:	92 83       	std	Z+2, r25	; 0x02
    36aa:	83 83       	std	Z+3, r24	; 0x03
		_uplink_payload.bytes[1] = entry_data.humidity & 0xFF;
    36ac:	8c 91       	ld	r24, X
		_uplink_payload.bytes[2] = entry_data.temperature >> 8;
    36ae:	11 96       	adiw	r26, 0x01	; 1
    36b0:	9c 91       	ld	r25, X
    36b2:	11 97       	sbiw	r26, 0x01	; 1
    36b4:	94 83       	std	Z+4, r25	; 0x04
    36b6:	85 83       	std	Z+5, r24	; 0x05
		_uplink_payload.bytes[3] = entry_data.temperature & 0xFF;
    36b8:	14 96       	adiw	r26, 0x04	; 4
		_uplink_payload.bytes[4] = entry_data.co2 >> 8;
    36ba:	8c 91       	ld	r24, X
    36bc:	14 97       	sbiw	r26, 0x04	; 4
    36be:	15 96       	adiw	r26, 0x05	; 5
    36c0:	9c 91       	ld	r25, X
    36c2:	15 97       	sbiw	r26, 0x05	; 5
    36c4:	96 83       	std	Z+6, r25	; 0x06
    36c6:	87 83       	std	Z+7, r24	; 0x07
		_uplink_payload.bytes[5] = entry_data.co2 & 0xFF;
    36c8:	16 96       	adiw	r26, 0x06	; 6
		_uplink_payload.bytes[6] = entry_data.light >> 8;
    36ca:	8c 91       	ld	r24, X
    36cc:	16 97       	sbiw	r26, 0x06	; 6
    36ce:	17 96       	adiw	r26, 0x07	; 7
    36d0:	9c 91       	ld	r25, X
    36d2:	90 87       	std	Z+8, r25	; 0x08
		_uplink_payload.bytes[7] = entry_data.light & 0xFF;
    36d4:	81 87       	std	Z+9, r24	; 0x09

		//printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
		
		lora_driver_returnCode_t rc;
		if ((rc = lora_driver_sendUploadMessage(false, &_uplink_payload)) == LORA_MAC_TX_OK )
    36d6:	bf 01       	movw	r22, r30
    36d8:	80 e0       	ldi	r24, 0x00	; 0
    36da:	2b d4       	rcall	.+2134   	; 0x3f32 <lora_driver_sendUploadMessage>
    36dc:	8d 30       	cpi	r24, 0x0D	; 13
    36de:	29 f4       	brne	.+10     	; 0x36ea <lora_handler_task+0xb4>
    36e0:	89 ef       	ldi	r24, 0xF9	; 249
		{
			puts("MESSAGE SENT \n");
    36e2:	94 e0       	ldi	r25, 0x04	; 4
    36e4:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <puts>
    36e8:	5d c0       	rjmp	.+186    	; 0x37a4 <lora_handler_task+0x16e>
    36ea:	8e 30       	cpi	r24, 0x0E	; 14
			// The uplink message is sent and there is no downlink message received
		}
		else if(rc==LORA_MAC_RX)
    36ec:	09 f0       	breq	.+2      	; 0x36f0 <lora_handler_task+0xba>
    36ee:	56 c0       	rjmp	.+172    	; 0x379c <lora_handler_task+0x166>
    36f0:	89 ef       	ldi	r24, 0xF9	; 249
		{
			// The uplink message is sent and a downlink message is received
			puts("MESSAGE SENT \n");
    36f2:	94 e0       	ldi	r25, 0x04	; 4
    36f4:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <puts>
    36f8:	0f ef       	ldi	r16, 0xFF	; 255
			
			xMessageBufferReceive(downlink_buffer, &_downlink_payload, sizeof(lora_driver_payload_t),portMAX_DELAY);
    36fa:	1f ef       	ldi	r17, 0xFF	; 255
    36fc:	98 01       	movw	r18, r16
    36fe:	46 e1       	ldi	r20, 0x16	; 22
    3700:	50 e0       	ldi	r21, 0x00	; 0
    3702:	6d ec       	ldi	r22, 0xCD	; 205
    3704:	73 e1       	ldi	r23, 0x13	; 19
    3706:	80 91 34 15 	lds	r24, 0x1534	; 0x801534 <downlink_buffer>
    370a:	90 91 35 15 	lds	r25, 0x1535	; 0x801535 <downlink_buffer+0x1>
    370e:	0e 94 83 0a 	call	0x1506	; 0x1506 <xStreamBufferReceive>
    3712:	cd ec       	ldi	r28, 0xCD	; 205
			printf("DOWN LINK: from port: %d with %d bytes received!", _downlink_payload.portNo, _downlink_payload.len);
    3714:	d3 e1       	ldi	r29, 0x13	; 19
    3716:	99 81       	ldd	r25, Y+1	; 0x01
    3718:	88 81       	ld	r24, Y
    371a:	1f 92       	push	r1
    371c:	9f 93       	push	r25
    371e:	1f 92       	push	r1
    3720:	8f 93       	push	r24
    3722:	88 e0       	ldi	r24, 0x08	; 8
    3724:	95 e0       	ldi	r25, 0x05	; 5
    3726:	9f 93       	push	r25
    3728:	8f 93       	push	r24
    372a:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>
    372e:	89 81       	ldd	r24, Y+1	; 0x01
			
			
			if(_downlink_payload.len==8) //number of bytes we send and expect to receive
    3730:	0f 90       	pop	r0
    3732:	0f 90       	pop	r0
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	0f 90       	pop	r0
    373c:	88 30       	cpi	r24, 0x08	; 8
    373e:	91 f5       	brne	.+100    	; 0x37a4 <lora_handler_task+0x16e>
    3740:	8a 81       	ldd	r24, Y+2	; 0x02
			{
				desired_data.desired_temp=(_downlink_payload.bytes[0] << 8) + _downlink_payload.bytes[1];
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	98 2f       	mov	r25, r24
    3746:	88 27       	eor	r24, r24
    3748:	2b 81       	ldd	r18, Y+3	; 0x03
    374a:	82 0f       	add	r24, r18
    374c:	91 1d       	adc	r25, r1
    374e:	ae e3       	ldi	r26, 0x3E	; 62
    3750:	b5 e1       	ldi	r27, 0x15	; 21
    3752:	11 96       	adiw	r26, 0x01	; 1
    3754:	9c 93       	st	X, r25
    3756:	8e 93       	st	-X, r24
    3758:	8c 81       	ldd	r24, Y+4	; 0x04
				desired_data.desired_hum=(_downlink_payload.bytes[2] << 8) + _downlink_payload.bytes[3];
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	98 2f       	mov	r25, r24
    375e:	88 27       	eor	r24, r24
    3760:	2d 81       	ldd	r18, Y+5	; 0x05
    3762:	82 0f       	add	r24, r18
    3764:	91 1d       	adc	r25, r1
    3766:	13 96       	adiw	r26, 0x03	; 3
    3768:	9c 93       	st	X, r25
    376a:	8e 93       	st	-X, r24
    376c:	12 97       	sbiw	r26, 0x02	; 2
    376e:	8e 81       	ldd	r24, Y+6	; 0x06
				desired_data.desired_co2=(_downlink_payload.bytes[4] << 8) + _downlink_payload.bytes[5];
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	98 2f       	mov	r25, r24
    3774:	88 27       	eor	r24, r24
    3776:	2f 81       	ldd	r18, Y+7	; 0x07
    3778:	82 0f       	add	r24, r18
    377a:	91 1d       	adc	r25, r1
    377c:	15 96       	adiw	r26, 0x05	; 5
    377e:	9c 93       	st	X, r25
    3780:	8e 93       	st	-X, r24
    3782:	14 97       	sbiw	r26, 0x04	; 4
    3784:	88 85       	ldd	r24, Y+8	; 0x08
				desired_data.desired_light=(_downlink_payload.bytes[6] << 8) + _downlink_payload.bytes[7];
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	98 2f       	mov	r25, r24
    378a:	88 27       	eor	r24, r24
    378c:	29 85       	ldd	r18, Y+9	; 0x09
    378e:	82 0f       	add	r24, r18
    3790:	91 1d       	adc	r25, r1
    3792:	17 96       	adiw	r26, 0x07	; 7
    3794:	9c 93       	st	X, r25
    3796:	8e 93       	st	-X, r24
    3798:	16 97       	sbiw	r26, 0x06	; 6
    379a:	04 c0       	rjmp	.+8      	; 0x37a4 <lora_handler_task+0x16e>
    379c:	89 e3       	ldi	r24, 0x39	; 57
			}
			
		}
		else{
			puts("Message not sent \n");
    379e:	95 e0       	ldi	r25, 0x05	; 5
    37a0:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <puts>
    37a4:	00 e0       	ldi	r16, 0x00	; 0
		}
				
		xSemaphoreGive(hardware_semaphore);
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	a9 01       	movw	r20, r18
    37ac:	60 e0       	ldi	r22, 0x00	; 0
    37ae:	70 e0       	ldi	r23, 0x00	; 0
    37b0:	80 91 46 15 	lds	r24, 0x1546	; 0x801546 <hardware_semaphore>
    37b4:	90 91 47 15 	lds	r25, 0x1547	; 0x801547 <hardware_semaphore+0x1>
    37b8:	0e 94 90 05 	call	0xb20	; 0xb20 <xQueueGenericSend>
    37bc:	58 cf       	rjmp	.-336    	; 0x366e <lora_handler_task+0x38>

000037be <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    37be:	81 b1       	in	r24, 0x01	; 1
    37c0:	81 68       	ori	r24, 0x81	; 129
    37c2:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <stdio_initialise>
	
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    37ca:	85 e0       	ldi	r24, 0x05	; 5
    37cc:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <status_leds_initialise>

	downlink_buffer = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    37d0:	41 e0       	ldi	r20, 0x01	; 1
    37d2:	60 e0       	ldi	r22, 0x00	; 0
    37d4:	70 e0       	ldi	r23, 0x00	; 0
    37d6:	8c e2       	ldi	r24, 0x2C	; 44
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	0e 94 1a 09 	call	0x1234	; 0x1234 <xStreamBufferGenericCreate>
    37de:	90 93 35 15 	sts	0x1535, r25	; 0x801535 <downlink_buffer+0x1>
    37e2:	80 93 34 15 	sts	0x1534, r24	; 0x801534 <downlink_buffer>
	lora_driver_initialise(ser_USART1, downlink_buffer);
    37e6:	bc 01       	movw	r22, r24
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	c5 d2       	rcall	.+1418   	; 0x3d76 <lora_driver_initialise>
	//lora_handler_initialise(3);
	
	entry_data.co2 =0;
    37ec:	e6 e3       	ldi	r30, 0x36	; 54
    37ee:	f5 e1       	ldi	r31, 0x15	; 21
    37f0:	15 82       	std	Z+5, r1	; 0x05
    37f2:	14 82       	std	Z+4, r1	; 0x04
	entry_data.humidity=0;
    37f4:	13 82       	std	Z+3, r1	; 0x03
    37f6:	12 82       	std	Z+2, r1	; 0x02
	entry_data.light=0;
    37f8:	17 82       	std	Z+7, r1	; 0x07
    37fa:	16 82       	std	Z+6, r1	; 0x06
	entry_data.temperature=0;
    37fc:	11 82       	std	Z+1, r1	; 0x01
    37fe:	10 82       	st	Z, r1
	
	desired_data.desired_co2 =0;
    3800:	ee e3       	ldi	r30, 0x3E	; 62
    3802:	f5 e1       	ldi	r31, 0x15	; 21
    3804:	15 82       	std	Z+5, r1	; 0x05
    3806:	14 82       	std	Z+4, r1	; 0x04
	desired_data.desired_hum =1000;
    3808:	88 ee       	ldi	r24, 0xE8	; 232
    380a:	93 e0       	ldi	r25, 0x03	; 3
    380c:	93 83       	std	Z+3, r25	; 0x03
    380e:	82 83       	std	Z+2, r24	; 0x02
	desired_data.desired_light=0;
    3810:	17 82       	std	Z+7, r1	; 0x07
    3812:	16 82       	std	Z+6, r1	; 0x06
	desired_data.desired_temp=0;
    3814:	11 82       	std	Z+1, r1	; 0x01
	
	//temp&hum
	int returnCode = hih8120_initialise();
    3816:	10 82       	st	Z, r1
    3818:	0c d1       	rcall	.+536    	; 0x3a32 <hih8120_initialise>
	if(HIH8120_OK!=returnCode){
    381a:	88 23       	and	r24, r24
    381c:	69 f0       	breq	.+26     	; 0x3838 <initialiseSystem+0x7a>
		printf("HIH8120 initialize error %d \n",returnCode);
    381e:	1f 92       	push	r1
    3820:	8f 93       	push	r24
    3822:	8c e4       	ldi	r24, 0x4C	; 76
    3824:	95 e0       	ldi	r25, 0x05	; 5
    3826:	9f 93       	push	r25
    3828:	8f 93       	push	r24
    382a:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>
    382e:	0f 90       	pop	r0
    3830:	0f 90       	pop	r0
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	04 c0       	rjmp	.+8      	; 0x3840 <initialiseSystem+0x82>
		}else{
		puts("Humidity and Temperature driver initialized");
    3838:	8a e6       	ldi	r24, 0x6A	; 106
    383a:	95 e0       	ldi	r25, 0x05	; 5
    383c:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <puts>
	}
	
	//co2
	mh_z19_initialise(ser_USART3);
    3840:	83 e0       	ldi	r24, 0x03	; 3
	mh_z19_injectCallBack(co2Callback);
    3842:	40 d6       	rcall	.+3200   	; 0x44c4 <mh_z19_initialise>
    3844:	85 e2       	ldi	r24, 0x25	; 37
    3846:	91 e0       	ldi	r25, 0x01	; 1
    3848:	62 d6       	rcall	.+3268   	; 0x450e <mh_z19_injectCallBack>
	puts("Co2 driver started \n");
    384a:	86 e9       	ldi	r24, 0x96	; 150
    384c:	95 e0       	ldi	r25, 0x05	; 5
    384e:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <puts>
	
	//light 
	returnCode = tsl2591_initialise(lightCallback);
    3852:	8a ee       	ldi	r24, 0xEA	; 234
    3854:	99 e1       	ldi	r25, 0x19	; 25
    3856:	0e 94 81 28 	call	0x5102	; 0x5102 <tsl2591_initialise>

	if (returnCode != TSL2591_OK) {
    385a:	88 23       	and	r24, r24
    385c:	69 f0       	breq	.+26     	; 0x3878 <initialiseSystem+0xba>
		printf("TSL2591 initialize error %d \n", returnCode);
    385e:	1f 92       	push	r1
    3860:	8f 93       	push	r24
    3862:	8b ea       	ldi	r24, 0xAB	; 171
    3864:	95 e0       	ldi	r25, 0x05	; 5
    3866:	9f 93       	push	r25
    3868:	8f 93       	push	r24
    386a:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>
    386e:	0f 90       	pop	r0
    3870:	0f 90       	pop	r0
    3872:	0f 90       	pop	r0
    3874:	0f 90       	pop	r0
    3876:	04 c0       	rjmp	.+8      	; 0x3880 <initialiseSystem+0xc2>
	}
	else {
		puts("Light driver initialized");
    3878:	89 ec       	ldi	r24, 0xC9	; 201
    387a:	95 e0       	ldi	r25, 0x05	; 5
    387c:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <puts>
	}

	//enable light sensor
	returnCode = tsl2591_enable();
    3880:	0e 94 9c 28 	call	0x5138	; 0x5138 <tsl2591_enable>
	if (returnCode != TSL2591_OK) {
    3884:	88 23       	and	r24, r24
    3886:	61 f0       	breq	.+24     	; 0x38a0 <initialiseSystem+0xe2>
		printf("Failed to enable light sensor %d\n", returnCode);
    3888:	1f 92       	push	r1
    388a:	8f 93       	push	r24
    388c:	82 ee       	ldi	r24, 0xE2	; 226
    388e:	95 e0       	ldi	r25, 0x05	; 5
    3890:	9f 93       	push	r25
    3892:	8f 93       	push	r24
    3894:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <printf>
    3898:	0f 90       	pop	r0
    389a:	0f 90       	pop	r0
    389c:	0f 90       	pop	r0
	}
	
	//initialise servo
	rc_servo_initialise();
    389e:	0f 90       	pop	r0
    38a0:	82 c6       	rjmp	.+3332   	; 0x45a6 <rc_servo_initialise>
    38a2:	08 95       	ret

000038a4 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    38a4:	8c df       	rcall	.-232    	; 0x37be <initialiseSystem>
	
	
	xTaskCreate(lora_handler_task,  "Lora task",  configMINIMAL_STACK_SIZE+200, NULL, 3 , NULL );
    38a6:	e1 2c       	mov	r14, r1
    38a8:	f1 2c       	mov	r15, r1
    38aa:	03 e0       	ldi	r16, 0x03	; 3
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	48 e8       	ldi	r20, 0x88	; 136
    38b2:	51 e0       	ldi	r21, 0x01	; 1
    38b4:	64 e0       	ldi	r22, 0x04	; 4
    38b6:	76 e0       	ldi	r23, 0x06	; 6
    38b8:	8b e1       	ldi	r24, 0x1B	; 27
    38ba:	9b e1       	ldi	r25, 0x1B	; 27
    38bc:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <xTaskCreate>
	xTaskCreate(tempAndHumidityTask, "temp&hum task", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    38c0:	01 e0       	ldi	r16, 0x01	; 1
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	40 ec       	ldi	r20, 0xC0	; 192
    38c8:	50 e0       	ldi	r21, 0x00	; 0
    38ca:	6e e0       	ldi	r22, 0x0E	; 14
    38cc:	76 e0       	ldi	r23, 0x06	; 6
    38ce:	82 e4       	ldi	r24, 0x42	; 66
    38d0:	99 e1       	ldi	r25, 0x19	; 25
    38d2:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <xTaskCreate>
	xTaskCreate(co2Task, "co2 task", configMINIMAL_STACK_SIZE, NULL,1,NULL);
    38d6:	20 e0       	ldi	r18, 0x00	; 0
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	40 ec       	ldi	r20, 0xC0	; 192
    38dc:	50 e0       	ldi	r21, 0x00	; 0
    38de:	6c e1       	ldi	r22, 0x1C	; 28
    38e0:	76 e0       	ldi	r23, 0x06	; 6
    38e2:	88 e0       	ldi	r24, 0x08	; 8
    38e4:	91 e0       	ldi	r25, 0x01	; 1
    38e6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <xTaskCreate>
	xTaskCreate(lightTask,"light task",configMINIMAL_STACK_SIZE,NULL,1,NULL);
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	40 ec       	ldi	r20, 0xC0	; 192
    38f0:	50 e0       	ldi	r21, 0x00	; 0
    38f2:	65 e2       	ldi	r22, 0x25	; 37
    38f4:	76 e0       	ldi	r23, 0x06	; 6
    38f6:	8d ec       	ldi	r24, 0xCD	; 205
    38f8:	99 e1       	ldi	r25, 0x19	; 25
    38fa:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <xTaskCreate>
	//xTaskCreate(lightMotorTask,"light motor",configMINIMAL_STACK_SIZE, NULL, 2, NULL);
	//xTaskCreate(humidityMotorTask,"Humidity Motor task",configMINIMAL_STACK_SIZE,NULL,2,NULL);
	//xTaskCreate(lightMotorTask,"Light Motor task",configMINIMAL_STACK_SIZE,NULL,2,NULL);
	
	hardware_semaphore = xSemaphoreCreateMutex();
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	0e 94 34 06 	call	0xc68	; 0xc68 <xQueueCreateMutex>
    3904:	90 93 47 15 	sts	0x1547, r25	; 0x801547 <hardware_semaphore+0x1>
    3908:	80 93 46 15 	sts	0x1546, r24	; 0x801546 <hardware_semaphore>
	if((hardware_semaphore)!=NULL){
    390c:	00 97       	sbiw	r24, 0x00	; 0
    390e:	41 f0       	breq	.+16     	; 0x3920 <main+0x7c>
		xSemaphoreGive((hardware_semaphore));
    3910:	00 e0       	ldi	r16, 0x00	; 0
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	a9 01       	movw	r20, r18
    3918:	60 e0       	ldi	r22, 0x00	; 0
    391a:	70 e0       	ldi	r23, 0x00	; 0
    391c:	0e 94 90 05 	call	0xb20	; 0xb20 <xQueueGenericSend>
	}
	
	printf("Program Started!!\n");
    3920:	80 e3       	ldi	r24, 0x30	; 48
    3922:	96 e0       	ldi	r25, 0x06	; 6
    3924:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3928:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <vTaskStartScheduler>
    392c:	ff cf       	rjmp	.-2      	; 0x392c <main+0x88>

0000392e <__fixunssfsi>:
    392e:	33 d0       	rcall	.+102    	; 0x3996 <__fp_splitA>
    3930:	88 f0       	brcs	.+34     	; 0x3954 <__fixunssfsi+0x26>
    3932:	9f 57       	subi	r25, 0x7F	; 127
    3934:	90 f0       	brcs	.+36     	; 0x395a <__fixunssfsi+0x2c>
    3936:	b9 2f       	mov	r27, r25
    3938:	99 27       	eor	r25, r25
    393a:	b7 51       	subi	r27, 0x17	; 23
    393c:	a0 f0       	brcs	.+40     	; 0x3966 <__fixunssfsi+0x38>
    393e:	d1 f0       	breq	.+52     	; 0x3974 <__fixunssfsi+0x46>
    3940:	66 0f       	add	r22, r22
    3942:	77 1f       	adc	r23, r23
    3944:	88 1f       	adc	r24, r24
    3946:	99 1f       	adc	r25, r25
    3948:	1a f0       	brmi	.+6      	; 0x3950 <__fixunssfsi+0x22>
    394a:	ba 95       	dec	r27
    394c:	c9 f7       	brne	.-14     	; 0x3940 <__fixunssfsi+0x12>
    394e:	12 c0       	rjmp	.+36     	; 0x3974 <__fixunssfsi+0x46>
    3950:	b1 30       	cpi	r27, 0x01	; 1
    3952:	81 f0       	breq	.+32     	; 0x3974 <__fixunssfsi+0x46>
    3954:	3a d0       	rcall	.+116    	; 0x39ca <__fp_zero>
    3956:	b1 e0       	ldi	r27, 0x01	; 1
    3958:	08 95       	ret
    395a:	37 c0       	rjmp	.+110    	; 0x39ca <__fp_zero>
    395c:	67 2f       	mov	r22, r23
    395e:	78 2f       	mov	r23, r24
    3960:	88 27       	eor	r24, r24
    3962:	b8 5f       	subi	r27, 0xF8	; 248
    3964:	39 f0       	breq	.+14     	; 0x3974 <__fixunssfsi+0x46>
    3966:	b9 3f       	cpi	r27, 0xF9	; 249
    3968:	cc f3       	brlt	.-14     	; 0x395c <__fixunssfsi+0x2e>
    396a:	86 95       	lsr	r24
    396c:	77 95       	ror	r23
    396e:	67 95       	ror	r22
    3970:	b3 95       	inc	r27
    3972:	d9 f7       	brne	.-10     	; 0x396a <__fixunssfsi+0x3c>
    3974:	3e f4       	brtc	.+14     	; 0x3984 <__fixunssfsi+0x56>
    3976:	90 95       	com	r25
    3978:	80 95       	com	r24
    397a:	70 95       	com	r23
    397c:	61 95       	neg	r22
    397e:	7f 4f       	sbci	r23, 0xFF	; 255
    3980:	8f 4f       	sbci	r24, 0xFF	; 255
    3982:	9f 4f       	sbci	r25, 0xFF	; 255
    3984:	08 95       	ret

00003986 <__fp_split3>:
    3986:	57 fd       	sbrc	r21, 7
    3988:	90 58       	subi	r25, 0x80	; 128
    398a:	44 0f       	add	r20, r20
    398c:	55 1f       	adc	r21, r21
    398e:	59 f0       	breq	.+22     	; 0x39a6 <__fp_splitA+0x10>
    3990:	5f 3f       	cpi	r21, 0xFF	; 255
    3992:	71 f0       	breq	.+28     	; 0x39b0 <__fp_splitA+0x1a>
    3994:	47 95       	ror	r20

00003996 <__fp_splitA>:
    3996:	88 0f       	add	r24, r24
    3998:	97 fb       	bst	r25, 7
    399a:	99 1f       	adc	r25, r25
    399c:	61 f0       	breq	.+24     	; 0x39b6 <__fp_splitA+0x20>
    399e:	9f 3f       	cpi	r25, 0xFF	; 255
    39a0:	79 f0       	breq	.+30     	; 0x39c0 <__fp_splitA+0x2a>
    39a2:	87 95       	ror	r24
    39a4:	08 95       	ret
    39a6:	12 16       	cp	r1, r18
    39a8:	13 06       	cpc	r1, r19
    39aa:	14 06       	cpc	r1, r20
    39ac:	55 1f       	adc	r21, r21
    39ae:	f2 cf       	rjmp	.-28     	; 0x3994 <__fp_split3+0xe>
    39b0:	46 95       	lsr	r20
    39b2:	f1 df       	rcall	.-30     	; 0x3996 <__fp_splitA>
    39b4:	08 c0       	rjmp	.+16     	; 0x39c6 <__fp_splitA+0x30>
    39b6:	16 16       	cp	r1, r22
    39b8:	17 06       	cpc	r1, r23
    39ba:	18 06       	cpc	r1, r24
    39bc:	99 1f       	adc	r25, r25
    39be:	f1 cf       	rjmp	.-30     	; 0x39a2 <__fp_splitA+0xc>
    39c0:	86 95       	lsr	r24
    39c2:	71 05       	cpc	r23, r1
    39c4:	61 05       	cpc	r22, r1
    39c6:	08 94       	sec
    39c8:	08 95       	ret

000039ca <__fp_zero>:
    39ca:	e8 94       	clt

000039cc <__fp_szero>:
    39cc:	bb 27       	eor	r27, r27
    39ce:	66 27       	eor	r22, r22
    39d0:	77 27       	eor	r23, r23
    39d2:	cb 01       	movw	r24, r22
    39d4:	97 f9       	bld	r25, 7
    39d6:	08 95       	ret

000039d8 <_hihTwiCallback>:
    39d8:	65 30       	cpi	r22, 0x05	; 5
    39da:	f1 f4       	brne	.+60     	; 0x3a18 <_hihTwiCallback+0x40>
    39dc:	fa 01       	movw	r30, r20
    39de:	80 81       	ld	r24, Z
    39e0:	8f 73       	andi	r24, 0x3F	; 63
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	98 2f       	mov	r25, r24
    39e6:	88 27       	eor	r24, r24
    39e8:	21 81       	ldd	r18, Z+1	; 0x01
    39ea:	82 2b       	or	r24, r18
    39ec:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    39f0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    39f4:	82 81       	ldd	r24, Z+2	; 0x02
    39f6:	f0 e4       	ldi	r31, 0x40	; 64
    39f8:	8f 9f       	mul	r24, r31
    39fa:	c0 01       	movw	r24, r0
    39fc:	11 24       	eor	r1, r1
    39fe:	fa 01       	movw	r30, r20
    3a00:	23 81       	ldd	r18, Z+3	; 0x03
    3a02:	26 95       	lsr	r18
    3a04:	26 95       	lsr	r18
    3a06:	82 2b       	or	r24, r18
    3a08:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3a0c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	80 93 f9 13 	sts	0x13F9, r24	; 0x8013f9 <_measuringIsReady>
    3a16:	08 95       	ret
    3a18:	64 30       	cpi	r22, 0x04	; 4
    3a1a:	51 f0       	breq	.+20     	; 0x3a30 <_hihTwiCallback+0x58>
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	90 e4       	ldi	r25, 0x40	; 64
    3a20:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3a24:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3a28:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3a2c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3a30:	08 95       	ret

00003a32 <hih8120_initialise>:
    3a32:	0f 93       	push	r16
    3a34:	1f 93       	push	r17
    3a36:	0c ee       	ldi	r16, 0xEC	; 236
    3a38:	1c e1       	ldi	r17, 0x1C	; 28
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	34 e2       	ldi	r19, 0x24	; 36
    3a3e:	44 ef       	ldi	r20, 0xF4	; 244
    3a40:	50 e0       	ldi	r21, 0x00	; 0
    3a42:	60 e0       	ldi	r22, 0x00	; 0
    3a44:	87 e2       	ldi	r24, 0x27	; 39
    3a46:	0e 94 ad 29 	call	0x535a	; 0x535a <twiCreate>
    3a4a:	90 93 fb 13 	sts	0x13FB, r25	; 0x8013fb <_hih8120Handler+0x1>
    3a4e:	80 93 fa 13 	sts	0x13FA, r24	; 0x8013fa <_hih8120Handler>
    3a52:	21 e0       	ldi	r18, 0x01	; 1
    3a54:	89 2b       	or	r24, r25
    3a56:	09 f0       	breq	.+2      	; 0x3a5a <hih8120_initialise+0x28>
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	82 2f       	mov	r24, r18
    3a5c:	1f 91       	pop	r17
    3a5e:	0f 91       	pop	r16
    3a60:	08 95       	ret

00003a62 <hih8120_wakeup>:
    3a62:	80 91 fa 13 	lds	r24, 0x13FA	; 0x8013fa <_hih8120Handler>
    3a66:	90 91 fb 13 	lds	r25, 0x13FB	; 0x8013fb <_hih8120Handler+0x1>
    3a6a:	00 97       	sbiw	r24, 0x00	; 0
    3a6c:	59 f0       	breq	.+22     	; 0x3a84 <hih8120_wakeup+0x22>
    3a6e:	40 e0       	ldi	r20, 0x00	; 0
    3a70:	60 e0       	ldi	r22, 0x00	; 0
    3a72:	70 e0       	ldi	r23, 0x00	; 0
    3a74:	0e 94 fe 29 	call	0x53fc	; 0x53fc <twiTransmit>
    3a78:	84 30       	cpi	r24, 0x04	; 4
    3a7a:	31 f4       	brne	.+12     	; 0x3a88 <hih8120_wakeup+0x26>
    3a7c:	10 92 f9 13 	sts	0x13F9, r1	; 0x8013f9 <_measuringIsReady>
    3a80:	80 e0       	ldi	r24, 0x00	; 0
    3a82:	08 95       	ret
    3a84:	82 e0       	ldi	r24, 0x02	; 2
    3a86:	08 95       	ret
    3a88:	83 e0       	ldi	r24, 0x03	; 3
    3a8a:	08 95       	ret

00003a8c <hih8120_measure>:
    3a8c:	80 91 fa 13 	lds	r24, 0x13FA	; 0x8013fa <_hih8120Handler>
    3a90:	90 91 fb 13 	lds	r25, 0x13FB	; 0x8013fb <_hih8120Handler+0x1>
    3a94:	00 97       	sbiw	r24, 0x00	; 0
    3a96:	39 f0       	breq	.+14     	; 0x3aa6 <hih8120_measure+0x1a>
    3a98:	64 e0       	ldi	r22, 0x04	; 4
    3a9a:	0e 94 4a 2a 	call	0x5494	; 0x5494 <twiReceive>
    3a9e:	85 30       	cpi	r24, 0x05	; 5
    3aa0:	21 f0       	breq	.+8      	; 0x3aaa <hih8120_measure+0x1e>
    3aa2:	83 e0       	ldi	r24, 0x03	; 3
    3aa4:	08 95       	ret
    3aa6:	82 e0       	ldi	r24, 0x02	; 2
    3aa8:	08 95       	ret
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	08 95       	ret

00003aae <hih8120_getHumidity>:
    3aae:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3ab2:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	0e 94 2f 2c 	call	0x585e	; 0x585e <__floatunsisf>
    3abe:	20 e0       	ldi	r18, 0x00	; 0
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
    3ac2:	48 ec       	ldi	r20, 0xC8	; 200
    3ac4:	52 e4       	ldi	r21, 0x42	; 66
    3ac6:	0e 94 98 2c 	call	0x5930	; 0x5930 <__mulsf3>
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	38 ef       	ldi	r19, 0xF8	; 248
    3ace:	4f e7       	ldi	r20, 0x7F	; 127
    3ad0:	56 e4       	ldi	r21, 0x46	; 70
    3ad2:	0c 94 bd 2b 	jmp	0x577a	; 0x577a <__divsf3>
    3ad6:	08 95       	ret

00003ad8 <hih8120_getHumidityPercent_x10>:
    3ad8:	ea df       	rcall	.-44     	; 0x3aae <hih8120_getHumidity>
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	40 e2       	ldi	r20, 0x20	; 32
    3ae0:	51 e4       	ldi	r21, 0x41	; 65
    3ae2:	0e 94 98 2c 	call	0x5930	; 0x5930 <__mulsf3>
    3ae6:	23 df       	rcall	.-442    	; 0x392e <__fixunssfsi>
    3ae8:	cb 01       	movw	r24, r22
    3aea:	08 95       	ret

00003aec <hih8120_getTemperature>:
    3aec:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3af0:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3af4:	80 e0       	ldi	r24, 0x00	; 0
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	0e 94 2f 2c 	call	0x585e	; 0x585e <__floatunsisf>
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	30 e0       	ldi	r19, 0x00	; 0
    3b00:	45 e2       	ldi	r20, 0x25	; 37
    3b02:	53 e4       	ldi	r21, 0x43	; 67
    3b04:	0e 94 98 2c 	call	0x5930	; 0x5930 <__mulsf3>
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	38 ef       	ldi	r19, 0xF8	; 248
    3b0c:	4f e7       	ldi	r20, 0x7F	; 127
    3b0e:	56 e4       	ldi	r21, 0x46	; 70
    3b10:	0e 94 bd 2b 	call	0x577a	; 0x577a <__divsf3>
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	40 e2       	ldi	r20, 0x20	; 32
    3b1a:	52 e4       	ldi	r21, 0x42	; 66
    3b1c:	0c 94 56 2b 	jmp	0x56ac	; 0x56ac <__subsf3>
    3b20:	08 95       	ret

00003b22 <hih8120_getTemperature_x10>:
    3b22:	e4 df       	rcall	.-56     	; 0x3aec <hih8120_getTemperature>
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	40 e2       	ldi	r20, 0x20	; 32
    3b2a:	51 e4       	ldi	r21, 0x41	; 65
    3b2c:	0e 94 98 2c 	call	0x5930	; 0x5930 <__mulsf3>
    3b30:	0e 94 28 2c 	call	0x5850	; 0x5850 <__fixsfsi>
    3b34:	cb 01       	movw	r24, r22
    3b36:	08 95       	ret

00003b38 <_serialCallBack>:
    3b38:	0f 93       	push	r16
    3b3a:	1f 93       	push	r17
    3b3c:	cf 93       	push	r28
    3b3e:	df 93       	push	r29
    3b40:	1f 92       	push	r1
    3b42:	1f 92       	push	r1
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
    3b48:	8c 01       	movw	r16, r24
    3b4a:	19 82       	std	Y+1, r1	; 0x01
    3b4c:	2d c0       	rjmp	.+90     	; 0x3ba8 <_serialCallBack+0x70>
    3b4e:	e0 91 33 14 	lds	r30, 0x1433	; 0x801433 <rec_buf_inp.2878>
    3b52:	ec 32       	cpi	r30, 0x2C	; 44
    3b54:	50 f4       	brcc	.+20     	; 0x3b6a <_serialCallBack+0x32>
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	8e 0f       	add	r24, r30
    3b5a:	80 93 33 14 	sts	0x1433, r24	; 0x801433 <rec_buf_inp.2878>
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	eb 59       	subi	r30, 0x9B	; 155
    3b62:	fb 4e       	sbci	r31, 0xEB	; 235
    3b64:	8a 81       	ldd	r24, Y+2	; 0x02
    3b66:	80 83       	st	Z, r24
    3b68:	02 c0       	rjmp	.+4      	; 0x3b6e <_serialCallBack+0x36>
    3b6a:	10 92 33 14 	sts	0x1433, r1	; 0x801433 <rec_buf_inp.2878>
    3b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b70:	8a 30       	cpi	r24, 0x0A	; 10
    3b72:	d1 f4       	brne	.+52     	; 0x3ba8 <_serialCallBack+0x70>
    3b74:	40 91 33 14 	lds	r20, 0x1433	; 0x801433 <rec_buf_inp.2878>
    3b78:	50 e0       	ldi	r21, 0x00	; 0
    3b7a:	fa 01       	movw	r30, r20
    3b7c:	ed 59       	subi	r30, 0x9D	; 157
    3b7e:	fb 4e       	sbci	r31, 0xEB	; 235
    3b80:	10 82       	st	Z, r1
    3b82:	41 50       	subi	r20, 0x01	; 1
    3b84:	51 09       	sbc	r21, r1
    3b86:	9e 01       	movw	r18, r28
    3b88:	2f 5f       	subi	r18, 0xFF	; 255
    3b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b8c:	65 e6       	ldi	r22, 0x65	; 101
    3b8e:	74 e1       	ldi	r23, 0x14	; 20
    3b90:	80 91 36 14 	lds	r24, 0x1436	; 0x801436 <_serialReplyBufferHandle>
    3b94:	90 91 37 14 	lds	r25, 0x1437	; 0x801437 <_serialReplyBufferHandle+0x1>
    3b98:	0e 94 3f 0a 	call	0x147e	; 0x147e <xStreamBufferSendFromISR>
    3b9c:	89 81       	ldd	r24, Y+1	; 0x01
    3b9e:	81 11       	cpse	r24, r1
    3ba0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <vPortYield>
    3ba4:	10 92 33 14 	sts	0x1433, r1	; 0x801433 <rec_buf_inp.2878>
    3ba8:	be 01       	movw	r22, r28
    3baa:	6e 5f       	subi	r22, 0xFE	; 254
    3bac:	7f 4f       	sbci	r23, 0xFF	; 255
    3bae:	c8 01       	movw	r24, r16
    3bb0:	3b d6       	rcall	.+3190   	; 0x4828 <serial_getByte>
    3bb2:	88 23       	and	r24, r24
    3bb4:	61 f2       	breq	.-104    	; 0x3b4e <_serialCallBack+0x16>
    3bb6:	0f 90       	pop	r0
    3bb8:	0f 90       	pop	r0
    3bba:	df 91       	pop	r29
    3bbc:	cf 91       	pop	r28
    3bbe:	1f 91       	pop	r17
    3bc0:	0f 91       	pop	r16
    3bc2:	08 95       	ret

00003bc4 <_uploadMessage>:
    3bc4:	0f 93       	push	r16
    3bc6:	1f 93       	push	r17
    3bc8:	cf 93       	push	r28
    3bca:	df 93       	push	r29
    3bcc:	8c 01       	movw	r16, r24
    3bce:	eb 01       	movw	r28, r22
    3bd0:	80 91 36 14 	lds	r24, 0x1436	; 0x801436 <_serialReplyBufferHandle>
    3bd4:	90 91 37 14 	lds	r25, 0x1437	; 0x801437 <_serialReplyBufferHandle+0x1>
    3bd8:	0e 94 4c 09 	call	0x1298	; 0x1298 <xStreamBufferReset>
    3bdc:	b8 01       	movw	r22, r16
    3bde:	8c ef       	ldi	r24, 0xFC	; 252
    3be0:	93 e1       	ldi	r25, 0x13	; 19
    3be2:	0e 94 b1 2e 	call	0x5d62	; 0x5d62 <strcpy>
    3be6:	20 97       	sbiw	r28, 0x00	; 0
    3be8:	79 f0       	breq	.+30     	; 0x3c08 <_uploadMessage+0x44>
    3bea:	ec ef       	ldi	r30, 0xFC	; 252
    3bec:	f3 e1       	ldi	r31, 0x13	; 19
    3bee:	01 90       	ld	r0, Z+
    3bf0:	00 20       	and	r0, r0
    3bf2:	e9 f7       	brne	.-6      	; 0x3bee <_uploadMessage+0x2a>
    3bf4:	31 97       	sbiw	r30, 0x01	; 1
    3bf6:	80 e2       	ldi	r24, 0x20	; 32
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	91 83       	std	Z+1, r25	; 0x01
    3bfc:	80 83       	st	Z, r24
    3bfe:	be 01       	movw	r22, r28
    3c00:	8c ef       	ldi	r24, 0xFC	; 252
    3c02:	93 e1       	ldi	r25, 0x13	; 19
    3c04:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <strcat>
    3c08:	ec ef       	ldi	r30, 0xFC	; 252
    3c0a:	f3 e1       	ldi	r31, 0x13	; 19
    3c0c:	df 01       	movw	r26, r30
    3c0e:	0d 90       	ld	r0, X+
    3c10:	00 20       	and	r0, r0
    3c12:	e9 f7       	brne	.-6      	; 0x3c0e <_uploadMessage+0x4a>
    3c14:	11 97       	sbiw	r26, 0x01	; 1
    3c16:	8d e0       	ldi	r24, 0x0D	; 13
    3c18:	9a e0       	ldi	r25, 0x0A	; 10
    3c1a:	11 96       	adiw	r26, 0x01	; 1
    3c1c:	9c 93       	st	X, r25
    3c1e:	8e 93       	st	-X, r24
    3c20:	12 96       	adiw	r26, 0x02	; 2
    3c22:	1c 92       	st	X, r1
    3c24:	01 90       	ld	r0, Z+
    3c26:	00 20       	and	r0, r0
    3c28:	e9 f7       	brne	.-6      	; 0x3c24 <_uploadMessage+0x60>
    3c2a:	31 97       	sbiw	r30, 0x01	; 1
    3c2c:	ec 5f       	subi	r30, 0xFC	; 252
    3c2e:	f3 41       	sbci	r31, 0x13	; 19
    3c30:	ae 2f       	mov	r26, r30
    3c32:	8c ef       	ldi	r24, 0xFC	; 252
    3c34:	93 e1       	ldi	r25, 0x13	; 19
    3c36:	ac 01       	movw	r20, r24
    3c38:	6a 2f       	mov	r22, r26
    3c3a:	80 91 38 14 	lds	r24, 0x1438	; 0x801438 <_rn2483_serial>
    3c3e:	90 91 39 14 	lds	r25, 0x1439	; 0x801439 <_rn2483_serial+0x1>
    3c42:	9d d5       	rcall	.+2874   	; 0x477e <serial_sendBytes>
    3c44:	81 11       	cpse	r24, r1
    3c46:	11 c0       	rjmp	.+34     	; 0x3c6a <_uploadMessage+0xa6>
    3c48:	08 e2       	ldi	r16, 0x28	; 40
    3c4a:	15 e0       	ldi	r17, 0x05	; 5
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	4d e2       	ldi	r20, 0x2D	; 45
    3c52:	50 e0       	ldi	r21, 0x00	; 0
    3c54:	6f eb       	ldi	r22, 0xBF	; 191
    3c56:	74 e1       	ldi	r23, 0x14	; 20
    3c58:	80 91 36 14 	lds	r24, 0x1436	; 0x801436 <_serialReplyBufferHandle>
    3c5c:	90 91 37 14 	lds	r25, 0x1437	; 0x801437 <_serialReplyBufferHandle+0x1>
    3c60:	0e 94 83 0a 	call	0x1506	; 0x1506 <xStreamBufferReceive>
    3c64:	8f eb       	ldi	r24, 0xBF	; 191
    3c66:	94 e1       	ldi	r25, 0x14	; 20
    3c68:	02 c0       	rjmp	.+4      	; 0x3c6e <_uploadMessage+0xaa>
    3c6a:	80 e0       	ldi	r24, 0x00	; 0
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	df 91       	pop	r29
    3c70:	cf 91       	pop	r28
    3c72:	1f 91       	pop	r17
    3c74:	0f 91       	pop	r16
    3c76:	08 95       	ret

00003c78 <_reply2ReturnCode>:
    3c78:	2f 92       	push	r2
    3c7a:	3f 92       	push	r3
    3c7c:	4f 92       	push	r4
    3c7e:	5f 92       	push	r5
    3c80:	6f 92       	push	r6
    3c82:	7f 92       	push	r7
    3c84:	8f 92       	push	r8
    3c86:	9f 92       	push	r9
    3c88:	af 92       	push	r10
    3c8a:	bf 92       	push	r11
    3c8c:	cf 92       	push	r12
    3c8e:	df 92       	push	r13
    3c90:	ef 92       	push	r14
    3c92:	ff 92       	push	r15
    3c94:	0f 93       	push	r16
    3c96:	1f 93       	push	r17
    3c98:	cf 93       	push	r28
    3c9a:	df 93       	push	r29
    3c9c:	5c 01       	movw	r10, r24
    3c9e:	fc 01       	movw	r30, r24
    3ca0:	01 90       	ld	r0, Z+
    3ca2:	00 20       	and	r0, r0
    3ca4:	e9 f7       	brne	.-6      	; 0x3ca0 <_reply2ReturnCode+0x28>
    3ca6:	31 97       	sbiw	r30, 0x01	; 1
    3ca8:	6f 01       	movw	r12, r30
    3caa:	c8 1a       	sub	r12, r24
    3cac:	d9 0a       	sbc	r13, r25
    3cae:	5c 2c       	mov	r5, r12
    3cb0:	0f 2e       	mov	r0, r31
    3cb2:	fb ed       	ldi	r31, 0xDB	; 219
    3cb4:	8f 2e       	mov	r8, r31
    3cb6:	f8 e0       	ldi	r31, 0x08	; 8
    3cb8:	9f 2e       	mov	r9, r31
    3cba:	f0 2d       	mov	r31, r0
    3cbc:	e1 2c       	mov	r14, r1
    3cbe:	f1 2c       	mov	r15, r1
    3cc0:	4c 2c       	mov	r4, r12
    3cc2:	37 01       	movw	r6, r14
    3cc4:	f4 01       	movw	r30, r8
    3cc6:	01 81       	ldd	r16, Z+1	; 0x01
    3cc8:	12 81       	ldd	r17, Z+2	; 0x02
    3cca:	e8 01       	movw	r28, r16
    3ccc:	09 90       	ld	r0, Y+
    3cce:	00 20       	and	r0, r0
    3cd0:	e9 f7       	brne	.-6      	; 0x3ccc <_reply2ReturnCode+0x54>
    3cd2:	21 97       	sbiw	r28, 0x01	; 1
    3cd4:	c0 1b       	sub	r28, r16
    3cd6:	d1 0b       	sbc	r29, r17
    3cd8:	3c 2e       	mov	r3, r28
    3cda:	f9 e0       	ldi	r31, 0x09	; 9
    3cdc:	cf 16       	cp	r12, r31
    3cde:	d1 04       	cpc	r13, r1
    3ce0:	58 f0       	brcs	.+22     	; 0x3cf8 <_reply2ReturnCode+0x80>
    3ce2:	f4 01       	movw	r30, r8
    3ce4:	20 80       	ld	r2, Z
    3ce6:	fe e0       	ldi	r31, 0x0E	; 14
    3ce8:	2f 12       	cpse	r2, r31
    3cea:	06 c0       	rjmp	.+12     	; 0x3cf8 <_reply2ReturnCode+0x80>
    3cec:	b8 01       	movw	r22, r16
    3cee:	c5 01       	movw	r24, r10
    3cf0:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <strcasestr>
    3cf4:	89 2b       	or	r24, r25
    3cf6:	09 f5       	brne	.+66     	; 0x3d3a <_reply2ReturnCode+0xc2>
    3cf8:	44 2d       	mov	r20, r4
    3cfa:	35 14       	cp	r3, r5
    3cfc:	08 f4       	brcc	.+2      	; 0x3d00 <_reply2ReturnCode+0x88>
    3cfe:	4c 2f       	mov	r20, r28
    3d00:	50 e0       	ldi	r21, 0x00	; 0
    3d02:	b8 01       	movw	r22, r16
    3d04:	c5 01       	movw	r24, r10
    3d06:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <strncasecmp>
    3d0a:	89 2b       	or	r24, r25
    3d0c:	49 f4       	brne	.+18     	; 0x3d20 <_reply2ReturnCode+0xa8>
    3d0e:	f3 01       	movw	r30, r6
    3d10:	ee 0f       	add	r30, r30
    3d12:	ff 1f       	adc	r31, r31
    3d14:	e6 0d       	add	r30, r6
    3d16:	f7 1d       	adc	r31, r7
    3d18:	e5 52       	subi	r30, 0x25	; 37
    3d1a:	f7 4f       	sbci	r31, 0xF7	; 247
    3d1c:	20 80       	ld	r2, Z
    3d1e:	0d c0       	rjmp	.+26     	; 0x3d3a <_reply2ReturnCode+0xc2>
    3d20:	8f ef       	ldi	r24, 0xFF	; 255
    3d22:	e8 1a       	sub	r14, r24
    3d24:	f8 0a       	sbc	r15, r24
    3d26:	e3 e0       	ldi	r30, 0x03	; 3
    3d28:	8e 0e       	add	r8, r30
    3d2a:	91 1c       	adc	r9, r1
    3d2c:	f1 e1       	ldi	r31, 0x11	; 17
    3d2e:	ef 16       	cp	r14, r31
    3d30:	f1 04       	cpc	r15, r1
    3d32:	39 f6       	brne	.-114    	; 0x3cc2 <_reply2ReturnCode+0x4a>
    3d34:	68 94       	set
    3d36:	22 24       	eor	r2, r2
    3d38:	24 f8       	bld	r2, 4
    3d3a:	82 2d       	mov	r24, r2
    3d3c:	df 91       	pop	r29
    3d3e:	cf 91       	pop	r28
    3d40:	1f 91       	pop	r17
    3d42:	0f 91       	pop	r16
    3d44:	ff 90       	pop	r15
    3d46:	ef 90       	pop	r14
    3d48:	df 90       	pop	r13
    3d4a:	cf 90       	pop	r12
    3d4c:	bf 90       	pop	r11
    3d4e:	af 90       	pop	r10
    3d50:	9f 90       	pop	r9
    3d52:	8f 90       	pop	r8
    3d54:	7f 90       	pop	r7
    3d56:	6f 90       	pop	r6
    3d58:	5f 90       	pop	r5
    3d5a:	4f 90       	pop	r4
    3d5c:	3f 90       	pop	r3
    3d5e:	2f 90       	pop	r2
    3d60:	08 95       	ret

00003d62 <_uploadMessageRc>:
    3d62:	30 df       	rcall	.-416    	; 0x3bc4 <_uploadMessage>
    3d64:	89 cf       	rjmp	.-238    	; 0x3c78 <_reply2ReturnCode>
    3d66:	08 95       	ret

00003d68 <lora_driver_flushBuffers>:
    3d68:	80 91 36 14 	lds	r24, 0x1436	; 0x801436 <_serialReplyBufferHandle>
    3d6c:	90 91 37 14 	lds	r25, 0x1437	; 0x801437 <_serialReplyBufferHandle+0x1>
    3d70:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <xStreamBufferReset>
    3d74:	08 95       	ret

00003d76 <lora_driver_initialise>:
    3d76:	8f 92       	push	r8
    3d78:	9f 92       	push	r9
    3d7a:	af 92       	push	r10
    3d7c:	cf 92       	push	r12
    3d7e:	ef 92       	push	r14
    3d80:	0f 93       	push	r16
    3d82:	1f 93       	push	r17
    3d84:	cf 93       	push	r28
    3d86:	c8 2f       	mov	r28, r24
    3d88:	8b 01       	movw	r16, r22
    3d8a:	41 e0       	ldi	r20, 0x01	; 1
    3d8c:	60 e0       	ldi	r22, 0x00	; 0
    3d8e:	70 e0       	ldi	r23, 0x00	; 0
    3d90:	88 ec       	ldi	r24, 0xC8	; 200
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	0e 94 1a 09 	call	0x1234	; 0x1234 <xStreamBufferGenericCreate>
    3d98:	90 93 37 14 	sts	0x1437, r25	; 0x801437 <_serialReplyBufferHandle+0x1>
    3d9c:	80 93 36 14 	sts	0x1436, r24	; 0x801436 <_serialReplyBufferHandle>
    3da0:	10 93 35 14 	sts	0x1435, r17	; 0x801435 <_downlinkMessageBuffer+0x1>
    3da4:	00 93 34 14 	sts	0x1434, r16	; 0x801434 <_downlinkMessageBuffer>
    3da8:	0f 2e       	mov	r0, r31
    3daa:	fc e9       	ldi	r31, 0x9C	; 156
    3dac:	8f 2e       	mov	r8, r31
    3dae:	fd e1       	ldi	r31, 0x1D	; 29
    3db0:	9f 2e       	mov	r9, r31
    3db2:	f0 2d       	mov	r31, r0
    3db4:	68 94       	set
    3db6:	aa 24       	eor	r10, r10
    3db8:	a6 f8       	bld	r10, 6
    3dba:	68 94       	set
    3dbc:	cc 24       	eor	r12, r12
    3dbe:	c6 f8       	bld	r12, 6
    3dc0:	e1 2c       	mov	r14, r1
    3dc2:	00 e0       	ldi	r16, 0x00	; 0
    3dc4:	23 e0       	ldi	r18, 0x03	; 3
    3dc6:	40 e0       	ldi	r20, 0x00	; 0
    3dc8:	51 ee       	ldi	r21, 0xE1	; 225
    3dca:	60 e0       	ldi	r22, 0x00	; 0
    3dcc:	70 e0       	ldi	r23, 0x00	; 0
    3dce:	8c 2f       	mov	r24, r28
    3dd0:	06 d4       	rcall	.+2060   	; 0x45de <serial_create>
    3dd2:	90 93 39 14 	sts	0x1439, r25	; 0x801439 <_rn2483_serial+0x1>
    3dd6:	80 93 38 14 	sts	0x1438, r24	; 0x801438 <_rn2483_serial>
    3dda:	e7 e0       	ldi	r30, 0x07	; 7
    3ddc:	f1 e0       	ldi	r31, 0x01	; 1
    3dde:	80 81       	ld	r24, Z
    3de0:	80 61       	ori	r24, 0x10	; 16
    3de2:	80 83       	st	Z, r24
    3de4:	cf 91       	pop	r28
    3de6:	1f 91       	pop	r17
    3de8:	0f 91       	pop	r16
    3dea:	ef 90       	pop	r14
    3dec:	cf 90       	pop	r12
    3dee:	af 90       	pop	r10
    3df0:	9f 90       	pop	r9
    3df2:	8f 90       	pop	r8
    3df4:	08 95       	ret

00003df6 <lora_driver_resetRn2483>:
    3df6:	88 23       	and	r24, r24
    3df8:	31 f0       	breq	.+12     	; 0x3e06 <lora_driver_resetRn2483+0x10>
    3dfa:	e8 e0       	ldi	r30, 0x08	; 8
    3dfc:	f1 e0       	ldi	r31, 0x01	; 1
    3dfe:	80 81       	ld	r24, Z
    3e00:	8f 7e       	andi	r24, 0xEF	; 239
    3e02:	80 83       	st	Z, r24
    3e04:	08 95       	ret
    3e06:	e8 e0       	ldi	r30, 0x08	; 8
    3e08:	f1 e0       	ldi	r31, 0x01	; 1
    3e0a:	80 81       	ld	r24, Z
    3e0c:	80 61       	ori	r24, 0x10	; 16
    3e0e:	80 83       	st	Z, r24
    3e10:	08 95       	ret

00003e12 <lora_driver_rn2483FactoryReset>:
    3e12:	60 e0       	ldi	r22, 0x00	; 0
    3e14:	70 e0       	ldi	r23, 0x00	; 0
    3e16:	81 e6       	ldi	r24, 0x61	; 97
    3e18:	96 e0       	ldi	r25, 0x06	; 6
    3e1a:	d4 de       	rcall	.-600    	; 0x3bc4 <_uploadMessage>
    3e1c:	ef eb       	ldi	r30, 0xBF	; 191
    3e1e:	f4 e1       	ldi	r31, 0x14	; 20
    3e20:	01 90       	ld	r0, Z+
    3e22:	00 20       	and	r0, r0
    3e24:	e9 f7       	brne	.-6      	; 0x3e20 <lora_driver_rn2483FactoryReset+0xe>
    3e26:	31 97       	sbiw	r30, 0x01	; 1
    3e28:	ef 5b       	subi	r30, 0xBF	; 191
    3e2a:	f4 41       	sbci	r31, 0x14	; 20
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	75 97       	sbiw	r30, 0x15	; 21
    3e30:	08 f0       	brcs	.+2      	; 0x3e34 <lora_driver_rn2483FactoryReset+0x22>
    3e32:	80 e0       	ldi	r24, 0x00	; 0
    3e34:	08 95       	ret

00003e36 <lora_driver_getRn2483Hweui>:
    3e36:	cf 93       	push	r28
    3e38:	df 93       	push	r29
    3e3a:	ec 01       	movw	r28, r24
    3e3c:	60 e0       	ldi	r22, 0x00	; 0
    3e3e:	70 e0       	ldi	r23, 0x00	; 0
    3e40:	82 e7       	ldi	r24, 0x72	; 114
    3e42:	96 e0       	ldi	r25, 0x06	; 6
    3e44:	bf de       	rcall	.-642    	; 0x3bc4 <_uploadMessage>
    3e46:	ef eb       	ldi	r30, 0xBF	; 191
    3e48:	f4 e1       	ldi	r31, 0x14	; 20
    3e4a:	01 90       	ld	r0, Z+
    3e4c:	00 20       	and	r0, r0
    3e4e:	e9 f7       	brne	.-6      	; 0x3e4a <lora_driver_getRn2483Hweui+0x14>
    3e50:	e0 5d       	subi	r30, 0xD0	; 208
    3e52:	f4 41       	sbci	r31, 0x14	; 20
    3e54:	39 f4       	brne	.+14     	; 0x3e64 <lora_driver_getRn2483Hweui+0x2e>
    3e56:	6f eb       	ldi	r22, 0xBF	; 191
    3e58:	74 e1       	ldi	r23, 0x14	; 20
    3e5a:	ce 01       	movw	r24, r28
    3e5c:	0e 94 b1 2e 	call	0x5d62	; 0x5d62 <strcpy>
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	02 c0       	rjmp	.+4      	; 0x3e68 <lora_driver_getRn2483Hweui+0x32>
    3e64:	18 82       	st	Y, r1
    3e66:	81 e0       	ldi	r24, 0x01	; 1
    3e68:	df 91       	pop	r29
    3e6a:	cf 91       	pop	r28
    3e6c:	08 95       	ret

00003e6e <lora_driver_setDeviceIdentifier>:
    3e6e:	fc 01       	movw	r30, r24
    3e70:	01 90       	ld	r0, Z+
    3e72:	00 20       	and	r0, r0
    3e74:	e9 f7       	brne	.-6      	; 0x3e70 <lora_driver_setDeviceIdentifier+0x2>
    3e76:	9f 01       	movw	r18, r30
    3e78:	21 51       	subi	r18, 0x11	; 17
    3e7a:	31 09       	sbc	r19, r1
    3e7c:	28 17       	cp	r18, r24
    3e7e:	39 07       	cpc	r19, r25
    3e80:	29 f4       	brne	.+10     	; 0x3e8c <lora_driver_setDeviceIdentifier+0x1e>
    3e82:	bc 01       	movw	r22, r24
    3e84:	80 ea       	ldi	r24, 0xA0	; 160
    3e86:	96 e0       	ldi	r25, 0x06	; 6
    3e88:	6c cf       	rjmp	.-296    	; 0x3d62 <_uploadMessageRc>
    3e8a:	08 95       	ret
    3e8c:	89 e0       	ldi	r24, 0x09	; 9
    3e8e:	08 95       	ret

00003e90 <lora_driver_setApplicationIdentifier>:
    3e90:	fc 01       	movw	r30, r24
    3e92:	01 90       	ld	r0, Z+
    3e94:	00 20       	and	r0, r0
    3e96:	e9 f7       	brne	.-6      	; 0x3e92 <lora_driver_setApplicationIdentifier+0x2>
    3e98:	9f 01       	movw	r18, r30
    3e9a:	21 51       	subi	r18, 0x11	; 17
    3e9c:	31 09       	sbc	r19, r1
    3e9e:	28 17       	cp	r18, r24
    3ea0:	39 07       	cpc	r19, r25
    3ea2:	29 f4       	brne	.+10     	; 0x3eae <lora_driver_setApplicationIdentifier+0x1e>
    3ea4:	bc 01       	movw	r22, r24
    3ea6:	8f ea       	ldi	r24, 0xAF	; 175
    3ea8:	96 e0       	ldi	r25, 0x06	; 6
    3eaa:	5b cf       	rjmp	.-330    	; 0x3d62 <_uploadMessageRc>
    3eac:	08 95       	ret
    3eae:	89 e0       	ldi	r24, 0x09	; 9
    3eb0:	08 95       	ret

00003eb2 <lora_driver_setApplicationKey>:
    3eb2:	fc 01       	movw	r30, r24
    3eb4:	01 90       	ld	r0, Z+
    3eb6:	00 20       	and	r0, r0
    3eb8:	e9 f7       	brne	.-6      	; 0x3eb4 <lora_driver_setApplicationKey+0x2>
    3eba:	9f 01       	movw	r18, r30
    3ebc:	21 52       	subi	r18, 0x21	; 33
    3ebe:	31 09       	sbc	r19, r1
    3ec0:	28 17       	cp	r18, r24
    3ec2:	39 07       	cpc	r19, r25
    3ec4:	29 f4       	brne	.+10     	; 0x3ed0 <lora_driver_setApplicationKey+0x1e>
    3ec6:	bc 01       	movw	r22, r24
    3ec8:	8e eb       	ldi	r24, 0xBE	; 190
    3eca:	96 e0       	ldi	r25, 0x06	; 6
    3ecc:	4a cf       	rjmp	.-364    	; 0x3d62 <_uploadMessageRc>
    3ece:	08 95       	ret
    3ed0:	89 e0       	ldi	r24, 0x09	; 9
    3ed2:	08 95       	ret

00003ed4 <lora_driver_saveMac>:
    3ed4:	60 e0       	ldi	r22, 0x00	; 0
    3ed6:	70 e0       	ldi	r23, 0x00	; 0
    3ed8:	8d ef       	ldi	r24, 0xFD	; 253
    3eda:	96 e0       	ldi	r25, 0x06	; 6
    3edc:	42 cf       	rjmp	.-380    	; 0x3d62 <_uploadMessageRc>
    3ede:	08 95       	ret

00003ee0 <lora_driver_join>:
    3ee0:	0f 93       	push	r16
    3ee2:	1f 93       	push	r17
    3ee4:	e8 2f       	mov	r30, r24
    3ee6:	f0 e0       	ldi	r31, 0x00	; 0
    3ee8:	ee 0f       	add	r30, r30
    3eea:	ff 1f       	adc	r31, r31
    3eec:	e9 52       	subi	r30, 0x29	; 41
    3eee:	f7 4f       	sbci	r31, 0xF7	; 247
    3ef0:	60 81       	ld	r22, Z
    3ef2:	71 81       	ldd	r23, Z+1	; 0x01
    3ef4:	86 e0       	ldi	r24, 0x06	; 6
    3ef6:	97 e0       	ldi	r25, 0x07	; 7
    3ef8:	34 df       	rcall	.-408    	; 0x3d62 <_uploadMessageRc>
    3efa:	81 11       	cpse	r24, r1
    3efc:	14 c0       	rjmp	.+40     	; 0x3f26 <lora_driver_join+0x46>
    3efe:	08 e2       	ldi	r16, 0x28	; 40
    3f00:	15 e0       	ldi	r17, 0x05	; 5
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	4d e2       	ldi	r20, 0x2D	; 45
    3f08:	50 e0       	ldi	r21, 0x00	; 0
    3f0a:	6f eb       	ldi	r22, 0xBF	; 191
    3f0c:	74 e1       	ldi	r23, 0x14	; 20
    3f0e:	80 91 36 14 	lds	r24, 0x1436	; 0x801436 <_serialReplyBufferHandle>
    3f12:	90 91 37 14 	lds	r25, 0x1437	; 0x801437 <_serialReplyBufferHandle+0x1>
    3f16:	0e 94 83 0a 	call	0x1506	; 0x1506 <xStreamBufferReceive>
    3f1a:	88 23       	and	r24, r24
    3f1c:	21 f0       	breq	.+8      	; 0x3f26 <lora_driver_join+0x46>
    3f1e:	8f eb       	ldi	r24, 0xBF	; 191
    3f20:	94 e1       	ldi	r25, 0x14	; 20
    3f22:	aa de       	rcall	.-684    	; 0x3c78 <_reply2ReturnCode>
    3f24:	03 c0       	rjmp	.+6      	; 0x3f2c <lora_driver_join+0x4c>
    3f26:	8f eb       	ldi	r24, 0xBF	; 191
    3f28:	94 e1       	ldi	r25, 0x14	; 20
    3f2a:	a6 de       	rcall	.-692    	; 0x3c78 <_reply2ReturnCode>
    3f2c:	1f 91       	pop	r17
    3f2e:	0f 91       	pop	r16
    3f30:	08 95       	ret

00003f32 <lora_driver_sendUploadMessage>:
    3f32:	0f 93       	push	r16
    3f34:	1f 93       	push	r17
    3f36:	cf 93       	push	r28
    3f38:	df 93       	push	r29
    3f3a:	1f 92       	push	r1
    3f3c:	cd b7       	in	r28, 0x3d	; 61
    3f3e:	de b7       	in	r29, 0x3e	; 62
    3f40:	db 01       	movw	r26, r22
    3f42:	11 96       	adiw	r26, 0x01	; 1
    3f44:	9c 91       	ld	r25, X
    3f46:	11 97       	sbiw	r26, 0x01	; 1
    3f48:	95 31       	cpi	r25, 0x15	; 21
    3f4a:	08 f0       	brcs	.+2      	; 0x3f4e <lora_driver_sendUploadMessage+0x1c>
    3f4c:	b4 c0       	rjmp	.+360    	; 0x40b6 <lora_driver_sendUploadMessage+0x184>
    3f4e:	99 23       	and	r25, r25
    3f50:	81 f1       	breq	.+96     	; 0x3fb2 <lora_driver_sendUploadMessage+0x80>
    3f52:	60 e0       	ldi	r22, 0x00	; 0
    3f54:	70 e0       	ldi	r23, 0x00	; 0
    3f56:	27 2f       	mov	r18, r23
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	46 2f       	mov	r20, r22
    3f5c:	50 e0       	ldi	r21, 0x00	; 0
    3f5e:	fd 01       	movw	r30, r26
    3f60:	e4 0f       	add	r30, r20
    3f62:	f5 1f       	adc	r31, r21
    3f64:	92 81       	ldd	r25, Z+2	; 0x02
    3f66:	92 95       	swap	r25
    3f68:	9f 70       	andi	r25, 0x0F	; 15
    3f6a:	9a 30       	cpi	r25, 0x0A	; 10
    3f6c:	10 f0       	brcs	.+4      	; 0x3f72 <lora_driver_sendUploadMessage+0x40>
    3f6e:	99 5c       	subi	r25, 0xC9	; 201
    3f70:	01 c0       	rjmp	.+2      	; 0x3f74 <lora_driver_sendUploadMessage+0x42>
    3f72:	90 5d       	subi	r25, 0xD0	; 208
    3f74:	f9 01       	movw	r30, r18
    3f76:	e0 5b       	subi	r30, 0xB0	; 176
    3f78:	fb 4e       	sbci	r31, 0xEB	; 235
    3f7a:	90 83       	st	Z, r25
    3f7c:	2f 5f       	subi	r18, 0xFF	; 255
    3f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f80:	fd 01       	movw	r30, r26
    3f82:	e4 0f       	add	r30, r20
    3f84:	f5 1f       	adc	r31, r21
    3f86:	92 81       	ldd	r25, Z+2	; 0x02
    3f88:	9f 70       	andi	r25, 0x0F	; 15
    3f8a:	49 2f       	mov	r20, r25
    3f8c:	50 e0       	ldi	r21, 0x00	; 0
    3f8e:	4a 30       	cpi	r20, 0x0A	; 10
    3f90:	51 05       	cpc	r21, r1
    3f92:	14 f0       	brlt	.+4      	; 0x3f98 <lora_driver_sendUploadMessage+0x66>
    3f94:	99 5c       	subi	r25, 0xC9	; 201
    3f96:	01 c0       	rjmp	.+2      	; 0x3f9a <lora_driver_sendUploadMessage+0x68>
    3f98:	90 5d       	subi	r25, 0xD0	; 208
    3f9a:	f9 01       	movw	r30, r18
    3f9c:	e0 5b       	subi	r30, 0xB0	; 176
    3f9e:	fb 4e       	sbci	r31, 0xEB	; 235
    3fa0:	90 83       	st	Z, r25
    3fa2:	7e 5f       	subi	r23, 0xFE	; 254
    3fa4:	6f 5f       	subi	r22, 0xFF	; 255
    3fa6:	11 96       	adiw	r26, 0x01	; 1
    3fa8:	9c 91       	ld	r25, X
    3faa:	11 97       	sbiw	r26, 0x01	; 1
    3fac:	69 17       	cp	r22, r25
    3fae:	98 f2       	brcs	.-90     	; 0x3f56 <lora_driver_sendUploadMessage+0x24>
    3fb0:	01 c0       	rjmp	.+2      	; 0x3fb4 <lora_driver_sendUploadMessage+0x82>
    3fb2:	70 e0       	ldi	r23, 0x00	; 0
    3fb4:	e7 2f       	mov	r30, r23
    3fb6:	f0 e0       	ldi	r31, 0x00	; 0
    3fb8:	e0 5b       	subi	r30, 0xB0	; 176
    3fba:	fb 4e       	sbci	r31, 0xEB	; 235
    3fbc:	10 82       	st	Z, r1
    3fbe:	4c 91       	ld	r20, X
    3fc0:	81 11       	cpse	r24, r1
    3fc2:	03 c0       	rjmp	.+6      	; 0x3fca <lora_driver_sendUploadMessage+0x98>
    3fc4:	8f e0       	ldi	r24, 0x0F	; 15
    3fc6:	97 e0       	ldi	r25, 0x07	; 7
    3fc8:	02 c0       	rjmp	.+4      	; 0x3fce <lora_driver_sendUploadMessage+0x9c>
    3fca:	81 e1       	ldi	r24, 0x11	; 17
    3fcc:	97 e0       	ldi	r25, 0x07	; 7
    3fce:	20 e5       	ldi	r18, 0x50	; 80
    3fd0:	34 e1       	ldi	r19, 0x14	; 20
    3fd2:	3f 93       	push	r19
    3fd4:	2f 93       	push	r18
    3fd6:	1f 92       	push	r1
    3fd8:	4f 93       	push	r20
    3fda:	9f 93       	push	r25
    3fdc:	8f 93       	push	r24
    3fde:	85 e1       	ldi	r24, 0x15	; 21
    3fe0:	97 e0       	ldi	r25, 0x07	; 7
    3fe2:	9f 93       	push	r25
    3fe4:	8f 93       	push	r24
    3fe6:	82 e9       	ldi	r24, 0x92	; 146
    3fe8:	94 e1       	ldi	r25, 0x14	; 20
    3fea:	9f 93       	push	r25
    3fec:	8f 93       	push	r24
    3fee:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <sprintf>
    3ff2:	60 e0       	ldi	r22, 0x00	; 0
    3ff4:	70 e0       	ldi	r23, 0x00	; 0
    3ff6:	82 e9       	ldi	r24, 0x92	; 146
    3ff8:	94 e1       	ldi	r25, 0x14	; 20
    3ffa:	b3 de       	rcall	.-666    	; 0x3d62 <_uploadMessageRc>
    3ffc:	0f b6       	in	r0, 0x3f	; 63
    3ffe:	f8 94       	cli
    4000:	de bf       	out	0x3e, r29	; 62
    4002:	0f be       	out	0x3f, r0	; 63
    4004:	cd bf       	out	0x3d, r28	; 61
    4006:	81 11       	cpse	r24, r1
    4008:	59 c0       	rjmp	.+178    	; 0x40bc <lora_driver_sendUploadMessage+0x18a>
    400a:	08 e2       	ldi	r16, 0x28	; 40
    400c:	15 e0       	ldi	r17, 0x05	; 5
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	4d e2       	ldi	r20, 0x2D	; 45
    4014:	50 e0       	ldi	r21, 0x00	; 0
    4016:	6f eb       	ldi	r22, 0xBF	; 191
    4018:	74 e1       	ldi	r23, 0x14	; 20
    401a:	80 91 36 14 	lds	r24, 0x1436	; 0x801436 <_serialReplyBufferHandle>
    401e:	90 91 37 14 	lds	r25, 0x1437	; 0x801437 <_serialReplyBufferHandle+0x1>
    4022:	0e 94 83 0a 	call	0x1506	; 0x1506 <xStreamBufferReceive>
    4026:	88 23       	and	r24, r24
    4028:	09 f4       	brne	.+2      	; 0x402c <lora_driver_sendUploadMessage+0xfa>
    402a:	47 c0       	rjmp	.+142    	; 0x40ba <lora_driver_sendUploadMessage+0x188>
    402c:	8f eb       	ldi	r24, 0xBF	; 191
    402e:	94 e1       	ldi	r25, 0x14	; 20
    4030:	23 de       	rcall	.-954    	; 0x3c78 <_reply2ReturnCode>
    4032:	8e 30       	cpi	r24, 0x0E	; 14
    4034:	09 f0       	breq	.+2      	; 0x4038 <lora_driver_sendUploadMessage+0x106>
    4036:	42 c0       	rjmp	.+132    	; 0x40bc <lora_driver_sendUploadMessage+0x18a>
    4038:	87 e0       	ldi	r24, 0x07	; 7
    403a:	89 83       	std	Y+1, r24	; 0x01
    403c:	80 91 34 14 	lds	r24, 0x1434	; 0x801434 <_downlinkMessageBuffer>
    4040:	90 91 35 14 	lds	r25, 0x1435	; 0x801435 <_downlinkMessageBuffer+0x1>
    4044:	89 2b       	or	r24, r25
    4046:	a9 f1       	breq	.+106    	; 0x40b2 <lora_driver_sendUploadMessage+0x180>
    4048:	be 01       	movw	r22, r28
    404a:	6f 5f       	subi	r22, 0xFF	; 255
    404c:	7f 4f       	sbci	r23, 0xFF	; 255
    404e:	8f eb       	ldi	r24, 0xBF	; 191
    4050:	94 e1       	ldi	r25, 0x14	; 20
    4052:	68 d1       	rcall	.+720    	; 0x4324 <decode_port_no>
    4054:	80 93 3a 14 	sts	0x143A, r24	; 0x80143a <_downlinkPayload>
    4058:	e9 81       	ldd	r30, Y+1	; 0x01
    405a:	f0 e0       	ldi	r31, 0x00	; 0
    405c:	e1 54       	subi	r30, 0x41	; 65
    405e:	fb 4e       	sbci	r31, 0xEB	; 235
    4060:	df 01       	movw	r26, r30
    4062:	0d 90       	ld	r0, X+
    4064:	00 20       	and	r0, r0
    4066:	e9 f7       	brne	.-6      	; 0x4062 <lora_driver_sendUploadMessage+0x130>
    4068:	11 97       	sbiw	r26, 0x01	; 1
    406a:	ae 1b       	sub	r26, r30
    406c:	bf 0b       	sbc	r27, r31
    406e:	aa 23       	and	r26, r26
    4070:	91 f0       	breq	.+36     	; 0x4096 <lora_driver_sendUploadMessage+0x164>
    4072:	bb 27       	eor	r27, r27
    4074:	cd 01       	movw	r24, r26
    4076:	01 97       	sbiw	r24, 0x01	; 1
    4078:	9c 01       	movw	r18, r24
    407a:	12 f4       	brpl	.+4      	; 0x4080 <lora_driver_sendUploadMessage+0x14e>
    407c:	2f 5f       	subi	r18, 0xFF	; 255
    407e:	3f 4f       	sbci	r19, 0xFF	; 255
    4080:	35 95       	asr	r19
    4082:	27 95       	ror	r18
    4084:	20 93 3b 14 	sts	0x143B, r18	; 0x80143b <_downlinkPayload+0x1>
    4088:	af 01       	movw	r20, r30
    408a:	4f 5f       	subi	r20, 0xFF	; 255
    408c:	5f 4f       	sbci	r21, 0xFF	; 255
    408e:	64 e1       	ldi	r22, 0x14	; 20
    4090:	8c e3       	ldi	r24, 0x3C	; 60
    4092:	94 e1       	ldi	r25, 0x14	; 20
    4094:	73 d1       	rcall	.+742    	; 0x437c <decode_hexadecimal_string_bytes>
    4096:	01 e0       	ldi	r16, 0x01	; 1
    4098:	10 e0       	ldi	r17, 0x00	; 0
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	46 e1       	ldi	r20, 0x16	; 22
    40a0:	50 e0       	ldi	r21, 0x00	; 0
    40a2:	6a e3       	ldi	r22, 0x3A	; 58
    40a4:	74 e1       	ldi	r23, 0x14	; 20
    40a6:	80 91 34 14 	lds	r24, 0x1434	; 0x801434 <_downlinkMessageBuffer>
    40aa:	90 91 35 14 	lds	r25, 0x1435	; 0x801435 <_downlinkMessageBuffer+0x1>
    40ae:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <xStreamBufferSend>
    40b2:	8e e0       	ldi	r24, 0x0E	; 14
    40b4:	03 c0       	rjmp	.+6      	; 0x40bc <lora_driver_sendUploadMessage+0x18a>
    40b6:	84 e1       	ldi	r24, 0x14	; 20
    40b8:	01 c0       	rjmp	.+2      	; 0x40bc <lora_driver_sendUploadMessage+0x18a>
    40ba:	80 e0       	ldi	r24, 0x00	; 0
    40bc:	0f 90       	pop	r0
    40be:	df 91       	pop	r29
    40c0:	cf 91       	pop	r28
    40c2:	1f 91       	pop	r17
    40c4:	0f 91       	pop	r16
    40c6:	08 95       	ret

000040c8 <lora_driver_setAdaptiveDataRate>:
    40c8:	81 30       	cpi	r24, 0x01	; 1
    40ca:	19 f0       	breq	.+6      	; 0x40d2 <lora_driver_setAdaptiveDataRate+0xa>
    40cc:	65 e2       	ldi	r22, 0x25	; 37
    40ce:	77 e0       	ldi	r23, 0x07	; 7
    40d0:	02 c0       	rjmp	.+4      	; 0x40d6 <lora_driver_setAdaptiveDataRate+0xe>
    40d2:	6e ef       	ldi	r22, 0xFE	; 254
    40d4:	77 e0       	ldi	r23, 0x07	; 7
    40d6:	89 e2       	ldi	r24, 0x29	; 41
    40d8:	97 e0       	ldi	r25, 0x07	; 7
    40da:	43 ce       	rjmp	.-890    	; 0x3d62 <_uploadMessageRc>
    40dc:	08 95       	ret

000040de <lora_driver_setReceiveDelay>:
    40de:	9f 93       	push	r25
    40e0:	8f 93       	push	r24
    40e2:	8a e5       	ldi	r24, 0x5A	; 90
    40e4:	97 e0       	ldi	r25, 0x07	; 7
    40e6:	9f 93       	push	r25
    40e8:	8f 93       	push	r24
    40ea:	82 e9       	ldi	r24, 0x92	; 146
    40ec:	94 e1       	ldi	r25, 0x14	; 20
    40ee:	9f 93       	push	r25
    40f0:	8f 93       	push	r24
    40f2:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <sprintf>
    40f6:	60 e0       	ldi	r22, 0x00	; 0
    40f8:	70 e0       	ldi	r23, 0x00	; 0
    40fa:	82 e9       	ldi	r24, 0x92	; 146
    40fc:	94 e1       	ldi	r25, 0x14	; 20
    40fe:	31 de       	rcall	.-926    	; 0x3d62 <_uploadMessageRc>
    4100:	0f 90       	pop	r0
    4102:	0f 90       	pop	r0
    4104:	0f 90       	pop	r0
    4106:	0f 90       	pop	r0
    4108:	0f 90       	pop	r0
    410a:	0f 90       	pop	r0
    410c:	08 95       	ret

0000410e <lora_driver_configureToEu868>:
    410e:	2f 92       	push	r2
    4110:	3f 92       	push	r3
    4112:	4f 92       	push	r4
    4114:	5f 92       	push	r5
    4116:	6f 92       	push	r6
    4118:	7f 92       	push	r7
    411a:	8f 92       	push	r8
    411c:	9f 92       	push	r9
    411e:	af 92       	push	r10
    4120:	bf 92       	push	r11
    4122:	cf 92       	push	r12
    4124:	df 92       	push	r13
    4126:	ef 92       	push	r14
    4128:	ff 92       	push	r15
    412a:	0f 93       	push	r16
    412c:	1f 93       	push	r17
    412e:	cf 93       	push	r28
    4130:	df 93       	push	r29
    4132:	cd b7       	in	r28, 0x3d	; 61
    4134:	de b7       	in	r29, 0x3e	; 62
    4136:	a0 97       	sbiw	r28, 0x20	; 32
    4138:	0f b6       	in	r0, 0x3f	; 63
    413a:	f8 94       	cli
    413c:	de bf       	out	0x3e, r29	; 62
    413e:	0f be       	out	0x3f, r0	; 63
    4140:	cd bf       	out	0x3d, r28	; 61
    4142:	67 e8       	ldi	r22, 0x87	; 135
    4144:	77 e0       	ldi	r23, 0x07	; 7
    4146:	83 e9       	ldi	r24, 0x93	; 147
    4148:	97 e0       	ldi	r25, 0x07	; 7
    414a:	3c dd       	rcall	.-1416   	; 0x3bc4 <_uploadMessage>
    414c:	95 dd       	rcall	.-1238   	; 0x3c78 <_reply2ReturnCode>
    414e:	81 11       	cpse	r24, r1
    4150:	a3 c0       	rjmp	.+326    	; 0x4298 <lora_driver_configureToEu868+0x18a>
    4152:	80 e2       	ldi	r24, 0x20	; 32
    4154:	e2 e2       	ldi	r30, 0x22	; 34
    4156:	f2 e0       	ldi	r31, 0x02	; 2
    4158:	de 01       	movw	r26, r28
    415a:	11 96       	adiw	r26, 0x01	; 1
    415c:	01 90       	ld	r0, Z+
    415e:	0d 92       	st	X+, r0
    4160:	8a 95       	dec	r24
    4162:	e1 f7       	brne	.-8      	; 0x415c <lora_driver_configureToEu868+0x4e>
    4164:	9e 01       	movw	r18, r28
    4166:	2f 5f       	subi	r18, 0xFF	; 255
    4168:	3f 4f       	sbci	r19, 0xFF	; 255
    416a:	69 01       	movw	r12, r18
    416c:	e1 2c       	mov	r14, r1
    416e:	f1 2c       	mov	r15, r1
    4170:	0f 2e       	mov	r0, r31
    4172:	ff e9       	ldi	r31, 0x9F	; 159
    4174:	af 2e       	mov	r10, r31
    4176:	f7 e0       	ldi	r31, 0x07	; 7
    4178:	bf 2e       	mov	r11, r31
    417a:	f0 2d       	mov	r31, r0
    417c:	02 e9       	ldi	r16, 0x92	; 146
    417e:	14 e1       	ldi	r17, 0x14	; 20
    4180:	0f 2e       	mov	r0, r31
    4182:	f8 eb       	ldi	r31, 0xB8	; 184
    4184:	4f 2e       	mov	r4, r31
    4186:	f7 e0       	ldi	r31, 0x07	; 7
    4188:	5f 2e       	mov	r5, r31
    418a:	f0 2d       	mov	r31, r0
    418c:	0f 2e       	mov	r0, r31
    418e:	ff ec       	ldi	r31, 0xCF	; 207
    4190:	8f 2e       	mov	r8, r31
    4192:	f7 e0       	ldi	r31, 0x07	; 7
    4194:	9f 2e       	mov	r9, r31
    4196:	f0 2d       	mov	r31, r0
    4198:	0f 2e       	mov	r0, r31
    419a:	f9 ee       	ldi	r31, 0xE9	; 233
    419c:	6f 2e       	mov	r6, r31
    419e:	f7 e0       	ldi	r31, 0x07	; 7
    41a0:	7f 2e       	mov	r7, r31
    41a2:	f0 2d       	mov	r31, r0
    41a4:	3e 2c       	mov	r3, r14
    41a6:	2f 2c       	mov	r2, r15
    41a8:	ff 92       	push	r15
    41aa:	ef 92       	push	r14
    41ac:	bf 92       	push	r11
    41ae:	af 92       	push	r10
    41b0:	1f 93       	push	r17
    41b2:	0f 93       	push	r16
    41b4:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <sprintf>
    41b8:	60 e0       	ldi	r22, 0x00	; 0
    41ba:	70 e0       	ldi	r23, 0x00	; 0
    41bc:	c8 01       	movw	r24, r16
    41be:	02 dd       	rcall	.-1532   	; 0x3bc4 <_uploadMessage>
    41c0:	5b dd       	rcall	.-1354   	; 0x3c78 <_reply2ReturnCode>
    41c2:	0f 90       	pop	r0
    41c4:	0f 90       	pop	r0
    41c6:	0f 90       	pop	r0
    41c8:	0f 90       	pop	r0
    41ca:	0f 90       	pop	r0
    41cc:	0f 90       	pop	r0
    41ce:	81 11       	cpse	r24, r1
    41d0:	63 c0       	rjmp	.+198    	; 0x4298 <lora_driver_configureToEu868+0x18a>
    41d2:	32 e0       	ldi	r19, 0x02	; 2
    41d4:	3e 15       	cp	r19, r14
    41d6:	e8 f4       	brcc	.+58     	; 0x4212 <lora_driver_configureToEu868+0x104>
    41d8:	f6 01       	movw	r30, r12
    41da:	83 81       	ldd	r24, Z+3	; 0x03
    41dc:	8f 93       	push	r24
    41de:	82 81       	ldd	r24, Z+2	; 0x02
    41e0:	8f 93       	push	r24
    41e2:	81 81       	ldd	r24, Z+1	; 0x01
    41e4:	8f 93       	push	r24
    41e6:	80 81       	ld	r24, Z
    41e8:	8f 93       	push	r24
    41ea:	ff 92       	push	r15
    41ec:	ef 92       	push	r14
    41ee:	5f 92       	push	r5
    41f0:	4f 92       	push	r4
    41f2:	1f 93       	push	r17
    41f4:	0f 93       	push	r16
    41f6:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <sprintf>
    41fa:	60 e0       	ldi	r22, 0x00	; 0
    41fc:	70 e0       	ldi	r23, 0x00	; 0
    41fe:	c8 01       	movw	r24, r16
    4200:	e1 dc       	rcall	.-1598   	; 0x3bc4 <_uploadMessage>
    4202:	3a dd       	rcall	.-1420   	; 0x3c78 <_reply2ReturnCode>
    4204:	0f b6       	in	r0, 0x3f	; 63
    4206:	f8 94       	cli
    4208:	de bf       	out	0x3e, r29	; 62
    420a:	0f be       	out	0x3f, r0	; 63
    420c:	cd bf       	out	0x3d, r28	; 61
    420e:	81 11       	cpse	r24, r1
    4210:	43 c0       	rjmp	.+134    	; 0x4298 <lora_driver_configureToEu868+0x18a>
    4212:	2f 92       	push	r2
    4214:	3f 92       	push	r3
    4216:	9f 92       	push	r9
    4218:	8f 92       	push	r8
    421a:	1f 93       	push	r17
    421c:	0f 93       	push	r16
    421e:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <sprintf>
    4222:	60 e0       	ldi	r22, 0x00	; 0
    4224:	70 e0       	ldi	r23, 0x00	; 0
    4226:	c8 01       	movw	r24, r16
    4228:	cd dc       	rcall	.-1638   	; 0x3bc4 <_uploadMessage>
    422a:	26 dd       	rcall	.-1460   	; 0x3c78 <_reply2ReturnCode>
    422c:	0f 90       	pop	r0
    422e:	0f 90       	pop	r0
    4230:	0f 90       	pop	r0
    4232:	0f 90       	pop	r0
    4234:	0f 90       	pop	r0
    4236:	0f 90       	pop	r0
    4238:	81 11       	cpse	r24, r1
    423a:	2e c0       	rjmp	.+92     	; 0x4298 <lora_driver_configureToEu868+0x18a>
    423c:	2f 92       	push	r2
    423e:	3f 92       	push	r3
    4240:	7f 92       	push	r7
    4242:	6f 92       	push	r6
    4244:	1f 93       	push	r17
    4246:	0f 93       	push	r16
    4248:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <sprintf>
    424c:	60 e0       	ldi	r22, 0x00	; 0
    424e:	70 e0       	ldi	r23, 0x00	; 0
    4250:	c8 01       	movw	r24, r16
    4252:	b8 dc       	rcall	.-1680   	; 0x3bc4 <_uploadMessage>
    4254:	11 dd       	rcall	.-1502   	; 0x3c78 <_reply2ReturnCode>
    4256:	0f 90       	pop	r0
    4258:	0f 90       	pop	r0
    425a:	0f 90       	pop	r0
    425c:	0f 90       	pop	r0
    425e:	0f 90       	pop	r0
    4260:	0f 90       	pop	r0
    4262:	81 11       	cpse	r24, r1
    4264:	19 c0       	rjmp	.+50     	; 0x4298 <lora_driver_configureToEu868+0x18a>
    4266:	3f ef       	ldi	r19, 0xFF	; 255
    4268:	e3 1a       	sub	r14, r19
    426a:	f3 0a       	sbc	r15, r19
    426c:	84 e0       	ldi	r24, 0x04	; 4
    426e:	c8 0e       	add	r12, r24
    4270:	d1 1c       	adc	r13, r1
    4272:	98 e0       	ldi	r25, 0x08	; 8
    4274:	e9 16       	cp	r14, r25
    4276:	f1 04       	cpc	r15, r1
    4278:	09 f0       	breq	.+2      	; 0x427c <lora_driver_configureToEu868+0x16e>
    427a:	94 cf       	rjmp	.-216    	; 0x41a4 <lora_driver_configureToEu868+0x96>
    427c:	60 e0       	ldi	r22, 0x00	; 0
    427e:	70 e0       	ldi	r23, 0x00	; 0
    4280:	81 e0       	ldi	r24, 0x01	; 1
    4282:	98 e0       	ldi	r25, 0x08	; 8
    4284:	9f dc       	rcall	.-1730   	; 0x3bc4 <_uploadMessage>
    4286:	f8 dc       	rcall	.-1552   	; 0x3c78 <_reply2ReturnCode>
    4288:	81 11       	cpse	r24, r1
    428a:	06 c0       	rjmp	.+12     	; 0x4298 <lora_driver_configureToEu868+0x18a>
    428c:	60 e0       	ldi	r22, 0x00	; 0
    428e:	70 e0       	ldi	r23, 0x00	; 0
    4290:	82 e1       	ldi	r24, 0x12	; 18
    4292:	98 e0       	ldi	r25, 0x08	; 8
    4294:	97 dc       	rcall	.-1746   	; 0x3bc4 <_uploadMessage>
    4296:	f0 dc       	rcall	.-1568   	; 0x3c78 <_reply2ReturnCode>
    4298:	a0 96       	adiw	r28, 0x20	; 32
    429a:	0f b6       	in	r0, 0x3f	; 63
    429c:	f8 94       	cli
    429e:	de bf       	out	0x3e, r29	; 62
    42a0:	0f be       	out	0x3f, r0	; 63
    42a2:	cd bf       	out	0x3d, r28	; 61
    42a4:	df 91       	pop	r29
    42a6:	cf 91       	pop	r28
    42a8:	1f 91       	pop	r17
    42aa:	0f 91       	pop	r16
    42ac:	ff 90       	pop	r15
    42ae:	ef 90       	pop	r14
    42b0:	df 90       	pop	r13
    42b2:	cf 90       	pop	r12
    42b4:	bf 90       	pop	r11
    42b6:	af 90       	pop	r10
    42b8:	9f 90       	pop	r9
    42ba:	8f 90       	pop	r8
    42bc:	7f 90       	pop	r7
    42be:	6f 90       	pop	r6
    42c0:	5f 90       	pop	r5
    42c2:	4f 90       	pop	r4
    42c4:	3f 90       	pop	r3
    42c6:	2f 90       	pop	r2
    42c8:	08 95       	ret

000042ca <lora_driver_setOtaaIdentity>:
    42ca:	ef 92       	push	r14
    42cc:	ff 92       	push	r15
    42ce:	0f 93       	push	r16
    42d0:	1f 93       	push	r17
    42d2:	cf 93       	push	r28
    42d4:	df 93       	push	r29
    42d6:	ec 01       	movw	r28, r24
    42d8:	8b 01       	movw	r16, r22
    42da:	7a 01       	movw	r14, r20
    42dc:	81 e0       	ldi	r24, 0x01	; 1
    42de:	f4 de       	rcall	.-536    	; 0x40c8 <lora_driver_setAdaptiveDataRate>
    42e0:	81 11       	cpse	r24, r1
    42e2:	0d c0       	rjmp	.+26     	; 0x42fe <lora_driver_setOtaaIdentity+0x34>
    42e4:	ce 01       	movw	r24, r28
    42e6:	d4 dd       	rcall	.-1112   	; 0x3e90 <lora_driver_setApplicationIdentifier>
    42e8:	81 11       	cpse	r24, r1
    42ea:	09 c0       	rjmp	.+18     	; 0x42fe <lora_driver_setOtaaIdentity+0x34>
    42ec:	c8 01       	movw	r24, r16
    42ee:	e1 dd       	rcall	.-1086   	; 0x3eb2 <lora_driver_setApplicationKey>
    42f0:	81 11       	cpse	r24, r1
    42f2:	05 c0       	rjmp	.+10     	; 0x42fe <lora_driver_setOtaaIdentity+0x34>
    42f4:	c7 01       	movw	r24, r14
    42f6:	bb dd       	rcall	.-1162   	; 0x3e6e <lora_driver_setDeviceIdentifier>
    42f8:	81 11       	cpse	r24, r1
    42fa:	01 c0       	rjmp	.+2      	; 0x42fe <lora_driver_setOtaaIdentity+0x34>
    42fc:	eb dd       	rcall	.-1066   	; 0x3ed4 <lora_driver_saveMac>
    42fe:	df 91       	pop	r29
    4300:	cf 91       	pop	r28
    4302:	1f 91       	pop	r17
    4304:	0f 91       	pop	r16
    4306:	ff 90       	pop	r15
    4308:	ef 90       	pop	r14
    430a:	08 95       	ret

0000430c <lora_driver_mapReturnCodeToText>:
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	fc 01       	movw	r30, r24
    4310:	ee 0f       	add	r30, r30
    4312:	ff 1f       	adc	r31, r31
    4314:	8e 0f       	add	r24, r30
    4316:	9f 1f       	adc	r25, r31
    4318:	fc 01       	movw	r30, r24
    431a:	e5 52       	subi	r30, 0x25	; 37
    431c:	f7 4f       	sbci	r31, 0xF7	; 247
    431e:	81 81       	ldd	r24, Z+1	; 0x01
    4320:	92 81       	ldd	r25, Z+2	; 0x02
    4322:	08 95       	ret

00004324 <decode_port_no>:
    4324:	dc 01       	movw	r26, r24
    4326:	00 97       	sbiw	r24, 0x00	; 0
    4328:	29 f1       	breq	.+74     	; 0x4374 <decode_port_no+0x50>
    432a:	fb 01       	movw	r30, r22
    432c:	20 81       	ld	r18, Z
    432e:	fc 01       	movw	r30, r24
    4330:	01 90       	ld	r0, Z+
    4332:	00 20       	and	r0, r0
    4334:	e9 f7       	brne	.-6      	; 0x4330 <decode_port_no+0xc>
    4336:	31 97       	sbiw	r30, 0x01	; 1
    4338:	e8 1b       	sub	r30, r24
    433a:	f9 0b       	sbc	r31, r25
    433c:	82 2f       	mov	r24, r18
    433e:	90 e0       	ldi	r25, 0x00	; 0
    4340:	e8 17       	cp	r30, r24
    4342:	f9 07       	cpc	r31, r25
    4344:	c8 f0       	brcs	.+50     	; 0x4378 <decode_port_no+0x54>
    4346:	80 e0       	ldi	r24, 0x00	; 0
    4348:	08 c0       	rjmp	.+16     	; 0x435a <decode_port_no+0x36>
    434a:	88 0f       	add	r24, r24
    434c:	38 2f       	mov	r19, r24
    434e:	33 0f       	add	r19, r19
    4350:	33 0f       	add	r19, r19
    4352:	83 0f       	add	r24, r19
    4354:	80 53       	subi	r24, 0x30	; 48
    4356:	89 0f       	add	r24, r25
    4358:	2f 5f       	subi	r18, 0xFF	; 255
    435a:	fd 01       	movw	r30, r26
    435c:	e2 0f       	add	r30, r18
    435e:	f1 1d       	adc	r31, r1
    4360:	90 81       	ld	r25, Z
    4362:	30 ed       	ldi	r19, 0xD0	; 208
    4364:	39 0f       	add	r19, r25
    4366:	3a 30       	cpi	r19, 0x0A	; 10
    4368:	10 f4       	brcc	.+4      	; 0x436e <decode_port_no+0x4a>
    436a:	91 11       	cpse	r25, r1
    436c:	ee cf       	rjmp	.-36     	; 0x434a <decode_port_no+0x26>
    436e:	fb 01       	movw	r30, r22
    4370:	20 83       	st	Z, r18
    4372:	08 95       	ret
    4374:	80 e0       	ldi	r24, 0x00	; 0
    4376:	08 95       	ret
    4378:	80 e0       	ldi	r24, 0x00	; 0
    437a:	08 95       	ret

0000437c <decode_hexadecimal_string_bytes>:
    437c:	0f 93       	push	r16
    437e:	1f 93       	push	r17
    4380:	cf 93       	push	r28
    4382:	df 93       	push	r29
    4384:	dc 01       	movw	r26, r24
    4386:	ea 01       	movw	r28, r20
    4388:	20 97       	sbiw	r28, 0x00	; 0
    438a:	e1 f1       	breq	.+120    	; 0x4404 <decode_hexadecimal_string_bytes+0x88>
    438c:	fa 01       	movw	r30, r20
    438e:	01 90       	ld	r0, Z+
    4390:	00 20       	and	r0, r0
    4392:	e9 f7       	brne	.-6      	; 0x438e <decode_hexadecimal_string_bytes+0x12>
    4394:	31 97       	sbiw	r30, 0x01	; 1
    4396:	e4 1b       	sub	r30, r20
    4398:	f5 0b       	sbc	r31, r21
    439a:	32 97       	sbiw	r30, 0x02	; 2
    439c:	10 f5       	brcc	.+68     	; 0x43e2 <decode_hexadecimal_string_bytes+0x66>
    439e:	32 c0       	rjmp	.+100    	; 0x4404 <decode_hexadecimal_string_bytes+0x88>
    43a0:	8d 01       	movw	r16, r26
    43a2:	04 0f       	add	r16, r20
    43a4:	15 1f       	adc	r17, r21
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	ae 01       	movw	r20, r28
    43aa:	42 0f       	add	r20, r18
    43ac:	53 1f       	adc	r21, r19
    43ae:	fa 01       	movw	r30, r20
    43b0:	90 81       	ld	r25, Z
    43b2:	91 34       	cpi	r25, 0x41	; 65
    43b4:	28 f0       	brcs	.+10     	; 0x43c0 <decode_hexadecimal_string_bytes+0x44>
    43b6:	97 53       	subi	r25, 0x37	; 55
    43b8:	59 2f       	mov	r21, r25
    43ba:	52 95       	swap	r21
    43bc:	50 7f       	andi	r21, 0xF0	; 240
    43be:	03 c0       	rjmp	.+6      	; 0x43c6 <decode_hexadecimal_string_bytes+0x4a>
    43c0:	59 2f       	mov	r21, r25
    43c2:	52 95       	swap	r21
    43c4:	50 7f       	andi	r21, 0xF0	; 240
    43c6:	2c 0f       	add	r18, r28
    43c8:	3d 1f       	adc	r19, r29
    43ca:	f9 01       	movw	r30, r18
    43cc:	91 81       	ldd	r25, Z+1	; 0x01
    43ce:	91 34       	cpi	r25, 0x41	; 65
    43d0:	10 f0       	brcs	.+4      	; 0x43d6 <decode_hexadecimal_string_bytes+0x5a>
    43d2:	97 53       	subi	r25, 0x37	; 55
    43d4:	01 c0       	rjmp	.+2      	; 0x43d8 <decode_hexadecimal_string_bytes+0x5c>
    43d6:	90 53       	subi	r25, 0x30	; 48
    43d8:	95 0f       	add	r25, r21
    43da:	f8 01       	movw	r30, r16
    43dc:	90 83       	st	Z, r25
    43de:	8f 5f       	subi	r24, 0xFF	; 255
    43e0:	01 c0       	rjmp	.+2      	; 0x43e4 <decode_hexadecimal_string_bytes+0x68>
    43e2:	80 e0       	ldi	r24, 0x00	; 0
    43e4:	28 2f       	mov	r18, r24
    43e6:	22 0f       	add	r18, r18
    43e8:	48 2f       	mov	r20, r24
    43ea:	50 e0       	ldi	r21, 0x00	; 0
    43ec:	fe 01       	movw	r30, r28
    43ee:	01 90       	ld	r0, Z+
    43f0:	00 20       	and	r0, r0
    43f2:	e9 f7       	brne	.-6      	; 0x43ee <decode_hexadecimal_string_bytes+0x72>
    43f4:	31 97       	sbiw	r30, 0x01	; 1
    43f6:	ec 1b       	sub	r30, r28
    43f8:	fd 0b       	sbc	r31, r29
    43fa:	4e 17       	cp	r20, r30
    43fc:	5f 07       	cpc	r21, r31
    43fe:	10 f4       	brcc	.+4      	; 0x4404 <decode_hexadecimal_string_bytes+0x88>
    4400:	86 13       	cpse	r24, r22
    4402:	ce cf       	rjmp	.-100    	; 0x43a0 <decode_hexadecimal_string_bytes+0x24>
    4404:	df 91       	pop	r29
    4406:	cf 91       	pop	r28
    4408:	1f 91       	pop	r17
    440a:	0f 91       	pop	r16
    440c:	08 95       	ret

0000440e <_serialCallBack>:
    440e:	80 91 ef 14 	lds	r24, 0x14EF	; 0x8014ef <crc_sum.1945>
    4412:	86 0f       	add	r24, r22
    4414:	80 93 ef 14 	sts	0x14EF, r24	; 0x8014ef <crc_sum.1945>
    4418:	90 91 f2 14 	lds	r25, 0x14F2	; 0x8014f2 <_mh_state>
    441c:	91 30       	cpi	r25, 0x01	; 1
    441e:	79 f0       	breq	.+30     	; 0x443e <_serialCallBack+0x30>
    4420:	28 f0       	brcs	.+10     	; 0x442c <_serialCallBack+0x1e>
    4422:	92 30       	cpi	r25, 0x02	; 2
    4424:	a9 f0       	breq	.+42     	; 0x4450 <_serialCallBack+0x42>
    4426:	93 30       	cpi	r25, 0x03	; 3
    4428:	19 f1       	breq	.+70     	; 0x4470 <_serialCallBack+0x62>
    442a:	08 95       	ret
    442c:	6f 3f       	cpi	r22, 0xFF	; 255
    442e:	09 f0       	breq	.+2      	; 0x4432 <_serialCallBack+0x24>
    4430:	48 c0       	rjmp	.+144    	; 0x44c2 <_serialCallBack+0xb4>
    4432:	10 92 ef 14 	sts	0x14EF, r1	; 0x8014ef <crc_sum.1945>
    4436:	81 e0       	ldi	r24, 0x01	; 1
    4438:	80 93 f2 14 	sts	0x14F2, r24	; 0x8014f2 <_mh_state>
    443c:	08 95       	ret
    443e:	66 38       	cpi	r22, 0x86	; 134
    4440:	09 f0       	breq	.+2      	; 0x4444 <_serialCallBack+0x36>
    4442:	3f c0       	rjmp	.+126    	; 0x44c2 <_serialCallBack+0xb4>
    4444:	10 92 ee 14 	sts	0x14EE, r1	; 0x8014ee <inDex.1943>
    4448:	82 e0       	ldi	r24, 0x02	; 2
    444a:	80 93 f2 14 	sts	0x14F2, r24	; 0x8014f2 <_mh_state>
    444e:	08 95       	ret
    4450:	e0 91 ee 14 	lds	r30, 0x14EE	; 0x8014ee <inDex.1943>
    4454:	81 e0       	ldi	r24, 0x01	; 1
    4456:	8e 0f       	add	r24, r30
    4458:	80 93 ee 14 	sts	0x14EE, r24	; 0x8014ee <inDex.1943>
    445c:	f0 e0       	ldi	r31, 0x00	; 0
    445e:	e4 51       	subi	r30, 0x14	; 20
    4460:	fb 4e       	sbci	r31, 0xEB	; 235
    4462:	60 83       	st	Z, r22
    4464:	82 30       	cpi	r24, 0x02	; 2
    4466:	69 f5       	brne	.+90     	; 0x44c2 <_serialCallBack+0xb4>
    4468:	83 e0       	ldi	r24, 0x03	; 3
    446a:	80 93 f2 14 	sts	0x14F2, r24	; 0x8014f2 <_mh_state>
    446e:	08 95       	ret
    4470:	90 91 ee 14 	lds	r25, 0x14EE	; 0x8014ee <inDex.1943>
    4474:	21 e0       	ldi	r18, 0x01	; 1
    4476:	29 0f       	add	r18, r25
    4478:	20 93 ee 14 	sts	0x14EE, r18	; 0x8014ee <inDex.1943>
    447c:	96 30       	cpi	r25, 0x06	; 6
    447e:	09 f5       	brne	.+66     	; 0x44c2 <_serialCallBack+0xb4>
    4480:	81 11       	cpse	r24, r1
    4482:	0e c0       	rjmp	.+28     	; 0x44a0 <_serialCallBack+0x92>
    4484:	ec ee       	ldi	r30, 0xEC	; 236
    4486:	f4 e1       	ldi	r31, 0x14	; 20
    4488:	80 81       	ld	r24, Z
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	98 2f       	mov	r25, r24
    448e:	88 27       	eor	r24, r24
    4490:	21 81       	ldd	r18, Z+1	; 0x01
    4492:	82 0f       	add	r24, r18
    4494:	91 1d       	adc	r25, r1
    4496:	90 93 f4 14 	sts	0x14F4, r25	; 0x8014f4 <_ppm+0x1>
    449a:	80 93 f3 14 	sts	0x14F3, r24	; 0x8014f3 <_ppm>
    449e:	04 c0       	rjmp	.+8      	; 0x44a8 <_serialCallBack+0x9a>
    44a0:	10 92 f4 14 	sts	0x14F4, r1	; 0x8014f4 <_ppm+0x1>
    44a4:	10 92 f3 14 	sts	0x14F3, r1	; 0x8014f3 <_ppm>
    44a8:	10 92 f2 14 	sts	0x14F2, r1	; 0x8014f2 <_mh_state>
    44ac:	e0 91 f0 14 	lds	r30, 0x14F0	; 0x8014f0 <_appCallBack>
    44b0:	f0 91 f1 14 	lds	r31, 0x14F1	; 0x8014f1 <_appCallBack+0x1>
    44b4:	30 97       	sbiw	r30, 0x00	; 0
    44b6:	29 f0       	breq	.+10     	; 0x44c2 <_serialCallBack+0xb4>
    44b8:	80 91 f3 14 	lds	r24, 0x14F3	; 0x8014f3 <_ppm>
    44bc:	90 91 f4 14 	lds	r25, 0x14F4	; 0x8014f4 <_ppm+0x1>
    44c0:	19 95       	eicall
    44c2:	08 95       	ret

000044c4 <mh_z19_initialise>:
    44c4:	8f 92       	push	r8
    44c6:	9f 92       	push	r9
    44c8:	af 92       	push	r10
    44ca:	cf 92       	push	r12
    44cc:	ef 92       	push	r14
    44ce:	0f 93       	push	r16
    44d0:	0f 2e       	mov	r0, r31
    44d2:	f7 e0       	ldi	r31, 0x07	; 7
    44d4:	8f 2e       	mov	r8, r31
    44d6:	f2 e2       	ldi	r31, 0x22	; 34
    44d8:	9f 2e       	mov	r9, r31
    44da:	f0 2d       	mov	r31, r0
    44dc:	68 94       	set
    44de:	aa 24       	eor	r10, r10
    44e0:	a4 f8       	bld	r10, 4
    44e2:	68 94       	set
    44e4:	cc 24       	eor	r12, r12
    44e6:	c4 f8       	bld	r12, 4
    44e8:	e1 2c       	mov	r14, r1
    44ea:	00 e0       	ldi	r16, 0x00	; 0
    44ec:	23 e0       	ldi	r18, 0x03	; 3
    44ee:	40 e8       	ldi	r20, 0x80	; 128
    44f0:	55 e2       	ldi	r21, 0x25	; 37
    44f2:	60 e0       	ldi	r22, 0x00	; 0
    44f4:	70 e0       	ldi	r23, 0x00	; 0
    44f6:	73 d0       	rcall	.+230    	; 0x45de <serial_create>
    44f8:	90 93 f6 14 	sts	0x14F6, r25	; 0x8014f6 <_serial+0x1>
    44fc:	80 93 f5 14 	sts	0x14F5, r24	; 0x8014f5 <_serial>
    4500:	0f 91       	pop	r16
    4502:	ef 90       	pop	r14
    4504:	cf 90       	pop	r12
    4506:	af 90       	pop	r10
    4508:	9f 90       	pop	r9
    450a:	8f 90       	pop	r8
    450c:	08 95       	ret

0000450e <mh_z19_injectCallBack>:
    450e:	90 93 f1 14 	sts	0x14F1, r25	; 0x8014f1 <_appCallBack+0x1>
    4512:	80 93 f0 14 	sts	0x14F0, r24	; 0x8014f0 <_appCallBack>
    4516:	08 95       	ret

00004518 <mh_z19_takeMeassuring>:
    4518:	cf 93       	push	r28
    451a:	df 93       	push	r29
    451c:	cd b7       	in	r28, 0x3d	; 61
    451e:	de b7       	in	r29, 0x3e	; 62
    4520:	29 97       	sbiw	r28, 0x09	; 9
    4522:	0f b6       	in	r0, 0x3f	; 63
    4524:	f8 94       	cli
    4526:	de bf       	out	0x3e, r29	; 62
    4528:	0f be       	out	0x3f, r0	; 63
    452a:	cd bf       	out	0x3d, r28	; 61
    452c:	89 e0       	ldi	r24, 0x09	; 9
    452e:	e2 e4       	ldi	r30, 0x42	; 66
    4530:	f2 e0       	ldi	r31, 0x02	; 2
    4532:	9e 01       	movw	r18, r28
    4534:	2f 5f       	subi	r18, 0xFF	; 255
    4536:	3f 4f       	sbci	r19, 0xFF	; 255
    4538:	d9 01       	movw	r26, r18
    453a:	01 90       	ld	r0, Z+
    453c:	0d 92       	st	X+, r0
    453e:	8a 95       	dec	r24
    4540:	e1 f7       	brne	.-8      	; 0x453a <mh_z19_takeMeassuring+0x22>
    4542:	10 92 f4 14 	sts	0x14F4, r1	; 0x8014f4 <_ppm+0x1>
    4546:	10 92 f3 14 	sts	0x14F3, r1	; 0x8014f3 <_ppm>
    454a:	80 91 f5 14 	lds	r24, 0x14F5	; 0x8014f5 <_serial>
    454e:	90 91 f6 14 	lds	r25, 0x14F6	; 0x8014f6 <_serial+0x1>
    4552:	00 97       	sbiw	r24, 0x00	; 0
    4554:	31 f0       	breq	.+12     	; 0x4562 <mh_z19_takeMeassuring+0x4a>
    4556:	42 2f       	mov	r20, r18
    4558:	53 2f       	mov	r21, r19
    455a:	69 e0       	ldi	r22, 0x09	; 9
    455c:	10 d1       	rcall	.+544    	; 0x477e <serial_sendBytes>
    455e:	80 e0       	ldi	r24, 0x00	; 0
    4560:	01 c0       	rjmp	.+2      	; 0x4564 <mh_z19_takeMeassuring+0x4c>
    4562:	82 e0       	ldi	r24, 0x02	; 2
    4564:	29 96       	adiw	r28, 0x09	; 9
    4566:	0f b6       	in	r0, 0x3f	; 63
    4568:	f8 94       	cli
    456a:	de bf       	out	0x3e, r29	; 62
    456c:	0f be       	out	0x3f, r0	; 63
    456e:	cd bf       	out	0x3d, r28	; 61
    4570:	df 91       	pop	r29
    4572:	cf 91       	pop	r28
    4574:	08 95       	ret

00004576 <rc_servo_setPosition>:
    4576:	65 36       	cpi	r22, 0x65	; 101
    4578:	0c f0       	brlt	.+2      	; 0x457c <rc_servo_setPosition+0x6>
    457a:	64 e6       	ldi	r22, 0x64	; 100
    457c:	6c 39       	cpi	r22, 0x9C	; 156
    457e:	0c f4       	brge	.+2      	; 0x4582 <rc_servo_setPosition+0xc>
    4580:	6c e9       	ldi	r22, 0x9C	; 156
    4582:	96 ef       	ldi	r25, 0xF6	; 246
    4584:	69 02       	muls	r22, r25
    4586:	b0 01       	movw	r22, r0
    4588:	11 24       	eor	r1, r1
    458a:	68 54       	subi	r22, 0x48	; 72
    458c:	74 4f       	sbci	r23, 0xF4	; 244
    458e:	81 11       	cpse	r24, r1
    4590:	05 c0       	rjmp	.+10     	; 0x459c <rc_servo_setPosition+0x26>
    4592:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4596:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    459a:	08 95       	ret
    459c:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    45a0:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    45a4:	08 95       	ret

000045a6 <rc_servo_initialise>:
    45a6:	ea e0       	ldi	r30, 0x0A	; 10
    45a8:	f1 e0       	ldi	r31, 0x01	; 1
    45aa:	80 81       	ld	r24, Z
    45ac:	88 61       	ori	r24, 0x18	; 24
    45ae:	80 83       	st	Z, r24
    45b0:	8f e3       	ldi	r24, 0x3F	; 63
    45b2:	9c e9       	ldi	r25, 0x9C	; 156
    45b4:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    45b8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    45bc:	60 e0       	ldi	r22, 0x00	; 0
    45be:	80 e0       	ldi	r24, 0x00	; 0
    45c0:	da df       	rcall	.-76     	; 0x4576 <rc_servo_setPosition>
    45c2:	60 e0       	ldi	r22, 0x00	; 0
    45c4:	81 e0       	ldi	r24, 0x01	; 1
    45c6:	d7 df       	rcall	.-82     	; 0x4576 <rc_servo_setPosition>
    45c8:	e0 e2       	ldi	r30, 0x20	; 32
    45ca:	f1 e0       	ldi	r31, 0x01	; 1
    45cc:	80 81       	ld	r24, Z
    45ce:	82 6a       	ori	r24, 0xA2	; 162
    45d0:	80 83       	st	Z, r24
    45d2:	e1 e2       	ldi	r30, 0x21	; 33
    45d4:	f1 e0       	ldi	r31, 0x01	; 1
    45d6:	80 81       	ld	r24, Z
    45d8:	8a 61       	ori	r24, 0x1A	; 26
    45da:	80 83       	st	Z, r24
    45dc:	08 95       	ret

000045de <serial_create>:
    45de:	2f 92       	push	r2
    45e0:	3f 92       	push	r3
    45e2:	4f 92       	push	r4
    45e4:	5f 92       	push	r5
    45e6:	6f 92       	push	r6
    45e8:	7f 92       	push	r7
    45ea:	8f 92       	push	r8
    45ec:	9f 92       	push	r9
    45ee:	af 92       	push	r10
    45f0:	cf 92       	push	r12
    45f2:	ef 92       	push	r14
    45f4:	ff 92       	push	r15
    45f6:	0f 93       	push	r16
    45f8:	1f 93       	push	r17
    45fa:	cf 93       	push	r28
    45fc:	df 93       	push	r29
    45fe:	cd b7       	in	r28, 0x3d	; 61
    4600:	de b7       	in	r29, 0x3e	; 62
    4602:	f8 2e       	mov	r15, r24
    4604:	2a 01       	movw	r4, r20
    4606:	3b 01       	movw	r6, r22
    4608:	88 e0       	ldi	r24, 0x08	; 8
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <malloc>
    4610:	8c 01       	movw	r16, r24
    4612:	8f 2d       	mov	r24, r15
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	fc 01       	movw	r30, r24
    4618:	ee 0f       	add	r30, r30
    461a:	ff 1f       	adc	r31, r31
    461c:	e9 50       	subi	r30, 0x09	; 9
    461e:	fb 4e       	sbci	r31, 0xEB	; 235
    4620:	11 83       	std	Z+1, r17	; 0x01
    4622:	00 83       	st	Z, r16
    4624:	01 15       	cp	r16, r1
    4626:	11 05       	cpc	r17, r1
    4628:	09 f4       	brne	.+2      	; 0x462c <serial_create+0x4e>
    462a:	6c c0       	rjmp	.+216    	; 0x4704 <serial_create+0x126>
    462c:	88 0f       	add	r24, r24
    462e:	99 1f       	adc	r25, r25
    4630:	fc 01       	movw	r30, r24
    4632:	e5 5f       	subi	r30, 0xF5	; 245
    4634:	fd 4f       	sbci	r31, 0xFD	; 253
    4636:	80 81       	ld	r24, Z
    4638:	91 81       	ldd	r25, Z+1	; 0x01
    463a:	d8 01       	movw	r26, r16
    463c:	8d 93       	st	X+, r24
    463e:	9c 93       	st	X, r25
    4640:	8c 2d       	mov	r24, r12
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	88 0f       	add	r24, r24
    4646:	99 1f       	adc	r25, r25
    4648:	88 0f       	add	r24, r24
    464a:	99 1f       	adc	r25, r25
    464c:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <malloc>
    4650:	1c 01       	movw	r2, r24
    4652:	86 e0       	ldi	r24, 0x06	; 6
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <malloc>
    465a:	7c 01       	movw	r14, r24
    465c:	4c 2d       	mov	r20, r12
    465e:	b1 01       	movw	r22, r2
    4660:	0e 94 3a 2b 	call	0x5674	; 0x5674 <fifo_init>
    4664:	f8 01       	movw	r30, r16
    4666:	f5 82       	std	Z+5, r15	; 0x05
    4668:	e4 82       	std	Z+4, r14	; 0x04
    466a:	8a 2d       	mov	r24, r10
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	88 0f       	add	r24, r24
    4670:	99 1f       	adc	r25, r25
    4672:	88 0f       	add	r24, r24
    4674:	99 1f       	adc	r25, r25
    4676:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <malloc>
    467a:	1c 01       	movw	r2, r24
    467c:	86 e0       	ldi	r24, 0x06	; 6
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <malloc>
    4684:	7c 01       	movw	r14, r24
    4686:	4a 2d       	mov	r20, r10
    4688:	b1 01       	movw	r22, r2
    468a:	f4 d7       	rcall	.+4072   	; 0x5674 <fifo_init>
    468c:	d8 01       	movw	r26, r16
    468e:	13 96       	adiw	r26, 0x03	; 3
    4690:	fc 92       	st	X, r15
    4692:	ee 92       	st	-X, r14
    4694:	12 97       	sbiw	r26, 0x02	; 2
    4696:	17 96       	adiw	r26, 0x07	; 7
    4698:	9c 92       	st	X, r9
    469a:	8e 92       	st	-X, r8
    469c:	16 97       	sbiw	r26, 0x06	; 6
    469e:	ff b6       	in	r15, 0x3f	; 63
    46a0:	f8 94       	cli
    46a2:	ed 91       	ld	r30, X+
    46a4:	fc 91       	ld	r31, X
    46a6:	11 97       	sbiw	r26, 0x01	; 1
    46a8:	36 97       	sbiw	r30, 0x06	; 6
    46aa:	80 81       	ld	r24, Z
    46ac:	82 60       	ori	r24, 0x02	; 2
    46ae:	80 83       	st	Z, r24
    46b0:	8d 90       	ld	r8, X+
    46b2:	9c 90       	ld	r9, X
    46b4:	c3 01       	movw	r24, r6
    46b6:	b2 01       	movw	r22, r4
    46b8:	0e 94 2f 2c 	call	0x585e	; 0x585e <__floatunsisf>
    46bc:	20 e0       	ldi	r18, 0x00	; 0
    46be:	30 e0       	ldi	r19, 0x00	; 0
    46c0:	40 e0       	ldi	r20, 0x00	; 0
    46c2:	51 e4       	ldi	r21, 0x41	; 65
    46c4:	0e 94 98 2c 	call	0x5930	; 0x5930 <__mulsf3>
    46c8:	9b 01       	movw	r18, r22
    46ca:	ac 01       	movw	r20, r24
    46cc:	60 e0       	ldi	r22, 0x00	; 0
    46ce:	74 e2       	ldi	r23, 0x24	; 36
    46d0:	84 e7       	ldi	r24, 0x74	; 116
    46d2:	9b e4       	ldi	r25, 0x4B	; 75
    46d4:	0e 94 bd 2b 	call	0x577a	; 0x577a <__divsf3>
    46d8:	20 e0       	ldi	r18, 0x00	; 0
    46da:	30 e0       	ldi	r19, 0x00	; 0
    46dc:	40 e8       	ldi	r20, 0x80	; 128
    46de:	5f e3       	ldi	r21, 0x3F	; 63
    46e0:	e5 d7       	rcall	.+4042   	; 0x56ac <__subsf3>
    46e2:	25 d9       	rcall	.-3510   	; 0x392e <__fixunssfsi>
    46e4:	f4 01       	movw	r30, r8
    46e6:	32 97       	sbiw	r30, 0x02	; 2
    46e8:	60 83       	st	Z, r22
    46ea:	d8 01       	movw	r26, r16
    46ec:	ed 91       	ld	r30, X+
    46ee:	fc 91       	ld	r31, X
    46f0:	11 97       	sbiw	r26, 0x01	; 1
    46f2:	35 97       	sbiw	r30, 0x05	; 5
    46f4:	88 e9       	ldi	r24, 0x98	; 152
    46f6:	80 83       	st	Z, r24
    46f8:	ed 91       	ld	r30, X+
    46fa:	fc 91       	ld	r31, X
    46fc:	34 97       	sbiw	r30, 0x04	; 4
    46fe:	86 e0       	ldi	r24, 0x06	; 6
    4700:	80 83       	st	Z, r24
    4702:	ff be       	out	0x3f, r15	; 63
    4704:	c8 01       	movw	r24, r16
    4706:	df 91       	pop	r29
    4708:	cf 91       	pop	r28
    470a:	1f 91       	pop	r17
    470c:	0f 91       	pop	r16
    470e:	ff 90       	pop	r15
    4710:	ef 90       	pop	r14
    4712:	cf 90       	pop	r12
    4714:	af 90       	pop	r10
    4716:	9f 90       	pop	r9
    4718:	8f 90       	pop	r8
    471a:	7f 90       	pop	r7
    471c:	6f 90       	pop	r6
    471e:	5f 90       	pop	r5
    4720:	4f 90       	pop	r4
    4722:	3f 90       	pop	r3
    4724:	2f 90       	pop	r2
    4726:	08 95       	ret

00004728 <serial_sendByte>:
    4728:	cf 93       	push	r28
    472a:	df 93       	push	r29
    472c:	dc 01       	movw	r26, r24
    472e:	89 2b       	or	r24, r25
    4730:	01 f1       	breq	.+64     	; 0x4772 <serial_sendByte+0x4a>
    4732:	12 96       	adiw	r26, 0x02	; 2
    4734:	ed 91       	ld	r30, X+
    4736:	fc 91       	ld	r31, X
    4738:	13 97       	sbiw	r26, 0x03	; 3
    473a:	93 81       	ldd	r25, Z+3	; 0x03
    473c:	82 81       	ldd	r24, Z+2	; 0x02
    473e:	25 81       	ldd	r18, Z+5	; 0x05
    4740:	98 1b       	sub	r25, r24
    4742:	92 23       	and	r25, r18
    4744:	84 81       	ldd	r24, Z+4	; 0x04
    4746:	98 17       	cp	r25, r24
    4748:	b1 f0       	breq	.+44     	; 0x4776 <serial_sendByte+0x4e>
    474a:	83 81       	ldd	r24, Z+3	; 0x03
    474c:	26 95       	lsr	r18
    474e:	28 23       	and	r18, r24
    4750:	c0 81       	ld	r28, Z
    4752:	d1 81       	ldd	r29, Z+1	; 0x01
    4754:	c2 0f       	add	r28, r18
    4756:	d1 1d       	adc	r29, r1
    4758:	68 83       	st	Y, r22
    475a:	8f 5f       	subi	r24, 0xFF	; 255
    475c:	95 81       	ldd	r25, Z+5	; 0x05
    475e:	89 23       	and	r24, r25
    4760:	83 83       	std	Z+3, r24	; 0x03
    4762:	ed 91       	ld	r30, X+
    4764:	fc 91       	ld	r31, X
    4766:	35 97       	sbiw	r30, 0x05	; 5
    4768:	80 81       	ld	r24, Z
    476a:	80 62       	ori	r24, 0x20	; 32
    476c:	80 83       	st	Z, r24
    476e:	80 e0       	ldi	r24, 0x00	; 0
    4770:	03 c0       	rjmp	.+6      	; 0x4778 <serial_sendByte+0x50>
    4772:	81 e0       	ldi	r24, 0x01	; 1
    4774:	01 c0       	rjmp	.+2      	; 0x4778 <serial_sendByte+0x50>
    4776:	82 e0       	ldi	r24, 0x02	; 2
    4778:	df 91       	pop	r29
    477a:	cf 91       	pop	r28
    477c:	08 95       	ret

0000477e <serial_sendBytes>:
    477e:	ef 92       	push	r14
    4780:	ff 92       	push	r15
    4782:	0f 93       	push	r16
    4784:	1f 93       	push	r17
    4786:	cf 93       	push	r28
    4788:	df 93       	push	r29
    478a:	7c 01       	movw	r14, r24
    478c:	00 97       	sbiw	r24, 0x00	; 0
    478e:	09 f4       	brne	.+2      	; 0x4792 <serial_sendBytes+0x14>
    4790:	41 c0       	rjmp	.+130    	; 0x4814 <serial_sendBytes+0x96>
    4792:	dc 01       	movw	r26, r24
    4794:	12 96       	adiw	r26, 0x02	; 2
    4796:	ed 91       	ld	r30, X+
    4798:	fc 91       	ld	r31, X
    479a:	13 97       	sbiw	r26, 0x03	; 3
    479c:	93 81       	ldd	r25, Z+3	; 0x03
    479e:	82 81       	ldd	r24, Z+2	; 0x02
    47a0:	98 1b       	sub	r25, r24
    47a2:	85 81       	ldd	r24, Z+5	; 0x05
    47a4:	98 23       	and	r25, r24
    47a6:	84 81       	ldd	r24, Z+4	; 0x04
    47a8:	89 1b       	sub	r24, r25
    47aa:	86 17       	cp	r24, r22
    47ac:	a8 f1       	brcs	.+106    	; 0x4818 <serial_sendBytes+0x9a>
    47ae:	66 23       	and	r22, r22
    47b0:	41 f1       	breq	.+80     	; 0x4802 <serial_sendBytes+0x84>
    47b2:	84 2f       	mov	r24, r20
    47b4:	95 2f       	mov	r25, r21
    47b6:	dc 01       	movw	r26, r24
    47b8:	61 50       	subi	r22, 0x01	; 1
    47ba:	46 2f       	mov	r20, r22
    47bc:	50 e0       	ldi	r21, 0x00	; 0
    47be:	4f 5f       	subi	r20, 0xFF	; 255
    47c0:	5f 4f       	sbci	r21, 0xFF	; 255
    47c2:	48 0f       	add	r20, r24
    47c4:	59 1f       	adc	r21, r25
    47c6:	e7 01       	movw	r28, r14
    47c8:	ea 81       	ldd	r30, Y+2	; 0x02
    47ca:	fb 81       	ldd	r31, Y+3	; 0x03
    47cc:	93 81       	ldd	r25, Z+3	; 0x03
    47ce:	82 81       	ldd	r24, Z+2	; 0x02
    47d0:	25 81       	ldd	r18, Z+5	; 0x05
    47d2:	98 1b       	sub	r25, r24
    47d4:	92 23       	and	r25, r18
    47d6:	84 81       	ldd	r24, Z+4	; 0x04
    47d8:	98 17       	cp	r25, r24
    47da:	79 f0       	breq	.+30     	; 0x47fa <serial_sendBytes+0x7c>
    47dc:	8c 91       	ld	r24, X
    47de:	93 81       	ldd	r25, Z+3	; 0x03
    47e0:	26 95       	lsr	r18
    47e2:	29 23       	and	r18, r25
    47e4:	60 81       	ld	r22, Z
    47e6:	71 81       	ldd	r23, Z+1	; 0x01
    47e8:	8b 01       	movw	r16, r22
    47ea:	02 0f       	add	r16, r18
    47ec:	11 1d       	adc	r17, r1
    47ee:	e8 01       	movw	r28, r16
    47f0:	88 83       	st	Y, r24
    47f2:	9f 5f       	subi	r25, 0xFF	; 255
    47f4:	85 81       	ldd	r24, Z+5	; 0x05
    47f6:	98 23       	and	r25, r24
    47f8:	93 83       	std	Z+3, r25	; 0x03
    47fa:	11 96       	adiw	r26, 0x01	; 1
    47fc:	a4 17       	cp	r26, r20
    47fe:	b5 07       	cpc	r27, r21
    4800:	11 f7       	brne	.-60     	; 0x47c6 <serial_sendBytes+0x48>
    4802:	d7 01       	movw	r26, r14
    4804:	ed 91       	ld	r30, X+
    4806:	fc 91       	ld	r31, X
    4808:	35 97       	sbiw	r30, 0x05	; 5
    480a:	80 81       	ld	r24, Z
    480c:	80 62       	ori	r24, 0x20	; 32
    480e:	80 83       	st	Z, r24
    4810:	80 e0       	ldi	r24, 0x00	; 0
    4812:	03 c0       	rjmp	.+6      	; 0x481a <serial_sendBytes+0x9c>
    4814:	81 e0       	ldi	r24, 0x01	; 1
    4816:	01 c0       	rjmp	.+2      	; 0x481a <serial_sendBytes+0x9c>
    4818:	82 e0       	ldi	r24, 0x02	; 2
    481a:	df 91       	pop	r29
    481c:	cf 91       	pop	r28
    481e:	1f 91       	pop	r17
    4820:	0f 91       	pop	r16
    4822:	ff 90       	pop	r15
    4824:	ef 90       	pop	r14
    4826:	08 95       	ret

00004828 <serial_getByte>:
    4828:	00 97       	sbiw	r24, 0x00	; 0
    482a:	d1 f0       	breq	.+52     	; 0x4860 <serial_getByte+0x38>
    482c:	dc 01       	movw	r26, r24
    482e:	14 96       	adiw	r26, 0x04	; 4
    4830:	ed 91       	ld	r30, X+
    4832:	fc 91       	ld	r31, X
    4834:	15 97       	sbiw	r26, 0x05	; 5
    4836:	93 81       	ldd	r25, Z+3	; 0x03
    4838:	82 81       	ldd	r24, Z+2	; 0x02
    483a:	98 17       	cp	r25, r24
    483c:	99 f0       	breq	.+38     	; 0x4864 <serial_getByte+0x3c>
    483e:	92 81       	ldd	r25, Z+2	; 0x02
    4840:	85 81       	ldd	r24, Z+5	; 0x05
    4842:	86 95       	lsr	r24
    4844:	89 23       	and	r24, r25
    4846:	a0 81       	ld	r26, Z
    4848:	b1 81       	ldd	r27, Z+1	; 0x01
    484a:	a8 0f       	add	r26, r24
    484c:	b1 1d       	adc	r27, r1
    484e:	8c 91       	ld	r24, X
    4850:	db 01       	movw	r26, r22
    4852:	8c 93       	st	X, r24
    4854:	9f 5f       	subi	r25, 0xFF	; 255
    4856:	85 81       	ldd	r24, Z+5	; 0x05
    4858:	98 23       	and	r25, r24
    485a:	92 83       	std	Z+2, r25	; 0x02
    485c:	80 e0       	ldi	r24, 0x00	; 0
    485e:	08 95       	ret
    4860:	81 e0       	ldi	r24, 0x01	; 1
    4862:	08 95       	ret
    4864:	83 e0       	ldi	r24, 0x03	; 3
    4866:	08 95       	ret

00004868 <__vector_25>:
    4868:	1f 92       	push	r1
    486a:	0f 92       	push	r0
    486c:	0f b6       	in	r0, 0x3f	; 63
    486e:	0f 92       	push	r0
    4870:	11 24       	eor	r1, r1
    4872:	0b b6       	in	r0, 0x3b	; 59
    4874:	0f 92       	push	r0
    4876:	2f 93       	push	r18
    4878:	3f 93       	push	r19
    487a:	4f 93       	push	r20
    487c:	5f 93       	push	r21
    487e:	6f 93       	push	r22
    4880:	7f 93       	push	r23
    4882:	8f 93       	push	r24
    4884:	9f 93       	push	r25
    4886:	af 93       	push	r26
    4888:	bf 93       	push	r27
    488a:	cf 93       	push	r28
    488c:	df 93       	push	r29
    488e:	ef 93       	push	r30
    4890:	ff 93       	push	r31
    4892:	a0 91 f7 14 	lds	r26, 0x14F7	; 0x8014f7 <_ser_handle>
    4896:	b0 91 f8 14 	lds	r27, 0x14F8	; 0x8014f8 <_ser_handle+0x1>
    489a:	10 97       	sbiw	r26, 0x00	; 0
    489c:	11 f1       	breq	.+68     	; 0x48e2 <__vector_25+0x7a>
    489e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    48a2:	14 96       	adiw	r26, 0x04	; 4
    48a4:	ed 91       	ld	r30, X+
    48a6:	fc 91       	ld	r31, X
    48a8:	15 97       	sbiw	r26, 0x05	; 5
    48aa:	93 81       	ldd	r25, Z+3	; 0x03
    48ac:	82 81       	ldd	r24, Z+2	; 0x02
    48ae:	25 81       	ldd	r18, Z+5	; 0x05
    48b0:	98 1b       	sub	r25, r24
    48b2:	92 23       	and	r25, r18
    48b4:	84 81       	ldd	r24, Z+4	; 0x04
    48b6:	98 17       	cp	r25, r24
    48b8:	61 f0       	breq	.+24     	; 0x48d2 <__vector_25+0x6a>
    48ba:	83 81       	ldd	r24, Z+3	; 0x03
    48bc:	26 95       	lsr	r18
    48be:	28 23       	and	r18, r24
    48c0:	c0 81       	ld	r28, Z
    48c2:	d1 81       	ldd	r29, Z+1	; 0x01
    48c4:	c2 0f       	add	r28, r18
    48c6:	d1 1d       	adc	r29, r1
    48c8:	68 83       	st	Y, r22
    48ca:	8f 5f       	subi	r24, 0xFF	; 255
    48cc:	95 81       	ldd	r25, Z+5	; 0x05
    48ce:	89 23       	and	r24, r25
    48d0:	83 83       	std	Z+3, r24	; 0x03
    48d2:	16 96       	adiw	r26, 0x06	; 6
    48d4:	ed 91       	ld	r30, X+
    48d6:	fc 91       	ld	r31, X
    48d8:	17 97       	sbiw	r26, 0x07	; 7
    48da:	30 97       	sbiw	r30, 0x00	; 0
    48dc:	11 f0       	breq	.+4      	; 0x48e2 <__vector_25+0x7a>
    48de:	cd 01       	movw	r24, r26
    48e0:	19 95       	eicall
    48e2:	ff 91       	pop	r31
    48e4:	ef 91       	pop	r30
    48e6:	df 91       	pop	r29
    48e8:	cf 91       	pop	r28
    48ea:	bf 91       	pop	r27
    48ec:	af 91       	pop	r26
    48ee:	9f 91       	pop	r25
    48f0:	8f 91       	pop	r24
    48f2:	7f 91       	pop	r23
    48f4:	6f 91       	pop	r22
    48f6:	5f 91       	pop	r21
    48f8:	4f 91       	pop	r20
    48fa:	3f 91       	pop	r19
    48fc:	2f 91       	pop	r18
    48fe:	0f 90       	pop	r0
    4900:	0b be       	out	0x3b, r0	; 59
    4902:	0f 90       	pop	r0
    4904:	0f be       	out	0x3f, r0	; 63
    4906:	0f 90       	pop	r0
    4908:	1f 90       	pop	r1
    490a:	18 95       	reti

0000490c <__vector_26>:
    490c:	1f 92       	push	r1
    490e:	0f 92       	push	r0
    4910:	0f b6       	in	r0, 0x3f	; 63
    4912:	0f 92       	push	r0
    4914:	11 24       	eor	r1, r1
    4916:	0b b6       	in	r0, 0x3b	; 59
    4918:	0f 92       	push	r0
    491a:	2f 93       	push	r18
    491c:	8f 93       	push	r24
    491e:	9f 93       	push	r25
    4920:	af 93       	push	r26
    4922:	bf 93       	push	r27
    4924:	ef 93       	push	r30
    4926:	ff 93       	push	r31
    4928:	e0 91 f7 14 	lds	r30, 0x14F7	; 0x8014f7 <_ser_handle>
    492c:	f0 91 f8 14 	lds	r31, 0x14F8	; 0x8014f8 <_ser_handle+0x1>
    4930:	30 97       	sbiw	r30, 0x00	; 0
    4932:	b9 f0       	breq	.+46     	; 0x4962 <__vector_26+0x56>
    4934:	02 80       	ldd	r0, Z+2	; 0x02
    4936:	f3 81       	ldd	r31, Z+3	; 0x03
    4938:	e0 2d       	mov	r30, r0
    493a:	93 81       	ldd	r25, Z+3	; 0x03
    493c:	82 81       	ldd	r24, Z+2	; 0x02
    493e:	98 17       	cp	r25, r24
    4940:	b1 f0       	breq	.+44     	; 0x496e <__vector_26+0x62>
    4942:	92 81       	ldd	r25, Z+2	; 0x02
    4944:	85 81       	ldd	r24, Z+5	; 0x05
    4946:	28 2f       	mov	r18, r24
    4948:	26 95       	lsr	r18
    494a:	29 23       	and	r18, r25
    494c:	a0 81       	ld	r26, Z
    494e:	b1 81       	ldd	r27, Z+1	; 0x01
    4950:	a2 0f       	add	r26, r18
    4952:	b1 1d       	adc	r27, r1
    4954:	2c 91       	ld	r18, X
    4956:	9f 5f       	subi	r25, 0xFF	; 255
    4958:	89 23       	and	r24, r25
    495a:	82 83       	std	Z+2, r24	; 0x02
    495c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4960:	0b c0       	rjmp	.+22     	; 0x4978 <__vector_26+0x6c>
    4962:	e1 ec       	ldi	r30, 0xC1	; 193
    4964:	f0 e0       	ldi	r31, 0x00	; 0
    4966:	80 81       	ld	r24, Z
    4968:	8f 7d       	andi	r24, 0xDF	; 223
    496a:	80 83       	st	Z, r24
    496c:	05 c0       	rjmp	.+10     	; 0x4978 <__vector_26+0x6c>
    496e:	e1 ec       	ldi	r30, 0xC1	; 193
    4970:	f0 e0       	ldi	r31, 0x00	; 0
    4972:	80 81       	ld	r24, Z
    4974:	8f 7d       	andi	r24, 0xDF	; 223
    4976:	80 83       	st	Z, r24
    4978:	ff 91       	pop	r31
    497a:	ef 91       	pop	r30
    497c:	bf 91       	pop	r27
    497e:	af 91       	pop	r26
    4980:	9f 91       	pop	r25
    4982:	8f 91       	pop	r24
    4984:	2f 91       	pop	r18
    4986:	0f 90       	pop	r0
    4988:	0b be       	out	0x3b, r0	; 59
    498a:	0f 90       	pop	r0
    498c:	0f be       	out	0x3f, r0	; 63
    498e:	0f 90       	pop	r0
    4990:	1f 90       	pop	r1
    4992:	18 95       	reti

00004994 <__vector_36>:
    4994:	1f 92       	push	r1
    4996:	0f 92       	push	r0
    4998:	0f b6       	in	r0, 0x3f	; 63
    499a:	0f 92       	push	r0
    499c:	11 24       	eor	r1, r1
    499e:	0b b6       	in	r0, 0x3b	; 59
    49a0:	0f 92       	push	r0
    49a2:	2f 93       	push	r18
    49a4:	3f 93       	push	r19
    49a6:	4f 93       	push	r20
    49a8:	5f 93       	push	r21
    49aa:	6f 93       	push	r22
    49ac:	7f 93       	push	r23
    49ae:	8f 93       	push	r24
    49b0:	9f 93       	push	r25
    49b2:	af 93       	push	r26
    49b4:	bf 93       	push	r27
    49b6:	cf 93       	push	r28
    49b8:	df 93       	push	r29
    49ba:	ef 93       	push	r30
    49bc:	ff 93       	push	r31
    49be:	a0 91 f9 14 	lds	r26, 0x14F9	; 0x8014f9 <_ser_handle+0x2>
    49c2:	b0 91 fa 14 	lds	r27, 0x14FA	; 0x8014fa <_ser_handle+0x3>
    49c6:	10 97       	sbiw	r26, 0x00	; 0
    49c8:	11 f1       	breq	.+68     	; 0x4a0e <__vector_36+0x7a>
    49ca:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    49ce:	14 96       	adiw	r26, 0x04	; 4
    49d0:	ed 91       	ld	r30, X+
    49d2:	fc 91       	ld	r31, X
    49d4:	15 97       	sbiw	r26, 0x05	; 5
    49d6:	93 81       	ldd	r25, Z+3	; 0x03
    49d8:	82 81       	ldd	r24, Z+2	; 0x02
    49da:	25 81       	ldd	r18, Z+5	; 0x05
    49dc:	98 1b       	sub	r25, r24
    49de:	92 23       	and	r25, r18
    49e0:	84 81       	ldd	r24, Z+4	; 0x04
    49e2:	98 17       	cp	r25, r24
    49e4:	61 f0       	breq	.+24     	; 0x49fe <__vector_36+0x6a>
    49e6:	83 81       	ldd	r24, Z+3	; 0x03
    49e8:	26 95       	lsr	r18
    49ea:	28 23       	and	r18, r24
    49ec:	c0 81       	ld	r28, Z
    49ee:	d1 81       	ldd	r29, Z+1	; 0x01
    49f0:	c2 0f       	add	r28, r18
    49f2:	d1 1d       	adc	r29, r1
    49f4:	68 83       	st	Y, r22
    49f6:	8f 5f       	subi	r24, 0xFF	; 255
    49f8:	95 81       	ldd	r25, Z+5	; 0x05
    49fa:	89 23       	and	r24, r25
    49fc:	83 83       	std	Z+3, r24	; 0x03
    49fe:	16 96       	adiw	r26, 0x06	; 6
    4a00:	ed 91       	ld	r30, X+
    4a02:	fc 91       	ld	r31, X
    4a04:	17 97       	sbiw	r26, 0x07	; 7
    4a06:	30 97       	sbiw	r30, 0x00	; 0
    4a08:	11 f0       	breq	.+4      	; 0x4a0e <__vector_36+0x7a>
    4a0a:	cd 01       	movw	r24, r26
    4a0c:	19 95       	eicall
    4a0e:	ff 91       	pop	r31
    4a10:	ef 91       	pop	r30
    4a12:	df 91       	pop	r29
    4a14:	cf 91       	pop	r28
    4a16:	bf 91       	pop	r27
    4a18:	af 91       	pop	r26
    4a1a:	9f 91       	pop	r25
    4a1c:	8f 91       	pop	r24
    4a1e:	7f 91       	pop	r23
    4a20:	6f 91       	pop	r22
    4a22:	5f 91       	pop	r21
    4a24:	4f 91       	pop	r20
    4a26:	3f 91       	pop	r19
    4a28:	2f 91       	pop	r18
    4a2a:	0f 90       	pop	r0
    4a2c:	0b be       	out	0x3b, r0	; 59
    4a2e:	0f 90       	pop	r0
    4a30:	0f be       	out	0x3f, r0	; 63
    4a32:	0f 90       	pop	r0
    4a34:	1f 90       	pop	r1
    4a36:	18 95       	reti

00004a38 <__vector_37>:
    4a38:	1f 92       	push	r1
    4a3a:	0f 92       	push	r0
    4a3c:	0f b6       	in	r0, 0x3f	; 63
    4a3e:	0f 92       	push	r0
    4a40:	11 24       	eor	r1, r1
    4a42:	0b b6       	in	r0, 0x3b	; 59
    4a44:	0f 92       	push	r0
    4a46:	2f 93       	push	r18
    4a48:	8f 93       	push	r24
    4a4a:	9f 93       	push	r25
    4a4c:	af 93       	push	r26
    4a4e:	bf 93       	push	r27
    4a50:	ef 93       	push	r30
    4a52:	ff 93       	push	r31
    4a54:	e0 91 f9 14 	lds	r30, 0x14F9	; 0x8014f9 <_ser_handle+0x2>
    4a58:	f0 91 fa 14 	lds	r31, 0x14FA	; 0x8014fa <_ser_handle+0x3>
    4a5c:	30 97       	sbiw	r30, 0x00	; 0
    4a5e:	b9 f0       	breq	.+46     	; 0x4a8e <__vector_37+0x56>
    4a60:	02 80       	ldd	r0, Z+2	; 0x02
    4a62:	f3 81       	ldd	r31, Z+3	; 0x03
    4a64:	e0 2d       	mov	r30, r0
    4a66:	93 81       	ldd	r25, Z+3	; 0x03
    4a68:	82 81       	ldd	r24, Z+2	; 0x02
    4a6a:	98 17       	cp	r25, r24
    4a6c:	b1 f0       	breq	.+44     	; 0x4a9a <__vector_37+0x62>
    4a6e:	92 81       	ldd	r25, Z+2	; 0x02
    4a70:	85 81       	ldd	r24, Z+5	; 0x05
    4a72:	28 2f       	mov	r18, r24
    4a74:	26 95       	lsr	r18
    4a76:	29 23       	and	r18, r25
    4a78:	a0 81       	ld	r26, Z
    4a7a:	b1 81       	ldd	r27, Z+1	; 0x01
    4a7c:	a2 0f       	add	r26, r18
    4a7e:	b1 1d       	adc	r27, r1
    4a80:	2c 91       	ld	r18, X
    4a82:	9f 5f       	subi	r25, 0xFF	; 255
    4a84:	89 23       	and	r24, r25
    4a86:	82 83       	std	Z+2, r24	; 0x02
    4a88:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4a8c:	0b c0       	rjmp	.+22     	; 0x4aa4 <__vector_37+0x6c>
    4a8e:	e9 ec       	ldi	r30, 0xC9	; 201
    4a90:	f0 e0       	ldi	r31, 0x00	; 0
    4a92:	80 81       	ld	r24, Z
    4a94:	8f 7d       	andi	r24, 0xDF	; 223
    4a96:	80 83       	st	Z, r24
    4a98:	05 c0       	rjmp	.+10     	; 0x4aa4 <__vector_37+0x6c>
    4a9a:	e9 ec       	ldi	r30, 0xC9	; 201
    4a9c:	f0 e0       	ldi	r31, 0x00	; 0
    4a9e:	80 81       	ld	r24, Z
    4aa0:	8f 7d       	andi	r24, 0xDF	; 223
    4aa2:	80 83       	st	Z, r24
    4aa4:	ff 91       	pop	r31
    4aa6:	ef 91       	pop	r30
    4aa8:	bf 91       	pop	r27
    4aaa:	af 91       	pop	r26
    4aac:	9f 91       	pop	r25
    4aae:	8f 91       	pop	r24
    4ab0:	2f 91       	pop	r18
    4ab2:	0f 90       	pop	r0
    4ab4:	0b be       	out	0x3b, r0	; 59
    4ab6:	0f 90       	pop	r0
    4ab8:	0f be       	out	0x3f, r0	; 63
    4aba:	0f 90       	pop	r0
    4abc:	1f 90       	pop	r1
    4abe:	18 95       	reti

00004ac0 <__vector_51>:
    4ac0:	1f 92       	push	r1
    4ac2:	0f 92       	push	r0
    4ac4:	0f b6       	in	r0, 0x3f	; 63
    4ac6:	0f 92       	push	r0
    4ac8:	11 24       	eor	r1, r1
    4aca:	0b b6       	in	r0, 0x3b	; 59
    4acc:	0f 92       	push	r0
    4ace:	2f 93       	push	r18
    4ad0:	3f 93       	push	r19
    4ad2:	4f 93       	push	r20
    4ad4:	5f 93       	push	r21
    4ad6:	6f 93       	push	r22
    4ad8:	7f 93       	push	r23
    4ada:	8f 93       	push	r24
    4adc:	9f 93       	push	r25
    4ade:	af 93       	push	r26
    4ae0:	bf 93       	push	r27
    4ae2:	cf 93       	push	r28
    4ae4:	df 93       	push	r29
    4ae6:	ef 93       	push	r30
    4ae8:	ff 93       	push	r31
    4aea:	a0 91 fb 14 	lds	r26, 0x14FB	; 0x8014fb <_ser_handle+0x4>
    4aee:	b0 91 fc 14 	lds	r27, 0x14FC	; 0x8014fc <_ser_handle+0x5>
    4af2:	10 97       	sbiw	r26, 0x00	; 0
    4af4:	11 f1       	breq	.+68     	; 0x4b3a <__vector_51+0x7a>
    4af6:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4afa:	14 96       	adiw	r26, 0x04	; 4
    4afc:	ed 91       	ld	r30, X+
    4afe:	fc 91       	ld	r31, X
    4b00:	15 97       	sbiw	r26, 0x05	; 5
    4b02:	93 81       	ldd	r25, Z+3	; 0x03
    4b04:	82 81       	ldd	r24, Z+2	; 0x02
    4b06:	25 81       	ldd	r18, Z+5	; 0x05
    4b08:	98 1b       	sub	r25, r24
    4b0a:	92 23       	and	r25, r18
    4b0c:	84 81       	ldd	r24, Z+4	; 0x04
    4b0e:	98 17       	cp	r25, r24
    4b10:	61 f0       	breq	.+24     	; 0x4b2a <__vector_51+0x6a>
    4b12:	83 81       	ldd	r24, Z+3	; 0x03
    4b14:	26 95       	lsr	r18
    4b16:	28 23       	and	r18, r24
    4b18:	c0 81       	ld	r28, Z
    4b1a:	d1 81       	ldd	r29, Z+1	; 0x01
    4b1c:	c2 0f       	add	r28, r18
    4b1e:	d1 1d       	adc	r29, r1
    4b20:	68 83       	st	Y, r22
    4b22:	8f 5f       	subi	r24, 0xFF	; 255
    4b24:	95 81       	ldd	r25, Z+5	; 0x05
    4b26:	89 23       	and	r24, r25
    4b28:	83 83       	std	Z+3, r24	; 0x03
    4b2a:	16 96       	adiw	r26, 0x06	; 6
    4b2c:	ed 91       	ld	r30, X+
    4b2e:	fc 91       	ld	r31, X
    4b30:	17 97       	sbiw	r26, 0x07	; 7
    4b32:	30 97       	sbiw	r30, 0x00	; 0
    4b34:	11 f0       	breq	.+4      	; 0x4b3a <__vector_51+0x7a>
    4b36:	cd 01       	movw	r24, r26
    4b38:	19 95       	eicall
    4b3a:	ff 91       	pop	r31
    4b3c:	ef 91       	pop	r30
    4b3e:	df 91       	pop	r29
    4b40:	cf 91       	pop	r28
    4b42:	bf 91       	pop	r27
    4b44:	af 91       	pop	r26
    4b46:	9f 91       	pop	r25
    4b48:	8f 91       	pop	r24
    4b4a:	7f 91       	pop	r23
    4b4c:	6f 91       	pop	r22
    4b4e:	5f 91       	pop	r21
    4b50:	4f 91       	pop	r20
    4b52:	3f 91       	pop	r19
    4b54:	2f 91       	pop	r18
    4b56:	0f 90       	pop	r0
    4b58:	0b be       	out	0x3b, r0	; 59
    4b5a:	0f 90       	pop	r0
    4b5c:	0f be       	out	0x3f, r0	; 63
    4b5e:	0f 90       	pop	r0
    4b60:	1f 90       	pop	r1
    4b62:	18 95       	reti

00004b64 <__vector_52>:
    4b64:	1f 92       	push	r1
    4b66:	0f 92       	push	r0
    4b68:	0f b6       	in	r0, 0x3f	; 63
    4b6a:	0f 92       	push	r0
    4b6c:	11 24       	eor	r1, r1
    4b6e:	0b b6       	in	r0, 0x3b	; 59
    4b70:	0f 92       	push	r0
    4b72:	2f 93       	push	r18
    4b74:	8f 93       	push	r24
    4b76:	9f 93       	push	r25
    4b78:	af 93       	push	r26
    4b7a:	bf 93       	push	r27
    4b7c:	ef 93       	push	r30
    4b7e:	ff 93       	push	r31
    4b80:	e0 91 fb 14 	lds	r30, 0x14FB	; 0x8014fb <_ser_handle+0x4>
    4b84:	f0 91 fc 14 	lds	r31, 0x14FC	; 0x8014fc <_ser_handle+0x5>
    4b88:	30 97       	sbiw	r30, 0x00	; 0
    4b8a:	b9 f0       	breq	.+46     	; 0x4bba <__vector_52+0x56>
    4b8c:	02 80       	ldd	r0, Z+2	; 0x02
    4b8e:	f3 81       	ldd	r31, Z+3	; 0x03
    4b90:	e0 2d       	mov	r30, r0
    4b92:	93 81       	ldd	r25, Z+3	; 0x03
    4b94:	82 81       	ldd	r24, Z+2	; 0x02
    4b96:	98 17       	cp	r25, r24
    4b98:	b1 f0       	breq	.+44     	; 0x4bc6 <__vector_52+0x62>
    4b9a:	92 81       	ldd	r25, Z+2	; 0x02
    4b9c:	85 81       	ldd	r24, Z+5	; 0x05
    4b9e:	28 2f       	mov	r18, r24
    4ba0:	26 95       	lsr	r18
    4ba2:	29 23       	and	r18, r25
    4ba4:	a0 81       	ld	r26, Z
    4ba6:	b1 81       	ldd	r27, Z+1	; 0x01
    4ba8:	a2 0f       	add	r26, r18
    4baa:	b1 1d       	adc	r27, r1
    4bac:	2c 91       	ld	r18, X
    4bae:	9f 5f       	subi	r25, 0xFF	; 255
    4bb0:	89 23       	and	r24, r25
    4bb2:	82 83       	std	Z+2, r24	; 0x02
    4bb4:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4bb8:	0b c0       	rjmp	.+22     	; 0x4bd0 <__vector_52+0x6c>
    4bba:	e1 ed       	ldi	r30, 0xD1	; 209
    4bbc:	f0 e0       	ldi	r31, 0x00	; 0
    4bbe:	80 81       	ld	r24, Z
    4bc0:	8f 7d       	andi	r24, 0xDF	; 223
    4bc2:	80 83       	st	Z, r24
    4bc4:	05 c0       	rjmp	.+10     	; 0x4bd0 <__vector_52+0x6c>
    4bc6:	e1 ed       	ldi	r30, 0xD1	; 209
    4bc8:	f0 e0       	ldi	r31, 0x00	; 0
    4bca:	80 81       	ld	r24, Z
    4bcc:	8f 7d       	andi	r24, 0xDF	; 223
    4bce:	80 83       	st	Z, r24
    4bd0:	ff 91       	pop	r31
    4bd2:	ef 91       	pop	r30
    4bd4:	bf 91       	pop	r27
    4bd6:	af 91       	pop	r26
    4bd8:	9f 91       	pop	r25
    4bda:	8f 91       	pop	r24
    4bdc:	2f 91       	pop	r18
    4bde:	0f 90       	pop	r0
    4be0:	0b be       	out	0x3b, r0	; 59
    4be2:	0f 90       	pop	r0
    4be4:	0f be       	out	0x3f, r0	; 63
    4be6:	0f 90       	pop	r0
    4be8:	1f 90       	pop	r1
    4bea:	18 95       	reti

00004bec <__vector_54>:
    4bec:	1f 92       	push	r1
    4bee:	0f 92       	push	r0
    4bf0:	0f b6       	in	r0, 0x3f	; 63
    4bf2:	0f 92       	push	r0
    4bf4:	11 24       	eor	r1, r1
    4bf6:	0b b6       	in	r0, 0x3b	; 59
    4bf8:	0f 92       	push	r0
    4bfa:	2f 93       	push	r18
    4bfc:	3f 93       	push	r19
    4bfe:	4f 93       	push	r20
    4c00:	5f 93       	push	r21
    4c02:	6f 93       	push	r22
    4c04:	7f 93       	push	r23
    4c06:	8f 93       	push	r24
    4c08:	9f 93       	push	r25
    4c0a:	af 93       	push	r26
    4c0c:	bf 93       	push	r27
    4c0e:	cf 93       	push	r28
    4c10:	df 93       	push	r29
    4c12:	ef 93       	push	r30
    4c14:	ff 93       	push	r31
    4c16:	a0 91 fd 14 	lds	r26, 0x14FD	; 0x8014fd <_ser_handle+0x6>
    4c1a:	b0 91 fe 14 	lds	r27, 0x14FE	; 0x8014fe <_ser_handle+0x7>
    4c1e:	10 97       	sbiw	r26, 0x00	; 0
    4c20:	11 f1       	breq	.+68     	; 0x4c66 <__vector_54+0x7a>
    4c22:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4c26:	14 96       	adiw	r26, 0x04	; 4
    4c28:	ed 91       	ld	r30, X+
    4c2a:	fc 91       	ld	r31, X
    4c2c:	15 97       	sbiw	r26, 0x05	; 5
    4c2e:	93 81       	ldd	r25, Z+3	; 0x03
    4c30:	82 81       	ldd	r24, Z+2	; 0x02
    4c32:	25 81       	ldd	r18, Z+5	; 0x05
    4c34:	98 1b       	sub	r25, r24
    4c36:	92 23       	and	r25, r18
    4c38:	84 81       	ldd	r24, Z+4	; 0x04
    4c3a:	98 17       	cp	r25, r24
    4c3c:	61 f0       	breq	.+24     	; 0x4c56 <__vector_54+0x6a>
    4c3e:	83 81       	ldd	r24, Z+3	; 0x03
    4c40:	26 95       	lsr	r18
    4c42:	28 23       	and	r18, r24
    4c44:	c0 81       	ld	r28, Z
    4c46:	d1 81       	ldd	r29, Z+1	; 0x01
    4c48:	c2 0f       	add	r28, r18
    4c4a:	d1 1d       	adc	r29, r1
    4c4c:	68 83       	st	Y, r22
    4c4e:	8f 5f       	subi	r24, 0xFF	; 255
    4c50:	95 81       	ldd	r25, Z+5	; 0x05
    4c52:	89 23       	and	r24, r25
    4c54:	83 83       	std	Z+3, r24	; 0x03
    4c56:	16 96       	adiw	r26, 0x06	; 6
    4c58:	ed 91       	ld	r30, X+
    4c5a:	fc 91       	ld	r31, X
    4c5c:	17 97       	sbiw	r26, 0x07	; 7
    4c5e:	30 97       	sbiw	r30, 0x00	; 0
    4c60:	11 f0       	breq	.+4      	; 0x4c66 <__vector_54+0x7a>
    4c62:	cd 01       	movw	r24, r26
    4c64:	19 95       	eicall
    4c66:	ff 91       	pop	r31
    4c68:	ef 91       	pop	r30
    4c6a:	df 91       	pop	r29
    4c6c:	cf 91       	pop	r28
    4c6e:	bf 91       	pop	r27
    4c70:	af 91       	pop	r26
    4c72:	9f 91       	pop	r25
    4c74:	8f 91       	pop	r24
    4c76:	7f 91       	pop	r23
    4c78:	6f 91       	pop	r22
    4c7a:	5f 91       	pop	r21
    4c7c:	4f 91       	pop	r20
    4c7e:	3f 91       	pop	r19
    4c80:	2f 91       	pop	r18
    4c82:	0f 90       	pop	r0
    4c84:	0b be       	out	0x3b, r0	; 59
    4c86:	0f 90       	pop	r0
    4c88:	0f be       	out	0x3f, r0	; 63
    4c8a:	0f 90       	pop	r0
    4c8c:	1f 90       	pop	r1
    4c8e:	18 95       	reti

00004c90 <__vector_55>:
    4c90:	1f 92       	push	r1
    4c92:	0f 92       	push	r0
    4c94:	0f b6       	in	r0, 0x3f	; 63
    4c96:	0f 92       	push	r0
    4c98:	11 24       	eor	r1, r1
    4c9a:	0b b6       	in	r0, 0x3b	; 59
    4c9c:	0f 92       	push	r0
    4c9e:	2f 93       	push	r18
    4ca0:	8f 93       	push	r24
    4ca2:	9f 93       	push	r25
    4ca4:	af 93       	push	r26
    4ca6:	bf 93       	push	r27
    4ca8:	ef 93       	push	r30
    4caa:	ff 93       	push	r31
    4cac:	e0 91 fd 14 	lds	r30, 0x14FD	; 0x8014fd <_ser_handle+0x6>
    4cb0:	f0 91 fe 14 	lds	r31, 0x14FE	; 0x8014fe <_ser_handle+0x7>
    4cb4:	30 97       	sbiw	r30, 0x00	; 0
    4cb6:	b9 f0       	breq	.+46     	; 0x4ce6 <__vector_55+0x56>
    4cb8:	02 80       	ldd	r0, Z+2	; 0x02
    4cba:	f3 81       	ldd	r31, Z+3	; 0x03
    4cbc:	e0 2d       	mov	r30, r0
    4cbe:	93 81       	ldd	r25, Z+3	; 0x03
    4cc0:	82 81       	ldd	r24, Z+2	; 0x02
    4cc2:	98 17       	cp	r25, r24
    4cc4:	b1 f0       	breq	.+44     	; 0x4cf2 <__vector_55+0x62>
    4cc6:	92 81       	ldd	r25, Z+2	; 0x02
    4cc8:	85 81       	ldd	r24, Z+5	; 0x05
    4cca:	28 2f       	mov	r18, r24
    4ccc:	26 95       	lsr	r18
    4cce:	29 23       	and	r18, r25
    4cd0:	a0 81       	ld	r26, Z
    4cd2:	b1 81       	ldd	r27, Z+1	; 0x01
    4cd4:	a2 0f       	add	r26, r18
    4cd6:	b1 1d       	adc	r27, r1
    4cd8:	2c 91       	ld	r18, X
    4cda:	9f 5f       	subi	r25, 0xFF	; 255
    4cdc:	89 23       	and	r24, r25
    4cde:	82 83       	std	Z+2, r24	; 0x02
    4ce0:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4ce4:	0b c0       	rjmp	.+22     	; 0x4cfc <__vector_55+0x6c>
    4ce6:	e1 e3       	ldi	r30, 0x31	; 49
    4ce8:	f1 e0       	ldi	r31, 0x01	; 1
    4cea:	80 81       	ld	r24, Z
    4cec:	8f 7d       	andi	r24, 0xDF	; 223
    4cee:	80 83       	st	Z, r24
    4cf0:	05 c0       	rjmp	.+10     	; 0x4cfc <__vector_55+0x6c>
    4cf2:	e1 e3       	ldi	r30, 0x31	; 49
    4cf4:	f1 e0       	ldi	r31, 0x01	; 1
    4cf6:	80 81       	ld	r24, Z
    4cf8:	8f 7d       	andi	r24, 0xDF	; 223
    4cfa:	80 83       	st	Z, r24
    4cfc:	ff 91       	pop	r31
    4cfe:	ef 91       	pop	r30
    4d00:	bf 91       	pop	r27
    4d02:	af 91       	pop	r26
    4d04:	9f 91       	pop	r25
    4d06:	8f 91       	pop	r24
    4d08:	2f 91       	pop	r18
    4d0a:	0f 90       	pop	r0
    4d0c:	0b be       	out	0x3b, r0	; 59
    4d0e:	0f 90       	pop	r0
    4d10:	0f be       	out	0x3f, r0	; 63
    4d12:	0f 90       	pop	r0
    4d14:	1f 90       	pop	r1
    4d16:	18 95       	reti

00004d18 <usart_getchar>:
    4d18:	cf 93       	push	r28
    4d1a:	df 93       	push	r29
    4d1c:	1f 92       	push	r1
    4d1e:	cd b7       	in	r28, 0x3d	; 61
    4d20:	de b7       	in	r29, 0x3e	; 62
    4d22:	be 01       	movw	r22, r28
    4d24:	6f 5f       	subi	r22, 0xFF	; 255
    4d26:	7f 4f       	sbci	r23, 0xFF	; 255
    4d28:	80 91 ff 14 	lds	r24, 0x14FF	; 0x8014ff <_com_serial_instance>
    4d2c:	90 91 00 15 	lds	r25, 0x1500	; 0x801500 <_com_serial_instance+0x1>
    4d30:	7b dd       	rcall	.-1290   	; 0x4828 <serial_getByte>
    4d32:	81 11       	cpse	r24, r1
    4d34:	f6 cf       	rjmp	.-20     	; 0x4d22 <usart_getchar+0xa>
    4d36:	89 81       	ldd	r24, Y+1	; 0x01
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	0f 90       	pop	r0
    4d3c:	df 91       	pop	r29
    4d3e:	cf 91       	pop	r28
    4d40:	08 95       	ret

00004d42 <usart_putchar>:
    4d42:	68 2f       	mov	r22, r24
    4d44:	80 91 ff 14 	lds	r24, 0x14FF	; 0x8014ff <_com_serial_instance>
    4d48:	90 91 00 15 	lds	r25, 0x1500	; 0x801500 <_com_serial_instance+0x1>
    4d4c:	ed dc       	rcall	.-1574   	; 0x4728 <serial_sendByte>
    4d4e:	80 e0       	ldi	r24, 0x00	; 0
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	08 95       	ret

00004d54 <stdio_initialise>:
    4d54:	8f 92       	push	r8
    4d56:	9f 92       	push	r9
    4d58:	af 92       	push	r10
    4d5a:	cf 92       	push	r12
    4d5c:	ef 92       	push	r14
    4d5e:	0f 93       	push	r16
    4d60:	81 2c       	mov	r8, r1
    4d62:	91 2c       	mov	r9, r1
    4d64:	68 94       	set
    4d66:	aa 24       	eor	r10, r10
    4d68:	a7 f8       	bld	r10, 7
    4d6a:	68 94       	set
    4d6c:	cc 24       	eor	r12, r12
    4d6e:	c7 f8       	bld	r12, 7
    4d70:	e1 2c       	mov	r14, r1
    4d72:	00 e0       	ldi	r16, 0x00	; 0
    4d74:	23 e0       	ldi	r18, 0x03	; 3
    4d76:	40 e0       	ldi	r20, 0x00	; 0
    4d78:	51 ee       	ldi	r21, 0xE1	; 225
    4d7a:	60 e0       	ldi	r22, 0x00	; 0
    4d7c:	70 e0       	ldi	r23, 0x00	; 0
    4d7e:	2f dc       	rcall	.-1954   	; 0x45de <serial_create>
    4d80:	90 93 00 15 	sts	0x1500, r25	; 0x801500 <_com_serial_instance+0x1>
    4d84:	80 93 ff 14 	sts	0x14FF, r24	; 0x8014ff <_com_serial_instance>
    4d88:	ec e4       	ldi	r30, 0x4C	; 76
    4d8a:	f5 e1       	ldi	r31, 0x15	; 21
    4d8c:	83 e1       	ldi	r24, 0x13	; 19
    4d8e:	92 e0       	ldi	r25, 0x02	; 2
    4d90:	91 83       	std	Z+1, r25	; 0x01
    4d92:	80 83       	st	Z, r24
    4d94:	93 83       	std	Z+3, r25	; 0x03
    4d96:	82 83       	std	Z+2, r24	; 0x02
    4d98:	0f 91       	pop	r16
    4d9a:	ef 90       	pop	r14
    4d9c:	cf 90       	pop	r12
    4d9e:	af 90       	pop	r10
    4da0:	9f 90       	pop	r9
    4da2:	8f 90       	pop	r8
    4da4:	08 95       	ret

00004da6 <_turn_off>:
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	fc 01       	movw	r30, r24
    4daa:	ee 0f       	add	r30, r30
    4dac:	ff 1f       	adc	r31, r31
    4dae:	e8 0f       	add	r30, r24
    4db0:	f9 1f       	adc	r31, r25
    4db2:	ee 0f       	add	r30, r30
    4db4:	ff 1f       	adc	r31, r31
    4db6:	ef 5f       	subi	r30, 0xFF	; 255
    4db8:	fa 4e       	sbci	r31, 0xEA	; 234
    4dba:	23 81       	ldd	r18, Z+3	; 0x03
    4dbc:	21 11       	cpse	r18, r1
    4dbe:	1f c0       	rjmp	.+62     	; 0x4dfe <_turn_off+0x58>
    4dc0:	9c 01       	movw	r18, r24
    4dc2:	22 0f       	add	r18, r18
    4dc4:	33 1f       	adc	r19, r19
    4dc6:	f9 01       	movw	r30, r18
    4dc8:	e8 0f       	add	r30, r24
    4dca:	f9 1f       	adc	r31, r25
    4dcc:	ee 0f       	add	r30, r30
    4dce:	ff 1f       	adc	r31, r31
    4dd0:	ef 5f       	subi	r30, 0xFF	; 255
    4dd2:	fa 4e       	sbci	r31, 0xEA	; 234
    4dd4:	a0 81       	ld	r26, Z
    4dd6:	b1 81       	ldd	r27, Z+1	; 0x01
    4dd8:	4c 91       	ld	r20, X
    4dda:	f9 01       	movw	r30, r18
    4ddc:	e8 0f       	add	r30, r24
    4dde:	f9 1f       	adc	r31, r25
    4de0:	ee 0f       	add	r30, r30
    4de2:	ff 1f       	adc	r31, r31
    4de4:	ef 5f       	subi	r30, 0xFF	; 255
    4de6:	fa 4e       	sbci	r31, 0xEA	; 234
    4de8:	81 e0       	ldi	r24, 0x01	; 1
    4dea:	90 e0       	ldi	r25, 0x00	; 0
    4dec:	02 80       	ldd	r0, Z+2	; 0x02
    4dee:	02 c0       	rjmp	.+4      	; 0x4df4 <_turn_off+0x4e>
    4df0:	88 0f       	add	r24, r24
    4df2:	99 1f       	adc	r25, r25
    4df4:	0a 94       	dec	r0
    4df6:	e2 f7       	brpl	.-8      	; 0x4df0 <_turn_off+0x4a>
    4df8:	84 2b       	or	r24, r20
    4dfa:	8c 93       	st	X, r24
    4dfc:	08 95       	ret
    4dfe:	fc 01       	movw	r30, r24
    4e00:	ee 0f       	add	r30, r30
    4e02:	ff 1f       	adc	r31, r31
    4e04:	df 01       	movw	r26, r30
    4e06:	a8 0f       	add	r26, r24
    4e08:	b9 1f       	adc	r27, r25
    4e0a:	aa 0f       	add	r26, r26
    4e0c:	bb 1f       	adc	r27, r27
    4e0e:	af 5f       	subi	r26, 0xFF	; 255
    4e10:	ba 4e       	sbci	r27, 0xEA	; 234
    4e12:	0d 90       	ld	r0, X+
    4e14:	bc 91       	ld	r27, X
    4e16:	a0 2d       	mov	r26, r0
    4e18:	2c 91       	ld	r18, X
    4e1a:	e8 0f       	add	r30, r24
    4e1c:	f9 1f       	adc	r31, r25
    4e1e:	ee 0f       	add	r30, r30
    4e20:	ff 1f       	adc	r31, r31
    4e22:	ef 5f       	subi	r30, 0xFF	; 255
    4e24:	fa 4e       	sbci	r31, 0xEA	; 234
    4e26:	81 e0       	ldi	r24, 0x01	; 1
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	02 80       	ldd	r0, Z+2	; 0x02
    4e2c:	02 c0       	rjmp	.+4      	; 0x4e32 <_turn_off+0x8c>
    4e2e:	88 0f       	add	r24, r24
    4e30:	99 1f       	adc	r25, r25
    4e32:	0a 94       	dec	r0
    4e34:	e2 f7       	brpl	.-8      	; 0x4e2e <_turn_off+0x88>
    4e36:	80 95       	com	r24
    4e38:	82 23       	and	r24, r18
    4e3a:	8c 93       	st	X, r24
    4e3c:	08 95       	ret

00004e3e <_turn_on>:
    4e3e:	90 e0       	ldi	r25, 0x00	; 0
    4e40:	fc 01       	movw	r30, r24
    4e42:	ee 0f       	add	r30, r30
    4e44:	ff 1f       	adc	r31, r31
    4e46:	e8 0f       	add	r30, r24
    4e48:	f9 1f       	adc	r31, r25
    4e4a:	ee 0f       	add	r30, r30
    4e4c:	ff 1f       	adc	r31, r31
    4e4e:	ef 5f       	subi	r30, 0xFF	; 255
    4e50:	fa 4e       	sbci	r31, 0xEA	; 234
    4e52:	23 81       	ldd	r18, Z+3	; 0x03
    4e54:	21 11       	cpse	r18, r1
    4e56:	20 c0       	rjmp	.+64     	; 0x4e98 <_turn_on+0x5a>
    4e58:	9c 01       	movw	r18, r24
    4e5a:	22 0f       	add	r18, r18
    4e5c:	33 1f       	adc	r19, r19
    4e5e:	f9 01       	movw	r30, r18
    4e60:	e8 0f       	add	r30, r24
    4e62:	f9 1f       	adc	r31, r25
    4e64:	ee 0f       	add	r30, r30
    4e66:	ff 1f       	adc	r31, r31
    4e68:	ef 5f       	subi	r30, 0xFF	; 255
    4e6a:	fa 4e       	sbci	r31, 0xEA	; 234
    4e6c:	a0 81       	ld	r26, Z
    4e6e:	b1 81       	ldd	r27, Z+1	; 0x01
    4e70:	4c 91       	ld	r20, X
    4e72:	f9 01       	movw	r30, r18
    4e74:	e8 0f       	add	r30, r24
    4e76:	f9 1f       	adc	r31, r25
    4e78:	ee 0f       	add	r30, r30
    4e7a:	ff 1f       	adc	r31, r31
    4e7c:	ef 5f       	subi	r30, 0xFF	; 255
    4e7e:	fa 4e       	sbci	r31, 0xEA	; 234
    4e80:	81 e0       	ldi	r24, 0x01	; 1
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	02 80       	ldd	r0, Z+2	; 0x02
    4e86:	02 c0       	rjmp	.+4      	; 0x4e8c <_turn_on+0x4e>
    4e88:	88 0f       	add	r24, r24
    4e8a:	99 1f       	adc	r25, r25
    4e8c:	0a 94       	dec	r0
    4e8e:	e2 f7       	brpl	.-8      	; 0x4e88 <_turn_on+0x4a>
    4e90:	80 95       	com	r24
    4e92:	84 23       	and	r24, r20
    4e94:	8c 93       	st	X, r24
    4e96:	08 95       	ret
    4e98:	fc 01       	movw	r30, r24
    4e9a:	ee 0f       	add	r30, r30
    4e9c:	ff 1f       	adc	r31, r31
    4e9e:	df 01       	movw	r26, r30
    4ea0:	a8 0f       	add	r26, r24
    4ea2:	b9 1f       	adc	r27, r25
    4ea4:	aa 0f       	add	r26, r26
    4ea6:	bb 1f       	adc	r27, r27
    4ea8:	af 5f       	subi	r26, 0xFF	; 255
    4eaa:	ba 4e       	sbci	r27, 0xEA	; 234
    4eac:	0d 90       	ld	r0, X+
    4eae:	bc 91       	ld	r27, X
    4eb0:	a0 2d       	mov	r26, r0
    4eb2:	2c 91       	ld	r18, X
    4eb4:	e8 0f       	add	r30, r24
    4eb6:	f9 1f       	adc	r31, r25
    4eb8:	ee 0f       	add	r30, r30
    4eba:	ff 1f       	adc	r31, r31
    4ebc:	ef 5f       	subi	r30, 0xFF	; 255
    4ebe:	fa 4e       	sbci	r31, 0xEA	; 234
    4ec0:	81 e0       	ldi	r24, 0x01	; 1
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	02 80       	ldd	r0, Z+2	; 0x02
    4ec6:	02 c0       	rjmp	.+4      	; 0x4ecc <_turn_on+0x8e>
    4ec8:	88 0f       	add	r24, r24
    4eca:	99 1f       	adc	r25, r25
    4ecc:	0a 94       	dec	r0
    4ece:	e2 f7       	brpl	.-8      	; 0x4ec8 <_turn_on+0x8a>
    4ed0:	82 2b       	or	r24, r18
    4ed2:	8c 93       	st	X, r24
    4ed4:	08 95       	ret

00004ed6 <_hal_led_task>:
    4ed6:	cc 24       	eor	r12, r12
    4ed8:	c3 94       	inc	r12
    4eda:	d1 2c       	mov	r13, r1
    4edc:	68 94       	set
    4ede:	bb 24       	eor	r11, r11
    4ee0:	b2 f8       	bld	r11, 2
    4ee2:	c1 e0       	ldi	r28, 0x01	; 1
    4ee4:	d5 e1       	ldi	r29, 0x15	; 21
    4ee6:	10 e0       	ldi	r17, 0x00	; 0
    4ee8:	8c 81       	ldd	r24, Y+4	; 0x04
    4eea:	81 30       	cpi	r24, 0x01	; 1
    4eec:	81 f0       	breq	.+32     	; 0x4f0e <_hal_led_task+0x38>
    4eee:	18 f1       	brcs	.+70     	; 0x4f36 <_hal_led_task+0x60>
    4ef0:	82 30       	cpi	r24, 0x02	; 2
    4ef2:	61 f5       	brne	.+88     	; 0x4f4c <_hal_led_task+0x76>
    4ef4:	e8 81       	ld	r30, Y
    4ef6:	f9 81       	ldd	r31, Y+1	; 0x01
    4ef8:	20 81       	ld	r18, Z
    4efa:	c6 01       	movw	r24, r12
    4efc:	0a 80       	ldd	r0, Y+2	; 0x02
    4efe:	02 c0       	rjmp	.+4      	; 0x4f04 <_hal_led_task+0x2e>
    4f00:	88 0f       	add	r24, r24
    4f02:	99 1f       	adc	r25, r25
    4f04:	0a 94       	dec	r0
    4f06:	e2 f7       	brpl	.-8      	; 0x4f00 <_hal_led_task+0x2a>
    4f08:	82 27       	eor	r24, r18
    4f0a:	80 83       	st	Z, r24
    4f0c:	1f c0       	rjmp	.+62     	; 0x4f4c <_hal_led_task+0x76>
    4f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f10:	8f 5f       	subi	r24, 0xFF	; 255
    4f12:	8a 30       	cpi	r24, 0x0A	; 10
    4f14:	10 f4       	brcc	.+4      	; 0x4f1a <_hal_led_task+0x44>
    4f16:	8d 83       	std	Y+5, r24	; 0x05
    4f18:	19 c0       	rjmp	.+50     	; 0x4f4c <_hal_led_task+0x76>
    4f1a:	1d 82       	std	Y+5, r1	; 0x05
    4f1c:	e8 81       	ld	r30, Y
    4f1e:	f9 81       	ldd	r31, Y+1	; 0x01
    4f20:	20 81       	ld	r18, Z
    4f22:	c6 01       	movw	r24, r12
    4f24:	0a 80       	ldd	r0, Y+2	; 0x02
    4f26:	02 c0       	rjmp	.+4      	; 0x4f2c <_hal_led_task+0x56>
    4f28:	88 0f       	add	r24, r24
    4f2a:	99 1f       	adc	r25, r25
    4f2c:	0a 94       	dec	r0
    4f2e:	e2 f7       	brpl	.-8      	; 0x4f28 <_hal_led_task+0x52>
    4f30:	82 27       	eor	r24, r18
    4f32:	80 83       	st	Z, r24
    4f34:	0b c0       	rjmp	.+22     	; 0x4f4c <_hal_led_task+0x76>
    4f36:	0d 81       	ldd	r16, Y+5	; 0x05
    4f38:	00 23       	and	r16, r16
    4f3a:	29 f0       	breq	.+10     	; 0x4f46 <_hal_led_task+0x70>
    4f3c:	81 2f       	mov	r24, r17
    4f3e:	7f df       	rcall	.-258    	; 0x4e3e <_turn_on>
    4f40:	01 50       	subi	r16, 0x01	; 1
    4f42:	0d 83       	std	Y+5, r16	; 0x05
    4f44:	03 c0       	rjmp	.+6      	; 0x4f4c <_hal_led_task+0x76>
    4f46:	bc 82       	std	Y+4, r11	; 0x04
    4f48:	81 2f       	mov	r24, r17
    4f4a:	2d df       	rcall	.-422    	; 0x4da6 <_turn_off>
    4f4c:	1f 5f       	subi	r17, 0xFF	; 255
    4f4e:	26 96       	adiw	r28, 0x06	; 6
    4f50:	14 30       	cpi	r17, 0x04	; 4
    4f52:	51 f6       	brne	.-108    	; 0x4ee8 <_hal_led_task+0x12>
    4f54:	65 e0       	ldi	r22, 0x05	; 5
    4f56:	70 e0       	ldi	r23, 0x00	; 0
    4f58:	80 e0       	ldi	r24, 0x00	; 0
    4f5a:	90 e0       	ldi	r25, 0x00	; 0
    4f5c:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vTaskDelay>
    4f60:	c0 cf       	rjmp	.-128    	; 0x4ee2 <_hal_led_task+0xc>

00004f62 <status_leds_initialise>:
    4f62:	ef 92       	push	r14
    4f64:	ff 92       	push	r15
    4f66:	0f 93       	push	r16
    4f68:	1f 93       	push	r17
    4f6a:	cf 93       	push	r28
    4f6c:	df 93       	push	r29
    4f6e:	08 2f       	mov	r16, r24
    4f70:	80 e4       	ldi	r24, 0x40	; 64
    4f72:	87 b9       	out	0x07, r24	; 7
    4f74:	c1 e0       	ldi	r28, 0x01	; 1
    4f76:	d5 e1       	ldi	r29, 0x15	; 21
    4f78:	0f 2e       	mov	r0, r31
    4f7a:	f8 e2       	ldi	r31, 0x28	; 40
    4f7c:	ef 2e       	mov	r14, r31
    4f7e:	f1 2c       	mov	r15, r1
    4f80:	f0 2d       	mov	r31, r0
    4f82:	f9 82       	std	Y+1, r15	; 0x01
    4f84:	e8 82       	st	Y, r14
    4f86:	86 e0       	ldi	r24, 0x06	; 6
    4f88:	8a 83       	std	Y+2, r24	; 0x02
    4f8a:	1b 82       	std	Y+3, r1	; 0x03
    4f8c:	14 e0       	ldi	r17, 0x04	; 4
    4f8e:	1c 83       	std	Y+4, r17	; 0x04
    4f90:	80 e0       	ldi	r24, 0x00	; 0
    4f92:	09 df       	rcall	.-494    	; 0x4da6 <_turn_off>
    4f94:	80 e8       	ldi	r24, 0x80	; 128
    4f96:	87 b9       	out	0x07, r24	; 7
    4f98:	ff 82       	std	Y+7, r15	; 0x07
    4f9a:	ee 82       	std	Y+6, r14	; 0x06
    4f9c:	87 e0       	ldi	r24, 0x07	; 7
    4f9e:	88 87       	std	Y+8, r24	; 0x08
    4fa0:	19 86       	std	Y+9, r1	; 0x09
    4fa2:	1a 87       	std	Y+10, r17	; 0x0a
    4fa4:	81 e0       	ldi	r24, 0x01	; 1
    4fa6:	ff de       	rcall	.-514    	; 0x4da6 <_turn_off>
    4fa8:	80 e2       	ldi	r24, 0x20	; 32
    4faa:	83 bb       	out	0x13, r24	; 19
    4fac:	84 e3       	ldi	r24, 0x34	; 52
    4fae:	90 e0       	ldi	r25, 0x00	; 0
    4fb0:	9d 87       	std	Y+13, r25	; 0x0d
    4fb2:	8c 87       	std	Y+12, r24	; 0x0c
    4fb4:	85 e0       	ldi	r24, 0x05	; 5
    4fb6:	8e 87       	std	Y+14, r24	; 0x0e
    4fb8:	1f 86       	std	Y+15, r1	; 0x0f
    4fba:	18 8b       	std	Y+16, r17	; 0x10
    4fbc:	82 e0       	ldi	r24, 0x02	; 2
    4fbe:	f3 de       	rcall	.-538    	; 0x4da6 <_turn_off>
    4fc0:	80 e1       	ldi	r24, 0x10	; 16
    4fc2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    4fc6:	82 e0       	ldi	r24, 0x02	; 2
    4fc8:	91 e0       	ldi	r25, 0x01	; 1
    4fca:	9b 8b       	std	Y+19, r25	; 0x13
    4fcc:	8a 8b       	std	Y+18, r24	; 0x12
    4fce:	1c 8b       	std	Y+20, r17	; 0x14
    4fd0:	1d 8a       	std	Y+21, r1	; 0x15
    4fd2:	1e 8b       	std	Y+22, r17	; 0x16
    4fd4:	83 e0       	ldi	r24, 0x03	; 3
    4fd6:	e7 de       	rcall	.-562    	; 0x4da6 <_turn_off>
    4fd8:	e1 2c       	mov	r14, r1
    4fda:	f1 2c       	mov	r15, r1
    4fdc:	20 e0       	ldi	r18, 0x00	; 0
    4fde:	30 e0       	ldi	r19, 0x00	; 0
    4fe0:	40 ec       	ldi	r20, 0xC0	; 192
    4fe2:	50 e0       	ldi	r21, 0x00	; 0
    4fe4:	6e e0       	ldi	r22, 0x0E	; 14
    4fe6:	79 e0       	ldi	r23, 0x09	; 9
    4fe8:	8b e6       	ldi	r24, 0x6B	; 107
    4fea:	97 e2       	ldi	r25, 0x27	; 39
    4fec:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <xTaskCreate>
    4ff0:	df 91       	pop	r29
    4ff2:	cf 91       	pop	r28
    4ff4:	1f 91       	pop	r17
    4ff6:	0f 91       	pop	r16
    4ff8:	ff 90       	pop	r15
    4ffa:	ef 90       	pop	r14
    4ffc:	08 95       	ret

00004ffe <status_leds_slowBlink>:
    4ffe:	cf 93       	push	r28
    5000:	df 93       	push	r29
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	fc 01       	movw	r30, r24
    5006:	ee 0f       	add	r30, r30
    5008:	ff 1f       	adc	r31, r31
    500a:	df 01       	movw	r26, r30
    500c:	a8 0f       	add	r26, r24
    500e:	b9 1f       	adc	r27, r25
    5010:	aa 0f       	add	r26, r26
    5012:	bb 1f       	adc	r27, r27
    5014:	af 5f       	subi	r26, 0xFF	; 255
    5016:	ba 4e       	sbci	r27, 0xEA	; 234
    5018:	cd 91       	ld	r28, X+
    501a:	dc 91       	ld	r29, X
    501c:	11 97       	sbiw	r26, 0x01	; 1
    501e:	48 81       	ld	r20, Y
    5020:	21 e0       	ldi	r18, 0x01	; 1
    5022:	30 e0       	ldi	r19, 0x00	; 0
    5024:	12 96       	adiw	r26, 0x02	; 2
    5026:	0c 90       	ld	r0, X
    5028:	12 97       	sbiw	r26, 0x02	; 2
    502a:	02 c0       	rjmp	.+4      	; 0x5030 <status_leds_slowBlink+0x32>
    502c:	22 0f       	add	r18, r18
    502e:	33 1f       	adc	r19, r19
    5030:	0a 94       	dec	r0
    5032:	e2 f7       	brpl	.-8      	; 0x502c <status_leds_slowBlink+0x2e>
    5034:	24 27       	eor	r18, r20
    5036:	28 83       	st	Y, r18
    5038:	fd 01       	movw	r30, r26
    503a:	81 e0       	ldi	r24, 0x01	; 1
    503c:	84 83       	std	Z+4, r24	; 0x04
    503e:	df 91       	pop	r29
    5040:	cf 91       	pop	r28
    5042:	08 95       	ret

00005044 <_callBack>:
    5044:	e0 91 21 15 	lds	r30, 0x1521	; 0x801521 <_callBackFunction>
    5048:	f0 91 22 15 	lds	r31, 0x1522	; 0x801522 <_callBackFunction+0x1>
    504c:	30 97       	sbiw	r30, 0x00	; 0
    504e:	09 f0       	breq	.+2      	; 0x5052 <_callBack+0xe>
    5050:	19 95       	eicall
    5052:	08 95       	ret

00005054 <_tsl2591TwiCallback>:
    5054:	64 50       	subi	r22, 0x04	; 4
    5056:	62 30       	cpi	r22, 0x02	; 2
    5058:	08 f0       	brcs	.+2      	; 0x505c <_tsl2591TwiCallback+0x8>
    505a:	3b c0       	rjmp	.+118    	; 0x50d2 <_tsl2591TwiCallback+0x7e>
    505c:	20 91 20 15 	lds	r18, 0x1520	; 0x801520 <_nextState>
    5060:	22 30       	cpi	r18, 0x02	; 2
    5062:	79 f0       	breq	.+30     	; 0x5082 <_tsl2591TwiCallback+0x2e>
    5064:	18 f4       	brcc	.+6      	; 0x506c <_tsl2591TwiCallback+0x18>
    5066:	21 30       	cpi	r18, 0x01	; 1
    5068:	31 f0       	breq	.+12     	; 0x5076 <_tsl2591TwiCallback+0x22>
    506a:	30 c0       	rjmp	.+96     	; 0x50cc <_tsl2591TwiCallback+0x78>
    506c:	23 30       	cpi	r18, 0x03	; 3
    506e:	81 f0       	breq	.+32     	; 0x5090 <_tsl2591TwiCallback+0x3c>
    5070:	24 30       	cpi	r18, 0x04	; 4
    5072:	a1 f0       	breq	.+40     	; 0x509c <_tsl2591TwiCallback+0x48>
    5074:	2b c0       	rjmp	.+86     	; 0x50cc <_tsl2591TwiCallback+0x78>
    5076:	22 e0       	ldi	r18, 0x02	; 2
    5078:	20 93 20 15 	sts	0x1520, r18	; 0x801520 <_nextState>
    507c:	61 e0       	ldi	r22, 0x01	; 1
    507e:	0a c2       	rjmp	.+1044   	; 0x5494 <twiReceive>
    5080:	08 95       	ret
    5082:	fa 01       	movw	r30, r20
    5084:	80 81       	ld	r24, Z
    5086:	80 93 1d 15 	sts	0x151D, r24	; 0x80151d <_deviceId>
    508a:	82 e0       	ldi	r24, 0x02	; 2
    508c:	db cf       	rjmp	.-74     	; 0x5044 <_callBack>
    508e:	08 95       	ret
    5090:	24 e0       	ldi	r18, 0x04	; 4
    5092:	20 93 20 15 	sts	0x1520, r18	; 0x801520 <_nextState>
    5096:	64 e0       	ldi	r22, 0x04	; 4
    5098:	fd c1       	rjmp	.+1018   	; 0x5494 <twiReceive>
    509a:	08 95       	ret
    509c:	fa 01       	movw	r30, r20
    509e:	81 81       	ldd	r24, Z+1	; 0x01
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	98 2f       	mov	r25, r24
    50a4:	88 27       	eor	r24, r24
    50a6:	20 81       	ld	r18, Z
    50a8:	82 2b       	or	r24, r18
    50aa:	90 93 1c 15 	sts	0x151C, r25	; 0x80151c <_fullSpectrumRaw+0x1>
    50ae:	80 93 1b 15 	sts	0x151B, r24	; 0x80151b <_fullSpectrumRaw>
    50b2:	83 81       	ldd	r24, Z+3	; 0x03
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	98 2f       	mov	r25, r24
    50b8:	88 27       	eor	r24, r24
    50ba:	22 81       	ldd	r18, Z+2	; 0x02
    50bc:	82 2b       	or	r24, r18
    50be:	90 93 1a 15 	sts	0x151A, r25	; 0x80151a <_infraredRaw+0x1>
    50c2:	80 93 19 15 	sts	0x1519, r24	; 0x801519 <_infraredRaw>
    50c6:	81 e0       	ldi	r24, 0x01	; 1
    50c8:	bd cf       	rjmp	.-134    	; 0x5044 <_callBack>
    50ca:	08 95       	ret
    50cc:	80 e0       	ldi	r24, 0x00	; 0
    50ce:	ba cf       	rjmp	.-140    	; 0x5044 <_callBack>
    50d0:	08 95       	ret
    50d2:	10 92 20 15 	sts	0x1520, r1	; 0x801520 <_nextState>
    50d6:	86 e0       	ldi	r24, 0x06	; 6
    50d8:	b5 cf       	rjmp	.-150    	; 0x5044 <_callBack>
    50da:	08 95       	ret

000050dc <_twiTransmit>:
    50dc:	20 91 23 15 	lds	r18, 0x1523	; 0x801523 <_twiHandler>
    50e0:	30 91 24 15 	lds	r19, 0x1524	; 0x801524 <_twiHandler+0x1>
    50e4:	21 15       	cp	r18, r1
    50e6:	31 05       	cpc	r19, r1
    50e8:	41 f0       	breq	.+16     	; 0x50fa <_twiTransmit+0x1e>
    50ea:	46 2f       	mov	r20, r22
    50ec:	bc 01       	movw	r22, r24
    50ee:	c9 01       	movw	r24, r18
    50f0:	85 d1       	rcall	.+778    	; 0x53fc <twiTransmit>
    50f2:	82 30       	cpi	r24, 0x02	; 2
    50f4:	21 f0       	breq	.+8      	; 0x50fe <_twiTransmit+0x22>
    50f6:	80 e0       	ldi	r24, 0x00	; 0
    50f8:	08 95       	ret
    50fa:	87 e0       	ldi	r24, 0x07	; 7
    50fc:	08 95       	ret
    50fe:	85 e0       	ldi	r24, 0x05	; 5
    5100:	08 95       	ret

00005102 <tsl2591_initialise>:
    5102:	0f 93       	push	r16
    5104:	1f 93       	push	r17
    5106:	90 93 22 15 	sts	0x1522, r25	; 0x801522 <_callBackFunction+0x1>
    510a:	80 93 21 15 	sts	0x1521, r24	; 0x801521 <_callBackFunction>
    510e:	0a e2       	ldi	r16, 0x2A	; 42
    5110:	18 e2       	ldi	r17, 0x28	; 40
    5112:	20 e0       	ldi	r18, 0x00	; 0
    5114:	34 e2       	ldi	r19, 0x24	; 36
    5116:	44 ef       	ldi	r20, 0xF4	; 244
    5118:	50 e0       	ldi	r21, 0x00	; 0
    511a:	60 e0       	ldi	r22, 0x00	; 0
    511c:	89 e2       	ldi	r24, 0x29	; 41
    511e:	1d d1       	rcall	.+570    	; 0x535a <twiCreate>
    5120:	90 93 24 15 	sts	0x1524, r25	; 0x801524 <_twiHandler+0x1>
    5124:	80 93 23 15 	sts	0x1523, r24	; 0x801523 <_twiHandler>
    5128:	89 2b       	or	r24, r25
    512a:	11 f0       	breq	.+4      	; 0x5130 <tsl2591_initialise+0x2e>
    512c:	80 e0       	ldi	r24, 0x00	; 0
    512e:	01 c0       	rjmp	.+2      	; 0x5132 <tsl2591_initialise+0x30>
    5130:	88 e0       	ldi	r24, 0x08	; 8
    5132:	1f 91       	pop	r17
    5134:	0f 91       	pop	r16
    5136:	08 95       	ret

00005138 <tsl2591_enable>:
    5138:	cf 93       	push	r28
    513a:	df 93       	push	r29
    513c:	1f 92       	push	r1
    513e:	1f 92       	push	r1
    5140:	cd b7       	in	r28, 0x3d	; 61
    5142:	de b7       	in	r29, 0x3e	; 62
    5144:	80 ea       	ldi	r24, 0xA0	; 160
    5146:	89 83       	std	Y+1, r24	; 0x01
    5148:	83 e0       	ldi	r24, 0x03	; 3
    514a:	8a 83       	std	Y+2, r24	; 0x02
    514c:	10 92 20 15 	sts	0x1520, r1	; 0x801520 <_nextState>
    5150:	62 e0       	ldi	r22, 0x02	; 2
    5152:	ce 01       	movw	r24, r28
    5154:	01 96       	adiw	r24, 0x01	; 1
    5156:	c2 df       	rcall	.-124    	; 0x50dc <_twiTransmit>
    5158:	0f 90       	pop	r0
    515a:	0f 90       	pop	r0
    515c:	df 91       	pop	r29
    515e:	cf 91       	pop	r28
    5160:	08 95       	ret

00005162 <tsl2591_fetchData>:
    5162:	cf 93       	push	r28
    5164:	df 93       	push	r29
    5166:	1f 92       	push	r1
    5168:	cd b7       	in	r28, 0x3d	; 61
    516a:	de b7       	in	r29, 0x3e	; 62
    516c:	84 eb       	ldi	r24, 0xB4	; 180
    516e:	89 83       	std	Y+1, r24	; 0x01
    5170:	83 e0       	ldi	r24, 0x03	; 3
    5172:	80 93 20 15 	sts	0x1520, r24	; 0x801520 <_nextState>
    5176:	61 e0       	ldi	r22, 0x01	; 1
    5178:	ce 01       	movw	r24, r28
    517a:	01 96       	adiw	r24, 0x01	; 1
    517c:	af df       	rcall	.-162    	; 0x50dc <_twiTransmit>
    517e:	0f 90       	pop	r0
    5180:	df 91       	pop	r29
    5182:	cf 91       	pop	r28
    5184:	08 95       	ret

00005186 <tsl2591_getLux>:
    5186:	2f 92       	push	r2
    5188:	3f 92       	push	r3
    518a:	4f 92       	push	r4
    518c:	5f 92       	push	r5
    518e:	6f 92       	push	r6
    5190:	7f 92       	push	r7
    5192:	8f 92       	push	r8
    5194:	9f 92       	push	r9
    5196:	af 92       	push	r10
    5198:	bf 92       	push	r11
    519a:	cf 92       	push	r12
    519c:	df 92       	push	r13
    519e:	ef 92       	push	r14
    51a0:	ff 92       	push	r15
    51a2:	0f 93       	push	r16
    51a4:	1f 93       	push	r17
    51a6:	cf 93       	push	r28
    51a8:	df 93       	push	r29
    51aa:	c0 91 19 15 	lds	r28, 0x1519	; 0x801519 <_infraredRaw>
    51ae:	d0 91 1a 15 	lds	r29, 0x151A	; 0x80151a <_infraredRaw+0x1>
    51b2:	cf 3f       	cpi	r28, 0xFF	; 255
    51b4:	2f ef       	ldi	r18, 0xFF	; 255
    51b6:	d2 07       	cpc	r29, r18
    51b8:	41 f0       	breq	.+16     	; 0x51ca <tsl2591_getLux+0x44>
    51ba:	60 91 1b 15 	lds	r22, 0x151B	; 0x80151b <_fullSpectrumRaw>
    51be:	70 91 1c 15 	lds	r23, 0x151C	; 0x80151c <_fullSpectrumRaw+0x1>
    51c2:	6f 3f       	cpi	r22, 0xFF	; 255
    51c4:	ef ef       	ldi	r30, 0xFF	; 255
    51c6:	7e 07       	cpc	r23, r30
    51c8:	59 f4       	brne	.+22     	; 0x51e0 <tsl2591_getLux+0x5a>
    51ca:	4f ef       	ldi	r20, 0xFF	; 255
    51cc:	5f ef       	ldi	r21, 0xFF	; 255
    51ce:	6f e7       	ldi	r22, 0x7F	; 127
    51d0:	7f e7       	ldi	r23, 0x7F	; 127
    51d2:	fc 01       	movw	r30, r24
    51d4:	40 83       	st	Z, r20
    51d6:	51 83       	std	Z+1, r21	; 0x01
    51d8:	62 83       	std	Z+2, r22	; 0x02
    51da:	73 83       	std	Z+3, r23	; 0x03
    51dc:	83 e0       	ldi	r24, 0x03	; 3
    51de:	99 c0       	rjmp	.+306    	; 0x5312 <tsl2591_getLux+0x18c>
    51e0:	1c 01       	movw	r2, r24
    51e2:	80 e0       	ldi	r24, 0x00	; 0
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	3b d3       	rcall	.+1654   	; 0x585e <__floatunsisf>
    51e8:	2b 01       	movw	r4, r22
    51ea:	3c 01       	movw	r6, r24
    51ec:	be 01       	movw	r22, r28
    51ee:	80 e0       	ldi	r24, 0x00	; 0
    51f0:	90 e0       	ldi	r25, 0x00	; 0
    51f2:	35 d3       	rcall	.+1642   	; 0x585e <__floatunsisf>
    51f4:	4b 01       	movw	r8, r22
    51f6:	5c 01       	movw	r10, r24
    51f8:	80 91 1e 15 	lds	r24, 0x151E	; 0x80151e <_currentIntegrationTime>
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	01 96       	adiw	r24, 0x01	; 1
    5200:	24 e6       	ldi	r18, 0x64	; 100
    5202:	28 9f       	mul	r18, r24
    5204:	b0 01       	movw	r22, r0
    5206:	29 9f       	mul	r18, r25
    5208:	70 0d       	add	r23, r0
    520a:	11 24       	eor	r1, r1
    520c:	80 91 1f 15 	lds	r24, 0x151F	; 0x80151f <_currentGain>
    5210:	80 32       	cpi	r24, 0x20	; 32
    5212:	69 f0       	breq	.+26     	; 0x522e <tsl2591_getLux+0xa8>
    5214:	80 33       	cpi	r24, 0x30	; 48
    5216:	a1 f0       	breq	.+40     	; 0x5240 <tsl2591_getLux+0xba>
    5218:	80 31       	cpi	r24, 0x10	; 16
    521a:	e1 f4       	brne	.+56     	; 0x5254 <tsl2591_getLux+0xce>
    521c:	0f 2e       	mov	r0, r31
    521e:	c1 2c       	mov	r12, r1
    5220:	d1 2c       	mov	r13, r1
    5222:	f8 ec       	ldi	r31, 0xC8	; 200
    5224:	ef 2e       	mov	r14, r31
    5226:	f1 e4       	ldi	r31, 0x41	; 65
    5228:	ff 2e       	mov	r15, r31
    522a:	f0 2d       	mov	r31, r0
    522c:	1b c0       	rjmp	.+54     	; 0x5264 <tsl2591_getLux+0xde>
    522e:	0f 2e       	mov	r0, r31
    5230:	c1 2c       	mov	r12, r1
    5232:	d1 2c       	mov	r13, r1
    5234:	f6 ed       	ldi	r31, 0xD6	; 214
    5236:	ef 2e       	mov	r14, r31
    5238:	f3 e4       	ldi	r31, 0x43	; 67
    523a:	ff 2e       	mov	r15, r31
    523c:	f0 2d       	mov	r31, r0
    523e:	12 c0       	rjmp	.+36     	; 0x5264 <tsl2591_getLux+0xde>
    5240:	0f 2e       	mov	r0, r31
    5242:	c1 2c       	mov	r12, r1
    5244:	f0 e5       	ldi	r31, 0x50	; 80
    5246:	df 2e       	mov	r13, r31
    5248:	fa e1       	ldi	r31, 0x1A	; 26
    524a:	ef 2e       	mov	r14, r31
    524c:	f6 e4       	ldi	r31, 0x46	; 70
    524e:	ff 2e       	mov	r15, r31
    5250:	f0 2d       	mov	r31, r0
    5252:	08 c0       	rjmp	.+16     	; 0x5264 <tsl2591_getLux+0xde>
    5254:	0f 2e       	mov	r0, r31
    5256:	c1 2c       	mov	r12, r1
    5258:	d1 2c       	mov	r13, r1
    525a:	f0 e8       	ldi	r31, 0x80	; 128
    525c:	ef 2e       	mov	r14, r31
    525e:	ff e3       	ldi	r31, 0x3F	; 63
    5260:	ff 2e       	mov	r15, r31
    5262:	f0 2d       	mov	r31, r0
    5264:	07 2e       	mov	r0, r23
    5266:	00 0c       	add	r0, r0
    5268:	88 0b       	sbc	r24, r24
    526a:	99 0b       	sbc	r25, r25
    526c:	fa d2       	rcall	.+1524   	; 0x5862 <__floatsisf>
    526e:	a7 01       	movw	r20, r14
    5270:	96 01       	movw	r18, r12
    5272:	5e d3       	rcall	.+1724   	; 0x5930 <__mulsf3>
    5274:	20 e0       	ldi	r18, 0x00	; 0
    5276:	30 e0       	ldi	r19, 0x00	; 0
    5278:	4c ec       	ldi	r20, 0xCC	; 204
    527a:	53 e4       	ldi	r21, 0x43	; 67
    527c:	7e d2       	rcall	.+1276   	; 0x577a <__divsf3>
    527e:	6b 01       	movw	r12, r22
    5280:	7c 01       	movw	r14, r24
    5282:	25 e8       	ldi	r18, 0x85	; 133
    5284:	3b ee       	ldi	r19, 0xEB	; 235
    5286:	41 ed       	ldi	r20, 0xD1	; 209
    5288:	5f e3       	ldi	r21, 0x3F	; 63
    528a:	c5 01       	movw	r24, r10
    528c:	b4 01       	movw	r22, r8
    528e:	50 d3       	rcall	.+1696   	; 0x5930 <__mulsf3>
    5290:	9b 01       	movw	r18, r22
    5292:	ac 01       	movw	r20, r24
    5294:	c3 01       	movw	r24, r6
    5296:	b2 01       	movw	r22, r4
    5298:	09 d2       	rcall	.+1042   	; 0x56ac <__subsf3>
    529a:	a7 01       	movw	r20, r14
    529c:	96 01       	movw	r18, r12
    529e:	6d d2       	rcall	.+1242   	; 0x577a <__divsf3>
    52a0:	16 2f       	mov	r17, r22
    52a2:	d7 2f       	mov	r29, r23
    52a4:	c8 2f       	mov	r28, r24
    52a6:	09 2f       	mov	r16, r25
    52a8:	2d e3       	ldi	r18, 0x3D	; 61
    52aa:	3a e0       	ldi	r19, 0x0A	; 10
    52ac:	47 e1       	ldi	r20, 0x17	; 23
    52ae:	5f e3       	ldi	r21, 0x3F	; 63
    52b0:	c3 01       	movw	r24, r6
    52b2:	b2 01       	movw	r22, r4
    52b4:	3d d3       	rcall	.+1658   	; 0x5930 <__mulsf3>
    52b6:	2b 01       	movw	r4, r22
    52b8:	3c 01       	movw	r6, r24
    52ba:	26 ef       	ldi	r18, 0xF6	; 246
    52bc:	38 e2       	ldi	r19, 0x28	; 40
    52be:	4c e5       	ldi	r20, 0x5C	; 92
    52c0:	5f e3       	ldi	r21, 0x3F	; 63
    52c2:	c5 01       	movw	r24, r10
    52c4:	b4 01       	movw	r22, r8
    52c6:	34 d3       	rcall	.+1640   	; 0x5930 <__mulsf3>
    52c8:	9b 01       	movw	r18, r22
    52ca:	ac 01       	movw	r20, r24
    52cc:	c3 01       	movw	r24, r6
    52ce:	b2 01       	movw	r22, r4
    52d0:	ed d1       	rcall	.+986    	; 0x56ac <__subsf3>
    52d2:	a7 01       	movw	r20, r14
    52d4:	96 01       	movw	r18, r12
    52d6:	51 d2       	rcall	.+1186   	; 0x577a <__divsf3>
    52d8:	c6 2e       	mov	r12, r22
    52da:	d7 2e       	mov	r13, r23
    52dc:	e8 2e       	mov	r14, r24
    52de:	f9 2e       	mov	r15, r25
    52e0:	26 2f       	mov	r18, r22
    52e2:	37 2f       	mov	r19, r23
    52e4:	48 2f       	mov	r20, r24
    52e6:	59 2f       	mov	r21, r25
    52e8:	61 2f       	mov	r22, r17
    52ea:	7d 2f       	mov	r23, r29
    52ec:	8c 2f       	mov	r24, r28
    52ee:	90 2f       	mov	r25, r16
    52f0:	1b d3       	rcall	.+1590   	; 0x5928 <__gesf2>
    52f2:	18 16       	cp	r1, r24
    52f4:	24 f0       	brlt	.+8      	; 0x52fe <tsl2591_getLux+0x178>
    52f6:	1c 2d       	mov	r17, r12
    52f8:	dd 2d       	mov	r29, r13
    52fa:	ce 2d       	mov	r28, r14
    52fc:	0f 2d       	mov	r16, r15
    52fe:	41 2f       	mov	r20, r17
    5300:	5d 2f       	mov	r21, r29
    5302:	6c 2f       	mov	r22, r28
    5304:	70 2f       	mov	r23, r16
    5306:	f1 01       	movw	r30, r2
    5308:	40 83       	st	Z, r20
    530a:	51 83       	std	Z+1, r21	; 0x01
    530c:	62 83       	std	Z+2, r22	; 0x02
    530e:	73 83       	std	Z+3, r23	; 0x03
    5310:	80 e0       	ldi	r24, 0x00	; 0
    5312:	df 91       	pop	r29
    5314:	cf 91       	pop	r28
    5316:	1f 91       	pop	r17
    5318:	0f 91       	pop	r16
    531a:	ff 90       	pop	r15
    531c:	ef 90       	pop	r14
    531e:	df 90       	pop	r13
    5320:	cf 90       	pop	r12
    5322:	bf 90       	pop	r11
    5324:	af 90       	pop	r10
    5326:	9f 90       	pop	r9
    5328:	8f 90       	pop	r8
    532a:	7f 90       	pop	r7
    532c:	6f 90       	pop	r6
    532e:	5f 90       	pop	r5
    5330:	4f 90       	pop	r4
    5332:	3f 90       	pop	r3
    5334:	2f 90       	pop	r2
    5336:	08 95       	ret

00005338 <_initTwiInterface>:
    5338:	80 91 33 15 	lds	r24, 0x1533	; 0x801533 <_twiIsInitiated>
    533c:	81 11       	cpse	r24, r1
    533e:	0c c0       	rjmp	.+24     	; 0x5358 <_initTwiInterface+0x20>
    5340:	8c e0       	ldi	r24, 0x0C	; 12
    5342:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5346:	8f ef       	ldi	r24, 0xFF	; 255
    5348:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    534c:	84 e0       	ldi	r24, 0x04	; 4
    534e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5352:	81 e0       	ldi	r24, 0x01	; 1
    5354:	80 93 33 15 	sts	0x1533, r24	; 0x801533 <_twiIsInitiated>
    5358:	08 95       	ret

0000535a <twiCreate>:
    535a:	af 92       	push	r10
    535c:	bf 92       	push	r11
    535e:	cf 92       	push	r12
    5360:	df 92       	push	r13
    5362:	ef 92       	push	r14
    5364:	ff 92       	push	r15
    5366:	0f 93       	push	r16
    5368:	1f 93       	push	r17
    536a:	cf 93       	push	r28
    536c:	df 93       	push	r29
    536e:	a8 2e       	mov	r10, r24
    5370:	b6 2e       	mov	r11, r22
    5372:	69 01       	movw	r12, r18
    5374:	7a 01       	movw	r14, r20
    5376:	84 e0       	ldi	r24, 0x04	; 4
    5378:	90 e0       	ldi	r25, 0x00	; 0
    537a:	8e d3       	rcall	.+1820   	; 0x5a98 <malloc>
    537c:	ec 01       	movw	r28, r24
    537e:	89 2b       	or	r24, r25
    5380:	61 f1       	breq	.+88     	; 0x53da <twiCreate+0x80>
    5382:	a8 82       	st	Y, r10
    5384:	81 e0       	ldi	r24, 0x01	; 1
    5386:	b8 12       	cpse	r11, r24
    5388:	12 c0       	rjmp	.+36     	; 0x53ae <twiCreate+0x54>
    538a:	c7 01       	movw	r24, r14
    538c:	b6 01       	movw	r22, r12
    538e:	20 ea       	ldi	r18, 0xA0	; 160
    5390:	36 e8       	ldi	r19, 0x86	; 134
    5392:	41 e0       	ldi	r20, 0x01	; 1
    5394:	50 e0       	ldi	r21, 0x00	; 0
    5396:	56 d3       	rcall	.+1708   	; 0x5a44 <__udivmodsi4>
    5398:	da 01       	movw	r26, r20
    539a:	c9 01       	movw	r24, r18
    539c:	40 97       	sbiw	r24, 0x10	; 16
    539e:	a1 09       	sbc	r26, r1
    53a0:	b1 09       	sbc	r27, r1
    53a2:	b6 95       	lsr	r27
    53a4:	a7 95       	ror	r26
    53a6:	97 95       	ror	r25
    53a8:	87 95       	ror	r24
    53aa:	89 83       	std	Y+1, r24	; 0x01
    53ac:	11 c0       	rjmp	.+34     	; 0x53d0 <twiCreate+0x76>
    53ae:	c7 01       	movw	r24, r14
    53b0:	b6 01       	movw	r22, r12
    53b2:	20 e8       	ldi	r18, 0x80	; 128
    53b4:	3a e1       	ldi	r19, 0x1A	; 26
    53b6:	46 e0       	ldi	r20, 0x06	; 6
    53b8:	50 e0       	ldi	r21, 0x00	; 0
    53ba:	44 d3       	rcall	.+1672   	; 0x5a44 <__udivmodsi4>
    53bc:	da 01       	movw	r26, r20
    53be:	c9 01       	movw	r24, r18
    53c0:	40 97       	sbiw	r24, 0x10	; 16
    53c2:	a1 09       	sbc	r26, r1
    53c4:	b1 09       	sbc	r27, r1
    53c6:	b6 95       	lsr	r27
    53c8:	a7 95       	ror	r26
    53ca:	97 95       	ror	r25
    53cc:	87 95       	ror	r24
    53ce:	89 83       	std	Y+1, r24	; 0x01
    53d0:	1b 83       	std	Y+3, r17	; 0x03
    53d2:	0a 83       	std	Y+2, r16	; 0x02
    53d4:	8c 2f       	mov	r24, r28
    53d6:	9d 2f       	mov	r25, r29
    53d8:	02 c0       	rjmp	.+4      	; 0x53de <twiCreate+0x84>
    53da:	80 e0       	ldi	r24, 0x00	; 0
    53dc:	90 e0       	ldi	r25, 0x00	; 0
    53de:	df 91       	pop	r29
    53e0:	cf 91       	pop	r28
    53e2:	1f 91       	pop	r17
    53e4:	0f 91       	pop	r16
    53e6:	ff 90       	pop	r15
    53e8:	ef 90       	pop	r14
    53ea:	df 90       	pop	r13
    53ec:	cf 90       	pop	r12
    53ee:	bf 90       	pop	r11
    53f0:	af 90       	pop	r10
    53f2:	08 95       	ret

000053f4 <twiIsBusy>:
    53f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53f8:	81 70       	andi	r24, 0x01	; 1
    53fa:	08 95       	ret

000053fc <twiTransmit>:
    53fc:	ff 92       	push	r15
    53fe:	0f 93       	push	r16
    5400:	1f 93       	push	r17
    5402:	cf 93       	push	r28
    5404:	df 93       	push	r29
    5406:	00 97       	sbiw	r24, 0x00	; 0
    5408:	d1 f1       	breq	.+116    	; 0x547e <twiTransmit+0x82>
    540a:	4a 30       	cpi	r20, 0x0A	; 10
    540c:	d0 f5       	brcc	.+116    	; 0x5482 <twiTransmit+0x86>
    540e:	f4 2e       	mov	r15, r20
    5410:	8b 01       	movw	r16, r22
    5412:	ec 01       	movw	r28, r24
    5414:	ef df       	rcall	.-34     	; 0x53f4 <twiIsBusy>
    5416:	81 11       	cpse	r24, r1
    5418:	36 c0       	rjmp	.+108    	; 0x5486 <twiTransmit+0x8a>
    541a:	80 91 26 15 	lds	r24, 0x1526	; 0x801526 <_twiCurrentHandler>
    541e:	90 91 27 15 	lds	r25, 0x1527	; 0x801527 <_twiCurrentHandler+0x1>
    5422:	c8 17       	cp	r28, r24
    5424:	d9 07       	cpc	r29, r25
    5426:	41 f0       	breq	.+16     	; 0x5438 <twiTransmit+0x3c>
    5428:	87 df       	rcall	.-242    	; 0x5338 <_initTwiInterface>
    542a:	89 81       	ldd	r24, Y+1	; 0x01
    542c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5430:	d0 93 27 15 	sts	0x1527, r29	; 0x801527 <_twiCurrentHandler+0x1>
    5434:	c0 93 26 15 	sts	0x1526, r28	; 0x801526 <_twiCurrentHandler>
    5438:	81 e0       	ldi	r24, 0x01	; 1
    543a:	8f 0d       	add	r24, r15
    543c:	80 93 28 15 	sts	0x1528, r24	; 0x801528 <_twiMessageLen>
    5440:	88 81       	ld	r24, Y
    5442:	88 0f       	add	r24, r24
    5444:	80 93 29 15 	sts	0x1529, r24	; 0x801529 <_twiMessageBuffer>
    5448:	ff 20       	and	r15, r15
    544a:	89 f0       	breq	.+34     	; 0x546e <twiTransmit+0x72>
    544c:	f8 01       	movw	r30, r16
    544e:	aa e2       	ldi	r26, 0x2A	; 42
    5450:	b5 e1       	ldi	r27, 0x15	; 21
    5452:	4f ef       	ldi	r20, 0xFF	; 255
    5454:	4f 0d       	add	r20, r15
    5456:	64 2f       	mov	r22, r20
    5458:	70 e0       	ldi	r23, 0x00	; 0
    545a:	cb 01       	movw	r24, r22
    545c:	01 96       	adiw	r24, 0x01	; 1
    545e:	b8 01       	movw	r22, r16
    5460:	68 0f       	add	r22, r24
    5462:	79 1f       	adc	r23, r25
    5464:	81 91       	ld	r24, Z+
    5466:	8d 93       	st	X+, r24
    5468:	e6 17       	cp	r30, r22
    546a:	f7 07       	cpc	r31, r23
    546c:	d9 f7       	brne	.-10     	; 0x5464 <twiTransmit+0x68>
    546e:	88 ef       	ldi	r24, 0xF8	; 248
    5470:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5474:	85 ea       	ldi	r24, 0xA5	; 165
    5476:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    547a:	84 e0       	ldi	r24, 0x04	; 4
    547c:	05 c0       	rjmp	.+10     	; 0x5488 <twiTransmit+0x8c>
    547e:	86 e0       	ldi	r24, 0x06	; 6
    5480:	03 c0       	rjmp	.+6      	; 0x5488 <twiTransmit+0x8c>
    5482:	87 e0       	ldi	r24, 0x07	; 7
    5484:	01 c0       	rjmp	.+2      	; 0x5488 <twiTransmit+0x8c>
    5486:	82 e0       	ldi	r24, 0x02	; 2
    5488:	df 91       	pop	r29
    548a:	cf 91       	pop	r28
    548c:	1f 91       	pop	r17
    548e:	0f 91       	pop	r16
    5490:	ff 90       	pop	r15
    5492:	08 95       	ret

00005494 <twiReceive>:
    5494:	1f 93       	push	r17
    5496:	cf 93       	push	r28
    5498:	df 93       	push	r29
    549a:	00 97       	sbiw	r24, 0x00	; 0
    549c:	29 f1       	breq	.+74     	; 0x54e8 <twiReceive+0x54>
    549e:	6b 30       	cpi	r22, 0x0B	; 11
    54a0:	28 f5       	brcc	.+74     	; 0x54ec <twiReceive+0x58>
    54a2:	16 2f       	mov	r17, r22
    54a4:	ec 01       	movw	r28, r24
    54a6:	a6 df       	rcall	.-180    	; 0x53f4 <twiIsBusy>
    54a8:	81 11       	cpse	r24, r1
    54aa:	22 c0       	rjmp	.+68     	; 0x54f0 <twiReceive+0x5c>
    54ac:	80 91 26 15 	lds	r24, 0x1526	; 0x801526 <_twiCurrentHandler>
    54b0:	90 91 27 15 	lds	r25, 0x1527	; 0x801527 <_twiCurrentHandler+0x1>
    54b4:	c8 17       	cp	r28, r24
    54b6:	d9 07       	cpc	r29, r25
    54b8:	41 f0       	breq	.+16     	; 0x54ca <twiReceive+0x36>
    54ba:	3e df       	rcall	.-388    	; 0x5338 <_initTwiInterface>
    54bc:	89 81       	ldd	r24, Y+1	; 0x01
    54be:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    54c2:	d0 93 27 15 	sts	0x1527, r29	; 0x801527 <_twiCurrentHandler+0x1>
    54c6:	c0 93 26 15 	sts	0x1526, r28	; 0x801526 <_twiCurrentHandler>
    54ca:	10 93 28 15 	sts	0x1528, r17	; 0x801528 <_twiMessageLen>
    54ce:	88 81       	ld	r24, Y
    54d0:	88 0f       	add	r24, r24
    54d2:	81 60       	ori	r24, 0x01	; 1
    54d4:	80 93 29 15 	sts	0x1529, r24	; 0x801529 <_twiMessageBuffer>
    54d8:	88 ef       	ldi	r24, 0xF8	; 248
    54da:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    54de:	85 ea       	ldi	r24, 0xA5	; 165
    54e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54e4:	85 e0       	ldi	r24, 0x05	; 5
    54e6:	05 c0       	rjmp	.+10     	; 0x54f2 <twiReceive+0x5e>
    54e8:	86 e0       	ldi	r24, 0x06	; 6
    54ea:	03 c0       	rjmp	.+6      	; 0x54f2 <twiReceive+0x5e>
    54ec:	87 e0       	ldi	r24, 0x07	; 7
    54ee:	01 c0       	rjmp	.+2      	; 0x54f2 <twiReceive+0x5e>
    54f0:	82 e0       	ldi	r24, 0x02	; 2
    54f2:	df 91       	pop	r29
    54f4:	cf 91       	pop	r28
    54f6:	1f 91       	pop	r17
    54f8:	08 95       	ret

000054fa <__vector_39>:
    54fa:	1f 92       	push	r1
    54fc:	0f 92       	push	r0
    54fe:	0f b6       	in	r0, 0x3f	; 63
    5500:	0f 92       	push	r0
    5502:	11 24       	eor	r1, r1
    5504:	0b b6       	in	r0, 0x3b	; 59
    5506:	0f 92       	push	r0
    5508:	2f 93       	push	r18
    550a:	3f 93       	push	r19
    550c:	4f 93       	push	r20
    550e:	5f 93       	push	r21
    5510:	6f 93       	push	r22
    5512:	7f 93       	push	r23
    5514:	8f 93       	push	r24
    5516:	9f 93       	push	r25
    5518:	af 93       	push	r26
    551a:	bf 93       	push	r27
    551c:	ef 93       	push	r30
    551e:	ff 93       	push	r31
    5520:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5524:	8e 2f       	mov	r24, r30
    5526:	90 e0       	ldi	r25, 0x00	; 0
    5528:	fc 01       	movw	r30, r24
    552a:	38 97       	sbiw	r30, 0x08	; 8
    552c:	e1 35       	cpi	r30, 0x51	; 81
    552e:	f1 05       	cpc	r31, r1
    5530:	08 f0       	brcs	.+2      	; 0x5534 <__vector_39+0x3a>
    5532:	75 c0       	rjmp	.+234    	; 0x561e <__vector_39+0x124>
    5534:	88 27       	eor	r24, r24
    5536:	e4 58       	subi	r30, 0x84	; 132
    5538:	ff 4f       	sbci	r31, 0xFF	; 255
    553a:	8f 4f       	sbci	r24, 0xFF	; 255
    553c:	a5 c2       	rjmp	.+1354   	; 0x5a88 <__tablejump2__>
    553e:	10 92 25 15 	sts	0x1525, r1	; 0x801525 <_index.1885>
    5542:	e0 91 25 15 	lds	r30, 0x1525	; 0x801525 <_index.1885>
    5546:	80 91 28 15 	lds	r24, 0x1528	; 0x801528 <_twiMessageLen>
    554a:	e8 17       	cp	r30, r24
    554c:	70 f4       	brcc	.+28     	; 0x556a <__vector_39+0x70>
    554e:	81 e0       	ldi	r24, 0x01	; 1
    5550:	8e 0f       	add	r24, r30
    5552:	80 93 25 15 	sts	0x1525, r24	; 0x801525 <_index.1885>
    5556:	f0 e0       	ldi	r31, 0x00	; 0
    5558:	e7 5d       	subi	r30, 0xD7	; 215
    555a:	fa 4e       	sbci	r31, 0xEA	; 234
    555c:	80 81       	ld	r24, Z
    555e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5562:	85 e8       	ldi	r24, 0x85	; 133
    5564:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5568:	72 c0       	rjmp	.+228    	; 0x564e <__vector_39+0x154>
    556a:	84 e9       	ldi	r24, 0x94	; 148
    556c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5570:	80 91 26 15 	lds	r24, 0x1526	; 0x801526 <_twiCurrentHandler>
    5574:	90 91 27 15 	lds	r25, 0x1527	; 0x801527 <_twiCurrentHandler+0x1>
    5578:	dc 01       	movw	r26, r24
    557a:	12 96       	adiw	r26, 0x02	; 2
    557c:	ed 91       	ld	r30, X+
    557e:	fc 91       	ld	r31, X
    5580:	13 97       	sbiw	r26, 0x03	; 3
    5582:	30 97       	sbiw	r30, 0x00	; 0
    5584:	09 f4       	brne	.+2      	; 0x5588 <__vector_39+0x8e>
    5586:	63 c0       	rjmp	.+198    	; 0x564e <__vector_39+0x154>
    5588:	20 e0       	ldi	r18, 0x00	; 0
    558a:	40 e0       	ldi	r20, 0x00	; 0
    558c:	50 e0       	ldi	r21, 0x00	; 0
    558e:	64 e0       	ldi	r22, 0x04	; 4
    5590:	19 95       	eicall
    5592:	5d c0       	rjmp	.+186    	; 0x564e <__vector_39+0x154>
    5594:	e0 91 25 15 	lds	r30, 0x1525	; 0x801525 <_index.1885>
    5598:	81 e0       	ldi	r24, 0x01	; 1
    559a:	8e 0f       	add	r24, r30
    559c:	80 93 25 15 	sts	0x1525, r24	; 0x801525 <_index.1885>
    55a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    55a4:	f0 e0       	ldi	r31, 0x00	; 0
    55a6:	e7 5d       	subi	r30, 0xD7	; 215
    55a8:	fa 4e       	sbci	r31, 0xEA	; 234
    55aa:	80 83       	st	Z, r24
    55ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    55b0:	80 34       	cpi	r24, 0x40	; 64
    55b2:	11 f4       	brne	.+4      	; 0x55b8 <__vector_39+0xbe>
    55b4:	10 92 25 15 	sts	0x1525, r1	; 0x801525 <_index.1885>
    55b8:	20 91 25 15 	lds	r18, 0x1525	; 0x801525 <_index.1885>
    55bc:	30 e0       	ldi	r19, 0x00	; 0
    55be:	80 91 28 15 	lds	r24, 0x1528	; 0x801528 <_twiMessageLen>
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	01 97       	sbiw	r24, 0x01	; 1
    55c6:	28 17       	cp	r18, r24
    55c8:	39 07       	cpc	r19, r25
    55ca:	24 f4       	brge	.+8      	; 0x55d4 <__vector_39+0xda>
    55cc:	85 ec       	ldi	r24, 0xC5	; 197
    55ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55d2:	3d c0       	rjmp	.+122    	; 0x564e <__vector_39+0x154>
    55d4:	85 e8       	ldi	r24, 0x85	; 133
    55d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55da:	39 c0       	rjmp	.+114    	; 0x564e <__vector_39+0x154>
    55dc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    55e0:	e0 91 25 15 	lds	r30, 0x1525	; 0x801525 <_index.1885>
    55e4:	f0 e0       	ldi	r31, 0x00	; 0
    55e6:	e7 5d       	subi	r30, 0xD7	; 215
    55e8:	fa 4e       	sbci	r31, 0xEA	; 234
    55ea:	80 83       	st	Z, r24
    55ec:	84 e9       	ldi	r24, 0x94	; 148
    55ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55f2:	80 91 26 15 	lds	r24, 0x1526	; 0x801526 <_twiCurrentHandler>
    55f6:	90 91 27 15 	lds	r25, 0x1527	; 0x801527 <_twiCurrentHandler+0x1>
    55fa:	dc 01       	movw	r26, r24
    55fc:	12 96       	adiw	r26, 0x02	; 2
    55fe:	ed 91       	ld	r30, X+
    5600:	fc 91       	ld	r31, X
    5602:	13 97       	sbiw	r26, 0x03	; 3
    5604:	30 97       	sbiw	r30, 0x00	; 0
    5606:	19 f1       	breq	.+70     	; 0x564e <__vector_39+0x154>
    5608:	20 91 28 15 	lds	r18, 0x1528	; 0x801528 <_twiMessageLen>
    560c:	49 e2       	ldi	r20, 0x29	; 41
    560e:	55 e1       	ldi	r21, 0x15	; 21
    5610:	65 e0       	ldi	r22, 0x05	; 5
    5612:	19 95       	eicall
    5614:	1c c0       	rjmp	.+56     	; 0x564e <__vector_39+0x154>
    5616:	85 ea       	ldi	r24, 0xA5	; 165
    5618:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    561c:	18 c0       	rjmp	.+48     	; 0x564e <__vector_39+0x154>
    561e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5622:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5626:	84 e0       	ldi	r24, 0x04	; 4
    5628:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    562c:	80 91 26 15 	lds	r24, 0x1526	; 0x801526 <_twiCurrentHandler>
    5630:	90 91 27 15 	lds	r25, 0x1527	; 0x801527 <_twiCurrentHandler+0x1>
    5634:	dc 01       	movw	r26, r24
    5636:	12 96       	adiw	r26, 0x02	; 2
    5638:	ed 91       	ld	r30, X+
    563a:	fc 91       	ld	r31, X
    563c:	13 97       	sbiw	r26, 0x03	; 3
    563e:	30 97       	sbiw	r30, 0x00	; 0
    5640:	31 f0       	breq	.+12     	; 0x564e <__vector_39+0x154>
    5642:	20 e0       	ldi	r18, 0x00	; 0
    5644:	40 e0       	ldi	r20, 0x00	; 0
    5646:	50 e0       	ldi	r21, 0x00	; 0
    5648:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    564c:	19 95       	eicall
    564e:	ff 91       	pop	r31
    5650:	ef 91       	pop	r30
    5652:	bf 91       	pop	r27
    5654:	af 91       	pop	r26
    5656:	9f 91       	pop	r25
    5658:	8f 91       	pop	r24
    565a:	7f 91       	pop	r23
    565c:	6f 91       	pop	r22
    565e:	5f 91       	pop	r21
    5660:	4f 91       	pop	r20
    5662:	3f 91       	pop	r19
    5664:	2f 91       	pop	r18
    5666:	0f 90       	pop	r0
    5668:	0b be       	out	0x3b, r0	; 59
    566a:	0f 90       	pop	r0
    566c:	0f be       	out	0x3f, r0	; 63
    566e:	0f 90       	pop	r0
    5670:	1f 90       	pop	r1
    5672:	18 95       	reti

00005674 <fifo_init>:
    5674:	fc 01       	movw	r30, r24
    5676:	41 11       	cpse	r20, r1
    5678:	01 c0       	rjmp	.+2      	; 0x567c <fifo_init+0x8>
    567a:	2f d3       	rcall	.+1630   	; 0x5cda <abort>
    567c:	84 2f       	mov	r24, r20
    567e:	90 e0       	ldi	r25, 0x00	; 0
    5680:	9c 01       	movw	r18, r24
    5682:	21 50       	subi	r18, 0x01	; 1
    5684:	31 09       	sbc	r19, r1
    5686:	82 23       	and	r24, r18
    5688:	93 23       	and	r25, r19
    568a:	89 2b       	or	r24, r25
    568c:	09 f0       	breq	.+2      	; 0x5690 <fifo_init+0x1c>
    568e:	25 d3       	rcall	.+1610   	; 0x5cda <abort>
    5690:	41 38       	cpi	r20, 0x81	; 129
    5692:	08 f0       	brcs	.+2      	; 0x5696 <fifo_init+0x22>
    5694:	22 d3       	rcall	.+1604   	; 0x5cda <abort>
    5696:	12 82       	std	Z+2, r1	; 0x02
    5698:	13 82       	std	Z+3, r1	; 0x03
    569a:	44 83       	std	Z+4, r20	; 0x04
    569c:	44 0f       	add	r20, r20
    569e:	41 50       	subi	r20, 0x01	; 1
    56a0:	45 83       	std	Z+5, r20	; 0x05
    56a2:	71 83       	std	Z+1, r23	; 0x01
    56a4:	60 83       	st	Z, r22
    56a6:	80 e0       	ldi	r24, 0x00	; 0
    56a8:	90 e0       	ldi	r25, 0x00	; 0
    56aa:	08 95       	ret

000056ac <__subsf3>:
    56ac:	50 58       	subi	r21, 0x80	; 128

000056ae <__addsf3>:
    56ae:	bb 27       	eor	r27, r27
    56b0:	aa 27       	eor	r26, r26
    56b2:	0e d0       	rcall	.+28     	; 0x56d0 <__addsf3x>
    56b4:	28 c1       	rjmp	.+592    	; 0x5906 <__fp_round>
    56b6:	19 d1       	rcall	.+562    	; 0x58ea <__fp_pscA>
    56b8:	30 f0       	brcs	.+12     	; 0x56c6 <__addsf3+0x18>
    56ba:	1e d1       	rcall	.+572    	; 0x58f8 <__fp_pscB>
    56bc:	20 f0       	brcs	.+8      	; 0x56c6 <__addsf3+0x18>
    56be:	31 f4       	brne	.+12     	; 0x56cc <__addsf3+0x1e>
    56c0:	9f 3f       	cpi	r25, 0xFF	; 255
    56c2:	11 f4       	brne	.+4      	; 0x56c8 <__addsf3+0x1a>
    56c4:	1e f4       	brtc	.+6      	; 0x56cc <__addsf3+0x1e>
    56c6:	0e c1       	rjmp	.+540    	; 0x58e4 <__fp_nan>
    56c8:	0e f4       	brtc	.+2      	; 0x56cc <__addsf3+0x1e>
    56ca:	e0 95       	com	r30
    56cc:	e7 fb       	bst	r30, 7
    56ce:	04 c1       	rjmp	.+520    	; 0x58d8 <__fp_inf>

000056d0 <__addsf3x>:
    56d0:	e9 2f       	mov	r30, r25
    56d2:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__fp_split3>
    56d6:	78 f3       	brcs	.-34     	; 0x56b6 <__addsf3+0x8>
    56d8:	ba 17       	cp	r27, r26
    56da:	62 07       	cpc	r22, r18
    56dc:	73 07       	cpc	r23, r19
    56de:	84 07       	cpc	r24, r20
    56e0:	95 07       	cpc	r25, r21
    56e2:	20 f0       	brcs	.+8      	; 0x56ec <__addsf3x+0x1c>
    56e4:	79 f4       	brne	.+30     	; 0x5704 <__addsf3x+0x34>
    56e6:	a6 f5       	brtc	.+104    	; 0x5750 <__addsf3x+0x80>
    56e8:	0c 94 e5 1c 	jmp	0x39ca	; 0x39ca <__fp_zero>
    56ec:	0e f4       	brtc	.+2      	; 0x56f0 <__addsf3x+0x20>
    56ee:	e0 95       	com	r30
    56f0:	0b 2e       	mov	r0, r27
    56f2:	ba 2f       	mov	r27, r26
    56f4:	a0 2d       	mov	r26, r0
    56f6:	0b 01       	movw	r0, r22
    56f8:	b9 01       	movw	r22, r18
    56fa:	90 01       	movw	r18, r0
    56fc:	0c 01       	movw	r0, r24
    56fe:	ca 01       	movw	r24, r20
    5700:	a0 01       	movw	r20, r0
    5702:	11 24       	eor	r1, r1
    5704:	ff 27       	eor	r31, r31
    5706:	59 1b       	sub	r21, r25
    5708:	99 f0       	breq	.+38     	; 0x5730 <__addsf3x+0x60>
    570a:	59 3f       	cpi	r21, 0xF9	; 249
    570c:	50 f4       	brcc	.+20     	; 0x5722 <__addsf3x+0x52>
    570e:	50 3e       	cpi	r21, 0xE0	; 224
    5710:	68 f1       	brcs	.+90     	; 0x576c <__addsf3x+0x9c>
    5712:	1a 16       	cp	r1, r26
    5714:	f0 40       	sbci	r31, 0x00	; 0
    5716:	a2 2f       	mov	r26, r18
    5718:	23 2f       	mov	r18, r19
    571a:	34 2f       	mov	r19, r20
    571c:	44 27       	eor	r20, r20
    571e:	58 5f       	subi	r21, 0xF8	; 248
    5720:	f3 cf       	rjmp	.-26     	; 0x5708 <__addsf3x+0x38>
    5722:	46 95       	lsr	r20
    5724:	37 95       	ror	r19
    5726:	27 95       	ror	r18
    5728:	a7 95       	ror	r26
    572a:	f0 40       	sbci	r31, 0x00	; 0
    572c:	53 95       	inc	r21
    572e:	c9 f7       	brne	.-14     	; 0x5722 <__addsf3x+0x52>
    5730:	7e f4       	brtc	.+30     	; 0x5750 <__addsf3x+0x80>
    5732:	1f 16       	cp	r1, r31
    5734:	ba 0b       	sbc	r27, r26
    5736:	62 0b       	sbc	r22, r18
    5738:	73 0b       	sbc	r23, r19
    573a:	84 0b       	sbc	r24, r20
    573c:	ba f0       	brmi	.+46     	; 0x576c <__addsf3x+0x9c>
    573e:	91 50       	subi	r25, 0x01	; 1
    5740:	a1 f0       	breq	.+40     	; 0x576a <__addsf3x+0x9a>
    5742:	ff 0f       	add	r31, r31
    5744:	bb 1f       	adc	r27, r27
    5746:	66 1f       	adc	r22, r22
    5748:	77 1f       	adc	r23, r23
    574a:	88 1f       	adc	r24, r24
    574c:	c2 f7       	brpl	.-16     	; 0x573e <__addsf3x+0x6e>
    574e:	0e c0       	rjmp	.+28     	; 0x576c <__addsf3x+0x9c>
    5750:	ba 0f       	add	r27, r26
    5752:	62 1f       	adc	r22, r18
    5754:	73 1f       	adc	r23, r19
    5756:	84 1f       	adc	r24, r20
    5758:	48 f4       	brcc	.+18     	; 0x576c <__addsf3x+0x9c>
    575a:	87 95       	ror	r24
    575c:	77 95       	ror	r23
    575e:	67 95       	ror	r22
    5760:	b7 95       	ror	r27
    5762:	f7 95       	ror	r31
    5764:	9e 3f       	cpi	r25, 0xFE	; 254
    5766:	08 f0       	brcs	.+2      	; 0x576a <__addsf3x+0x9a>
    5768:	b1 cf       	rjmp	.-158    	; 0x56cc <__addsf3+0x1e>
    576a:	93 95       	inc	r25
    576c:	88 0f       	add	r24, r24
    576e:	08 f0       	brcs	.+2      	; 0x5772 <__addsf3x+0xa2>
    5770:	99 27       	eor	r25, r25
    5772:	ee 0f       	add	r30, r30
    5774:	97 95       	ror	r25
    5776:	87 95       	ror	r24
    5778:	08 95       	ret

0000577a <__divsf3>:
    577a:	0d d0       	rcall	.+26     	; 0x5796 <__divsf3x>
    577c:	c4 c0       	rjmp	.+392    	; 0x5906 <__fp_round>
    577e:	bc d0       	rcall	.+376    	; 0x58f8 <__fp_pscB>
    5780:	48 f0       	brcs	.+18     	; 0x5794 <__divsf3+0x1a>
    5782:	b3 d0       	rcall	.+358    	; 0x58ea <__fp_pscA>
    5784:	38 f0       	brcs	.+14     	; 0x5794 <__divsf3+0x1a>
    5786:	21 f4       	brne	.+8      	; 0x5790 <__divsf3+0x16>
    5788:	5f 3f       	cpi	r21, 0xFF	; 255
    578a:	21 f0       	breq	.+8      	; 0x5794 <__divsf3+0x1a>
    578c:	a5 c0       	rjmp	.+330    	; 0x58d8 <__fp_inf>
    578e:	51 11       	cpse	r21, r1
    5790:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__fp_szero>
    5794:	a7 c0       	rjmp	.+334    	; 0x58e4 <__fp_nan>

00005796 <__divsf3x>:
    5796:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__fp_split3>
    579a:	88 f3       	brcs	.-30     	; 0x577e <__divsf3+0x4>

0000579c <__divsf3_pse>:
    579c:	99 23       	and	r25, r25
    579e:	b9 f3       	breq	.-18     	; 0x578e <__divsf3+0x14>
    57a0:	55 23       	and	r21, r21
    57a2:	a1 f3       	breq	.-24     	; 0x578c <__divsf3+0x12>
    57a4:	95 1b       	sub	r25, r21
    57a6:	55 0b       	sbc	r21, r21
    57a8:	bb 27       	eor	r27, r27
    57aa:	aa 27       	eor	r26, r26
    57ac:	62 17       	cp	r22, r18
    57ae:	73 07       	cpc	r23, r19
    57b0:	84 07       	cpc	r24, r20
    57b2:	38 f0       	brcs	.+14     	; 0x57c2 <__divsf3_pse+0x26>
    57b4:	9f 5f       	subi	r25, 0xFF	; 255
    57b6:	5f 4f       	sbci	r21, 0xFF	; 255
    57b8:	22 0f       	add	r18, r18
    57ba:	33 1f       	adc	r19, r19
    57bc:	44 1f       	adc	r20, r20
    57be:	aa 1f       	adc	r26, r26
    57c0:	a9 f3       	breq	.-22     	; 0x57ac <__divsf3_pse+0x10>
    57c2:	34 d0       	rcall	.+104    	; 0x582c <__divsf3_pse+0x90>
    57c4:	0e 2e       	mov	r0, r30
    57c6:	3a f0       	brmi	.+14     	; 0x57d6 <__divsf3_pse+0x3a>
    57c8:	e0 e8       	ldi	r30, 0x80	; 128
    57ca:	31 d0       	rcall	.+98     	; 0x582e <__divsf3_pse+0x92>
    57cc:	91 50       	subi	r25, 0x01	; 1
    57ce:	50 40       	sbci	r21, 0x00	; 0
    57d0:	e6 95       	lsr	r30
    57d2:	00 1c       	adc	r0, r0
    57d4:	ca f7       	brpl	.-14     	; 0x57c8 <__divsf3_pse+0x2c>
    57d6:	2a d0       	rcall	.+84     	; 0x582c <__divsf3_pse+0x90>
    57d8:	fe 2f       	mov	r31, r30
    57da:	28 d0       	rcall	.+80     	; 0x582c <__divsf3_pse+0x90>
    57dc:	66 0f       	add	r22, r22
    57de:	77 1f       	adc	r23, r23
    57e0:	88 1f       	adc	r24, r24
    57e2:	bb 1f       	adc	r27, r27
    57e4:	26 17       	cp	r18, r22
    57e6:	37 07       	cpc	r19, r23
    57e8:	48 07       	cpc	r20, r24
    57ea:	ab 07       	cpc	r26, r27
    57ec:	b0 e8       	ldi	r27, 0x80	; 128
    57ee:	09 f0       	breq	.+2      	; 0x57f2 <__divsf3_pse+0x56>
    57f0:	bb 0b       	sbc	r27, r27
    57f2:	80 2d       	mov	r24, r0
    57f4:	bf 01       	movw	r22, r30
    57f6:	ff 27       	eor	r31, r31
    57f8:	93 58       	subi	r25, 0x83	; 131
    57fa:	5f 4f       	sbci	r21, 0xFF	; 255
    57fc:	32 f0       	brmi	.+12     	; 0x580a <__divsf3_pse+0x6e>
    57fe:	9e 3f       	cpi	r25, 0xFE	; 254
    5800:	51 05       	cpc	r21, r1
    5802:	70 f0       	brcs	.+28     	; 0x5820 <__divsf3_pse+0x84>
    5804:	69 c0       	rjmp	.+210    	; 0x58d8 <__fp_inf>
    5806:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__fp_szero>
    580a:	5f 3f       	cpi	r21, 0xFF	; 255
    580c:	e4 f3       	brlt	.-8      	; 0x5806 <__divsf3_pse+0x6a>
    580e:	98 3e       	cpi	r25, 0xE8	; 232
    5810:	d4 f3       	brlt	.-12     	; 0x5806 <__divsf3_pse+0x6a>
    5812:	86 95       	lsr	r24
    5814:	77 95       	ror	r23
    5816:	67 95       	ror	r22
    5818:	b7 95       	ror	r27
    581a:	f7 95       	ror	r31
    581c:	9f 5f       	subi	r25, 0xFF	; 255
    581e:	c9 f7       	brne	.-14     	; 0x5812 <__divsf3_pse+0x76>
    5820:	88 0f       	add	r24, r24
    5822:	91 1d       	adc	r25, r1
    5824:	96 95       	lsr	r25
    5826:	87 95       	ror	r24
    5828:	97 f9       	bld	r25, 7
    582a:	08 95       	ret
    582c:	e1 e0       	ldi	r30, 0x01	; 1
    582e:	66 0f       	add	r22, r22
    5830:	77 1f       	adc	r23, r23
    5832:	88 1f       	adc	r24, r24
    5834:	bb 1f       	adc	r27, r27
    5836:	62 17       	cp	r22, r18
    5838:	73 07       	cpc	r23, r19
    583a:	84 07       	cpc	r24, r20
    583c:	ba 07       	cpc	r27, r26
    583e:	20 f0       	brcs	.+8      	; 0x5848 <__divsf3_pse+0xac>
    5840:	62 1b       	sub	r22, r18
    5842:	73 0b       	sbc	r23, r19
    5844:	84 0b       	sbc	r24, r20
    5846:	ba 0b       	sbc	r27, r26
    5848:	ee 1f       	adc	r30, r30
    584a:	88 f7       	brcc	.-30     	; 0x582e <__divsf3_pse+0x92>
    584c:	e0 95       	com	r30
    584e:	08 95       	ret

00005850 <__fixsfsi>:
    5850:	0e 94 97 1c 	call	0x392e	; 0x392e <__fixunssfsi>
    5854:	68 94       	set
    5856:	b1 11       	cpse	r27, r1
    5858:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__fp_szero>
    585c:	08 95       	ret

0000585e <__floatunsisf>:
    585e:	e8 94       	clt
    5860:	09 c0       	rjmp	.+18     	; 0x5874 <__floatsisf+0x12>

00005862 <__floatsisf>:
    5862:	97 fb       	bst	r25, 7
    5864:	3e f4       	brtc	.+14     	; 0x5874 <__floatsisf+0x12>
    5866:	90 95       	com	r25
    5868:	80 95       	com	r24
    586a:	70 95       	com	r23
    586c:	61 95       	neg	r22
    586e:	7f 4f       	sbci	r23, 0xFF	; 255
    5870:	8f 4f       	sbci	r24, 0xFF	; 255
    5872:	9f 4f       	sbci	r25, 0xFF	; 255
    5874:	99 23       	and	r25, r25
    5876:	a9 f0       	breq	.+42     	; 0x58a2 <__floatsisf+0x40>
    5878:	f9 2f       	mov	r31, r25
    587a:	96 e9       	ldi	r25, 0x96	; 150
    587c:	bb 27       	eor	r27, r27
    587e:	93 95       	inc	r25
    5880:	f6 95       	lsr	r31
    5882:	87 95       	ror	r24
    5884:	77 95       	ror	r23
    5886:	67 95       	ror	r22
    5888:	b7 95       	ror	r27
    588a:	f1 11       	cpse	r31, r1
    588c:	f8 cf       	rjmp	.-16     	; 0x587e <__floatsisf+0x1c>
    588e:	fa f4       	brpl	.+62     	; 0x58ce <__floatsisf+0x6c>
    5890:	bb 0f       	add	r27, r27
    5892:	11 f4       	brne	.+4      	; 0x5898 <__floatsisf+0x36>
    5894:	60 ff       	sbrs	r22, 0
    5896:	1b c0       	rjmp	.+54     	; 0x58ce <__floatsisf+0x6c>
    5898:	6f 5f       	subi	r22, 0xFF	; 255
    589a:	7f 4f       	sbci	r23, 0xFF	; 255
    589c:	8f 4f       	sbci	r24, 0xFF	; 255
    589e:	9f 4f       	sbci	r25, 0xFF	; 255
    58a0:	16 c0       	rjmp	.+44     	; 0x58ce <__floatsisf+0x6c>
    58a2:	88 23       	and	r24, r24
    58a4:	11 f0       	breq	.+4      	; 0x58aa <__floatsisf+0x48>
    58a6:	96 e9       	ldi	r25, 0x96	; 150
    58a8:	11 c0       	rjmp	.+34     	; 0x58cc <__floatsisf+0x6a>
    58aa:	77 23       	and	r23, r23
    58ac:	21 f0       	breq	.+8      	; 0x58b6 <__floatsisf+0x54>
    58ae:	9e e8       	ldi	r25, 0x8E	; 142
    58b0:	87 2f       	mov	r24, r23
    58b2:	76 2f       	mov	r23, r22
    58b4:	05 c0       	rjmp	.+10     	; 0x58c0 <__floatsisf+0x5e>
    58b6:	66 23       	and	r22, r22
    58b8:	71 f0       	breq	.+28     	; 0x58d6 <__floatsisf+0x74>
    58ba:	96 e8       	ldi	r25, 0x86	; 134
    58bc:	86 2f       	mov	r24, r22
    58be:	70 e0       	ldi	r23, 0x00	; 0
    58c0:	60 e0       	ldi	r22, 0x00	; 0
    58c2:	2a f0       	brmi	.+10     	; 0x58ce <__floatsisf+0x6c>
    58c4:	9a 95       	dec	r25
    58c6:	66 0f       	add	r22, r22
    58c8:	77 1f       	adc	r23, r23
    58ca:	88 1f       	adc	r24, r24
    58cc:	da f7       	brpl	.-10     	; 0x58c4 <__floatsisf+0x62>
    58ce:	88 0f       	add	r24, r24
    58d0:	96 95       	lsr	r25
    58d2:	87 95       	ror	r24
    58d4:	97 f9       	bld	r25, 7
    58d6:	08 95       	ret

000058d8 <__fp_inf>:
    58d8:	97 f9       	bld	r25, 7
    58da:	9f 67       	ori	r25, 0x7F	; 127
    58dc:	80 e8       	ldi	r24, 0x80	; 128
    58de:	70 e0       	ldi	r23, 0x00	; 0
    58e0:	60 e0       	ldi	r22, 0x00	; 0
    58e2:	08 95       	ret

000058e4 <__fp_nan>:
    58e4:	9f ef       	ldi	r25, 0xFF	; 255
    58e6:	80 ec       	ldi	r24, 0xC0	; 192
    58e8:	08 95       	ret

000058ea <__fp_pscA>:
    58ea:	00 24       	eor	r0, r0
    58ec:	0a 94       	dec	r0
    58ee:	16 16       	cp	r1, r22
    58f0:	17 06       	cpc	r1, r23
    58f2:	18 06       	cpc	r1, r24
    58f4:	09 06       	cpc	r0, r25
    58f6:	08 95       	ret

000058f8 <__fp_pscB>:
    58f8:	00 24       	eor	r0, r0
    58fa:	0a 94       	dec	r0
    58fc:	12 16       	cp	r1, r18
    58fe:	13 06       	cpc	r1, r19
    5900:	14 06       	cpc	r1, r20
    5902:	05 06       	cpc	r0, r21
    5904:	08 95       	ret

00005906 <__fp_round>:
    5906:	09 2e       	mov	r0, r25
    5908:	03 94       	inc	r0
    590a:	00 0c       	add	r0, r0
    590c:	11 f4       	brne	.+4      	; 0x5912 <__fp_round+0xc>
    590e:	88 23       	and	r24, r24
    5910:	52 f0       	brmi	.+20     	; 0x5926 <__fp_round+0x20>
    5912:	bb 0f       	add	r27, r27
    5914:	40 f4       	brcc	.+16     	; 0x5926 <__fp_round+0x20>
    5916:	bf 2b       	or	r27, r31
    5918:	11 f4       	brne	.+4      	; 0x591e <__fp_round+0x18>
    591a:	60 ff       	sbrs	r22, 0
    591c:	04 c0       	rjmp	.+8      	; 0x5926 <__fp_round+0x20>
    591e:	6f 5f       	subi	r22, 0xFF	; 255
    5920:	7f 4f       	sbci	r23, 0xFF	; 255
    5922:	8f 4f       	sbci	r24, 0xFF	; 255
    5924:	9f 4f       	sbci	r25, 0xFF	; 255
    5926:	08 95       	ret

00005928 <__gesf2>:
    5928:	69 d0       	rcall	.+210    	; 0x59fc <__fp_cmp>
    592a:	08 f4       	brcc	.+2      	; 0x592e <__gesf2+0x6>
    592c:	8f ef       	ldi	r24, 0xFF	; 255
    592e:	08 95       	ret

00005930 <__mulsf3>:
    5930:	0c d0       	rcall	.+24     	; 0x594a <__mulsf3x>
    5932:	e9 cf       	rjmp	.-46     	; 0x5906 <__fp_round>
    5934:	da df       	rcall	.-76     	; 0x58ea <__fp_pscA>
    5936:	28 f0       	brcs	.+10     	; 0x5942 <__mulsf3+0x12>
    5938:	df df       	rcall	.-66     	; 0x58f8 <__fp_pscB>
    593a:	18 f0       	brcs	.+6      	; 0x5942 <__mulsf3+0x12>
    593c:	95 23       	and	r25, r21
    593e:	09 f0       	breq	.+2      	; 0x5942 <__mulsf3+0x12>
    5940:	cb cf       	rjmp	.-106    	; 0x58d8 <__fp_inf>
    5942:	d0 cf       	rjmp	.-96     	; 0x58e4 <__fp_nan>
    5944:	11 24       	eor	r1, r1
    5946:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__fp_szero>

0000594a <__mulsf3x>:
    594a:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__fp_split3>
    594e:	90 f3       	brcs	.-28     	; 0x5934 <__mulsf3+0x4>

00005950 <__mulsf3_pse>:
    5950:	95 9f       	mul	r25, r21
    5952:	c1 f3       	breq	.-16     	; 0x5944 <__mulsf3+0x14>
    5954:	95 0f       	add	r25, r21
    5956:	50 e0       	ldi	r21, 0x00	; 0
    5958:	55 1f       	adc	r21, r21
    595a:	62 9f       	mul	r22, r18
    595c:	f0 01       	movw	r30, r0
    595e:	72 9f       	mul	r23, r18
    5960:	bb 27       	eor	r27, r27
    5962:	f0 0d       	add	r31, r0
    5964:	b1 1d       	adc	r27, r1
    5966:	63 9f       	mul	r22, r19
    5968:	aa 27       	eor	r26, r26
    596a:	f0 0d       	add	r31, r0
    596c:	b1 1d       	adc	r27, r1
    596e:	aa 1f       	adc	r26, r26
    5970:	64 9f       	mul	r22, r20
    5972:	66 27       	eor	r22, r22
    5974:	b0 0d       	add	r27, r0
    5976:	a1 1d       	adc	r26, r1
    5978:	66 1f       	adc	r22, r22
    597a:	82 9f       	mul	r24, r18
    597c:	22 27       	eor	r18, r18
    597e:	b0 0d       	add	r27, r0
    5980:	a1 1d       	adc	r26, r1
    5982:	62 1f       	adc	r22, r18
    5984:	73 9f       	mul	r23, r19
    5986:	b0 0d       	add	r27, r0
    5988:	a1 1d       	adc	r26, r1
    598a:	62 1f       	adc	r22, r18
    598c:	83 9f       	mul	r24, r19
    598e:	a0 0d       	add	r26, r0
    5990:	61 1d       	adc	r22, r1
    5992:	22 1f       	adc	r18, r18
    5994:	74 9f       	mul	r23, r20
    5996:	33 27       	eor	r19, r19
    5998:	a0 0d       	add	r26, r0
    599a:	61 1d       	adc	r22, r1
    599c:	23 1f       	adc	r18, r19
    599e:	84 9f       	mul	r24, r20
    59a0:	60 0d       	add	r22, r0
    59a2:	21 1d       	adc	r18, r1
    59a4:	82 2f       	mov	r24, r18
    59a6:	76 2f       	mov	r23, r22
    59a8:	6a 2f       	mov	r22, r26
    59aa:	11 24       	eor	r1, r1
    59ac:	9f 57       	subi	r25, 0x7F	; 127
    59ae:	50 40       	sbci	r21, 0x00	; 0
    59b0:	92 f0       	brmi	.+36     	; 0x59d6 <__mulsf3_pse+0x86>
    59b2:	e9 f0       	breq	.+58     	; 0x59ee <__mulsf3_pse+0x9e>
    59b4:	88 23       	and	r24, r24
    59b6:	4a f0       	brmi	.+18     	; 0x59ca <__mulsf3_pse+0x7a>
    59b8:	ee 0f       	add	r30, r30
    59ba:	ff 1f       	adc	r31, r31
    59bc:	bb 1f       	adc	r27, r27
    59be:	66 1f       	adc	r22, r22
    59c0:	77 1f       	adc	r23, r23
    59c2:	88 1f       	adc	r24, r24
    59c4:	91 50       	subi	r25, 0x01	; 1
    59c6:	50 40       	sbci	r21, 0x00	; 0
    59c8:	a9 f7       	brne	.-22     	; 0x59b4 <__mulsf3_pse+0x64>
    59ca:	9e 3f       	cpi	r25, 0xFE	; 254
    59cc:	51 05       	cpc	r21, r1
    59ce:	78 f0       	brcs	.+30     	; 0x59ee <__mulsf3_pse+0x9e>
    59d0:	83 cf       	rjmp	.-250    	; 0x58d8 <__fp_inf>
    59d2:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__fp_szero>
    59d6:	5f 3f       	cpi	r21, 0xFF	; 255
    59d8:	e4 f3       	brlt	.-8      	; 0x59d2 <__mulsf3_pse+0x82>
    59da:	98 3e       	cpi	r25, 0xE8	; 232
    59dc:	d4 f3       	brlt	.-12     	; 0x59d2 <__mulsf3_pse+0x82>
    59de:	86 95       	lsr	r24
    59e0:	77 95       	ror	r23
    59e2:	67 95       	ror	r22
    59e4:	b7 95       	ror	r27
    59e6:	f7 95       	ror	r31
    59e8:	e7 95       	ror	r30
    59ea:	9f 5f       	subi	r25, 0xFF	; 255
    59ec:	c1 f7       	brne	.-16     	; 0x59de <__mulsf3_pse+0x8e>
    59ee:	fe 2b       	or	r31, r30
    59f0:	88 0f       	add	r24, r24
    59f2:	91 1d       	adc	r25, r1
    59f4:	96 95       	lsr	r25
    59f6:	87 95       	ror	r24
    59f8:	97 f9       	bld	r25, 7
    59fa:	08 95       	ret

000059fc <__fp_cmp>:
    59fc:	99 0f       	add	r25, r25
    59fe:	00 08       	sbc	r0, r0
    5a00:	55 0f       	add	r21, r21
    5a02:	aa 0b       	sbc	r26, r26
    5a04:	e0 e8       	ldi	r30, 0x80	; 128
    5a06:	fe ef       	ldi	r31, 0xFE	; 254
    5a08:	16 16       	cp	r1, r22
    5a0a:	17 06       	cpc	r1, r23
    5a0c:	e8 07       	cpc	r30, r24
    5a0e:	f9 07       	cpc	r31, r25
    5a10:	c0 f0       	brcs	.+48     	; 0x5a42 <__fp_cmp+0x46>
    5a12:	12 16       	cp	r1, r18
    5a14:	13 06       	cpc	r1, r19
    5a16:	e4 07       	cpc	r30, r20
    5a18:	f5 07       	cpc	r31, r21
    5a1a:	98 f0       	brcs	.+38     	; 0x5a42 <__fp_cmp+0x46>
    5a1c:	62 1b       	sub	r22, r18
    5a1e:	73 0b       	sbc	r23, r19
    5a20:	84 0b       	sbc	r24, r20
    5a22:	95 0b       	sbc	r25, r21
    5a24:	39 f4       	brne	.+14     	; 0x5a34 <__fp_cmp+0x38>
    5a26:	0a 26       	eor	r0, r26
    5a28:	61 f0       	breq	.+24     	; 0x5a42 <__fp_cmp+0x46>
    5a2a:	23 2b       	or	r18, r19
    5a2c:	24 2b       	or	r18, r20
    5a2e:	25 2b       	or	r18, r21
    5a30:	21 f4       	brne	.+8      	; 0x5a3a <__fp_cmp+0x3e>
    5a32:	08 95       	ret
    5a34:	0a 26       	eor	r0, r26
    5a36:	09 f4       	brne	.+2      	; 0x5a3a <__fp_cmp+0x3e>
    5a38:	a1 40       	sbci	r26, 0x01	; 1
    5a3a:	a6 95       	lsr	r26
    5a3c:	8f ef       	ldi	r24, 0xFF	; 255
    5a3e:	81 1d       	adc	r24, r1
    5a40:	81 1d       	adc	r24, r1
    5a42:	08 95       	ret

00005a44 <__udivmodsi4>:
    5a44:	a1 e2       	ldi	r26, 0x21	; 33
    5a46:	1a 2e       	mov	r1, r26
    5a48:	aa 1b       	sub	r26, r26
    5a4a:	bb 1b       	sub	r27, r27
    5a4c:	fd 01       	movw	r30, r26
    5a4e:	0d c0       	rjmp	.+26     	; 0x5a6a <__udivmodsi4_ep>

00005a50 <__udivmodsi4_loop>:
    5a50:	aa 1f       	adc	r26, r26
    5a52:	bb 1f       	adc	r27, r27
    5a54:	ee 1f       	adc	r30, r30
    5a56:	ff 1f       	adc	r31, r31
    5a58:	a2 17       	cp	r26, r18
    5a5a:	b3 07       	cpc	r27, r19
    5a5c:	e4 07       	cpc	r30, r20
    5a5e:	f5 07       	cpc	r31, r21
    5a60:	20 f0       	brcs	.+8      	; 0x5a6a <__udivmodsi4_ep>
    5a62:	a2 1b       	sub	r26, r18
    5a64:	b3 0b       	sbc	r27, r19
    5a66:	e4 0b       	sbc	r30, r20
    5a68:	f5 0b       	sbc	r31, r21

00005a6a <__udivmodsi4_ep>:
    5a6a:	66 1f       	adc	r22, r22
    5a6c:	77 1f       	adc	r23, r23
    5a6e:	88 1f       	adc	r24, r24
    5a70:	99 1f       	adc	r25, r25
    5a72:	1a 94       	dec	r1
    5a74:	69 f7       	brne	.-38     	; 0x5a50 <__udivmodsi4_loop>
    5a76:	60 95       	com	r22
    5a78:	70 95       	com	r23
    5a7a:	80 95       	com	r24
    5a7c:	90 95       	com	r25
    5a7e:	9b 01       	movw	r18, r22
    5a80:	ac 01       	movw	r20, r24
    5a82:	bd 01       	movw	r22, r26
    5a84:	cf 01       	movw	r24, r30
    5a86:	08 95       	ret

00005a88 <__tablejump2__>:
    5a88:	ee 0f       	add	r30, r30
    5a8a:	ff 1f       	adc	r31, r31
    5a8c:	88 1f       	adc	r24, r24
    5a8e:	8b bf       	out	0x3b, r24	; 59
    5a90:	07 90       	elpm	r0, Z+
    5a92:	f6 91       	elpm	r31, Z
    5a94:	e0 2d       	mov	r30, r0
    5a96:	19 94       	eijmp

00005a98 <malloc>:
    5a98:	0f 93       	push	r16
    5a9a:	1f 93       	push	r17
    5a9c:	cf 93       	push	r28
    5a9e:	df 93       	push	r29
    5aa0:	82 30       	cpi	r24, 0x02	; 2
    5aa2:	91 05       	cpc	r25, r1
    5aa4:	10 f4       	brcc	.+4      	; 0x5aaa <malloc+0x12>
    5aa6:	82 e0       	ldi	r24, 0x02	; 2
    5aa8:	90 e0       	ldi	r25, 0x00	; 0
    5aaa:	e0 91 4a 15 	lds	r30, 0x154A	; 0x80154a <__flp>
    5aae:	f0 91 4b 15 	lds	r31, 0x154B	; 0x80154b <__flp+0x1>
    5ab2:	20 e0       	ldi	r18, 0x00	; 0
    5ab4:	30 e0       	ldi	r19, 0x00	; 0
    5ab6:	a0 e0       	ldi	r26, 0x00	; 0
    5ab8:	b0 e0       	ldi	r27, 0x00	; 0
    5aba:	30 97       	sbiw	r30, 0x00	; 0
    5abc:	19 f1       	breq	.+70     	; 0x5b04 <malloc+0x6c>
    5abe:	40 81       	ld	r20, Z
    5ac0:	51 81       	ldd	r21, Z+1	; 0x01
    5ac2:	02 81       	ldd	r16, Z+2	; 0x02
    5ac4:	13 81       	ldd	r17, Z+3	; 0x03
    5ac6:	48 17       	cp	r20, r24
    5ac8:	59 07       	cpc	r21, r25
    5aca:	c8 f0       	brcs	.+50     	; 0x5afe <malloc+0x66>
    5acc:	84 17       	cp	r24, r20
    5ace:	95 07       	cpc	r25, r21
    5ad0:	69 f4       	brne	.+26     	; 0x5aec <malloc+0x54>
    5ad2:	10 97       	sbiw	r26, 0x00	; 0
    5ad4:	31 f0       	breq	.+12     	; 0x5ae2 <malloc+0x4a>
    5ad6:	12 96       	adiw	r26, 0x02	; 2
    5ad8:	0c 93       	st	X, r16
    5ada:	12 97       	sbiw	r26, 0x02	; 2
    5adc:	13 96       	adiw	r26, 0x03	; 3
    5ade:	1c 93       	st	X, r17
    5ae0:	27 c0       	rjmp	.+78     	; 0x5b30 <malloc+0x98>
    5ae2:	00 93 4a 15 	sts	0x154A, r16	; 0x80154a <__flp>
    5ae6:	10 93 4b 15 	sts	0x154B, r17	; 0x80154b <__flp+0x1>
    5aea:	22 c0       	rjmp	.+68     	; 0x5b30 <malloc+0x98>
    5aec:	21 15       	cp	r18, r1
    5aee:	31 05       	cpc	r19, r1
    5af0:	19 f0       	breq	.+6      	; 0x5af8 <malloc+0x60>
    5af2:	42 17       	cp	r20, r18
    5af4:	53 07       	cpc	r21, r19
    5af6:	18 f4       	brcc	.+6      	; 0x5afe <malloc+0x66>
    5af8:	9a 01       	movw	r18, r20
    5afa:	bd 01       	movw	r22, r26
    5afc:	ef 01       	movw	r28, r30
    5afe:	df 01       	movw	r26, r30
    5b00:	f8 01       	movw	r30, r16
    5b02:	db cf       	rjmp	.-74     	; 0x5aba <malloc+0x22>
    5b04:	21 15       	cp	r18, r1
    5b06:	31 05       	cpc	r19, r1
    5b08:	f9 f0       	breq	.+62     	; 0x5b48 <malloc+0xb0>
    5b0a:	28 1b       	sub	r18, r24
    5b0c:	39 0b       	sbc	r19, r25
    5b0e:	24 30       	cpi	r18, 0x04	; 4
    5b10:	31 05       	cpc	r19, r1
    5b12:	80 f4       	brcc	.+32     	; 0x5b34 <malloc+0x9c>
    5b14:	8a 81       	ldd	r24, Y+2	; 0x02
    5b16:	9b 81       	ldd	r25, Y+3	; 0x03
    5b18:	61 15       	cp	r22, r1
    5b1a:	71 05       	cpc	r23, r1
    5b1c:	21 f0       	breq	.+8      	; 0x5b26 <malloc+0x8e>
    5b1e:	fb 01       	movw	r30, r22
    5b20:	93 83       	std	Z+3, r25	; 0x03
    5b22:	82 83       	std	Z+2, r24	; 0x02
    5b24:	04 c0       	rjmp	.+8      	; 0x5b2e <malloc+0x96>
    5b26:	90 93 4b 15 	sts	0x154B, r25	; 0x80154b <__flp+0x1>
    5b2a:	80 93 4a 15 	sts	0x154A, r24	; 0x80154a <__flp>
    5b2e:	fe 01       	movw	r30, r28
    5b30:	32 96       	adiw	r30, 0x02	; 2
    5b32:	44 c0       	rjmp	.+136    	; 0x5bbc <malloc+0x124>
    5b34:	fe 01       	movw	r30, r28
    5b36:	e2 0f       	add	r30, r18
    5b38:	f3 1f       	adc	r31, r19
    5b3a:	81 93       	st	Z+, r24
    5b3c:	91 93       	st	Z+, r25
    5b3e:	22 50       	subi	r18, 0x02	; 2
    5b40:	31 09       	sbc	r19, r1
    5b42:	39 83       	std	Y+1, r19	; 0x01
    5b44:	28 83       	st	Y, r18
    5b46:	3a c0       	rjmp	.+116    	; 0x5bbc <malloc+0x124>
    5b48:	20 91 48 15 	lds	r18, 0x1548	; 0x801548 <__brkval>
    5b4c:	30 91 49 15 	lds	r19, 0x1549	; 0x801549 <__brkval+0x1>
    5b50:	23 2b       	or	r18, r19
    5b52:	41 f4       	brne	.+16     	; 0x5b64 <malloc+0xcc>
    5b54:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5b58:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5b5c:	30 93 49 15 	sts	0x1549, r19	; 0x801549 <__brkval+0x1>
    5b60:	20 93 48 15 	sts	0x1548, r18	; 0x801548 <__brkval>
    5b64:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5b68:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5b6c:	21 15       	cp	r18, r1
    5b6e:	31 05       	cpc	r19, r1
    5b70:	41 f4       	brne	.+16     	; 0x5b82 <malloc+0xea>
    5b72:	2d b7       	in	r18, 0x3d	; 61
    5b74:	3e b7       	in	r19, 0x3e	; 62
    5b76:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5b7a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5b7e:	24 1b       	sub	r18, r20
    5b80:	35 0b       	sbc	r19, r21
    5b82:	e0 91 48 15 	lds	r30, 0x1548	; 0x801548 <__brkval>
    5b86:	f0 91 49 15 	lds	r31, 0x1549	; 0x801549 <__brkval+0x1>
    5b8a:	e2 17       	cp	r30, r18
    5b8c:	f3 07       	cpc	r31, r19
    5b8e:	a0 f4       	brcc	.+40     	; 0x5bb8 <malloc+0x120>
    5b90:	2e 1b       	sub	r18, r30
    5b92:	3f 0b       	sbc	r19, r31
    5b94:	28 17       	cp	r18, r24
    5b96:	39 07       	cpc	r19, r25
    5b98:	78 f0       	brcs	.+30     	; 0x5bb8 <malloc+0x120>
    5b9a:	ac 01       	movw	r20, r24
    5b9c:	4e 5f       	subi	r20, 0xFE	; 254
    5b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    5ba0:	24 17       	cp	r18, r20
    5ba2:	35 07       	cpc	r19, r21
    5ba4:	48 f0       	brcs	.+18     	; 0x5bb8 <malloc+0x120>
    5ba6:	4e 0f       	add	r20, r30
    5ba8:	5f 1f       	adc	r21, r31
    5baa:	50 93 49 15 	sts	0x1549, r21	; 0x801549 <__brkval+0x1>
    5bae:	40 93 48 15 	sts	0x1548, r20	; 0x801548 <__brkval>
    5bb2:	81 93       	st	Z+, r24
    5bb4:	91 93       	st	Z+, r25
    5bb6:	02 c0       	rjmp	.+4      	; 0x5bbc <malloc+0x124>
    5bb8:	e0 e0       	ldi	r30, 0x00	; 0
    5bba:	f0 e0       	ldi	r31, 0x00	; 0
    5bbc:	cf 01       	movw	r24, r30
    5bbe:	df 91       	pop	r29
    5bc0:	cf 91       	pop	r28
    5bc2:	1f 91       	pop	r17
    5bc4:	0f 91       	pop	r16
    5bc6:	08 95       	ret

00005bc8 <free>:
    5bc8:	cf 93       	push	r28
    5bca:	df 93       	push	r29
    5bcc:	00 97       	sbiw	r24, 0x00	; 0
    5bce:	09 f4       	brne	.+2      	; 0x5bd2 <free+0xa>
    5bd0:	81 c0       	rjmp	.+258    	; 0x5cd4 <free+0x10c>
    5bd2:	fc 01       	movw	r30, r24
    5bd4:	32 97       	sbiw	r30, 0x02	; 2
    5bd6:	13 82       	std	Z+3, r1	; 0x03
    5bd8:	12 82       	std	Z+2, r1	; 0x02
    5bda:	a0 91 4a 15 	lds	r26, 0x154A	; 0x80154a <__flp>
    5bde:	b0 91 4b 15 	lds	r27, 0x154B	; 0x80154b <__flp+0x1>
    5be2:	10 97       	sbiw	r26, 0x00	; 0
    5be4:	81 f4       	brne	.+32     	; 0x5c06 <free+0x3e>
    5be6:	20 81       	ld	r18, Z
    5be8:	31 81       	ldd	r19, Z+1	; 0x01
    5bea:	82 0f       	add	r24, r18
    5bec:	93 1f       	adc	r25, r19
    5bee:	20 91 48 15 	lds	r18, 0x1548	; 0x801548 <__brkval>
    5bf2:	30 91 49 15 	lds	r19, 0x1549	; 0x801549 <__brkval+0x1>
    5bf6:	28 17       	cp	r18, r24
    5bf8:	39 07       	cpc	r19, r25
    5bfa:	51 f5       	brne	.+84     	; 0x5c50 <free+0x88>
    5bfc:	f0 93 49 15 	sts	0x1549, r31	; 0x801549 <__brkval+0x1>
    5c00:	e0 93 48 15 	sts	0x1548, r30	; 0x801548 <__brkval>
    5c04:	67 c0       	rjmp	.+206    	; 0x5cd4 <free+0x10c>
    5c06:	ed 01       	movw	r28, r26
    5c08:	20 e0       	ldi	r18, 0x00	; 0
    5c0a:	30 e0       	ldi	r19, 0x00	; 0
    5c0c:	ce 17       	cp	r28, r30
    5c0e:	df 07       	cpc	r29, r31
    5c10:	40 f4       	brcc	.+16     	; 0x5c22 <free+0x5a>
    5c12:	4a 81       	ldd	r20, Y+2	; 0x02
    5c14:	5b 81       	ldd	r21, Y+3	; 0x03
    5c16:	9e 01       	movw	r18, r28
    5c18:	41 15       	cp	r20, r1
    5c1a:	51 05       	cpc	r21, r1
    5c1c:	f1 f0       	breq	.+60     	; 0x5c5a <free+0x92>
    5c1e:	ea 01       	movw	r28, r20
    5c20:	f5 cf       	rjmp	.-22     	; 0x5c0c <free+0x44>
    5c22:	d3 83       	std	Z+3, r29	; 0x03
    5c24:	c2 83       	std	Z+2, r28	; 0x02
    5c26:	40 81       	ld	r20, Z
    5c28:	51 81       	ldd	r21, Z+1	; 0x01
    5c2a:	84 0f       	add	r24, r20
    5c2c:	95 1f       	adc	r25, r21
    5c2e:	c8 17       	cp	r28, r24
    5c30:	d9 07       	cpc	r29, r25
    5c32:	59 f4       	brne	.+22     	; 0x5c4a <free+0x82>
    5c34:	88 81       	ld	r24, Y
    5c36:	99 81       	ldd	r25, Y+1	; 0x01
    5c38:	84 0f       	add	r24, r20
    5c3a:	95 1f       	adc	r25, r21
    5c3c:	02 96       	adiw	r24, 0x02	; 2
    5c3e:	91 83       	std	Z+1, r25	; 0x01
    5c40:	80 83       	st	Z, r24
    5c42:	8a 81       	ldd	r24, Y+2	; 0x02
    5c44:	9b 81       	ldd	r25, Y+3	; 0x03
    5c46:	93 83       	std	Z+3, r25	; 0x03
    5c48:	82 83       	std	Z+2, r24	; 0x02
    5c4a:	21 15       	cp	r18, r1
    5c4c:	31 05       	cpc	r19, r1
    5c4e:	29 f4       	brne	.+10     	; 0x5c5a <free+0x92>
    5c50:	f0 93 4b 15 	sts	0x154B, r31	; 0x80154b <__flp+0x1>
    5c54:	e0 93 4a 15 	sts	0x154A, r30	; 0x80154a <__flp>
    5c58:	3d c0       	rjmp	.+122    	; 0x5cd4 <free+0x10c>
    5c5a:	e9 01       	movw	r28, r18
    5c5c:	fb 83       	std	Y+3, r31	; 0x03
    5c5e:	ea 83       	std	Y+2, r30	; 0x02
    5c60:	49 91       	ld	r20, Y+
    5c62:	59 91       	ld	r21, Y+
    5c64:	c4 0f       	add	r28, r20
    5c66:	d5 1f       	adc	r29, r21
    5c68:	ec 17       	cp	r30, r28
    5c6a:	fd 07       	cpc	r31, r29
    5c6c:	61 f4       	brne	.+24     	; 0x5c86 <free+0xbe>
    5c6e:	80 81       	ld	r24, Z
    5c70:	91 81       	ldd	r25, Z+1	; 0x01
    5c72:	84 0f       	add	r24, r20
    5c74:	95 1f       	adc	r25, r21
    5c76:	02 96       	adiw	r24, 0x02	; 2
    5c78:	e9 01       	movw	r28, r18
    5c7a:	99 83       	std	Y+1, r25	; 0x01
    5c7c:	88 83       	st	Y, r24
    5c7e:	82 81       	ldd	r24, Z+2	; 0x02
    5c80:	93 81       	ldd	r25, Z+3	; 0x03
    5c82:	9b 83       	std	Y+3, r25	; 0x03
    5c84:	8a 83       	std	Y+2, r24	; 0x02
    5c86:	e0 e0       	ldi	r30, 0x00	; 0
    5c88:	f0 e0       	ldi	r31, 0x00	; 0
    5c8a:	12 96       	adiw	r26, 0x02	; 2
    5c8c:	8d 91       	ld	r24, X+
    5c8e:	9c 91       	ld	r25, X
    5c90:	13 97       	sbiw	r26, 0x03	; 3
    5c92:	00 97       	sbiw	r24, 0x00	; 0
    5c94:	19 f0       	breq	.+6      	; 0x5c9c <free+0xd4>
    5c96:	fd 01       	movw	r30, r26
    5c98:	dc 01       	movw	r26, r24
    5c9a:	f7 cf       	rjmp	.-18     	; 0x5c8a <free+0xc2>
    5c9c:	8d 91       	ld	r24, X+
    5c9e:	9c 91       	ld	r25, X
    5ca0:	11 97       	sbiw	r26, 0x01	; 1
    5ca2:	9d 01       	movw	r18, r26
    5ca4:	2e 5f       	subi	r18, 0xFE	; 254
    5ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    5ca8:	82 0f       	add	r24, r18
    5caa:	93 1f       	adc	r25, r19
    5cac:	20 91 48 15 	lds	r18, 0x1548	; 0x801548 <__brkval>
    5cb0:	30 91 49 15 	lds	r19, 0x1549	; 0x801549 <__brkval+0x1>
    5cb4:	28 17       	cp	r18, r24
    5cb6:	39 07       	cpc	r19, r25
    5cb8:	69 f4       	brne	.+26     	; 0x5cd4 <free+0x10c>
    5cba:	30 97       	sbiw	r30, 0x00	; 0
    5cbc:	29 f4       	brne	.+10     	; 0x5cc8 <free+0x100>
    5cbe:	10 92 4b 15 	sts	0x154B, r1	; 0x80154b <__flp+0x1>
    5cc2:	10 92 4a 15 	sts	0x154A, r1	; 0x80154a <__flp>
    5cc6:	02 c0       	rjmp	.+4      	; 0x5ccc <free+0x104>
    5cc8:	13 82       	std	Z+3, r1	; 0x03
    5cca:	12 82       	std	Z+2, r1	; 0x02
    5ccc:	b0 93 49 15 	sts	0x1549, r27	; 0x801549 <__brkval+0x1>
    5cd0:	a0 93 48 15 	sts	0x1548, r26	; 0x801548 <__brkval>
    5cd4:	df 91       	pop	r29
    5cd6:	cf 91       	pop	r28
    5cd8:	08 95       	ret

00005cda <abort>:
    5cda:	81 e0       	ldi	r24, 0x01	; 1
    5cdc:	90 e0       	ldi	r25, 0x00	; 0
    5cde:	f8 94       	cli
    5ce0:	7d c3       	rjmp	.+1786   	; 0x63dc <_exit>

00005ce2 <memcpy>:
    5ce2:	fb 01       	movw	r30, r22
    5ce4:	dc 01       	movw	r26, r24
    5ce6:	02 c0       	rjmp	.+4      	; 0x5cec <memcpy+0xa>
    5ce8:	01 90       	ld	r0, Z+
    5cea:	0d 92       	st	X+, r0
    5cec:	41 50       	subi	r20, 0x01	; 1
    5cee:	50 40       	sbci	r21, 0x00	; 0
    5cf0:	d8 f7       	brcc	.-10     	; 0x5ce8 <memcpy+0x6>
    5cf2:	08 95       	ret

00005cf4 <memset>:
    5cf4:	dc 01       	movw	r26, r24
    5cf6:	01 c0       	rjmp	.+2      	; 0x5cfa <memset+0x6>
    5cf8:	6d 93       	st	X+, r22
    5cfa:	41 50       	subi	r20, 0x01	; 1
    5cfc:	50 40       	sbci	r21, 0x00	; 0
    5cfe:	e0 f7       	brcc	.-8      	; 0x5cf8 <memset+0x4>
    5d00:	08 95       	ret

00005d02 <strcasestr>:
    5d02:	fb 01       	movw	r30, r22
    5d04:	51 91       	ld	r21, Z+
    5d06:	55 23       	and	r21, r21
    5d08:	b1 f0       	breq	.+44     	; 0x5d36 <strcasestr+0x34>
    5d0a:	bf 01       	movw	r22, r30
    5d0c:	dc 01       	movw	r26, r24
    5d0e:	05 2e       	mov	r0, r21
    5d10:	4d 91       	ld	r20, X+
    5d12:	44 23       	and	r20, r20
    5d14:	69 f0       	breq	.+26     	; 0x5d30 <strcasestr+0x2e>
    5d16:	10 d0       	rcall	.+32     	; 0x5d38 <strcasestr+0x36>
    5d18:	d9 f7       	brne	.-10     	; 0x5d10 <strcasestr+0xe>
    5d1a:	cd 01       	movw	r24, r26
    5d1c:	01 90       	ld	r0, Z+
    5d1e:	00 20       	and	r0, r0
    5d20:	49 f0       	breq	.+18     	; 0x5d34 <strcasestr+0x32>
    5d22:	4d 91       	ld	r20, X+
    5d24:	41 11       	cpse	r20, r1
    5d26:	08 d0       	rcall	.+16     	; 0x5d38 <strcasestr+0x36>
    5d28:	c9 f3       	breq	.-14     	; 0x5d1c <strcasestr+0x1a>
    5d2a:	fb 01       	movw	r30, r22
    5d2c:	41 11       	cpse	r20, r1
    5d2e:	ee cf       	rjmp	.-36     	; 0x5d0c <strcasestr+0xa>
    5d30:	81 e0       	ldi	r24, 0x01	; 1
    5d32:	90 e0       	ldi	r25, 0x00	; 0
    5d34:	01 97       	sbiw	r24, 0x01	; 1
    5d36:	08 95       	ret
    5d38:	40 25       	eor	r20, r0
    5d3a:	39 f0       	breq	.+14     	; 0x5d4a <strcasestr+0x48>
    5d3c:	40 32       	cpi	r20, 0x20	; 32
    5d3e:	29 f4       	brne	.+10     	; 0x5d4a <strcasestr+0x48>
    5d40:	40 29       	or	r20, r0
    5d42:	4b 57       	subi	r20, 0x7B	; 123
    5d44:	46 5e       	subi	r20, 0xE6	; 230
    5d46:	08 f0       	brcs	.+2      	; 0x5d4a <strcasestr+0x48>
    5d48:	18 94       	sez
    5d4a:	08 95       	ret

00005d4c <strcat>:
    5d4c:	fb 01       	movw	r30, r22
    5d4e:	dc 01       	movw	r26, r24
    5d50:	0d 90       	ld	r0, X+
    5d52:	00 20       	and	r0, r0
    5d54:	e9 f7       	brne	.-6      	; 0x5d50 <strcat+0x4>
    5d56:	11 97       	sbiw	r26, 0x01	; 1
    5d58:	01 90       	ld	r0, Z+
    5d5a:	0d 92       	st	X+, r0
    5d5c:	00 20       	and	r0, r0
    5d5e:	e1 f7       	brne	.-8      	; 0x5d58 <strcat+0xc>
    5d60:	08 95       	ret

00005d62 <strcpy>:
    5d62:	fb 01       	movw	r30, r22
    5d64:	dc 01       	movw	r26, r24
    5d66:	01 90       	ld	r0, Z+
    5d68:	0d 92       	st	X+, r0
    5d6a:	00 20       	and	r0, r0
    5d6c:	e1 f7       	brne	.-8      	; 0x5d66 <strcpy+0x4>
    5d6e:	08 95       	ret

00005d70 <strncasecmp>:
    5d70:	fb 01       	movw	r30, r22
    5d72:	dc 01       	movw	r26, r24
    5d74:	41 50       	subi	r20, 0x01	; 1
    5d76:	50 40       	sbci	r21, 0x00	; 0
    5d78:	88 f0       	brcs	.+34     	; 0x5d9c <strncasecmp+0x2c>
    5d7a:	8d 91       	ld	r24, X+
    5d7c:	81 34       	cpi	r24, 0x41	; 65
    5d7e:	1c f0       	brlt	.+6      	; 0x5d86 <strncasecmp+0x16>
    5d80:	8b 35       	cpi	r24, 0x5B	; 91
    5d82:	0c f4       	brge	.+2      	; 0x5d86 <strncasecmp+0x16>
    5d84:	80 5e       	subi	r24, 0xE0	; 224
    5d86:	61 91       	ld	r22, Z+
    5d88:	61 34       	cpi	r22, 0x41	; 65
    5d8a:	1c f0       	brlt	.+6      	; 0x5d92 <strncasecmp+0x22>
    5d8c:	6b 35       	cpi	r22, 0x5B	; 91
    5d8e:	0c f4       	brge	.+2      	; 0x5d92 <strncasecmp+0x22>
    5d90:	60 5e       	subi	r22, 0xE0	; 224
    5d92:	86 1b       	sub	r24, r22
    5d94:	61 11       	cpse	r22, r1
    5d96:	71 f3       	breq	.-36     	; 0x5d74 <strncasecmp+0x4>
    5d98:	99 0b       	sbc	r25, r25
    5d9a:	08 95       	ret
    5d9c:	88 1b       	sub	r24, r24
    5d9e:	fc cf       	rjmp	.-8      	; 0x5d98 <strncasecmp+0x28>

00005da0 <printf>:
    5da0:	cf 93       	push	r28
    5da2:	df 93       	push	r29
    5da4:	cd b7       	in	r28, 0x3d	; 61
    5da6:	de b7       	in	r29, 0x3e	; 62
    5da8:	ae 01       	movw	r20, r28
    5daa:	4a 5f       	subi	r20, 0xFA	; 250
    5dac:	5f 4f       	sbci	r21, 0xFF	; 255
    5dae:	fa 01       	movw	r30, r20
    5db0:	61 91       	ld	r22, Z+
    5db2:	71 91       	ld	r23, Z+
    5db4:	af 01       	movw	r20, r30
    5db6:	80 91 4e 15 	lds	r24, 0x154E	; 0x80154e <__iob+0x2>
    5dba:	90 91 4f 15 	lds	r25, 0x154F	; 0x80154f <__iob+0x3>
    5dbe:	61 d0       	rcall	.+194    	; 0x5e82 <vfprintf>
    5dc0:	df 91       	pop	r29
    5dc2:	cf 91       	pop	r28
    5dc4:	08 95       	ret

00005dc6 <puts>:
    5dc6:	0f 93       	push	r16
    5dc8:	1f 93       	push	r17
    5dca:	cf 93       	push	r28
    5dcc:	df 93       	push	r29
    5dce:	e0 91 4e 15 	lds	r30, 0x154E	; 0x80154e <__iob+0x2>
    5dd2:	f0 91 4f 15 	lds	r31, 0x154F	; 0x80154f <__iob+0x3>
    5dd6:	23 81       	ldd	r18, Z+3	; 0x03
    5dd8:	21 ff       	sbrs	r18, 1
    5dda:	1b c0       	rjmp	.+54     	; 0x5e12 <puts+0x4c>
    5ddc:	8c 01       	movw	r16, r24
    5dde:	d0 e0       	ldi	r29, 0x00	; 0
    5de0:	c0 e0       	ldi	r28, 0x00	; 0
    5de2:	f8 01       	movw	r30, r16
    5de4:	81 91       	ld	r24, Z+
    5de6:	8f 01       	movw	r16, r30
    5de8:	60 91 4e 15 	lds	r22, 0x154E	; 0x80154e <__iob+0x2>
    5dec:	70 91 4f 15 	lds	r23, 0x154F	; 0x80154f <__iob+0x3>
    5df0:	db 01       	movw	r26, r22
    5df2:	18 96       	adiw	r26, 0x08	; 8
    5df4:	ed 91       	ld	r30, X+
    5df6:	fc 91       	ld	r31, X
    5df8:	19 97       	sbiw	r26, 0x09	; 9
    5dfa:	88 23       	and	r24, r24
    5dfc:	31 f0       	breq	.+12     	; 0x5e0a <puts+0x44>
    5dfe:	19 95       	eicall
    5e00:	89 2b       	or	r24, r25
    5e02:	79 f3       	breq	.-34     	; 0x5de2 <puts+0x1c>
    5e04:	df ef       	ldi	r29, 0xFF	; 255
    5e06:	cf ef       	ldi	r28, 0xFF	; 255
    5e08:	ec cf       	rjmp	.-40     	; 0x5de2 <puts+0x1c>
    5e0a:	8a e0       	ldi	r24, 0x0A	; 10
    5e0c:	19 95       	eicall
    5e0e:	89 2b       	or	r24, r25
    5e10:	19 f0       	breq	.+6      	; 0x5e18 <puts+0x52>
    5e12:	8f ef       	ldi	r24, 0xFF	; 255
    5e14:	9f ef       	ldi	r25, 0xFF	; 255
    5e16:	02 c0       	rjmp	.+4      	; 0x5e1c <puts+0x56>
    5e18:	8d 2f       	mov	r24, r29
    5e1a:	9c 2f       	mov	r25, r28
    5e1c:	df 91       	pop	r29
    5e1e:	cf 91       	pop	r28
    5e20:	1f 91       	pop	r17
    5e22:	0f 91       	pop	r16
    5e24:	08 95       	ret

00005e26 <sprintf>:
    5e26:	0f 93       	push	r16
    5e28:	1f 93       	push	r17
    5e2a:	cf 93       	push	r28
    5e2c:	df 93       	push	r29
    5e2e:	cd b7       	in	r28, 0x3d	; 61
    5e30:	de b7       	in	r29, 0x3e	; 62
    5e32:	2e 97       	sbiw	r28, 0x0e	; 14
    5e34:	0f b6       	in	r0, 0x3f	; 63
    5e36:	f8 94       	cli
    5e38:	de bf       	out	0x3e, r29	; 62
    5e3a:	0f be       	out	0x3f, r0	; 63
    5e3c:	cd bf       	out	0x3d, r28	; 61
    5e3e:	0e 89       	ldd	r16, Y+22	; 0x16
    5e40:	1f 89       	ldd	r17, Y+23	; 0x17
    5e42:	86 e0       	ldi	r24, 0x06	; 6
    5e44:	8c 83       	std	Y+4, r24	; 0x04
    5e46:	1a 83       	std	Y+2, r17	; 0x02
    5e48:	09 83       	std	Y+1, r16	; 0x01
    5e4a:	8f ef       	ldi	r24, 0xFF	; 255
    5e4c:	9f e7       	ldi	r25, 0x7F	; 127
    5e4e:	9e 83       	std	Y+6, r25	; 0x06
    5e50:	8d 83       	std	Y+5, r24	; 0x05
    5e52:	ae 01       	movw	r20, r28
    5e54:	46 5e       	subi	r20, 0xE6	; 230
    5e56:	5f 4f       	sbci	r21, 0xFF	; 255
    5e58:	68 8d       	ldd	r22, Y+24	; 0x18
    5e5a:	79 8d       	ldd	r23, Y+25	; 0x19
    5e5c:	ce 01       	movw	r24, r28
    5e5e:	01 96       	adiw	r24, 0x01	; 1
    5e60:	10 d0       	rcall	.+32     	; 0x5e82 <vfprintf>
    5e62:	ef 81       	ldd	r30, Y+7	; 0x07
    5e64:	f8 85       	ldd	r31, Y+8	; 0x08
    5e66:	e0 0f       	add	r30, r16
    5e68:	f1 1f       	adc	r31, r17
    5e6a:	10 82       	st	Z, r1
    5e6c:	2e 96       	adiw	r28, 0x0e	; 14
    5e6e:	0f b6       	in	r0, 0x3f	; 63
    5e70:	f8 94       	cli
    5e72:	de bf       	out	0x3e, r29	; 62
    5e74:	0f be       	out	0x3f, r0	; 63
    5e76:	cd bf       	out	0x3d, r28	; 61
    5e78:	df 91       	pop	r29
    5e7a:	cf 91       	pop	r28
    5e7c:	1f 91       	pop	r17
    5e7e:	0f 91       	pop	r16
    5e80:	08 95       	ret

00005e82 <vfprintf>:
    5e82:	2f 92       	push	r2
    5e84:	3f 92       	push	r3
    5e86:	4f 92       	push	r4
    5e88:	5f 92       	push	r5
    5e8a:	6f 92       	push	r6
    5e8c:	7f 92       	push	r7
    5e8e:	8f 92       	push	r8
    5e90:	9f 92       	push	r9
    5e92:	af 92       	push	r10
    5e94:	bf 92       	push	r11
    5e96:	cf 92       	push	r12
    5e98:	df 92       	push	r13
    5e9a:	ef 92       	push	r14
    5e9c:	ff 92       	push	r15
    5e9e:	0f 93       	push	r16
    5ea0:	1f 93       	push	r17
    5ea2:	cf 93       	push	r28
    5ea4:	df 93       	push	r29
    5ea6:	cd b7       	in	r28, 0x3d	; 61
    5ea8:	de b7       	in	r29, 0x3e	; 62
    5eaa:	2b 97       	sbiw	r28, 0x0b	; 11
    5eac:	0f b6       	in	r0, 0x3f	; 63
    5eae:	f8 94       	cli
    5eb0:	de bf       	out	0x3e, r29	; 62
    5eb2:	0f be       	out	0x3f, r0	; 63
    5eb4:	cd bf       	out	0x3d, r28	; 61
    5eb6:	6c 01       	movw	r12, r24
    5eb8:	7b 01       	movw	r14, r22
    5eba:	8a 01       	movw	r16, r20
    5ebc:	fc 01       	movw	r30, r24
    5ebe:	17 82       	std	Z+7, r1	; 0x07
    5ec0:	16 82       	std	Z+6, r1	; 0x06
    5ec2:	83 81       	ldd	r24, Z+3	; 0x03
    5ec4:	81 ff       	sbrs	r24, 1
    5ec6:	bf c1       	rjmp	.+894    	; 0x6246 <vfprintf+0x3c4>
    5ec8:	ce 01       	movw	r24, r28
    5eca:	01 96       	adiw	r24, 0x01	; 1
    5ecc:	3c 01       	movw	r6, r24
    5ece:	f6 01       	movw	r30, r12
    5ed0:	93 81       	ldd	r25, Z+3	; 0x03
    5ed2:	f7 01       	movw	r30, r14
    5ed4:	93 fd       	sbrc	r25, 3
    5ed6:	85 91       	lpm	r24, Z+
    5ed8:	93 ff       	sbrs	r25, 3
    5eda:	81 91       	ld	r24, Z+
    5edc:	7f 01       	movw	r14, r30
    5ede:	88 23       	and	r24, r24
    5ee0:	09 f4       	brne	.+2      	; 0x5ee4 <vfprintf+0x62>
    5ee2:	ad c1       	rjmp	.+858    	; 0x623e <vfprintf+0x3bc>
    5ee4:	85 32       	cpi	r24, 0x25	; 37
    5ee6:	39 f4       	brne	.+14     	; 0x5ef6 <vfprintf+0x74>
    5ee8:	93 fd       	sbrc	r25, 3
    5eea:	85 91       	lpm	r24, Z+
    5eec:	93 ff       	sbrs	r25, 3
    5eee:	81 91       	ld	r24, Z+
    5ef0:	7f 01       	movw	r14, r30
    5ef2:	85 32       	cpi	r24, 0x25	; 37
    5ef4:	21 f4       	brne	.+8      	; 0x5efe <vfprintf+0x7c>
    5ef6:	b6 01       	movw	r22, r12
    5ef8:	90 e0       	ldi	r25, 0x00	; 0
    5efa:	d6 d1       	rcall	.+940    	; 0x62a8 <fputc>
    5efc:	e8 cf       	rjmp	.-48     	; 0x5ece <vfprintf+0x4c>
    5efe:	91 2c       	mov	r9, r1
    5f00:	21 2c       	mov	r2, r1
    5f02:	31 2c       	mov	r3, r1
    5f04:	ff e1       	ldi	r31, 0x1F	; 31
    5f06:	f3 15       	cp	r31, r3
    5f08:	d8 f0       	brcs	.+54     	; 0x5f40 <vfprintf+0xbe>
    5f0a:	8b 32       	cpi	r24, 0x2B	; 43
    5f0c:	79 f0       	breq	.+30     	; 0x5f2c <vfprintf+0xaa>
    5f0e:	38 f4       	brcc	.+14     	; 0x5f1e <vfprintf+0x9c>
    5f10:	80 32       	cpi	r24, 0x20	; 32
    5f12:	79 f0       	breq	.+30     	; 0x5f32 <vfprintf+0xb0>
    5f14:	83 32       	cpi	r24, 0x23	; 35
    5f16:	a1 f4       	brne	.+40     	; 0x5f40 <vfprintf+0xbe>
    5f18:	23 2d       	mov	r18, r3
    5f1a:	20 61       	ori	r18, 0x10	; 16
    5f1c:	1d c0       	rjmp	.+58     	; 0x5f58 <vfprintf+0xd6>
    5f1e:	8d 32       	cpi	r24, 0x2D	; 45
    5f20:	61 f0       	breq	.+24     	; 0x5f3a <vfprintf+0xb8>
    5f22:	80 33       	cpi	r24, 0x30	; 48
    5f24:	69 f4       	brne	.+26     	; 0x5f40 <vfprintf+0xbe>
    5f26:	23 2d       	mov	r18, r3
    5f28:	21 60       	ori	r18, 0x01	; 1
    5f2a:	16 c0       	rjmp	.+44     	; 0x5f58 <vfprintf+0xd6>
    5f2c:	83 2d       	mov	r24, r3
    5f2e:	82 60       	ori	r24, 0x02	; 2
    5f30:	38 2e       	mov	r3, r24
    5f32:	e3 2d       	mov	r30, r3
    5f34:	e4 60       	ori	r30, 0x04	; 4
    5f36:	3e 2e       	mov	r3, r30
    5f38:	2a c0       	rjmp	.+84     	; 0x5f8e <vfprintf+0x10c>
    5f3a:	f3 2d       	mov	r31, r3
    5f3c:	f8 60       	ori	r31, 0x08	; 8
    5f3e:	1d c0       	rjmp	.+58     	; 0x5f7a <vfprintf+0xf8>
    5f40:	37 fc       	sbrc	r3, 7
    5f42:	2d c0       	rjmp	.+90     	; 0x5f9e <vfprintf+0x11c>
    5f44:	20 ed       	ldi	r18, 0xD0	; 208
    5f46:	28 0f       	add	r18, r24
    5f48:	2a 30       	cpi	r18, 0x0A	; 10
    5f4a:	40 f0       	brcs	.+16     	; 0x5f5c <vfprintf+0xda>
    5f4c:	8e 32       	cpi	r24, 0x2E	; 46
    5f4e:	b9 f4       	brne	.+46     	; 0x5f7e <vfprintf+0xfc>
    5f50:	36 fc       	sbrc	r3, 6
    5f52:	75 c1       	rjmp	.+746    	; 0x623e <vfprintf+0x3bc>
    5f54:	23 2d       	mov	r18, r3
    5f56:	20 64       	ori	r18, 0x40	; 64
    5f58:	32 2e       	mov	r3, r18
    5f5a:	19 c0       	rjmp	.+50     	; 0x5f8e <vfprintf+0x10c>
    5f5c:	36 fe       	sbrs	r3, 6
    5f5e:	06 c0       	rjmp	.+12     	; 0x5f6c <vfprintf+0xea>
    5f60:	8a e0       	ldi	r24, 0x0A	; 10
    5f62:	98 9e       	mul	r9, r24
    5f64:	20 0d       	add	r18, r0
    5f66:	11 24       	eor	r1, r1
    5f68:	92 2e       	mov	r9, r18
    5f6a:	11 c0       	rjmp	.+34     	; 0x5f8e <vfprintf+0x10c>
    5f6c:	ea e0       	ldi	r30, 0x0A	; 10
    5f6e:	2e 9e       	mul	r2, r30
    5f70:	20 0d       	add	r18, r0
    5f72:	11 24       	eor	r1, r1
    5f74:	22 2e       	mov	r2, r18
    5f76:	f3 2d       	mov	r31, r3
    5f78:	f0 62       	ori	r31, 0x20	; 32
    5f7a:	3f 2e       	mov	r3, r31
    5f7c:	08 c0       	rjmp	.+16     	; 0x5f8e <vfprintf+0x10c>
    5f7e:	8c 36       	cpi	r24, 0x6C	; 108
    5f80:	21 f4       	brne	.+8      	; 0x5f8a <vfprintf+0x108>
    5f82:	83 2d       	mov	r24, r3
    5f84:	80 68       	ori	r24, 0x80	; 128
    5f86:	38 2e       	mov	r3, r24
    5f88:	02 c0       	rjmp	.+4      	; 0x5f8e <vfprintf+0x10c>
    5f8a:	88 36       	cpi	r24, 0x68	; 104
    5f8c:	41 f4       	brne	.+16     	; 0x5f9e <vfprintf+0x11c>
    5f8e:	f7 01       	movw	r30, r14
    5f90:	93 fd       	sbrc	r25, 3
    5f92:	85 91       	lpm	r24, Z+
    5f94:	93 ff       	sbrs	r25, 3
    5f96:	81 91       	ld	r24, Z+
    5f98:	7f 01       	movw	r14, r30
    5f9a:	81 11       	cpse	r24, r1
    5f9c:	b3 cf       	rjmp	.-154    	; 0x5f04 <vfprintf+0x82>
    5f9e:	98 2f       	mov	r25, r24
    5fa0:	9f 7d       	andi	r25, 0xDF	; 223
    5fa2:	95 54       	subi	r25, 0x45	; 69
    5fa4:	93 30       	cpi	r25, 0x03	; 3
    5fa6:	28 f4       	brcc	.+10     	; 0x5fb2 <vfprintf+0x130>
    5fa8:	0c 5f       	subi	r16, 0xFC	; 252
    5faa:	1f 4f       	sbci	r17, 0xFF	; 255
    5fac:	9f e3       	ldi	r25, 0x3F	; 63
    5fae:	99 83       	std	Y+1, r25	; 0x01
    5fb0:	0d c0       	rjmp	.+26     	; 0x5fcc <vfprintf+0x14a>
    5fb2:	83 36       	cpi	r24, 0x63	; 99
    5fb4:	31 f0       	breq	.+12     	; 0x5fc2 <vfprintf+0x140>
    5fb6:	83 37       	cpi	r24, 0x73	; 115
    5fb8:	71 f0       	breq	.+28     	; 0x5fd6 <vfprintf+0x154>
    5fba:	83 35       	cpi	r24, 0x53	; 83
    5fbc:	09 f0       	breq	.+2      	; 0x5fc0 <vfprintf+0x13e>
    5fbe:	55 c0       	rjmp	.+170    	; 0x606a <vfprintf+0x1e8>
    5fc0:	20 c0       	rjmp	.+64     	; 0x6002 <vfprintf+0x180>
    5fc2:	f8 01       	movw	r30, r16
    5fc4:	80 81       	ld	r24, Z
    5fc6:	89 83       	std	Y+1, r24	; 0x01
    5fc8:	0e 5f       	subi	r16, 0xFE	; 254
    5fca:	1f 4f       	sbci	r17, 0xFF	; 255
    5fcc:	88 24       	eor	r8, r8
    5fce:	83 94       	inc	r8
    5fd0:	91 2c       	mov	r9, r1
    5fd2:	53 01       	movw	r10, r6
    5fd4:	12 c0       	rjmp	.+36     	; 0x5ffa <vfprintf+0x178>
    5fd6:	28 01       	movw	r4, r16
    5fd8:	f2 e0       	ldi	r31, 0x02	; 2
    5fda:	4f 0e       	add	r4, r31
    5fdc:	51 1c       	adc	r5, r1
    5fde:	f8 01       	movw	r30, r16
    5fe0:	a0 80       	ld	r10, Z
    5fe2:	b1 80       	ldd	r11, Z+1	; 0x01
    5fe4:	36 fe       	sbrs	r3, 6
    5fe6:	03 c0       	rjmp	.+6      	; 0x5fee <vfprintf+0x16c>
    5fe8:	69 2d       	mov	r22, r9
    5fea:	70 e0       	ldi	r23, 0x00	; 0
    5fec:	02 c0       	rjmp	.+4      	; 0x5ff2 <vfprintf+0x170>
    5fee:	6f ef       	ldi	r22, 0xFF	; 255
    5ff0:	7f ef       	ldi	r23, 0xFF	; 255
    5ff2:	c5 01       	movw	r24, r10
    5ff4:	4e d1       	rcall	.+668    	; 0x6292 <strnlen>
    5ff6:	4c 01       	movw	r8, r24
    5ff8:	82 01       	movw	r16, r4
    5ffa:	f3 2d       	mov	r31, r3
    5ffc:	ff 77       	andi	r31, 0x7F	; 127
    5ffe:	3f 2e       	mov	r3, r31
    6000:	15 c0       	rjmp	.+42     	; 0x602c <vfprintf+0x1aa>
    6002:	28 01       	movw	r4, r16
    6004:	22 e0       	ldi	r18, 0x02	; 2
    6006:	42 0e       	add	r4, r18
    6008:	51 1c       	adc	r5, r1
    600a:	f8 01       	movw	r30, r16
    600c:	a0 80       	ld	r10, Z
    600e:	b1 80       	ldd	r11, Z+1	; 0x01
    6010:	36 fe       	sbrs	r3, 6
    6012:	03 c0       	rjmp	.+6      	; 0x601a <vfprintf+0x198>
    6014:	69 2d       	mov	r22, r9
    6016:	70 e0       	ldi	r23, 0x00	; 0
    6018:	02 c0       	rjmp	.+4      	; 0x601e <vfprintf+0x19c>
    601a:	6f ef       	ldi	r22, 0xFF	; 255
    601c:	7f ef       	ldi	r23, 0xFF	; 255
    601e:	c5 01       	movw	r24, r10
    6020:	2d d1       	rcall	.+602    	; 0x627c <strnlen_P>
    6022:	4c 01       	movw	r8, r24
    6024:	f3 2d       	mov	r31, r3
    6026:	f0 68       	ori	r31, 0x80	; 128
    6028:	3f 2e       	mov	r3, r31
    602a:	82 01       	movw	r16, r4
    602c:	33 fc       	sbrc	r3, 3
    602e:	19 c0       	rjmp	.+50     	; 0x6062 <vfprintf+0x1e0>
    6030:	82 2d       	mov	r24, r2
    6032:	90 e0       	ldi	r25, 0x00	; 0
    6034:	88 16       	cp	r8, r24
    6036:	99 06       	cpc	r9, r25
    6038:	a0 f4       	brcc	.+40     	; 0x6062 <vfprintf+0x1e0>
    603a:	b6 01       	movw	r22, r12
    603c:	80 e2       	ldi	r24, 0x20	; 32
    603e:	90 e0       	ldi	r25, 0x00	; 0
    6040:	33 d1       	rcall	.+614    	; 0x62a8 <fputc>
    6042:	2a 94       	dec	r2
    6044:	f5 cf       	rjmp	.-22     	; 0x6030 <vfprintf+0x1ae>
    6046:	f5 01       	movw	r30, r10
    6048:	37 fc       	sbrc	r3, 7
    604a:	85 91       	lpm	r24, Z+
    604c:	37 fe       	sbrs	r3, 7
    604e:	81 91       	ld	r24, Z+
    6050:	5f 01       	movw	r10, r30
    6052:	b6 01       	movw	r22, r12
    6054:	90 e0       	ldi	r25, 0x00	; 0
    6056:	28 d1       	rcall	.+592    	; 0x62a8 <fputc>
    6058:	21 10       	cpse	r2, r1
    605a:	2a 94       	dec	r2
    605c:	21 e0       	ldi	r18, 0x01	; 1
    605e:	82 1a       	sub	r8, r18
    6060:	91 08       	sbc	r9, r1
    6062:	81 14       	cp	r8, r1
    6064:	91 04       	cpc	r9, r1
    6066:	79 f7       	brne	.-34     	; 0x6046 <vfprintf+0x1c4>
    6068:	e1 c0       	rjmp	.+450    	; 0x622c <vfprintf+0x3aa>
    606a:	84 36       	cpi	r24, 0x64	; 100
    606c:	11 f0       	breq	.+4      	; 0x6072 <vfprintf+0x1f0>
    606e:	89 36       	cpi	r24, 0x69	; 105
    6070:	39 f5       	brne	.+78     	; 0x60c0 <vfprintf+0x23e>
    6072:	f8 01       	movw	r30, r16
    6074:	37 fe       	sbrs	r3, 7
    6076:	07 c0       	rjmp	.+14     	; 0x6086 <vfprintf+0x204>
    6078:	60 81       	ld	r22, Z
    607a:	71 81       	ldd	r23, Z+1	; 0x01
    607c:	82 81       	ldd	r24, Z+2	; 0x02
    607e:	93 81       	ldd	r25, Z+3	; 0x03
    6080:	0c 5f       	subi	r16, 0xFC	; 252
    6082:	1f 4f       	sbci	r17, 0xFF	; 255
    6084:	08 c0       	rjmp	.+16     	; 0x6096 <vfprintf+0x214>
    6086:	60 81       	ld	r22, Z
    6088:	71 81       	ldd	r23, Z+1	; 0x01
    608a:	07 2e       	mov	r0, r23
    608c:	00 0c       	add	r0, r0
    608e:	88 0b       	sbc	r24, r24
    6090:	99 0b       	sbc	r25, r25
    6092:	0e 5f       	subi	r16, 0xFE	; 254
    6094:	1f 4f       	sbci	r17, 0xFF	; 255
    6096:	f3 2d       	mov	r31, r3
    6098:	ff 76       	andi	r31, 0x6F	; 111
    609a:	3f 2e       	mov	r3, r31
    609c:	97 ff       	sbrs	r25, 7
    609e:	09 c0       	rjmp	.+18     	; 0x60b2 <vfprintf+0x230>
    60a0:	90 95       	com	r25
    60a2:	80 95       	com	r24
    60a4:	70 95       	com	r23
    60a6:	61 95       	neg	r22
    60a8:	7f 4f       	sbci	r23, 0xFF	; 255
    60aa:	8f 4f       	sbci	r24, 0xFF	; 255
    60ac:	9f 4f       	sbci	r25, 0xFF	; 255
    60ae:	f0 68       	ori	r31, 0x80	; 128
    60b0:	3f 2e       	mov	r3, r31
    60b2:	2a e0       	ldi	r18, 0x0A	; 10
    60b4:	30 e0       	ldi	r19, 0x00	; 0
    60b6:	a3 01       	movw	r20, r6
    60b8:	33 d1       	rcall	.+614    	; 0x6320 <__ultoa_invert>
    60ba:	88 2e       	mov	r8, r24
    60bc:	86 18       	sub	r8, r6
    60be:	44 c0       	rjmp	.+136    	; 0x6148 <vfprintf+0x2c6>
    60c0:	85 37       	cpi	r24, 0x75	; 117
    60c2:	31 f4       	brne	.+12     	; 0x60d0 <vfprintf+0x24e>
    60c4:	23 2d       	mov	r18, r3
    60c6:	2f 7e       	andi	r18, 0xEF	; 239
    60c8:	b2 2e       	mov	r11, r18
    60ca:	2a e0       	ldi	r18, 0x0A	; 10
    60cc:	30 e0       	ldi	r19, 0x00	; 0
    60ce:	25 c0       	rjmp	.+74     	; 0x611a <vfprintf+0x298>
    60d0:	93 2d       	mov	r25, r3
    60d2:	99 7f       	andi	r25, 0xF9	; 249
    60d4:	b9 2e       	mov	r11, r25
    60d6:	8f 36       	cpi	r24, 0x6F	; 111
    60d8:	c1 f0       	breq	.+48     	; 0x610a <vfprintf+0x288>
    60da:	18 f4       	brcc	.+6      	; 0x60e2 <vfprintf+0x260>
    60dc:	88 35       	cpi	r24, 0x58	; 88
    60de:	79 f0       	breq	.+30     	; 0x60fe <vfprintf+0x27c>
    60e0:	ae c0       	rjmp	.+348    	; 0x623e <vfprintf+0x3bc>
    60e2:	80 37       	cpi	r24, 0x70	; 112
    60e4:	19 f0       	breq	.+6      	; 0x60ec <vfprintf+0x26a>
    60e6:	88 37       	cpi	r24, 0x78	; 120
    60e8:	21 f0       	breq	.+8      	; 0x60f2 <vfprintf+0x270>
    60ea:	a9 c0       	rjmp	.+338    	; 0x623e <vfprintf+0x3bc>
    60ec:	e9 2f       	mov	r30, r25
    60ee:	e0 61       	ori	r30, 0x10	; 16
    60f0:	be 2e       	mov	r11, r30
    60f2:	b4 fe       	sbrs	r11, 4
    60f4:	0d c0       	rjmp	.+26     	; 0x6110 <vfprintf+0x28e>
    60f6:	fb 2d       	mov	r31, r11
    60f8:	f4 60       	ori	r31, 0x04	; 4
    60fa:	bf 2e       	mov	r11, r31
    60fc:	09 c0       	rjmp	.+18     	; 0x6110 <vfprintf+0x28e>
    60fe:	34 fe       	sbrs	r3, 4
    6100:	0a c0       	rjmp	.+20     	; 0x6116 <vfprintf+0x294>
    6102:	29 2f       	mov	r18, r25
    6104:	26 60       	ori	r18, 0x06	; 6
    6106:	b2 2e       	mov	r11, r18
    6108:	06 c0       	rjmp	.+12     	; 0x6116 <vfprintf+0x294>
    610a:	28 e0       	ldi	r18, 0x08	; 8
    610c:	30 e0       	ldi	r19, 0x00	; 0
    610e:	05 c0       	rjmp	.+10     	; 0x611a <vfprintf+0x298>
    6110:	20 e1       	ldi	r18, 0x10	; 16
    6112:	30 e0       	ldi	r19, 0x00	; 0
    6114:	02 c0       	rjmp	.+4      	; 0x611a <vfprintf+0x298>
    6116:	20 e1       	ldi	r18, 0x10	; 16
    6118:	32 e0       	ldi	r19, 0x02	; 2
    611a:	f8 01       	movw	r30, r16
    611c:	b7 fe       	sbrs	r11, 7
    611e:	07 c0       	rjmp	.+14     	; 0x612e <vfprintf+0x2ac>
    6120:	60 81       	ld	r22, Z
    6122:	71 81       	ldd	r23, Z+1	; 0x01
    6124:	82 81       	ldd	r24, Z+2	; 0x02
    6126:	93 81       	ldd	r25, Z+3	; 0x03
    6128:	0c 5f       	subi	r16, 0xFC	; 252
    612a:	1f 4f       	sbci	r17, 0xFF	; 255
    612c:	06 c0       	rjmp	.+12     	; 0x613a <vfprintf+0x2b8>
    612e:	60 81       	ld	r22, Z
    6130:	71 81       	ldd	r23, Z+1	; 0x01
    6132:	80 e0       	ldi	r24, 0x00	; 0
    6134:	90 e0       	ldi	r25, 0x00	; 0
    6136:	0e 5f       	subi	r16, 0xFE	; 254
    6138:	1f 4f       	sbci	r17, 0xFF	; 255
    613a:	a3 01       	movw	r20, r6
    613c:	f1 d0       	rcall	.+482    	; 0x6320 <__ultoa_invert>
    613e:	88 2e       	mov	r8, r24
    6140:	86 18       	sub	r8, r6
    6142:	fb 2d       	mov	r31, r11
    6144:	ff 77       	andi	r31, 0x7F	; 127
    6146:	3f 2e       	mov	r3, r31
    6148:	36 fe       	sbrs	r3, 6
    614a:	0d c0       	rjmp	.+26     	; 0x6166 <vfprintf+0x2e4>
    614c:	23 2d       	mov	r18, r3
    614e:	2e 7f       	andi	r18, 0xFE	; 254
    6150:	a2 2e       	mov	r10, r18
    6152:	89 14       	cp	r8, r9
    6154:	58 f4       	brcc	.+22     	; 0x616c <vfprintf+0x2ea>
    6156:	34 fe       	sbrs	r3, 4
    6158:	0b c0       	rjmp	.+22     	; 0x6170 <vfprintf+0x2ee>
    615a:	32 fc       	sbrc	r3, 2
    615c:	09 c0       	rjmp	.+18     	; 0x6170 <vfprintf+0x2ee>
    615e:	83 2d       	mov	r24, r3
    6160:	8e 7e       	andi	r24, 0xEE	; 238
    6162:	a8 2e       	mov	r10, r24
    6164:	05 c0       	rjmp	.+10     	; 0x6170 <vfprintf+0x2ee>
    6166:	b8 2c       	mov	r11, r8
    6168:	a3 2c       	mov	r10, r3
    616a:	03 c0       	rjmp	.+6      	; 0x6172 <vfprintf+0x2f0>
    616c:	b8 2c       	mov	r11, r8
    616e:	01 c0       	rjmp	.+2      	; 0x6172 <vfprintf+0x2f0>
    6170:	b9 2c       	mov	r11, r9
    6172:	a4 fe       	sbrs	r10, 4
    6174:	0f c0       	rjmp	.+30     	; 0x6194 <vfprintf+0x312>
    6176:	fe 01       	movw	r30, r28
    6178:	e8 0d       	add	r30, r8
    617a:	f1 1d       	adc	r31, r1
    617c:	80 81       	ld	r24, Z
    617e:	80 33       	cpi	r24, 0x30	; 48
    6180:	21 f4       	brne	.+8      	; 0x618a <vfprintf+0x308>
    6182:	9a 2d       	mov	r25, r10
    6184:	99 7e       	andi	r25, 0xE9	; 233
    6186:	a9 2e       	mov	r10, r25
    6188:	09 c0       	rjmp	.+18     	; 0x619c <vfprintf+0x31a>
    618a:	a2 fe       	sbrs	r10, 2
    618c:	06 c0       	rjmp	.+12     	; 0x619a <vfprintf+0x318>
    618e:	b3 94       	inc	r11
    6190:	b3 94       	inc	r11
    6192:	04 c0       	rjmp	.+8      	; 0x619c <vfprintf+0x31a>
    6194:	8a 2d       	mov	r24, r10
    6196:	86 78       	andi	r24, 0x86	; 134
    6198:	09 f0       	breq	.+2      	; 0x619c <vfprintf+0x31a>
    619a:	b3 94       	inc	r11
    619c:	a3 fc       	sbrc	r10, 3
    619e:	10 c0       	rjmp	.+32     	; 0x61c0 <vfprintf+0x33e>
    61a0:	a0 fe       	sbrs	r10, 0
    61a2:	06 c0       	rjmp	.+12     	; 0x61b0 <vfprintf+0x32e>
    61a4:	b2 14       	cp	r11, r2
    61a6:	80 f4       	brcc	.+32     	; 0x61c8 <vfprintf+0x346>
    61a8:	28 0c       	add	r2, r8
    61aa:	92 2c       	mov	r9, r2
    61ac:	9b 18       	sub	r9, r11
    61ae:	0d c0       	rjmp	.+26     	; 0x61ca <vfprintf+0x348>
    61b0:	b2 14       	cp	r11, r2
    61b2:	58 f4       	brcc	.+22     	; 0x61ca <vfprintf+0x348>
    61b4:	b6 01       	movw	r22, r12
    61b6:	80 e2       	ldi	r24, 0x20	; 32
    61b8:	90 e0       	ldi	r25, 0x00	; 0
    61ba:	76 d0       	rcall	.+236    	; 0x62a8 <fputc>
    61bc:	b3 94       	inc	r11
    61be:	f8 cf       	rjmp	.-16     	; 0x61b0 <vfprintf+0x32e>
    61c0:	b2 14       	cp	r11, r2
    61c2:	18 f4       	brcc	.+6      	; 0x61ca <vfprintf+0x348>
    61c4:	2b 18       	sub	r2, r11
    61c6:	02 c0       	rjmp	.+4      	; 0x61cc <vfprintf+0x34a>
    61c8:	98 2c       	mov	r9, r8
    61ca:	21 2c       	mov	r2, r1
    61cc:	a4 fe       	sbrs	r10, 4
    61ce:	0f c0       	rjmp	.+30     	; 0x61ee <vfprintf+0x36c>
    61d0:	b6 01       	movw	r22, r12
    61d2:	80 e3       	ldi	r24, 0x30	; 48
    61d4:	90 e0       	ldi	r25, 0x00	; 0
    61d6:	68 d0       	rcall	.+208    	; 0x62a8 <fputc>
    61d8:	a2 fe       	sbrs	r10, 2
    61da:	16 c0       	rjmp	.+44     	; 0x6208 <vfprintf+0x386>
    61dc:	a1 fc       	sbrc	r10, 1
    61de:	03 c0       	rjmp	.+6      	; 0x61e6 <vfprintf+0x364>
    61e0:	88 e7       	ldi	r24, 0x78	; 120
    61e2:	90 e0       	ldi	r25, 0x00	; 0
    61e4:	02 c0       	rjmp	.+4      	; 0x61ea <vfprintf+0x368>
    61e6:	88 e5       	ldi	r24, 0x58	; 88
    61e8:	90 e0       	ldi	r25, 0x00	; 0
    61ea:	b6 01       	movw	r22, r12
    61ec:	0c c0       	rjmp	.+24     	; 0x6206 <vfprintf+0x384>
    61ee:	8a 2d       	mov	r24, r10
    61f0:	86 78       	andi	r24, 0x86	; 134
    61f2:	51 f0       	breq	.+20     	; 0x6208 <vfprintf+0x386>
    61f4:	a1 fe       	sbrs	r10, 1
    61f6:	02 c0       	rjmp	.+4      	; 0x61fc <vfprintf+0x37a>
    61f8:	8b e2       	ldi	r24, 0x2B	; 43
    61fa:	01 c0       	rjmp	.+2      	; 0x61fe <vfprintf+0x37c>
    61fc:	80 e2       	ldi	r24, 0x20	; 32
    61fe:	a7 fc       	sbrc	r10, 7
    6200:	8d e2       	ldi	r24, 0x2D	; 45
    6202:	b6 01       	movw	r22, r12
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	50 d0       	rcall	.+160    	; 0x62a8 <fputc>
    6208:	89 14       	cp	r8, r9
    620a:	30 f4       	brcc	.+12     	; 0x6218 <vfprintf+0x396>
    620c:	b6 01       	movw	r22, r12
    620e:	80 e3       	ldi	r24, 0x30	; 48
    6210:	90 e0       	ldi	r25, 0x00	; 0
    6212:	4a d0       	rcall	.+148    	; 0x62a8 <fputc>
    6214:	9a 94       	dec	r9
    6216:	f8 cf       	rjmp	.-16     	; 0x6208 <vfprintf+0x386>
    6218:	8a 94       	dec	r8
    621a:	f3 01       	movw	r30, r6
    621c:	e8 0d       	add	r30, r8
    621e:	f1 1d       	adc	r31, r1
    6220:	80 81       	ld	r24, Z
    6222:	b6 01       	movw	r22, r12
    6224:	90 e0       	ldi	r25, 0x00	; 0
    6226:	40 d0       	rcall	.+128    	; 0x62a8 <fputc>
    6228:	81 10       	cpse	r8, r1
    622a:	f6 cf       	rjmp	.-20     	; 0x6218 <vfprintf+0x396>
    622c:	22 20       	and	r2, r2
    622e:	09 f4       	brne	.+2      	; 0x6232 <vfprintf+0x3b0>
    6230:	4e ce       	rjmp	.-868    	; 0x5ece <vfprintf+0x4c>
    6232:	b6 01       	movw	r22, r12
    6234:	80 e2       	ldi	r24, 0x20	; 32
    6236:	90 e0       	ldi	r25, 0x00	; 0
    6238:	37 d0       	rcall	.+110    	; 0x62a8 <fputc>
    623a:	2a 94       	dec	r2
    623c:	f7 cf       	rjmp	.-18     	; 0x622c <vfprintf+0x3aa>
    623e:	f6 01       	movw	r30, r12
    6240:	86 81       	ldd	r24, Z+6	; 0x06
    6242:	97 81       	ldd	r25, Z+7	; 0x07
    6244:	02 c0       	rjmp	.+4      	; 0x624a <vfprintf+0x3c8>
    6246:	8f ef       	ldi	r24, 0xFF	; 255
    6248:	9f ef       	ldi	r25, 0xFF	; 255
    624a:	2b 96       	adiw	r28, 0x0b	; 11
    624c:	0f b6       	in	r0, 0x3f	; 63
    624e:	f8 94       	cli
    6250:	de bf       	out	0x3e, r29	; 62
    6252:	0f be       	out	0x3f, r0	; 63
    6254:	cd bf       	out	0x3d, r28	; 61
    6256:	df 91       	pop	r29
    6258:	cf 91       	pop	r28
    625a:	1f 91       	pop	r17
    625c:	0f 91       	pop	r16
    625e:	ff 90       	pop	r15
    6260:	ef 90       	pop	r14
    6262:	df 90       	pop	r13
    6264:	cf 90       	pop	r12
    6266:	bf 90       	pop	r11
    6268:	af 90       	pop	r10
    626a:	9f 90       	pop	r9
    626c:	8f 90       	pop	r8
    626e:	7f 90       	pop	r7
    6270:	6f 90       	pop	r6
    6272:	5f 90       	pop	r5
    6274:	4f 90       	pop	r4
    6276:	3f 90       	pop	r3
    6278:	2f 90       	pop	r2
    627a:	08 95       	ret

0000627c <strnlen_P>:
    627c:	fc 01       	movw	r30, r24
    627e:	05 90       	lpm	r0, Z+
    6280:	61 50       	subi	r22, 0x01	; 1
    6282:	70 40       	sbci	r23, 0x00	; 0
    6284:	01 10       	cpse	r0, r1
    6286:	d8 f7       	brcc	.-10     	; 0x627e <strnlen_P+0x2>
    6288:	80 95       	com	r24
    628a:	90 95       	com	r25
    628c:	8e 0f       	add	r24, r30
    628e:	9f 1f       	adc	r25, r31
    6290:	08 95       	ret

00006292 <strnlen>:
    6292:	fc 01       	movw	r30, r24
    6294:	61 50       	subi	r22, 0x01	; 1
    6296:	70 40       	sbci	r23, 0x00	; 0
    6298:	01 90       	ld	r0, Z+
    629a:	01 10       	cpse	r0, r1
    629c:	d8 f7       	brcc	.-10     	; 0x6294 <strnlen+0x2>
    629e:	80 95       	com	r24
    62a0:	90 95       	com	r25
    62a2:	8e 0f       	add	r24, r30
    62a4:	9f 1f       	adc	r25, r31
    62a6:	08 95       	ret

000062a8 <fputc>:
    62a8:	0f 93       	push	r16
    62aa:	1f 93       	push	r17
    62ac:	cf 93       	push	r28
    62ae:	df 93       	push	r29
    62b0:	fb 01       	movw	r30, r22
    62b2:	23 81       	ldd	r18, Z+3	; 0x03
    62b4:	21 fd       	sbrc	r18, 1
    62b6:	03 c0       	rjmp	.+6      	; 0x62be <fputc+0x16>
    62b8:	8f ef       	ldi	r24, 0xFF	; 255
    62ba:	9f ef       	ldi	r25, 0xFF	; 255
    62bc:	2c c0       	rjmp	.+88     	; 0x6316 <fputc+0x6e>
    62be:	22 ff       	sbrs	r18, 2
    62c0:	16 c0       	rjmp	.+44     	; 0x62ee <fputc+0x46>
    62c2:	46 81       	ldd	r20, Z+6	; 0x06
    62c4:	57 81       	ldd	r21, Z+7	; 0x07
    62c6:	24 81       	ldd	r18, Z+4	; 0x04
    62c8:	35 81       	ldd	r19, Z+5	; 0x05
    62ca:	42 17       	cp	r20, r18
    62cc:	53 07       	cpc	r21, r19
    62ce:	44 f4       	brge	.+16     	; 0x62e0 <fputc+0x38>
    62d0:	a0 81       	ld	r26, Z
    62d2:	b1 81       	ldd	r27, Z+1	; 0x01
    62d4:	9d 01       	movw	r18, r26
    62d6:	2f 5f       	subi	r18, 0xFF	; 255
    62d8:	3f 4f       	sbci	r19, 0xFF	; 255
    62da:	31 83       	std	Z+1, r19	; 0x01
    62dc:	20 83       	st	Z, r18
    62de:	8c 93       	st	X, r24
    62e0:	26 81       	ldd	r18, Z+6	; 0x06
    62e2:	37 81       	ldd	r19, Z+7	; 0x07
    62e4:	2f 5f       	subi	r18, 0xFF	; 255
    62e6:	3f 4f       	sbci	r19, 0xFF	; 255
    62e8:	37 83       	std	Z+7, r19	; 0x07
    62ea:	26 83       	std	Z+6, r18	; 0x06
    62ec:	14 c0       	rjmp	.+40     	; 0x6316 <fputc+0x6e>
    62ee:	8b 01       	movw	r16, r22
    62f0:	ec 01       	movw	r28, r24
    62f2:	fb 01       	movw	r30, r22
    62f4:	00 84       	ldd	r0, Z+8	; 0x08
    62f6:	f1 85       	ldd	r31, Z+9	; 0x09
    62f8:	e0 2d       	mov	r30, r0
    62fa:	19 95       	eicall
    62fc:	89 2b       	or	r24, r25
    62fe:	e1 f6       	brne	.-72     	; 0x62b8 <fputc+0x10>
    6300:	d8 01       	movw	r26, r16
    6302:	16 96       	adiw	r26, 0x06	; 6
    6304:	8d 91       	ld	r24, X+
    6306:	9c 91       	ld	r25, X
    6308:	17 97       	sbiw	r26, 0x07	; 7
    630a:	01 96       	adiw	r24, 0x01	; 1
    630c:	17 96       	adiw	r26, 0x07	; 7
    630e:	9c 93       	st	X, r25
    6310:	8e 93       	st	-X, r24
    6312:	16 97       	sbiw	r26, 0x06	; 6
    6314:	ce 01       	movw	r24, r28
    6316:	df 91       	pop	r29
    6318:	cf 91       	pop	r28
    631a:	1f 91       	pop	r17
    631c:	0f 91       	pop	r16
    631e:	08 95       	ret

00006320 <__ultoa_invert>:
    6320:	fa 01       	movw	r30, r20
    6322:	aa 27       	eor	r26, r26
    6324:	28 30       	cpi	r18, 0x08	; 8
    6326:	51 f1       	breq	.+84     	; 0x637c <__ultoa_invert+0x5c>
    6328:	20 31       	cpi	r18, 0x10	; 16
    632a:	81 f1       	breq	.+96     	; 0x638c <__ultoa_invert+0x6c>
    632c:	e8 94       	clt
    632e:	6f 93       	push	r22
    6330:	6e 7f       	andi	r22, 0xFE	; 254
    6332:	6e 5f       	subi	r22, 0xFE	; 254
    6334:	7f 4f       	sbci	r23, 0xFF	; 255
    6336:	8f 4f       	sbci	r24, 0xFF	; 255
    6338:	9f 4f       	sbci	r25, 0xFF	; 255
    633a:	af 4f       	sbci	r26, 0xFF	; 255
    633c:	b1 e0       	ldi	r27, 0x01	; 1
    633e:	3e d0       	rcall	.+124    	; 0x63bc <__ultoa_invert+0x9c>
    6340:	b4 e0       	ldi	r27, 0x04	; 4
    6342:	3c d0       	rcall	.+120    	; 0x63bc <__ultoa_invert+0x9c>
    6344:	67 0f       	add	r22, r23
    6346:	78 1f       	adc	r23, r24
    6348:	89 1f       	adc	r24, r25
    634a:	9a 1f       	adc	r25, r26
    634c:	a1 1d       	adc	r26, r1
    634e:	68 0f       	add	r22, r24
    6350:	79 1f       	adc	r23, r25
    6352:	8a 1f       	adc	r24, r26
    6354:	91 1d       	adc	r25, r1
    6356:	a1 1d       	adc	r26, r1
    6358:	6a 0f       	add	r22, r26
    635a:	71 1d       	adc	r23, r1
    635c:	81 1d       	adc	r24, r1
    635e:	91 1d       	adc	r25, r1
    6360:	a1 1d       	adc	r26, r1
    6362:	20 d0       	rcall	.+64     	; 0x63a4 <__ultoa_invert+0x84>
    6364:	09 f4       	brne	.+2      	; 0x6368 <__ultoa_invert+0x48>
    6366:	68 94       	set
    6368:	3f 91       	pop	r19
    636a:	2a e0       	ldi	r18, 0x0A	; 10
    636c:	26 9f       	mul	r18, r22
    636e:	11 24       	eor	r1, r1
    6370:	30 19       	sub	r19, r0
    6372:	30 5d       	subi	r19, 0xD0	; 208
    6374:	31 93       	st	Z+, r19
    6376:	de f6       	brtc	.-74     	; 0x632e <__ultoa_invert+0xe>
    6378:	cf 01       	movw	r24, r30
    637a:	08 95       	ret
    637c:	46 2f       	mov	r20, r22
    637e:	47 70       	andi	r20, 0x07	; 7
    6380:	40 5d       	subi	r20, 0xD0	; 208
    6382:	41 93       	st	Z+, r20
    6384:	b3 e0       	ldi	r27, 0x03	; 3
    6386:	0f d0       	rcall	.+30     	; 0x63a6 <__ultoa_invert+0x86>
    6388:	c9 f7       	brne	.-14     	; 0x637c <__ultoa_invert+0x5c>
    638a:	f6 cf       	rjmp	.-20     	; 0x6378 <__ultoa_invert+0x58>
    638c:	46 2f       	mov	r20, r22
    638e:	4f 70       	andi	r20, 0x0F	; 15
    6390:	40 5d       	subi	r20, 0xD0	; 208
    6392:	4a 33       	cpi	r20, 0x3A	; 58
    6394:	18 f0       	brcs	.+6      	; 0x639c <__ultoa_invert+0x7c>
    6396:	49 5d       	subi	r20, 0xD9	; 217
    6398:	31 fd       	sbrc	r19, 1
    639a:	40 52       	subi	r20, 0x20	; 32
    639c:	41 93       	st	Z+, r20
    639e:	02 d0       	rcall	.+4      	; 0x63a4 <__ultoa_invert+0x84>
    63a0:	a9 f7       	brne	.-22     	; 0x638c <__ultoa_invert+0x6c>
    63a2:	ea cf       	rjmp	.-44     	; 0x6378 <__ultoa_invert+0x58>
    63a4:	b4 e0       	ldi	r27, 0x04	; 4
    63a6:	a6 95       	lsr	r26
    63a8:	97 95       	ror	r25
    63aa:	87 95       	ror	r24
    63ac:	77 95       	ror	r23
    63ae:	67 95       	ror	r22
    63b0:	ba 95       	dec	r27
    63b2:	c9 f7       	brne	.-14     	; 0x63a6 <__ultoa_invert+0x86>
    63b4:	00 97       	sbiw	r24, 0x00	; 0
    63b6:	61 05       	cpc	r22, r1
    63b8:	71 05       	cpc	r23, r1
    63ba:	08 95       	ret
    63bc:	9b 01       	movw	r18, r22
    63be:	ac 01       	movw	r20, r24
    63c0:	0a 2e       	mov	r0, r26
    63c2:	06 94       	lsr	r0
    63c4:	57 95       	ror	r21
    63c6:	47 95       	ror	r20
    63c8:	37 95       	ror	r19
    63ca:	27 95       	ror	r18
    63cc:	ba 95       	dec	r27
    63ce:	c9 f7       	brne	.-14     	; 0x63c2 <__ultoa_invert+0xa2>
    63d0:	62 0f       	add	r22, r18
    63d2:	73 1f       	adc	r23, r19
    63d4:	84 1f       	adc	r24, r20
    63d6:	95 1f       	adc	r25, r21
    63d8:	a0 1d       	adc	r26, r0
    63da:	08 95       	ret

000063dc <_exit>:
    63dc:	f8 94       	cli

000063de <__stop_program>:
    63de:	ff cf       	rjmp	.-2      	; 0x63de <__stop_program>
