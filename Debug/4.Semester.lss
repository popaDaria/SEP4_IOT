
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006e8  00800200  00006380  00006414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c3c  008008e8  008008e8  00006afc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006afc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006b58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ad0  00000000  00000000  00006b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000db7c  00000000  00000000  00007668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003641  00000000  00000000  000151e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006bcb  00000000  00000000  00018825  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000261c  00000000  00000000  0001f3f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000045e7  00000000  00000000  00021a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bdd0  00000000  00000000  00025ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a08  00000000  00000000  00031dc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	13 c4       	rjmp	.+2086   	; 0x858 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 04 24 	jmp	0x4808	; 0x4808 <__vector_25>
      68:	0c 94 56 24 	jmp	0x48ac	; 0x48ac <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 9a 24 	jmp	0x4934	; 0x4934 <__vector_36>
      94:	0c 94 ec 24 	jmp	0x49d8	; 0x49d8 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 4d 2a 	jmp	0x549a	; 0x549a <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__vector_51>
      d0:	0c 94 82 25 	jmp	0x4b04	; 0x4b04 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 c6 25 	jmp	0x4b8c	; 0x4b8c <__vector_54>
      dc:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	8f 18       	sub	r8, r15
      e6:	8f 18       	sub	r8, r15
      e8:	8f 18       	sub	r8, r15
      ea:	c6 18       	sub	r12, r6
      ec:	ce 18       	sub	r12, r14
      ee:	e3 18       	sub	r14, r3
      f0:	8f 18       	sub	r8, r15
      f2:	8f 18       	sub	r8, r15
      f4:	c6 18       	sub	r12, r6
      f6:	ce 18       	sub	r12, r14
      f8:	6f 2a       	or	r6, r31
      fa:	df 2a       	or	r13, r31
      fc:	df 2a       	or	r13, r31
      fe:	df 2a       	or	r13, r31
     100:	df 2a       	or	r13, r31
     102:	df 2a       	or	r13, r31
     104:	df 2a       	or	r13, r31
     106:	df 2a       	or	r13, r31
     108:	6f 2a       	or	r6, r31
     10a:	df 2a       	or	r13, r31
     10c:	df 2a       	or	r13, r31
     10e:	df 2a       	or	r13, r31
     110:	df 2a       	or	r13, r31
     112:	df 2a       	or	r13, r31
     114:	df 2a       	or	r13, r31
     116:	df 2a       	or	r13, r31
     118:	71 2a       	or	r7, r17
     11a:	df 2a       	or	r13, r31
     11c:	df 2a       	or	r13, r31
     11e:	df 2a       	or	r13, r31
     120:	df 2a       	or	r13, r31
     122:	df 2a       	or	r13, r31
     124:	df 2a       	or	r13, r31
     126:	df 2a       	or	r13, r31
     128:	df 2a       	or	r13, r31
     12a:	df 2a       	or	r13, r31
     12c:	df 2a       	or	r13, r31
     12e:	df 2a       	or	r13, r31
     130:	df 2a       	or	r13, r31
     132:	df 2a       	or	r13, r31
     134:	df 2a       	or	r13, r31
     136:	df 2a       	or	r13, r31
     138:	71 2a       	or	r7, r17
     13a:	df 2a       	or	r13, r31
     13c:	df 2a       	or	r13, r31
     13e:	df 2a       	or	r13, r31
     140:	df 2a       	or	r13, r31
     142:	df 2a       	or	r13, r31
     144:	df 2a       	or	r13, r31
     146:	df 2a       	or	r13, r31
     148:	df 2a       	or	r13, r31
     14a:	df 2a       	or	r13, r31
     14c:	df 2a       	or	r13, r31
     14e:	df 2a       	or	r13, r31
     150:	df 2a       	or	r13, r31
     152:	df 2a       	or	r13, r31
     154:	df 2a       	or	r13, r31
     156:	df 2a       	or	r13, r31
     158:	db 2a       	or	r13, r27
     15a:	df 2a       	or	r13, r31
     15c:	df 2a       	or	r13, r31
     15e:	df 2a       	or	r13, r31
     160:	df 2a       	or	r13, r31
     162:	df 2a       	or	r13, r31
     164:	df 2a       	or	r13, r31
     166:	df 2a       	or	r13, r31
     168:	a6 2a       	or	r10, r22
     16a:	df 2a       	or	r13, r31
     16c:	df 2a       	or	r13, r31
     16e:	df 2a       	or	r13, r31
     170:	df 2a       	or	r13, r31
     172:	df 2a       	or	r13, r31
     174:	df 2a       	or	r13, r31
     176:	df 2a       	or	r13, r31
     178:	df 2a       	or	r13, r31
     17a:	df 2a       	or	r13, r31
     17c:	df 2a       	or	r13, r31
     17e:	df 2a       	or	r13, r31
     180:	df 2a       	or	r13, r31
     182:	df 2a       	or	r13, r31
     184:	df 2a       	or	r13, r31
     186:	df 2a       	or	r13, r31
     188:	9a 2a       	or	r9, r26
     18a:	df 2a       	or	r13, r31
     18c:	df 2a       	or	r13, r31
     18e:	df 2a       	or	r13, r31
     190:	df 2a       	or	r13, r31
     192:	df 2a       	or	r13, r31
     194:	df 2a       	or	r13, r31
     196:	df 2a       	or	r13, r31
     198:	be 2a       	or	r11, r30

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 44 0c 	call	0x1888	; 0x1888 <prvCheckTasksWaitingTermination>
     19e:	80 91 0d 13 	lds	r24, 0x130D	; 0x80130d <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	92 d2       	rcall	.+1316   	; 0x6cc <vPortYield>
     1a8:	0e 94 0c 19 	call	0x3218	; 0x3218 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 01 18 	call	0x3002	; 0x3002 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 58 18 	call	0x30b0	; 0x30b0 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e0 e8       	ldi	r30, 0x80	; 128
     1e4:	f3 e6       	ldi	r31, 0x63	; 99
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a8 3e       	cpi	r26, 0xE8	; 232
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	25 e1       	ldi	r18, 0x15	; 21
     1f8:	a8 ee       	ldi	r26, 0xE8	; 232
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a4 32       	cpi	r26, 0x24	; 36
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 22 1c 	call	0x3844	; 0x3844 <main>
     20a:	0c 94 be 31 	jmp	0x637c	; 0x637c <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <co2Task>:
#include "mh_z19.h"

void co2Task(void *pvParameters){
	(void)pvParameters;
	while(1){
		vTaskDelay(pdMS_TO_TICKS(5000UL));
     210:	66 e3       	ldi	r22, 0x36	; 54
     212:	71 e0       	ldi	r23, 0x01	; 1
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <vTaskDelay>
		int statusCode = mh_z19_takeMeassuring();
     21c:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <mh_z19_takeMeassuring>
     220:	90 e0       	ldi	r25, 0x00	; 0
		if(statusCode!=MHZ19_OK){
     222:	00 97       	sbiw	r24, 0x00	; 0
     224:	a9 f3       	breq	.-22     	; 0x210 <co2Task>
			printf("CO2 measuring error %d\n",statusCode);
     226:	9f 93       	push	r25
     228:	8f 93       	push	r24
     22a:	8f e6       	ldi	r24, 0x6F	; 111
     22c:	92 e0       	ldi	r25, 0x02	; 2
     22e:	9f 93       	push	r25
     230:	8f 93       	push	r24
     232:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	e8 cf       	rjmp	.-48     	; 0x210 <co2Task>

00000240 <co2Callback>:
		}
	}
}
void co2Callback(uint16_t ppm){
     240:	0f 93       	push	r16
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	ec 01       	movw	r28, r24
	xSemaphoreTake(hardware_semaphore,portMAX_DELAY);
     248:	4f ef       	ldi	r20, 0xFF	; 255
     24a:	5f ef       	ldi	r21, 0xFF	; 255
     24c:	ba 01       	movw	r22, r20
     24e:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <hardware_semaphore>
     252:	90 91 19 15 	lds	r25, 0x1519	; 0x801519 <hardware_semaphore+0x1>
     256:	cc d5       	rcall	.+2968   	; 0xdf0 <xQueueSemaphoreTake>
	entry_data.co2=ppm;
     258:	d0 93 0d 15 	sts	0x150D, r29	; 0x80150d <entry_data+0x5>
     25c:	c0 93 0c 15 	sts	0x150C, r28	; 0x80150c <entry_data+0x4>
	//printf("CO2 VALUE : %d ", entry_data.co2);
	xSemaphoreGive(hardware_semaphore);
     260:	00 e0       	ldi	r16, 0x00	; 0
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	a9 01       	movw	r20, r18
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <hardware_semaphore>
     270:	90 91 19 15 	lds	r25, 0x1519	; 0x801519 <hardware_semaphore+0x1>
     274:	43 d4       	rcall	.+2182   	; 0xafc <xQueueGenericSend>
}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	0f 91       	pop	r16
     27c:	08 95       	ret

0000027e <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     27e:	e4 ef       	ldi	r30, 0xF4	; 244
     280:	f8 e0       	ldi	r31, 0x08	; 8
     282:	a8 ef       	ldi	r26, 0xF8	; 248
     284:	b8 e0       	ldi	r27, 0x08	; 8
     286:	b1 83       	std	Z+1, r27	; 0x01
     288:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     28a:	13 82       	std	Z+3, r1	; 0x03
     28c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     28e:	e8 eb       	ldi	r30, 0xB8	; 184
     290:	f2 e1       	ldi	r31, 0x12	; 18
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     292:	f0 93 f3 08 	sts	0x08F3, r31	; 0x8008f3 <pxEnd+0x1>
     296:	e0 93 f2 08 	sts	0x08F2, r30	; 0x8008f2 <pxEnd>
    pxEnd->xBlockSize = 0;
     29a:	13 82       	std	Z+3, r1	; 0x03
     29c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     2a2:	80 ec       	ldi	r24, 0xC0	; 192
     2a4:	99 e0       	ldi	r25, 0x09	; 9
     2a6:	13 96       	adiw	r26, 0x03	; 3
     2a8:	9c 93       	st	X, r25
     2aa:	8e 93       	st	-X, r24
     2ac:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     2ae:	ed 93       	st	X+, r30
     2b0:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     2b2:	90 93 ef 08 	sts	0x08EF, r25	; 0x8008ef <xMinimumEverFreeBytesRemaining+0x1>
     2b6:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     2ba:	90 93 f1 08 	sts	0x08F1, r25	; 0x8008f1 <xFreeBytesRemaining+0x1>
     2be:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e8       	ldi	r25, 0x80	; 128
     2c6:	90 93 e9 08 	sts	0x08E9, r25	; 0x8008e9 <__data_end+0x1>
     2ca:	80 93 e8 08 	sts	0x08E8, r24	; 0x8008e8 <__data_end>
     2ce:	08 95       	ret

000002d0 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     2d6:	a4 ef       	ldi	r26, 0xF4	; 244
     2d8:	b8 e0       	ldi	r27, 0x08	; 8
     2da:	01 c0       	rjmp	.+2      	; 0x2de <prvInsertBlockIntoFreeList+0xe>
     2dc:	df 01       	movw	r26, r30
     2de:	ed 91       	ld	r30, X+
     2e0:	fc 91       	ld	r31, X
     2e2:	11 97       	sbiw	r26, 0x01	; 1
     2e4:	ec 17       	cp	r30, r28
     2e6:	fd 07       	cpc	r31, r29
     2e8:	c8 f3       	brcs	.-14     	; 0x2dc <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     2ea:	12 96       	adiw	r26, 0x02	; 2
     2ec:	8d 91       	ld	r24, X+
     2ee:	9c 91       	ld	r25, X
     2f0:	13 97       	sbiw	r26, 0x03	; 3
     2f2:	9d 01       	movw	r18, r26
     2f4:	28 0f       	add	r18, r24
     2f6:	39 1f       	adc	r19, r25
     2f8:	c2 17       	cp	r28, r18
     2fa:	d3 07       	cpc	r29, r19
     2fc:	49 f4       	brne	.+18     	; 0x310 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     2fe:	2a 81       	ldd	r18, Y+2	; 0x02
     300:	3b 81       	ldd	r19, Y+3	; 0x03
     302:	82 0f       	add	r24, r18
     304:	93 1f       	adc	r25, r19
     306:	13 96       	adiw	r26, 0x03	; 3
     308:	9c 93       	st	X, r25
     30a:	8e 93       	st	-X, r24
     30c:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     30e:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	9b 81       	ldd	r25, Y+3	; 0x03
     314:	9e 01       	movw	r18, r28
     316:	28 0f       	add	r18, r24
     318:	39 1f       	adc	r19, r25
     31a:	e2 17       	cp	r30, r18
     31c:	f3 07       	cpc	r31, r19
     31e:	c1 f4       	brne	.+48     	; 0x350 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     320:	20 91 f2 08 	lds	r18, 0x08F2	; 0x8008f2 <pxEnd>
     324:	30 91 f3 08 	lds	r19, 0x08F3	; 0x8008f3 <pxEnd+0x1>
     328:	e2 17       	cp	r30, r18
     32a:	f3 07       	cpc	r31, r19
     32c:	71 f0       	breq	.+28     	; 0x34a <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     32e:	22 81       	ldd	r18, Z+2	; 0x02
     330:	33 81       	ldd	r19, Z+3	; 0x03
     332:	82 0f       	add	r24, r18
     334:	93 1f       	adc	r25, r19
     336:	9b 83       	std	Y+3, r25	; 0x03
     338:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     33a:	ed 91       	ld	r30, X+
     33c:	fc 91       	ld	r31, X
     33e:	11 97       	sbiw	r26, 0x01	; 1
     340:	80 81       	ld	r24, Z
     342:	91 81       	ldd	r25, Z+1	; 0x01
     344:	99 83       	std	Y+1, r25	; 0x01
     346:	88 83       	st	Y, r24
     348:	05 c0       	rjmp	.+10     	; 0x354 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     34a:	39 83       	std	Y+1, r19	; 0x01
     34c:	28 83       	st	Y, r18
     34e:	02 c0       	rjmp	.+4      	; 0x354 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     350:	f9 83       	std	Y+1, r31	; 0x01
     352:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     354:	ca 17       	cp	r28, r26
     356:	db 07       	cpc	r29, r27
     358:	11 f0       	breq	.+4      	; 0x35e <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     35a:	cd 93       	st	X+, r28
     35c:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     372:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     376:	80 91 f2 08 	lds	r24, 0x08F2	; 0x8008f2 <pxEnd>
     37a:	90 91 f3 08 	lds	r25, 0x08F3	; 0x8008f3 <pxEnd+0x1>
     37e:	89 2b       	or	r24, r25
     380:	09 f4       	brne	.+2      	; 0x384 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     382:	7d df       	rcall	.-262    	; 0x27e <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     384:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <__data_end>
     388:	90 91 e9 08 	lds	r25, 0x08E9	; 0x8008e9 <__data_end+0x1>
     38c:	80 23       	and	r24, r16
     38e:	91 23       	and	r25, r17
     390:	89 2b       	or	r24, r25
     392:	09 f0       	breq	.+2      	; 0x396 <pvPortMalloc+0x32>
     394:	76 c0       	rjmp	.+236    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     396:	01 15       	cp	r16, r1
     398:	11 05       	cpc	r17, r1
     39a:	49 f0       	breq	.+18     	; 0x3ae <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     39c:	c8 01       	movw	r24, r16
     39e:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     3a0:	08 17       	cp	r16, r24
     3a2:	19 07       	cpc	r17, r25
     3a4:	18 f0       	brcs	.+6      	; 0x3ac <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	10 e0       	ldi	r17, 0x00	; 0
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     3ac:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     3ae:	01 15       	cp	r16, r1
     3b0:	11 05       	cpc	r17, r1
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <pvPortMalloc+0x52>
     3b4:	69 c0       	rjmp	.+210    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     3b6:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <xFreeBytesRemaining>
     3ba:	90 91 f1 08 	lds	r25, 0x08F1	; 0x8008f1 <xFreeBytesRemaining+0x1>
     3be:	80 17       	cp	r24, r16
     3c0:	91 07       	cpc	r25, r17
     3c2:	08 f4       	brcc	.+2      	; 0x3c6 <pvPortMalloc+0x62>
     3c4:	64 c0       	rjmp	.+200    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     3c6:	c0 91 f4 08 	lds	r28, 0x08F4	; 0x8008f4 <xStart>
     3ca:	d0 91 f5 08 	lds	r29, 0x08F5	; 0x8008f5 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     3ce:	e4 ef       	ldi	r30, 0xF4	; 244
     3d0:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     3d4:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     3d6:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     3d8:	8a 81       	ldd	r24, Y+2	; 0x02
     3da:	9b 81       	ldd	r25, Y+3	; 0x03
     3dc:	80 17       	cp	r24, r16
     3de:	91 07       	cpc	r25, r17
     3e0:	20 f4       	brcc	.+8      	; 0x3ea <pvPortMalloc+0x86>
     3e2:	88 81       	ld	r24, Y
     3e4:	99 81       	ldd	r25, Y+1	; 0x01
     3e6:	00 97       	sbiw	r24, 0x00	; 0
     3e8:	a9 f7       	brne	.-22     	; 0x3d4 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     3ea:	80 91 f2 08 	lds	r24, 0x08F2	; 0x8008f2 <pxEnd>
     3ee:	90 91 f3 08 	lds	r25, 0x08F3	; 0x8008f3 <pxEnd+0x1>
     3f2:	c8 17       	cp	r28, r24
     3f4:	d9 07       	cpc	r29, r25
     3f6:	09 f4       	brne	.+2      	; 0x3fa <pvPortMalloc+0x96>
     3f8:	4d c0       	rjmp	.+154    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     3fa:	e0 80       	ld	r14, Z
     3fc:	f1 80       	ldd	r15, Z+1	; 0x01
     3fe:	84 e0       	ldi	r24, 0x04	; 4
     400:	e8 0e       	add	r14, r24
     402:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     404:	88 81       	ld	r24, Y
     406:	99 81       	ldd	r25, Y+1	; 0x01
     408:	91 83       	std	Z+1, r25	; 0x01
     40a:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     40c:	2a 81       	ldd	r18, Y+2	; 0x02
     40e:	3b 81       	ldd	r19, Y+3	; 0x03
     410:	20 1b       	sub	r18, r16
     412:	31 0b       	sbc	r19, r17
     414:	29 30       	cpi	r18, 0x09	; 9
     416:	31 05       	cpc	r19, r1
     418:	48 f0       	brcs	.+18     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     41a:	ce 01       	movw	r24, r28
     41c:	80 0f       	add	r24, r16
     41e:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     420:	fc 01       	movw	r30, r24
     422:	33 83       	std	Z+3, r19	; 0x03
     424:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     426:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     428:	0a 83       	std	Y+2, r16	; 0x02
     42a:	52 df       	rcall	.-348    	; 0x2d0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     42c:	2a 81       	ldd	r18, Y+2	; 0x02
     42e:	3b 81       	ldd	r19, Y+3	; 0x03
     430:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <xFreeBytesRemaining>
     434:	90 91 f1 08 	lds	r25, 0x08F1	; 0x8008f1 <xFreeBytesRemaining+0x1>
     438:	82 1b       	sub	r24, r18
     43a:	93 0b       	sbc	r25, r19
     43c:	90 93 f1 08 	sts	0x08F1, r25	; 0x8008f1 <xFreeBytesRemaining+0x1>
     440:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     444:	40 91 ee 08 	lds	r20, 0x08EE	; 0x8008ee <xMinimumEverFreeBytesRemaining>
     448:	50 91 ef 08 	lds	r21, 0x08EF	; 0x8008ef <xMinimumEverFreeBytesRemaining+0x1>
     44c:	84 17       	cp	r24, r20
     44e:	95 07       	cpc	r25, r21
     450:	20 f4       	brcc	.+8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     452:	90 93 ef 08 	sts	0x08EF, r25	; 0x8008ef <xMinimumEverFreeBytesRemaining+0x1>
     456:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     45a:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <__data_end>
     45e:	90 91 e9 08 	lds	r25, 0x08E9	; 0x8008e9 <__data_end+0x1>
     462:	28 2b       	or	r18, r24
     464:	39 2b       	or	r19, r25
     466:	3b 83       	std	Y+3, r19	; 0x03
     468:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     46a:	19 82       	std	Y+1, r1	; 0x01
     46c:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     46e:	80 91 ec 08 	lds	r24, 0x08EC	; 0x8008ec <xNumberOfSuccessfulAllocations>
     472:	90 91 ed 08 	lds	r25, 0x08ED	; 0x8008ed <xNumberOfSuccessfulAllocations+0x1>
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	90 93 ed 08 	sts	0x08ED, r25	; 0x8008ed <xNumberOfSuccessfulAllocations+0x1>
     47c:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <xNumberOfSuccessfulAllocations>
     480:	0b c0       	rjmp	.+22     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     482:	e1 2c       	mov	r14, r1
     484:	f1 2c       	mov	r15, r1
     486:	08 c0       	rjmp	.+16     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     488:	e1 2c       	mov	r14, r1
     48a:	f1 2c       	mov	r15, r1
     48c:	05 c0       	rjmp	.+10     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     48e:	e1 2c       	mov	r14, r1
     490:	f1 2c       	mov	r15, r1
     492:	02 c0       	rjmp	.+4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     494:	e1 2c       	mov	r14, r1
     496:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     498:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     49c:	e1 14       	cp	r14, r1
     49e:	f1 04       	cpc	r15, r1
     4a0:	11 f4       	brne	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     4a2:	0e 94 18 19 	call	0x3230	; 0x3230 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     4a6:	c7 01       	movw	r24, r14
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	ef 90       	pop	r14
     4b4:	08 95       	ret

000004b6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     4be:	00 97       	sbiw	r24, 0x00	; 0
     4c0:	91 f1       	breq	.+100    	; 0x526 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     4c2:	ec 01       	movw	r28, r24
     4c4:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     4c6:	4a 81       	ldd	r20, Y+2	; 0x02
     4c8:	5b 81       	ldd	r21, Y+3	; 0x03
     4ca:	20 91 e8 08 	lds	r18, 0x08E8	; 0x8008e8 <__data_end>
     4ce:	30 91 e9 08 	lds	r19, 0x08E9	; 0x8008e9 <__data_end+0x1>
     4d2:	ba 01       	movw	r22, r20
     4d4:	62 23       	and	r22, r18
     4d6:	73 23       	and	r23, r19
     4d8:	67 2b       	or	r22, r23
     4da:	29 f1       	breq	.+74     	; 0x526 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     4dc:	68 81       	ld	r22, Y
     4de:	79 81       	ldd	r23, Y+1	; 0x01
     4e0:	67 2b       	or	r22, r23
     4e2:	09 f5       	brne	.+66     	; 0x526 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     4e4:	20 95       	com	r18
     4e6:	30 95       	com	r19
     4e8:	24 23       	and	r18, r20
     4ea:	35 23       	and	r19, r21
     4ec:	3b 83       	std	Y+3, r19	; 0x03
     4ee:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     4f0:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     4f4:	8a 81       	ldd	r24, Y+2	; 0x02
     4f6:	9b 81       	ldd	r25, Y+3	; 0x03
     4f8:	20 91 f0 08 	lds	r18, 0x08F0	; 0x8008f0 <xFreeBytesRemaining>
     4fc:	30 91 f1 08 	lds	r19, 0x08F1	; 0x8008f1 <xFreeBytesRemaining+0x1>
     500:	82 0f       	add	r24, r18
     502:	93 1f       	adc	r25, r19
     504:	90 93 f1 08 	sts	0x08F1, r25	; 0x8008f1 <xFreeBytesRemaining+0x1>
     508:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     50c:	ce 01       	movw	r24, r28
     50e:	e0 de       	rcall	.-576    	; 0x2d0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     510:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <xNumberOfSuccessfulFrees>
     514:	90 91 eb 08 	lds	r25, 0x08EB	; 0x8008eb <xNumberOfSuccessfulFrees+0x1>
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	90 93 eb 08 	sts	0x08EB, r25	; 0x8008eb <xNumberOfSuccessfulFrees+0x1>
     51e:	80 93 ea 08 	sts	0x08EA, r24	; 0x8008ea <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     522:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	08 95       	ret

00000530 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     530:	fc 01       	movw	r30, r24
     532:	03 96       	adiw	r24, 0x03	; 3
     534:	92 83       	std	Z+2, r25	; 0x02
     536:	81 83       	std	Z+1, r24	; 0x01
     538:	4f ef       	ldi	r20, 0xFF	; 255
     53a:	5f ef       	ldi	r21, 0xFF	; 255
     53c:	ba 01       	movw	r22, r20
     53e:	43 83       	std	Z+3, r20	; 0x03
     540:	54 83       	std	Z+4, r21	; 0x04
     542:	65 83       	std	Z+5, r22	; 0x05
     544:	76 83       	std	Z+6, r23	; 0x06
     546:	90 87       	std	Z+8, r25	; 0x08
     548:	87 83       	std	Z+7, r24	; 0x07
     54a:	92 87       	std	Z+10, r25	; 0x0a
     54c:	81 87       	std	Z+9, r24	; 0x09
     54e:	10 82       	st	Z, r1
     550:	08 95       	ret

00000552 <vListInitialiseItem>:
     552:	fc 01       	movw	r30, r24
     554:	13 86       	std	Z+11, r1	; 0x0b
     556:	12 86       	std	Z+10, r1	; 0x0a
     558:	08 95       	ret

0000055a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     564:	08 81       	ld	r16, Y
     566:	19 81       	ldd	r17, Y+1	; 0x01
     568:	2a 81       	ldd	r18, Y+2	; 0x02
     56a:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     56c:	0f 3f       	cpi	r16, 0xFF	; 255
     56e:	4f ef       	ldi	r20, 0xFF	; 255
     570:	14 07       	cpc	r17, r20
     572:	24 07       	cpc	r18, r20
     574:	34 07       	cpc	r19, r20
     576:	21 f4       	brne	.+8      	; 0x580 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     578:	fc 01       	movw	r30, r24
     57a:	a1 85       	ldd	r26, Z+9	; 0x09
     57c:	b2 85       	ldd	r27, Z+10	; 0x0a
     57e:	11 c0       	rjmp	.+34     	; 0x5a2 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     580:	dc 01       	movw	r26, r24
     582:	13 96       	adiw	r26, 0x03	; 3
     584:	01 c0       	rjmp	.+2      	; 0x588 <vListInsert+0x2e>
     586:	df 01       	movw	r26, r30
     588:	14 96       	adiw	r26, 0x04	; 4
     58a:	ed 91       	ld	r30, X+
     58c:	fc 91       	ld	r31, X
     58e:	15 97       	sbiw	r26, 0x05	; 5
     590:	40 81       	ld	r20, Z
     592:	51 81       	ldd	r21, Z+1	; 0x01
     594:	62 81       	ldd	r22, Z+2	; 0x02
     596:	73 81       	ldd	r23, Z+3	; 0x03
     598:	04 17       	cp	r16, r20
     59a:	15 07       	cpc	r17, r21
     59c:	26 07       	cpc	r18, r22
     59e:	37 07       	cpc	r19, r23
     5a0:	90 f7       	brcc	.-28     	; 0x586 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     5a2:	14 96       	adiw	r26, 0x04	; 4
     5a4:	ed 91       	ld	r30, X+
     5a6:	fc 91       	ld	r31, X
     5a8:	15 97       	sbiw	r26, 0x05	; 5
     5aa:	fd 83       	std	Y+5, r31	; 0x05
     5ac:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     5ae:	d7 83       	std	Z+7, r29	; 0x07
     5b0:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     5b2:	bf 83       	std	Y+7, r27	; 0x07
     5b4:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     5b6:	15 96       	adiw	r26, 0x05	; 5
     5b8:	dc 93       	st	X, r29
     5ba:	ce 93       	st	-X, r28
     5bc:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     5be:	9b 87       	std	Y+11, r25	; 0x0b
     5c0:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     5c2:	fc 01       	movw	r30, r24
     5c4:	20 81       	ld	r18, Z
     5c6:	2f 5f       	subi	r18, 0xFF	; 255
     5c8:	20 83       	st	Z, r18
}
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	08 95       	ret

000005d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     5da:	a2 85       	ldd	r26, Z+10	; 0x0a
     5dc:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5de:	c4 81       	ldd	r28, Z+4	; 0x04
     5e0:	d5 81       	ldd	r29, Z+5	; 0x05
     5e2:	86 81       	ldd	r24, Z+6	; 0x06
     5e4:	97 81       	ldd	r25, Z+7	; 0x07
     5e6:	9f 83       	std	Y+7, r25	; 0x07
     5e8:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5ea:	c6 81       	ldd	r28, Z+6	; 0x06
     5ec:	d7 81       	ldd	r29, Z+7	; 0x07
     5ee:	84 81       	ldd	r24, Z+4	; 0x04
     5f0:	95 81       	ldd	r25, Z+5	; 0x05
     5f2:	9d 83       	std	Y+5, r25	; 0x05
     5f4:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     5f6:	11 96       	adiw	r26, 0x01	; 1
     5f8:	8d 91       	ld	r24, X+
     5fa:	9c 91       	ld	r25, X
     5fc:	12 97       	sbiw	r26, 0x02	; 2
     5fe:	e8 17       	cp	r30, r24
     600:	f9 07       	cpc	r31, r25
     602:	31 f4       	brne	.+12     	; 0x610 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     604:	86 81       	ldd	r24, Z+6	; 0x06
     606:	97 81       	ldd	r25, Z+7	; 0x07
     608:	12 96       	adiw	r26, 0x02	; 2
     60a:	9c 93       	st	X, r25
     60c:	8e 93       	st	-X, r24
     60e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     610:	13 86       	std	Z+11, r1	; 0x0b
     612:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     614:	8c 91       	ld	r24, X
     616:	81 50       	subi	r24, 0x01	; 1
     618:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     61a:	8c 91       	ld	r24, X
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     622:	a8 95       	wdr
     624:	90 ec       	ldi	r25, 0xC0	; 192
     626:	88 e1       	ldi	r24, 0x18	; 24
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	a8 95       	wdr
     62e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     632:	0f be       	out	0x3f, r0	; 63
     634:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     638:	08 95       	ret

0000063a <pxPortInitialiseStack>:
     63a:	fc 01       	movw	r30, r24
     63c:	60 83       	st	Z, r22
     63e:	31 97       	sbiw	r30, 0x01	; 1
     640:	70 83       	st	Z, r23
     642:	31 97       	sbiw	r30, 0x01	; 1
     644:	10 82       	st	Z, r1
     646:	31 97       	sbiw	r30, 0x01	; 1
     648:	10 82       	st	Z, r1
     64a:	31 97       	sbiw	r30, 0x01	; 1
     64c:	20 e8       	ldi	r18, 0x80	; 128
     64e:	20 83       	st	Z, r18
     650:	31 97       	sbiw	r30, 0x01	; 1
     652:	10 82       	st	Z, r1
     654:	31 97       	sbiw	r30, 0x01	; 1
     656:	10 82       	st	Z, r1
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	10 82       	st	Z, r1
     65c:	77 97       	sbiw	r30, 0x17	; 23
     65e:	40 83       	st	Z, r20
     660:	31 97       	sbiw	r30, 0x01	; 1
     662:	50 83       	st	Z, r21
     664:	86 97       	sbiw	r24, 0x26	; 38
     666:	08 95       	ret

00000668 <xPortStartScheduler>:
     668:	dc df       	rcall	.-72     	; 0x622 <prvSetupTimerInterrupt>
     66a:	a0 91 7b 13 	lds	r26, 0x137B	; 0x80137b <pxCurrentTCB>
     66e:	b0 91 7c 13 	lds	r27, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
     672:	cd 91       	ld	r28, X+
     674:	cd bf       	out	0x3d, r28	; 61
     676:	dd 91       	ld	r29, X+
     678:	de bf       	out	0x3e, r29	; 62
     67a:	ff 91       	pop	r31
     67c:	ef 91       	pop	r30
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	bf 91       	pop	r27
     684:	af 91       	pop	r26
     686:	9f 91       	pop	r25
     688:	8f 91       	pop	r24
     68a:	7f 91       	pop	r23
     68c:	6f 91       	pop	r22
     68e:	5f 91       	pop	r21
     690:	4f 91       	pop	r20
     692:	3f 91       	pop	r19
     694:	2f 91       	pop	r18
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	ff 90       	pop	r15
     69c:	ef 90       	pop	r14
     69e:	df 90       	pop	r13
     6a0:	cf 90       	pop	r12
     6a2:	bf 90       	pop	r11
     6a4:	af 90       	pop	r10
     6a6:	9f 90       	pop	r9
     6a8:	8f 90       	pop	r8
     6aa:	7f 90       	pop	r7
     6ac:	6f 90       	pop	r6
     6ae:	5f 90       	pop	r5
     6b0:	4f 90       	pop	r4
     6b2:	3f 90       	pop	r3
     6b4:	2f 90       	pop	r2
     6b6:	1f 90       	pop	r1
     6b8:	0f 90       	pop	r0
     6ba:	0c be       	out	0x3c, r0	; 60
     6bc:	0f 90       	pop	r0
     6be:	0b be       	out	0x3b, r0	; 59
     6c0:	0f 90       	pop	r0
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	0f 90       	pop	r0
     6c6:	08 95       	ret
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	08 95       	ret

000006cc <vPortYield>:
     6cc:	0f 92       	push	r0
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	0f 92       	push	r0
     6d4:	0b b6       	in	r0, 0x3b	; 59
     6d6:	0f 92       	push	r0
     6d8:	0c b6       	in	r0, 0x3c	; 60
     6da:	0f 92       	push	r0
     6dc:	1f 92       	push	r1
     6de:	11 24       	eor	r1, r1
     6e0:	2f 92       	push	r2
     6e2:	3f 92       	push	r3
     6e4:	4f 92       	push	r4
     6e6:	5f 92       	push	r5
     6e8:	6f 92       	push	r6
     6ea:	7f 92       	push	r7
     6ec:	8f 92       	push	r8
     6ee:	9f 92       	push	r9
     6f0:	af 92       	push	r10
     6f2:	bf 92       	push	r11
     6f4:	cf 92       	push	r12
     6f6:	df 92       	push	r13
     6f8:	ef 92       	push	r14
     6fa:	ff 92       	push	r15
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
     700:	2f 93       	push	r18
     702:	3f 93       	push	r19
     704:	4f 93       	push	r20
     706:	5f 93       	push	r21
     708:	6f 93       	push	r22
     70a:	7f 93       	push	r23
     70c:	8f 93       	push	r24
     70e:	9f 93       	push	r25
     710:	af 93       	push	r26
     712:	bf 93       	push	r27
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	ef 93       	push	r30
     71a:	ff 93       	push	r31
     71c:	a0 91 7b 13 	lds	r26, 0x137B	; 0x80137b <pxCurrentTCB>
     720:	b0 91 7c 13 	lds	r27, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
     724:	0d b6       	in	r0, 0x3d	; 61
     726:	0d 92       	st	X+, r0
     728:	0e b6       	in	r0, 0x3e	; 62
     72a:	0d 92       	st	X+, r0
     72c:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <vTaskSwitchContext>
     730:	a0 91 7b 13 	lds	r26, 0x137B	; 0x80137b <pxCurrentTCB>
     734:	b0 91 7c 13 	lds	r27, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
     738:	cd 91       	ld	r28, X+
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	dd 91       	ld	r29, X+
     73e:	de bf       	out	0x3e, r29	; 62
     740:	ff 91       	pop	r31
     742:	ef 91       	pop	r30
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	bf 91       	pop	r27
     74a:	af 91       	pop	r26
     74c:	9f 91       	pop	r25
     74e:	8f 91       	pop	r24
     750:	7f 91       	pop	r23
     752:	6f 91       	pop	r22
     754:	5f 91       	pop	r21
     756:	4f 91       	pop	r20
     758:	3f 91       	pop	r19
     75a:	2f 91       	pop	r18
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	ff 90       	pop	r15
     762:	ef 90       	pop	r14
     764:	df 90       	pop	r13
     766:	cf 90       	pop	r12
     768:	bf 90       	pop	r11
     76a:	af 90       	pop	r10
     76c:	9f 90       	pop	r9
     76e:	8f 90       	pop	r8
     770:	7f 90       	pop	r7
     772:	6f 90       	pop	r6
     774:	5f 90       	pop	r5
     776:	4f 90       	pop	r4
     778:	3f 90       	pop	r3
     77a:	2f 90       	pop	r2
     77c:	1f 90       	pop	r1
     77e:	0f 90       	pop	r0
     780:	0c be       	out	0x3c, r0	; 60
     782:	0f 90       	pop	r0
     784:	0b be       	out	0x3b, r0	; 59
     786:	0f 90       	pop	r0
     788:	0f be       	out	0x3f, r0	; 63
     78a:	0f 90       	pop	r0
     78c:	08 95       	ret

0000078e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     78e:	0f 92       	push	r0
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	0f 92       	push	r0
     796:	0b b6       	in	r0, 0x3b	; 59
     798:	0f 92       	push	r0
     79a:	0c b6       	in	r0, 0x3c	; 60
     79c:	0f 92       	push	r0
     79e:	1f 92       	push	r1
     7a0:	11 24       	eor	r1, r1
     7a2:	2f 92       	push	r2
     7a4:	3f 92       	push	r3
     7a6:	4f 92       	push	r4
     7a8:	5f 92       	push	r5
     7aa:	6f 92       	push	r6
     7ac:	7f 92       	push	r7
     7ae:	8f 92       	push	r8
     7b0:	9f 92       	push	r9
     7b2:	af 92       	push	r10
     7b4:	bf 92       	push	r11
     7b6:	cf 92       	push	r12
     7b8:	df 92       	push	r13
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	2f 93       	push	r18
     7c4:	3f 93       	push	r19
     7c6:	4f 93       	push	r20
     7c8:	5f 93       	push	r21
     7ca:	6f 93       	push	r22
     7cc:	7f 93       	push	r23
     7ce:	8f 93       	push	r24
     7d0:	9f 93       	push	r25
     7d2:	af 93       	push	r26
     7d4:	bf 93       	push	r27
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	ef 93       	push	r30
     7dc:	ff 93       	push	r31
     7de:	a0 91 7b 13 	lds	r26, 0x137B	; 0x80137b <pxCurrentTCB>
     7e2:	b0 91 7c 13 	lds	r27, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
     7e6:	0d b6       	in	r0, 0x3d	; 61
     7e8:	0d 92       	st	X+, r0
     7ea:	0e b6       	in	r0, 0x3e	; 62
     7ec:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     7ee:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     7f0:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <xTaskIncrementTick>
     7f4:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     7f6:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     7fa:	a0 91 7b 13 	lds	r26, 0x137B	; 0x80137b <pxCurrentTCB>
     7fe:	b0 91 7c 13 	lds	r27, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
     802:	cd 91       	ld	r28, X+
     804:	cd bf       	out	0x3d, r28	; 61
     806:	dd 91       	ld	r29, X+
     808:	de bf       	out	0x3e, r29	; 62
     80a:	ff 91       	pop	r31
     80c:	ef 91       	pop	r30
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	bf 91       	pop	r27
     814:	af 91       	pop	r26
     816:	9f 91       	pop	r25
     818:	8f 91       	pop	r24
     81a:	7f 91       	pop	r23
     81c:	6f 91       	pop	r22
     81e:	5f 91       	pop	r21
     820:	4f 91       	pop	r20
     822:	3f 91       	pop	r19
     824:	2f 91       	pop	r18
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	df 90       	pop	r13
     830:	cf 90       	pop	r12
     832:	bf 90       	pop	r11
     834:	af 90       	pop	r10
     836:	9f 90       	pop	r9
     838:	8f 90       	pop	r8
     83a:	7f 90       	pop	r7
     83c:	6f 90       	pop	r6
     83e:	5f 90       	pop	r5
     840:	4f 90       	pop	r4
     842:	3f 90       	pop	r3
     844:	2f 90       	pop	r2
     846:	1f 90       	pop	r1
     848:	0f 90       	pop	r0
     84a:	0c be       	out	0x3c, r0	; 60
     84c:	0f 90       	pop	r0
     84e:	0b be       	out	0x3b, r0	; 59
     850:	0f 90       	pop	r0
     852:	0f be       	out	0x3f, r0	; 63
     854:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     856:	08 95       	ret

00000858 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     858:	9a df       	rcall	.-204    	; 0x78e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     85a:	18 95       	reti

0000085c <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     85c:	dc 01       	movw	r26, r24
     85e:	53 96       	adiw	r26, 0x13	; 19
     860:	2c 91       	ld	r18, X
     862:	53 97       	sbiw	r26, 0x13	; 19
     864:	22 23       	and	r18, r18
     866:	41 f0       	breq	.+16     	; 0x878 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     868:	5a 96       	adiw	r26, 0x1a	; 26
     86a:	ed 91       	ld	r30, X+
     86c:	fc 91       	ld	r31, X
     86e:	5b 97       	sbiw	r26, 0x1b	; 27
     870:	90 81       	ld	r25, Z
     872:	8a e0       	ldi	r24, 0x0A	; 10
     874:	89 1b       	sub	r24, r25
     876:	08 95       	ret
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	08 95       	ret

0000087c <prvIsQueueEmpty>:
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	0f 92       	push	r0
     882:	fc 01       	movw	r30, r24
     884:	86 8d       	ldd	r24, Z+30	; 0x1e
     886:	81 11       	cpse	r24, r1
     888:	02 c0       	rjmp	.+4      	; 0x88e <prvIsQueueEmpty+0x12>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	01 c0       	rjmp	.+2      	; 0x890 <prvIsQueueEmpty+0x14>
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	0f 90       	pop	r0
     892:	0f be       	out	0x3f, r0	; 63
     894:	08 95       	ret

00000896 <prvIsQueueFull>:
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	0f 92       	push	r0
     89c:	fc 01       	movw	r30, r24
     89e:	26 8d       	ldd	r18, Z+30	; 0x1e
     8a0:	87 8d       	ldd	r24, Z+31	; 0x1f
     8a2:	28 13       	cpse	r18, r24
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <prvIsQueueFull+0x14>
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <prvIsQueueFull+0x16>
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	0f 90       	pop	r0
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	08 95       	ret

000008b2 <prvCopyDataToQueue>:
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
     8bc:	04 2f       	mov	r16, r20
     8be:	1e 8d       	ldd	r17, Y+30	; 0x1e
     8c0:	48 a1       	ldd	r20, Y+32	; 0x20
     8c2:	41 11       	cpse	r20, r1
     8c4:	0c c0       	rjmp	.+24     	; 0x8de <prvCopyDataToQueue+0x2c>
     8c6:	88 81       	ld	r24, Y
     8c8:	99 81       	ldd	r25, Y+1	; 0x01
     8ca:	89 2b       	or	r24, r25
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <prvCopyDataToQueue+0x1e>
     8ce:	42 c0       	rjmp	.+132    	; 0x954 <prvCopyDataToQueue+0xa2>
     8d0:	8c 81       	ldd	r24, Y+4	; 0x04
     8d2:	9d 81       	ldd	r25, Y+5	; 0x05
     8d4:	0e 94 5e 12 	call	0x24bc	; 0x24bc <xTaskPriorityDisinherit>
     8d8:	1d 82       	std	Y+5, r1	; 0x05
     8da:	1c 82       	std	Y+4, r1	; 0x04
     8dc:	42 c0       	rjmp	.+132    	; 0x962 <prvCopyDataToQueue+0xb0>
     8de:	01 11       	cpse	r16, r1
     8e0:	17 c0       	rjmp	.+46     	; 0x910 <prvCopyDataToQueue+0x5e>
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	8a 81       	ldd	r24, Y+2	; 0x02
     8e6:	9b 81       	ldd	r25, Y+3	; 0x03
     8e8:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <memcpy>
     8ec:	28 a1       	ldd	r18, Y+32	; 0x20
     8ee:	8a 81       	ldd	r24, Y+2	; 0x02
     8f0:	9b 81       	ldd	r25, Y+3	; 0x03
     8f2:	82 0f       	add	r24, r18
     8f4:	91 1d       	adc	r25, r1
     8f6:	9b 83       	std	Y+3, r25	; 0x03
     8f8:	8a 83       	std	Y+2, r24	; 0x02
     8fa:	2c 81       	ldd	r18, Y+4	; 0x04
     8fc:	3d 81       	ldd	r19, Y+5	; 0x05
     8fe:	82 17       	cp	r24, r18
     900:	93 07       	cpc	r25, r19
     902:	50 f1       	brcs	.+84     	; 0x958 <prvCopyDataToQueue+0xa6>
     904:	88 81       	ld	r24, Y
     906:	99 81       	ldd	r25, Y+1	; 0x01
     908:	9b 83       	std	Y+3, r25	; 0x03
     90a:	8a 83       	std	Y+2, r24	; 0x02
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	29 c0       	rjmp	.+82     	; 0x962 <prvCopyDataToQueue+0xb0>
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	8e 81       	ldd	r24, Y+6	; 0x06
     914:	9f 81       	ldd	r25, Y+7	; 0x07
     916:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <memcpy>
     91a:	88 a1       	ldd	r24, Y+32	; 0x20
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	91 95       	neg	r25
     920:	81 95       	neg	r24
     922:	91 09       	sbc	r25, r1
     924:	2e 81       	ldd	r18, Y+6	; 0x06
     926:	3f 81       	ldd	r19, Y+7	; 0x07
     928:	28 0f       	add	r18, r24
     92a:	39 1f       	adc	r19, r25
     92c:	3f 83       	std	Y+7, r19	; 0x07
     92e:	2e 83       	std	Y+6, r18	; 0x06
     930:	48 81       	ld	r20, Y
     932:	59 81       	ldd	r21, Y+1	; 0x01
     934:	24 17       	cp	r18, r20
     936:	35 07       	cpc	r19, r21
     938:	30 f4       	brcc	.+12     	; 0x946 <prvCopyDataToQueue+0x94>
     93a:	2c 81       	ldd	r18, Y+4	; 0x04
     93c:	3d 81       	ldd	r19, Y+5	; 0x05
     93e:	82 0f       	add	r24, r18
     940:	93 1f       	adc	r25, r19
     942:	9f 83       	std	Y+7, r25	; 0x07
     944:	8e 83       	std	Y+6, r24	; 0x06
     946:	02 30       	cpi	r16, 0x02	; 2
     948:	49 f4       	brne	.+18     	; 0x95c <prvCopyDataToQueue+0xaa>
     94a:	11 23       	and	r17, r17
     94c:	49 f0       	breq	.+18     	; 0x960 <prvCopyDataToQueue+0xae>
     94e:	11 50       	subi	r17, 0x01	; 1
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	07 c0       	rjmp	.+14     	; 0x962 <prvCopyDataToQueue+0xb0>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	05 c0       	rjmp	.+10     	; 0x962 <prvCopyDataToQueue+0xb0>
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	03 c0       	rjmp	.+6      	; 0x962 <prvCopyDataToQueue+0xb0>
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	01 c0       	rjmp	.+2      	; 0x962 <prvCopyDataToQueue+0xb0>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	1f 5f       	subi	r17, 0xFF	; 255
     964:	1e 8f       	std	Y+30, r17	; 0x1e
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	08 95       	ret

00000970 <prvCopyDataFromQueue>:
     970:	fc 01       	movw	r30, r24
     972:	40 a1       	ldd	r20, Z+32	; 0x20
     974:	44 23       	and	r20, r20
     976:	a9 f0       	breq	.+42     	; 0x9a2 <prvCopyDataFromQueue+0x32>
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	26 81       	ldd	r18, Z+6	; 0x06
     97c:	37 81       	ldd	r19, Z+7	; 0x07
     97e:	24 0f       	add	r18, r20
     980:	35 1f       	adc	r19, r21
     982:	37 83       	std	Z+7, r19	; 0x07
     984:	26 83       	std	Z+6, r18	; 0x06
     986:	84 81       	ldd	r24, Z+4	; 0x04
     988:	95 81       	ldd	r25, Z+5	; 0x05
     98a:	28 17       	cp	r18, r24
     98c:	39 07       	cpc	r19, r25
     98e:	20 f0       	brcs	.+8      	; 0x998 <prvCopyDataFromQueue+0x28>
     990:	80 81       	ld	r24, Z
     992:	91 81       	ldd	r25, Z+1	; 0x01
     994:	97 83       	std	Z+7, r25	; 0x07
     996:	86 83       	std	Z+6, r24	; 0x06
     998:	cb 01       	movw	r24, r22
     99a:	66 81       	ldd	r22, Z+6	; 0x06
     99c:	77 81       	ldd	r23, Z+7	; 0x07
     99e:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <memcpy>
     9a2:	08 95       	ret

000009a4 <prvUnlockQueue>:
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	ec 01       	movw	r28, r24
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	0f 92       	push	r0
     9b2:	1a a1       	ldd	r17, Y+34	; 0x22
     9b4:	0b c0       	rjmp	.+22     	; 0x9cc <prvUnlockQueue+0x28>
     9b6:	8b 89       	ldd	r24, Y+19	; 0x13
     9b8:	88 23       	and	r24, r24
     9ba:	51 f0       	breq	.+20     	; 0x9d0 <prvUnlockQueue+0x2c>
     9bc:	ce 01       	movw	r24, r28
     9be:	43 96       	adiw	r24, 0x13	; 19
     9c0:	0e 94 84 10 	call	0x2108	; 0x2108 <xTaskRemoveFromEventList>
     9c4:	81 11       	cpse	r24, r1
     9c6:	0e 94 c0 11 	call	0x2380	; 0x2380 <vTaskMissedYield>
     9ca:	11 50       	subi	r17, 0x01	; 1
     9cc:	11 16       	cp	r1, r17
     9ce:	9c f3       	brlt	.-26     	; 0x9b6 <prvUnlockQueue+0x12>
     9d0:	8f ef       	ldi	r24, 0xFF	; 255
     9d2:	8a a3       	std	Y+34, r24	; 0x22
     9d4:	0f 90       	pop	r0
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	0f 92       	push	r0
     9de:	19 a1       	ldd	r17, Y+33	; 0x21
     9e0:	0b c0       	rjmp	.+22     	; 0x9f8 <prvUnlockQueue+0x54>
     9e2:	88 85       	ldd	r24, Y+8	; 0x08
     9e4:	88 23       	and	r24, r24
     9e6:	51 f0       	breq	.+20     	; 0x9fc <prvUnlockQueue+0x58>
     9e8:	ce 01       	movw	r24, r28
     9ea:	08 96       	adiw	r24, 0x08	; 8
     9ec:	0e 94 84 10 	call	0x2108	; 0x2108 <xTaskRemoveFromEventList>
     9f0:	81 11       	cpse	r24, r1
     9f2:	0e 94 c0 11 	call	0x2380	; 0x2380 <vTaskMissedYield>
     9f6:	11 50       	subi	r17, 0x01	; 1
     9f8:	11 16       	cp	r1, r17
     9fa:	9c f3       	brlt	.-26     	; 0x9e2 <prvUnlockQueue+0x3e>
     9fc:	8f ef       	ldi	r24, 0xFF	; 255
     9fe:	89 a3       	std	Y+33, r24	; 0x21
     a00:	0f 90       	pop	r0
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	08 95       	ret

00000a0c <xQueueGenericReset>:
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	ec 01       	movw	r28, r24
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	0f 92       	push	r0
     a18:	e8 81       	ld	r30, Y
     a1a:	f9 81       	ldd	r31, Y+1	; 0x01
     a1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a1e:	28 a1       	ldd	r18, Y+32	; 0x20
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	82 9f       	mul	r24, r18
     a26:	a0 01       	movw	r20, r0
     a28:	83 9f       	mul	r24, r19
     a2a:	50 0d       	add	r21, r0
     a2c:	92 9f       	mul	r25, r18
     a2e:	50 0d       	add	r21, r0
     a30:	11 24       	eor	r1, r1
     a32:	4e 0f       	add	r20, r30
     a34:	5f 1f       	adc	r21, r31
     a36:	5d 83       	std	Y+5, r21	; 0x05
     a38:	4c 83       	std	Y+4, r20	; 0x04
     a3a:	1e 8e       	std	Y+30, r1	; 0x1e
     a3c:	fb 83       	std	Y+3, r31	; 0x03
     a3e:	ea 83       	std	Y+2, r30	; 0x02
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	28 9f       	mul	r18, r24
     a44:	a0 01       	movw	r20, r0
     a46:	29 9f       	mul	r18, r25
     a48:	50 0d       	add	r21, r0
     a4a:	38 9f       	mul	r19, r24
     a4c:	50 0d       	add	r21, r0
     a4e:	11 24       	eor	r1, r1
     a50:	cf 01       	movw	r24, r30
     a52:	84 0f       	add	r24, r20
     a54:	95 1f       	adc	r25, r21
     a56:	9f 83       	std	Y+7, r25	; 0x07
     a58:	8e 83       	std	Y+6, r24	; 0x06
     a5a:	8f ef       	ldi	r24, 0xFF	; 255
     a5c:	89 a3       	std	Y+33, r24	; 0x21
     a5e:	8a a3       	std	Y+34, r24	; 0x22
     a60:	61 11       	cpse	r22, r1
     a62:	0b c0       	rjmp	.+22     	; 0xa7a <xQueueGenericReset+0x6e>
     a64:	88 85       	ldd	r24, Y+8	; 0x08
     a66:	88 23       	and	r24, r24
     a68:	71 f0       	breq	.+28     	; 0xa86 <xQueueGenericReset+0x7a>
     a6a:	ce 01       	movw	r24, r28
     a6c:	08 96       	adiw	r24, 0x08	; 8
     a6e:	0e 94 84 10 	call	0x2108	; 0x2108 <xTaskRemoveFromEventList>
     a72:	88 23       	and	r24, r24
     a74:	41 f0       	breq	.+16     	; 0xa86 <xQueueGenericReset+0x7a>
     a76:	2a de       	rcall	.-940    	; 0x6cc <vPortYield>
     a78:	06 c0       	rjmp	.+12     	; 0xa86 <xQueueGenericReset+0x7a>
     a7a:	ce 01       	movw	r24, r28
     a7c:	08 96       	adiw	r24, 0x08	; 8
     a7e:	58 dd       	rcall	.-1360   	; 0x530 <vListInitialise>
     a80:	ce 01       	movw	r24, r28
     a82:	43 96       	adiw	r24, 0x13	; 19
     a84:	55 dd       	rcall	.-1366   	; 0x530 <vListInitialise>
     a86:	0f 90       	pop	r0
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <prvInitialiseNewQueue>:
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	f8 01       	movw	r30, r16
     a98:	61 11       	cpse	r22, r1
     a9a:	03 c0       	rjmp	.+6      	; 0xaa2 <prvInitialiseNewQueue+0x10>
     a9c:	11 83       	std	Z+1, r17	; 0x01
     a9e:	00 83       	st	Z, r16
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <prvInitialiseNewQueue+0x14>
     aa2:	51 83       	std	Z+1, r21	; 0x01
     aa4:	40 83       	st	Z, r20
     aa6:	87 8f       	std	Z+31, r24	; 0x1f
     aa8:	60 a3       	std	Z+32, r22	; 0x20
     aaa:	61 e0       	ldi	r22, 0x01	; 1
     aac:	cf 01       	movw	r24, r30
     aae:	ae df       	rcall	.-164    	; 0xa0c <xQueueGenericReset>
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	08 95       	ret

00000ab6 <xQueueGenericCreate>:
     ab6:	df 92       	push	r13
     ab8:	ef 92       	push	r14
     aba:	ff 92       	push	r15
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	f8 2e       	mov	r15, r24
     ac6:	e6 2e       	mov	r14, r22
     ac8:	d4 2e       	mov	r13, r20
     aca:	86 9f       	mul	r24, r22
     acc:	c0 01       	movw	r24, r0
     ace:	11 24       	eor	r1, r1
     ad0:	83 96       	adiw	r24, 0x23	; 35
     ad2:	48 dc       	rcall	.-1904   	; 0x364 <pvPortMalloc>
     ad4:	ec 01       	movw	r28, r24
     ad6:	00 97       	sbiw	r24, 0x00	; 0
     ad8:	41 f0       	breq	.+16     	; 0xaea <xQueueGenericCreate+0x34>
     ada:	8c 01       	movw	r16, r24
     adc:	2d 2d       	mov	r18, r13
     ade:	ac 01       	movw	r20, r24
     ae0:	4d 5d       	subi	r20, 0xDD	; 221
     ae2:	5f 4f       	sbci	r21, 0xFF	; 255
     ae4:	6e 2d       	mov	r22, r14
     ae6:	8f 2d       	mov	r24, r15
     ae8:	d4 df       	rcall	.-88     	; 0xa92 <prvInitialiseNewQueue>
     aea:	ce 01       	movw	r24, r28
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <xQueueGenericSend>:
     afc:	cf 92       	push	r12
     afe:	df 92       	push	r13
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	29 97       	sbiw	r28, 0x09	; 9
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	7c 01       	movw	r14, r24
     b1e:	6b 01       	movw	r12, r22
     b20:	2e 83       	std	Y+6, r18	; 0x06
     b22:	3f 83       	std	Y+7, r19	; 0x07
     b24:	48 87       	std	Y+8, r20	; 0x08
     b26:	59 87       	std	Y+9, r21	; 0x09
     b28:	10 e0       	ldi	r17, 0x00	; 0
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	0f 92       	push	r0
     b30:	f7 01       	movw	r30, r14
     b32:	96 8d       	ldd	r25, Z+30	; 0x1e
     b34:	87 8d       	ldd	r24, Z+31	; 0x1f
     b36:	98 17       	cp	r25, r24
     b38:	10 f0       	brcs	.+4      	; 0xb3e <xQueueGenericSend+0x42>
     b3a:	02 30       	cpi	r16, 0x02	; 2
     b3c:	b1 f4       	brne	.+44     	; 0xb6a <xQueueGenericSend+0x6e>
     b3e:	40 2f       	mov	r20, r16
     b40:	b6 01       	movw	r22, r12
     b42:	c7 01       	movw	r24, r14
     b44:	b6 de       	rcall	.-660    	; 0x8b2 <prvCopyDataToQueue>
     b46:	f7 01       	movw	r30, r14
     b48:	93 89       	ldd	r25, Z+19	; 0x13
     b4a:	99 23       	and	r25, r25
     b4c:	41 f0       	breq	.+16     	; 0xb5e <xQueueGenericSend+0x62>
     b4e:	c7 01       	movw	r24, r14
     b50:	43 96       	adiw	r24, 0x13	; 19
     b52:	0e 94 84 10 	call	0x2108	; 0x2108 <xTaskRemoveFromEventList>
     b56:	88 23       	and	r24, r24
     b58:	21 f0       	breq	.+8      	; 0xb62 <xQueueGenericSend+0x66>
     b5a:	b8 dd       	rcall	.-1168   	; 0x6cc <vPortYield>
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <xQueueGenericSend+0x66>
     b5e:	81 11       	cpse	r24, r1
     b60:	b5 dd       	rcall	.-1174   	; 0x6cc <vPortYield>
     b62:	0f 90       	pop	r0
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	4c c0       	rjmp	.+152    	; 0xc02 <xQueueGenericSend+0x106>
     b6a:	8e 81       	ldd	r24, Y+6	; 0x06
     b6c:	9f 81       	ldd	r25, Y+7	; 0x07
     b6e:	a8 85       	ldd	r26, Y+8	; 0x08
     b70:	b9 85       	ldd	r27, Y+9	; 0x09
     b72:	89 2b       	or	r24, r25
     b74:	8a 2b       	or	r24, r26
     b76:	8b 2b       	or	r24, r27
     b78:	21 f4       	brne	.+8      	; 0xb82 <xQueueGenericSend+0x86>
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	40 c0       	rjmp	.+128    	; 0xc02 <xQueueGenericSend+0x106>
     b82:	11 11       	cpse	r17, r1
     b84:	05 c0       	rjmp	.+10     	; 0xb90 <xQueueGenericSend+0x94>
     b86:	ce 01       	movw	r24, r28
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	0e 94 49 11 	call	0x2292	; 0x2292 <vTaskInternalSetTimeOutState>
     b8e:	11 e0       	ldi	r17, 0x01	; 1
     b90:	0f 90       	pop	r0
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	c4 d7       	rcall	.+3976   	; 0x1b1e <vTaskSuspendAll>
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	0f 92       	push	r0
     b9c:	f7 01       	movw	r30, r14
     b9e:	81 a1       	ldd	r24, Z+33	; 0x21
     ba0:	8f 3f       	cpi	r24, 0xFF	; 255
     ba2:	09 f4       	brne	.+2      	; 0xba6 <xQueueGenericSend+0xaa>
     ba4:	11 a2       	std	Z+33, r1	; 0x21
     ba6:	f7 01       	movw	r30, r14
     ba8:	82 a1       	ldd	r24, Z+34	; 0x22
     baa:	8f 3f       	cpi	r24, 0xFF	; 255
     bac:	09 f4       	brne	.+2      	; 0xbb0 <xQueueGenericSend+0xb4>
     bae:	12 a2       	std	Z+34, r1	; 0x22
     bb0:	0f 90       	pop	r0
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	be 01       	movw	r22, r28
     bb6:	6a 5f       	subi	r22, 0xFA	; 250
     bb8:	7f 4f       	sbci	r23, 0xFF	; 255
     bba:	ce 01       	movw	r24, r28
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <xTaskCheckForTimeOut>
     bc2:	81 11       	cpse	r24, r1
     bc4:	19 c0       	rjmp	.+50     	; 0xbf8 <xQueueGenericSend+0xfc>
     bc6:	c7 01       	movw	r24, r14
     bc8:	66 de       	rcall	.-820    	; 0x896 <prvIsQueueFull>
     bca:	88 23       	and	r24, r24
     bcc:	81 f0       	breq	.+32     	; 0xbee <xQueueGenericSend+0xf2>
     bce:	4e 81       	ldd	r20, Y+6	; 0x06
     bd0:	5f 81       	ldd	r21, Y+7	; 0x07
     bd2:	68 85       	ldd	r22, Y+8	; 0x08
     bd4:	79 85       	ldd	r23, Y+9	; 0x09
     bd6:	c7 01       	movw	r24, r14
     bd8:	08 96       	adiw	r24, 0x08	; 8
     bda:	0e 94 2b 10 	call	0x2056	; 0x2056 <vTaskPlaceOnEventList>
     bde:	c7 01       	movw	r24, r14
     be0:	e1 de       	rcall	.-574    	; 0x9a4 <prvUnlockQueue>
     be2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <xTaskResumeAll>
     be6:	81 11       	cpse	r24, r1
     be8:	a0 cf       	rjmp	.-192    	; 0xb2a <xQueueGenericSend+0x2e>
     bea:	70 dd       	rcall	.-1312   	; 0x6cc <vPortYield>
     bec:	9e cf       	rjmp	.-196    	; 0xb2a <xQueueGenericSend+0x2e>
     bee:	c7 01       	movw	r24, r14
     bf0:	d9 de       	rcall	.-590    	; 0x9a4 <prvUnlockQueue>
     bf2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <xTaskResumeAll>
     bf6:	99 cf       	rjmp	.-206    	; 0xb2a <xQueueGenericSend+0x2e>
     bf8:	c7 01       	movw	r24, r14
     bfa:	d4 de       	rcall	.-600    	; 0x9a4 <prvUnlockQueue>
     bfc:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <xTaskResumeAll>
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	29 96       	adiw	r28, 0x09	; 9
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	ff 90       	pop	r15
     c18:	ef 90       	pop	r14
     c1a:	df 90       	pop	r13
     c1c:	cf 90       	pop	r12
     c1e:	08 95       	ret

00000c20 <prvInitialiseMutex>:
     c20:	0f 93       	push	r16
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	69 f0       	breq	.+26     	; 0xc40 <prvInitialiseMutex+0x20>
     c26:	fc 01       	movw	r30, r24
     c28:	15 82       	std	Z+5, r1	; 0x05
     c2a:	14 82       	std	Z+4, r1	; 0x04
     c2c:	11 82       	std	Z+1, r1	; 0x01
     c2e:	10 82       	st	Z, r1
     c30:	16 82       	std	Z+6, r1	; 0x06
     c32:	00 e0       	ldi	r16, 0x00	; 0
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	a9 01       	movw	r20, r18
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	5e df       	rcall	.-324    	; 0xafc <xQueueGenericSend>
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <xQueueCreateMutex>:
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	48 2f       	mov	r20, r24
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	33 df       	rcall	.-410    	; 0xab6 <xQueueGenericCreate>
     c50:	ec 01       	movw	r28, r24
     c52:	e6 df       	rcall	.-52     	; 0xc20 <prvInitialiseMutex>
     c54:	ce 01       	movw	r24, r28
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <xQueueGenericSendFromISR>:
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	8a 01       	movw	r16, r20
     c6a:	fc 01       	movw	r30, r24
     c6c:	56 8d       	ldd	r21, Z+30	; 0x1e
     c6e:	37 8d       	ldd	r19, Z+31	; 0x1f
     c70:	53 17       	cp	r21, r19
     c72:	10 f0       	brcs	.+4      	; 0xc78 <xQueueGenericSendFromISR+0x1c>
     c74:	22 30       	cpi	r18, 0x02	; 2
     c76:	f9 f4       	brne	.+62     	; 0xcb6 <xQueueGenericSendFromISR+0x5a>
     c78:	42 2f       	mov	r20, r18
     c7a:	78 01       	movw	r14, r16
     c7c:	ec 01       	movw	r28, r24
     c7e:	1a a1       	ldd	r17, Y+34	; 0x22
     c80:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c82:	ce 01       	movw	r24, r28
     c84:	16 de       	rcall	.-980    	; 0x8b2 <prvCopyDataToQueue>
     c86:	1f 3f       	cpi	r17, 0xFF	; 255
     c88:	81 f4       	brne	.+32     	; 0xcaa <xQueueGenericSendFromISR+0x4e>
     c8a:	8b 89       	ldd	r24, Y+19	; 0x13
     c8c:	88 23       	and	r24, r24
     c8e:	a9 f0       	breq	.+42     	; 0xcba <xQueueGenericSendFromISR+0x5e>
     c90:	ce 01       	movw	r24, r28
     c92:	43 96       	adiw	r24, 0x13	; 19
     c94:	0e 94 84 10 	call	0x2108	; 0x2108 <xTaskRemoveFromEventList>
     c98:	88 23       	and	r24, r24
     c9a:	89 f0       	breq	.+34     	; 0xcbe <xQueueGenericSendFromISR+0x62>
     c9c:	e1 14       	cp	r14, r1
     c9e:	f1 04       	cpc	r15, r1
     ca0:	81 f0       	breq	.+32     	; 0xcc2 <xQueueGenericSendFromISR+0x66>
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	f7 01       	movw	r30, r14
     ca6:	80 83       	st	Z, r24
     ca8:	0d c0       	rjmp	.+26     	; 0xcc4 <xQueueGenericSendFromISR+0x68>
     caa:	ff 24       	eor	r15, r15
     cac:	f3 94       	inc	r15
     cae:	f1 0e       	add	r15, r17
     cb0:	fa a2       	std	Y+34, r15	; 0x22
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	07 c0       	rjmp	.+14     	; 0xcc4 <xQueueGenericSendFromISR+0x68>
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	05 c0       	rjmp	.+10     	; 0xcc4 <xQueueGenericSendFromISR+0x68>
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <xQueueGenericSendFromISR+0x68>
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <xQueueGenericSendFromISR+0x68>
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	08 95       	ret

00000cd2 <xQueueReceive>:
     cd2:	cf 92       	push	r12
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	29 97       	sbiw	r28, 0x09	; 9
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	8c 01       	movw	r16, r24
     cf4:	6b 01       	movw	r12, r22
     cf6:	2e 83       	std	Y+6, r18	; 0x06
     cf8:	3f 83       	std	Y+7, r19	; 0x07
     cfa:	48 87       	std	Y+8, r20	; 0x08
     cfc:	59 87       	std	Y+9, r21	; 0x09
     cfe:	e1 2c       	mov	r14, r1
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	0f 92       	push	r0
     d06:	f8 01       	movw	r30, r16
     d08:	f6 8c       	ldd	r15, Z+30	; 0x1e
     d0a:	ff 20       	and	r15, r15
     d0c:	99 f0       	breq	.+38     	; 0xd34 <xQueueReceive+0x62>
     d0e:	b6 01       	movw	r22, r12
     d10:	c8 01       	movw	r24, r16
     d12:	2e de       	rcall	.-932    	; 0x970 <prvCopyDataFromQueue>
     d14:	fa 94       	dec	r15
     d16:	f8 01       	movw	r30, r16
     d18:	f6 8e       	std	Z+30, r15	; 0x1e
     d1a:	80 85       	ldd	r24, Z+8	; 0x08
     d1c:	88 23       	and	r24, r24
     d1e:	31 f0       	breq	.+12     	; 0xd2c <xQueueReceive+0x5a>
     d20:	c8 01       	movw	r24, r16
     d22:	08 96       	adiw	r24, 0x08	; 8
     d24:	0e 94 84 10 	call	0x2108	; 0x2108 <xTaskRemoveFromEventList>
     d28:	81 11       	cpse	r24, r1
     d2a:	d0 dc       	rcall	.-1632   	; 0x6cc <vPortYield>
     d2c:	0f 90       	pop	r0
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	4f c0       	rjmp	.+158    	; 0xdd2 <xQueueReceive+0x100>
     d34:	8e 81       	ldd	r24, Y+6	; 0x06
     d36:	9f 81       	ldd	r25, Y+7	; 0x07
     d38:	a8 85       	ldd	r26, Y+8	; 0x08
     d3a:	b9 85       	ldd	r27, Y+9	; 0x09
     d3c:	89 2b       	or	r24, r25
     d3e:	8a 2b       	or	r24, r26
     d40:	8b 2b       	or	r24, r27
     d42:	21 f4       	brne	.+8      	; 0xd4c <xQueueReceive+0x7a>
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <xQueueReceive+0x100>
     d4c:	e1 10       	cpse	r14, r1
     d4e:	06 c0       	rjmp	.+12     	; 0xd5c <xQueueReceive+0x8a>
     d50:	ce 01       	movw	r24, r28
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	0e 94 49 11 	call	0x2292	; 0x2292 <vTaskInternalSetTimeOutState>
     d58:	ee 24       	eor	r14, r14
     d5a:	e3 94       	inc	r14
     d5c:	0f 90       	pop	r0
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	de d6       	rcall	.+3516   	; 0x1b1e <vTaskSuspendAll>
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	0f 92       	push	r0
     d68:	f8 01       	movw	r30, r16
     d6a:	81 a1       	ldd	r24, Z+33	; 0x21
     d6c:	8f 3f       	cpi	r24, 0xFF	; 255
     d6e:	09 f4       	brne	.+2      	; 0xd72 <xQueueReceive+0xa0>
     d70:	11 a2       	std	Z+33, r1	; 0x21
     d72:	f8 01       	movw	r30, r16
     d74:	82 a1       	ldd	r24, Z+34	; 0x22
     d76:	8f 3f       	cpi	r24, 0xFF	; 255
     d78:	09 f4       	brne	.+2      	; 0xd7c <xQueueReceive+0xaa>
     d7a:	12 a2       	std	Z+34, r1	; 0x22
     d7c:	0f 90       	pop	r0
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	be 01       	movw	r22, r28
     d82:	6a 5f       	subi	r22, 0xFA	; 250
     d84:	7f 4f       	sbci	r23, 0xFF	; 255
     d86:	ce 01       	movw	r24, r28
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <xTaskCheckForTimeOut>
     d8e:	81 11       	cpse	r24, r1
     d90:	17 c0       	rjmp	.+46     	; 0xdc0 <xQueueReceive+0xee>
     d92:	c8 01       	movw	r24, r16
     d94:	73 dd       	rcall	.-1306   	; 0x87c <prvIsQueueEmpty>
     d96:	88 23       	and	r24, r24
     d98:	79 f0       	breq	.+30     	; 0xdb8 <xQueueReceive+0xe6>
     d9a:	4e 81       	ldd	r20, Y+6	; 0x06
     d9c:	5f 81       	ldd	r21, Y+7	; 0x07
     d9e:	68 85       	ldd	r22, Y+8	; 0x08
     da0:	79 85       	ldd	r23, Y+9	; 0x09
     da2:	c8 01       	movw	r24, r16
     da4:	43 96       	adiw	r24, 0x13	; 19
     da6:	0e 94 2b 10 	call	0x2056	; 0x2056 <vTaskPlaceOnEventList>
     daa:	c8 01       	movw	r24, r16
     dac:	fb dd       	rcall	.-1034   	; 0x9a4 <prvUnlockQueue>
     dae:	f7 d7       	rcall	.+4078   	; 0x1d9e <xTaskResumeAll>
     db0:	81 11       	cpse	r24, r1
     db2:	a6 cf       	rjmp	.-180    	; 0xd00 <xQueueReceive+0x2e>
     db4:	8b dc       	rcall	.-1770   	; 0x6cc <vPortYield>
     db6:	a4 cf       	rjmp	.-184    	; 0xd00 <xQueueReceive+0x2e>
     db8:	c8 01       	movw	r24, r16
     dba:	f4 dd       	rcall	.-1048   	; 0x9a4 <prvUnlockQueue>
     dbc:	f0 d7       	rcall	.+4064   	; 0x1d9e <xTaskResumeAll>
     dbe:	a0 cf       	rjmp	.-192    	; 0xd00 <xQueueReceive+0x2e>
     dc0:	c8 01       	movw	r24, r16
     dc2:	f0 dd       	rcall	.-1056   	; 0x9a4 <prvUnlockQueue>
     dc4:	ec d7       	rcall	.+4056   	; 0x1d9e <xTaskResumeAll>
     dc6:	c8 01       	movw	r24, r16
     dc8:	59 dd       	rcall	.-1358   	; 0x87c <prvIsQueueEmpty>
     dca:	88 23       	and	r24, r24
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <xQueueReceive+0xfe>
     dce:	98 cf       	rjmp	.-208    	; 0xd00 <xQueueReceive+0x2e>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	29 96       	adiw	r28, 0x09	; 9
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	df 90       	pop	r13
     dec:	cf 90       	pop	r12
     dee:	08 95       	ret

00000df0 <xQueueSemaphoreTake>:
     df0:	ef 92       	push	r14
     df2:	ff 92       	push	r15
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	29 97       	sbiw	r28, 0x09	; 9
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	8c 01       	movw	r16, r24
     e0e:	4e 83       	std	Y+6, r20	; 0x06
     e10:	5f 83       	std	Y+7, r21	; 0x07
     e12:	68 87       	std	Y+8, r22	; 0x08
     e14:	79 87       	std	Y+9, r23	; 0x09
     e16:	e1 2c       	mov	r14, r1
     e18:	f1 2c       	mov	r15, r1
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	0f 92       	push	r0
     e20:	f8 01       	movw	r30, r16
     e22:	86 8d       	ldd	r24, Z+30	; 0x1e
     e24:	88 23       	and	r24, r24
     e26:	c9 f0       	breq	.+50     	; 0xe5a <xQueueSemaphoreTake+0x6a>
     e28:	81 50       	subi	r24, 0x01	; 1
     e2a:	86 8f       	std	Z+30, r24	; 0x1e
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	89 2b       	or	r24, r25
     e32:	29 f4       	brne	.+10     	; 0xe3e <xQueueSemaphoreTake+0x4e>
     e34:	0e 94 20 13 	call	0x2640	; 0x2640 <pvTaskIncrementMutexHeldCount>
     e38:	f8 01       	movw	r30, r16
     e3a:	95 83       	std	Z+5, r25	; 0x05
     e3c:	84 83       	std	Z+4, r24	; 0x04
     e3e:	f8 01       	movw	r30, r16
     e40:	80 85       	ldd	r24, Z+8	; 0x08
     e42:	88 23       	and	r24, r24
     e44:	31 f0       	breq	.+12     	; 0xe52 <xQueueSemaphoreTake+0x62>
     e46:	c8 01       	movw	r24, r16
     e48:	08 96       	adiw	r24, 0x08	; 8
     e4a:	0e 94 84 10 	call	0x2108	; 0x2108 <xTaskRemoveFromEventList>
     e4e:	81 11       	cpse	r24, r1
     e50:	3d dc       	rcall	.-1926   	; 0x6cc <vPortYield>
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	6f c0       	rjmp	.+222    	; 0xf38 <xQueueSemaphoreTake+0x148>
     e5a:	8e 81       	ldd	r24, Y+6	; 0x06
     e5c:	9f 81       	ldd	r25, Y+7	; 0x07
     e5e:	a8 85       	ldd	r26, Y+8	; 0x08
     e60:	b9 85       	ldd	r27, Y+9	; 0x09
     e62:	89 2b       	or	r24, r25
     e64:	8a 2b       	or	r24, r26
     e66:	8b 2b       	or	r24, r27
     e68:	21 f4       	brne	.+8      	; 0xe72 <xQueueSemaphoreTake+0x82>
     e6a:	0f 90       	pop	r0
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	63 c0       	rjmp	.+198    	; 0xf38 <xQueueSemaphoreTake+0x148>
     e72:	f1 10       	cpse	r15, r1
     e74:	06 c0       	rjmp	.+12     	; 0xe82 <xQueueSemaphoreTake+0x92>
     e76:	ce 01       	movw	r24, r28
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	0e 94 49 11 	call	0x2292	; 0x2292 <vTaskInternalSetTimeOutState>
     e7e:	ff 24       	eor	r15, r15
     e80:	f3 94       	inc	r15
     e82:	0f 90       	pop	r0
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	4b d6       	rcall	.+3222   	; 0x1b1e <vTaskSuspendAll>
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	0f 92       	push	r0
     e8e:	f8 01       	movw	r30, r16
     e90:	81 a1       	ldd	r24, Z+33	; 0x21
     e92:	8f 3f       	cpi	r24, 0xFF	; 255
     e94:	09 f4       	brne	.+2      	; 0xe98 <xQueueSemaphoreTake+0xa8>
     e96:	11 a2       	std	Z+33, r1	; 0x21
     e98:	f8 01       	movw	r30, r16
     e9a:	82 a1       	ldd	r24, Z+34	; 0x22
     e9c:	8f 3f       	cpi	r24, 0xFF	; 255
     e9e:	09 f4       	brne	.+2      	; 0xea2 <xQueueSemaphoreTake+0xb2>
     ea0:	12 a2       	std	Z+34, r1	; 0x22
     ea2:	0f 90       	pop	r0
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	be 01       	movw	r22, r28
     ea8:	6a 5f       	subi	r22, 0xFA	; 250
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	ce 01       	movw	r24, r28
     eae:	01 96       	adiw	r24, 0x01	; 1
     eb0:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <xTaskCheckForTimeOut>
     eb4:	81 11       	cpse	r24, r1
     eb6:	26 c0       	rjmp	.+76     	; 0xf04 <xQueueSemaphoreTake+0x114>
     eb8:	c8 01       	movw	r24, r16
     eba:	e0 dc       	rcall	.-1600   	; 0x87c <prvIsQueueEmpty>
     ebc:	88 23       	and	r24, r24
     ebe:	f1 f0       	breq	.+60     	; 0xefc <xQueueSemaphoreTake+0x10c>
     ec0:	f8 01       	movw	r30, r16
     ec2:	80 81       	ld	r24, Z
     ec4:	91 81       	ldd	r25, Z+1	; 0x01
     ec6:	89 2b       	or	r24, r25
     ec8:	51 f4       	brne	.+20     	; 0xede <xQueueSemaphoreTake+0xee>
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	0f 92       	push	r0
     ed0:	84 81       	ldd	r24, Z+4	; 0x04
     ed2:	95 81       	ldd	r25, Z+5	; 0x05
     ed4:	0e 94 d7 11 	call	0x23ae	; 0x23ae <xTaskPriorityInherit>
     ed8:	e8 2e       	mov	r14, r24
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	4e 81       	ldd	r20, Y+6	; 0x06
     ee0:	5f 81       	ldd	r21, Y+7	; 0x07
     ee2:	68 85       	ldd	r22, Y+8	; 0x08
     ee4:	79 85       	ldd	r23, Y+9	; 0x09
     ee6:	c8 01       	movw	r24, r16
     ee8:	43 96       	adiw	r24, 0x13	; 19
     eea:	0e 94 2b 10 	call	0x2056	; 0x2056 <vTaskPlaceOnEventList>
     eee:	c8 01       	movw	r24, r16
     ef0:	59 dd       	rcall	.-1358   	; 0x9a4 <prvUnlockQueue>
     ef2:	55 d7       	rcall	.+3754   	; 0x1d9e <xTaskResumeAll>
     ef4:	81 11       	cpse	r24, r1
     ef6:	91 cf       	rjmp	.-222    	; 0xe1a <xQueueSemaphoreTake+0x2a>
     ef8:	e9 db       	rcall	.-2094   	; 0x6cc <vPortYield>
     efa:	8f cf       	rjmp	.-226    	; 0xe1a <xQueueSemaphoreTake+0x2a>
     efc:	c8 01       	movw	r24, r16
     efe:	52 dd       	rcall	.-1372   	; 0x9a4 <prvUnlockQueue>
     f00:	4e d7       	rcall	.+3740   	; 0x1d9e <xTaskResumeAll>
     f02:	8b cf       	rjmp	.-234    	; 0xe1a <xQueueSemaphoreTake+0x2a>
     f04:	c8 01       	movw	r24, r16
     f06:	4e dd       	rcall	.-1380   	; 0x9a4 <prvUnlockQueue>
     f08:	4a d7       	rcall	.+3732   	; 0x1d9e <xTaskResumeAll>
     f0a:	c8 01       	movw	r24, r16
     f0c:	b7 dc       	rcall	.-1682   	; 0x87c <prvIsQueueEmpty>
     f0e:	88 23       	and	r24, r24
     f10:	09 f4       	brne	.+2      	; 0xf14 <xQueueSemaphoreTake+0x124>
     f12:	83 cf       	rjmp	.-250    	; 0xe1a <xQueueSemaphoreTake+0x2a>
     f14:	ee 20       	and	r14, r14
     f16:	79 f0       	breq	.+30     	; 0xf36 <xQueueSemaphoreTake+0x146>
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	0f 92       	push	r0
     f1e:	c8 01       	movw	r24, r16
     f20:	9d dc       	rcall	.-1734   	; 0x85c <prvGetDisinheritPriorityAfterTimeout>
     f22:	68 2f       	mov	r22, r24
     f24:	f8 01       	movw	r30, r16
     f26:	84 81       	ldd	r24, Z+4	; 0x04
     f28:	95 81       	ldd	r25, Z+5	; 0x05
     f2a:	0e 94 b9 12 	call	0x2572	; 0x2572 <vTaskPriorityDisinheritAfterTimeout>
     f2e:	0f 90       	pop	r0
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	01 c0       	rjmp	.+2      	; 0xf38 <xQueueSemaphoreTake+0x148>
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	29 96       	adiw	r28, 0x09	; 9
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	ff 90       	pop	r15
     f4e:	ef 90       	pop	r14
     f50:	08 95       	ret

00000f52 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	0f 92       	push	r0
     f5e:	89 a1       	ldd	r24, Y+33	; 0x21
     f60:	8f 3f       	cpi	r24, 0xFF	; 255
     f62:	09 f4       	brne	.+2      	; 0xf66 <vQueueWaitForMessageRestricted+0x14>
     f64:	19 a2       	std	Y+33, r1	; 0x21
     f66:	8a a1       	ldd	r24, Y+34	; 0x22
     f68:	8f 3f       	cpi	r24, 0xFF	; 255
     f6a:	09 f4       	brne	.+2      	; 0xf6e <vQueueWaitForMessageRestricted+0x1c>
     f6c:	1a a2       	std	Y+34, r1	; 0x22
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     f72:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f74:	81 11       	cpse	r24, r1
     f76:	04 c0       	rjmp	.+8      	; 0xf80 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     f78:	ce 01       	movw	r24, r28
     f7a:	43 96       	adiw	r24, 0x13	; 19
     f7c:	0e 94 42 10 	call	0x2084	; 0x2084 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     f80:	ce 01       	movw	r24, r28
     f82:	10 dd       	rcall	.-1504   	; 0x9a4 <prvUnlockQueue>
    }
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	08 95       	ret

00000f8a <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     f8a:	fc 01       	movw	r30, r24
     f8c:	44 81       	ldd	r20, Z+4	; 0x04
     f8e:	55 81       	ldd	r21, Z+5	; 0x05
     f90:	22 81       	ldd	r18, Z+2	; 0x02
     f92:	33 81       	ldd	r19, Z+3	; 0x03
     f94:	24 0f       	add	r18, r20
     f96:	35 1f       	adc	r19, r21
     f98:	80 81       	ld	r24, Z
     f9a:	91 81       	ldd	r25, Z+1	; 0x01
     f9c:	b9 01       	movw	r22, r18
     f9e:	68 1b       	sub	r22, r24
     fa0:	79 0b       	sbc	r23, r25
     fa2:	cb 01       	movw	r24, r22
     fa4:	64 17       	cp	r22, r20
     fa6:	75 07       	cpc	r23, r21
     fa8:	10 f0       	brcs	.+4      	; 0xfae <prvBytesInBuffer+0x24>
     faa:	84 1b       	sub	r24, r20
     fac:	95 0b       	sbc	r25, r21
     fae:	08 95       	ret

00000fb0 <prvInitialiseNewStreamBuffer>:
     fb0:	0f 93       	push	r16
     fb2:	fc 01       	movw	r30, r24
     fb4:	8f e0       	ldi	r24, 0x0F	; 15
     fb6:	df 01       	movw	r26, r30
     fb8:	1d 92       	st	X+, r1
     fba:	8a 95       	dec	r24
     fbc:	e9 f7       	brne	.-6      	; 0xfb8 <prvInitialiseNewStreamBuffer+0x8>
     fbe:	75 87       	std	Z+13, r23	; 0x0d
     fc0:	64 87       	std	Z+12, r22	; 0x0c
     fc2:	55 83       	std	Z+5, r21	; 0x05
     fc4:	44 83       	std	Z+4, r20	; 0x04
     fc6:	37 83       	std	Z+7, r19	; 0x07
     fc8:	26 83       	std	Z+6, r18	; 0x06
     fca:	06 87       	std	Z+14, r16	; 0x0e
     fcc:	0f 91       	pop	r16
     fce:	08 95       	ret

00000fd0 <prvWriteBytesToBuffer>:
     fd0:	af 92       	push	r10
     fd2:	bf 92       	push	r11
     fd4:	cf 92       	push	r12
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	6c 01       	movw	r12, r24
     fe6:	5b 01       	movw	r10, r22
     fe8:	7a 01       	movw	r14, r20
     fea:	fc 01       	movw	r30, r24
     fec:	c2 81       	ldd	r28, Z+2	; 0x02
     fee:	d3 81       	ldd	r29, Z+3	; 0x03
     ff0:	04 81       	ldd	r16, Z+4	; 0x04
     ff2:	15 81       	ldd	r17, Z+5	; 0x05
     ff4:	0c 1b       	sub	r16, r28
     ff6:	1d 0b       	sbc	r17, r29
     ff8:	40 17       	cp	r20, r16
     ffa:	51 07       	cpc	r21, r17
     ffc:	08 f4       	brcc	.+2      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ffe:	8a 01       	movw	r16, r20
    1000:	f6 01       	movw	r30, r12
    1002:	84 85       	ldd	r24, Z+12	; 0x0c
    1004:	95 85       	ldd	r25, Z+13	; 0x0d
    1006:	a8 01       	movw	r20, r16
    1008:	b5 01       	movw	r22, r10
    100a:	8c 0f       	add	r24, r28
    100c:	9d 1f       	adc	r25, r29
    100e:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <memcpy>
    1012:	0e 15       	cp	r16, r14
    1014:	1f 05       	cpc	r17, r15
    1016:	58 f4       	brcc	.+22     	; 0x102e <__EEPROM_REGION_LENGTH__+0x2e>
    1018:	a7 01       	movw	r20, r14
    101a:	40 1b       	sub	r20, r16
    101c:	51 0b       	sbc	r21, r17
    101e:	b5 01       	movw	r22, r10
    1020:	60 0f       	add	r22, r16
    1022:	71 1f       	adc	r23, r17
    1024:	f6 01       	movw	r30, r12
    1026:	84 85       	ldd	r24, Z+12	; 0x0c
    1028:	95 85       	ldd	r25, Z+13	; 0x0d
    102a:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <memcpy>
    102e:	ce 01       	movw	r24, r28
    1030:	8e 0d       	add	r24, r14
    1032:	9f 1d       	adc	r25, r15
    1034:	f6 01       	movw	r30, r12
    1036:	24 81       	ldd	r18, Z+4	; 0x04
    1038:	35 81       	ldd	r19, Z+5	; 0x05
    103a:	82 17       	cp	r24, r18
    103c:	93 07       	cpc	r25, r19
    103e:	10 f0       	brcs	.+4      	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    1040:	82 1b       	sub	r24, r18
    1042:	93 0b       	sbc	r25, r19
    1044:	f6 01       	movw	r30, r12
    1046:	93 83       	std	Z+3, r25	; 0x03
    1048:	82 83       	std	Z+2, r24	; 0x02
    104a:	c7 01       	movw	r24, r14
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	ff 90       	pop	r15
    1056:	ef 90       	pop	r14
    1058:	df 90       	pop	r13
    105a:	cf 90       	pop	r12
    105c:	bf 90       	pop	r11
    105e:	af 90       	pop	r10
    1060:	08 95       	ret

00001062 <prvWriteMessageToBuffer>:
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	1f 92       	push	r1
    1074:	1f 92       	push	r1
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	7c 01       	movw	r14, r24
    107c:	6b 01       	movw	r12, r22
    107e:	5a 83       	std	Y+2, r21	; 0x02
    1080:	49 83       	std	Y+1, r20	; 0x01
    1082:	21 15       	cp	r18, r1
    1084:	31 05       	cpc	r19, r1
    1086:	c1 f0       	breq	.+48     	; 0x10b8 <prvWriteMessageToBuffer+0x56>
    1088:	fc 01       	movw	r30, r24
    108a:	86 85       	ldd	r24, Z+14	; 0x0e
    108c:	80 fd       	sbrc	r24, 0
    108e:	08 c0       	rjmp	.+16     	; 0x10a0 <prvWriteMessageToBuffer+0x3e>
    1090:	42 17       	cp	r20, r18
    1092:	53 07       	cpc	r21, r19
    1094:	08 f4       	brcc	.+2      	; 0x1098 <prvWriteMessageToBuffer+0x36>
    1096:	9a 01       	movw	r18, r20
    1098:	3a 83       	std	Y+2, r19	; 0x02
    109a:	29 83       	std	Y+1, r18	; 0x01
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	0f c0       	rjmp	.+30     	; 0x10be <prvWriteMessageToBuffer+0x5c>
    10a0:	20 17       	cp	r18, r16
    10a2:	31 07       	cpc	r19, r17
    10a4:	58 f0       	brcs	.+22     	; 0x10bc <prvWriteMessageToBuffer+0x5a>
    10a6:	42 e0       	ldi	r20, 0x02	; 2
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	be 01       	movw	r22, r28
    10ac:	6f 5f       	subi	r22, 0xFF	; 255
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	c7 01       	movw	r24, r14
    10b2:	8e df       	rcall	.-228    	; 0xfd0 <prvWriteBytesToBuffer>
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <prvWriteMessageToBuffer+0x5c>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <prvWriteMessageToBuffer+0x5c>
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	88 23       	and	r24, r24
    10c0:	31 f0       	breq	.+12     	; 0x10ce <prvWriteMessageToBuffer+0x6c>
    10c2:	49 81       	ldd	r20, Y+1	; 0x01
    10c4:	5a 81       	ldd	r21, Y+2	; 0x02
    10c6:	b6 01       	movw	r22, r12
    10c8:	c7 01       	movw	r24, r14
    10ca:	82 df       	rcall	.-252    	; 0xfd0 <prvWriteBytesToBuffer>
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <prvWriteMessageToBuffer+0x70>
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
    10e6:	08 95       	ret

000010e8 <prvReadBytesFromBuffer>:
    10e8:	af 92       	push	r10
    10ea:	bf 92       	push	r11
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	7c 01       	movw	r14, r24
    10fe:	5b 01       	movw	r10, r22
    1100:	e9 01       	movw	r28, r18
    1102:	42 17       	cp	r20, r18
    1104:	53 07       	cpc	r21, r19
    1106:	08 f4       	brcc	.+2      	; 0x110a <prvReadBytesFromBuffer+0x22>
    1108:	ea 01       	movw	r28, r20
    110a:	20 97       	sbiw	r28, 0x00	; 0
    110c:	81 f1       	breq	.+96     	; 0x116e <prvReadBytesFromBuffer+0x86>
    110e:	f7 01       	movw	r30, r14
    1110:	00 81       	ld	r16, Z
    1112:	11 81       	ldd	r17, Z+1	; 0x01
    1114:	84 81       	ldd	r24, Z+4	; 0x04
    1116:	95 81       	ldd	r25, Z+5	; 0x05
    1118:	80 1b       	sub	r24, r16
    111a:	91 0b       	sbc	r25, r17
    111c:	6e 01       	movw	r12, r28
    111e:	8c 17       	cp	r24, r28
    1120:	9d 07       	cpc	r25, r29
    1122:	08 f4       	brcc	.+2      	; 0x1126 <prvReadBytesFromBuffer+0x3e>
    1124:	6c 01       	movw	r12, r24
    1126:	f7 01       	movw	r30, r14
    1128:	64 85       	ldd	r22, Z+12	; 0x0c
    112a:	75 85       	ldd	r23, Z+13	; 0x0d
    112c:	60 0f       	add	r22, r16
    112e:	71 1f       	adc	r23, r17
    1130:	a6 01       	movw	r20, r12
    1132:	c5 01       	movw	r24, r10
    1134:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <memcpy>
    1138:	cc 16       	cp	r12, r28
    113a:	dd 06       	cpc	r13, r29
    113c:	58 f4       	brcc	.+22     	; 0x1154 <prvReadBytesFromBuffer+0x6c>
    113e:	ae 01       	movw	r20, r28
    1140:	4c 19       	sub	r20, r12
    1142:	5d 09       	sbc	r21, r13
    1144:	f7 01       	movw	r30, r14
    1146:	64 85       	ldd	r22, Z+12	; 0x0c
    1148:	75 85       	ldd	r23, Z+13	; 0x0d
    114a:	c5 01       	movw	r24, r10
    114c:	8c 0d       	add	r24, r12
    114e:	9d 1d       	adc	r25, r13
    1150:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <memcpy>
    1154:	0c 0f       	add	r16, r28
    1156:	1d 1f       	adc	r17, r29
    1158:	f7 01       	movw	r30, r14
    115a:	84 81       	ldd	r24, Z+4	; 0x04
    115c:	95 81       	ldd	r25, Z+5	; 0x05
    115e:	08 17       	cp	r16, r24
    1160:	19 07       	cpc	r17, r25
    1162:	10 f0       	brcs	.+4      	; 0x1168 <prvReadBytesFromBuffer+0x80>
    1164:	08 1b       	sub	r16, r24
    1166:	19 0b       	sbc	r17, r25
    1168:	f7 01       	movw	r30, r14
    116a:	11 83       	std	Z+1, r17	; 0x01
    116c:	00 83       	st	Z, r16
    116e:	ce 01       	movw	r24, r28
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	df 90       	pop	r13
    117e:	cf 90       	pop	r12
    1180:	bf 90       	pop	r11
    1182:	af 90       	pop	r10
    1184:	08 95       	ret

00001186 <prvReadMessageFromBuffer>:
    1186:	6f 92       	push	r6
    1188:	7f 92       	push	r7
    118a:	8f 92       	push	r8
    118c:	9f 92       	push	r9
    118e:	af 92       	push	r10
    1190:	bf 92       	push	r11
    1192:	cf 92       	push	r12
    1194:	df 92       	push	r13
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	1f 92       	push	r1
    11a4:	1f 92       	push	r1
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	6c 01       	movw	r12, r24
    11ac:	4b 01       	movw	r8, r22
    11ae:	5a 01       	movw	r10, r20
    11b0:	79 01       	movw	r14, r18
    11b2:	01 15       	cp	r16, r1
    11b4:	11 05       	cpc	r17, r1
    11b6:	b1 f0       	breq	.+44     	; 0x11e4 <prvReadMessageFromBuffer+0x5e>
    11b8:	fc 01       	movw	r30, r24
    11ba:	60 80       	ld	r6, Z
    11bc:	71 80       	ldd	r7, Z+1	; 0x01
    11be:	a8 01       	movw	r20, r16
    11c0:	be 01       	movw	r22, r28
    11c2:	6f 5f       	subi	r22, 0xFF	; 255
    11c4:	7f 4f       	sbci	r23, 0xFF	; 255
    11c6:	90 df       	rcall	.-224    	; 0x10e8 <prvReadBytesFromBuffer>
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
    11cc:	e0 1a       	sub	r14, r16
    11ce:	f1 0a       	sbc	r15, r17
    11d0:	a8 16       	cp	r10, r24
    11d2:	b9 06       	cpc	r11, r25
    11d4:	30 f4       	brcc	.+12     	; 0x11e2 <prvReadMessageFromBuffer+0x5c>
    11d6:	f6 01       	movw	r30, r12
    11d8:	71 82       	std	Z+1, r7	; 0x01
    11da:	60 82       	st	Z, r6
    11dc:	a1 2c       	mov	r10, r1
    11de:	b1 2c       	mov	r11, r1
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <prvReadMessageFromBuffer+0x5e>
    11e2:	5c 01       	movw	r10, r24
    11e4:	97 01       	movw	r18, r14
    11e6:	a5 01       	movw	r20, r10
    11e8:	b4 01       	movw	r22, r8
    11ea:	c6 01       	movw	r24, r12
    11ec:	7d df       	rcall	.-262    	; 0x10e8 <prvReadBytesFromBuffer>
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	ff 90       	pop	r15
    11fc:	ef 90       	pop	r14
    11fe:	df 90       	pop	r13
    1200:	cf 90       	pop	r12
    1202:	bf 90       	pop	r11
    1204:	af 90       	pop	r10
    1206:	9f 90       	pop	r9
    1208:	8f 90       	pop	r8
    120a:	7f 90       	pop	r7
    120c:	6f 90       	pop	r6
    120e:	08 95       	ret

00001210 <xStreamBufferGenericCreate>:
    1210:	cf 92       	push	r12
    1212:	df 92       	push	r13
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	0f 93       	push	r16
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	ec 01       	movw	r28, r24
    1220:	6b 01       	movw	r12, r22
    1222:	41 30       	cpi	r20, 0x01	; 1
    1224:	11 f4       	brne	.+4      	; 0x122a <xStreamBufferGenericCreate+0x1a>
    1226:	01 e0       	ldi	r16, 0x01	; 1
    1228:	01 c0       	rjmp	.+2      	; 0x122c <xStreamBufferGenericCreate+0x1c>
    122a:	00 e0       	ldi	r16, 0x00	; 0
    122c:	c1 14       	cp	r12, r1
    122e:	d1 04       	cpc	r13, r1
    1230:	19 f4       	brne	.+6      	; 0x1238 <xStreamBufferGenericCreate+0x28>
    1232:	cc 24       	eor	r12, r12
    1234:	c3 94       	inc	r12
    1236:	d1 2c       	mov	r13, r1
    1238:	ce 01       	movw	r24, r28
    123a:	40 96       	adiw	r24, 0x10	; 16
    123c:	c8 17       	cp	r28, r24
    123e:	d9 07       	cpc	r29, r25
    1240:	20 f4       	brcc	.+8      	; 0x124a <xStreamBufferGenericCreate+0x3a>
    1242:	21 96       	adiw	r28, 0x01	; 1
    1244:	8f d8       	rcall	.-3810   	; 0x364 <pvPortMalloc>
    1246:	7c 01       	movw	r14, r24
    1248:	02 c0       	rjmp	.+4      	; 0x124e <xStreamBufferGenericCreate+0x3e>
    124a:	e1 2c       	mov	r14, r1
    124c:	f1 2c       	mov	r15, r1
    124e:	e1 14       	cp	r14, r1
    1250:	f1 04       	cpc	r15, r1
    1252:	39 f0       	breq	.+14     	; 0x1262 <xStreamBufferGenericCreate+0x52>
    1254:	96 01       	movw	r18, r12
    1256:	ae 01       	movw	r20, r28
    1258:	b7 01       	movw	r22, r14
    125a:	61 5f       	subi	r22, 0xF1	; 241
    125c:	7f 4f       	sbci	r23, 0xFF	; 255
    125e:	c7 01       	movw	r24, r14
    1260:	a7 de       	rcall	.-690    	; 0xfb0 <prvInitialiseNewStreamBuffer>
    1262:	c7 01       	movw	r24, r14
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	08 95       	ret

00001274 <xStreamBufferReset>:
    1274:	0f 93       	push	r16
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	0f 92       	push	r0
    127c:	fc 01       	movw	r30, r24
    127e:	20 85       	ldd	r18, Z+8	; 0x08
    1280:	31 85       	ldd	r19, Z+9	; 0x09
    1282:	23 2b       	or	r18, r19
    1284:	71 f4       	brne	.+28     	; 0x12a2 <xStreamBufferReset+0x2e>
    1286:	22 85       	ldd	r18, Z+10	; 0x0a
    1288:	33 85       	ldd	r19, Z+11	; 0x0b
    128a:	23 2b       	or	r18, r19
    128c:	61 f4       	brne	.+24     	; 0x12a6 <xStreamBufferReset+0x32>
    128e:	26 81       	ldd	r18, Z+6	; 0x06
    1290:	37 81       	ldd	r19, Z+7	; 0x07
    1292:	44 81       	ldd	r20, Z+4	; 0x04
    1294:	55 81       	ldd	r21, Z+5	; 0x05
    1296:	64 85       	ldd	r22, Z+12	; 0x0c
    1298:	75 85       	ldd	r23, Z+13	; 0x0d
    129a:	06 85       	ldd	r16, Z+14	; 0x0e
    129c:	89 de       	rcall	.-750    	; 0xfb0 <prvInitialiseNewStreamBuffer>
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	03 c0       	rjmp	.+6      	; 0x12a8 <xStreamBufferReset+0x34>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <xStreamBufferReset+0x34>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	0f 90       	pop	r0
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	0f 91       	pop	r16
    12ae:	08 95       	ret

000012b0 <xStreamBufferSpacesAvailable>:
    12b0:	fc 01       	movw	r30, r24
    12b2:	24 81       	ldd	r18, Z+4	; 0x04
    12b4:	35 81       	ldd	r19, Z+5	; 0x05
    12b6:	80 81       	ld	r24, Z
    12b8:	91 81       	ldd	r25, Z+1	; 0x01
    12ba:	82 0f       	add	r24, r18
    12bc:	93 1f       	adc	r25, r19
    12be:	42 81       	ldd	r20, Z+2	; 0x02
    12c0:	53 81       	ldd	r21, Z+3	; 0x03
    12c2:	84 1b       	sub	r24, r20
    12c4:	95 0b       	sbc	r25, r21
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	82 17       	cp	r24, r18
    12ca:	93 07       	cpc	r25, r19
    12cc:	10 f0       	brcs	.+4      	; 0x12d2 <xStreamBufferSpacesAvailable+0x22>
    12ce:	82 1b       	sub	r24, r18
    12d0:	93 0b       	sbc	r25, r19
    12d2:	08 95       	ret

000012d4 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    12d4:	2f 92       	push	r2
    12d6:	3f 92       	push	r3
    12d8:	4f 92       	push	r4
    12da:	5f 92       	push	r5
    12dc:	6f 92       	push	r6
    12de:	7f 92       	push	r7
    12e0:	8f 92       	push	r8
    12e2:	9f 92       	push	r9
    12e4:	af 92       	push	r10
    12e6:	bf 92       	push	r11
    12e8:	cf 92       	push	r12
    12ea:	df 92       	push	r13
    12ec:	ef 92       	push	r14
    12ee:	ff 92       	push	r15
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	2b 97       	sbiw	r28, 0x0b	; 11
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	4c 01       	movw	r8, r24
    130a:	7b 87       	std	Y+11, r23	; 0x0b
    130c:	6a 87       	std	Y+10, r22	; 0x0a
    130e:	1a 01       	movw	r2, r20
    1310:	0e 83       	std	Y+6, r16	; 0x06
    1312:	1f 83       	std	Y+7, r17	; 0x07
    1314:	28 87       	std	Y+8, r18	; 0x08
    1316:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1318:	fc 01       	movw	r30, r24
    131a:	84 81       	ldd	r24, Z+4	; 0x04
    131c:	95 81       	ldd	r25, Z+5	; 0x05
    131e:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1320:	26 85       	ldd	r18, Z+14	; 0x0e
    1322:	20 ff       	sbrs	r18, 0
    1324:	0c c0       	rjmp	.+24     	; 0x133e <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1326:	2a 01       	movw	r4, r20
    1328:	f2 e0       	ldi	r31, 0x02	; 2
    132a:	4f 0e       	add	r4, r31
    132c:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    132e:	84 15       	cp	r24, r4
    1330:	95 05       	cpc	r25, r5
    1332:	58 f4       	brcc	.+22     	; 0x134a <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1334:	1e 82       	std	Y+6, r1	; 0x06
    1336:	1f 82       	std	Y+7, r1	; 0x07
    1338:	18 86       	std	Y+8, r1	; 0x08
    133a:	19 86       	std	Y+9, r1	; 0x09
    133c:	06 c0       	rjmp	.+12     	; 0x134a <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    133e:	84 17       	cp	r24, r20
    1340:	95 07       	cpc	r25, r21
    1342:	10 f0       	brcs	.+4      	; 0x1348 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1344:	2a 01       	movw	r4, r20
    1346:	01 c0       	rjmp	.+2      	; 0x134a <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1348:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    134a:	8e 81       	ldd	r24, Y+6	; 0x06
    134c:	9f 81       	ldd	r25, Y+7	; 0x07
    134e:	a8 85       	ldd	r26, Y+8	; 0x08
    1350:	b9 85       	ldd	r27, Y+9	; 0x09
    1352:	89 2b       	or	r24, r25
    1354:	8a 2b       	or	r24, r26
    1356:	8b 2b       	or	r24, r27
    1358:	09 f4       	brne	.+2      	; 0x135c <xStreamBufferSend+0x88>
    135a:	36 c0       	rjmp	.+108    	; 0x13c8 <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    135c:	ce 01       	movw	r24, r28
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	82 d7       	rcall	.+3844   	; 0x2266 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1368:	c4 01       	movw	r24, r8
    136a:	a2 df       	rcall	.-188    	; 0x12b0 <xStreamBufferSpacesAvailable>
    136c:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    136e:	84 15       	cp	r24, r4
    1370:	95 05       	cpc	r25, r5
    1372:	38 f5       	brcc	.+78     	; 0x13c2 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    137e:	0e 94 c4 11 	call	0x2388	; 0x2388 <xTaskGetCurrentTaskHandle>
    1382:	f4 01       	movw	r30, r8
    1384:	93 87       	std	Z+11, r25	; 0x0b
    1386:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1388:	0f 90       	pop	r0
    138a:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    138c:	ae 80       	ldd	r10, Y+6	; 0x06
    138e:	bf 80       	ldd	r11, Y+7	; 0x07
    1390:	c8 84       	ldd	r12, Y+8	; 0x08
    1392:	d9 84       	ldd	r13, Y+9	; 0x09
    1394:	e1 2c       	mov	r14, r1
    1396:	f1 2c       	mov	r15, r1
    1398:	00 e0       	ldi	r16, 0x00	; 0
    139a:	10 e0       	ldi	r17, 0x00	; 0
    139c:	98 01       	movw	r18, r16
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	ba 01       	movw	r22, r20
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	0e 94 32 13 	call	0x2664	; 0x2664 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    13aa:	f4 01       	movw	r30, r8
    13ac:	13 86       	std	Z+11, r1	; 0x0b
    13ae:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    13b0:	be 01       	movw	r22, r28
    13b2:	6a 5f       	subi	r22, 0xFA	; 250
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255
    13b6:	ce 01       	movw	r24, r28
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	7c d7       	rcall	.+3832   	; 0x22b4 <xTaskCheckForTimeOut>
    13bc:	88 23       	and	r24, r24
    13be:	89 f2       	breq	.-94     	; 0x1362 <xStreamBufferSend+0x8e>
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    13c2:	0f 90       	pop	r0
    13c4:	0f be       	out	0x3f, r0	; 63
                    break;
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    13c8:	61 2c       	mov	r6, r1
    13ca:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    13cc:	61 14       	cp	r6, r1
    13ce:	71 04       	cpc	r7, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    13d0:	19 f4       	brne	.+6      	; 0x13d8 <xStreamBufferSend+0x104>
    13d2:	c4 01       	movw	r24, r8
    13d4:	6d df       	rcall	.-294    	; 0x12b0 <xStreamBufferSpacesAvailable>
    13d6:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    13d8:	82 01       	movw	r16, r4
    13da:	93 01       	movw	r18, r6
    13dc:	a1 01       	movw	r20, r2
    13de:	6a 85       	ldd	r22, Y+10	; 0x0a
    13e0:	7b 85       	ldd	r23, Y+11	; 0x0b
    13e2:	c4 01       	movw	r24, r8
    13e4:	3e de       	rcall	.-900    	; 0x1062 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    13e6:	6c 01       	movw	r12, r24
    13e8:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    13ea:	e9 f0       	breq	.+58     	; 0x1426 <xStreamBufferSend+0x152>
    13ec:	c4 01       	movw	r24, r8
    13ee:	cd dd       	rcall	.-1126   	; 0xf8a <prvBytesInBuffer>
    13f0:	f4 01       	movw	r30, r8
    13f2:	26 81       	ldd	r18, Z+6	; 0x06
    13f4:	37 81       	ldd	r19, Z+7	; 0x07
    13f6:	82 17       	cp	r24, r18
    13f8:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    13fa:	a8 f0       	brcs	.+42     	; 0x1426 <xStreamBufferSend+0x152>
    13fc:	90 d3       	rcall	.+1824   	; 0x1b1e <vTaskSuspendAll>
    13fe:	f4 01       	movw	r30, r8
    1400:	80 85       	ldd	r24, Z+8	; 0x08
    1402:	91 85       	ldd	r25, Z+9	; 0x09
    1404:	89 2b       	or	r24, r25
    1406:	71 f0       	breq	.+28     	; 0x1424 <xStreamBufferSend+0x150>
    1408:	80 85       	ldd	r24, Z+8	; 0x08
    140a:	91 85       	ldd	r25, Z+9	; 0x09
    140c:	e1 2c       	mov	r14, r1
    140e:	f1 2c       	mov	r15, r1
    1410:	00 e0       	ldi	r16, 0x00	; 0
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <xTaskGenericNotify>
    141e:	f4 01       	movw	r30, r8
    1420:	11 86       	std	Z+9, r1	; 0x09
    1422:	10 86       	std	Z+8, r1	; 0x08
    1424:	bc d4       	rcall	.+2424   	; 0x1d9e <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1426:	c6 01       	movw	r24, r12
    1428:	2b 96       	adiw	r28, 0x0b	; 11
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	ff 90       	pop	r15
    143e:	ef 90       	pop	r14
    1440:	df 90       	pop	r13
    1442:	cf 90       	pop	r12
    1444:	bf 90       	pop	r11
    1446:	af 90       	pop	r10
    1448:	9f 90       	pop	r9
    144a:	8f 90       	pop	r8
    144c:	7f 90       	pop	r7
    144e:	6f 90       	pop	r6
    1450:	5f 90       	pop	r5
    1452:	4f 90       	pop	r4
    1454:	3f 90       	pop	r3
    1456:	2f 90       	pop	r2
    1458:	08 95       	ret

0000145a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    145a:	af 92       	push	r10
    145c:	bf 92       	push	r11
    145e:	cf 92       	push	r12
    1460:	df 92       	push	r13
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	ec 01       	movw	r28, r24
    1470:	7b 01       	movw	r14, r22
    1472:	5a 01       	movw	r10, r20
    1474:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1476:	8e 85       	ldd	r24, Y+14	; 0x0e
    1478:	80 ff       	sbrs	r24, 0
    147a:	04 c0       	rjmp	.+8      	; 0x1484 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    147c:	8a 01       	movw	r16, r20
    147e:	0e 5f       	subi	r16, 0xFE	; 254
    1480:	1f 4f       	sbci	r17, 0xFF	; 255
    1482:	01 c0       	rjmp	.+2      	; 0x1486 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1484:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1486:	ce 01       	movw	r24, r28
    1488:	13 df       	rcall	.-474    	; 0x12b0 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    148a:	9c 01       	movw	r18, r24
    148c:	a5 01       	movw	r20, r10
    148e:	b7 01       	movw	r22, r14
    1490:	ce 01       	movw	r24, r28
    1492:	e7 dd       	rcall	.-1074   	; 0x1062 <prvWriteMessageToBuffer>
    1494:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1496:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1498:	c1 f0       	breq	.+48     	; 0x14ca <xStreamBufferSendFromISR+0x70>
    149a:	ce 01       	movw	r24, r28
    149c:	76 dd       	rcall	.-1300   	; 0xf8a <prvBytesInBuffer>
    149e:	2e 81       	ldd	r18, Y+6	; 0x06
    14a0:	3f 81       	ldd	r19, Y+7	; 0x07
    14a2:	82 17       	cp	r24, r18
    14a4:	93 07       	cpc	r25, r19
    14a6:	88 f0       	brcs	.+34     	; 0x14ca <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    14a8:	88 85       	ldd	r24, Y+8	; 0x08
    14aa:	99 85       	ldd	r25, Y+9	; 0x09
    14ac:	89 2b       	or	r24, r25
    14ae:	69 f0       	breq	.+26     	; 0x14ca <xStreamBufferSendFromISR+0x70>
    14b0:	88 85       	ldd	r24, Y+8	; 0x08
    14b2:	99 85       	ldd	r25, Y+9	; 0x09
    14b4:	e1 2c       	mov	r14, r1
    14b6:	f1 2c       	mov	r15, r1
    14b8:	00 e0       	ldi	r16, 0x00	; 0
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	a9 01       	movw	r20, r18
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <xTaskGenericNotifyFromISR>
    14c6:	19 86       	std	Y+9, r1	; 0x09
    14c8:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    14ca:	c5 01       	movw	r24, r10
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	df 90       	pop	r13
    14da:	cf 90       	pop	r12
    14dc:	bf 90       	pop	r11
    14de:	af 90       	pop	r10
    14e0:	08 95       	ret

000014e2 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    14e2:	4f 92       	push	r4
    14e4:	5f 92       	push	r5
    14e6:	6f 92       	push	r6
    14e8:	7f 92       	push	r7
    14ea:	8f 92       	push	r8
    14ec:	9f 92       	push	r9
    14ee:	af 92       	push	r10
    14f0:	bf 92       	push	r11
    14f2:	cf 92       	push	r12
    14f4:	df 92       	push	r13
    14f6:	ef 92       	push	r14
    14f8:	ff 92       	push	r15
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	ec 01       	movw	r28, r24
    1504:	2b 01       	movw	r4, r22
    1506:	3a 01       	movw	r6, r20
    1508:	58 01       	movw	r10, r16
    150a:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    150c:	8e 85       	ldd	r24, Y+14	; 0x0e
    150e:	80 ff       	sbrs	r24, 0
    1510:	05 c0       	rjmp	.+10     	; 0x151c <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1512:	68 94       	set
    1514:	88 24       	eor	r8, r8
    1516:	81 f8       	bld	r8, 1
    1518:	91 2c       	mov	r9, r1
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    151c:	81 2c       	mov	r8, r1
    151e:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1520:	a1 14       	cp	r10, r1
    1522:	b1 04       	cpc	r11, r1
    1524:	c1 04       	cpc	r12, r1
    1526:	d1 04       	cpc	r13, r1
    1528:	39 f1       	breq	.+78     	; 0x1578 <xStreamBufferReceive+0x96>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1530:	ce 01       	movw	r24, r28
    1532:	2b dd       	rcall	.-1450   	; 0xf8a <prvBytesInBuffer>
    1534:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1536:	88 16       	cp	r8, r24
    1538:	99 06       	cpc	r9, r25
    153a:	40 f0       	brcs	.+16     	; 0x154c <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1546:	20 d7       	rcall	.+3648   	; 0x2388 <xTaskGetCurrentTaskHandle>
    1548:	99 87       	std	Y+9, r25	; 0x09
    154a:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1550:	8e 14       	cp	r8, r14
    1552:	9f 04       	cpc	r9, r15
    1554:	a0 f0       	brcs	.+40     	; 0x157e <xStreamBufferReceive+0x9c>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1556:	e1 2c       	mov	r14, r1
    1558:	f1 2c       	mov	r15, r1
    155a:	00 e0       	ldi	r16, 0x00	; 0
    155c:	10 e0       	ldi	r17, 0x00	; 0
    155e:	98 01       	movw	r18, r16
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	ba 01       	movw	r22, r20
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	0e 94 32 13 	call	0x2664	; 0x2664 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    156c:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    156e:	18 86       	std	Y+8, r1	; 0x08
    1570:	ce 01       	movw	r24, r28
    1572:	0b dd       	rcall	.-1514   	; 0xf8a <prvBytesInBuffer>
    1574:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1576:	03 c0       	rjmp	.+6      	; 0x157e <xStreamBufferReceive+0x9c>
    1578:	ce 01       	movw	r24, r28
    157a:	07 dd       	rcall	.-1522   	; 0xf8a <prvBytesInBuffer>
    157c:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    157e:	8e 14       	cp	r8, r14
    1580:	9f 04       	cpc	r9, r15
    1582:	e8 f4       	brcc	.+58     	; 0x15be <xStreamBufferReceive+0xdc>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1584:	84 01       	movw	r16, r8
    1586:	97 01       	movw	r18, r14
    1588:	a3 01       	movw	r20, r6
    158a:	b2 01       	movw	r22, r4
    158c:	ce 01       	movw	r24, r28
    158e:	fb dd       	rcall	.-1034   	; 0x1186 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1590:	6c 01       	movw	r12, r24
    1592:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1594:	b1 f0       	breq	.+44     	; 0x15c2 <xStreamBufferReceive+0xe0>
    1596:	c3 d2       	rcall	.+1414   	; 0x1b1e <vTaskSuspendAll>
    1598:	8a 85       	ldd	r24, Y+10	; 0x0a
    159a:	9b 85       	ldd	r25, Y+11	; 0x0b
    159c:	89 2b       	or	r24, r25
    159e:	69 f0       	breq	.+26     	; 0x15ba <xStreamBufferReceive+0xd8>
    15a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    15a4:	e1 2c       	mov	r14, r1
    15a6:	f1 2c       	mov	r15, r1
    15a8:	00 e0       	ldi	r16, 0x00	; 0
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	a9 01       	movw	r20, r18
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <xTaskGenericNotify>
    15b6:	1b 86       	std	Y+11, r1	; 0x0b
    15b8:	1a 86       	std	Y+10, r1	; 0x0a
    15ba:	f1 d3       	rcall	.+2018   	; 0x1d9e <xTaskResumeAll>
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <xStreamBufferReceive+0xe0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    15be:	c1 2c       	mov	r12, r1
    15c0:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    15c2:	c6 01       	movw	r24, r12
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	1f 91       	pop	r17
    15ca:	0f 91       	pop	r16
    15cc:	ff 90       	pop	r15
    15ce:	ef 90       	pop	r14
    15d0:	df 90       	pop	r13
    15d2:	cf 90       	pop	r12
    15d4:	bf 90       	pop	r11
    15d6:	af 90       	pop	r10
    15d8:	9f 90       	pop	r9
    15da:	8f 90       	pop	r8
    15dc:	7f 90       	pop	r7
    15de:	6f 90       	pop	r6
    15e0:	5f 90       	pop	r5
    15e2:	4f 90       	pop	r4
    15e4:	08 95       	ret

000015e6 <prvResetNextTaskUnblockTime>:
    15e6:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxDelayedTaskList>
    15ea:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxDelayedTaskList+0x1>
    15ee:	80 81       	ld	r24, Z
    15f0:	81 11       	cpse	r24, r1
    15f2:	0c c0       	rjmp	.+24     	; 0x160c <prvResetNextTaskUnblockTime+0x26>
    15f4:	8f ef       	ldi	r24, 0xFF	; 255
    15f6:	9f ef       	ldi	r25, 0xFF	; 255
    15f8:	dc 01       	movw	r26, r24
    15fa:	80 93 bf 12 	sts	0x12BF, r24	; 0x8012bf <xNextTaskUnblockTime>
    15fe:	90 93 c0 12 	sts	0x12C0, r25	; 0x8012c0 <xNextTaskUnblockTime+0x1>
    1602:	a0 93 c1 12 	sts	0x12C1, r26	; 0x8012c1 <xNextTaskUnblockTime+0x2>
    1606:	b0 93 c2 12 	sts	0x12C2, r27	; 0x8012c2 <xNextTaskUnblockTime+0x3>
    160a:	08 95       	ret
    160c:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxDelayedTaskList>
    1610:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxDelayedTaskList+0x1>
    1614:	07 80       	ldd	r0, Z+7	; 0x07
    1616:	f0 85       	ldd	r31, Z+8	; 0x08
    1618:	e0 2d       	mov	r30, r0
    161a:	80 81       	ld	r24, Z
    161c:	91 81       	ldd	r25, Z+1	; 0x01
    161e:	a2 81       	ldd	r26, Z+2	; 0x02
    1620:	b3 81       	ldd	r27, Z+3	; 0x03
    1622:	80 93 bf 12 	sts	0x12BF, r24	; 0x8012bf <xNextTaskUnblockTime>
    1626:	90 93 c0 12 	sts	0x12C0, r25	; 0x8012c0 <xNextTaskUnblockTime+0x1>
    162a:	a0 93 c1 12 	sts	0x12C1, r26	; 0x8012c1 <xNextTaskUnblockTime+0x2>
    162e:	b0 93 c2 12 	sts	0x12C2, r27	; 0x8012c2 <xNextTaskUnblockTime+0x3>
    1632:	08 95       	ret

00001634 <prvDeleteTCB>:
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	ec 01       	movw	r28, r24
    163a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    163c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    163e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <vPortFree>
    1642:	ce 01       	movw	r24, r28
    1644:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <vPortFree>
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	08 95       	ret

0000164e <prvInitialiseNewTask>:
    164e:	4f 92       	push	r4
    1650:	5f 92       	push	r5
    1652:	6f 92       	push	r6
    1654:	7f 92       	push	r7
    1656:	8f 92       	push	r8
    1658:	9f 92       	push	r9
    165a:	af 92       	push	r10
    165c:	bf 92       	push	r11
    165e:	cf 92       	push	r12
    1660:	df 92       	push	r13
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	2c 01       	movw	r4, r24
    166e:	5b 01       	movw	r10, r22
    1670:	4a 01       	movw	r8, r20
    1672:	39 01       	movw	r6, r18
    1674:	e6 01       	movw	r28, r12
    1676:	65 ea       	ldi	r22, 0xA5	; 165
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    167c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    167e:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <memset>
    1682:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1684:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1686:	21 e0       	ldi	r18, 0x01	; 1
    1688:	82 1a       	sub	r8, r18
    168a:	91 08       	sbc	r9, r1
    168c:	88 0e       	add	r8, r24
    168e:	99 1e       	adc	r9, r25
    1690:	a1 14       	cp	r10, r1
    1692:	b1 04       	cpc	r11, r1
    1694:	89 f4       	brne	.+34     	; 0x16b8 <prvInitialiseNewTask+0x6a>
    1696:	15 c0       	rjmp	.+42     	; 0x16c2 <prvInitialiseNewTask+0x74>
    1698:	82 2f       	mov	r24, r18
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	f5 01       	movw	r30, r10
    169e:	e8 0f       	add	r30, r24
    16a0:	f9 1f       	adc	r31, r25
    16a2:	30 81       	ld	r19, Z
    16a4:	de 01       	movw	r26, r28
    16a6:	a8 0f       	add	r26, r24
    16a8:	b9 1f       	adc	r27, r25
    16aa:	5d 96       	adiw	r26, 0x1d	; 29
    16ac:	3c 93       	st	X, r19
    16ae:	80 81       	ld	r24, Z
    16b0:	88 23       	and	r24, r24
    16b2:	29 f0       	breq	.+10     	; 0x16be <prvInitialiseNewTask+0x70>
    16b4:	2f 5f       	subi	r18, 0xFF	; 255
    16b6:	01 c0       	rjmp	.+2      	; 0x16ba <prvInitialiseNewTask+0x6c>
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	20 31       	cpi	r18, 0x10	; 16
    16bc:	68 f3       	brcs	.-38     	; 0x1698 <prvInitialiseNewTask+0x4a>
    16be:	1c a6       	std	Y+44, r1	; 0x2c
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <prvInitialiseNewTask+0x76>
    16c2:	1d 8e       	std	Y+29, r1	; 0x1d
    16c4:	0a 30       	cpi	r16, 0x0A	; 10
    16c6:	08 f0       	brcs	.+2      	; 0x16ca <prvInitialiseNewTask+0x7c>
    16c8:	09 e0       	ldi	r16, 0x09	; 9
    16ca:	0a 8f       	std	Y+26, r16	; 0x1a
    16cc:	0d a7       	std	Y+45, r16	; 0x2d
    16ce:	1e a6       	std	Y+46, r1	; 0x2e
    16d0:	ce 01       	movw	r24, r28
    16d2:	02 96       	adiw	r24, 0x02	; 2
    16d4:	0e 94 a9 02 	call	0x552	; 0x552 <vListInitialiseItem>
    16d8:	ce 01       	movw	r24, r28
    16da:	0e 96       	adiw	r24, 0x0e	; 14
    16dc:	0e 94 a9 02 	call	0x552	; 0x552 <vListInitialiseItem>
    16e0:	db 87       	std	Y+11, r29	; 0x0b
    16e2:	ca 87       	std	Y+10, r28	; 0x0a
    16e4:	8a e0       	ldi	r24, 0x0A	; 10
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a0 e0       	ldi	r26, 0x00	; 0
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	80 1b       	sub	r24, r16
    16ee:	91 09       	sbc	r25, r1
    16f0:	a1 09       	sbc	r26, r1
    16f2:	b1 09       	sbc	r27, r1
    16f4:	8e 87       	std	Y+14, r24	; 0x0e
    16f6:	9f 87       	std	Y+15, r25	; 0x0f
    16f8:	a8 8b       	std	Y+16, r26	; 0x10
    16fa:	b9 8b       	std	Y+17, r27	; 0x11
    16fc:	df 8b       	std	Y+23, r29	; 0x17
    16fe:	ce 8b       	std	Y+22, r28	; 0x16
    1700:	84 e0       	ldi	r24, 0x04	; 4
    1702:	fe 01       	movw	r30, r28
    1704:	bf 96       	adiw	r30, 0x2f	; 47
    1706:	df 01       	movw	r26, r30
    1708:	1d 92       	st	X+, r1
    170a:	8a 95       	dec	r24
    170c:	e9 f7       	brne	.-6      	; 0x1708 <prvInitialiseNewTask+0xba>
    170e:	1b aa       	std	Y+51, r1	; 0x33
    1710:	a3 01       	movw	r20, r6
    1712:	b2 01       	movw	r22, r4
    1714:	c4 01       	movw	r24, r8
    1716:	0e 94 1d 03 	call	0x63a	; 0x63a <pxPortInitialiseStack>
    171a:	99 83       	std	Y+1, r25	; 0x01
    171c:	88 83       	st	Y, r24
    171e:	e1 14       	cp	r14, r1
    1720:	f1 04       	cpc	r15, r1
    1722:	19 f0       	breq	.+6      	; 0x172a <prvInitialiseNewTask+0xdc>
    1724:	f7 01       	movw	r30, r14
    1726:	d1 83       	std	Z+1, r29	; 0x01
    1728:	c0 83       	st	Z, r28
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	0f 91       	pop	r16
    1730:	ff 90       	pop	r15
    1732:	ef 90       	pop	r14
    1734:	df 90       	pop	r13
    1736:	cf 90       	pop	r12
    1738:	bf 90       	pop	r11
    173a:	af 90       	pop	r10
    173c:	9f 90       	pop	r9
    173e:	8f 90       	pop	r8
    1740:	7f 90       	pop	r7
    1742:	6f 90       	pop	r6
    1744:	5f 90       	pop	r5
    1746:	4f 90       	pop	r4
    1748:	08 95       	ret

0000174a <prvInitialiseTaskLists>:
    174a:	cf 93       	push	r28
    174c:	c0 e0       	ldi	r28, 0x00	; 0
    174e:	09 c0       	rjmp	.+18     	; 0x1762 <prvInitialiseTaskLists+0x18>
    1750:	2b e0       	ldi	r18, 0x0B	; 11
    1752:	c2 9f       	mul	r28, r18
    1754:	c0 01       	movw	r24, r0
    1756:	11 24       	eor	r1, r1
    1758:	83 5f       	subi	r24, 0xF3	; 243
    175a:	9c 4e       	sbci	r25, 0xEC	; 236
    175c:	0e 94 98 02 	call	0x530	; 0x530 <vListInitialise>
    1760:	cf 5f       	subi	r28, 0xFF	; 255
    1762:	ca 30       	cpi	r28, 0x0A	; 10
    1764:	a8 f3       	brcs	.-22     	; 0x1750 <prvInitialiseTaskLists+0x6>
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	93 e1       	ldi	r25, 0x13	; 19
    176a:	0e 94 98 02 	call	0x530	; 0x530 <vListInitialise>
    176e:	87 ef       	ldi	r24, 0xF7	; 247
    1770:	92 e1       	ldi	r25, 0x12	; 18
    1772:	0e 94 98 02 	call	0x530	; 0x530 <vListInitialise>
    1776:	88 ee       	ldi	r24, 0xE8	; 232
    1778:	92 e1       	ldi	r25, 0x12	; 18
    177a:	0e 94 98 02 	call	0x530	; 0x530 <vListInitialise>
    177e:	8d ed       	ldi	r24, 0xDD	; 221
    1780:	92 e1       	ldi	r25, 0x12	; 18
    1782:	0e 94 98 02 	call	0x530	; 0x530 <vListInitialise>
    1786:	81 ed       	ldi	r24, 0xD1	; 209
    1788:	92 e1       	ldi	r25, 0x12	; 18
    178a:	0e 94 98 02 	call	0x530	; 0x530 <vListInitialise>
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	93 e1       	ldi	r25, 0x13	; 19
    1792:	90 93 f6 12 	sts	0x12F6, r25	; 0x8012f6 <pxDelayedTaskList+0x1>
    1796:	80 93 f5 12 	sts	0x12F5, r24	; 0x8012f5 <pxDelayedTaskList>
    179a:	87 ef       	ldi	r24, 0xF7	; 247
    179c:	92 e1       	ldi	r25, 0x12	; 18
    179e:	90 93 f4 12 	sts	0x12F4, r25	; 0x8012f4 <pxOverflowDelayedTaskList+0x1>
    17a2:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <pxOverflowDelayedTaskList>
    17a6:	cf 91       	pop	r28
    17a8:	08 95       	ret

000017aa <prvAddNewTaskToReadyList>:
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
    17ae:	ec 01       	movw	r28, r24
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	0f 92       	push	r0
    17b6:	80 91 d0 12 	lds	r24, 0x12D0	; 0x8012d0 <uxCurrentNumberOfTasks>
    17ba:	8f 5f       	subi	r24, 0xFF	; 255
    17bc:	80 93 d0 12 	sts	0x12D0, r24	; 0x8012d0 <uxCurrentNumberOfTasks>
    17c0:	80 91 7b 13 	lds	r24, 0x137B	; 0x80137b <pxCurrentTCB>
    17c4:	90 91 7c 13 	lds	r25, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    17c8:	89 2b       	or	r24, r25
    17ca:	51 f4       	brne	.+20     	; 0x17e0 <prvAddNewTaskToReadyList+0x36>
    17cc:	d0 93 7c 13 	sts	0x137C, r29	; 0x80137c <pxCurrentTCB+0x1>
    17d0:	c0 93 7b 13 	sts	0x137B, r28	; 0x80137b <pxCurrentTCB>
    17d4:	80 91 d0 12 	lds	r24, 0x12D0	; 0x8012d0 <uxCurrentNumberOfTasks>
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	91 f4       	brne	.+36     	; 0x1800 <prvAddNewTaskToReadyList+0x56>
    17dc:	b6 df       	rcall	.-148    	; 0x174a <prvInitialiseTaskLists>
    17de:	10 c0       	rjmp	.+32     	; 0x1800 <prvAddNewTaskToReadyList+0x56>
    17e0:	80 91 ca 12 	lds	r24, 0x12CA	; 0x8012ca <xSchedulerRunning>
    17e4:	81 11       	cpse	r24, r1
    17e6:	0c c0       	rjmp	.+24     	; 0x1800 <prvAddNewTaskToReadyList+0x56>
    17e8:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    17ec:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    17f0:	92 8d       	ldd	r25, Z+26	; 0x1a
    17f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17f4:	89 17       	cp	r24, r25
    17f6:	20 f0       	brcs	.+8      	; 0x1800 <prvAddNewTaskToReadyList+0x56>
    17f8:	d0 93 7c 13 	sts	0x137C, r29	; 0x80137c <pxCurrentTCB+0x1>
    17fc:	c0 93 7b 13 	sts	0x137B, r28	; 0x80137b <pxCurrentTCB>
    1800:	80 91 c3 12 	lds	r24, 0x12C3	; 0x8012c3 <uxTaskNumber>
    1804:	8f 5f       	subi	r24, 0xFF	; 255
    1806:	80 93 c3 12 	sts	0x12C3, r24	; 0x8012c3 <uxTaskNumber>
    180a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    180c:	80 91 cb 12 	lds	r24, 0x12CB	; 0x8012cb <uxTopReadyPriority>
    1810:	8e 17       	cp	r24, r30
    1812:	10 f4       	brcc	.+4      	; 0x1818 <prvAddNewTaskToReadyList+0x6e>
    1814:	e0 93 cb 12 	sts	0x12CB, r30	; 0x8012cb <uxTopReadyPriority>
    1818:	8b e0       	ldi	r24, 0x0B	; 11
    181a:	8e 9f       	mul	r24, r30
    181c:	f0 01       	movw	r30, r0
    181e:	11 24       	eor	r1, r1
    1820:	e3 5f       	subi	r30, 0xF3	; 243
    1822:	fc 4e       	sbci	r31, 0xEC	; 236
    1824:	01 80       	ldd	r0, Z+1	; 0x01
    1826:	f2 81       	ldd	r31, Z+2	; 0x02
    1828:	e0 2d       	mov	r30, r0
    182a:	ff 83       	std	Y+7, r31	; 0x07
    182c:	ee 83       	std	Y+6, r30	; 0x06
    182e:	26 81       	ldd	r18, Z+6	; 0x06
    1830:	37 81       	ldd	r19, Z+7	; 0x07
    1832:	39 87       	std	Y+9, r19	; 0x09
    1834:	28 87       	std	Y+8, r18	; 0x08
    1836:	a6 81       	ldd	r26, Z+6	; 0x06
    1838:	b7 81       	ldd	r27, Z+7	; 0x07
    183a:	9e 01       	movw	r18, r28
    183c:	2e 5f       	subi	r18, 0xFE	; 254
    183e:	3f 4f       	sbci	r19, 0xFF	; 255
    1840:	15 96       	adiw	r26, 0x05	; 5
    1842:	3c 93       	st	X, r19
    1844:	2e 93       	st	-X, r18
    1846:	14 97       	sbiw	r26, 0x04	; 4
    1848:	37 83       	std	Z+7, r19	; 0x07
    184a:	26 83       	std	Z+6, r18	; 0x06
    184c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    184e:	8e 9f       	mul	r24, r30
    1850:	f0 01       	movw	r30, r0
    1852:	11 24       	eor	r1, r1
    1854:	e3 5f       	subi	r30, 0xF3	; 243
    1856:	fc 4e       	sbci	r31, 0xEC	; 236
    1858:	fd 87       	std	Y+13, r31	; 0x0d
    185a:	ec 87       	std	Y+12, r30	; 0x0c
    185c:	80 81       	ld	r24, Z
    185e:	8f 5f       	subi	r24, 0xFF	; 255
    1860:	80 83       	st	Z, r24
    1862:	0f 90       	pop	r0
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	80 91 ca 12 	lds	r24, 0x12CA	; 0x8012ca <xSchedulerRunning>
    186a:	88 23       	and	r24, r24
    186c:	51 f0       	breq	.+20     	; 0x1882 <prvAddNewTaskToReadyList+0xd8>
    186e:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    1872:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    1876:	92 8d       	ldd	r25, Z+26	; 0x1a
    1878:	8a 8d       	ldd	r24, Y+26	; 0x1a
    187a:	98 17       	cp	r25, r24
    187c:	10 f4       	brcc	.+4      	; 0x1882 <prvAddNewTaskToReadyList+0xd8>
    187e:	0e 94 66 03 	call	0x6cc	; 0x6cc <vPortYield>
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	08 95       	ret

00001888 <prvCheckTasksWaitingTermination>:
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	1b c0       	rjmp	.+54     	; 0x18c4 <prvCheckTasksWaitingTermination+0x3c>
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	0f 92       	push	r0
    1894:	e0 91 e4 12 	lds	r30, 0x12E4	; 0x8012e4 <xTasksWaitingTermination+0x7>
    1898:	f0 91 e5 12 	lds	r31, 0x12E5	; 0x8012e5 <xTasksWaitingTermination+0x8>
    189c:	c0 85       	ldd	r28, Z+8	; 0x08
    189e:	d1 85       	ldd	r29, Z+9	; 0x09
    18a0:	ce 01       	movw	r24, r28
    18a2:	02 96       	adiw	r24, 0x02	; 2
    18a4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <uxListRemove>
    18a8:	80 91 d0 12 	lds	r24, 0x12D0	; 0x8012d0 <uxCurrentNumberOfTasks>
    18ac:	81 50       	subi	r24, 0x01	; 1
    18ae:	80 93 d0 12 	sts	0x12D0, r24	; 0x8012d0 <uxCurrentNumberOfTasks>
    18b2:	80 91 dc 12 	lds	r24, 0x12DC	; 0x8012dc <uxDeletedTasksWaitingCleanUp>
    18b6:	81 50       	subi	r24, 0x01	; 1
    18b8:	80 93 dc 12 	sts	0x12DC, r24	; 0x8012dc <uxDeletedTasksWaitingCleanUp>
    18bc:	0f 90       	pop	r0
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	ce 01       	movw	r24, r28
    18c2:	b8 de       	rcall	.-656    	; 0x1634 <prvDeleteTCB>
    18c4:	80 91 dc 12 	lds	r24, 0x12DC	; 0x8012dc <uxDeletedTasksWaitingCleanUp>
    18c8:	81 11       	cpse	r24, r1
    18ca:	e1 cf       	rjmp	.-62     	; 0x188e <prvCheckTasksWaitingTermination+0x6>
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	08 95       	ret

000018d2 <prvAddCurrentTaskToDelayedList>:
    18d2:	8f 92       	push	r8
    18d4:	9f 92       	push	r9
    18d6:	af 92       	push	r10
    18d8:	bf 92       	push	r11
    18da:	cf 92       	push	r12
    18dc:	df 92       	push	r13
    18de:	ef 92       	push	r14
    18e0:	ff 92       	push	r15
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	6b 01       	movw	r12, r22
    18e8:	7c 01       	movw	r14, r24
    18ea:	c4 2f       	mov	r28, r20
    18ec:	80 90 cc 12 	lds	r8, 0x12CC	; 0x8012cc <xTickCount>
    18f0:	90 90 cd 12 	lds	r9, 0x12CD	; 0x8012cd <xTickCount+0x1>
    18f4:	a0 90 ce 12 	lds	r10, 0x12CE	; 0x8012ce <xTickCount+0x2>
    18f8:	b0 90 cf 12 	lds	r11, 0x12CF	; 0x8012cf <xTickCount+0x3>
    18fc:	80 91 7b 13 	lds	r24, 0x137B	; 0x80137b <pxCurrentTCB>
    1900:	90 91 7c 13 	lds	r25, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    1904:	02 96       	adiw	r24, 0x02	; 2
    1906:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <uxListRemove>
    190a:	8f ef       	ldi	r24, 0xFF	; 255
    190c:	c8 16       	cp	r12, r24
    190e:	d8 06       	cpc	r13, r24
    1910:	e8 06       	cpc	r14, r24
    1912:	f8 06       	cpc	r15, r24
    1914:	b1 f5       	brne	.+108    	; 0x1982 <prvAddCurrentTaskToDelayedList+0xb0>
    1916:	cc 23       	and	r28, r28
    1918:	a1 f1       	breq	.+104    	; 0x1982 <prvAddCurrentTaskToDelayedList+0xb0>
    191a:	e1 ed       	ldi	r30, 0xD1	; 209
    191c:	f2 e1       	ldi	r31, 0x12	; 18
    191e:	a1 81       	ldd	r26, Z+1	; 0x01
    1920:	b2 81       	ldd	r27, Z+2	; 0x02
    1922:	c0 91 7b 13 	lds	r28, 0x137B	; 0x80137b <pxCurrentTCB>
    1926:	d0 91 7c 13 	lds	r29, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    192a:	bf 83       	std	Y+7, r27	; 0x07
    192c:	ae 83       	std	Y+6, r26	; 0x06
    192e:	c0 91 7b 13 	lds	r28, 0x137B	; 0x80137b <pxCurrentTCB>
    1932:	d0 91 7c 13 	lds	r29, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    1936:	16 96       	adiw	r26, 0x06	; 6
    1938:	8d 91       	ld	r24, X+
    193a:	9c 91       	ld	r25, X
    193c:	17 97       	sbiw	r26, 0x07	; 7
    193e:	99 87       	std	Y+9, r25	; 0x09
    1940:	88 87       	std	Y+8, r24	; 0x08
    1942:	16 96       	adiw	r26, 0x06	; 6
    1944:	cd 91       	ld	r28, X+
    1946:	dc 91       	ld	r29, X
    1948:	17 97       	sbiw	r26, 0x07	; 7
    194a:	80 91 7b 13 	lds	r24, 0x137B	; 0x80137b <pxCurrentTCB>
    194e:	90 91 7c 13 	lds	r25, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    1952:	02 96       	adiw	r24, 0x02	; 2
    1954:	9d 83       	std	Y+5, r25	; 0x05
    1956:	8c 83       	std	Y+4, r24	; 0x04
    1958:	80 91 7b 13 	lds	r24, 0x137B	; 0x80137b <pxCurrentTCB>
    195c:	90 91 7c 13 	lds	r25, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    1960:	02 96       	adiw	r24, 0x02	; 2
    1962:	17 96       	adiw	r26, 0x07	; 7
    1964:	9c 93       	st	X, r25
    1966:	8e 93       	st	-X, r24
    1968:	16 97       	sbiw	r26, 0x06	; 6
    196a:	a0 91 7b 13 	lds	r26, 0x137B	; 0x80137b <pxCurrentTCB>
    196e:	b0 91 7c 13 	lds	r27, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    1972:	1d 96       	adiw	r26, 0x0d	; 13
    1974:	fc 93       	st	X, r31
    1976:	ee 93       	st	-X, r30
    1978:	1c 97       	sbiw	r26, 0x0c	; 12
    197a:	80 81       	ld	r24, Z
    197c:	8f 5f       	subi	r24, 0xFF	; 255
    197e:	80 83       	st	Z, r24
    1980:	3f c0       	rjmp	.+126    	; 0x1a00 <prvAddCurrentTaskToDelayedList+0x12e>
    1982:	c8 0c       	add	r12, r8
    1984:	d9 1c       	adc	r13, r9
    1986:	ea 1c       	adc	r14, r10
    1988:	fb 1c       	adc	r15, r11
    198a:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    198e:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    1992:	c2 82       	std	Z+2, r12	; 0x02
    1994:	d3 82       	std	Z+3, r13	; 0x03
    1996:	e4 82       	std	Z+4, r14	; 0x04
    1998:	f5 82       	std	Z+5, r15	; 0x05
    199a:	c8 14       	cp	r12, r8
    199c:	d9 04       	cpc	r13, r9
    199e:	ea 04       	cpc	r14, r10
    19a0:	fb 04       	cpc	r15, r11
    19a2:	68 f4       	brcc	.+26     	; 0x19be <prvAddCurrentTaskToDelayedList+0xec>
    19a4:	60 91 7b 13 	lds	r22, 0x137B	; 0x80137b <pxCurrentTCB>
    19a8:	70 91 7c 13 	lds	r23, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    19ac:	80 91 f3 12 	lds	r24, 0x12F3	; 0x8012f3 <pxOverflowDelayedTaskList>
    19b0:	90 91 f4 12 	lds	r25, 0x12F4	; 0x8012f4 <pxOverflowDelayedTaskList+0x1>
    19b4:	6e 5f       	subi	r22, 0xFE	; 254
    19b6:	7f 4f       	sbci	r23, 0xFF	; 255
    19b8:	0e 94 ad 02 	call	0x55a	; 0x55a <vListInsert>
    19bc:	21 c0       	rjmp	.+66     	; 0x1a00 <prvAddCurrentTaskToDelayedList+0x12e>
    19be:	60 91 7b 13 	lds	r22, 0x137B	; 0x80137b <pxCurrentTCB>
    19c2:	70 91 7c 13 	lds	r23, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    19c6:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <pxDelayedTaskList>
    19ca:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <pxDelayedTaskList+0x1>
    19ce:	6e 5f       	subi	r22, 0xFE	; 254
    19d0:	7f 4f       	sbci	r23, 0xFF	; 255
    19d2:	0e 94 ad 02 	call	0x55a	; 0x55a <vListInsert>
    19d6:	80 91 bf 12 	lds	r24, 0x12BF	; 0x8012bf <xNextTaskUnblockTime>
    19da:	90 91 c0 12 	lds	r25, 0x12C0	; 0x8012c0 <xNextTaskUnblockTime+0x1>
    19de:	a0 91 c1 12 	lds	r26, 0x12C1	; 0x8012c1 <xNextTaskUnblockTime+0x2>
    19e2:	b0 91 c2 12 	lds	r27, 0x12C2	; 0x8012c2 <xNextTaskUnblockTime+0x3>
    19e6:	c8 16       	cp	r12, r24
    19e8:	d9 06       	cpc	r13, r25
    19ea:	ea 06       	cpc	r14, r26
    19ec:	fb 06       	cpc	r15, r27
    19ee:	40 f4       	brcc	.+16     	; 0x1a00 <prvAddCurrentTaskToDelayedList+0x12e>
    19f0:	c0 92 bf 12 	sts	0x12BF, r12	; 0x8012bf <xNextTaskUnblockTime>
    19f4:	d0 92 c0 12 	sts	0x12C0, r13	; 0x8012c0 <xNextTaskUnblockTime+0x1>
    19f8:	e0 92 c1 12 	sts	0x12C1, r14	; 0x8012c1 <xNextTaskUnblockTime+0x2>
    19fc:	f0 92 c2 12 	sts	0x12C2, r15	; 0x8012c2 <xNextTaskUnblockTime+0x3>
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	ff 90       	pop	r15
    1a06:	ef 90       	pop	r14
    1a08:	df 90       	pop	r13
    1a0a:	cf 90       	pop	r12
    1a0c:	bf 90       	pop	r11
    1a0e:	af 90       	pop	r10
    1a10:	9f 90       	pop	r9
    1a12:	8f 90       	pop	r8
    1a14:	08 95       	ret

00001a16 <xTaskCreate>:
    1a16:	2f 92       	push	r2
    1a18:	3f 92       	push	r3
    1a1a:	4f 92       	push	r4
    1a1c:	5f 92       	push	r5
    1a1e:	6f 92       	push	r6
    1a20:	7f 92       	push	r7
    1a22:	8f 92       	push	r8
    1a24:	9f 92       	push	r9
    1a26:	af 92       	push	r10
    1a28:	bf 92       	push	r11
    1a2a:	cf 92       	push	r12
    1a2c:	df 92       	push	r13
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	3c 01       	movw	r6, r24
    1a3a:	1b 01       	movw	r2, r22
    1a3c:	4a 01       	movw	r8, r20
    1a3e:	29 01       	movw	r4, r18
    1a40:	ca 01       	movw	r24, r20
    1a42:	0e 94 b2 01 	call	0x364	; 0x364 <pvPortMalloc>
    1a46:	6c 01       	movw	r12, r24
    1a48:	89 2b       	or	r24, r25
    1a4a:	71 f0       	breq	.+28     	; 0x1a68 <xTaskCreate+0x52>
    1a4c:	84 e3       	ldi	r24, 0x34	; 52
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	0e 94 b2 01 	call	0x364	; 0x364 <pvPortMalloc>
    1a54:	ec 01       	movw	r28, r24
    1a56:	89 2b       	or	r24, r25
    1a58:	19 f0       	breq	.+6      	; 0x1a60 <xTaskCreate+0x4a>
    1a5a:	dc 8e       	std	Y+28, r13	; 0x1c
    1a5c:	cb 8e       	std	Y+27, r12	; 0x1b
    1a5e:	06 c0       	rjmp	.+12     	; 0x1a6c <xTaskCreate+0x56>
    1a60:	c6 01       	movw	r24, r12
    1a62:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <vPortFree>
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <xTaskCreate+0x56>
    1a68:	c0 e0       	ldi	r28, 0x00	; 0
    1a6a:	d0 e0       	ldi	r29, 0x00	; 0
    1a6c:	20 97       	sbiw	r28, 0x00	; 0
    1a6e:	61 f0       	breq	.+24     	; 0x1a88 <xTaskCreate+0x72>
    1a70:	a1 2c       	mov	r10, r1
    1a72:	b1 2c       	mov	r11, r1
    1a74:	6e 01       	movw	r12, r28
    1a76:	92 01       	movw	r18, r4
    1a78:	a4 01       	movw	r20, r8
    1a7a:	b1 01       	movw	r22, r2
    1a7c:	c3 01       	movw	r24, r6
    1a7e:	e7 dd       	rcall	.-1074   	; 0x164e <prvInitialiseNewTask>
    1a80:	ce 01       	movw	r24, r28
    1a82:	93 de       	rcall	.-730    	; 0x17aa <prvAddNewTaskToReadyList>
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	01 c0       	rjmp	.+2      	; 0x1a8a <xTaskCreate+0x74>
    1a88:	8f ef       	ldi	r24, 0xFF	; 255
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	0f 91       	pop	r16
    1a90:	ff 90       	pop	r15
    1a92:	ef 90       	pop	r14
    1a94:	df 90       	pop	r13
    1a96:	cf 90       	pop	r12
    1a98:	bf 90       	pop	r11
    1a9a:	af 90       	pop	r10
    1a9c:	9f 90       	pop	r9
    1a9e:	8f 90       	pop	r8
    1aa0:	7f 90       	pop	r7
    1aa2:	6f 90       	pop	r6
    1aa4:	5f 90       	pop	r5
    1aa6:	4f 90       	pop	r4
    1aa8:	3f 90       	pop	r3
    1aaa:	2f 90       	pop	r2
    1aac:	08 95       	ret

00001aae <vTaskStartScheduler>:
    1aae:	ef 92       	push	r14
    1ab0:	ff 92       	push	r15
    1ab2:	0f 93       	push	r16
    1ab4:	0f 2e       	mov	r0, r31
    1ab6:	fd eb       	ldi	r31, 0xBD	; 189
    1ab8:	ef 2e       	mov	r14, r31
    1aba:	f2 e1       	ldi	r31, 0x12	; 18
    1abc:	ff 2e       	mov	r15, r31
    1abe:	f0 2d       	mov	r31, r0
    1ac0:	00 e0       	ldi	r16, 0x00	; 0
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 ec       	ldi	r20, 0xC0	; 192
    1ac8:	50 e0       	ldi	r21, 0x00	; 0
    1aca:	67 e8       	ldi	r22, 0x87	; 135
    1acc:	72 e0       	ldi	r23, 0x02	; 2
    1ace:	8d ec       	ldi	r24, 0xCD	; 205
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	a1 df       	rcall	.-190    	; 0x1a16 <xTaskCreate>
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	11 f4       	brne	.+4      	; 0x1adc <vTaskStartScheduler+0x2e>
    1ad8:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <xTimerCreateTimerTask>
    1adc:	81 30       	cpi	r24, 0x01	; 1
    1ade:	c9 f4       	brne	.+50     	; 0x1b12 <vTaskStartScheduler+0x64>
    1ae0:	f8 94       	cli
    1ae2:	8f ef       	ldi	r24, 0xFF	; 255
    1ae4:	9f ef       	ldi	r25, 0xFF	; 255
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	80 93 bf 12 	sts	0x12BF, r24	; 0x8012bf <xNextTaskUnblockTime>
    1aec:	90 93 c0 12 	sts	0x12C0, r25	; 0x8012c0 <xNextTaskUnblockTime+0x1>
    1af0:	a0 93 c1 12 	sts	0x12C1, r26	; 0x8012c1 <xNextTaskUnblockTime+0x2>
    1af4:	b0 93 c2 12 	sts	0x12C2, r27	; 0x8012c2 <xNextTaskUnblockTime+0x3>
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	80 93 ca 12 	sts	0x12CA, r24	; 0x8012ca <xSchedulerRunning>
    1afe:	10 92 cc 12 	sts	0x12CC, r1	; 0x8012cc <xTickCount>
    1b02:	10 92 cd 12 	sts	0x12CD, r1	; 0x8012cd <xTickCount+0x1>
    1b06:	10 92 ce 12 	sts	0x12CE, r1	; 0x8012ce <xTickCount+0x2>
    1b0a:	10 92 cf 12 	sts	0x12CF, r1	; 0x8012cf <xTickCount+0x3>
    1b0e:	0e 94 34 03 	call	0x668	; 0x668 <xPortStartScheduler>
    1b12:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1b16:	0f 91       	pop	r16
    1b18:	ff 90       	pop	r15
    1b1a:	ef 90       	pop	r14
    1b1c:	08 95       	ret

00001b1e <vTaskSuspendAll>:
    1b1e:	80 91 bc 12 	lds	r24, 0x12BC	; 0x8012bc <uxSchedulerSuspended>
    1b22:	8f 5f       	subi	r24, 0xFF	; 255
    1b24:	80 93 bc 12 	sts	0x12BC, r24	; 0x8012bc <uxSchedulerSuspended>
    1b28:	08 95       	ret

00001b2a <xTaskGetTickCount>:
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	0f 92       	push	r0
    1b30:	60 91 cc 12 	lds	r22, 0x12CC	; 0x8012cc <xTickCount>
    1b34:	70 91 cd 12 	lds	r23, 0x12CD	; 0x8012cd <xTickCount+0x1>
    1b38:	80 91 ce 12 	lds	r24, 0x12CE	; 0x8012ce <xTickCount+0x2>
    1b3c:	90 91 cf 12 	lds	r25, 0x12CF	; 0x8012cf <xTickCount+0x3>
    1b40:	0f 90       	pop	r0
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	08 95       	ret

00001b46 <xTaskIncrementTick>:
    1b46:	cf 92       	push	r12
    1b48:	df 92       	push	r13
    1b4a:	ef 92       	push	r14
    1b4c:	ff 92       	push	r15
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	80 91 bc 12 	lds	r24, 0x12BC	; 0x8012bc <uxSchedulerSuspended>
    1b56:	81 11       	cpse	r24, r1
    1b58:	05 c1       	rjmp	.+522    	; 0x1d64 <xTaskIncrementTick+0x21e>
    1b5a:	c0 90 cc 12 	lds	r12, 0x12CC	; 0x8012cc <xTickCount>
    1b5e:	d0 90 cd 12 	lds	r13, 0x12CD	; 0x8012cd <xTickCount+0x1>
    1b62:	e0 90 ce 12 	lds	r14, 0x12CE	; 0x8012ce <xTickCount+0x2>
    1b66:	f0 90 cf 12 	lds	r15, 0x12CF	; 0x8012cf <xTickCount+0x3>
    1b6a:	8f ef       	ldi	r24, 0xFF	; 255
    1b6c:	c8 1a       	sub	r12, r24
    1b6e:	d8 0a       	sbc	r13, r24
    1b70:	e8 0a       	sbc	r14, r24
    1b72:	f8 0a       	sbc	r15, r24
    1b74:	c0 92 cc 12 	sts	0x12CC, r12	; 0x8012cc <xTickCount>
    1b78:	d0 92 cd 12 	sts	0x12CD, r13	; 0x8012cd <xTickCount+0x1>
    1b7c:	e0 92 ce 12 	sts	0x12CE, r14	; 0x8012ce <xTickCount+0x2>
    1b80:	f0 92 cf 12 	sts	0x12CF, r15	; 0x8012cf <xTickCount+0x3>
    1b84:	c1 14       	cp	r12, r1
    1b86:	d1 04       	cpc	r13, r1
    1b88:	e1 04       	cpc	r14, r1
    1b8a:	f1 04       	cpc	r15, r1
    1b8c:	b1 f4       	brne	.+44     	; 0x1bba <xTaskIncrementTick+0x74>
    1b8e:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <pxDelayedTaskList>
    1b92:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <pxDelayedTaskList+0x1>
    1b96:	20 91 f3 12 	lds	r18, 0x12F3	; 0x8012f3 <pxOverflowDelayedTaskList>
    1b9a:	30 91 f4 12 	lds	r19, 0x12F4	; 0x8012f4 <pxOverflowDelayedTaskList+0x1>
    1b9e:	30 93 f6 12 	sts	0x12F6, r19	; 0x8012f6 <pxDelayedTaskList+0x1>
    1ba2:	20 93 f5 12 	sts	0x12F5, r18	; 0x8012f5 <pxDelayedTaskList>
    1ba6:	90 93 f4 12 	sts	0x12F4, r25	; 0x8012f4 <pxOverflowDelayedTaskList+0x1>
    1baa:	80 93 f3 12 	sts	0x12F3, r24	; 0x8012f3 <pxOverflowDelayedTaskList>
    1bae:	80 91 c4 12 	lds	r24, 0x12C4	; 0x8012c4 <xNumOfOverflows>
    1bb2:	8f 5f       	subi	r24, 0xFF	; 255
    1bb4:	80 93 c4 12 	sts	0x12C4, r24	; 0x8012c4 <xNumOfOverflows>
    1bb8:	16 dd       	rcall	.-1492   	; 0x15e6 <prvResetNextTaskUnblockTime>
    1bba:	80 91 bf 12 	lds	r24, 0x12BF	; 0x8012bf <xNextTaskUnblockTime>
    1bbe:	90 91 c0 12 	lds	r25, 0x12C0	; 0x8012c0 <xNextTaskUnblockTime+0x1>
    1bc2:	a0 91 c1 12 	lds	r26, 0x12C1	; 0x8012c1 <xNextTaskUnblockTime+0x2>
    1bc6:	b0 91 c2 12 	lds	r27, 0x12C2	; 0x8012c2 <xNextTaskUnblockTime+0x3>
    1bca:	c8 16       	cp	r12, r24
    1bcc:	d9 06       	cpc	r13, r25
    1bce:	ea 06       	cpc	r14, r26
    1bd0:	fb 06       	cpc	r15, r27
    1bd2:	20 f4       	brcc	.+8      	; 0x1bdc <xTaskIncrementTick+0x96>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	b2 c0       	rjmp	.+356    	; 0x1d3c <xTaskIncrementTick+0x1f6>
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	01 c0       	rjmp	.+2      	; 0x1bde <xTaskIncrementTick+0x98>
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxDelayedTaskList>
    1be2:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxDelayedTaskList+0x1>
    1be6:	90 81       	ld	r25, Z
    1be8:	91 11       	cpse	r25, r1
    1bea:	0c c0       	rjmp	.+24     	; 0x1c04 <xTaskIncrementTick+0xbe>
    1bec:	4f ef       	ldi	r20, 0xFF	; 255
    1bee:	5f ef       	ldi	r21, 0xFF	; 255
    1bf0:	ba 01       	movw	r22, r20
    1bf2:	40 93 bf 12 	sts	0x12BF, r20	; 0x8012bf <xNextTaskUnblockTime>
    1bf6:	50 93 c0 12 	sts	0x12C0, r21	; 0x8012c0 <xNextTaskUnblockTime+0x1>
    1bfa:	60 93 c1 12 	sts	0x12C1, r22	; 0x8012c1 <xNextTaskUnblockTime+0x2>
    1bfe:	70 93 c2 12 	sts	0x12C2, r23	; 0x8012c2 <xNextTaskUnblockTime+0x3>
    1c02:	9c c0       	rjmp	.+312    	; 0x1d3c <xTaskIncrementTick+0x1f6>
    1c04:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <pxDelayedTaskList>
    1c08:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <pxDelayedTaskList+0x1>
    1c0c:	07 80       	ldd	r0, Z+7	; 0x07
    1c0e:	f0 85       	ldd	r31, Z+8	; 0x08
    1c10:	e0 2d       	mov	r30, r0
    1c12:	00 84       	ldd	r0, Z+8	; 0x08
    1c14:	f1 85       	ldd	r31, Z+9	; 0x09
    1c16:	e0 2d       	mov	r30, r0
    1c18:	42 81       	ldd	r20, Z+2	; 0x02
    1c1a:	53 81       	ldd	r21, Z+3	; 0x03
    1c1c:	64 81       	ldd	r22, Z+4	; 0x04
    1c1e:	75 81       	ldd	r23, Z+5	; 0x05
    1c20:	c4 16       	cp	r12, r20
    1c22:	d5 06       	cpc	r13, r21
    1c24:	e6 06       	cpc	r14, r22
    1c26:	f7 06       	cpc	r15, r23
    1c28:	48 f4       	brcc	.+18     	; 0x1c3c <xTaskIncrementTick+0xf6>
    1c2a:	40 93 bf 12 	sts	0x12BF, r20	; 0x8012bf <xNextTaskUnblockTime>
    1c2e:	50 93 c0 12 	sts	0x12C0, r21	; 0x8012c0 <xNextTaskUnblockTime+0x1>
    1c32:	60 93 c1 12 	sts	0x12C1, r22	; 0x8012c1 <xNextTaskUnblockTime+0x2>
    1c36:	70 93 c2 12 	sts	0x12C2, r23	; 0x8012c2 <xNextTaskUnblockTime+0x3>
    1c3a:	80 c0       	rjmp	.+256    	; 0x1d3c <xTaskIncrementTick+0x1f6>
    1c3c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c3e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c40:	c6 81       	ldd	r28, Z+6	; 0x06
    1c42:	d7 81       	ldd	r29, Z+7	; 0x07
    1c44:	20 85       	ldd	r18, Z+8	; 0x08
    1c46:	31 85       	ldd	r19, Z+9	; 0x09
    1c48:	3f 83       	std	Y+7, r19	; 0x07
    1c4a:	2e 83       	std	Y+6, r18	; 0x06
    1c4c:	c0 85       	ldd	r28, Z+8	; 0x08
    1c4e:	d1 85       	ldd	r29, Z+9	; 0x09
    1c50:	26 81       	ldd	r18, Z+6	; 0x06
    1c52:	37 81       	ldd	r19, Z+7	; 0x07
    1c54:	3d 83       	std	Y+5, r19	; 0x05
    1c56:	2c 83       	std	Y+4, r18	; 0x04
    1c58:	11 96       	adiw	r26, 0x01	; 1
    1c5a:	4d 91       	ld	r20, X+
    1c5c:	5c 91       	ld	r21, X
    1c5e:	12 97       	sbiw	r26, 0x02	; 2
    1c60:	9f 01       	movw	r18, r30
    1c62:	2e 5f       	subi	r18, 0xFE	; 254
    1c64:	3f 4f       	sbci	r19, 0xFF	; 255
    1c66:	42 17       	cp	r20, r18
    1c68:	53 07       	cpc	r21, r19
    1c6a:	31 f4       	brne	.+12     	; 0x1c78 <xTaskIncrementTick+0x132>
    1c6c:	40 85       	ldd	r20, Z+8	; 0x08
    1c6e:	51 85       	ldd	r21, Z+9	; 0x09
    1c70:	12 96       	adiw	r26, 0x02	; 2
    1c72:	5c 93       	st	X, r21
    1c74:	4e 93       	st	-X, r20
    1c76:	11 97       	sbiw	r26, 0x01	; 1
    1c78:	15 86       	std	Z+13, r1	; 0x0d
    1c7a:	14 86       	std	Z+12, r1	; 0x0c
    1c7c:	9c 91       	ld	r25, X
    1c7e:	91 50       	subi	r25, 0x01	; 1
    1c80:	9c 93       	st	X, r25
    1c82:	a0 8d       	ldd	r26, Z+24	; 0x18
    1c84:	b1 8d       	ldd	r27, Z+25	; 0x19
    1c86:	10 97       	sbiw	r26, 0x00	; 0
    1c88:	09 f1       	breq	.+66     	; 0x1ccc <xTaskIncrementTick+0x186>
    1c8a:	c2 89       	ldd	r28, Z+18	; 0x12
    1c8c:	d3 89       	ldd	r29, Z+19	; 0x13
    1c8e:	44 89       	ldd	r20, Z+20	; 0x14
    1c90:	55 89       	ldd	r21, Z+21	; 0x15
    1c92:	5f 83       	std	Y+7, r21	; 0x07
    1c94:	4e 83       	std	Y+6, r20	; 0x06
    1c96:	c4 89       	ldd	r28, Z+20	; 0x14
    1c98:	d5 89       	ldd	r29, Z+21	; 0x15
    1c9a:	42 89       	ldd	r20, Z+18	; 0x12
    1c9c:	53 89       	ldd	r21, Z+19	; 0x13
    1c9e:	5d 83       	std	Y+5, r21	; 0x05
    1ca0:	4c 83       	std	Y+4, r20	; 0x04
    1ca2:	11 96       	adiw	r26, 0x01	; 1
    1ca4:	6d 91       	ld	r22, X+
    1ca6:	7c 91       	ld	r23, X
    1ca8:	12 97       	sbiw	r26, 0x02	; 2
    1caa:	af 01       	movw	r20, r30
    1cac:	42 5f       	subi	r20, 0xF2	; 242
    1cae:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb0:	64 17       	cp	r22, r20
    1cb2:	75 07       	cpc	r23, r21
    1cb4:	31 f4       	brne	.+12     	; 0x1cc2 <xTaskIncrementTick+0x17c>
    1cb6:	44 89       	ldd	r20, Z+20	; 0x14
    1cb8:	55 89       	ldd	r21, Z+21	; 0x15
    1cba:	12 96       	adiw	r26, 0x02	; 2
    1cbc:	5c 93       	st	X, r21
    1cbe:	4e 93       	st	-X, r20
    1cc0:	11 97       	sbiw	r26, 0x01	; 1
    1cc2:	11 8e       	std	Z+25, r1	; 0x19
    1cc4:	10 8e       	std	Z+24, r1	; 0x18
    1cc6:	9c 91       	ld	r25, X
    1cc8:	91 50       	subi	r25, 0x01	; 1
    1cca:	9c 93       	st	X, r25
    1ccc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1cce:	90 91 cb 12 	lds	r25, 0x12CB	; 0x8012cb <uxTopReadyPriority>
    1cd2:	9a 17       	cp	r25, r26
    1cd4:	10 f4       	brcc	.+4      	; 0x1cda <xTaskIncrementTick+0x194>
    1cd6:	a0 93 cb 12 	sts	0x12CB, r26	; 0x8012cb <uxTopReadyPriority>
    1cda:	9b e0       	ldi	r25, 0x0B	; 11
    1cdc:	9a 9f       	mul	r25, r26
    1cde:	d0 01       	movw	r26, r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	a3 5f       	subi	r26, 0xF3	; 243
    1ce4:	bc 4e       	sbci	r27, 0xEC	; 236
    1ce6:	11 96       	adiw	r26, 0x01	; 1
    1ce8:	0d 90       	ld	r0, X+
    1cea:	bc 91       	ld	r27, X
    1cec:	a0 2d       	mov	r26, r0
    1cee:	b7 83       	std	Z+7, r27	; 0x07
    1cf0:	a6 83       	std	Z+6, r26	; 0x06
    1cf2:	16 96       	adiw	r26, 0x06	; 6
    1cf4:	4d 91       	ld	r20, X+
    1cf6:	5c 91       	ld	r21, X
    1cf8:	17 97       	sbiw	r26, 0x07	; 7
    1cfa:	51 87       	std	Z+9, r21	; 0x09
    1cfc:	40 87       	std	Z+8, r20	; 0x08
    1cfe:	16 96       	adiw	r26, 0x06	; 6
    1d00:	cd 91       	ld	r28, X+
    1d02:	dc 91       	ld	r29, X
    1d04:	17 97       	sbiw	r26, 0x07	; 7
    1d06:	3d 83       	std	Y+5, r19	; 0x05
    1d08:	2c 83       	std	Y+4, r18	; 0x04
    1d0a:	17 96       	adiw	r26, 0x07	; 7
    1d0c:	3c 93       	st	X, r19
    1d0e:	2e 93       	st	-X, r18
    1d10:	16 97       	sbiw	r26, 0x06	; 6
    1d12:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d14:	9a 9f       	mul	r25, r26
    1d16:	d0 01       	movw	r26, r0
    1d18:	11 24       	eor	r1, r1
    1d1a:	a3 5f       	subi	r26, 0xF3	; 243
    1d1c:	bc 4e       	sbci	r27, 0xEC	; 236
    1d1e:	b5 87       	std	Z+13, r27	; 0x0d
    1d20:	a4 87       	std	Z+12, r26	; 0x0c
    1d22:	9c 91       	ld	r25, X
    1d24:	9f 5f       	subi	r25, 0xFF	; 255
    1d26:	9c 93       	st	X, r25
    1d28:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d2a:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    1d2e:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    1d32:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d34:	29 17       	cp	r18, r25
    1d36:	08 f0       	brcs	.+2      	; 0x1d3a <xTaskIncrementTick+0x1f4>
    1d38:	4f cf       	rjmp	.-354    	; 0x1bd8 <xTaskIncrementTick+0x92>
    1d3a:	51 cf       	rjmp	.-350    	; 0x1bde <xTaskIncrementTick+0x98>
    1d3c:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    1d40:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    1d44:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1d46:	9b e0       	ldi	r25, 0x0B	; 11
    1d48:	e9 9f       	mul	r30, r25
    1d4a:	f0 01       	movw	r30, r0
    1d4c:	11 24       	eor	r1, r1
    1d4e:	e3 5f       	subi	r30, 0xF3	; 243
    1d50:	fc 4e       	sbci	r31, 0xEC	; 236
    1d52:	90 81       	ld	r25, Z
    1d54:	92 30       	cpi	r25, 0x02	; 2
    1d56:	08 f0       	brcs	.+2      	; 0x1d5a <xTaskIncrementTick+0x214>
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 91 c5 12 	lds	r25, 0x12C5	; 0x8012c5 <xYieldPending>
    1d5e:	91 11       	cpse	r25, r1
    1d60:	16 c0       	rjmp	.+44     	; 0x1d8e <xTaskIncrementTick+0x248>
    1d62:	16 c0       	rjmp	.+44     	; 0x1d90 <xTaskIncrementTick+0x24a>
    1d64:	80 91 c6 12 	lds	r24, 0x12C6	; 0x8012c6 <xPendedTicks>
    1d68:	90 91 c7 12 	lds	r25, 0x12C7	; 0x8012c7 <xPendedTicks+0x1>
    1d6c:	a0 91 c8 12 	lds	r26, 0x12C8	; 0x8012c8 <xPendedTicks+0x2>
    1d70:	b0 91 c9 12 	lds	r27, 0x12C9	; 0x8012c9 <xPendedTicks+0x3>
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	a1 1d       	adc	r26, r1
    1d78:	b1 1d       	adc	r27, r1
    1d7a:	80 93 c6 12 	sts	0x12C6, r24	; 0x8012c6 <xPendedTicks>
    1d7e:	90 93 c7 12 	sts	0x12C7, r25	; 0x8012c7 <xPendedTicks+0x1>
    1d82:	a0 93 c8 12 	sts	0x12C8, r26	; 0x8012c8 <xPendedTicks+0x2>
    1d86:	b0 93 c9 12 	sts	0x12C9, r27	; 0x8012c9 <xPendedTicks+0x3>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <xTaskIncrementTick+0x24a>
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	ff 90       	pop	r15
    1d96:	ef 90       	pop	r14
    1d98:	df 90       	pop	r13
    1d9a:	cf 90       	pop	r12
    1d9c:	08 95       	ret

00001d9e <xTaskResumeAll>:
    1d9e:	cf 92       	push	r12
    1da0:	df 92       	push	r13
    1da2:	ef 92       	push	r14
    1da4:	ff 92       	push	r15
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	0f 92       	push	r0
    1db0:	80 91 bc 12 	lds	r24, 0x12BC	; 0x8012bc <uxSchedulerSuspended>
    1db4:	81 50       	subi	r24, 0x01	; 1
    1db6:	80 93 bc 12 	sts	0x12BC, r24	; 0x8012bc <uxSchedulerSuspended>
    1dba:	80 91 bc 12 	lds	r24, 0x12BC	; 0x8012bc <uxSchedulerSuspended>
    1dbe:	81 11       	cpse	r24, r1
    1dc0:	be c0       	rjmp	.+380    	; 0x1f3e <xTaskResumeAll+0x1a0>
    1dc2:	80 91 d0 12 	lds	r24, 0x12D0	; 0x8012d0 <uxCurrentNumberOfTasks>
    1dc6:	81 11       	cpse	r24, r1
    1dc8:	88 c0       	rjmp	.+272    	; 0x1eda <xTaskResumeAll+0x13c>
    1dca:	bc c0       	rjmp	.+376    	; 0x1f44 <xTaskResumeAll+0x1a6>
    1dcc:	e0 91 ef 12 	lds	r30, 0x12EF	; 0x8012ef <xPendingReadyList+0x7>
    1dd0:	f0 91 f0 12 	lds	r31, 0x12F0	; 0x8012f0 <xPendingReadyList+0x8>
    1dd4:	00 84       	ldd	r0, Z+8	; 0x08
    1dd6:	f1 85       	ldd	r31, Z+9	; 0x09
    1dd8:	e0 2d       	mov	r30, r0
    1dda:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ddc:	b1 8d       	ldd	r27, Z+25	; 0x19
    1dde:	c2 89       	ldd	r28, Z+18	; 0x12
    1de0:	d3 89       	ldd	r29, Z+19	; 0x13
    1de2:	84 89       	ldd	r24, Z+20	; 0x14
    1de4:	95 89       	ldd	r25, Z+21	; 0x15
    1de6:	9f 83       	std	Y+7, r25	; 0x07
    1de8:	8e 83       	std	Y+6, r24	; 0x06
    1dea:	c4 89       	ldd	r28, Z+20	; 0x14
    1dec:	d5 89       	ldd	r29, Z+21	; 0x15
    1dee:	82 89       	ldd	r24, Z+18	; 0x12
    1df0:	93 89       	ldd	r25, Z+19	; 0x13
    1df2:	9d 83       	std	Y+5, r25	; 0x05
    1df4:	8c 83       	std	Y+4, r24	; 0x04
    1df6:	11 96       	adiw	r26, 0x01	; 1
    1df8:	2d 91       	ld	r18, X+
    1dfa:	3c 91       	ld	r19, X
    1dfc:	12 97       	sbiw	r26, 0x02	; 2
    1dfe:	cf 01       	movw	r24, r30
    1e00:	0e 96       	adiw	r24, 0x0e	; 14
    1e02:	28 17       	cp	r18, r24
    1e04:	39 07       	cpc	r19, r25
    1e06:	31 f4       	brne	.+12     	; 0x1e14 <xTaskResumeAll+0x76>
    1e08:	84 89       	ldd	r24, Z+20	; 0x14
    1e0a:	95 89       	ldd	r25, Z+21	; 0x15
    1e0c:	12 96       	adiw	r26, 0x02	; 2
    1e0e:	9c 93       	st	X, r25
    1e10:	8e 93       	st	-X, r24
    1e12:	11 97       	sbiw	r26, 0x01	; 1
    1e14:	11 8e       	std	Z+25, r1	; 0x19
    1e16:	10 8e       	std	Z+24, r1	; 0x18
    1e18:	8c 91       	ld	r24, X
    1e1a:	81 50       	subi	r24, 0x01	; 1
    1e1c:	8c 93       	st	X, r24
    1e1e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e20:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e22:	c6 81       	ldd	r28, Z+6	; 0x06
    1e24:	d7 81       	ldd	r29, Z+7	; 0x07
    1e26:	80 85       	ldd	r24, Z+8	; 0x08
    1e28:	91 85       	ldd	r25, Z+9	; 0x09
    1e2a:	9f 83       	std	Y+7, r25	; 0x07
    1e2c:	8e 83       	std	Y+6, r24	; 0x06
    1e2e:	c0 85       	ldd	r28, Z+8	; 0x08
    1e30:	d1 85       	ldd	r29, Z+9	; 0x09
    1e32:	86 81       	ldd	r24, Z+6	; 0x06
    1e34:	97 81       	ldd	r25, Z+7	; 0x07
    1e36:	9d 83       	std	Y+5, r25	; 0x05
    1e38:	8c 83       	std	Y+4, r24	; 0x04
    1e3a:	11 96       	adiw	r26, 0x01	; 1
    1e3c:	8d 91       	ld	r24, X+
    1e3e:	9c 91       	ld	r25, X
    1e40:	12 97       	sbiw	r26, 0x02	; 2
    1e42:	9f 01       	movw	r18, r30
    1e44:	2e 5f       	subi	r18, 0xFE	; 254
    1e46:	3f 4f       	sbci	r19, 0xFF	; 255
    1e48:	82 17       	cp	r24, r18
    1e4a:	93 07       	cpc	r25, r19
    1e4c:	31 f4       	brne	.+12     	; 0x1e5a <xTaskResumeAll+0xbc>
    1e4e:	80 85       	ldd	r24, Z+8	; 0x08
    1e50:	91 85       	ldd	r25, Z+9	; 0x09
    1e52:	12 96       	adiw	r26, 0x02	; 2
    1e54:	9c 93       	st	X, r25
    1e56:	8e 93       	st	-X, r24
    1e58:	11 97       	sbiw	r26, 0x01	; 1
    1e5a:	15 86       	std	Z+13, r1	; 0x0d
    1e5c:	14 86       	std	Z+12, r1	; 0x0c
    1e5e:	8c 91       	ld	r24, X
    1e60:	81 50       	subi	r24, 0x01	; 1
    1e62:	8c 93       	st	X, r24
    1e64:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e66:	80 91 cb 12 	lds	r24, 0x12CB	; 0x8012cb <uxTopReadyPriority>
    1e6a:	8a 17       	cp	r24, r26
    1e6c:	10 f4       	brcc	.+4      	; 0x1e72 <xTaskResumeAll+0xd4>
    1e6e:	a0 93 cb 12 	sts	0x12CB, r26	; 0x8012cb <uxTopReadyPriority>
    1e72:	8b e0       	ldi	r24, 0x0B	; 11
    1e74:	8a 9f       	mul	r24, r26
    1e76:	d0 01       	movw	r26, r0
    1e78:	11 24       	eor	r1, r1
    1e7a:	a3 5f       	subi	r26, 0xF3	; 243
    1e7c:	bc 4e       	sbci	r27, 0xEC	; 236
    1e7e:	11 96       	adiw	r26, 0x01	; 1
    1e80:	0d 90       	ld	r0, X+
    1e82:	bc 91       	ld	r27, X
    1e84:	a0 2d       	mov	r26, r0
    1e86:	b7 83       	std	Z+7, r27	; 0x07
    1e88:	a6 83       	std	Z+6, r26	; 0x06
    1e8a:	16 96       	adiw	r26, 0x06	; 6
    1e8c:	4d 91       	ld	r20, X+
    1e8e:	5c 91       	ld	r21, X
    1e90:	17 97       	sbiw	r26, 0x07	; 7
    1e92:	51 87       	std	Z+9, r21	; 0x09
    1e94:	40 87       	std	Z+8, r20	; 0x08
    1e96:	16 96       	adiw	r26, 0x06	; 6
    1e98:	cd 91       	ld	r28, X+
    1e9a:	dc 91       	ld	r29, X
    1e9c:	17 97       	sbiw	r26, 0x07	; 7
    1e9e:	3d 83       	std	Y+5, r19	; 0x05
    1ea0:	2c 83       	std	Y+4, r18	; 0x04
    1ea2:	17 96       	adiw	r26, 0x07	; 7
    1ea4:	3c 93       	st	X, r19
    1ea6:	2e 93       	st	-X, r18
    1ea8:	16 97       	sbiw	r26, 0x06	; 6
    1eaa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1eac:	8a 9f       	mul	r24, r26
    1eae:	d0 01       	movw	r26, r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	a3 5f       	subi	r26, 0xF3	; 243
    1eb4:	bc 4e       	sbci	r27, 0xEC	; 236
    1eb6:	b5 87       	std	Z+13, r27	; 0x0d
    1eb8:	a4 87       	std	Z+12, r26	; 0x0c
    1eba:	8c 91       	ld	r24, X
    1ebc:	8f 5f       	subi	r24, 0xFF	; 255
    1ebe:	8c 93       	st	X, r24
    1ec0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ec2:	a0 91 7b 13 	lds	r26, 0x137B	; 0x80137b <pxCurrentTCB>
    1ec6:	b0 91 7c 13 	lds	r27, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    1eca:	5a 96       	adiw	r26, 0x1a	; 26
    1ecc:	8c 91       	ld	r24, X
    1ece:	98 17       	cp	r25, r24
    1ed0:	30 f0       	brcs	.+12     	; 0x1ede <xTaskResumeAll+0x140>
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	80 93 c5 12 	sts	0x12C5, r24	; 0x8012c5 <xYieldPending>
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <xTaskResumeAll+0x140>
    1eda:	e0 e0       	ldi	r30, 0x00	; 0
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 91 e8 12 	lds	r24, 0x12E8	; 0x8012e8 <xPendingReadyList>
    1ee2:	81 11       	cpse	r24, r1
    1ee4:	73 cf       	rjmp	.-282    	; 0x1dcc <xTaskResumeAll+0x2e>
    1ee6:	ef 2b       	or	r30, r31
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <xTaskResumeAll+0x14e>
    1eea:	7d db       	rcall	.-2310   	; 0x15e6 <prvResetNextTaskUnblockTime>
    1eec:	c0 90 c6 12 	lds	r12, 0x12C6	; 0x8012c6 <xPendedTicks>
    1ef0:	d0 90 c7 12 	lds	r13, 0x12C7	; 0x8012c7 <xPendedTicks+0x1>
    1ef4:	e0 90 c8 12 	lds	r14, 0x12C8	; 0x8012c8 <xPendedTicks+0x2>
    1ef8:	f0 90 c9 12 	lds	r15, 0x12C9	; 0x8012c9 <xPendedTicks+0x3>
    1efc:	c1 14       	cp	r12, r1
    1efe:	d1 04       	cpc	r13, r1
    1f00:	e1 04       	cpc	r14, r1
    1f02:	f1 04       	cpc	r15, r1
    1f04:	a1 f0       	breq	.+40     	; 0x1f2e <xTaskResumeAll+0x190>
    1f06:	1f de       	rcall	.-962    	; 0x1b46 <xTaskIncrementTick>
    1f08:	88 23       	and	r24, r24
    1f0a:	19 f0       	breq	.+6      	; 0x1f12 <xTaskResumeAll+0x174>
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	80 93 c5 12 	sts	0x12C5, r24	; 0x8012c5 <xYieldPending>
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	c8 1a       	sub	r12, r24
    1f16:	d1 08       	sbc	r13, r1
    1f18:	e1 08       	sbc	r14, r1
    1f1a:	f1 08       	sbc	r15, r1
    1f1c:	a1 f7       	brne	.-24     	; 0x1f06 <xTaskResumeAll+0x168>
    1f1e:	10 92 c6 12 	sts	0x12C6, r1	; 0x8012c6 <xPendedTicks>
    1f22:	10 92 c7 12 	sts	0x12C7, r1	; 0x8012c7 <xPendedTicks+0x1>
    1f26:	10 92 c8 12 	sts	0x12C8, r1	; 0x8012c8 <xPendedTicks+0x2>
    1f2a:	10 92 c9 12 	sts	0x12C9, r1	; 0x8012c9 <xPendedTicks+0x3>
    1f2e:	80 91 c5 12 	lds	r24, 0x12C5	; 0x8012c5 <xYieldPending>
    1f32:	88 23       	and	r24, r24
    1f34:	31 f0       	breq	.+12     	; 0x1f42 <xTaskResumeAll+0x1a4>
    1f36:	0e 94 66 03 	call	0x6cc	; 0x6cc <vPortYield>
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	03 c0       	rjmp	.+6      	; 0x1f44 <xTaskResumeAll+0x1a6>
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	01 c0       	rjmp	.+2      	; 0x1f44 <xTaskResumeAll+0x1a6>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	0f 90       	pop	r0
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	ff 90       	pop	r15
    1f4e:	ef 90       	pop	r14
    1f50:	df 90       	pop	r13
    1f52:	cf 90       	pop	r12
    1f54:	08 95       	ret

00001f56 <vTaskDelay>:
    1f56:	cf 92       	push	r12
    1f58:	df 92       	push	r13
    1f5a:	ef 92       	push	r14
    1f5c:	ff 92       	push	r15
    1f5e:	6b 01       	movw	r12, r22
    1f60:	7c 01       	movw	r14, r24
    1f62:	67 2b       	or	r22, r23
    1f64:	68 2b       	or	r22, r24
    1f66:	69 2b       	or	r22, r25
    1f68:	39 f0       	breq	.+14     	; 0x1f78 <vTaskDelay+0x22>
    1f6a:	d9 dd       	rcall	.-1102   	; 0x1b1e <vTaskSuspendAll>
    1f6c:	40 e0       	ldi	r20, 0x00	; 0
    1f6e:	c7 01       	movw	r24, r14
    1f70:	b6 01       	movw	r22, r12
    1f72:	af dc       	rcall	.-1698   	; 0x18d2 <prvAddCurrentTaskToDelayedList>
    1f74:	14 df       	rcall	.-472    	; 0x1d9e <xTaskResumeAll>
    1f76:	01 c0       	rjmp	.+2      	; 0x1f7a <vTaskDelay+0x24>
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	81 11       	cpse	r24, r1
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <vTaskDelay+0x2c>
    1f7e:	0e 94 66 03 	call	0x6cc	; 0x6cc <vPortYield>
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	df 90       	pop	r13
    1f88:	cf 90       	pop	r12
    1f8a:	08 95       	ret

00001f8c <vTaskSwitchContext>:
    1f8c:	80 91 bc 12 	lds	r24, 0x12BC	; 0x8012bc <uxSchedulerSuspended>
    1f90:	88 23       	and	r24, r24
    1f92:	21 f0       	breq	.+8      	; 0x1f9c <vTaskSwitchContext+0x10>
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	80 93 c5 12 	sts	0x12C5, r24	; 0x8012c5 <xYieldPending>
    1f9a:	08 95       	ret
    1f9c:	10 92 c5 12 	sts	0x12C5, r1	; 0x8012c5 <xYieldPending>
    1fa0:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    1fa4:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    1fa8:	20 81       	ld	r18, Z
    1faa:	31 81       	ldd	r19, Z+1	; 0x01
    1fac:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    1fb0:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    1fb4:	83 8d       	ldd	r24, Z+27	; 0x1b
    1fb6:	94 8d       	ldd	r25, Z+28	; 0x1c
    1fb8:	82 17       	cp	r24, r18
    1fba:	93 07       	cpc	r25, r19
    1fbc:	60 f0       	brcs	.+24     	; 0x1fd6 <vTaskSwitchContext+0x4a>
    1fbe:	60 91 7b 13 	lds	r22, 0x137B	; 0x80137b <pxCurrentTCB>
    1fc2:	70 91 7c 13 	lds	r23, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    1fc6:	63 5e       	subi	r22, 0xE3	; 227
    1fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fca:	80 91 7b 13 	lds	r24, 0x137B	; 0x80137b <pxCurrentTCB>
    1fce:	90 91 7c 13 	lds	r25, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    1fd2:	0e 94 24 19 	call	0x3248	; 0x3248 <vApplicationStackOverflowHook>
    1fd6:	80 91 cb 12 	lds	r24, 0x12CB	; 0x8012cb <uxTopReadyPriority>
    1fda:	01 c0       	rjmp	.+2      	; 0x1fde <vTaskSwitchContext+0x52>
    1fdc:	81 50       	subi	r24, 0x01	; 1
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	9b e0       	ldi	r25, 0x0B	; 11
    1fe4:	92 9f       	mul	r25, r18
    1fe6:	f0 01       	movw	r30, r0
    1fe8:	93 9f       	mul	r25, r19
    1fea:	f0 0d       	add	r31, r0
    1fec:	11 24       	eor	r1, r1
    1fee:	e3 5f       	subi	r30, 0xF3	; 243
    1ff0:	fc 4e       	sbci	r31, 0xEC	; 236
    1ff2:	90 81       	ld	r25, Z
    1ff4:	99 23       	and	r25, r25
    1ff6:	91 f3       	breq	.-28     	; 0x1fdc <vTaskSwitchContext+0x50>
    1ff8:	9b e0       	ldi	r25, 0x0B	; 11
    1ffa:	92 9f       	mul	r25, r18
    1ffc:	a0 01       	movw	r20, r0
    1ffe:	93 9f       	mul	r25, r19
    2000:	50 0d       	add	r21, r0
    2002:	11 24       	eor	r1, r1
    2004:	df 01       	movw	r26, r30
    2006:	01 80       	ldd	r0, Z+1	; 0x01
    2008:	f2 81       	ldd	r31, Z+2	; 0x02
    200a:	e0 2d       	mov	r30, r0
    200c:	04 80       	ldd	r0, Z+4	; 0x04
    200e:	f5 81       	ldd	r31, Z+5	; 0x05
    2010:	e0 2d       	mov	r30, r0
    2012:	12 96       	adiw	r26, 0x02	; 2
    2014:	fc 93       	st	X, r31
    2016:	ee 93       	st	-X, r30
    2018:	11 97       	sbiw	r26, 0x01	; 1
    201a:	40 5f       	subi	r20, 0xF0	; 240
    201c:	5c 4e       	sbci	r21, 0xEC	; 236
    201e:	e4 17       	cp	r30, r20
    2020:	f5 07       	cpc	r31, r21
    2022:	29 f4       	brne	.+10     	; 0x202e <__DATA_REGION_LENGTH__+0x2e>
    2024:	44 81       	ldd	r20, Z+4	; 0x04
    2026:	55 81       	ldd	r21, Z+5	; 0x05
    2028:	fd 01       	movw	r30, r26
    202a:	52 83       	std	Z+2, r21	; 0x02
    202c:	41 83       	std	Z+1, r20	; 0x01
    202e:	9b e0       	ldi	r25, 0x0B	; 11
    2030:	92 9f       	mul	r25, r18
    2032:	f0 01       	movw	r30, r0
    2034:	93 9f       	mul	r25, r19
    2036:	f0 0d       	add	r31, r0
    2038:	11 24       	eor	r1, r1
    203a:	e3 5f       	subi	r30, 0xF3	; 243
    203c:	fc 4e       	sbci	r31, 0xEC	; 236
    203e:	01 80       	ldd	r0, Z+1	; 0x01
    2040:	f2 81       	ldd	r31, Z+2	; 0x02
    2042:	e0 2d       	mov	r30, r0
    2044:	20 85       	ldd	r18, Z+8	; 0x08
    2046:	31 85       	ldd	r19, Z+9	; 0x09
    2048:	30 93 7c 13 	sts	0x137C, r19	; 0x80137c <pxCurrentTCB+0x1>
    204c:	20 93 7b 13 	sts	0x137B, r18	; 0x80137b <pxCurrentTCB>
    2050:	80 93 cb 12 	sts	0x12CB, r24	; 0x8012cb <uxTopReadyPriority>
    2054:	08 95       	ret

00002056 <vTaskPlaceOnEventList>:
    2056:	cf 92       	push	r12
    2058:	df 92       	push	r13
    205a:	ef 92       	push	r14
    205c:	ff 92       	push	r15
    205e:	6a 01       	movw	r12, r20
    2060:	7b 01       	movw	r14, r22
    2062:	60 91 7b 13 	lds	r22, 0x137B	; 0x80137b <pxCurrentTCB>
    2066:	70 91 7c 13 	lds	r23, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    206a:	62 5f       	subi	r22, 0xF2	; 242
    206c:	7f 4f       	sbci	r23, 0xFF	; 255
    206e:	0e 94 ad 02 	call	0x55a	; 0x55a <vListInsert>
    2072:	41 e0       	ldi	r20, 0x01	; 1
    2074:	c7 01       	movw	r24, r14
    2076:	b6 01       	movw	r22, r12
    2078:	2c dc       	rcall	.-1960   	; 0x18d2 <prvAddCurrentTaskToDelayedList>
    207a:	ff 90       	pop	r15
    207c:	ef 90       	pop	r14
    207e:	df 90       	pop	r13
    2080:	cf 90       	pop	r12
    2082:	08 95       	ret

00002084 <vTaskPlaceOnEventListRestricted>:
    2084:	cf 93       	push	r28
    2086:	df 93       	push	r29
    2088:	fc 01       	movw	r30, r24
    208a:	cb 01       	movw	r24, r22
    208c:	ba 01       	movw	r22, r20
    208e:	a1 81       	ldd	r26, Z+1	; 0x01
    2090:	b2 81       	ldd	r27, Z+2	; 0x02
    2092:	c0 91 7b 13 	lds	r28, 0x137B	; 0x80137b <pxCurrentTCB>
    2096:	d0 91 7c 13 	lds	r29, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    209a:	bb 8b       	std	Y+19, r27	; 0x13
    209c:	aa 8b       	std	Y+18, r26	; 0x12
    209e:	c0 91 7b 13 	lds	r28, 0x137B	; 0x80137b <pxCurrentTCB>
    20a2:	d0 91 7c 13 	lds	r29, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    20a6:	16 96       	adiw	r26, 0x06	; 6
    20a8:	4d 91       	ld	r20, X+
    20aa:	5c 91       	ld	r21, X
    20ac:	17 97       	sbiw	r26, 0x07	; 7
    20ae:	5d 8b       	std	Y+21, r21	; 0x15
    20b0:	4c 8b       	std	Y+20, r20	; 0x14
    20b2:	16 96       	adiw	r26, 0x06	; 6
    20b4:	cd 91       	ld	r28, X+
    20b6:	dc 91       	ld	r29, X
    20b8:	17 97       	sbiw	r26, 0x07	; 7
    20ba:	40 91 7b 13 	lds	r20, 0x137B	; 0x80137b <pxCurrentTCB>
    20be:	50 91 7c 13 	lds	r21, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    20c2:	42 5f       	subi	r20, 0xF2	; 242
    20c4:	5f 4f       	sbci	r21, 0xFF	; 255
    20c6:	5d 83       	std	Y+5, r21	; 0x05
    20c8:	4c 83       	std	Y+4, r20	; 0x04
    20ca:	40 91 7b 13 	lds	r20, 0x137B	; 0x80137b <pxCurrentTCB>
    20ce:	50 91 7c 13 	lds	r21, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    20d2:	42 5f       	subi	r20, 0xF2	; 242
    20d4:	5f 4f       	sbci	r21, 0xFF	; 255
    20d6:	17 96       	adiw	r26, 0x07	; 7
    20d8:	5c 93       	st	X, r21
    20da:	4e 93       	st	-X, r20
    20dc:	16 97       	sbiw	r26, 0x06	; 6
    20de:	a0 91 7b 13 	lds	r26, 0x137B	; 0x80137b <pxCurrentTCB>
    20e2:	b0 91 7c 13 	lds	r27, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    20e6:	59 96       	adiw	r26, 0x19	; 25
    20e8:	fc 93       	st	X, r31
    20ea:	ee 93       	st	-X, r30
    20ec:	58 97       	sbiw	r26, 0x18	; 24
    20ee:	30 81       	ld	r19, Z
    20f0:	3f 5f       	subi	r19, 0xFF	; 255
    20f2:	30 83       	st	Z, r19
    20f4:	22 23       	and	r18, r18
    20f6:	19 f0       	breq	.+6      	; 0x20fe <vTaskPlaceOnEventListRestricted+0x7a>
    20f8:	6f ef       	ldi	r22, 0xFF	; 255
    20fa:	7f ef       	ldi	r23, 0xFF	; 255
    20fc:	cb 01       	movw	r24, r22
    20fe:	42 2f       	mov	r20, r18
    2100:	e8 db       	rcall	.-2096   	; 0x18d2 <prvAddCurrentTaskToDelayedList>
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	08 95       	ret

00002108 <xTaskRemoveFromEventList>:
    2108:	cf 93       	push	r28
    210a:	df 93       	push	r29
    210c:	dc 01       	movw	r26, r24
    210e:	17 96       	adiw	r26, 0x07	; 7
    2110:	ed 91       	ld	r30, X+
    2112:	fc 91       	ld	r31, X
    2114:	18 97       	sbiw	r26, 0x08	; 8
    2116:	00 84       	ldd	r0, Z+8	; 0x08
    2118:	f1 85       	ldd	r31, Z+9	; 0x09
    211a:	e0 2d       	mov	r30, r0
    211c:	a0 8d       	ldd	r26, Z+24	; 0x18
    211e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2120:	c2 89       	ldd	r28, Z+18	; 0x12
    2122:	d3 89       	ldd	r29, Z+19	; 0x13
    2124:	84 89       	ldd	r24, Z+20	; 0x14
    2126:	95 89       	ldd	r25, Z+21	; 0x15
    2128:	9f 83       	std	Y+7, r25	; 0x07
    212a:	8e 83       	std	Y+6, r24	; 0x06
    212c:	c4 89       	ldd	r28, Z+20	; 0x14
    212e:	d5 89       	ldd	r29, Z+21	; 0x15
    2130:	82 89       	ldd	r24, Z+18	; 0x12
    2132:	93 89       	ldd	r25, Z+19	; 0x13
    2134:	9d 83       	std	Y+5, r25	; 0x05
    2136:	8c 83       	std	Y+4, r24	; 0x04
    2138:	11 96       	adiw	r26, 0x01	; 1
    213a:	8d 91       	ld	r24, X+
    213c:	9c 91       	ld	r25, X
    213e:	12 97       	sbiw	r26, 0x02	; 2
    2140:	9f 01       	movw	r18, r30
    2142:	22 5f       	subi	r18, 0xF2	; 242
    2144:	3f 4f       	sbci	r19, 0xFF	; 255
    2146:	82 17       	cp	r24, r18
    2148:	93 07       	cpc	r25, r19
    214a:	31 f4       	brne	.+12     	; 0x2158 <xTaskRemoveFromEventList+0x50>
    214c:	84 89       	ldd	r24, Z+20	; 0x14
    214e:	95 89       	ldd	r25, Z+21	; 0x15
    2150:	12 96       	adiw	r26, 0x02	; 2
    2152:	9c 93       	st	X, r25
    2154:	8e 93       	st	-X, r24
    2156:	11 97       	sbiw	r26, 0x01	; 1
    2158:	11 8e       	std	Z+25, r1	; 0x19
    215a:	10 8e       	std	Z+24, r1	; 0x18
    215c:	8c 91       	ld	r24, X
    215e:	81 50       	subi	r24, 0x01	; 1
    2160:	8c 93       	st	X, r24
    2162:	80 91 bc 12 	lds	r24, 0x12BC	; 0x8012bc <uxSchedulerSuspended>
    2166:	81 11       	cpse	r24, r1
    2168:	52 c0       	rjmp	.+164    	; 0x220e <__stack+0xf>
    216a:	a4 85       	ldd	r26, Z+12	; 0x0c
    216c:	b5 85       	ldd	r27, Z+13	; 0x0d
    216e:	c6 81       	ldd	r28, Z+6	; 0x06
    2170:	d7 81       	ldd	r29, Z+7	; 0x07
    2172:	80 85       	ldd	r24, Z+8	; 0x08
    2174:	91 85       	ldd	r25, Z+9	; 0x09
    2176:	9f 83       	std	Y+7, r25	; 0x07
    2178:	8e 83       	std	Y+6, r24	; 0x06
    217a:	c0 85       	ldd	r28, Z+8	; 0x08
    217c:	d1 85       	ldd	r29, Z+9	; 0x09
    217e:	86 81       	ldd	r24, Z+6	; 0x06
    2180:	97 81       	ldd	r25, Z+7	; 0x07
    2182:	9d 83       	std	Y+5, r25	; 0x05
    2184:	8c 83       	std	Y+4, r24	; 0x04
    2186:	11 96       	adiw	r26, 0x01	; 1
    2188:	8d 91       	ld	r24, X+
    218a:	9c 91       	ld	r25, X
    218c:	12 97       	sbiw	r26, 0x02	; 2
    218e:	9f 01       	movw	r18, r30
    2190:	2e 5f       	subi	r18, 0xFE	; 254
    2192:	3f 4f       	sbci	r19, 0xFF	; 255
    2194:	82 17       	cp	r24, r18
    2196:	93 07       	cpc	r25, r19
    2198:	31 f4       	brne	.+12     	; 0x21a6 <xTaskRemoveFromEventList+0x9e>
    219a:	80 85       	ldd	r24, Z+8	; 0x08
    219c:	91 85       	ldd	r25, Z+9	; 0x09
    219e:	12 96       	adiw	r26, 0x02	; 2
    21a0:	9c 93       	st	X, r25
    21a2:	8e 93       	st	-X, r24
    21a4:	11 97       	sbiw	r26, 0x01	; 1
    21a6:	15 86       	std	Z+13, r1	; 0x0d
    21a8:	14 86       	std	Z+12, r1	; 0x0c
    21aa:	8c 91       	ld	r24, X
    21ac:	81 50       	subi	r24, 0x01	; 1
    21ae:	8c 93       	st	X, r24
    21b0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21b2:	80 91 cb 12 	lds	r24, 0x12CB	; 0x8012cb <uxTopReadyPriority>
    21b6:	8a 17       	cp	r24, r26
    21b8:	10 f4       	brcc	.+4      	; 0x21be <xTaskRemoveFromEventList+0xb6>
    21ba:	a0 93 cb 12 	sts	0x12CB, r26	; 0x8012cb <uxTopReadyPriority>
    21be:	8b e0       	ldi	r24, 0x0B	; 11
    21c0:	8a 9f       	mul	r24, r26
    21c2:	d0 01       	movw	r26, r0
    21c4:	11 24       	eor	r1, r1
    21c6:	a3 5f       	subi	r26, 0xF3	; 243
    21c8:	bc 4e       	sbci	r27, 0xEC	; 236
    21ca:	11 96       	adiw	r26, 0x01	; 1
    21cc:	0d 90       	ld	r0, X+
    21ce:	bc 91       	ld	r27, X
    21d0:	a0 2d       	mov	r26, r0
    21d2:	b7 83       	std	Z+7, r27	; 0x07
    21d4:	a6 83       	std	Z+6, r26	; 0x06
    21d6:	16 96       	adiw	r26, 0x06	; 6
    21d8:	4d 91       	ld	r20, X+
    21da:	5c 91       	ld	r21, X
    21dc:	17 97       	sbiw	r26, 0x07	; 7
    21de:	51 87       	std	Z+9, r21	; 0x09
    21e0:	40 87       	std	Z+8, r20	; 0x08
    21e2:	16 96       	adiw	r26, 0x06	; 6
    21e4:	cd 91       	ld	r28, X+
    21e6:	dc 91       	ld	r29, X
    21e8:	17 97       	sbiw	r26, 0x07	; 7
    21ea:	3d 83       	std	Y+5, r19	; 0x05
    21ec:	2c 83       	std	Y+4, r18	; 0x04
    21ee:	17 96       	adiw	r26, 0x07	; 7
    21f0:	3c 93       	st	X, r19
    21f2:	2e 93       	st	-X, r18
    21f4:	16 97       	sbiw	r26, 0x06	; 6
    21f6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21f8:	8a 9f       	mul	r24, r26
    21fa:	d0 01       	movw	r26, r0
    21fc:	11 24       	eor	r1, r1
    21fe:	a3 5f       	subi	r26, 0xF3	; 243
    2200:	bc 4e       	sbci	r27, 0xEC	; 236
    2202:	b5 87       	std	Z+13, r27	; 0x0d
    2204:	a4 87       	std	Z+12, r26	; 0x0c
    2206:	8c 91       	ld	r24, X
    2208:	8f 5f       	subi	r24, 0xFF	; 255
    220a:	8c 93       	st	X, r24
    220c:	1c c0       	rjmp	.+56     	; 0x2246 <__stack+0x47>
    220e:	48 ee       	ldi	r20, 0xE8	; 232
    2210:	52 e1       	ldi	r21, 0x12	; 18
    2212:	da 01       	movw	r26, r20
    2214:	11 96       	adiw	r26, 0x01	; 1
    2216:	cd 91       	ld	r28, X+
    2218:	dc 91       	ld	r29, X
    221a:	12 97       	sbiw	r26, 0x02	; 2
    221c:	d3 8b       	std	Z+19, r29	; 0x13
    221e:	c2 8b       	std	Z+18, r28	; 0x12
    2220:	8e 81       	ldd	r24, Y+6	; 0x06
    2222:	9f 81       	ldd	r25, Y+7	; 0x07
    2224:	95 8b       	std	Z+21, r25	; 0x15
    2226:	84 8b       	std	Z+20, r24	; 0x14
    2228:	8e 81       	ldd	r24, Y+6	; 0x06
    222a:	9f 81       	ldd	r25, Y+7	; 0x07
    222c:	dc 01       	movw	r26, r24
    222e:	15 96       	adiw	r26, 0x05	; 5
    2230:	3c 93       	st	X, r19
    2232:	2e 93       	st	-X, r18
    2234:	14 97       	sbiw	r26, 0x04	; 4
    2236:	3f 83       	std	Y+7, r19	; 0x07
    2238:	2e 83       	std	Y+6, r18	; 0x06
    223a:	51 8f       	std	Z+25, r21	; 0x19
    223c:	40 8f       	std	Z+24, r20	; 0x18
    223e:	da 01       	movw	r26, r20
    2240:	8c 91       	ld	r24, X
    2242:	8f 5f       	subi	r24, 0xFF	; 255
    2244:	8c 93       	st	X, r24
    2246:	92 8d       	ldd	r25, Z+26	; 0x1a
    2248:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    224c:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    2250:	82 8d       	ldd	r24, Z+26	; 0x1a
    2252:	89 17       	cp	r24, r25
    2254:	20 f4       	brcc	.+8      	; 0x225e <__stack+0x5f>
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	80 93 c5 12 	sts	0x12C5, r24	; 0x8012c5 <xYieldPending>
    225c:	01 c0       	rjmp	.+2      	; 0x2260 <__stack+0x61>
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	df 91       	pop	r29
    2262:	cf 91       	pop	r28
    2264:	08 95       	ret

00002266 <vTaskSetTimeOutState>:
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	0f 92       	push	r0
    226c:	20 91 c4 12 	lds	r18, 0x12C4	; 0x8012c4 <xNumOfOverflows>
    2270:	fc 01       	movw	r30, r24
    2272:	20 83       	st	Z, r18
    2274:	40 91 cc 12 	lds	r20, 0x12CC	; 0x8012cc <xTickCount>
    2278:	50 91 cd 12 	lds	r21, 0x12CD	; 0x8012cd <xTickCount+0x1>
    227c:	60 91 ce 12 	lds	r22, 0x12CE	; 0x8012ce <xTickCount+0x2>
    2280:	70 91 cf 12 	lds	r23, 0x12CF	; 0x8012cf <xTickCount+0x3>
    2284:	41 83       	std	Z+1, r20	; 0x01
    2286:	52 83       	std	Z+2, r21	; 0x02
    2288:	63 83       	std	Z+3, r22	; 0x03
    228a:	74 83       	std	Z+4, r23	; 0x04
    228c:	0f 90       	pop	r0
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	08 95       	ret

00002292 <vTaskInternalSetTimeOutState>:
    2292:	20 91 c4 12 	lds	r18, 0x12C4	; 0x8012c4 <xNumOfOverflows>
    2296:	fc 01       	movw	r30, r24
    2298:	20 83       	st	Z, r18
    229a:	40 91 cc 12 	lds	r20, 0x12CC	; 0x8012cc <xTickCount>
    229e:	50 91 cd 12 	lds	r21, 0x12CD	; 0x8012cd <xTickCount+0x1>
    22a2:	60 91 ce 12 	lds	r22, 0x12CE	; 0x8012ce <xTickCount+0x2>
    22a6:	70 91 cf 12 	lds	r23, 0x12CF	; 0x8012cf <xTickCount+0x3>
    22aa:	41 83       	std	Z+1, r20	; 0x01
    22ac:	52 83       	std	Z+2, r21	; 0x02
    22ae:	63 83       	std	Z+3, r22	; 0x03
    22b0:	74 83       	std	Z+4, r23	; 0x04
    22b2:	08 95       	ret

000022b4 <xTaskCheckForTimeOut>:
    22b4:	8f 92       	push	r8
    22b6:	9f 92       	push	r9
    22b8:	af 92       	push	r10
    22ba:	bf 92       	push	r11
    22bc:	cf 92       	push	r12
    22be:	df 92       	push	r13
    22c0:	ef 92       	push	r14
    22c2:	ff 92       	push	r15
    22c4:	0f 93       	push	r16
    22c6:	1f 93       	push	r17
    22c8:	cf 93       	push	r28
    22ca:	df 93       	push	r29
    22cc:	fb 01       	movw	r30, r22
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	0f 92       	push	r0
    22d4:	c0 90 cc 12 	lds	r12, 0x12CC	; 0x8012cc <xTickCount>
    22d8:	d0 90 cd 12 	lds	r13, 0x12CD	; 0x8012cd <xTickCount+0x1>
    22dc:	e0 90 ce 12 	lds	r14, 0x12CE	; 0x8012ce <xTickCount+0x2>
    22e0:	f0 90 cf 12 	lds	r15, 0x12CF	; 0x8012cf <xTickCount+0x3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	11 96       	adiw	r26, 0x01	; 1
    22e8:	0d 91       	ld	r16, X+
    22ea:	1d 91       	ld	r17, X+
    22ec:	2d 91       	ld	r18, X+
    22ee:	3c 91       	ld	r19, X
    22f0:	14 97       	sbiw	r26, 0x04	; 4
    22f2:	46 01       	movw	r8, r12
    22f4:	57 01       	movw	r10, r14
    22f6:	80 1a       	sub	r8, r16
    22f8:	91 0a       	sbc	r9, r17
    22fa:	a2 0a       	sbc	r10, r18
    22fc:	b3 0a       	sbc	r11, r19
    22fe:	40 81       	ld	r20, Z
    2300:	51 81       	ldd	r21, Z+1	; 0x01
    2302:	62 81       	ldd	r22, Z+2	; 0x02
    2304:	73 81       	ldd	r23, Z+3	; 0x03
    2306:	4f 3f       	cpi	r20, 0xFF	; 255
    2308:	bf ef       	ldi	r27, 0xFF	; 255
    230a:	5b 07       	cpc	r21, r27
    230c:	6b 07       	cpc	r22, r27
    230e:	7b 07       	cpc	r23, r27
    2310:	39 f1       	breq	.+78     	; 0x2360 <xTaskCheckForTimeOut+0xac>
    2312:	ec 01       	movw	r28, r24
    2314:	b8 81       	ld	r27, Y
    2316:	a0 91 c4 12 	lds	r26, 0x12C4	; 0x8012c4 <xNumOfOverflows>
    231a:	ba 17       	cp	r27, r26
    231c:	59 f0       	breq	.+22     	; 0x2334 <xTaskCheckForTimeOut+0x80>
    231e:	c0 16       	cp	r12, r16
    2320:	d1 06       	cpc	r13, r17
    2322:	e2 06       	cpc	r14, r18
    2324:	f3 06       	cpc	r15, r19
    2326:	30 f0       	brcs	.+12     	; 0x2334 <xTaskCheckForTimeOut+0x80>
    2328:	10 82       	st	Z, r1
    232a:	11 82       	std	Z+1, r1	; 0x01
    232c:	12 82       	std	Z+2, r1	; 0x02
    232e:	13 82       	std	Z+3, r1	; 0x03
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	17 c0       	rjmp	.+46     	; 0x2362 <xTaskCheckForTimeOut+0xae>
    2334:	84 16       	cp	r8, r20
    2336:	95 06       	cpc	r9, r21
    2338:	a6 06       	cpc	r10, r22
    233a:	b7 06       	cpc	r11, r23
    233c:	58 f4       	brcc	.+22     	; 0x2354 <xTaskCheckForTimeOut+0xa0>
    233e:	48 19       	sub	r20, r8
    2340:	59 09       	sbc	r21, r9
    2342:	6a 09       	sbc	r22, r10
    2344:	7b 09       	sbc	r23, r11
    2346:	40 83       	st	Z, r20
    2348:	51 83       	std	Z+1, r21	; 0x01
    234a:	62 83       	std	Z+2, r22	; 0x02
    234c:	73 83       	std	Z+3, r23	; 0x03
    234e:	a1 df       	rcall	.-190    	; 0x2292 <vTaskInternalSetTimeOutState>
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	07 c0       	rjmp	.+14     	; 0x2362 <xTaskCheckForTimeOut+0xae>
    2354:	10 82       	st	Z, r1
    2356:	11 82       	std	Z+1, r1	; 0x01
    2358:	12 82       	std	Z+2, r1	; 0x02
    235a:	13 82       	std	Z+3, r1	; 0x03
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	01 c0       	rjmp	.+2      	; 0x2362 <xTaskCheckForTimeOut+0xae>
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	0f 90       	pop	r0
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
    236a:	1f 91       	pop	r17
    236c:	0f 91       	pop	r16
    236e:	ff 90       	pop	r15
    2370:	ef 90       	pop	r14
    2372:	df 90       	pop	r13
    2374:	cf 90       	pop	r12
    2376:	bf 90       	pop	r11
    2378:	af 90       	pop	r10
    237a:	9f 90       	pop	r9
    237c:	8f 90       	pop	r8
    237e:	08 95       	ret

00002380 <vTaskMissedYield>:
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	80 93 c5 12 	sts	0x12C5, r24	; 0x8012c5 <xYieldPending>
    2386:	08 95       	ret

00002388 <xTaskGetCurrentTaskHandle>:
    2388:	80 91 7b 13 	lds	r24, 0x137B	; 0x80137b <pxCurrentTCB>
    238c:	90 91 7c 13 	lds	r25, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    2390:	08 95       	ret

00002392 <xTaskGetSchedulerState>:
    2392:	80 91 ca 12 	lds	r24, 0x12CA	; 0x8012ca <xSchedulerRunning>
    2396:	88 23       	and	r24, r24
    2398:	31 f0       	breq	.+12     	; 0x23a6 <xTaskGetSchedulerState+0x14>
    239a:	80 91 bc 12 	lds	r24, 0x12BC	; 0x8012bc <uxSchedulerSuspended>
    239e:	81 11       	cpse	r24, r1
    23a0:	04 c0       	rjmp	.+8      	; 0x23aa <xTaskGetSchedulerState+0x18>
    23a2:	82 e0       	ldi	r24, 0x02	; 2
    23a4:	08 95       	ret
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	08 95       	ret
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	08 95       	ret

000023ae <xTaskPriorityInherit>:
    23ae:	0f 93       	push	r16
    23b0:	1f 93       	push	r17
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	fc 01       	movw	r30, r24
    23b8:	89 2b       	or	r24, r25
    23ba:	09 f4       	brne	.+2      	; 0x23be <xTaskPriorityInherit+0x10>
    23bc:	77 c0       	rjmp	.+238    	; 0x24ac <xTaskPriorityInherit+0xfe>
    23be:	82 8d       	ldd	r24, Z+26	; 0x1a
    23c0:	a0 91 7b 13 	lds	r26, 0x137B	; 0x80137b <pxCurrentTCB>
    23c4:	b0 91 7c 13 	lds	r27, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    23c8:	5a 96       	adiw	r26, 0x1a	; 26
    23ca:	9c 91       	ld	r25, X
    23cc:	89 17       	cp	r24, r25
    23ce:	08 f0       	brcs	.+2      	; 0x23d2 <xTaskPriorityInherit+0x24>
    23d0:	63 c0       	rjmp	.+198    	; 0x2498 <xTaskPriorityInherit+0xea>
    23d2:	46 85       	ldd	r20, Z+14	; 0x0e
    23d4:	57 85       	ldd	r21, Z+15	; 0x0f
    23d6:	60 89       	ldd	r22, Z+16	; 0x10
    23d8:	71 89       	ldd	r23, Z+17	; 0x11
    23da:	77 23       	and	r23, r23
    23dc:	94 f0       	brlt	.+36     	; 0x2402 <xTaskPriorityInherit+0x54>
    23de:	a0 91 7b 13 	lds	r26, 0x137B	; 0x80137b <pxCurrentTCB>
    23e2:	b0 91 7c 13 	lds	r27, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    23e6:	5a 96       	adiw	r26, 0x1a	; 26
    23e8:	9c 91       	ld	r25, X
    23ea:	4a e0       	ldi	r20, 0x0A	; 10
    23ec:	50 e0       	ldi	r21, 0x00	; 0
    23ee:	60 e0       	ldi	r22, 0x00	; 0
    23f0:	70 e0       	ldi	r23, 0x00	; 0
    23f2:	49 1b       	sub	r20, r25
    23f4:	51 09       	sbc	r21, r1
    23f6:	61 09       	sbc	r22, r1
    23f8:	71 09       	sbc	r23, r1
    23fa:	46 87       	std	Z+14, r20	; 0x0e
    23fc:	57 87       	std	Z+15, r21	; 0x0f
    23fe:	60 8b       	std	Z+16, r22	; 0x10
    2400:	71 8b       	std	Z+17, r23	; 0x11
    2402:	24 85       	ldd	r18, Z+12	; 0x0c
    2404:	35 85       	ldd	r19, Z+13	; 0x0d
    2406:	4b e0       	ldi	r20, 0x0B	; 11
    2408:	84 9f       	mul	r24, r20
    240a:	c0 01       	movw	r24, r0
    240c:	11 24       	eor	r1, r1
    240e:	83 5f       	subi	r24, 0xF3	; 243
    2410:	9c 4e       	sbci	r25, 0xEC	; 236
    2412:	28 17       	cp	r18, r24
    2414:	39 07       	cpc	r19, r25
    2416:	b9 f5       	brne	.+110    	; 0x2486 <xTaskPriorityInherit+0xd8>
    2418:	ef 01       	movw	r28, r30
    241a:	8f 01       	movw	r16, r30
    241c:	0e 5f       	subi	r16, 0xFE	; 254
    241e:	1f 4f       	sbci	r17, 0xFF	; 255
    2420:	c8 01       	movw	r24, r16
    2422:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <uxListRemove>
    2426:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    242a:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    242e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2430:	ea 8f       	std	Y+26, r30	; 0x1a
    2432:	80 91 cb 12 	lds	r24, 0x12CB	; 0x8012cb <uxTopReadyPriority>
    2436:	8e 17       	cp	r24, r30
    2438:	10 f4       	brcc	.+4      	; 0x243e <xTaskPriorityInherit+0x90>
    243a:	e0 93 cb 12 	sts	0x12CB, r30	; 0x8012cb <uxTopReadyPriority>
    243e:	8b e0       	ldi	r24, 0x0B	; 11
    2440:	8e 9f       	mul	r24, r30
    2442:	f0 01       	movw	r30, r0
    2444:	11 24       	eor	r1, r1
    2446:	e3 5f       	subi	r30, 0xF3	; 243
    2448:	fc 4e       	sbci	r31, 0xEC	; 236
    244a:	01 80       	ldd	r0, Z+1	; 0x01
    244c:	f2 81       	ldd	r31, Z+2	; 0x02
    244e:	e0 2d       	mov	r30, r0
    2450:	ff 83       	std	Y+7, r31	; 0x07
    2452:	ee 83       	std	Y+6, r30	; 0x06
    2454:	26 81       	ldd	r18, Z+6	; 0x06
    2456:	37 81       	ldd	r19, Z+7	; 0x07
    2458:	39 87       	std	Y+9, r19	; 0x09
    245a:	28 87       	std	Y+8, r18	; 0x08
    245c:	a6 81       	ldd	r26, Z+6	; 0x06
    245e:	b7 81       	ldd	r27, Z+7	; 0x07
    2460:	15 96       	adiw	r26, 0x05	; 5
    2462:	1c 93       	st	X, r17
    2464:	0e 93       	st	-X, r16
    2466:	14 97       	sbiw	r26, 0x04	; 4
    2468:	17 83       	std	Z+7, r17	; 0x07
    246a:	06 83       	std	Z+6, r16	; 0x06
    246c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    246e:	8e 9f       	mul	r24, r30
    2470:	f0 01       	movw	r30, r0
    2472:	11 24       	eor	r1, r1
    2474:	e3 5f       	subi	r30, 0xF3	; 243
    2476:	fc 4e       	sbci	r31, 0xEC	; 236
    2478:	fd 87       	std	Y+13, r31	; 0x0d
    247a:	ec 87       	std	Y+12, r30	; 0x0c
    247c:	80 81       	ld	r24, Z
    247e:	8f 5f       	subi	r24, 0xFF	; 255
    2480:	80 83       	st	Z, r24
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	16 c0       	rjmp	.+44     	; 0x24b2 <xTaskPriorityInherit+0x104>
    2486:	a0 91 7b 13 	lds	r26, 0x137B	; 0x80137b <pxCurrentTCB>
    248a:	b0 91 7c 13 	lds	r27, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    248e:	5a 96       	adiw	r26, 0x1a	; 26
    2490:	8c 91       	ld	r24, X
    2492:	82 8f       	std	Z+26, r24	; 0x1a
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	0d c0       	rjmp	.+26     	; 0x24b2 <xTaskPriorityInherit+0x104>
    2498:	95 a5       	ldd	r25, Z+45	; 0x2d
    249a:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    249e:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    24a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    24a4:	98 17       	cp	r25, r24
    24a6:	20 f0       	brcs	.+8      	; 0x24b0 <xTaskPriorityInherit+0x102>
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	03 c0       	rjmp	.+6      	; 0x24b2 <xTaskPriorityInherit+0x104>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	01 c0       	rjmp	.+2      	; 0x24b2 <xTaskPriorityInherit+0x104>
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	1f 91       	pop	r17
    24b8:	0f 91       	pop	r16
    24ba:	08 95       	ret

000024bc <xTaskPriorityDisinherit>:
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	fc 01       	movw	r30, r24
    24c6:	89 2b       	or	r24, r25
    24c8:	09 f4       	brne	.+2      	; 0x24cc <xTaskPriorityDisinherit+0x10>
    24ca:	49 c0       	rjmp	.+146    	; 0x255e <xTaskPriorityDisinherit+0xa2>
    24cc:	86 a5       	ldd	r24, Z+46	; 0x2e
    24ce:	81 50       	subi	r24, 0x01	; 1
    24d0:	86 a7       	std	Z+46, r24	; 0x2e
    24d2:	22 8d       	ldd	r18, Z+26	; 0x1a
    24d4:	95 a5       	ldd	r25, Z+45	; 0x2d
    24d6:	29 17       	cp	r18, r25
    24d8:	09 f4       	brne	.+2      	; 0x24dc <xTaskPriorityDisinherit+0x20>
    24da:	43 c0       	rjmp	.+134    	; 0x2562 <xTaskPriorityDisinherit+0xa6>
    24dc:	81 11       	cpse	r24, r1
    24de:	43 c0       	rjmp	.+134    	; 0x2566 <xTaskPriorityDisinherit+0xaa>
    24e0:	ef 01       	movw	r28, r30
    24e2:	8f 01       	movw	r16, r30
    24e4:	0e 5f       	subi	r16, 0xFE	; 254
    24e6:	1f 4f       	sbci	r17, 0xFF	; 255
    24e8:	c8 01       	movw	r24, r16
    24ea:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <uxListRemove>
    24ee:	ed a5       	ldd	r30, Y+45	; 0x2d
    24f0:	ea 8f       	std	Y+26, r30	; 0x1a
    24f2:	8a e0       	ldi	r24, 0x0A	; 10
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	a0 e0       	ldi	r26, 0x00	; 0
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	8e 1b       	sub	r24, r30
    24fc:	91 09       	sbc	r25, r1
    24fe:	a1 09       	sbc	r26, r1
    2500:	b1 09       	sbc	r27, r1
    2502:	8e 87       	std	Y+14, r24	; 0x0e
    2504:	9f 87       	std	Y+15, r25	; 0x0f
    2506:	a8 8b       	std	Y+16, r26	; 0x10
    2508:	b9 8b       	std	Y+17, r27	; 0x11
    250a:	80 91 cb 12 	lds	r24, 0x12CB	; 0x8012cb <uxTopReadyPriority>
    250e:	8e 17       	cp	r24, r30
    2510:	10 f4       	brcc	.+4      	; 0x2516 <xTaskPriorityDisinherit+0x5a>
    2512:	e0 93 cb 12 	sts	0x12CB, r30	; 0x8012cb <uxTopReadyPriority>
    2516:	8b e0       	ldi	r24, 0x0B	; 11
    2518:	8e 9f       	mul	r24, r30
    251a:	f0 01       	movw	r30, r0
    251c:	11 24       	eor	r1, r1
    251e:	e3 5f       	subi	r30, 0xF3	; 243
    2520:	fc 4e       	sbci	r31, 0xEC	; 236
    2522:	01 80       	ldd	r0, Z+1	; 0x01
    2524:	f2 81       	ldd	r31, Z+2	; 0x02
    2526:	e0 2d       	mov	r30, r0
    2528:	ff 83       	std	Y+7, r31	; 0x07
    252a:	ee 83       	std	Y+6, r30	; 0x06
    252c:	26 81       	ldd	r18, Z+6	; 0x06
    252e:	37 81       	ldd	r19, Z+7	; 0x07
    2530:	39 87       	std	Y+9, r19	; 0x09
    2532:	28 87       	std	Y+8, r18	; 0x08
    2534:	a6 81       	ldd	r26, Z+6	; 0x06
    2536:	b7 81       	ldd	r27, Z+7	; 0x07
    2538:	15 96       	adiw	r26, 0x05	; 5
    253a:	1c 93       	st	X, r17
    253c:	0e 93       	st	-X, r16
    253e:	14 97       	sbiw	r26, 0x04	; 4
    2540:	17 83       	std	Z+7, r17	; 0x07
    2542:	06 83       	std	Z+6, r16	; 0x06
    2544:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2546:	8e 9f       	mul	r24, r30
    2548:	f0 01       	movw	r30, r0
    254a:	11 24       	eor	r1, r1
    254c:	e3 5f       	subi	r30, 0xF3	; 243
    254e:	fc 4e       	sbci	r31, 0xEC	; 236
    2550:	fd 87       	std	Y+13, r31	; 0x0d
    2552:	ec 87       	std	Y+12, r30	; 0x0c
    2554:	80 81       	ld	r24, Z
    2556:	8f 5f       	subi	r24, 0xFF	; 255
    2558:	80 83       	st	Z, r24
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	05 c0       	rjmp	.+10     	; 0x2568 <xTaskPriorityDisinherit+0xac>
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	03 c0       	rjmp	.+6      	; 0x2568 <xTaskPriorityDisinherit+0xac>
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	01 c0       	rjmp	.+2      	; 0x2568 <xTaskPriorityDisinherit+0xac>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	1f 91       	pop	r17
    256e:	0f 91       	pop	r16
    2570:	08 95       	ret

00002572 <vTaskPriorityDisinheritAfterTimeout>:
    2572:	0f 93       	push	r16
    2574:	1f 93       	push	r17
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	fc 01       	movw	r30, r24
    257c:	89 2b       	or	r24, r25
    257e:	09 f4       	brne	.+2      	; 0x2582 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2580:	5a c0       	rjmp	.+180    	; 0x2636 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2582:	85 a5       	ldd	r24, Z+45	; 0x2d
    2584:	86 17       	cp	r24, r22
    2586:	08 f4       	brcc	.+2      	; 0x258a <vTaskPriorityDisinheritAfterTimeout+0x18>
    2588:	86 2f       	mov	r24, r22
    258a:	92 8d       	ldd	r25, Z+26	; 0x1a
    258c:	89 17       	cp	r24, r25
    258e:	09 f4       	brne	.+2      	; 0x2592 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2590:	52 c0       	rjmp	.+164    	; 0x2636 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2592:	26 a5       	ldd	r18, Z+46	; 0x2e
    2594:	21 30       	cpi	r18, 0x01	; 1
    2596:	09 f0       	breq	.+2      	; 0x259a <vTaskPriorityDisinheritAfterTimeout+0x28>
    2598:	4e c0       	rjmp	.+156    	; 0x2636 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    259a:	82 8f       	std	Z+26, r24	; 0x1a
    259c:	46 85       	ldd	r20, Z+14	; 0x0e
    259e:	57 85       	ldd	r21, Z+15	; 0x0f
    25a0:	60 89       	ldd	r22, Z+16	; 0x10
    25a2:	71 89       	ldd	r23, Z+17	; 0x11
    25a4:	77 23       	and	r23, r23
    25a6:	64 f0       	brlt	.+24     	; 0x25c0 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    25a8:	4a e0       	ldi	r20, 0x0A	; 10
    25aa:	50 e0       	ldi	r21, 0x00	; 0
    25ac:	60 e0       	ldi	r22, 0x00	; 0
    25ae:	70 e0       	ldi	r23, 0x00	; 0
    25b0:	48 1b       	sub	r20, r24
    25b2:	51 09       	sbc	r21, r1
    25b4:	61 09       	sbc	r22, r1
    25b6:	71 09       	sbc	r23, r1
    25b8:	46 87       	std	Z+14, r20	; 0x0e
    25ba:	57 87       	std	Z+15, r21	; 0x0f
    25bc:	60 8b       	std	Z+16, r22	; 0x10
    25be:	71 8b       	std	Z+17, r23	; 0x11
    25c0:	24 85       	ldd	r18, Z+12	; 0x0c
    25c2:	35 85       	ldd	r19, Z+13	; 0x0d
    25c4:	4b e0       	ldi	r20, 0x0B	; 11
    25c6:	94 9f       	mul	r25, r20
    25c8:	c0 01       	movw	r24, r0
    25ca:	11 24       	eor	r1, r1
    25cc:	83 5f       	subi	r24, 0xF3	; 243
    25ce:	9c 4e       	sbci	r25, 0xEC	; 236
    25d0:	28 17       	cp	r18, r24
    25d2:	39 07       	cpc	r19, r25
    25d4:	81 f5       	brne	.+96     	; 0x2636 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    25d6:	ef 01       	movw	r28, r30
    25d8:	8f 01       	movw	r16, r30
    25da:	0e 5f       	subi	r16, 0xFE	; 254
    25dc:	1f 4f       	sbci	r17, 0xFF	; 255
    25de:	c8 01       	movw	r24, r16
    25e0:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <uxListRemove>
    25e4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    25e6:	80 91 cb 12 	lds	r24, 0x12CB	; 0x8012cb <uxTopReadyPriority>
    25ea:	8e 17       	cp	r24, r30
    25ec:	10 f4       	brcc	.+4      	; 0x25f2 <vTaskPriorityDisinheritAfterTimeout+0x80>
    25ee:	e0 93 cb 12 	sts	0x12CB, r30	; 0x8012cb <uxTopReadyPriority>
    25f2:	8b e0       	ldi	r24, 0x0B	; 11
    25f4:	8e 9f       	mul	r24, r30
    25f6:	f0 01       	movw	r30, r0
    25f8:	11 24       	eor	r1, r1
    25fa:	e3 5f       	subi	r30, 0xF3	; 243
    25fc:	fc 4e       	sbci	r31, 0xEC	; 236
    25fe:	01 80       	ldd	r0, Z+1	; 0x01
    2600:	f2 81       	ldd	r31, Z+2	; 0x02
    2602:	e0 2d       	mov	r30, r0
    2604:	ff 83       	std	Y+7, r31	; 0x07
    2606:	ee 83       	std	Y+6, r30	; 0x06
    2608:	26 81       	ldd	r18, Z+6	; 0x06
    260a:	37 81       	ldd	r19, Z+7	; 0x07
    260c:	39 87       	std	Y+9, r19	; 0x09
    260e:	28 87       	std	Y+8, r18	; 0x08
    2610:	a6 81       	ldd	r26, Z+6	; 0x06
    2612:	b7 81       	ldd	r27, Z+7	; 0x07
    2614:	15 96       	adiw	r26, 0x05	; 5
    2616:	1c 93       	st	X, r17
    2618:	0e 93       	st	-X, r16
    261a:	14 97       	sbiw	r26, 0x04	; 4
    261c:	17 83       	std	Z+7, r17	; 0x07
    261e:	06 83       	std	Z+6, r16	; 0x06
    2620:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2622:	8e 9f       	mul	r24, r30
    2624:	f0 01       	movw	r30, r0
    2626:	11 24       	eor	r1, r1
    2628:	e3 5f       	subi	r30, 0xF3	; 243
    262a:	fc 4e       	sbci	r31, 0xEC	; 236
    262c:	fd 87       	std	Y+13, r31	; 0x0d
    262e:	ec 87       	std	Y+12, r30	; 0x0c
    2630:	80 81       	ld	r24, Z
    2632:	8f 5f       	subi	r24, 0xFF	; 255
    2634:	80 83       	st	Z, r24
    2636:	df 91       	pop	r29
    2638:	cf 91       	pop	r28
    263a:	1f 91       	pop	r17
    263c:	0f 91       	pop	r16
    263e:	08 95       	ret

00002640 <pvTaskIncrementMutexHeldCount>:
    2640:	80 91 7b 13 	lds	r24, 0x137B	; 0x80137b <pxCurrentTCB>
    2644:	90 91 7c 13 	lds	r25, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    2648:	89 2b       	or	r24, r25
    264a:	39 f0       	breq	.+14     	; 0x265a <pvTaskIncrementMutexHeldCount+0x1a>
    264c:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    2650:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    2654:	86 a5       	ldd	r24, Z+46	; 0x2e
    2656:	8f 5f       	subi	r24, 0xFF	; 255
    2658:	86 a7       	std	Z+46, r24	; 0x2e
    265a:	80 91 7b 13 	lds	r24, 0x137B	; 0x80137b <pxCurrentTCB>
    265e:	90 91 7c 13 	lds	r25, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    2662:	08 95       	ret

00002664 <xTaskGenericNotifyWait>:
    2664:	4f 92       	push	r4
    2666:	5f 92       	push	r5
    2668:	6f 92       	push	r6
    266a:	7f 92       	push	r7
    266c:	af 92       	push	r10
    266e:	bf 92       	push	r11
    2670:	cf 92       	push	r12
    2672:	df 92       	push	r13
    2674:	ef 92       	push	r14
    2676:	ff 92       	push	r15
    2678:	0f 93       	push	r16
    267a:	1f 93       	push	r17
    267c:	cf 93       	push	r28
    267e:	df 93       	push	r29
    2680:	28 01       	movw	r4, r16
    2682:	39 01       	movw	r6, r18
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	0f 92       	push	r0
    268a:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    268e:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    2692:	c8 2f       	mov	r28, r24
    2694:	d0 e0       	ldi	r29, 0x00	; 0
    2696:	ec 0f       	add	r30, r28
    2698:	fd 1f       	adc	r31, r29
    269a:	83 a9       	ldd	r24, Z+51	; 0x33
    269c:	82 30       	cpi	r24, 0x02	; 2
    269e:	71 f1       	breq	.+92     	; 0x26fc <xTaskGenericNotifyWait+0x98>
    26a0:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    26a4:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    26a8:	ce 01       	movw	r24, r28
    26aa:	88 0f       	add	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	e8 0f       	add	r30, r24
    26b4:	f9 1f       	adc	r31, r25
    26b6:	87 a5       	ldd	r24, Z+47	; 0x2f
    26b8:	90 a9       	ldd	r25, Z+48	; 0x30
    26ba:	a1 a9       	ldd	r26, Z+49	; 0x31
    26bc:	b2 a9       	ldd	r27, Z+50	; 0x32
    26be:	40 95       	com	r20
    26c0:	50 95       	com	r21
    26c2:	60 95       	com	r22
    26c4:	70 95       	com	r23
    26c6:	48 23       	and	r20, r24
    26c8:	59 23       	and	r21, r25
    26ca:	6a 23       	and	r22, r26
    26cc:	7b 23       	and	r23, r27
    26ce:	47 a7       	std	Z+47, r20	; 0x2f
    26d0:	50 ab       	std	Z+48, r21	; 0x30
    26d2:	61 ab       	std	Z+49, r22	; 0x31
    26d4:	72 ab       	std	Z+50, r23	; 0x32
    26d6:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    26da:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    26de:	ec 0f       	add	r30, r28
    26e0:	fd 1f       	adc	r31, r29
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	83 ab       	std	Z+51, r24	; 0x33
    26e6:	a1 14       	cp	r10, r1
    26e8:	b1 04       	cpc	r11, r1
    26ea:	c1 04       	cpc	r12, r1
    26ec:	d1 04       	cpc	r13, r1
    26ee:	31 f0       	breq	.+12     	; 0x26fc <xTaskGenericNotifyWait+0x98>
    26f0:	41 e0       	ldi	r20, 0x01	; 1
    26f2:	c6 01       	movw	r24, r12
    26f4:	b5 01       	movw	r22, r10
    26f6:	ed d8       	rcall	.-3622   	; 0x18d2 <prvAddCurrentTaskToDelayedList>
    26f8:	0e 94 66 03 	call	0x6cc	; 0x6cc <vPortYield>
    26fc:	0f 90       	pop	r0
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	0f 92       	push	r0
    2706:	e1 14       	cp	r14, r1
    2708:	f1 04       	cpc	r15, r1
    270a:	a1 f0       	breq	.+40     	; 0x2734 <xTaskGenericNotifyWait+0xd0>
    270c:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    2710:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    2714:	ce 01       	movw	r24, r28
    2716:	88 0f       	add	r24, r24
    2718:	99 1f       	adc	r25, r25
    271a:	88 0f       	add	r24, r24
    271c:	99 1f       	adc	r25, r25
    271e:	e8 0f       	add	r30, r24
    2720:	f9 1f       	adc	r31, r25
    2722:	87 a5       	ldd	r24, Z+47	; 0x2f
    2724:	90 a9       	ldd	r25, Z+48	; 0x30
    2726:	a1 a9       	ldd	r26, Z+49	; 0x31
    2728:	b2 a9       	ldd	r27, Z+50	; 0x32
    272a:	f7 01       	movw	r30, r14
    272c:	80 83       	st	Z, r24
    272e:	91 83       	std	Z+1, r25	; 0x01
    2730:	a2 83       	std	Z+2, r26	; 0x02
    2732:	b3 83       	std	Z+3, r27	; 0x03
    2734:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    2738:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    273c:	ec 0f       	add	r30, r28
    273e:	fd 1f       	adc	r31, r29
    2740:	83 a9       	ldd	r24, Z+51	; 0x33
    2742:	82 30       	cpi	r24, 0x02	; 2
    2744:	e9 f4       	brne	.+58     	; 0x2780 <xTaskGenericNotifyWait+0x11c>
    2746:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    274a:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    274e:	ce 01       	movw	r24, r28
    2750:	88 0f       	add	r24, r24
    2752:	99 1f       	adc	r25, r25
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	e8 0f       	add	r30, r24
    275a:	f9 1f       	adc	r31, r25
    275c:	87 a5       	ldd	r24, Z+47	; 0x2f
    275e:	90 a9       	ldd	r25, Z+48	; 0x30
    2760:	a1 a9       	ldd	r26, Z+49	; 0x31
    2762:	b2 a9       	ldd	r27, Z+50	; 0x32
    2764:	40 94       	com	r4
    2766:	50 94       	com	r5
    2768:	60 94       	com	r6
    276a:	70 94       	com	r7
    276c:	48 22       	and	r4, r24
    276e:	59 22       	and	r5, r25
    2770:	6a 22       	and	r6, r26
    2772:	7b 22       	and	r7, r27
    2774:	47 a6       	std	Z+47, r4	; 0x2f
    2776:	50 aa       	std	Z+48, r5	; 0x30
    2778:	61 aa       	std	Z+49, r6	; 0x31
    277a:	72 aa       	std	Z+50, r7	; 0x32
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	01 c0       	rjmp	.+2      	; 0x2782 <xTaskGenericNotifyWait+0x11e>
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	20 91 7b 13 	lds	r18, 0x137B	; 0x80137b <pxCurrentTCB>
    2786:	30 91 7c 13 	lds	r19, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    278a:	c2 0f       	add	r28, r18
    278c:	d3 1f       	adc	r29, r19
    278e:	1b aa       	std	Y+51, r1	; 0x33
    2790:	0f 90       	pop	r0
    2792:	0f be       	out	0x3f, r0	; 63
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	1f 91       	pop	r17
    279a:	0f 91       	pop	r16
    279c:	ff 90       	pop	r15
    279e:	ef 90       	pop	r14
    27a0:	df 90       	pop	r13
    27a2:	cf 90       	pop	r12
    27a4:	bf 90       	pop	r11
    27a6:	af 90       	pop	r10
    27a8:	7f 90       	pop	r7
    27aa:	6f 90       	pop	r6
    27ac:	5f 90       	pop	r5
    27ae:	4f 90       	pop	r4
    27b0:	08 95       	ret

000027b2 <xTaskGenericNotify>:
    27b2:	8f 92       	push	r8
    27b4:	9f 92       	push	r9
    27b6:	af 92       	push	r10
    27b8:	bf 92       	push	r11
    27ba:	ef 92       	push	r14
    27bc:	ff 92       	push	r15
    27be:	0f 93       	push	r16
    27c0:	cf 93       	push	r28
    27c2:	df 93       	push	r29
    27c4:	dc 01       	movw	r26, r24
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	0f 92       	push	r0
    27cc:	e1 14       	cp	r14, r1
    27ce:	f1 04       	cpc	r15, r1
    27d0:	89 f0       	breq	.+34     	; 0x27f4 <xTaskGenericNotify+0x42>
    27d2:	e6 2f       	mov	r30, r22
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	ee 0f       	add	r30, r30
    27d8:	ff 1f       	adc	r31, r31
    27da:	ee 0f       	add	r30, r30
    27dc:	ff 1f       	adc	r31, r31
    27de:	e8 0f       	add	r30, r24
    27e0:	f9 1f       	adc	r31, r25
    27e2:	87 a4       	ldd	r8, Z+47	; 0x2f
    27e4:	90 a8       	ldd	r9, Z+48	; 0x30
    27e6:	a1 a8       	ldd	r10, Z+49	; 0x31
    27e8:	b2 a8       	ldd	r11, Z+50	; 0x32
    27ea:	f7 01       	movw	r30, r14
    27ec:	80 82       	st	Z, r8
    27ee:	91 82       	std	Z+1, r9	; 0x01
    27f0:	a2 82       	std	Z+2, r10	; 0x02
    27f2:	b3 82       	std	Z+3, r11	; 0x03
    27f4:	70 e0       	ldi	r23, 0x00	; 0
    27f6:	fd 01       	movw	r30, r26
    27f8:	e6 0f       	add	r30, r22
    27fa:	f7 1f       	adc	r31, r23
    27fc:	83 a9       	ldd	r24, Z+51	; 0x33
    27fe:	92 e0       	ldi	r25, 0x02	; 2
    2800:	93 ab       	std	Z+51, r25	; 0x33
    2802:	02 30       	cpi	r16, 0x02	; 2
    2804:	01 f1       	breq	.+64     	; 0x2846 <xTaskGenericNotify+0x94>
    2806:	18 f4       	brcc	.+6      	; 0x280e <xTaskGenericNotify+0x5c>
    2808:	01 30       	cpi	r16, 0x01	; 1
    280a:	31 f0       	breq	.+12     	; 0x2818 <xTaskGenericNotify+0x66>
    280c:	4d c0       	rjmp	.+154    	; 0x28a8 <xTaskGenericNotify+0xf6>
    280e:	03 30       	cpi	r16, 0x03	; 3
    2810:	79 f1       	breq	.+94     	; 0x2870 <xTaskGenericNotify+0xbe>
    2812:	04 30       	cpi	r16, 0x04	; 4
    2814:	d1 f1       	breq	.+116    	; 0x288a <xTaskGenericNotify+0xd8>
    2816:	48 c0       	rjmp	.+144    	; 0x28a8 <xTaskGenericNotify+0xf6>
    2818:	66 0f       	add	r22, r22
    281a:	77 1f       	adc	r23, r23
    281c:	66 0f       	add	r22, r22
    281e:	77 1f       	adc	r23, r23
    2820:	fd 01       	movw	r30, r26
    2822:	e6 0f       	add	r30, r22
    2824:	f7 1f       	adc	r31, r23
    2826:	87 a4       	ldd	r8, Z+47	; 0x2f
    2828:	90 a8       	ldd	r9, Z+48	; 0x30
    282a:	a1 a8       	ldd	r10, Z+49	; 0x31
    282c:	b2 a8       	ldd	r11, Z+50	; 0x32
    282e:	ba 01       	movw	r22, r20
    2830:	a9 01       	movw	r20, r18
    2832:	48 29       	or	r20, r8
    2834:	59 29       	or	r21, r9
    2836:	6a 29       	or	r22, r10
    2838:	7b 29       	or	r23, r11
    283a:	47 a7       	std	Z+47, r20	; 0x2f
    283c:	50 ab       	std	Z+48, r21	; 0x30
    283e:	61 ab       	std	Z+49, r22	; 0x31
    2840:	72 ab       	std	Z+50, r23	; 0x32
    2842:	01 e0       	ldi	r16, 0x01	; 1
    2844:	34 c0       	rjmp	.+104    	; 0x28ae <xTaskGenericNotify+0xfc>
    2846:	66 0f       	add	r22, r22
    2848:	77 1f       	adc	r23, r23
    284a:	66 0f       	add	r22, r22
    284c:	77 1f       	adc	r23, r23
    284e:	fd 01       	movw	r30, r26
    2850:	e6 0f       	add	r30, r22
    2852:	f7 1f       	adc	r31, r23
    2854:	47 a5       	ldd	r20, Z+47	; 0x2f
    2856:	50 a9       	ldd	r21, Z+48	; 0x30
    2858:	61 a9       	ldd	r22, Z+49	; 0x31
    285a:	72 a9       	ldd	r23, Z+50	; 0x32
    285c:	4f 5f       	subi	r20, 0xFF	; 255
    285e:	5f 4f       	sbci	r21, 0xFF	; 255
    2860:	6f 4f       	sbci	r22, 0xFF	; 255
    2862:	7f 4f       	sbci	r23, 0xFF	; 255
    2864:	47 a7       	std	Z+47, r20	; 0x2f
    2866:	50 ab       	std	Z+48, r21	; 0x30
    2868:	61 ab       	std	Z+49, r22	; 0x31
    286a:	72 ab       	std	Z+50, r23	; 0x32
    286c:	01 e0       	ldi	r16, 0x01	; 1
    286e:	1f c0       	rjmp	.+62     	; 0x28ae <xTaskGenericNotify+0xfc>
    2870:	66 0f       	add	r22, r22
    2872:	77 1f       	adc	r23, r23
    2874:	66 0f       	add	r22, r22
    2876:	77 1f       	adc	r23, r23
    2878:	fd 01       	movw	r30, r26
    287a:	e6 0f       	add	r30, r22
    287c:	f7 1f       	adc	r31, r23
    287e:	27 a7       	std	Z+47, r18	; 0x2f
    2880:	30 ab       	std	Z+48, r19	; 0x30
    2882:	41 ab       	std	Z+49, r20	; 0x31
    2884:	52 ab       	std	Z+50, r21	; 0x32
    2886:	01 e0       	ldi	r16, 0x01	; 1
    2888:	12 c0       	rjmp	.+36     	; 0x28ae <xTaskGenericNotify+0xfc>
    288a:	82 30       	cpi	r24, 0x02	; 2
    288c:	79 f0       	breq	.+30     	; 0x28ac <xTaskGenericNotify+0xfa>
    288e:	66 0f       	add	r22, r22
    2890:	77 1f       	adc	r23, r23
    2892:	66 0f       	add	r22, r22
    2894:	77 1f       	adc	r23, r23
    2896:	fd 01       	movw	r30, r26
    2898:	e6 0f       	add	r30, r22
    289a:	f7 1f       	adc	r31, r23
    289c:	27 a7       	std	Z+47, r18	; 0x2f
    289e:	30 ab       	std	Z+48, r19	; 0x30
    28a0:	41 ab       	std	Z+49, r20	; 0x31
    28a2:	52 ab       	std	Z+50, r21	; 0x32
    28a4:	01 e0       	ldi	r16, 0x01	; 1
    28a6:	03 c0       	rjmp	.+6      	; 0x28ae <xTaskGenericNotify+0xfc>
    28a8:	01 e0       	ldi	r16, 0x01	; 1
    28aa:	01 c0       	rjmp	.+2      	; 0x28ae <xTaskGenericNotify+0xfc>
    28ac:	00 e0       	ldi	r16, 0x00	; 0
    28ae:	81 30       	cpi	r24, 0x01	; 1
    28b0:	09 f0       	breq	.+2      	; 0x28b4 <xTaskGenericNotify+0x102>
    28b2:	69 c0       	rjmp	.+210    	; 0x2986 <xTaskGenericNotify+0x1d4>
    28b4:	1c 96       	adiw	r26, 0x0c	; 12
    28b6:	ed 91       	ld	r30, X+
    28b8:	fc 91       	ld	r31, X
    28ba:	1d 97       	sbiw	r26, 0x0d	; 13
    28bc:	16 96       	adiw	r26, 0x06	; 6
    28be:	cd 91       	ld	r28, X+
    28c0:	dc 91       	ld	r29, X
    28c2:	17 97       	sbiw	r26, 0x07	; 7
    28c4:	18 96       	adiw	r26, 0x08	; 8
    28c6:	8d 91       	ld	r24, X+
    28c8:	9c 91       	ld	r25, X
    28ca:	19 97       	sbiw	r26, 0x09	; 9
    28cc:	9f 83       	std	Y+7, r25	; 0x07
    28ce:	8e 83       	std	Y+6, r24	; 0x06
    28d0:	18 96       	adiw	r26, 0x08	; 8
    28d2:	cd 91       	ld	r28, X+
    28d4:	dc 91       	ld	r29, X
    28d6:	19 97       	sbiw	r26, 0x09	; 9
    28d8:	16 96       	adiw	r26, 0x06	; 6
    28da:	8d 91       	ld	r24, X+
    28dc:	9c 91       	ld	r25, X
    28de:	17 97       	sbiw	r26, 0x07	; 7
    28e0:	9d 83       	std	Y+5, r25	; 0x05
    28e2:	8c 83       	std	Y+4, r24	; 0x04
    28e4:	81 81       	ldd	r24, Z+1	; 0x01
    28e6:	92 81       	ldd	r25, Z+2	; 0x02
    28e8:	9d 01       	movw	r18, r26
    28ea:	2e 5f       	subi	r18, 0xFE	; 254
    28ec:	3f 4f       	sbci	r19, 0xFF	; 255
    28ee:	82 17       	cp	r24, r18
    28f0:	93 07       	cpc	r25, r19
    28f2:	31 f4       	brne	.+12     	; 0x2900 <xTaskGenericNotify+0x14e>
    28f4:	18 96       	adiw	r26, 0x08	; 8
    28f6:	8d 91       	ld	r24, X+
    28f8:	9c 91       	ld	r25, X
    28fa:	19 97       	sbiw	r26, 0x09	; 9
    28fc:	92 83       	std	Z+2, r25	; 0x02
    28fe:	81 83       	std	Z+1, r24	; 0x01
    2900:	1d 96       	adiw	r26, 0x0d	; 13
    2902:	1c 92       	st	X, r1
    2904:	1e 92       	st	-X, r1
    2906:	1c 97       	sbiw	r26, 0x0c	; 12
    2908:	80 81       	ld	r24, Z
    290a:	81 50       	subi	r24, 0x01	; 1
    290c:	80 83       	st	Z, r24
    290e:	5a 96       	adiw	r26, 0x1a	; 26
    2910:	ec 91       	ld	r30, X
    2912:	5a 97       	sbiw	r26, 0x1a	; 26
    2914:	80 91 cb 12 	lds	r24, 0x12CB	; 0x8012cb <uxTopReadyPriority>
    2918:	8e 17       	cp	r24, r30
    291a:	10 f4       	brcc	.+4      	; 0x2920 <xTaskGenericNotify+0x16e>
    291c:	e0 93 cb 12 	sts	0x12CB, r30	; 0x8012cb <uxTopReadyPriority>
    2920:	8b e0       	ldi	r24, 0x0B	; 11
    2922:	8e 9f       	mul	r24, r30
    2924:	f0 01       	movw	r30, r0
    2926:	11 24       	eor	r1, r1
    2928:	e3 5f       	subi	r30, 0xF3	; 243
    292a:	fc 4e       	sbci	r31, 0xEC	; 236
    292c:	01 80       	ldd	r0, Z+1	; 0x01
    292e:	f2 81       	ldd	r31, Z+2	; 0x02
    2930:	e0 2d       	mov	r30, r0
    2932:	17 96       	adiw	r26, 0x07	; 7
    2934:	fc 93       	st	X, r31
    2936:	ee 93       	st	-X, r30
    2938:	16 97       	sbiw	r26, 0x06	; 6
    293a:	46 81       	ldd	r20, Z+6	; 0x06
    293c:	57 81       	ldd	r21, Z+7	; 0x07
    293e:	19 96       	adiw	r26, 0x09	; 9
    2940:	5c 93       	st	X, r21
    2942:	4e 93       	st	-X, r20
    2944:	18 97       	sbiw	r26, 0x08	; 8
    2946:	c6 81       	ldd	r28, Z+6	; 0x06
    2948:	d7 81       	ldd	r29, Z+7	; 0x07
    294a:	3d 83       	std	Y+5, r19	; 0x05
    294c:	2c 83       	std	Y+4, r18	; 0x04
    294e:	37 83       	std	Z+7, r19	; 0x07
    2950:	26 83       	std	Z+6, r18	; 0x06
    2952:	5a 96       	adiw	r26, 0x1a	; 26
    2954:	ec 91       	ld	r30, X
    2956:	5a 97       	sbiw	r26, 0x1a	; 26
    2958:	8e 9f       	mul	r24, r30
    295a:	f0 01       	movw	r30, r0
    295c:	11 24       	eor	r1, r1
    295e:	e3 5f       	subi	r30, 0xF3	; 243
    2960:	fc 4e       	sbci	r31, 0xEC	; 236
    2962:	1d 96       	adiw	r26, 0x0d	; 13
    2964:	fc 93       	st	X, r31
    2966:	ee 93       	st	-X, r30
    2968:	1c 97       	sbiw	r26, 0x0c	; 12
    296a:	80 81       	ld	r24, Z
    296c:	8f 5f       	subi	r24, 0xFF	; 255
    296e:	80 83       	st	Z, r24
    2970:	5a 96       	adiw	r26, 0x1a	; 26
    2972:	9c 91       	ld	r25, X
    2974:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    2978:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    297c:	82 8d       	ldd	r24, Z+26	; 0x1a
    297e:	89 17       	cp	r24, r25
    2980:	10 f4       	brcc	.+4      	; 0x2986 <xTaskGenericNotify+0x1d4>
    2982:	0e 94 66 03 	call	0x6cc	; 0x6cc <vPortYield>
    2986:	0f 90       	pop	r0
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	80 2f       	mov	r24, r16
    298c:	df 91       	pop	r29
    298e:	cf 91       	pop	r28
    2990:	0f 91       	pop	r16
    2992:	ff 90       	pop	r15
    2994:	ef 90       	pop	r14
    2996:	bf 90       	pop	r11
    2998:	af 90       	pop	r10
    299a:	9f 90       	pop	r9
    299c:	8f 90       	pop	r8
    299e:	08 95       	ret

000029a0 <xTaskGenericNotifyFromISR>:
    29a0:	8f 92       	push	r8
    29a2:	9f 92       	push	r9
    29a4:	af 92       	push	r10
    29a6:	bf 92       	push	r11
    29a8:	cf 92       	push	r12
    29aa:	df 92       	push	r13
    29ac:	ef 92       	push	r14
    29ae:	ff 92       	push	r15
    29b0:	0f 93       	push	r16
    29b2:	cf 93       	push	r28
    29b4:	df 93       	push	r29
    29b6:	dc 01       	movw	r26, r24
    29b8:	e1 14       	cp	r14, r1
    29ba:	f1 04       	cpc	r15, r1
    29bc:	89 f0       	breq	.+34     	; 0x29e0 <xTaskGenericNotifyFromISR+0x40>
    29be:	e6 2f       	mov	r30, r22
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	ee 0f       	add	r30, r30
    29c4:	ff 1f       	adc	r31, r31
    29c6:	ee 0f       	add	r30, r30
    29c8:	ff 1f       	adc	r31, r31
    29ca:	e8 0f       	add	r30, r24
    29cc:	f9 1f       	adc	r31, r25
    29ce:	87 a4       	ldd	r8, Z+47	; 0x2f
    29d0:	90 a8       	ldd	r9, Z+48	; 0x30
    29d2:	a1 a8       	ldd	r10, Z+49	; 0x31
    29d4:	b2 a8       	ldd	r11, Z+50	; 0x32
    29d6:	f7 01       	movw	r30, r14
    29d8:	80 82       	st	Z, r8
    29da:	91 82       	std	Z+1, r9	; 0x01
    29dc:	a2 82       	std	Z+2, r10	; 0x02
    29de:	b3 82       	std	Z+3, r11	; 0x03
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	fd 01       	movw	r30, r26
    29e4:	e6 0f       	add	r30, r22
    29e6:	f7 1f       	adc	r31, r23
    29e8:	93 a9       	ldd	r25, Z+51	; 0x33
    29ea:	82 e0       	ldi	r24, 0x02	; 2
    29ec:	83 ab       	std	Z+51, r24	; 0x33
    29ee:	02 30       	cpi	r16, 0x02	; 2
    29f0:	01 f1       	breq	.+64     	; 0x2a32 <xTaskGenericNotifyFromISR+0x92>
    29f2:	18 f4       	brcc	.+6      	; 0x29fa <xTaskGenericNotifyFromISR+0x5a>
    29f4:	01 30       	cpi	r16, 0x01	; 1
    29f6:	31 f0       	breq	.+12     	; 0x2a04 <xTaskGenericNotifyFromISR+0x64>
    29f8:	4d c0       	rjmp	.+154    	; 0x2a94 <xTaskGenericNotifyFromISR+0xf4>
    29fa:	03 30       	cpi	r16, 0x03	; 3
    29fc:	79 f1       	breq	.+94     	; 0x2a5c <xTaskGenericNotifyFromISR+0xbc>
    29fe:	04 30       	cpi	r16, 0x04	; 4
    2a00:	d1 f1       	breq	.+116    	; 0x2a76 <xTaskGenericNotifyFromISR+0xd6>
    2a02:	48 c0       	rjmp	.+144    	; 0x2a94 <xTaskGenericNotifyFromISR+0xf4>
    2a04:	66 0f       	add	r22, r22
    2a06:	77 1f       	adc	r23, r23
    2a08:	66 0f       	add	r22, r22
    2a0a:	77 1f       	adc	r23, r23
    2a0c:	fd 01       	movw	r30, r26
    2a0e:	e6 0f       	add	r30, r22
    2a10:	f7 1f       	adc	r31, r23
    2a12:	87 a4       	ldd	r8, Z+47	; 0x2f
    2a14:	90 a8       	ldd	r9, Z+48	; 0x30
    2a16:	a1 a8       	ldd	r10, Z+49	; 0x31
    2a18:	b2 a8       	ldd	r11, Z+50	; 0x32
    2a1a:	ba 01       	movw	r22, r20
    2a1c:	a9 01       	movw	r20, r18
    2a1e:	48 29       	or	r20, r8
    2a20:	59 29       	or	r21, r9
    2a22:	6a 29       	or	r22, r10
    2a24:	7b 29       	or	r23, r11
    2a26:	47 a7       	std	Z+47, r20	; 0x2f
    2a28:	50 ab       	std	Z+48, r21	; 0x30
    2a2a:	61 ab       	std	Z+49, r22	; 0x31
    2a2c:	72 ab       	std	Z+50, r23	; 0x32
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	34 c0       	rjmp	.+104    	; 0x2a9a <xTaskGenericNotifyFromISR+0xfa>
    2a32:	66 0f       	add	r22, r22
    2a34:	77 1f       	adc	r23, r23
    2a36:	66 0f       	add	r22, r22
    2a38:	77 1f       	adc	r23, r23
    2a3a:	fd 01       	movw	r30, r26
    2a3c:	e6 0f       	add	r30, r22
    2a3e:	f7 1f       	adc	r31, r23
    2a40:	47 a5       	ldd	r20, Z+47	; 0x2f
    2a42:	50 a9       	ldd	r21, Z+48	; 0x30
    2a44:	61 a9       	ldd	r22, Z+49	; 0x31
    2a46:	72 a9       	ldd	r23, Z+50	; 0x32
    2a48:	4f 5f       	subi	r20, 0xFF	; 255
    2a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a4c:	6f 4f       	sbci	r22, 0xFF	; 255
    2a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a50:	47 a7       	std	Z+47, r20	; 0x2f
    2a52:	50 ab       	std	Z+48, r21	; 0x30
    2a54:	61 ab       	std	Z+49, r22	; 0x31
    2a56:	72 ab       	std	Z+50, r23	; 0x32
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	1f c0       	rjmp	.+62     	; 0x2a9a <xTaskGenericNotifyFromISR+0xfa>
    2a5c:	66 0f       	add	r22, r22
    2a5e:	77 1f       	adc	r23, r23
    2a60:	66 0f       	add	r22, r22
    2a62:	77 1f       	adc	r23, r23
    2a64:	fd 01       	movw	r30, r26
    2a66:	e6 0f       	add	r30, r22
    2a68:	f7 1f       	adc	r31, r23
    2a6a:	27 a7       	std	Z+47, r18	; 0x2f
    2a6c:	30 ab       	std	Z+48, r19	; 0x30
    2a6e:	41 ab       	std	Z+49, r20	; 0x31
    2a70:	52 ab       	std	Z+50, r21	; 0x32
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	12 c0       	rjmp	.+36     	; 0x2a9a <xTaskGenericNotifyFromISR+0xfa>
    2a76:	92 30       	cpi	r25, 0x02	; 2
    2a78:	79 f0       	breq	.+30     	; 0x2a98 <xTaskGenericNotifyFromISR+0xf8>
    2a7a:	66 0f       	add	r22, r22
    2a7c:	77 1f       	adc	r23, r23
    2a7e:	66 0f       	add	r22, r22
    2a80:	77 1f       	adc	r23, r23
    2a82:	fd 01       	movw	r30, r26
    2a84:	e6 0f       	add	r30, r22
    2a86:	f7 1f       	adc	r31, r23
    2a88:	27 a7       	std	Z+47, r18	; 0x2f
    2a8a:	30 ab       	std	Z+48, r19	; 0x30
    2a8c:	41 ab       	std	Z+49, r20	; 0x31
    2a8e:	52 ab       	std	Z+50, r21	; 0x32
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	03 c0       	rjmp	.+6      	; 0x2a9a <xTaskGenericNotifyFromISR+0xfa>
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	01 c0       	rjmp	.+2      	; 0x2a9a <xTaskGenericNotifyFromISR+0xfa>
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	91 30       	cpi	r25, 0x01	; 1
    2a9c:	09 f0       	breq	.+2      	; 0x2aa0 <xTaskGenericNotifyFromISR+0x100>
    2a9e:	96 c0       	rjmp	.+300    	; 0x2bcc <xTaskGenericNotifyFromISR+0x22c>
    2aa0:	90 91 bc 12 	lds	r25, 0x12BC	; 0x8012bc <uxSchedulerSuspended>
    2aa4:	91 11       	cpse	r25, r1
    2aa6:	5f c0       	rjmp	.+190    	; 0x2b66 <xTaskGenericNotifyFromISR+0x1c6>
    2aa8:	1c 96       	adiw	r26, 0x0c	; 12
    2aaa:	ed 91       	ld	r30, X+
    2aac:	fc 91       	ld	r31, X
    2aae:	1d 97       	sbiw	r26, 0x0d	; 13
    2ab0:	16 96       	adiw	r26, 0x06	; 6
    2ab2:	cd 91       	ld	r28, X+
    2ab4:	dc 91       	ld	r29, X
    2ab6:	17 97       	sbiw	r26, 0x07	; 7
    2ab8:	18 96       	adiw	r26, 0x08	; 8
    2aba:	2d 91       	ld	r18, X+
    2abc:	3c 91       	ld	r19, X
    2abe:	19 97       	sbiw	r26, 0x09	; 9
    2ac0:	3f 83       	std	Y+7, r19	; 0x07
    2ac2:	2e 83       	std	Y+6, r18	; 0x06
    2ac4:	18 96       	adiw	r26, 0x08	; 8
    2ac6:	cd 91       	ld	r28, X+
    2ac8:	dc 91       	ld	r29, X
    2aca:	19 97       	sbiw	r26, 0x09	; 9
    2acc:	16 96       	adiw	r26, 0x06	; 6
    2ace:	2d 91       	ld	r18, X+
    2ad0:	3c 91       	ld	r19, X
    2ad2:	17 97       	sbiw	r26, 0x07	; 7
    2ad4:	3d 83       	std	Y+5, r19	; 0x05
    2ad6:	2c 83       	std	Y+4, r18	; 0x04
    2ad8:	41 81       	ldd	r20, Z+1	; 0x01
    2ada:	52 81       	ldd	r21, Z+2	; 0x02
    2adc:	9d 01       	movw	r18, r26
    2ade:	2e 5f       	subi	r18, 0xFE	; 254
    2ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae2:	42 17       	cp	r20, r18
    2ae4:	53 07       	cpc	r21, r19
    2ae6:	31 f4       	brne	.+12     	; 0x2af4 <xTaskGenericNotifyFromISR+0x154>
    2ae8:	18 96       	adiw	r26, 0x08	; 8
    2aea:	4d 91       	ld	r20, X+
    2aec:	5c 91       	ld	r21, X
    2aee:	19 97       	sbiw	r26, 0x09	; 9
    2af0:	52 83       	std	Z+2, r21	; 0x02
    2af2:	41 83       	std	Z+1, r20	; 0x01
    2af4:	1d 96       	adiw	r26, 0x0d	; 13
    2af6:	1c 92       	st	X, r1
    2af8:	1e 92       	st	-X, r1
    2afa:	1c 97       	sbiw	r26, 0x0c	; 12
    2afc:	90 81       	ld	r25, Z
    2afe:	91 50       	subi	r25, 0x01	; 1
    2b00:	90 83       	st	Z, r25
    2b02:	5a 96       	adiw	r26, 0x1a	; 26
    2b04:	ec 91       	ld	r30, X
    2b06:	5a 97       	sbiw	r26, 0x1a	; 26
    2b08:	90 91 cb 12 	lds	r25, 0x12CB	; 0x8012cb <uxTopReadyPriority>
    2b0c:	9e 17       	cp	r25, r30
    2b0e:	10 f4       	brcc	.+4      	; 0x2b14 <xTaskGenericNotifyFromISR+0x174>
    2b10:	e0 93 cb 12 	sts	0x12CB, r30	; 0x8012cb <uxTopReadyPriority>
    2b14:	9b e0       	ldi	r25, 0x0B	; 11
    2b16:	9e 9f       	mul	r25, r30
    2b18:	f0 01       	movw	r30, r0
    2b1a:	11 24       	eor	r1, r1
    2b1c:	e3 5f       	subi	r30, 0xF3	; 243
    2b1e:	fc 4e       	sbci	r31, 0xEC	; 236
    2b20:	01 80       	ldd	r0, Z+1	; 0x01
    2b22:	f2 81       	ldd	r31, Z+2	; 0x02
    2b24:	e0 2d       	mov	r30, r0
    2b26:	17 96       	adiw	r26, 0x07	; 7
    2b28:	fc 93       	st	X, r31
    2b2a:	ee 93       	st	-X, r30
    2b2c:	16 97       	sbiw	r26, 0x06	; 6
    2b2e:	46 81       	ldd	r20, Z+6	; 0x06
    2b30:	57 81       	ldd	r21, Z+7	; 0x07
    2b32:	19 96       	adiw	r26, 0x09	; 9
    2b34:	5c 93       	st	X, r21
    2b36:	4e 93       	st	-X, r20
    2b38:	18 97       	sbiw	r26, 0x08	; 8
    2b3a:	c6 81       	ldd	r28, Z+6	; 0x06
    2b3c:	d7 81       	ldd	r29, Z+7	; 0x07
    2b3e:	3d 83       	std	Y+5, r19	; 0x05
    2b40:	2c 83       	std	Y+4, r18	; 0x04
    2b42:	37 83       	std	Z+7, r19	; 0x07
    2b44:	26 83       	std	Z+6, r18	; 0x06
    2b46:	5a 96       	adiw	r26, 0x1a	; 26
    2b48:	ec 91       	ld	r30, X
    2b4a:	5a 97       	sbiw	r26, 0x1a	; 26
    2b4c:	9e 9f       	mul	r25, r30
    2b4e:	f0 01       	movw	r30, r0
    2b50:	11 24       	eor	r1, r1
    2b52:	e3 5f       	subi	r30, 0xF3	; 243
    2b54:	fc 4e       	sbci	r31, 0xEC	; 236
    2b56:	1d 96       	adiw	r26, 0x0d	; 13
    2b58:	fc 93       	st	X, r31
    2b5a:	ee 93       	st	-X, r30
    2b5c:	1c 97       	sbiw	r26, 0x0c	; 12
    2b5e:	90 81       	ld	r25, Z
    2b60:	9f 5f       	subi	r25, 0xFF	; 255
    2b62:	90 83       	st	Z, r25
    2b64:	21 c0       	rjmp	.+66     	; 0x2ba8 <xTaskGenericNotifyFromISR+0x208>
    2b66:	68 ee       	ldi	r22, 0xE8	; 232
    2b68:	72 e1       	ldi	r23, 0x12	; 18
    2b6a:	fb 01       	movw	r30, r22
    2b6c:	c1 81       	ldd	r28, Z+1	; 0x01
    2b6e:	d2 81       	ldd	r29, Z+2	; 0x02
    2b70:	53 96       	adiw	r26, 0x13	; 19
    2b72:	dc 93       	st	X, r29
    2b74:	ce 93       	st	-X, r28
    2b76:	52 97       	sbiw	r26, 0x12	; 18
    2b78:	2e 81       	ldd	r18, Y+6	; 0x06
    2b7a:	3f 81       	ldd	r19, Y+7	; 0x07
    2b7c:	55 96       	adiw	r26, 0x15	; 21
    2b7e:	3c 93       	st	X, r19
    2b80:	2e 93       	st	-X, r18
    2b82:	54 97       	sbiw	r26, 0x14	; 20
    2b84:	4e 81       	ldd	r20, Y+6	; 0x06
    2b86:	5f 81       	ldd	r21, Y+7	; 0x07
    2b88:	9d 01       	movw	r18, r26
    2b8a:	22 5f       	subi	r18, 0xF2	; 242
    2b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8e:	fa 01       	movw	r30, r20
    2b90:	35 83       	std	Z+5, r19	; 0x05
    2b92:	24 83       	std	Z+4, r18	; 0x04
    2b94:	3f 83       	std	Y+7, r19	; 0x07
    2b96:	2e 83       	std	Y+6, r18	; 0x06
    2b98:	59 96       	adiw	r26, 0x19	; 25
    2b9a:	7c 93       	st	X, r23
    2b9c:	6e 93       	st	-X, r22
    2b9e:	58 97       	sbiw	r26, 0x18	; 24
    2ba0:	fb 01       	movw	r30, r22
    2ba2:	90 81       	ld	r25, Z
    2ba4:	9f 5f       	subi	r25, 0xFF	; 255
    2ba6:	90 83       	st	Z, r25
    2ba8:	5a 96       	adiw	r26, 0x1a	; 26
    2baa:	2c 91       	ld	r18, X
    2bac:	e0 91 7b 13 	lds	r30, 0x137B	; 0x80137b <pxCurrentTCB>
    2bb0:	f0 91 7c 13 	lds	r31, 0x137C	; 0x80137c <pxCurrentTCB+0x1>
    2bb4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2bb6:	92 17       	cp	r25, r18
    2bb8:	48 f4       	brcc	.+18     	; 0x2bcc <xTaskGenericNotifyFromISR+0x22c>
    2bba:	c1 14       	cp	r12, r1
    2bbc:	d1 04       	cpc	r13, r1
    2bbe:	19 f0       	breq	.+6      	; 0x2bc6 <xTaskGenericNotifyFromISR+0x226>
    2bc0:	91 e0       	ldi	r25, 0x01	; 1
    2bc2:	f6 01       	movw	r30, r12
    2bc4:	90 83       	st	Z, r25
    2bc6:	91 e0       	ldi	r25, 0x01	; 1
    2bc8:	90 93 c5 12 	sts	0x12C5, r25	; 0x8012c5 <xYieldPending>
    2bcc:	df 91       	pop	r29
    2bce:	cf 91       	pop	r28
    2bd0:	0f 91       	pop	r16
    2bd2:	ff 90       	pop	r15
    2bd4:	ef 90       	pop	r14
    2bd6:	df 90       	pop	r13
    2bd8:	cf 90       	pop	r12
    2bda:	bf 90       	pop	r11
    2bdc:	af 90       	pop	r10
    2bde:	9f 90       	pop	r9
    2be0:	8f 90       	pop	r8
    2be2:	08 95       	ret

00002be4 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2be4:	00 97       	sbiw	r24, 0x00	; 0
    2be6:	21 f4       	brne	.+8      	; 0x2bf0 <xTaskGenericNotifyStateClear+0xc>
    2be8:	80 91 7b 13 	lds	r24, 0x137B	; 0x80137b <pxCurrentTCB>
    2bec:	90 91 7c 13 	lds	r25, 0x137C	; 0x80137c <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	f8 94       	cli
    2bf4:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	e6 0f       	add	r30, r22
    2bfc:	f7 1f       	adc	r31, r23
    2bfe:	23 a9       	ldd	r18, Z+51	; 0x33
    2c00:	22 30       	cpi	r18, 0x02	; 2
    2c02:	31 f4       	brne	.+12     	; 0x2c10 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2c04:	fc 01       	movw	r30, r24
    2c06:	e6 0f       	add	r30, r22
    2c08:	f7 1f       	adc	r31, r23
    2c0a:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	01 c0       	rjmp	.+2      	; 0x2c12 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2c10:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2c12:	0f 90       	pop	r0
    2c14:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2c16:	08 95       	ret

00002c18 <prvGetNextExpireTime>:
    2c18:	dc 01       	movw	r26, r24
    2c1a:	e0 91 87 13 	lds	r30, 0x1387	; 0x801387 <pxCurrentTimerList>
    2c1e:	f0 91 88 13 	lds	r31, 0x1388	; 0x801388 <pxCurrentTimerList+0x1>
    2c22:	80 81       	ld	r24, Z
    2c24:	91 e0       	ldi	r25, 0x01	; 1
    2c26:	81 11       	cpse	r24, r1
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	9c 93       	st	X, r25
    2c2c:	91 11       	cpse	r25, r1
    2c2e:	08 c0       	rjmp	.+16     	; 0x2c40 <prvGetNextExpireTime+0x28>
    2c30:	07 80       	ldd	r0, Z+7	; 0x07
    2c32:	f0 85       	ldd	r31, Z+8	; 0x08
    2c34:	e0 2d       	mov	r30, r0
    2c36:	60 81       	ld	r22, Z
    2c38:	71 81       	ldd	r23, Z+1	; 0x01
    2c3a:	82 81       	ldd	r24, Z+2	; 0x02
    2c3c:	93 81       	ldd	r25, Z+3	; 0x03
    2c3e:	08 95       	ret
    2c40:	60 e0       	ldi	r22, 0x00	; 0
    2c42:	70 e0       	ldi	r23, 0x00	; 0
    2c44:	cb 01       	movw	r24, r22
    2c46:	08 95       	ret

00002c48 <prvInsertTimerInActiveList>:
    2c48:	cf 92       	push	r12
    2c4a:	df 92       	push	r13
    2c4c:	ef 92       	push	r14
    2c4e:	ff 92       	push	r15
    2c50:	0f 93       	push	r16
    2c52:	1f 93       	push	r17
    2c54:	fc 01       	movw	r30, r24
    2c56:	42 83       	std	Z+2, r20	; 0x02
    2c58:	53 83       	std	Z+3, r21	; 0x03
    2c5a:	64 83       	std	Z+4, r22	; 0x04
    2c5c:	75 83       	std	Z+5, r23	; 0x05
    2c5e:	93 87       	std	Z+11, r25	; 0x0b
    2c60:	82 87       	std	Z+10, r24	; 0x0a
    2c62:	04 17       	cp	r16, r20
    2c64:	15 07       	cpc	r17, r21
    2c66:	26 07       	cpc	r18, r22
    2c68:	37 07       	cpc	r19, r23
    2c6a:	c0 f0       	brcs	.+48     	; 0x2c9c <prvInsertTimerInActiveList+0x54>
    2c6c:	0c 19       	sub	r16, r12
    2c6e:	1d 09       	sbc	r17, r13
    2c70:	2e 09       	sbc	r18, r14
    2c72:	3f 09       	sbc	r19, r15
    2c74:	86 85       	ldd	r24, Z+14	; 0x0e
    2c76:	97 85       	ldd	r25, Z+15	; 0x0f
    2c78:	a0 89       	ldd	r26, Z+16	; 0x10
    2c7a:	b1 89       	ldd	r27, Z+17	; 0x11
    2c7c:	08 17       	cp	r16, r24
    2c7e:	19 07       	cpc	r17, r25
    2c80:	2a 07       	cpc	r18, r26
    2c82:	3b 07       	cpc	r19, r27
    2c84:	00 f5       	brcc	.+64     	; 0x2cc6 <prvInsertTimerInActiveList+0x7e>
    2c86:	bf 01       	movw	r22, r30
    2c88:	6e 5f       	subi	r22, 0xFE	; 254
    2c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8c:	80 91 85 13 	lds	r24, 0x1385	; 0x801385 <pxOverflowTimerList>
    2c90:	90 91 86 13 	lds	r25, 0x1386	; 0x801386 <pxOverflowTimerList+0x1>
    2c94:	0e 94 ad 02 	call	0x55a	; 0x55a <vListInsert>
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	18 c0       	rjmp	.+48     	; 0x2ccc <prvInsertTimerInActiveList+0x84>
    2c9c:	0c 15       	cp	r16, r12
    2c9e:	1d 05       	cpc	r17, r13
    2ca0:	2e 05       	cpc	r18, r14
    2ca2:	3f 05       	cpc	r19, r15
    2ca4:	28 f4       	brcc	.+10     	; 0x2cb0 <prvInsertTimerInActiveList+0x68>
    2ca6:	4c 15       	cp	r20, r12
    2ca8:	5d 05       	cpc	r21, r13
    2caa:	6e 05       	cpc	r22, r14
    2cac:	7f 05       	cpc	r23, r15
    2cae:	68 f4       	brcc	.+26     	; 0x2cca <prvInsertTimerInActiveList+0x82>
    2cb0:	bf 01       	movw	r22, r30
    2cb2:	6e 5f       	subi	r22, 0xFE	; 254
    2cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb6:	80 91 87 13 	lds	r24, 0x1387	; 0x801387 <pxCurrentTimerList>
    2cba:	90 91 88 13 	lds	r25, 0x1388	; 0x801388 <pxCurrentTimerList+0x1>
    2cbe:	0e 94 ad 02 	call	0x55a	; 0x55a <vListInsert>
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	03 c0       	rjmp	.+6      	; 0x2ccc <prvInsertTimerInActiveList+0x84>
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	01 c0       	rjmp	.+2      	; 0x2ccc <prvInsertTimerInActiveList+0x84>
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	1f 91       	pop	r17
    2cce:	0f 91       	pop	r16
    2cd0:	ff 90       	pop	r15
    2cd2:	ef 90       	pop	r14
    2cd4:	df 90       	pop	r13
    2cd6:	cf 90       	pop	r12
    2cd8:	08 95       	ret

00002cda <prvCheckForValidListAndQueue>:
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	0f 92       	push	r0
    2ce0:	80 91 83 13 	lds	r24, 0x1383	; 0x801383 <xTimerQueue>
    2ce4:	90 91 84 13 	lds	r25, 0x1384	; 0x801384 <xTimerQueue+0x1>
    2ce8:	89 2b       	or	r24, r25
    2cea:	e9 f4       	brne	.+58     	; 0x2d26 <prvCheckForValidListAndQueue+0x4c>
    2cec:	84 e9       	ldi	r24, 0x94	; 148
    2cee:	93 e1       	ldi	r25, 0x13	; 19
    2cf0:	0e 94 98 02 	call	0x530	; 0x530 <vListInitialise>
    2cf4:	89 e8       	ldi	r24, 0x89	; 137
    2cf6:	93 e1       	ldi	r25, 0x13	; 19
    2cf8:	0e 94 98 02 	call	0x530	; 0x530 <vListInitialise>
    2cfc:	84 e9       	ldi	r24, 0x94	; 148
    2cfe:	93 e1       	ldi	r25, 0x13	; 19
    2d00:	90 93 88 13 	sts	0x1388, r25	; 0x801388 <pxCurrentTimerList+0x1>
    2d04:	80 93 87 13 	sts	0x1387, r24	; 0x801387 <pxCurrentTimerList>
    2d08:	89 e8       	ldi	r24, 0x89	; 137
    2d0a:	93 e1       	ldi	r25, 0x13	; 19
    2d0c:	90 93 86 13 	sts	0x1386, r25	; 0x801386 <pxOverflowTimerList+0x1>
    2d10:	80 93 85 13 	sts	0x1385, r24	; 0x801385 <pxOverflowTimerList>
    2d14:	40 e0       	ldi	r20, 0x00	; 0
    2d16:	67 e0       	ldi	r22, 0x07	; 7
    2d18:	8a e0       	ldi	r24, 0x0A	; 10
    2d1a:	0e 94 5b 05 	call	0xab6	; 0xab6 <xQueueGenericCreate>
    2d1e:	90 93 84 13 	sts	0x1384, r25	; 0x801384 <xTimerQueue+0x1>
    2d22:	80 93 83 13 	sts	0x1383, r24	; 0x801383 <xTimerQueue>
    2d26:	0f 90       	pop	r0
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	08 95       	ret

00002d2c <xTimerCreateTimerTask>:
    2d2c:	ef 92       	push	r14
    2d2e:	ff 92       	push	r15
    2d30:	0f 93       	push	r16
    2d32:	d3 df       	rcall	.-90     	; 0x2cda <prvCheckForValidListAndQueue>
    2d34:	80 91 83 13 	lds	r24, 0x1383	; 0x801383 <xTimerQueue>
    2d38:	90 91 84 13 	lds	r25, 0x1384	; 0x801384 <xTimerQueue+0x1>
    2d3c:	89 2b       	or	r24, r25
    2d3e:	91 f0       	breq	.+36     	; 0x2d64 <xTimerCreateTimerTask+0x38>
    2d40:	0f 2e       	mov	r0, r31
    2d42:	f1 e8       	ldi	r31, 0x81	; 129
    2d44:	ef 2e       	mov	r14, r31
    2d46:	f3 e1       	ldi	r31, 0x13	; 19
    2d48:	ff 2e       	mov	r15, r31
    2d4a:	f0 2d       	mov	r31, r0
    2d4c:	03 e0       	ldi	r16, 0x03	; 3
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 ec       	ldi	r20, 0xC0	; 192
    2d54:	50 e0       	ldi	r21, 0x00	; 0
    2d56:	6c e8       	ldi	r22, 0x8C	; 140
    2d58:	72 e0       	ldi	r23, 0x02	; 2
    2d5a:	87 ed       	ldi	r24, 0xD7	; 215
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <xTaskCreate>
    2d62:	01 c0       	rjmp	.+2      	; 0x2d66 <xTimerCreateTimerTask+0x3a>
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	0f 91       	pop	r16
    2d68:	ff 90       	pop	r15
    2d6a:	ef 90       	pop	r14
    2d6c:	08 95       	ret

00002d6e <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2d6e:	8f 92       	push	r8
    2d70:	9f 92       	push	r9
    2d72:	af 92       	push	r10
    2d74:	bf 92       	push	r11
    2d76:	cf 92       	push	r12
    2d78:	df 92       	push	r13
    2d7a:	ef 92       	push	r14
    2d7c:	ff 92       	push	r15
    2d7e:	0f 93       	push	r16
    2d80:	1f 93       	push	r17
    2d82:	cf 93       	push	r28
    2d84:	df 93       	push	r29
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	27 97       	sbiw	r28, 0x07	; 7
    2d8c:	0f b6       	in	r0, 0x3f	; 63
    2d8e:	f8 94       	cli
    2d90:	de bf       	out	0x3e, r29	; 62
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2d96:	e0 91 83 13 	lds	r30, 0x1383	; 0x801383 <xTimerQueue>
    2d9a:	f0 91 84 13 	lds	r31, 0x1384	; 0x801384 <xTimerQueue+0x1>
    2d9e:	30 97       	sbiw	r30, 0x00	; 0
    2da0:	81 f1       	breq	.+96     	; 0x2e02 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2da2:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2da4:	2a 83       	std	Y+2, r18	; 0x02
    2da6:	3b 83       	std	Y+3, r19	; 0x03
    2da8:	4c 83       	std	Y+4, r20	; 0x04
    2daa:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2dac:	9f 83       	std	Y+7, r25	; 0x07
    2dae:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2db0:	66 30       	cpi	r22, 0x06	; 6
    2db2:	f4 f4       	brge	.+60     	; 0x2df0 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2db4:	ee da       	rcall	.-2596   	; 0x2392 <xTaskGetSchedulerState>
    2db6:	82 30       	cpi	r24, 0x02	; 2
    2db8:	69 f4       	brne	.+26     	; 0x2dd4 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2dba:	00 e0       	ldi	r16, 0x00	; 0
    2dbc:	a7 01       	movw	r20, r14
    2dbe:	96 01       	movw	r18, r12
    2dc0:	be 01       	movw	r22, r28
    2dc2:	6f 5f       	subi	r22, 0xFF	; 255
    2dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc6:	80 91 83 13 	lds	r24, 0x1383	; 0x801383 <xTimerQueue>
    2dca:	90 91 84 13 	lds	r25, 0x1384	; 0x801384 <xTimerQueue+0x1>
    2dce:	0e 94 7e 05 	call	0xafc	; 0xafc <xQueueGenericSend>
    2dd2:	18 c0       	rjmp	.+48     	; 0x2e04 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2dd4:	00 e0       	ldi	r16, 0x00	; 0
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	a9 01       	movw	r20, r18
    2ddc:	be 01       	movw	r22, r28
    2dde:	6f 5f       	subi	r22, 0xFF	; 255
    2de0:	7f 4f       	sbci	r23, 0xFF	; 255
    2de2:	80 91 83 13 	lds	r24, 0x1383	; 0x801383 <xTimerQueue>
    2de6:	90 91 84 13 	lds	r25, 0x1384	; 0x801384 <xTimerQueue+0x1>
    2dea:	0e 94 7e 05 	call	0xafc	; 0xafc <xQueueGenericSend>
    2dee:	0a c0       	rjmp	.+20     	; 0x2e04 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	a8 01       	movw	r20, r16
    2df4:	be 01       	movw	r22, r28
    2df6:	6f 5f       	subi	r22, 0xFF	; 255
    2df8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfa:	cf 01       	movw	r24, r30
    2dfc:	0e 94 2e 06 	call	0xc5c	; 0xc5c <xQueueGenericSendFromISR>
    2e00:	01 c0       	rjmp	.+2      	; 0x2e04 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2e02:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2e04:	27 96       	adiw	r28, 0x07	; 7
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	f8 94       	cli
    2e0a:	de bf       	out	0x3e, r29	; 62
    2e0c:	0f be       	out	0x3f, r0	; 63
    2e0e:	cd bf       	out	0x3d, r28	; 61
    2e10:	df 91       	pop	r29
    2e12:	cf 91       	pop	r28
    2e14:	1f 91       	pop	r17
    2e16:	0f 91       	pop	r16
    2e18:	ff 90       	pop	r15
    2e1a:	ef 90       	pop	r14
    2e1c:	df 90       	pop	r13
    2e1e:	cf 90       	pop	r12
    2e20:	bf 90       	pop	r11
    2e22:	af 90       	pop	r10
    2e24:	9f 90       	pop	r9
    2e26:	8f 90       	pop	r8
    2e28:	08 95       	ret

00002e2a <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2e2a:	8f 92       	push	r8
    2e2c:	9f 92       	push	r9
    2e2e:	af 92       	push	r10
    2e30:	bf 92       	push	r11
    2e32:	cf 92       	push	r12
    2e34:	df 92       	push	r13
    2e36:	ef 92       	push	r14
    2e38:	ff 92       	push	r15
    2e3a:	0f 93       	push	r16
    2e3c:	1f 93       	push	r17
    2e3e:	cf 93       	push	r28
    2e40:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2e42:	3b c0       	rjmp	.+118    	; 0x2eba <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2e44:	07 80       	ldd	r0, Z+7	; 0x07
    2e46:	f0 85       	ldd	r31, Z+8	; 0x08
    2e48:	e0 2d       	mov	r30, r0
    2e4a:	80 80       	ld	r8, Z
    2e4c:	91 80       	ldd	r9, Z+1	; 0x01
    2e4e:	a2 80       	ldd	r10, Z+2	; 0x02
    2e50:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2e52:	c0 85       	ldd	r28, Z+8	; 0x08
    2e54:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e56:	8e 01       	movw	r16, r28
    2e58:	0e 5f       	subi	r16, 0xFE	; 254
    2e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5c:	c8 01       	movw	r24, r16
    2e5e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e62:	ec 89       	ldd	r30, Y+20	; 0x14
    2e64:	fd 89       	ldd	r31, Y+21	; 0x15
    2e66:	ce 01       	movw	r24, r28
    2e68:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2e6a:	8e 89       	ldd	r24, Y+22	; 0x16
    2e6c:	82 ff       	sbrs	r24, 2
    2e6e:	25 c0       	rjmp	.+74     	; 0x2eba <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2e70:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e72:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e74:	a8 89       	ldd	r26, Y+16	; 0x10
    2e76:	b9 89       	ldd	r27, Y+17	; 0x11
    2e78:	88 0d       	add	r24, r8
    2e7a:	99 1d       	adc	r25, r9
    2e7c:	aa 1d       	adc	r26, r10
    2e7e:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2e80:	88 16       	cp	r8, r24
    2e82:	99 06       	cpc	r9, r25
    2e84:	aa 06       	cpc	r10, r26
    2e86:	bb 06       	cpc	r11, r27
    2e88:	70 f4       	brcc	.+28     	; 0x2ea6 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2e8a:	8a 83       	std	Y+2, r24	; 0x02
    2e8c:	9b 83       	std	Y+3, r25	; 0x03
    2e8e:	ac 83       	std	Y+4, r26	; 0x04
    2e90:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2e92:	db 87       	std	Y+11, r29	; 0x0b
    2e94:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2e96:	b8 01       	movw	r22, r16
    2e98:	80 91 87 13 	lds	r24, 0x1387	; 0x801387 <pxCurrentTimerList>
    2e9c:	90 91 88 13 	lds	r25, 0x1388	; 0x801388 <pxCurrentTimerList+0x1>
    2ea0:	0e 94 ad 02 	call	0x55a	; 0x55a <vListInsert>
    2ea4:	0a c0       	rjmp	.+20     	; 0x2eba <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2ea6:	c1 2c       	mov	r12, r1
    2ea8:	d1 2c       	mov	r13, r1
    2eaa:	76 01       	movw	r14, r12
    2eac:	00 e0       	ldi	r16, 0x00	; 0
    2eae:	10 e0       	ldi	r17, 0x00	; 0
    2eb0:	a5 01       	movw	r20, r10
    2eb2:	94 01       	movw	r18, r8
    2eb4:	60 e0       	ldi	r22, 0x00	; 0
    2eb6:	ce 01       	movw	r24, r28
    2eb8:	5a df       	rcall	.-332    	; 0x2d6e <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2eba:	e0 91 87 13 	lds	r30, 0x1387	; 0x801387 <pxCurrentTimerList>
    2ebe:	f0 91 88 13 	lds	r31, 0x1388	; 0x801388 <pxCurrentTimerList+0x1>
    2ec2:	80 81       	ld	r24, Z
    2ec4:	81 11       	cpse	r24, r1
    2ec6:	be cf       	rjmp	.-132    	; 0x2e44 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2ec8:	80 91 85 13 	lds	r24, 0x1385	; 0x801385 <pxOverflowTimerList>
    2ecc:	90 91 86 13 	lds	r25, 0x1386	; 0x801386 <pxOverflowTimerList+0x1>
    2ed0:	90 93 88 13 	sts	0x1388, r25	; 0x801388 <pxCurrentTimerList+0x1>
    2ed4:	80 93 87 13 	sts	0x1387, r24	; 0x801387 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2ed8:	f0 93 86 13 	sts	0x1386, r31	; 0x801386 <pxOverflowTimerList+0x1>
    2edc:	e0 93 85 13 	sts	0x1385, r30	; 0x801385 <pxOverflowTimerList>
    }
    2ee0:	df 91       	pop	r29
    2ee2:	cf 91       	pop	r28
    2ee4:	1f 91       	pop	r17
    2ee6:	0f 91       	pop	r16
    2ee8:	ff 90       	pop	r15
    2eea:	ef 90       	pop	r14
    2eec:	df 90       	pop	r13
    2eee:	cf 90       	pop	r12
    2ef0:	bf 90       	pop	r11
    2ef2:	af 90       	pop	r10
    2ef4:	9f 90       	pop	r9
    2ef6:	8f 90       	pop	r8
    2ef8:	08 95       	ret

00002efa <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2efa:	cf 92       	push	r12
    2efc:	df 92       	push	r13
    2efe:	ef 92       	push	r14
    2f00:	ff 92       	push	r15
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
    2f06:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2f08:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <xTaskGetTickCount>
    2f0c:	6b 01       	movw	r12, r22
    2f0e:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2f10:	80 91 7d 13 	lds	r24, 0x137D	; 0x80137d <xLastTime.2436>
    2f14:	90 91 7e 13 	lds	r25, 0x137E	; 0x80137e <xLastTime.2436+0x1>
    2f18:	a0 91 7f 13 	lds	r26, 0x137F	; 0x80137f <xLastTime.2436+0x2>
    2f1c:	b0 91 80 13 	lds	r27, 0x1380	; 0x801380 <xLastTime.2436+0x3>
    2f20:	c8 16       	cp	r12, r24
    2f22:	d9 06       	cpc	r13, r25
    2f24:	ea 06       	cpc	r14, r26
    2f26:	fb 06       	cpc	r15, r27
    2f28:	20 f4       	brcc	.+8      	; 0x2f32 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2f2a:	7f df       	rcall	.-258    	; 0x2e2a <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	88 83       	st	Y, r24
    2f30:	01 c0       	rjmp	.+2      	; 0x2f34 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2f32:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2f34:	c0 92 7d 13 	sts	0x137D, r12	; 0x80137d <xLastTime.2436>
    2f38:	d0 92 7e 13 	sts	0x137E, r13	; 0x80137e <xLastTime.2436+0x1>
    2f3c:	e0 92 7f 13 	sts	0x137F, r14	; 0x80137f <xLastTime.2436+0x2>
    2f40:	f0 92 80 13 	sts	0x1380, r15	; 0x801380 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2f44:	c7 01       	movw	r24, r14
    2f46:	b6 01       	movw	r22, r12
    2f48:	df 91       	pop	r29
    2f4a:	cf 91       	pop	r28
    2f4c:	ff 90       	pop	r15
    2f4e:	ef 90       	pop	r14
    2f50:	df 90       	pop	r13
    2f52:	cf 90       	pop	r12
    2f54:	08 95       	ret

00002f56 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2f56:	4f 92       	push	r4
    2f58:	5f 92       	push	r5
    2f5a:	6f 92       	push	r6
    2f5c:	7f 92       	push	r7
    2f5e:	8f 92       	push	r8
    2f60:	9f 92       	push	r9
    2f62:	af 92       	push	r10
    2f64:	bf 92       	push	r11
    2f66:	cf 92       	push	r12
    2f68:	df 92       	push	r13
    2f6a:	ef 92       	push	r14
    2f6c:	ff 92       	push	r15
    2f6e:	0f 93       	push	r16
    2f70:	1f 93       	push	r17
    2f72:	cf 93       	push	r28
    2f74:	df 93       	push	r29
    2f76:	4b 01       	movw	r8, r22
    2f78:	5c 01       	movw	r10, r24
    2f7a:	29 01       	movw	r4, r18
    2f7c:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2f7e:	e0 91 87 13 	lds	r30, 0x1387	; 0x801387 <pxCurrentTimerList>
    2f82:	f0 91 88 13 	lds	r31, 0x1388	; 0x801388 <pxCurrentTimerList+0x1>
    2f86:	07 80       	ldd	r0, Z+7	; 0x07
    2f88:	f0 85       	ldd	r31, Z+8	; 0x08
    2f8a:	e0 2d       	mov	r30, r0
    2f8c:	c0 85       	ldd	r28, Z+8	; 0x08
    2f8e:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2f90:	ce 01       	movw	r24, r28
    2f92:	02 96       	adiw	r24, 0x02	; 2
    2f94:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2f98:	8e 89       	ldd	r24, Y+22	; 0x16
    2f9a:	82 ff       	sbrs	r24, 2
    2f9c:	1b c0       	rjmp	.+54     	; 0x2fd4 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2f9e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2fa0:	5f 85       	ldd	r21, Y+15	; 0x0f
    2fa2:	68 89       	ldd	r22, Y+16	; 0x10
    2fa4:	79 89       	ldd	r23, Y+17	; 0x11
    2fa6:	48 0d       	add	r20, r8
    2fa8:	59 1d       	adc	r21, r9
    2faa:	6a 1d       	adc	r22, r10
    2fac:	7b 1d       	adc	r23, r11
    2fae:	75 01       	movw	r14, r10
    2fb0:	64 01       	movw	r12, r8
    2fb2:	93 01       	movw	r18, r6
    2fb4:	82 01       	movw	r16, r4
    2fb6:	ce 01       	movw	r24, r28
    2fb8:	47 de       	rcall	.-882    	; 0x2c48 <prvInsertTimerInActiveList>
    2fba:	88 23       	and	r24, r24
    2fbc:	69 f0       	breq	.+26     	; 0x2fd8 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2fbe:	c1 2c       	mov	r12, r1
    2fc0:	d1 2c       	mov	r13, r1
    2fc2:	76 01       	movw	r14, r12
    2fc4:	00 e0       	ldi	r16, 0x00	; 0
    2fc6:	10 e0       	ldi	r17, 0x00	; 0
    2fc8:	a5 01       	movw	r20, r10
    2fca:	94 01       	movw	r18, r8
    2fcc:	60 e0       	ldi	r22, 0x00	; 0
    2fce:	ce 01       	movw	r24, r28
    2fd0:	ce de       	rcall	.-612    	; 0x2d6e <xTimerGenericCommand>
    2fd2:	02 c0       	rjmp	.+4      	; 0x2fd8 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2fd4:	8e 7f       	andi	r24, 0xFE	; 254
    2fd6:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2fd8:	ec 89       	ldd	r30, Y+20	; 0x14
    2fda:	fd 89       	ldd	r31, Y+21	; 0x15
    2fdc:	ce 01       	movw	r24, r28
    2fde:	19 95       	eicall
    }
    2fe0:	df 91       	pop	r29
    2fe2:	cf 91       	pop	r28
    2fe4:	1f 91       	pop	r17
    2fe6:	0f 91       	pop	r16
    2fe8:	ff 90       	pop	r15
    2fea:	ef 90       	pop	r14
    2fec:	df 90       	pop	r13
    2fee:	cf 90       	pop	r12
    2ff0:	bf 90       	pop	r11
    2ff2:	af 90       	pop	r10
    2ff4:	9f 90       	pop	r9
    2ff6:	8f 90       	pop	r8
    2ff8:	7f 90       	pop	r7
    2ffa:	6f 90       	pop	r6
    2ffc:	5f 90       	pop	r5
    2ffe:	4f 90       	pop	r4
    3000:	08 95       	ret

00003002 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3002:	8f 92       	push	r8
    3004:	9f 92       	push	r9
    3006:	af 92       	push	r10
    3008:	bf 92       	push	r11
    300a:	cf 92       	push	r12
    300c:	df 92       	push	r13
    300e:	ef 92       	push	r14
    3010:	ff 92       	push	r15
    3012:	1f 93       	push	r17
    3014:	cf 93       	push	r28
    3016:	df 93       	push	r29
    3018:	1f 92       	push	r1
    301a:	cd b7       	in	r28, 0x3d	; 61
    301c:	de b7       	in	r29, 0x3e	; 62
    301e:	6b 01       	movw	r12, r22
    3020:	7c 01       	movw	r14, r24
    3022:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3024:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3028:	ce 01       	movw	r24, r28
    302a:	01 96       	adiw	r24, 0x01	; 1
    302c:	66 df       	rcall	.-308    	; 0x2efa <prvSampleTimeNow>
    302e:	4b 01       	movw	r8, r22
    3030:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	81 11       	cpse	r24, r1
    3036:	2d c0       	rjmp	.+90     	; 0x3092 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3038:	11 11       	cpse	r17, r1
    303a:	0d c0       	rjmp	.+26     	; 0x3056 <prvProcessTimerOrBlockTask+0x54>
    303c:	8c 14       	cp	r8, r12
    303e:	9d 04       	cpc	r9, r13
    3040:	ae 04       	cpc	r10, r14
    3042:	bf 04       	cpc	r11, r15
    3044:	40 f0       	brcs	.+16     	; 0x3056 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3046:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    304a:	a5 01       	movw	r20, r10
    304c:	94 01       	movw	r18, r8
    304e:	c7 01       	movw	r24, r14
    3050:	b6 01       	movw	r22, r12
    3052:	81 df       	rcall	.-254    	; 0x2f56 <prvProcessExpiredTimer>
    3054:	20 c0       	rjmp	.+64     	; 0x3096 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3056:	11 23       	and	r17, r17
    3058:	41 f0       	breq	.+16     	; 0x306a <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    305a:	e0 91 85 13 	lds	r30, 0x1385	; 0x801385 <pxOverflowTimerList>
    305e:	f0 91 86 13 	lds	r31, 0x1386	; 0x801386 <pxOverflowTimerList+0x1>
    3062:	80 81       	ld	r24, Z
    3064:	11 e0       	ldi	r17, 0x01	; 1
    3066:	81 11       	cpse	r24, r1
    3068:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    306a:	b7 01       	movw	r22, r14
    306c:	a6 01       	movw	r20, r12
    306e:	48 19       	sub	r20, r8
    3070:	59 09       	sbc	r21, r9
    3072:	6a 09       	sbc	r22, r10
    3074:	7b 09       	sbc	r23, r11
    3076:	21 2f       	mov	r18, r17
    3078:	80 91 83 13 	lds	r24, 0x1383	; 0x801383 <xTimerQueue>
    307c:	90 91 84 13 	lds	r25, 0x1384	; 0x801384 <xTimerQueue+0x1>
    3080:	0e 94 a9 07 	call	0xf52	; 0xf52 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3084:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <xTaskResumeAll>
    3088:	81 11       	cpse	r24, r1
    308a:	05 c0       	rjmp	.+10     	; 0x3096 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    308c:	0e 94 66 03 	call	0x6cc	; 0x6cc <vPortYield>
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3092:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <xTaskResumeAll>
            }
        }
    }
    3096:	0f 90       	pop	r0
    3098:	df 91       	pop	r29
    309a:	cf 91       	pop	r28
    309c:	1f 91       	pop	r17
    309e:	ff 90       	pop	r15
    30a0:	ef 90       	pop	r14
    30a2:	df 90       	pop	r13
    30a4:	cf 90       	pop	r12
    30a6:	bf 90       	pop	r11
    30a8:	af 90       	pop	r10
    30aa:	9f 90       	pop	r9
    30ac:	8f 90       	pop	r8
    30ae:	08 95       	ret

000030b0 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    30b0:	af 92       	push	r10
    30b2:	bf 92       	push	r11
    30b4:	cf 92       	push	r12
    30b6:	df 92       	push	r13
    30b8:	ef 92       	push	r14
    30ba:	ff 92       	push	r15
    30bc:	0f 93       	push	r16
    30be:	1f 93       	push	r17
    30c0:	cf 93       	push	r28
    30c2:	df 93       	push	r29
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
    30c8:	28 97       	sbiw	r28, 0x08	; 8
    30ca:	0f b6       	in	r0, 0x3f	; 63
    30cc:	f8 94       	cli
    30ce:	de bf       	out	0x3e, r29	; 62
    30d0:	0f be       	out	0x3f, r0	; 63
    30d2:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    30d4:	82 c0       	rjmp	.+260    	; 0x31da <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	88 23       	and	r24, r24
    30da:	0c f4       	brge	.+2      	; 0x30de <prvProcessReceivedCommands+0x2e>
    30dc:	7e c0       	rjmp	.+252    	; 0x31da <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    30de:	ae 80       	ldd	r10, Y+6	; 0x06
    30e0:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    30e2:	d5 01       	movw	r26, r10
    30e4:	1c 96       	adiw	r26, 0x0c	; 12
    30e6:	8d 91       	ld	r24, X+
    30e8:	9c 91       	ld	r25, X
    30ea:	1d 97       	sbiw	r26, 0x0d	; 13
    30ec:	89 2b       	or	r24, r25
    30ee:	21 f0       	breq	.+8      	; 0x30f8 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    30f0:	c5 01       	movw	r24, r10
    30f2:	02 96       	adiw	r24, 0x02	; 2
    30f4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    30f8:	ce 01       	movw	r24, r28
    30fa:	08 96       	adiw	r24, 0x08	; 8
    30fc:	fe de       	rcall	.-516    	; 0x2efa <prvSampleTimeNow>
    30fe:	8b 01       	movw	r16, r22
    3100:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3102:	e9 81       	ldd	r30, Y+1	; 0x01
    3104:	0e 2e       	mov	r0, r30
    3106:	00 0c       	add	r0, r0
    3108:	ff 0b       	sbc	r31, r31
    310a:	ea 30       	cpi	r30, 0x0A	; 10
    310c:	f1 05       	cpc	r31, r1
    310e:	08 f0       	brcs	.+2      	; 0x3112 <prvProcessReceivedCommands+0x62>
    3110:	64 c0       	rjmp	.+200    	; 0x31da <prvProcessReceivedCommands+0x12a>
    3112:	88 27       	eor	r24, r24
    3114:	ee 58       	subi	r30, 0x8E	; 142
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	8f 4f       	sbci	r24, 0xFF	; 255
    311a:	0c 94 14 2d 	jmp	0x5a28	; 0x5a28 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    311e:	f5 01       	movw	r30, r10
    3120:	86 89       	ldd	r24, Z+22	; 0x16
    3122:	81 60       	ori	r24, 0x01	; 1
    3124:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3126:	ca 80       	ldd	r12, Y+2	; 0x02
    3128:	db 80       	ldd	r13, Y+3	; 0x03
    312a:	ec 80       	ldd	r14, Y+4	; 0x04
    312c:	fd 80       	ldd	r15, Y+5	; 0x05
    312e:	46 85       	ldd	r20, Z+14	; 0x0e
    3130:	57 85       	ldd	r21, Z+15	; 0x0f
    3132:	60 89       	ldd	r22, Z+16	; 0x10
    3134:	71 89       	ldd	r23, Z+17	; 0x11
    3136:	4c 0d       	add	r20, r12
    3138:	5d 1d       	adc	r21, r13
    313a:	6e 1d       	adc	r22, r14
    313c:	7f 1d       	adc	r23, r15
    313e:	c5 01       	movw	r24, r10
    3140:	83 dd       	rcall	.-1274   	; 0x2c48 <prvInsertTimerInActiveList>
    3142:	88 23       	and	r24, r24
    3144:	09 f4       	brne	.+2      	; 0x3148 <prvProcessReceivedCommands+0x98>
    3146:	49 c0       	rjmp	.+146    	; 0x31da <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3148:	d5 01       	movw	r26, r10
    314a:	54 96       	adiw	r26, 0x14	; 20
    314c:	ed 91       	ld	r30, X+
    314e:	fc 91       	ld	r31, X
    3150:	55 97       	sbiw	r26, 0x15	; 21
    3152:	c5 01       	movw	r24, r10
    3154:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3156:	f5 01       	movw	r30, r10
    3158:	86 89       	ldd	r24, Z+22	; 0x16
    315a:	82 ff       	sbrs	r24, 2
    315c:	3e c0       	rjmp	.+124    	; 0x31da <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    315e:	4a 81       	ldd	r20, Y+2	; 0x02
    3160:	5b 81       	ldd	r21, Y+3	; 0x03
    3162:	6c 81       	ldd	r22, Y+4	; 0x04
    3164:	7d 81       	ldd	r23, Y+5	; 0x05
    3166:	86 85       	ldd	r24, Z+14	; 0x0e
    3168:	97 85       	ldd	r25, Z+15	; 0x0f
    316a:	a0 89       	ldd	r26, Z+16	; 0x10
    316c:	b1 89       	ldd	r27, Z+17	; 0x11
    316e:	9a 01       	movw	r18, r20
    3170:	ab 01       	movw	r20, r22
    3172:	28 0f       	add	r18, r24
    3174:	39 1f       	adc	r19, r25
    3176:	4a 1f       	adc	r20, r26
    3178:	5b 1f       	adc	r21, r27
    317a:	c1 2c       	mov	r12, r1
    317c:	d1 2c       	mov	r13, r1
    317e:	76 01       	movw	r14, r12
    3180:	00 e0       	ldi	r16, 0x00	; 0
    3182:	10 e0       	ldi	r17, 0x00	; 0
    3184:	60 e0       	ldi	r22, 0x00	; 0
    3186:	c5 01       	movw	r24, r10
    3188:	f2 dd       	rcall	.-1052   	; 0x2d6e <xTimerGenericCommand>
    318a:	27 c0       	rjmp	.+78     	; 0x31da <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    318c:	d5 01       	movw	r26, r10
    318e:	56 96       	adiw	r26, 0x16	; 22
    3190:	8c 91       	ld	r24, X
    3192:	56 97       	sbiw	r26, 0x16	; 22
    3194:	8e 7f       	andi	r24, 0xFE	; 254
    3196:	56 96       	adiw	r26, 0x16	; 22
    3198:	8c 93       	st	X, r24
                        break;
    319a:	1f c0       	rjmp	.+62     	; 0x31da <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    319c:	f5 01       	movw	r30, r10
    319e:	86 89       	ldd	r24, Z+22	; 0x16
    31a0:	81 60       	ori	r24, 0x01	; 1
    31a2:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    31a4:	4a 81       	ldd	r20, Y+2	; 0x02
    31a6:	5b 81       	ldd	r21, Y+3	; 0x03
    31a8:	6c 81       	ldd	r22, Y+4	; 0x04
    31aa:	7d 81       	ldd	r23, Y+5	; 0x05
    31ac:	46 87       	std	Z+14, r20	; 0x0e
    31ae:	57 87       	std	Z+15, r21	; 0x0f
    31b0:	60 8b       	std	Z+16, r22	; 0x10
    31b2:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    31b4:	40 0f       	add	r20, r16
    31b6:	51 1f       	adc	r21, r17
    31b8:	62 1f       	adc	r22, r18
    31ba:	73 1f       	adc	r23, r19
    31bc:	68 01       	movw	r12, r16
    31be:	79 01       	movw	r14, r18
    31c0:	c5 01       	movw	r24, r10
    31c2:	42 dd       	rcall	.-1404   	; 0x2c48 <prvInsertTimerInActiveList>
                        break;
    31c4:	0a c0       	rjmp	.+20     	; 0x31da <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    31c6:	f5 01       	movw	r30, r10
    31c8:	86 89       	ldd	r24, Z+22	; 0x16
    31ca:	81 fd       	sbrc	r24, 1
    31cc:	04 c0       	rjmp	.+8      	; 0x31d6 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    31ce:	c5 01       	movw	r24, r10
    31d0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <vPortFree>
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    31d6:	8e 7f       	andi	r24, 0xFE	; 254
    31d8:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	a9 01       	movw	r20, r18
    31e0:	be 01       	movw	r22, r28
    31e2:	6f 5f       	subi	r22, 0xFF	; 255
    31e4:	7f 4f       	sbci	r23, 0xFF	; 255
    31e6:	80 91 83 13 	lds	r24, 0x1383	; 0x801383 <xTimerQueue>
    31ea:	90 91 84 13 	lds	r25, 0x1384	; 0x801384 <xTimerQueue+0x1>
    31ee:	0e 94 69 06 	call	0xcd2	; 0xcd2 <xQueueReceive>
    31f2:	81 11       	cpse	r24, r1
    31f4:	70 cf       	rjmp	.-288    	; 0x30d6 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    31f6:	28 96       	adiw	r28, 0x08	; 8
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61
    3202:	df 91       	pop	r29
    3204:	cf 91       	pop	r28
    3206:	1f 91       	pop	r17
    3208:	0f 91       	pop	r16
    320a:	ff 90       	pop	r15
    320c:	ef 90       	pop	r14
    320e:	df 90       	pop	r13
    3210:	cf 90       	pop	r12
    3212:	bf 90       	pop	r11
    3214:	af 90       	pop	r10
    3216:	08 95       	ret

00003218 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3218:	08 95       	ret

0000321a <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    321a:	84 b1       	in	r24, 0x04	; 4
    321c:	80 68       	ori	r24, 0x80	; 128
    321e:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3220:	85 b1       	in	r24, 0x05	; 5
    3222:	80 68       	ori	r24, 0x80	; 128
    3224:	85 b9       	out	0x05, r24	; 5
    3226:	08 95       	ret

00003228 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3228:	83 b1       	in	r24, 0x03	; 3
    322a:	80 68       	ori	r24, 0x80	; 128
    322c:	83 b9       	out	0x03, r24	; 3
    322e:	08 95       	ret

00003230 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3230:	f4 df       	rcall	.-24     	; 0x321a <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3232:	2f ef       	ldi	r18, 0xFF	; 255
    3234:	80 e7       	ldi	r24, 0x70	; 112
    3236:	92 e0       	ldi	r25, 0x02	; 2
    3238:	21 50       	subi	r18, 0x01	; 1
    323a:	80 40       	sbci	r24, 0x00	; 0
    323c:	90 40       	sbci	r25, 0x00	; 0
    323e:	e1 f7       	brne	.-8      	; 0x3238 <vApplicationMallocFailedHook+0x8>
    3240:	00 c0       	rjmp	.+0      	; 0x3242 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3242:	00 00       	nop
    3244:	f1 df       	rcall	.-30     	; 0x3228 <prvBlinkMainLed>
    3246:	f5 cf       	rjmp	.-22     	; 0x3232 <vApplicationMallocFailedHook+0x2>

00003248 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3248:	e8 df       	rcall	.-48     	; 0x321a <prvSetMainLedOn>
    324a:	2f ef       	ldi	r18, 0xFF	; 255
    324c:	87 ea       	ldi	r24, 0xA7	; 167
    324e:	91 e6       	ldi	r25, 0x61	; 97
    3250:	21 50       	subi	r18, 0x01	; 1
    3252:	80 40       	sbci	r24, 0x00	; 0
    3254:	90 40       	sbci	r25, 0x00	; 0
    3256:	e1 f7       	brne	.-8      	; 0x3250 <vApplicationStackOverflowHook+0x8>
    3258:	00 c0       	rjmp	.+0      	; 0x325a <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    325a:	00 00       	nop
    325c:	e5 df       	rcall	.-54     	; 0x3228 <prvBlinkMainLed>
    325e:	f5 cf       	rjmp	.-22     	; 0x324a <vApplicationStackOverflowHook+0x2>

00003260 <tempAndHumidityTask>:

void tempAndHumidityTask(void* pvParameters){
	(void) pvParameters;
	
	while(1){
		vTaskDelay(pdMS_TO_TICKS(2000UL)); //every 2 sec
    3260:	6c e7       	ldi	r22, 0x7C	; 124
    3262:	70 e0       	ldi	r23, 0x00	; 0
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <vTaskDelay>
		
		int returnCode = hih8120_wakeup();
    326c:	ca d3       	rcall	.+1940   	; 0x3a02 <hih8120_wakeup>
    326e:	28 2f       	mov	r18, r24
    3270:	30 e0       	ldi	r19, 0x00	; 0
		if(HIH8120_OK != returnCode && returnCode!= HIH8120_TWI_BUSY){
    3272:	21 15       	cp	r18, r1
    3274:	31 05       	cpc	r19, r1
    3276:	79 f0       	breq	.+30     	; 0x3296 <tempAndHumidityTask+0x36>
    3278:	23 30       	cpi	r18, 0x03	; 3
    327a:	31 05       	cpc	r19, r1
    327c:	61 f0       	breq	.+24     	; 0x3296 <tempAndHumidityTask+0x36>
			printf("HIH8120 wakeup error %d \n",returnCode);
    327e:	1f 92       	push	r1
    3280:	8f 93       	push	r24
    3282:	84 e9       	ldi	r24, 0x94	; 148
    3284:	92 e0       	ldi	r25, 0x02	; 2
    3286:	9f 93       	push	r25
    3288:	8f 93       	push	r24
    328a:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>
    328e:	0f 90       	pop	r0
    3290:	0f 90       	pop	r0
    3292:	0f 90       	pop	r0
    3294:	0f 90       	pop	r0
		}
		
		vTaskDelay(pdMS_TO_TICKS(100UL));
    3296:	66 e0       	ldi	r22, 0x06	; 6
    3298:	70 e0       	ldi	r23, 0x00	; 0
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <vTaskDelay>
		
		returnCode = hih8120_measure();
    32a2:	c4 d3       	rcall	.+1928   	; 0x3a2c <hih8120_measure>
    32a4:	28 2f       	mov	r18, r24
    32a6:	30 e0       	ldi	r19, 0x00	; 0
		if(HIH8120_OK!=returnCode && returnCode!= HIH8120_TWI_BUSY){
    32a8:	21 15       	cp	r18, r1
    32aa:	31 05       	cpc	r19, r1
    32ac:	79 f0       	breq	.+30     	; 0x32cc <tempAndHumidityTask+0x6c>
    32ae:	23 30       	cpi	r18, 0x03	; 3
    32b0:	31 05       	cpc	r19, r1
    32b2:	61 f0       	breq	.+24     	; 0x32cc <tempAndHumidityTask+0x6c>
			printf("HIH8120 measure error %d \n",returnCode);
    32b4:	1f 92       	push	r1
    32b6:	8f 93       	push	r24
    32b8:	8e ea       	ldi	r24, 0xAE	; 174
    32ba:	92 e0       	ldi	r25, 0x02	; 2
    32bc:	9f 93       	push	r25
    32be:	8f 93       	push	r24
    32c0:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>
    32c4:	0f 90       	pop	r0
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
		}
		
		vTaskDelay(100);
    32cc:	64 e6       	ldi	r22, 0x64	; 100
    32ce:	70 e0       	ldi	r23, 0x00	; 0
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <vTaskDelay>
		
		xSemaphoreTake(hardware_semaphore, portMAX_DELAY);
    32d8:	4f ef       	ldi	r20, 0xFF	; 255
    32da:	5f ef       	ldi	r21, 0xFF	; 255
    32dc:	ba 01       	movw	r22, r20
    32de:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <hardware_semaphore>
    32e2:	90 91 19 15 	lds	r25, 0x1519	; 0x801519 <hardware_semaphore+0x1>
    32e6:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <xQueueSemaphoreTake>
		
		entry_data.humidity=hih8120_getHumidityPercent_x10();
    32ea:	c6 d3       	rcall	.+1932   	; 0x3a78 <hih8120_getHumidityPercent_x10>
    32ec:	c8 e0       	ldi	r28, 0x08	; 8
    32ee:	d5 e1       	ldi	r29, 0x15	; 21
    32f0:	9b 83       	std	Y+3, r25	; 0x03
		entry_data.temperature=hih8120_getTemperature_x10();
    32f2:	8a 83       	std	Y+2, r24	; 0x02
    32f4:	e6 d3       	rcall	.+1996   	; 0x3ac2 <hih8120_getTemperature_x10>
    32f6:	99 83       	std	Y+1, r25	; 0x01
    32f8:	88 83       	st	Y, r24
		
		//printf("Humidity= %d and Temperature= %d \n",entry_data.humidity,entry_data.temperature);
		
		
		if(desired_data.desired_hum>entry_data.humidity){
    32fa:	20 91 12 15 	lds	r18, 0x1512	; 0x801512 <desired_data+0x2>
    32fe:	30 91 13 15 	lds	r19, 0x1513	; 0x801513 <desired_data+0x3>
    3302:	8a 81       	ldd	r24, Y+2	; 0x02
    3304:	9b 81       	ldd	r25, Y+3	; 0x03
    3306:	82 17       	cp	r24, r18
    3308:	93 07       	cpc	r25, r19
    330a:	b0 f4       	brcc	.+44     	; 0x3338 <tempAndHumidityTask+0xd8>
			printf("Water motor is moving right\n");
    330c:	89 ec       	ldi	r24, 0xC9	; 201
    330e:	92 e0       	ldi	r25, 0x02	; 2
    3310:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <puts>
			rc_servo_setPosition(0,100)	;
    3314:	64 e6       	ldi	r22, 0x64	; 100
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	0e 94 8b 22 	call	0x4516	; 0x4516 <rc_servo_setPosition>
			vTaskDelay(40);
    331c:	68 e2       	ldi	r22, 0x28	; 40
    331e:	70 e0       	ldi	r23, 0x00	; 0
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <vTaskDelay>
			printf("Water motor is moving left\n");
    3328:	85 ee       	ldi	r24, 0xE5	; 229
    332a:	92 e0       	ldi	r25, 0x02	; 2
    332c:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <puts>
			rc_servo_setPosition(0,-100);
    3330:	6c e9       	ldi	r22, 0x9C	; 156
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	0e 94 8b 22 	call	0x4516	; 0x4516 <rc_servo_setPosition>
			//desired_data.desired_hum=0;
		}
		xSemaphoreGive(hardware_semaphore);
    3338:	00 e0       	ldi	r16, 0x00	; 0
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	a9 01       	movw	r20, r18
    3340:	60 e0       	ldi	r22, 0x00	; 0
    3342:	70 e0       	ldi	r23, 0x00	; 0
    3344:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <hardware_semaphore>
    3348:	90 91 19 15 	lds	r25, 0x1519	; 0x801519 <hardware_semaphore+0x1>
    334c:	0e 94 7e 05 	call	0xafc	; 0xafc <xQueueGenericSend>
	}
    3350:	87 cf       	rjmp	.-242    	; 0x3260 <tempAndHumidityTask>

00003352 <lightTask>:

void lightTask(void* pvParameters) {
	(void)pvParameters;

	while (1) {
		vTaskDelay(pdMS_TO_TICKS(7000UL));
    3352:	62 eb       	ldi	r22, 0xB2	; 178
    3354:	71 e0       	ldi	r23, 0x01	; 1
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <vTaskDelay>
		int statusCode = tsl2591_fetchData();
    335e:	0e 94 81 28 	call	0x5102	; 0x5102 <tsl2591_fetchData>
    3362:	90 e0       	ldi	r25, 0x00	; 0
		if (statusCode != TSL2591_OK) {
    3364:	00 97       	sbiw	r24, 0x00	; 0
    3366:	a9 f3       	breq	.-22     	; 0x3352 <lightTask>
			printf("Light data error: %d\n", statusCode);
    3368:	9f 93       	push	r25
    336a:	8f 93       	push	r24
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	93 e0       	ldi	r25, 0x03	; 3
    3370:	9f 93       	push	r25
    3372:	8f 93       	push	r24
    3374:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	0f 90       	pop	r0
    337e:	0f 90       	pop	r0
    3380:	e8 cf       	rjmp	.-48     	; 0x3352 <lightTask>

00003382 <lightCallback>:
	}

}


void lightCallback(tsl2591_returnCode_t rc) {
    3382:	0f 93       	push	r16
    3384:	cf 93       	push	r28
    3386:	df 93       	push	r29
    3388:	00 d0       	rcall	.+0      	; 0x338a <lightCallback+0x8>
    338a:	1f 92       	push	r1
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
	float lux;
	xSemaphoreTake(hardware_semaphore, portMAX_DELAY);
    3390:	4f ef       	ldi	r20, 0xFF	; 255
    3392:	5f ef       	ldi	r21, 0xFF	; 255
    3394:	ba 01       	movw	r22, r20
    3396:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <hardware_semaphore>
    339a:	90 91 19 15 	lds	r25, 0x1519	; 0x801519 <hardware_semaphore+0x1>
    339e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <xQueueSemaphoreTake>
	
	if (TSL2591_OK == (rc = tsl2591_getLux(&lux)))
    33a2:	ce 01       	movw	r24, r28
    33a4:	01 96       	adiw	r24, 0x01	; 1
    33a6:	0e 94 93 28 	call	0x5126	; 0x5126 <tsl2591_getLux>
    33aa:	81 11       	cpse	r24, r1
    33ac:	0a c0       	rjmp	.+20     	; 0x33c2 <lightCallback+0x40>
	{
		//printf("Lux: %d\n", (uint16_t)lux);
		entry_data.light = (uint16_t)lux;
    33ae:	69 81       	ldd	r22, Y+1	; 0x01
    33b0:	7a 81       	ldd	r23, Y+2	; 0x02
    33b2:	8b 81       	ldd	r24, Y+3	; 0x03
    33b4:	9c 81       	ldd	r25, Y+4	; 0x04
    33b6:	8b d2       	rcall	.+1302   	; 0x38ce <__fixunssfsi>
    33b8:	70 93 0f 15 	sts	0x150F, r23	; 0x80150f <entry_data+0x7>
    33bc:	60 93 0e 15 	sts	0x150E, r22	; 0x80150e <entry_data+0x6>
    33c0:	06 c0       	rjmp	.+12     	; 0x33ce <lightCallback+0x4c>
	}
	else if (TSL2591_OVERFLOW == rc)
    33c2:	83 30       	cpi	r24, 0x03	; 3
    33c4:	21 f4       	brne	.+8      	; 0x33ce <lightCallback+0x4c>
	{
		printf("Lux overflow\n");
    33c6:	86 e1       	ldi	r24, 0x16	; 22
    33c8:	93 e0       	ldi	r25, 0x03	; 3
    33ca:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <puts>
	}
	
	if(desired_data.desired_light>entry_data.light){
    33ce:	20 91 16 15 	lds	r18, 0x1516	; 0x801516 <desired_data+0x6>
    33d2:	30 91 17 15 	lds	r19, 0x1517	; 0x801517 <desired_data+0x7>
    33d6:	80 91 0e 15 	lds	r24, 0x150E	; 0x80150e <entry_data+0x6>
    33da:	90 91 0f 15 	lds	r25, 0x150F	; 0x80150f <entry_data+0x7>
    33de:	82 17       	cp	r24, r18
    33e0:	93 07       	cpc	r25, r19
    33e2:	40 f4       	brcc	.+16     	; 0x33f4 <lightCallback+0x72>
		rc_servo_setPosition(1,100)	;
    33e4:	64 e6       	ldi	r22, 0x64	; 100
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	0e 94 8b 22 	call	0x4516	; 0x4516 <rc_servo_setPosition>
		//printf("Motor is moving right\n");
		printf("Light level is turned up\n");
    33ec:	83 e2       	ldi	r24, 0x23	; 35
    33ee:	93 e0       	ldi	r25, 0x03	; 3
    33f0:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <puts>
	}
	if(desired_data.desired_light<entry_data.light){
    33f4:	20 91 16 15 	lds	r18, 0x1516	; 0x801516 <desired_data+0x6>
    33f8:	30 91 17 15 	lds	r19, 0x1517	; 0x801517 <desired_data+0x7>
    33fc:	80 91 0e 15 	lds	r24, 0x150E	; 0x80150e <entry_data+0x6>
    3400:	90 91 0f 15 	lds	r25, 0x150F	; 0x80150f <entry_data+0x7>
    3404:	28 17       	cp	r18, r24
    3406:	39 07       	cpc	r19, r25
    3408:	40 f4       	brcc	.+16     	; 0x341a <lightCallback+0x98>
		rc_servo_setPosition(1,-100)	;
    340a:	6c e9       	ldi	r22, 0x9C	; 156
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	0e 94 8b 22 	call	0x4516	; 0x4516 <rc_servo_setPosition>
		//printf("Motor is moving left\n");
		printf("Light level is turned down\n");
    3412:	8c e3       	ldi	r24, 0x3C	; 60
    3414:	93 e0       	ldi	r25, 0x03	; 3
    3416:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <puts>
	}
	
	xSemaphoreGive(hardware_semaphore);
    341a:	00 e0       	ldi	r16, 0x00	; 0
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	a9 01       	movw	r20, r18
    3422:	60 e0       	ldi	r22, 0x00	; 0
    3424:	70 e0       	ldi	r23, 0x00	; 0
    3426:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <hardware_semaphore>
    342a:	90 91 19 15 	lds	r25, 0x1519	; 0x801519 <hardware_semaphore+0x1>
    342e:	0e 94 7e 05 	call	0xafc	; 0xafc <xQueueGenericSend>
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	0f 90       	pop	r0
    3438:	0f 90       	pop	r0
    343a:	df 91       	pop	r29
    343c:	cf 91       	pop	r28
    343e:	0f 91       	pop	r16
    3440:	08 95       	ret

00003442 <_lora_setup>:

static lora_driver_payload_t _uplink_payload;
static lora_driver_payload_t _downlink_payload;

static void _lora_setup(void)
{
    3442:	0f 93       	push	r16
    3444:	1f 93       	push	r17
    3446:	cf 93       	push	r28
    3448:	df 93       	push	r29
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
    344e:	64 97       	sbiw	r28, 0x14	; 20
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	f8 94       	cli
    3454:	de bf       	out	0x3e, r29	; 62
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3460:	a8 d4       	rcall	.+2384   	; 0x3db2 <lora_driver_rn2483FactoryReset>
    3462:	24 d7       	rcall	.+3656   	; 0x42ac <lora_driver_mapReturnCodeToText>
    3464:	9f 93       	push	r25
    3466:	8f 93       	push	r24
    3468:	87 e5       	ldi	r24, 0x57	; 87
    346a:	93 e0       	ldi	r25, 0x03	; 3
    346c:	9f 93       	push	r25
    346e:	8f 93       	push	r24
    3470:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3474:	1c d6       	rcall	.+3128   	; 0x40ae <lora_driver_configureToEu868>
    3476:	1a d7       	rcall	.+3636   	; 0x42ac <lora_driver_mapReturnCodeToText>
    3478:	9f 93       	push	r25
    347a:	8f 93       	push	r24
    347c:	8a e6       	ldi	r24, 0x6A	; 106
    347e:	93 e0       	ldi	r25, 0x03	; 3
    3480:	9f 93       	push	r25
    3482:	8f 93       	push	r24
    3484:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>
    3488:	8e 01       	movw	r16, r28
    348a:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    348c:	1f 4f       	sbci	r17, 0xFF	; 255
    348e:	c8 01       	movw	r24, r16
    3490:	a2 d4       	rcall	.+2372   	; 0x3dd6 <lora_driver_getRn2483Hweui>
    3492:	0c d7       	rcall	.+3608   	; 0x42ac <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3494:	1f 93       	push	r17
    3496:	0f 93       	push	r16
    3498:	9f 93       	push	r25
    349a:	8f 93       	push	r24
    349c:	83 e8       	ldi	r24, 0x83	; 131
    349e:	93 e0       	ldi	r25, 0x03	; 3
    34a0:	9f 93       	push	r25
    34a2:	8f 93       	push	r24
    34a4:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    34a8:	c8 01       	movw	r24, r16
    34aa:	b1 d4       	rcall	.+2402   	; 0x3e0e <lora_driver_setDeviceIdentifier>
    34ac:	ff d6       	rcall	.+3582   	; 0x42ac <lora_driver_mapReturnCodeToText>
    34ae:	9f 93       	push	r25
    34b0:	8f 93       	push	r24
    34b2:	1f 93       	push	r17
    34b4:	0f 93       	push	r16
    34b6:	87 e9       	ldi	r24, 0x97	; 151
    34b8:	93 e0       	ldi	r25, 0x03	; 3
    34ba:	9f 93       	push	r25
    34bc:	8f 93       	push	r24
    34be:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    34c2:	a8 01       	movw	r20, r16
    34c4:	6c ea       	ldi	r22, 0xAC	; 172
    34c6:	73 e0       	ldi	r23, 0x03	; 3
    34c8:	8d ec       	ldi	r24, 0xCD	; 205
    34ca:	93 e0       	ldi	r25, 0x03	; 3
    34cc:	ce d6       	rcall	.+3484   	; 0x426a <lora_driver_setOtaaIdentity>
    34ce:	ee d6       	rcall	.+3548   	; 0x42ac <lora_driver_mapReturnCodeToText>
    34d0:	9f 93       	push	r25
    34d2:	8f 93       	push	r24
    34d4:	1f 93       	push	r17
    34d6:	0f 93       	push	r16
    34d8:	8c ea       	ldi	r24, 0xAC	; 172
    34da:	93 e0       	ldi	r25, 0x03	; 3
    34dc:	9f 93       	push	r25
    34de:	8f 93       	push	r24
    34e0:	8d ec       	ldi	r24, 0xCD	; 205
    34e2:	93 e0       	ldi	r25, 0x03	; 3
    34e4:	9f 93       	push	r25
    34e6:	8f 93       	push	r24
    34e8:	8e ed       	ldi	r24, 0xDE	; 222
    34ea:	93 e0       	ldi	r25, 0x03	; 3
    34ec:	9f 93       	push	r25
    34ee:	8f 93       	push	r24
    34f0:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    34f4:	bf d4       	rcall	.+2430   	; 0x3e74 <lora_driver_saveMac>
    34f6:	da d6       	rcall	.+3508   	; 0x42ac <lora_driver_mapReturnCodeToText>
    34f8:	9f 93       	push	r25
    34fa:	8f 93       	push	r24
    34fc:	84 e1       	ldi	r24, 0x14	; 20
    34fe:	94 e0       	ldi	r25, 0x04	; 4
    3500:	9f 93       	push	r25
    3502:	8f 93       	push	r24
    3504:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3508:	0f b6       	in	r0, 0x3f	; 63
    350a:	f8 94       	cli
    350c:	de bf       	out	0x3e, r29	; 62
    350e:	0f be       	out	0x3f, r0	; 63
    3510:	cd bf       	out	0x3d, r28	; 61
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	a9 d5       	rcall	.+2898   	; 0x4068 <lora_driver_setAdaptiveDataRate>
    3516:	ca d6       	rcall	.+3476   	; 0x42ac <lora_driver_mapReturnCodeToText>
    3518:	9f 93       	push	r25
    351a:	8f 93       	push	r24
    351c:	83 e2       	ldi	r24, 0x23	; 35
    351e:	94 e0       	ldi	r25, 0x04	; 4
    3520:	9f 93       	push	r25
    3522:	8f 93       	push	r24
    3524:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3528:	84 ef       	ldi	r24, 0xF4	; 244
    352a:	91 e0       	ldi	r25, 0x01	; 1
    352c:	a8 d5       	rcall	.+2896   	; 0x407e <lora_driver_setReceiveDelay>
    352e:	be d6       	rcall	.+3452   	; 0x42ac <lora_driver_mapReturnCodeToText>
    3530:	9f 93       	push	r25
    3532:	8f 93       	push	r24
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	8f 93       	push	r24
    3538:	84 ef       	ldi	r24, 0xF4	; 244
    353a:	8f 93       	push	r24
    353c:	84 e4       	ldi	r24, 0x44	; 68
    353e:	94 e0       	ldi	r25, 0x04	; 4
    3540:	9f 93       	push	r25
    3542:	8f 93       	push	r24
    3544:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>
    3548:	0f b6       	in	r0, 0x3f	; 63
    354a:	f8 94       	cli
    354c:	de bf       	out	0x3e, r29	; 62
    354e:	0f be       	out	0x3f, r0	; 63
    3550:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3552:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	94 d4       	rcall	.+2344   	; 0x3e80 <lora_driver_join>
    3558:	08 2f       	mov	r16, r24
    355a:	a8 d6       	rcall	.+3408   	; 0x42ac <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    355c:	9f 93       	push	r25
    355e:	8f 93       	push	r24
    3560:	1f 92       	push	r1
    3562:	1f 93       	push	r17
    3564:	84 e6       	ldi	r24, 0x64	; 100
    3566:	94 e0       	ldi	r25, 0x04	; 4
    3568:	9f 93       	push	r25
    356a:	8f 93       	push	r24
    356c:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3574:	0f 90       	pop	r0
    3576:	0f 90       	pop	r0
    3578:	0f 90       	pop	r0
    357a:	0f 90       	pop	r0
    357c:	08 30       	cpi	r16, 0x08	; 8
    357e:	41 f0       	breq	.+16     	; 0x3590 <_lora_setup+0x14e>
    3580:	66 e3       	ldi	r22, 0x36	; 54
    3582:	71 e0       	ldi	r23, 0x01	; 1
		{
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <vTaskDelay>
    358c:	11 50       	subi	r17, 0x01	; 1
    358e:	11 f7       	brne	.-60     	; 0x3554 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3590:	08 30       	cpi	r16, 0x08	; 8
    3592:	29 f4       	brne	.+10     	; 0x359e <_lora_setup+0x15c>

	if (rc == LORA_ACCEPTED)
    3594:	84 e8       	ldi	r24, 0x84	; 132
    3596:	94 e0       	ldi	r25, 0x04	; 4
	{
		// Connected to LoRaWAN :-)
		puts("Connection succeeded \n");
    3598:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <puts>
    359c:	07 c0       	rjmp	.+14     	; 0x35ac <_lora_setup+0x16a>
    359e:	8b e9       	ldi	r24, 0x9B	; 155
		while (1)
		{
			taskYIELD();
		}
	}
}
    35a0:	94 e0       	ldi	r25, 0x04	; 4
		puts("Connection succeeded \n");
		//vTaskDelay(pdMS_TO_TICKS(5000UL)); //maybe some delay after
	}
	else
	{
		puts("Connection failed \n");
    35a2:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <puts>
    35a6:	0e 94 66 03 	call	0x6cc	; 0x6cc <vPortYield>
		while (1)
		{
			taskYIELD();
    35aa:	fd cf       	rjmp	.-6      	; 0x35a6 <_lora_setup+0x164>
    35ac:	64 96       	adiw	r28, 0x14	; 20
    35ae:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    35b0:	f8 94       	cli
    35b2:	de bf       	out	0x3e, r29	; 62
    35b4:	0f be       	out	0x3f, r0	; 63
    35b6:	cd bf       	out	0x3d, r28	; 61
    35b8:	df 91       	pop	r29
    35ba:	cf 91       	pop	r28
    35bc:	1f 91       	pop	r17
    35be:	0f 91       	pop	r16
    35c0:	08 95       	ret

000035c2 <lora_handler_task>:
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	e8 d3       	rcall	.+2000   	; 0x3d96 <lora_driver_resetRn2483>
/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
	vTaskDelay(2);
    35c6:	62 e0       	ldi	r22, 0x02	; 2
    35c8:	70 e0       	ldi	r23, 0x00	; 0
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <vTaskDelay>
	lora_driver_resetRn2483(0);
    35d2:	80 e0       	ldi	r24, 0x00	; 0
    35d4:	e0 d3       	rcall	.+1984   	; 0x3d96 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    35d6:	66 e9       	ldi	r22, 0x96	; 150
    35d8:	70 e0       	ldi	r23, 0x00	; 0
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    35e2:	92 d3       	rcall	.+1828   	; 0x3d08 <lora_driver_flushBuffers>

	_lora_setup();
    35e4:	2e df       	rcall	.-420    	; 0x3442 <_lora_setup>
    35e6:	66 e9       	ldi	r22, 0x96	; 150
	vTaskDelay(150); //make sure the setup had time 
    35e8:	70 e0       	ldi	r23, 0x00	; 0
    35ea:	80 e0       	ldi	r24, 0x00	; 0
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <vTaskDelay>
    35f2:	e5 eb       	ldi	r30, 0xB5	; 181

	_uplink_payload.len = 8;
    35f4:	f3 e1       	ldi	r31, 0x13	; 19
    35f6:	98 e0       	ldi	r25, 0x08	; 8
    35f8:	91 83       	std	Z+1, r25	; 0x01
    35fa:	81 e0       	ldi	r24, 0x01	; 1
	_uplink_payload.portNo = 1; 
    35fc:	80 83       	st	Z, r24
    35fe:	ef e9       	ldi	r30, 0x9F	; 159
	
	_downlink_payload.len = 8;
    3600:	f3 e1       	ldi	r31, 0x13	; 19
    3602:	91 83       	std	Z+1, r25	; 0x01
    3604:	80 83       	st	Z, r24
	_downlink_payload.portNo = 1;
    3606:	64 ef       	ldi	r22, 0xF4	; 244
	//xLastWakeTime = xTaskGetTickCount();
	
	for(;;)
	{
		//xTaskDelayUntil( &xLastWakeTime, xFrequency );
		vTaskDelay(500); //aprox 1 min (10000 - aprox 3.5 min)
    3608:	71 e0       	ldi	r23, 0x01	; 1
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <vTaskDelay>
    3612:	4f ef       	ldi	r20, 0xFF	; 255
		xSemaphoreTake(hardware_semaphore,portMAX_DELAY);
    3614:	5f ef       	ldi	r21, 0xFF	; 255
    3616:	ba 01       	movw	r22, r20
    3618:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <hardware_semaphore>
    361c:	90 91 19 15 	lds	r25, 0x1519	; 0x801519 <hardware_semaphore+0x1>
    3620:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <xQueueSemaphoreTake>
    3624:	8f ea       	ldi	r24, 0xAF	; 175
		puts("in semaphore\n");
    3626:	94 e0       	ldi	r25, 0x04	; 4
    3628:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <puts>
    362c:	a8 e0       	ldi	r26, 0x08	; 8
		
		_uplink_payload.bytes[0] = entry_data.humidity >> 8;
    362e:	b5 e1       	ldi	r27, 0x15	; 21
    3630:	12 96       	adiw	r26, 0x02	; 2
    3632:	8c 91       	ld	r24, X
    3634:	12 97       	sbiw	r26, 0x02	; 2
    3636:	13 96       	adiw	r26, 0x03	; 3
    3638:	9c 91       	ld	r25, X
    363a:	13 97       	sbiw	r26, 0x03	; 3
    363c:	e5 eb       	ldi	r30, 0xB5	; 181
    363e:	f3 e1       	ldi	r31, 0x13	; 19
    3640:	92 83       	std	Z+2, r25	; 0x02
    3642:	83 83       	std	Z+3, r24	; 0x03
		_uplink_payload.bytes[1] = entry_data.humidity & 0xFF;
    3644:	8c 91       	ld	r24, X
		_uplink_payload.bytes[2] = entry_data.temperature >> 8;
    3646:	11 96       	adiw	r26, 0x01	; 1
    3648:	9c 91       	ld	r25, X
    364a:	11 97       	sbiw	r26, 0x01	; 1
    364c:	94 83       	std	Z+4, r25	; 0x04
    364e:	85 83       	std	Z+5, r24	; 0x05
		_uplink_payload.bytes[3] = entry_data.temperature & 0xFF;
    3650:	14 96       	adiw	r26, 0x04	; 4
		_uplink_payload.bytes[4] = entry_data.co2 >> 8;
    3652:	8c 91       	ld	r24, X
    3654:	14 97       	sbiw	r26, 0x04	; 4
    3656:	15 96       	adiw	r26, 0x05	; 5
    3658:	9c 91       	ld	r25, X
    365a:	15 97       	sbiw	r26, 0x05	; 5
    365c:	96 83       	std	Z+6, r25	; 0x06
    365e:	87 83       	std	Z+7, r24	; 0x07
		_uplink_payload.bytes[5] = entry_data.co2 & 0xFF;
    3660:	16 96       	adiw	r26, 0x06	; 6
		_uplink_payload.bytes[6] = entry_data.light >> 8;
    3662:	8c 91       	ld	r24, X
    3664:	16 97       	sbiw	r26, 0x06	; 6
    3666:	17 96       	adiw	r26, 0x07	; 7
    3668:	9c 91       	ld	r25, X
    366a:	90 87       	std	Z+8, r25	; 0x08
		_uplink_payload.bytes[7] = entry_data.light & 0xFF;
    366c:	81 87       	std	Z+9, r24	; 0x09

		//printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
		
		lora_driver_returnCode_t rc;
		if ((rc = lora_driver_sendUploadMessage(false, &_uplink_payload)) == LORA_MAC_TX_OK )
    366e:	bf 01       	movw	r22, r30
    3670:	80 e0       	ldi	r24, 0x00	; 0
    3672:	2f d4       	rcall	.+2142   	; 0x3ed2 <lora_driver_sendUploadMessage>
    3674:	8d 30       	cpi	r24, 0x0D	; 13
    3676:	29 f4       	brne	.+10     	; 0x3682 <lora_handler_task+0xc0>
    3678:	8d eb       	ldi	r24, 0xBD	; 189
		{
			puts("MESSAGE SENT \n");
    367a:	94 e0       	ldi	r25, 0x04	; 4
    367c:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <puts>
    3680:	5d c0       	rjmp	.+186    	; 0x373c <lora_handler_task+0x17a>
    3682:	8e 30       	cpi	r24, 0x0E	; 14
			// The uplink message is sent and there is no downlink message received
		}
		else if(rc==LORA_MAC_RX)
    3684:	09 f0       	breq	.+2      	; 0x3688 <lora_handler_task+0xc6>
    3686:	56 c0       	rjmp	.+172    	; 0x3734 <lora_handler_task+0x172>
    3688:	8d eb       	ldi	r24, 0xBD	; 189
		{
			// The uplink message is sent and a downlink message is received
			puts("MESSAGE SENT \n");
    368a:	94 e0       	ldi	r25, 0x04	; 4
    368c:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <puts>
    3690:	0f ef       	ldi	r16, 0xFF	; 255
			
			xMessageBufferReceive(downlink_buffer, &_downlink_payload, sizeof(lora_driver_payload_t),portMAX_DELAY);
    3692:	1f ef       	ldi	r17, 0xFF	; 255
    3694:	98 01       	movw	r18, r16
    3696:	46 e1       	ldi	r20, 0x16	; 22
    3698:	50 e0       	ldi	r21, 0x00	; 0
    369a:	6f e9       	ldi	r22, 0x9F	; 159
    369c:	73 e1       	ldi	r23, 0x13	; 19
    369e:	80 91 06 15 	lds	r24, 0x1506	; 0x801506 <downlink_buffer>
    36a2:	90 91 07 15 	lds	r25, 0x1507	; 0x801507 <downlink_buffer+0x1>
    36a6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <xStreamBufferReceive>
    36aa:	cf e9       	ldi	r28, 0x9F	; 159
			printf("DOWN LINK: from port: %d with %d bytes received!", _downlink_payload.portNo, _downlink_payload.len);
    36ac:	d3 e1       	ldi	r29, 0x13	; 19
    36ae:	99 81       	ldd	r25, Y+1	; 0x01
    36b0:	88 81       	ld	r24, Y
    36b2:	1f 92       	push	r1
    36b4:	9f 93       	push	r25
    36b6:	1f 92       	push	r1
    36b8:	8f 93       	push	r24
    36ba:	8c ec       	ldi	r24, 0xCC	; 204
    36bc:	94 e0       	ldi	r25, 0x04	; 4
    36be:	9f 93       	push	r25
    36c0:	8f 93       	push	r24
    36c2:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
			
			
			if(_downlink_payload.len==8) //number of bytes we send and expect to receive
    36c8:	0f 90       	pop	r0
    36ca:	0f 90       	pop	r0
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	88 30       	cpi	r24, 0x08	; 8
    36d6:	91 f5       	brne	.+100    	; 0x373c <lora_handler_task+0x17a>
    36d8:	8a 81       	ldd	r24, Y+2	; 0x02
			{
				desired_data.desired_temp=(_downlink_payload.bytes[0] << 8) + _downlink_payload.bytes[1];
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	98 2f       	mov	r25, r24
    36de:	88 27       	eor	r24, r24
    36e0:	2b 81       	ldd	r18, Y+3	; 0x03
    36e2:	82 0f       	add	r24, r18
    36e4:	91 1d       	adc	r25, r1
    36e6:	a0 e1       	ldi	r26, 0x10	; 16
    36e8:	b5 e1       	ldi	r27, 0x15	; 21
    36ea:	11 96       	adiw	r26, 0x01	; 1
    36ec:	9c 93       	st	X, r25
    36ee:	8e 93       	st	-X, r24
    36f0:	8c 81       	ldd	r24, Y+4	; 0x04
				desired_data.desired_hum=(_downlink_payload.bytes[2] << 8) + _downlink_payload.bytes[3];
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	98 2f       	mov	r25, r24
    36f6:	88 27       	eor	r24, r24
    36f8:	2d 81       	ldd	r18, Y+5	; 0x05
    36fa:	82 0f       	add	r24, r18
    36fc:	91 1d       	adc	r25, r1
    36fe:	13 96       	adiw	r26, 0x03	; 3
    3700:	9c 93       	st	X, r25
    3702:	8e 93       	st	-X, r24
    3704:	12 97       	sbiw	r26, 0x02	; 2
    3706:	8e 81       	ldd	r24, Y+6	; 0x06
				desired_data.desired_co2=(_downlink_payload.bytes[4] << 8) + _downlink_payload.bytes[5];
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	98 2f       	mov	r25, r24
    370c:	88 27       	eor	r24, r24
    370e:	2f 81       	ldd	r18, Y+7	; 0x07
    3710:	82 0f       	add	r24, r18
    3712:	91 1d       	adc	r25, r1
    3714:	15 96       	adiw	r26, 0x05	; 5
    3716:	9c 93       	st	X, r25
    3718:	8e 93       	st	-X, r24
    371a:	14 97       	sbiw	r26, 0x04	; 4
    371c:	88 85       	ldd	r24, Y+8	; 0x08
				desired_data.desired_light=(_downlink_payload.bytes[6] << 8) + _downlink_payload.bytes[7];
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	98 2f       	mov	r25, r24
    3722:	88 27       	eor	r24, r24
    3724:	29 85       	ldd	r18, Y+9	; 0x09
    3726:	82 0f       	add	r24, r18
    3728:	91 1d       	adc	r25, r1
    372a:	17 96       	adiw	r26, 0x07	; 7
    372c:	9c 93       	st	X, r25
    372e:	8e 93       	st	-X, r24
    3730:	16 97       	sbiw	r26, 0x06	; 6
    3732:	04 c0       	rjmp	.+8      	; 0x373c <lora_handler_task+0x17a>
    3734:	8d ef       	ldi	r24, 0xFD	; 253
			}
			
		}
		else{
			puts("Message not sent \n");
    3736:	94 e0       	ldi	r25, 0x04	; 4
    3738:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <puts>
    373c:	80 e1       	ldi	r24, 0x10	; 16
		}
		
		puts("I SENT SMTH\n");
    373e:	95 e0       	ldi	r25, 0x05	; 5
    3740:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <puts>
    3744:	00 e0       	ldi	r16, 0x00	; 0
		
		xSemaphoreGive(hardware_semaphore);
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	a9 01       	movw	r20, r18
    374c:	60 e0       	ldi	r22, 0x00	; 0
    374e:	70 e0       	ldi	r23, 0x00	; 0
    3750:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <hardware_semaphore>
    3754:	90 91 19 15 	lds	r25, 0x1519	; 0x801519 <hardware_semaphore+0x1>
    3758:	0e 94 7e 05 	call	0xafc	; 0xafc <xQueueGenericSend>
    375c:	54 cf       	rjmp	.-344    	; 0x3606 <lora_handler_task+0x44>

0000375e <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    375e:	81 b1       	in	r24, 0x01	; 1
    3760:	81 68       	ori	r24, 0x81	; 129
    3762:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <stdio_initialise>
	
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    376a:	85 e0       	ldi	r24, 0x05	; 5
    376c:	0e 94 81 27 	call	0x4f02	; 0x4f02 <status_leds_initialise>

	downlink_buffer = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3770:	41 e0       	ldi	r20, 0x01	; 1
    3772:	60 e0       	ldi	r22, 0x00	; 0
    3774:	70 e0       	ldi	r23, 0x00	; 0
    3776:	8c e2       	ldi	r24, 0x2C	; 44
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	0e 94 08 09 	call	0x1210	; 0x1210 <xStreamBufferGenericCreate>
    377e:	90 93 07 15 	sts	0x1507, r25	; 0x801507 <downlink_buffer+0x1>
    3782:	80 93 06 15 	sts	0x1506, r24	; 0x801506 <downlink_buffer>
	lora_driver_initialise(ser_USART1, downlink_buffer);
    3786:	bc 01       	movw	r22, r24
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	c5 d2       	rcall	.+1418   	; 0x3d16 <lora_driver_initialise>
	//lora_handler_initialise(3);
	
	entry_data.co2 =0;
    378c:	e8 e0       	ldi	r30, 0x08	; 8
    378e:	f5 e1       	ldi	r31, 0x15	; 21
    3790:	15 82       	std	Z+5, r1	; 0x05
    3792:	14 82       	std	Z+4, r1	; 0x04
	entry_data.humidity=0;
    3794:	13 82       	std	Z+3, r1	; 0x03
    3796:	12 82       	std	Z+2, r1	; 0x02
	entry_data.light=0;
    3798:	17 82       	std	Z+7, r1	; 0x07
    379a:	16 82       	std	Z+6, r1	; 0x06
	entry_data.temperature=0;
    379c:	11 82       	std	Z+1, r1	; 0x01
    379e:	10 82       	st	Z, r1
	
	desired_data.desired_co2 =0;
    37a0:	e0 e1       	ldi	r30, 0x10	; 16
    37a2:	f5 e1       	ldi	r31, 0x15	; 21
    37a4:	15 82       	std	Z+5, r1	; 0x05
    37a6:	14 82       	std	Z+4, r1	; 0x04
	desired_data.desired_hum =1000;
    37a8:	88 ee       	ldi	r24, 0xE8	; 232
    37aa:	93 e0       	ldi	r25, 0x03	; 3
    37ac:	93 83       	std	Z+3, r25	; 0x03
    37ae:	82 83       	std	Z+2, r24	; 0x02
	desired_data.desired_light=0;
    37b0:	17 82       	std	Z+7, r1	; 0x07
    37b2:	16 82       	std	Z+6, r1	; 0x06
	desired_data.desired_temp=0;
    37b4:	11 82       	std	Z+1, r1	; 0x01
	
	//temp&hum
	int returnCode = hih8120_initialise();
    37b6:	10 82       	st	Z, r1
    37b8:	0c d1       	rcall	.+536    	; 0x39d2 <hih8120_initialise>
	if(HIH8120_OK!=returnCode){
    37ba:	88 23       	and	r24, r24
    37bc:	69 f0       	breq	.+26     	; 0x37d8 <initialiseSystem+0x7a>
		printf("HIH8120 initialize error %d \n",returnCode);
    37be:	1f 92       	push	r1
    37c0:	8f 93       	push	r24
    37c2:	8d e1       	ldi	r24, 0x1D	; 29
    37c4:	95 e0       	ldi	r25, 0x05	; 5
    37c6:	9f 93       	push	r25
    37c8:	8f 93       	push	r24
    37ca:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>
    37ce:	0f 90       	pop	r0
    37d0:	0f 90       	pop	r0
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	04 c0       	rjmp	.+8      	; 0x37e0 <initialiseSystem+0x82>
		}else{
		puts("Humidity and Temperature driver initialized");
    37d8:	8b e3       	ldi	r24, 0x3B	; 59
    37da:	95 e0       	ldi	r25, 0x05	; 5
    37dc:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <puts>
	}
	
	//co2
	mh_z19_initialise(ser_USART3);
    37e0:	83 e0       	ldi	r24, 0x03	; 3
	mh_z19_injectCallBack(co2Callback);
    37e2:	40 d6       	rcall	.+3200   	; 0x4464 <mh_z19_initialise>
    37e4:	80 e2       	ldi	r24, 0x20	; 32
    37e6:	91 e0       	ldi	r25, 0x01	; 1
    37e8:	62 d6       	rcall	.+3268   	; 0x44ae <mh_z19_injectCallBack>
	puts("Co2 driver started \n");
    37ea:	87 e6       	ldi	r24, 0x67	; 103
    37ec:	95 e0       	ldi	r25, 0x05	; 5
    37ee:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <puts>
	
	//light 
	returnCode = tsl2591_initialise(lightCallback);
    37f2:	81 ec       	ldi	r24, 0xC1	; 193
    37f4:	99 e1       	ldi	r25, 0x19	; 25
    37f6:	0e 94 51 28 	call	0x50a2	; 0x50a2 <tsl2591_initialise>

	if (returnCode != TSL2591_OK) {
    37fa:	88 23       	and	r24, r24
    37fc:	69 f0       	breq	.+26     	; 0x3818 <initialiseSystem+0xba>
		printf("TSL2591 initialize error %d \n", returnCode);
    37fe:	1f 92       	push	r1
    3800:	8f 93       	push	r24
    3802:	8c e7       	ldi	r24, 0x7C	; 124
    3804:	95 e0       	ldi	r25, 0x05	; 5
    3806:	9f 93       	push	r25
    3808:	8f 93       	push	r24
    380a:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	04 c0       	rjmp	.+8      	; 0x3820 <initialiseSystem+0xc2>
	}
	else {
		puts("Light driver initialized");
    3818:	8a e9       	ldi	r24, 0x9A	; 154
    381a:	95 e0       	ldi	r25, 0x05	; 5
    381c:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <puts>
	}

	//enable light sensor
	returnCode = tsl2591_enable();
    3820:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <tsl2591_enable>
	if (returnCode != TSL2591_OK) {
    3824:	88 23       	and	r24, r24
    3826:	61 f0       	breq	.+24     	; 0x3840 <initialiseSystem+0xe2>
		printf("Failed to enable light sensor %d\n", returnCode);
    3828:	1f 92       	push	r1
    382a:	8f 93       	push	r24
    382c:	83 eb       	ldi	r24, 0xB3	; 179
    382e:	95 e0       	ldi	r25, 0x05	; 5
    3830:	9f 93       	push	r25
    3832:	8f 93       	push	r24
    3834:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <printf>
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
	}
	
	//initialise servo
	rc_servo_initialise();
    383e:	0f 90       	pop	r0
    3840:	82 c6       	rjmp	.+3332   	; 0x4546 <rc_servo_initialise>
    3842:	08 95       	ret

00003844 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3844:	8c df       	rcall	.-232    	; 0x375e <initialiseSystem>
	
	
	xTaskCreate(lora_handler_task,  "Lora task",  configMINIMAL_STACK_SIZE+200, NULL, 3 , NULL );
    3846:	e1 2c       	mov	r14, r1
    3848:	f1 2c       	mov	r15, r1
    384a:	03 e0       	ldi	r16, 0x03	; 3
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	48 e8       	ldi	r20, 0x88	; 136
    3852:	51 e0       	ldi	r21, 0x01	; 1
    3854:	65 ed       	ldi	r22, 0xD5	; 213
    3856:	75 e0       	ldi	r23, 0x05	; 5
    3858:	81 ee       	ldi	r24, 0xE1	; 225
    385a:	9a e1       	ldi	r25, 0x1A	; 26
    385c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <xTaskCreate>
	xTaskCreate(tempAndHumidityTask, "temp&hum task", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    3860:	01 e0       	ldi	r16, 0x01	; 1
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	40 ec       	ldi	r20, 0xC0	; 192
    3868:	50 e0       	ldi	r21, 0x00	; 0
    386a:	6f ed       	ldi	r22, 0xDF	; 223
    386c:	75 e0       	ldi	r23, 0x05	; 5
    386e:	80 e3       	ldi	r24, 0x30	; 48
    3870:	99 e1       	ldi	r25, 0x19	; 25
    3872:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <xTaskCreate>
	xTaskCreate(co2Task, "co2 task", configMINIMAL_STACK_SIZE, NULL,1,NULL);
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	40 ec       	ldi	r20, 0xC0	; 192
    387c:	50 e0       	ldi	r21, 0x00	; 0
    387e:	6d ee       	ldi	r22, 0xED	; 237
    3880:	75 e0       	ldi	r23, 0x05	; 5
    3882:	88 e0       	ldi	r24, 0x08	; 8
    3884:	91 e0       	ldi	r25, 0x01	; 1
    3886:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <xTaskCreate>
	xTaskCreate(lightTask,"light task",configMINIMAL_STACK_SIZE,NULL,1,NULL);
    388a:	20 e0       	ldi	r18, 0x00	; 0
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	40 ec       	ldi	r20, 0xC0	; 192
    3890:	50 e0       	ldi	r21, 0x00	; 0
    3892:	66 ef       	ldi	r22, 0xF6	; 246
    3894:	75 e0       	ldi	r23, 0x05	; 5
    3896:	89 ea       	ldi	r24, 0xA9	; 169
    3898:	99 e1       	ldi	r25, 0x19	; 25
    389a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <xTaskCreate>
	//xTaskCreate(lightMotorTask,"light motor",configMINIMAL_STACK_SIZE, NULL, 2, NULL);
	//xTaskCreate(humidityMotorTask,"Humidity Motor task",configMINIMAL_STACK_SIZE,NULL,2,NULL);
	//xTaskCreate(lightMotorTask,"Light Motor task",configMINIMAL_STACK_SIZE,NULL,2,NULL);
	
	hardware_semaphore = xSemaphoreCreateMutex();
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	0e 94 22 06 	call	0xc44	; 0xc44 <xQueueCreateMutex>
    38a4:	90 93 19 15 	sts	0x1519, r25	; 0x801519 <hardware_semaphore+0x1>
    38a8:	80 93 18 15 	sts	0x1518, r24	; 0x801518 <hardware_semaphore>
	if((hardware_semaphore)!=NULL){
    38ac:	00 97       	sbiw	r24, 0x00	; 0
    38ae:	41 f0       	breq	.+16     	; 0x38c0 <main+0x7c>
		xSemaphoreGive((hardware_semaphore));
    38b0:	00 e0       	ldi	r16, 0x00	; 0
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	a9 01       	movw	r20, r18
    38b8:	60 e0       	ldi	r22, 0x00	; 0
    38ba:	70 e0       	ldi	r23, 0x00	; 0
    38bc:	0e 94 7e 05 	call	0xafc	; 0xafc <xQueueGenericSend>
	}
	
	printf("Program Started!!\n");
    38c0:	81 e0       	ldi	r24, 0x01	; 1
    38c2:	96 e0       	ldi	r25, 0x06	; 6
    38c4:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    38c8:	0e 94 57 0d 	call	0x1aae	; 0x1aae <vTaskStartScheduler>
    38cc:	ff cf       	rjmp	.-2      	; 0x38cc <main+0x88>

000038ce <__fixunssfsi>:
    38ce:	33 d0       	rcall	.+102    	; 0x3936 <__fp_splitA>
    38d0:	88 f0       	brcs	.+34     	; 0x38f4 <__fixunssfsi+0x26>
    38d2:	9f 57       	subi	r25, 0x7F	; 127
    38d4:	90 f0       	brcs	.+36     	; 0x38fa <__fixunssfsi+0x2c>
    38d6:	b9 2f       	mov	r27, r25
    38d8:	99 27       	eor	r25, r25
    38da:	b7 51       	subi	r27, 0x17	; 23
    38dc:	a0 f0       	brcs	.+40     	; 0x3906 <__fixunssfsi+0x38>
    38de:	d1 f0       	breq	.+52     	; 0x3914 <__fixunssfsi+0x46>
    38e0:	66 0f       	add	r22, r22
    38e2:	77 1f       	adc	r23, r23
    38e4:	88 1f       	adc	r24, r24
    38e6:	99 1f       	adc	r25, r25
    38e8:	1a f0       	brmi	.+6      	; 0x38f0 <__fixunssfsi+0x22>
    38ea:	ba 95       	dec	r27
    38ec:	c9 f7       	brne	.-14     	; 0x38e0 <__fixunssfsi+0x12>
    38ee:	12 c0       	rjmp	.+36     	; 0x3914 <__fixunssfsi+0x46>
    38f0:	b1 30       	cpi	r27, 0x01	; 1
    38f2:	81 f0       	breq	.+32     	; 0x3914 <__fixunssfsi+0x46>
    38f4:	3a d0       	rcall	.+116    	; 0x396a <__fp_zero>
    38f6:	b1 e0       	ldi	r27, 0x01	; 1
    38f8:	08 95       	ret
    38fa:	37 c0       	rjmp	.+110    	; 0x396a <__fp_zero>
    38fc:	67 2f       	mov	r22, r23
    38fe:	78 2f       	mov	r23, r24
    3900:	88 27       	eor	r24, r24
    3902:	b8 5f       	subi	r27, 0xF8	; 248
    3904:	39 f0       	breq	.+14     	; 0x3914 <__fixunssfsi+0x46>
    3906:	b9 3f       	cpi	r27, 0xF9	; 249
    3908:	cc f3       	brlt	.-14     	; 0x38fc <__fixunssfsi+0x2e>
    390a:	86 95       	lsr	r24
    390c:	77 95       	ror	r23
    390e:	67 95       	ror	r22
    3910:	b3 95       	inc	r27
    3912:	d9 f7       	brne	.-10     	; 0x390a <__fixunssfsi+0x3c>
    3914:	3e f4       	brtc	.+14     	; 0x3924 <__fixunssfsi+0x56>
    3916:	90 95       	com	r25
    3918:	80 95       	com	r24
    391a:	70 95       	com	r23
    391c:	61 95       	neg	r22
    391e:	7f 4f       	sbci	r23, 0xFF	; 255
    3920:	8f 4f       	sbci	r24, 0xFF	; 255
    3922:	9f 4f       	sbci	r25, 0xFF	; 255
    3924:	08 95       	ret

00003926 <__fp_split3>:
    3926:	57 fd       	sbrc	r21, 7
    3928:	90 58       	subi	r25, 0x80	; 128
    392a:	44 0f       	add	r20, r20
    392c:	55 1f       	adc	r21, r21
    392e:	59 f0       	breq	.+22     	; 0x3946 <__fp_splitA+0x10>
    3930:	5f 3f       	cpi	r21, 0xFF	; 255
    3932:	71 f0       	breq	.+28     	; 0x3950 <__fp_splitA+0x1a>
    3934:	47 95       	ror	r20

00003936 <__fp_splitA>:
    3936:	88 0f       	add	r24, r24
    3938:	97 fb       	bst	r25, 7
    393a:	99 1f       	adc	r25, r25
    393c:	61 f0       	breq	.+24     	; 0x3956 <__fp_splitA+0x20>
    393e:	9f 3f       	cpi	r25, 0xFF	; 255
    3940:	79 f0       	breq	.+30     	; 0x3960 <__fp_splitA+0x2a>
    3942:	87 95       	ror	r24
    3944:	08 95       	ret
    3946:	12 16       	cp	r1, r18
    3948:	13 06       	cpc	r1, r19
    394a:	14 06       	cpc	r1, r20
    394c:	55 1f       	adc	r21, r21
    394e:	f2 cf       	rjmp	.-28     	; 0x3934 <__fp_split3+0xe>
    3950:	46 95       	lsr	r20
    3952:	f1 df       	rcall	.-30     	; 0x3936 <__fp_splitA>
    3954:	08 c0       	rjmp	.+16     	; 0x3966 <__fp_splitA+0x30>
    3956:	16 16       	cp	r1, r22
    3958:	17 06       	cpc	r1, r23
    395a:	18 06       	cpc	r1, r24
    395c:	99 1f       	adc	r25, r25
    395e:	f1 cf       	rjmp	.-30     	; 0x3942 <__fp_splitA+0xc>
    3960:	86 95       	lsr	r24
    3962:	71 05       	cpc	r23, r1
    3964:	61 05       	cpc	r22, r1
    3966:	08 94       	sec
    3968:	08 95       	ret

0000396a <__fp_zero>:
    396a:	e8 94       	clt

0000396c <__fp_szero>:
    396c:	bb 27       	eor	r27, r27
    396e:	66 27       	eor	r22, r22
    3970:	77 27       	eor	r23, r23
    3972:	cb 01       	movw	r24, r22
    3974:	97 f9       	bld	r25, 7
    3976:	08 95       	ret

00003978 <_hihTwiCallback>:
    3978:	65 30       	cpi	r22, 0x05	; 5
    397a:	f1 f4       	brne	.+60     	; 0x39b8 <_hihTwiCallback+0x40>
    397c:	fa 01       	movw	r30, r20
    397e:	80 81       	ld	r24, Z
    3980:	8f 73       	andi	r24, 0x3F	; 63
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	98 2f       	mov	r25, r24
    3986:	88 27       	eor	r24, r24
    3988:	21 81       	ldd	r18, Z+1	; 0x01
    398a:	82 2b       	or	r24, r18
    398c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3990:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3994:	82 81       	ldd	r24, Z+2	; 0x02
    3996:	f0 e4       	ldi	r31, 0x40	; 64
    3998:	8f 9f       	mul	r24, r31
    399a:	c0 01       	movw	r24, r0
    399c:	11 24       	eor	r1, r1
    399e:	fa 01       	movw	r30, r20
    39a0:	23 81       	ldd	r18, Z+3	; 0x03
    39a2:	26 95       	lsr	r18
    39a4:	26 95       	lsr	r18
    39a6:	82 2b       	or	r24, r18
    39a8:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    39ac:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	80 93 cb 13 	sts	0x13CB, r24	; 0x8013cb <_measuringIsReady>
    39b6:	08 95       	ret
    39b8:	64 30       	cpi	r22, 0x04	; 4
    39ba:	51 f0       	breq	.+20     	; 0x39d0 <_hihTwiCallback+0x58>
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	90 e4       	ldi	r25, 0x40	; 64
    39c0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    39c4:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    39c8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    39cc:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    39d0:	08 95       	ret

000039d2 <hih8120_initialise>:
    39d2:	0f 93       	push	r16
    39d4:	1f 93       	push	r17
    39d6:	0c eb       	ldi	r16, 0xBC	; 188
    39d8:	1c e1       	ldi	r17, 0x1C	; 28
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	34 e2       	ldi	r19, 0x24	; 36
    39de:	44 ef       	ldi	r20, 0xF4	; 244
    39e0:	50 e0       	ldi	r21, 0x00	; 0
    39e2:	60 e0       	ldi	r22, 0x00	; 0
    39e4:	87 e2       	ldi	r24, 0x27	; 39
    39e6:	0e 94 7d 29 	call	0x52fa	; 0x52fa <twiCreate>
    39ea:	90 93 cd 13 	sts	0x13CD, r25	; 0x8013cd <_hih8120Handler+0x1>
    39ee:	80 93 cc 13 	sts	0x13CC, r24	; 0x8013cc <_hih8120Handler>
    39f2:	21 e0       	ldi	r18, 0x01	; 1
    39f4:	89 2b       	or	r24, r25
    39f6:	09 f0       	breq	.+2      	; 0x39fa <hih8120_initialise+0x28>
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	82 2f       	mov	r24, r18
    39fc:	1f 91       	pop	r17
    39fe:	0f 91       	pop	r16
    3a00:	08 95       	ret

00003a02 <hih8120_wakeup>:
    3a02:	80 91 cc 13 	lds	r24, 0x13CC	; 0x8013cc <_hih8120Handler>
    3a06:	90 91 cd 13 	lds	r25, 0x13CD	; 0x8013cd <_hih8120Handler+0x1>
    3a0a:	00 97       	sbiw	r24, 0x00	; 0
    3a0c:	59 f0       	breq	.+22     	; 0x3a24 <hih8120_wakeup+0x22>
    3a0e:	40 e0       	ldi	r20, 0x00	; 0
    3a10:	60 e0       	ldi	r22, 0x00	; 0
    3a12:	70 e0       	ldi	r23, 0x00	; 0
    3a14:	0e 94 ce 29 	call	0x539c	; 0x539c <twiTransmit>
    3a18:	84 30       	cpi	r24, 0x04	; 4
    3a1a:	31 f4       	brne	.+12     	; 0x3a28 <hih8120_wakeup+0x26>
    3a1c:	10 92 cb 13 	sts	0x13CB, r1	; 0x8013cb <_measuringIsReady>
    3a20:	80 e0       	ldi	r24, 0x00	; 0
    3a22:	08 95       	ret
    3a24:	82 e0       	ldi	r24, 0x02	; 2
    3a26:	08 95       	ret
    3a28:	83 e0       	ldi	r24, 0x03	; 3
    3a2a:	08 95       	ret

00003a2c <hih8120_measure>:
    3a2c:	80 91 cc 13 	lds	r24, 0x13CC	; 0x8013cc <_hih8120Handler>
    3a30:	90 91 cd 13 	lds	r25, 0x13CD	; 0x8013cd <_hih8120Handler+0x1>
    3a34:	00 97       	sbiw	r24, 0x00	; 0
    3a36:	39 f0       	breq	.+14     	; 0x3a46 <hih8120_measure+0x1a>
    3a38:	64 e0       	ldi	r22, 0x04	; 4
    3a3a:	0e 94 1a 2a 	call	0x5434	; 0x5434 <twiReceive>
    3a3e:	85 30       	cpi	r24, 0x05	; 5
    3a40:	21 f0       	breq	.+8      	; 0x3a4a <hih8120_measure+0x1e>
    3a42:	83 e0       	ldi	r24, 0x03	; 3
    3a44:	08 95       	ret
    3a46:	82 e0       	ldi	r24, 0x02	; 2
    3a48:	08 95       	ret
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
    3a4c:	08 95       	ret

00003a4e <hih8120_getHumidity>:
    3a4e:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3a52:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <__floatunsisf>
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	48 ec       	ldi	r20, 0xC8	; 200
    3a64:	52 e4       	ldi	r21, 0x42	; 66
    3a66:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__mulsf3>
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	38 ef       	ldi	r19, 0xF8	; 248
    3a6e:	4f e7       	ldi	r20, 0x7F	; 127
    3a70:	56 e4       	ldi	r21, 0x46	; 70
    3a72:	0c 94 8d 2b 	jmp	0x571a	; 0x571a <__divsf3>
    3a76:	08 95       	ret

00003a78 <hih8120_getHumidityPercent_x10>:
    3a78:	ea df       	rcall	.-44     	; 0x3a4e <hih8120_getHumidity>
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	40 e2       	ldi	r20, 0x20	; 32
    3a80:	51 e4       	ldi	r21, 0x41	; 65
    3a82:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__mulsf3>
    3a86:	23 df       	rcall	.-442    	; 0x38ce <__fixunssfsi>
    3a88:	cb 01       	movw	r24, r22
    3a8a:	08 95       	ret

00003a8c <hih8120_getTemperature>:
    3a8c:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3a90:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <__floatunsisf>
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	45 e2       	ldi	r20, 0x25	; 37
    3aa2:	53 e4       	ldi	r21, 0x43	; 67
    3aa4:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__mulsf3>
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	38 ef       	ldi	r19, 0xF8	; 248
    3aac:	4f e7       	ldi	r20, 0x7F	; 127
    3aae:	56 e4       	ldi	r21, 0x46	; 70
    3ab0:	0e 94 8d 2b 	call	0x571a	; 0x571a <__divsf3>
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	40 e2       	ldi	r20, 0x20	; 32
    3aba:	52 e4       	ldi	r21, 0x42	; 66
    3abc:	0c 94 26 2b 	jmp	0x564c	; 0x564c <__subsf3>
    3ac0:	08 95       	ret

00003ac2 <hih8120_getTemperature_x10>:
    3ac2:	e4 df       	rcall	.-56     	; 0x3a8c <hih8120_getTemperature>
    3ac4:	20 e0       	ldi	r18, 0x00	; 0
    3ac6:	30 e0       	ldi	r19, 0x00	; 0
    3ac8:	40 e2       	ldi	r20, 0x20	; 32
    3aca:	51 e4       	ldi	r21, 0x41	; 65
    3acc:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__mulsf3>
    3ad0:	0e 94 f8 2b 	call	0x57f0	; 0x57f0 <__fixsfsi>
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	08 95       	ret

00003ad8 <_serialCallBack>:
    3ad8:	0f 93       	push	r16
    3ada:	1f 93       	push	r17
    3adc:	cf 93       	push	r28
    3ade:	df 93       	push	r29
    3ae0:	1f 92       	push	r1
    3ae2:	1f 92       	push	r1
    3ae4:	cd b7       	in	r28, 0x3d	; 61
    3ae6:	de b7       	in	r29, 0x3e	; 62
    3ae8:	8c 01       	movw	r16, r24
    3aea:	19 82       	std	Y+1, r1	; 0x01
    3aec:	2d c0       	rjmp	.+90     	; 0x3b48 <_serialCallBack+0x70>
    3aee:	e0 91 05 14 	lds	r30, 0x1405	; 0x801405 <rec_buf_inp.2878>
    3af2:	ec 32       	cpi	r30, 0x2C	; 44
    3af4:	50 f4       	brcc	.+20     	; 0x3b0a <_serialCallBack+0x32>
    3af6:	81 e0       	ldi	r24, 0x01	; 1
    3af8:	8e 0f       	add	r24, r30
    3afa:	80 93 05 14 	sts	0x1405, r24	; 0x801405 <rec_buf_inp.2878>
    3afe:	f0 e0       	ldi	r31, 0x00	; 0
    3b00:	e9 5c       	subi	r30, 0xC9	; 201
    3b02:	fb 4e       	sbci	r31, 0xEB	; 235
    3b04:	8a 81       	ldd	r24, Y+2	; 0x02
    3b06:	80 83       	st	Z, r24
    3b08:	02 c0       	rjmp	.+4      	; 0x3b0e <_serialCallBack+0x36>
    3b0a:	10 92 05 14 	sts	0x1405, r1	; 0x801405 <rec_buf_inp.2878>
    3b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b10:	8a 30       	cpi	r24, 0x0A	; 10
    3b12:	d1 f4       	brne	.+52     	; 0x3b48 <_serialCallBack+0x70>
    3b14:	40 91 05 14 	lds	r20, 0x1405	; 0x801405 <rec_buf_inp.2878>
    3b18:	50 e0       	ldi	r21, 0x00	; 0
    3b1a:	fa 01       	movw	r30, r20
    3b1c:	eb 5c       	subi	r30, 0xCB	; 203
    3b1e:	fb 4e       	sbci	r31, 0xEB	; 235
    3b20:	10 82       	st	Z, r1
    3b22:	41 50       	subi	r20, 0x01	; 1
    3b24:	51 09       	sbc	r21, r1
    3b26:	9e 01       	movw	r18, r28
    3b28:	2f 5f       	subi	r18, 0xFF	; 255
    3b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b2c:	67 e3       	ldi	r22, 0x37	; 55
    3b2e:	74 e1       	ldi	r23, 0x14	; 20
    3b30:	80 91 08 14 	lds	r24, 0x1408	; 0x801408 <_serialReplyBufferHandle>
    3b34:	90 91 09 14 	lds	r25, 0x1409	; 0x801409 <_serialReplyBufferHandle+0x1>
    3b38:	0e 94 2d 0a 	call	0x145a	; 0x145a <xStreamBufferSendFromISR>
    3b3c:	89 81       	ldd	r24, Y+1	; 0x01
    3b3e:	81 11       	cpse	r24, r1
    3b40:	0e 94 66 03 	call	0x6cc	; 0x6cc <vPortYield>
    3b44:	10 92 05 14 	sts	0x1405, r1	; 0x801405 <rec_buf_inp.2878>
    3b48:	be 01       	movw	r22, r28
    3b4a:	6e 5f       	subi	r22, 0xFE	; 254
    3b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b4e:	c8 01       	movw	r24, r16
    3b50:	3b d6       	rcall	.+3190   	; 0x47c8 <serial_getByte>
    3b52:	88 23       	and	r24, r24
    3b54:	61 f2       	breq	.-104    	; 0x3aee <_serialCallBack+0x16>
    3b56:	0f 90       	pop	r0
    3b58:	0f 90       	pop	r0
    3b5a:	df 91       	pop	r29
    3b5c:	cf 91       	pop	r28
    3b5e:	1f 91       	pop	r17
    3b60:	0f 91       	pop	r16
    3b62:	08 95       	ret

00003b64 <_uploadMessage>:
    3b64:	0f 93       	push	r16
    3b66:	1f 93       	push	r17
    3b68:	cf 93       	push	r28
    3b6a:	df 93       	push	r29
    3b6c:	8c 01       	movw	r16, r24
    3b6e:	eb 01       	movw	r28, r22
    3b70:	80 91 08 14 	lds	r24, 0x1408	; 0x801408 <_serialReplyBufferHandle>
    3b74:	90 91 09 14 	lds	r25, 0x1409	; 0x801409 <_serialReplyBufferHandle+0x1>
    3b78:	0e 94 3a 09 	call	0x1274	; 0x1274 <xStreamBufferReset>
    3b7c:	b8 01       	movw	r22, r16
    3b7e:	8e ec       	ldi	r24, 0xCE	; 206
    3b80:	93 e1       	ldi	r25, 0x13	; 19
    3b82:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <strcpy>
    3b86:	20 97       	sbiw	r28, 0x00	; 0
    3b88:	79 f0       	breq	.+30     	; 0x3ba8 <_uploadMessage+0x44>
    3b8a:	ee ec       	ldi	r30, 0xCE	; 206
    3b8c:	f3 e1       	ldi	r31, 0x13	; 19
    3b8e:	01 90       	ld	r0, Z+
    3b90:	00 20       	and	r0, r0
    3b92:	e9 f7       	brne	.-6      	; 0x3b8e <_uploadMessage+0x2a>
    3b94:	31 97       	sbiw	r30, 0x01	; 1
    3b96:	80 e2       	ldi	r24, 0x20	; 32
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	91 83       	std	Z+1, r25	; 0x01
    3b9c:	80 83       	st	Z, r24
    3b9e:	be 01       	movw	r22, r28
    3ba0:	8e ec       	ldi	r24, 0xCE	; 206
    3ba2:	93 e1       	ldi	r25, 0x13	; 19
    3ba4:	0e 94 76 2e 	call	0x5cec	; 0x5cec <strcat>
    3ba8:	ee ec       	ldi	r30, 0xCE	; 206
    3baa:	f3 e1       	ldi	r31, 0x13	; 19
    3bac:	df 01       	movw	r26, r30
    3bae:	0d 90       	ld	r0, X+
    3bb0:	00 20       	and	r0, r0
    3bb2:	e9 f7       	brne	.-6      	; 0x3bae <_uploadMessage+0x4a>
    3bb4:	11 97       	sbiw	r26, 0x01	; 1
    3bb6:	8d e0       	ldi	r24, 0x0D	; 13
    3bb8:	9a e0       	ldi	r25, 0x0A	; 10
    3bba:	11 96       	adiw	r26, 0x01	; 1
    3bbc:	9c 93       	st	X, r25
    3bbe:	8e 93       	st	-X, r24
    3bc0:	12 96       	adiw	r26, 0x02	; 2
    3bc2:	1c 92       	st	X, r1
    3bc4:	01 90       	ld	r0, Z+
    3bc6:	00 20       	and	r0, r0
    3bc8:	e9 f7       	brne	.-6      	; 0x3bc4 <_uploadMessage+0x60>
    3bca:	31 97       	sbiw	r30, 0x01	; 1
    3bcc:	ee 5c       	subi	r30, 0xCE	; 206
    3bce:	f3 41       	sbci	r31, 0x13	; 19
    3bd0:	ae 2f       	mov	r26, r30
    3bd2:	8e ec       	ldi	r24, 0xCE	; 206
    3bd4:	93 e1       	ldi	r25, 0x13	; 19
    3bd6:	ac 01       	movw	r20, r24
    3bd8:	6a 2f       	mov	r22, r26
    3bda:	80 91 0a 14 	lds	r24, 0x140A	; 0x80140a <_rn2483_serial>
    3bde:	90 91 0b 14 	lds	r25, 0x140B	; 0x80140b <_rn2483_serial+0x1>
    3be2:	9d d5       	rcall	.+2874   	; 0x471e <serial_sendBytes>
    3be4:	81 11       	cpse	r24, r1
    3be6:	11 c0       	rjmp	.+34     	; 0x3c0a <_uploadMessage+0xa6>
    3be8:	08 e2       	ldi	r16, 0x28	; 40
    3bea:	15 e0       	ldi	r17, 0x05	; 5
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	4d e2       	ldi	r20, 0x2D	; 45
    3bf2:	50 e0       	ldi	r21, 0x00	; 0
    3bf4:	61 e9       	ldi	r22, 0x91	; 145
    3bf6:	74 e1       	ldi	r23, 0x14	; 20
    3bf8:	80 91 08 14 	lds	r24, 0x1408	; 0x801408 <_serialReplyBufferHandle>
    3bfc:	90 91 09 14 	lds	r25, 0x1409	; 0x801409 <_serialReplyBufferHandle+0x1>
    3c00:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <xStreamBufferReceive>
    3c04:	81 e9       	ldi	r24, 0x91	; 145
    3c06:	94 e1       	ldi	r25, 0x14	; 20
    3c08:	02 c0       	rjmp	.+4      	; 0x3c0e <_uploadMessage+0xaa>
    3c0a:	80 e0       	ldi	r24, 0x00	; 0
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	df 91       	pop	r29
    3c10:	cf 91       	pop	r28
    3c12:	1f 91       	pop	r17
    3c14:	0f 91       	pop	r16
    3c16:	08 95       	ret

00003c18 <_reply2ReturnCode>:
    3c18:	2f 92       	push	r2
    3c1a:	3f 92       	push	r3
    3c1c:	4f 92       	push	r4
    3c1e:	5f 92       	push	r5
    3c20:	6f 92       	push	r6
    3c22:	7f 92       	push	r7
    3c24:	8f 92       	push	r8
    3c26:	9f 92       	push	r9
    3c28:	af 92       	push	r10
    3c2a:	bf 92       	push	r11
    3c2c:	cf 92       	push	r12
    3c2e:	df 92       	push	r13
    3c30:	ef 92       	push	r14
    3c32:	ff 92       	push	r15
    3c34:	0f 93       	push	r16
    3c36:	1f 93       	push	r17
    3c38:	cf 93       	push	r28
    3c3a:	df 93       	push	r29
    3c3c:	5c 01       	movw	r10, r24
    3c3e:	fc 01       	movw	r30, r24
    3c40:	01 90       	ld	r0, Z+
    3c42:	00 20       	and	r0, r0
    3c44:	e9 f7       	brne	.-6      	; 0x3c40 <_reply2ReturnCode+0x28>
    3c46:	31 97       	sbiw	r30, 0x01	; 1
    3c48:	6f 01       	movw	r12, r30
    3c4a:	c8 1a       	sub	r12, r24
    3c4c:	d9 0a       	sbc	r13, r25
    3c4e:	5c 2c       	mov	r5, r12
    3c50:	0f 2e       	mov	r0, r31
    3c52:	fc ea       	ldi	r31, 0xAC	; 172
    3c54:	8f 2e       	mov	r8, r31
    3c56:	f8 e0       	ldi	r31, 0x08	; 8
    3c58:	9f 2e       	mov	r9, r31
    3c5a:	f0 2d       	mov	r31, r0
    3c5c:	e1 2c       	mov	r14, r1
    3c5e:	f1 2c       	mov	r15, r1
    3c60:	4c 2c       	mov	r4, r12
    3c62:	37 01       	movw	r6, r14
    3c64:	f4 01       	movw	r30, r8
    3c66:	01 81       	ldd	r16, Z+1	; 0x01
    3c68:	12 81       	ldd	r17, Z+2	; 0x02
    3c6a:	e8 01       	movw	r28, r16
    3c6c:	09 90       	ld	r0, Y+
    3c6e:	00 20       	and	r0, r0
    3c70:	e9 f7       	brne	.-6      	; 0x3c6c <_reply2ReturnCode+0x54>
    3c72:	21 97       	sbiw	r28, 0x01	; 1
    3c74:	c0 1b       	sub	r28, r16
    3c76:	d1 0b       	sbc	r29, r17
    3c78:	3c 2e       	mov	r3, r28
    3c7a:	f9 e0       	ldi	r31, 0x09	; 9
    3c7c:	cf 16       	cp	r12, r31
    3c7e:	d1 04       	cpc	r13, r1
    3c80:	58 f0       	brcs	.+22     	; 0x3c98 <_reply2ReturnCode+0x80>
    3c82:	f4 01       	movw	r30, r8
    3c84:	20 80       	ld	r2, Z
    3c86:	fe e0       	ldi	r31, 0x0E	; 14
    3c88:	2f 12       	cpse	r2, r31
    3c8a:	06 c0       	rjmp	.+12     	; 0x3c98 <_reply2ReturnCode+0x80>
    3c8c:	b8 01       	movw	r22, r16
    3c8e:	c5 01       	movw	r24, r10
    3c90:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <strcasestr>
    3c94:	89 2b       	or	r24, r25
    3c96:	09 f5       	brne	.+66     	; 0x3cda <_reply2ReturnCode+0xc2>
    3c98:	44 2d       	mov	r20, r4
    3c9a:	35 14       	cp	r3, r5
    3c9c:	08 f4       	brcc	.+2      	; 0x3ca0 <_reply2ReturnCode+0x88>
    3c9e:	4c 2f       	mov	r20, r28
    3ca0:	50 e0       	ldi	r21, 0x00	; 0
    3ca2:	b8 01       	movw	r22, r16
    3ca4:	c5 01       	movw	r24, r10
    3ca6:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <strncasecmp>
    3caa:	89 2b       	or	r24, r25
    3cac:	49 f4       	brne	.+18     	; 0x3cc0 <_reply2ReturnCode+0xa8>
    3cae:	f3 01       	movw	r30, r6
    3cb0:	ee 0f       	add	r30, r30
    3cb2:	ff 1f       	adc	r31, r31
    3cb4:	e6 0d       	add	r30, r6
    3cb6:	f7 1d       	adc	r31, r7
    3cb8:	e4 55       	subi	r30, 0x54	; 84
    3cba:	f7 4f       	sbci	r31, 0xF7	; 247
    3cbc:	20 80       	ld	r2, Z
    3cbe:	0d c0       	rjmp	.+26     	; 0x3cda <_reply2ReturnCode+0xc2>
    3cc0:	8f ef       	ldi	r24, 0xFF	; 255
    3cc2:	e8 1a       	sub	r14, r24
    3cc4:	f8 0a       	sbc	r15, r24
    3cc6:	e3 e0       	ldi	r30, 0x03	; 3
    3cc8:	8e 0e       	add	r8, r30
    3cca:	91 1c       	adc	r9, r1
    3ccc:	f1 e1       	ldi	r31, 0x11	; 17
    3cce:	ef 16       	cp	r14, r31
    3cd0:	f1 04       	cpc	r15, r1
    3cd2:	39 f6       	brne	.-114    	; 0x3c62 <_reply2ReturnCode+0x4a>
    3cd4:	68 94       	set
    3cd6:	22 24       	eor	r2, r2
    3cd8:	24 f8       	bld	r2, 4
    3cda:	82 2d       	mov	r24, r2
    3cdc:	df 91       	pop	r29
    3cde:	cf 91       	pop	r28
    3ce0:	1f 91       	pop	r17
    3ce2:	0f 91       	pop	r16
    3ce4:	ff 90       	pop	r15
    3ce6:	ef 90       	pop	r14
    3ce8:	df 90       	pop	r13
    3cea:	cf 90       	pop	r12
    3cec:	bf 90       	pop	r11
    3cee:	af 90       	pop	r10
    3cf0:	9f 90       	pop	r9
    3cf2:	8f 90       	pop	r8
    3cf4:	7f 90       	pop	r7
    3cf6:	6f 90       	pop	r6
    3cf8:	5f 90       	pop	r5
    3cfa:	4f 90       	pop	r4
    3cfc:	3f 90       	pop	r3
    3cfe:	2f 90       	pop	r2
    3d00:	08 95       	ret

00003d02 <_uploadMessageRc>:
    3d02:	30 df       	rcall	.-416    	; 0x3b64 <_uploadMessage>
    3d04:	89 cf       	rjmp	.-238    	; 0x3c18 <_reply2ReturnCode>
    3d06:	08 95       	ret

00003d08 <lora_driver_flushBuffers>:
    3d08:	80 91 08 14 	lds	r24, 0x1408	; 0x801408 <_serialReplyBufferHandle>
    3d0c:	90 91 09 14 	lds	r25, 0x1409	; 0x801409 <_serialReplyBufferHandle+0x1>
    3d10:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <xStreamBufferReset>
    3d14:	08 95       	ret

00003d16 <lora_driver_initialise>:
    3d16:	8f 92       	push	r8
    3d18:	9f 92       	push	r9
    3d1a:	af 92       	push	r10
    3d1c:	cf 92       	push	r12
    3d1e:	ef 92       	push	r14
    3d20:	0f 93       	push	r16
    3d22:	1f 93       	push	r17
    3d24:	cf 93       	push	r28
    3d26:	c8 2f       	mov	r28, r24
    3d28:	8b 01       	movw	r16, r22
    3d2a:	41 e0       	ldi	r20, 0x01	; 1
    3d2c:	60 e0       	ldi	r22, 0x00	; 0
    3d2e:	70 e0       	ldi	r23, 0x00	; 0
    3d30:	88 ec       	ldi	r24, 0xC8	; 200
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	0e 94 08 09 	call	0x1210	; 0x1210 <xStreamBufferGenericCreate>
    3d38:	90 93 09 14 	sts	0x1409, r25	; 0x801409 <_serialReplyBufferHandle+0x1>
    3d3c:	80 93 08 14 	sts	0x1408, r24	; 0x801408 <_serialReplyBufferHandle>
    3d40:	10 93 07 14 	sts	0x1407, r17	; 0x801407 <_downlinkMessageBuffer+0x1>
    3d44:	00 93 06 14 	sts	0x1406, r16	; 0x801406 <_downlinkMessageBuffer>
    3d48:	0f 2e       	mov	r0, r31
    3d4a:	fc e6       	ldi	r31, 0x6C	; 108
    3d4c:	8f 2e       	mov	r8, r31
    3d4e:	fd e1       	ldi	r31, 0x1D	; 29
    3d50:	9f 2e       	mov	r9, r31
    3d52:	f0 2d       	mov	r31, r0
    3d54:	68 94       	set
    3d56:	aa 24       	eor	r10, r10
    3d58:	a6 f8       	bld	r10, 6
    3d5a:	68 94       	set
    3d5c:	cc 24       	eor	r12, r12
    3d5e:	c6 f8       	bld	r12, 6
    3d60:	e1 2c       	mov	r14, r1
    3d62:	00 e0       	ldi	r16, 0x00	; 0
    3d64:	23 e0       	ldi	r18, 0x03	; 3
    3d66:	40 e0       	ldi	r20, 0x00	; 0
    3d68:	51 ee       	ldi	r21, 0xE1	; 225
    3d6a:	60 e0       	ldi	r22, 0x00	; 0
    3d6c:	70 e0       	ldi	r23, 0x00	; 0
    3d6e:	8c 2f       	mov	r24, r28
    3d70:	06 d4       	rcall	.+2060   	; 0x457e <serial_create>
    3d72:	90 93 0b 14 	sts	0x140B, r25	; 0x80140b <_rn2483_serial+0x1>
    3d76:	80 93 0a 14 	sts	0x140A, r24	; 0x80140a <_rn2483_serial>
    3d7a:	e7 e0       	ldi	r30, 0x07	; 7
    3d7c:	f1 e0       	ldi	r31, 0x01	; 1
    3d7e:	80 81       	ld	r24, Z
    3d80:	80 61       	ori	r24, 0x10	; 16
    3d82:	80 83       	st	Z, r24
    3d84:	cf 91       	pop	r28
    3d86:	1f 91       	pop	r17
    3d88:	0f 91       	pop	r16
    3d8a:	ef 90       	pop	r14
    3d8c:	cf 90       	pop	r12
    3d8e:	af 90       	pop	r10
    3d90:	9f 90       	pop	r9
    3d92:	8f 90       	pop	r8
    3d94:	08 95       	ret

00003d96 <lora_driver_resetRn2483>:
    3d96:	88 23       	and	r24, r24
    3d98:	31 f0       	breq	.+12     	; 0x3da6 <lora_driver_resetRn2483+0x10>
    3d9a:	e8 e0       	ldi	r30, 0x08	; 8
    3d9c:	f1 e0       	ldi	r31, 0x01	; 1
    3d9e:	80 81       	ld	r24, Z
    3da0:	8f 7e       	andi	r24, 0xEF	; 239
    3da2:	80 83       	st	Z, r24
    3da4:	08 95       	ret
    3da6:	e8 e0       	ldi	r30, 0x08	; 8
    3da8:	f1 e0       	ldi	r31, 0x01	; 1
    3daa:	80 81       	ld	r24, Z
    3dac:	80 61       	ori	r24, 0x10	; 16
    3dae:	80 83       	st	Z, r24
    3db0:	08 95       	ret

00003db2 <lora_driver_rn2483FactoryReset>:
    3db2:	60 e0       	ldi	r22, 0x00	; 0
    3db4:	70 e0       	ldi	r23, 0x00	; 0
    3db6:	82 e3       	ldi	r24, 0x32	; 50
    3db8:	96 e0       	ldi	r25, 0x06	; 6
    3dba:	d4 de       	rcall	.-600    	; 0x3b64 <_uploadMessage>
    3dbc:	e1 e9       	ldi	r30, 0x91	; 145
    3dbe:	f4 e1       	ldi	r31, 0x14	; 20
    3dc0:	01 90       	ld	r0, Z+
    3dc2:	00 20       	and	r0, r0
    3dc4:	e9 f7       	brne	.-6      	; 0x3dc0 <lora_driver_rn2483FactoryReset+0xe>
    3dc6:	31 97       	sbiw	r30, 0x01	; 1
    3dc8:	e1 59       	subi	r30, 0x91	; 145
    3dca:	f4 41       	sbci	r31, 0x14	; 20
    3dcc:	81 e0       	ldi	r24, 0x01	; 1
    3dce:	75 97       	sbiw	r30, 0x15	; 21
    3dd0:	08 f0       	brcs	.+2      	; 0x3dd4 <lora_driver_rn2483FactoryReset+0x22>
    3dd2:	80 e0       	ldi	r24, 0x00	; 0
    3dd4:	08 95       	ret

00003dd6 <lora_driver_getRn2483Hweui>:
    3dd6:	cf 93       	push	r28
    3dd8:	df 93       	push	r29
    3dda:	ec 01       	movw	r28, r24
    3ddc:	60 e0       	ldi	r22, 0x00	; 0
    3dde:	70 e0       	ldi	r23, 0x00	; 0
    3de0:	83 e4       	ldi	r24, 0x43	; 67
    3de2:	96 e0       	ldi	r25, 0x06	; 6
    3de4:	bf de       	rcall	.-642    	; 0x3b64 <_uploadMessage>
    3de6:	e1 e9       	ldi	r30, 0x91	; 145
    3de8:	f4 e1       	ldi	r31, 0x14	; 20
    3dea:	01 90       	ld	r0, Z+
    3dec:	00 20       	and	r0, r0
    3dee:	e9 f7       	brne	.-6      	; 0x3dea <lora_driver_getRn2483Hweui+0x14>
    3df0:	e2 5a       	subi	r30, 0xA2	; 162
    3df2:	f4 41       	sbci	r31, 0x14	; 20
    3df4:	39 f4       	brne	.+14     	; 0x3e04 <lora_driver_getRn2483Hweui+0x2e>
    3df6:	61 e9       	ldi	r22, 0x91	; 145
    3df8:	74 e1       	ldi	r23, 0x14	; 20
    3dfa:	ce 01       	movw	r24, r28
    3dfc:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <strcpy>
    3e00:	80 e0       	ldi	r24, 0x00	; 0
    3e02:	02 c0       	rjmp	.+4      	; 0x3e08 <lora_driver_getRn2483Hweui+0x32>
    3e04:	18 82       	st	Y, r1
    3e06:	81 e0       	ldi	r24, 0x01	; 1
    3e08:	df 91       	pop	r29
    3e0a:	cf 91       	pop	r28
    3e0c:	08 95       	ret

00003e0e <lora_driver_setDeviceIdentifier>:
    3e0e:	fc 01       	movw	r30, r24
    3e10:	01 90       	ld	r0, Z+
    3e12:	00 20       	and	r0, r0
    3e14:	e9 f7       	brne	.-6      	; 0x3e10 <lora_driver_setDeviceIdentifier+0x2>
    3e16:	9f 01       	movw	r18, r30
    3e18:	21 51       	subi	r18, 0x11	; 17
    3e1a:	31 09       	sbc	r19, r1
    3e1c:	28 17       	cp	r18, r24
    3e1e:	39 07       	cpc	r19, r25
    3e20:	29 f4       	brne	.+10     	; 0x3e2c <lora_driver_setDeviceIdentifier+0x1e>
    3e22:	bc 01       	movw	r22, r24
    3e24:	81 e7       	ldi	r24, 0x71	; 113
    3e26:	96 e0       	ldi	r25, 0x06	; 6
    3e28:	6c cf       	rjmp	.-296    	; 0x3d02 <_uploadMessageRc>
    3e2a:	08 95       	ret
    3e2c:	89 e0       	ldi	r24, 0x09	; 9
    3e2e:	08 95       	ret

00003e30 <lora_driver_setApplicationIdentifier>:
    3e30:	fc 01       	movw	r30, r24
    3e32:	01 90       	ld	r0, Z+
    3e34:	00 20       	and	r0, r0
    3e36:	e9 f7       	brne	.-6      	; 0x3e32 <lora_driver_setApplicationIdentifier+0x2>
    3e38:	9f 01       	movw	r18, r30
    3e3a:	21 51       	subi	r18, 0x11	; 17
    3e3c:	31 09       	sbc	r19, r1
    3e3e:	28 17       	cp	r18, r24
    3e40:	39 07       	cpc	r19, r25
    3e42:	29 f4       	brne	.+10     	; 0x3e4e <lora_driver_setApplicationIdentifier+0x1e>
    3e44:	bc 01       	movw	r22, r24
    3e46:	80 e8       	ldi	r24, 0x80	; 128
    3e48:	96 e0       	ldi	r25, 0x06	; 6
    3e4a:	5b cf       	rjmp	.-330    	; 0x3d02 <_uploadMessageRc>
    3e4c:	08 95       	ret
    3e4e:	89 e0       	ldi	r24, 0x09	; 9
    3e50:	08 95       	ret

00003e52 <lora_driver_setApplicationKey>:
    3e52:	fc 01       	movw	r30, r24
    3e54:	01 90       	ld	r0, Z+
    3e56:	00 20       	and	r0, r0
    3e58:	e9 f7       	brne	.-6      	; 0x3e54 <lora_driver_setApplicationKey+0x2>
    3e5a:	9f 01       	movw	r18, r30
    3e5c:	21 52       	subi	r18, 0x21	; 33
    3e5e:	31 09       	sbc	r19, r1
    3e60:	28 17       	cp	r18, r24
    3e62:	39 07       	cpc	r19, r25
    3e64:	29 f4       	brne	.+10     	; 0x3e70 <lora_driver_setApplicationKey+0x1e>
    3e66:	bc 01       	movw	r22, r24
    3e68:	8f e8       	ldi	r24, 0x8F	; 143
    3e6a:	96 e0       	ldi	r25, 0x06	; 6
    3e6c:	4a cf       	rjmp	.-364    	; 0x3d02 <_uploadMessageRc>
    3e6e:	08 95       	ret
    3e70:	89 e0       	ldi	r24, 0x09	; 9
    3e72:	08 95       	ret

00003e74 <lora_driver_saveMac>:
    3e74:	60 e0       	ldi	r22, 0x00	; 0
    3e76:	70 e0       	ldi	r23, 0x00	; 0
    3e78:	8e ec       	ldi	r24, 0xCE	; 206
    3e7a:	96 e0       	ldi	r25, 0x06	; 6
    3e7c:	42 cf       	rjmp	.-380    	; 0x3d02 <_uploadMessageRc>
    3e7e:	08 95       	ret

00003e80 <lora_driver_join>:
    3e80:	0f 93       	push	r16
    3e82:	1f 93       	push	r17
    3e84:	e8 2f       	mov	r30, r24
    3e86:	f0 e0       	ldi	r31, 0x00	; 0
    3e88:	ee 0f       	add	r30, r30
    3e8a:	ff 1f       	adc	r31, r31
    3e8c:	e8 55       	subi	r30, 0x58	; 88
    3e8e:	f7 4f       	sbci	r31, 0xF7	; 247
    3e90:	60 81       	ld	r22, Z
    3e92:	71 81       	ldd	r23, Z+1	; 0x01
    3e94:	87 ed       	ldi	r24, 0xD7	; 215
    3e96:	96 e0       	ldi	r25, 0x06	; 6
    3e98:	34 df       	rcall	.-408    	; 0x3d02 <_uploadMessageRc>
    3e9a:	81 11       	cpse	r24, r1
    3e9c:	14 c0       	rjmp	.+40     	; 0x3ec6 <lora_driver_join+0x46>
    3e9e:	08 e2       	ldi	r16, 0x28	; 40
    3ea0:	15 e0       	ldi	r17, 0x05	; 5
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	4d e2       	ldi	r20, 0x2D	; 45
    3ea8:	50 e0       	ldi	r21, 0x00	; 0
    3eaa:	61 e9       	ldi	r22, 0x91	; 145
    3eac:	74 e1       	ldi	r23, 0x14	; 20
    3eae:	80 91 08 14 	lds	r24, 0x1408	; 0x801408 <_serialReplyBufferHandle>
    3eb2:	90 91 09 14 	lds	r25, 0x1409	; 0x801409 <_serialReplyBufferHandle+0x1>
    3eb6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <xStreamBufferReceive>
    3eba:	88 23       	and	r24, r24
    3ebc:	21 f0       	breq	.+8      	; 0x3ec6 <lora_driver_join+0x46>
    3ebe:	81 e9       	ldi	r24, 0x91	; 145
    3ec0:	94 e1       	ldi	r25, 0x14	; 20
    3ec2:	aa de       	rcall	.-684    	; 0x3c18 <_reply2ReturnCode>
    3ec4:	03 c0       	rjmp	.+6      	; 0x3ecc <lora_driver_join+0x4c>
    3ec6:	81 e9       	ldi	r24, 0x91	; 145
    3ec8:	94 e1       	ldi	r25, 0x14	; 20
    3eca:	a6 de       	rcall	.-692    	; 0x3c18 <_reply2ReturnCode>
    3ecc:	1f 91       	pop	r17
    3ece:	0f 91       	pop	r16
    3ed0:	08 95       	ret

00003ed2 <lora_driver_sendUploadMessage>:
    3ed2:	0f 93       	push	r16
    3ed4:	1f 93       	push	r17
    3ed6:	cf 93       	push	r28
    3ed8:	df 93       	push	r29
    3eda:	1f 92       	push	r1
    3edc:	cd b7       	in	r28, 0x3d	; 61
    3ede:	de b7       	in	r29, 0x3e	; 62
    3ee0:	db 01       	movw	r26, r22
    3ee2:	11 96       	adiw	r26, 0x01	; 1
    3ee4:	9c 91       	ld	r25, X
    3ee6:	11 97       	sbiw	r26, 0x01	; 1
    3ee8:	95 31       	cpi	r25, 0x15	; 21
    3eea:	08 f0       	brcs	.+2      	; 0x3eee <lora_driver_sendUploadMessage+0x1c>
    3eec:	b4 c0       	rjmp	.+360    	; 0x4056 <lora_driver_sendUploadMessage+0x184>
    3eee:	99 23       	and	r25, r25
    3ef0:	81 f1       	breq	.+96     	; 0x3f52 <lora_driver_sendUploadMessage+0x80>
    3ef2:	60 e0       	ldi	r22, 0x00	; 0
    3ef4:	70 e0       	ldi	r23, 0x00	; 0
    3ef6:	27 2f       	mov	r18, r23
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	46 2f       	mov	r20, r22
    3efc:	50 e0       	ldi	r21, 0x00	; 0
    3efe:	fd 01       	movw	r30, r26
    3f00:	e4 0f       	add	r30, r20
    3f02:	f5 1f       	adc	r31, r21
    3f04:	92 81       	ldd	r25, Z+2	; 0x02
    3f06:	92 95       	swap	r25
    3f08:	9f 70       	andi	r25, 0x0F	; 15
    3f0a:	9a 30       	cpi	r25, 0x0A	; 10
    3f0c:	10 f0       	brcs	.+4      	; 0x3f12 <lora_driver_sendUploadMessage+0x40>
    3f0e:	99 5c       	subi	r25, 0xC9	; 201
    3f10:	01 c0       	rjmp	.+2      	; 0x3f14 <lora_driver_sendUploadMessage+0x42>
    3f12:	90 5d       	subi	r25, 0xD0	; 208
    3f14:	f9 01       	movw	r30, r18
    3f16:	ee 5d       	subi	r30, 0xDE	; 222
    3f18:	fb 4e       	sbci	r31, 0xEB	; 235
    3f1a:	90 83       	st	Z, r25
    3f1c:	2f 5f       	subi	r18, 0xFF	; 255
    3f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f20:	fd 01       	movw	r30, r26
    3f22:	e4 0f       	add	r30, r20
    3f24:	f5 1f       	adc	r31, r21
    3f26:	92 81       	ldd	r25, Z+2	; 0x02
    3f28:	9f 70       	andi	r25, 0x0F	; 15
    3f2a:	49 2f       	mov	r20, r25
    3f2c:	50 e0       	ldi	r21, 0x00	; 0
    3f2e:	4a 30       	cpi	r20, 0x0A	; 10
    3f30:	51 05       	cpc	r21, r1
    3f32:	14 f0       	brlt	.+4      	; 0x3f38 <lora_driver_sendUploadMessage+0x66>
    3f34:	99 5c       	subi	r25, 0xC9	; 201
    3f36:	01 c0       	rjmp	.+2      	; 0x3f3a <lora_driver_sendUploadMessage+0x68>
    3f38:	90 5d       	subi	r25, 0xD0	; 208
    3f3a:	f9 01       	movw	r30, r18
    3f3c:	ee 5d       	subi	r30, 0xDE	; 222
    3f3e:	fb 4e       	sbci	r31, 0xEB	; 235
    3f40:	90 83       	st	Z, r25
    3f42:	7e 5f       	subi	r23, 0xFE	; 254
    3f44:	6f 5f       	subi	r22, 0xFF	; 255
    3f46:	11 96       	adiw	r26, 0x01	; 1
    3f48:	9c 91       	ld	r25, X
    3f4a:	11 97       	sbiw	r26, 0x01	; 1
    3f4c:	69 17       	cp	r22, r25
    3f4e:	98 f2       	brcs	.-90     	; 0x3ef6 <lora_driver_sendUploadMessage+0x24>
    3f50:	01 c0       	rjmp	.+2      	; 0x3f54 <lora_driver_sendUploadMessage+0x82>
    3f52:	70 e0       	ldi	r23, 0x00	; 0
    3f54:	e7 2f       	mov	r30, r23
    3f56:	f0 e0       	ldi	r31, 0x00	; 0
    3f58:	ee 5d       	subi	r30, 0xDE	; 222
    3f5a:	fb 4e       	sbci	r31, 0xEB	; 235
    3f5c:	10 82       	st	Z, r1
    3f5e:	4c 91       	ld	r20, X
    3f60:	81 11       	cpse	r24, r1
    3f62:	03 c0       	rjmp	.+6      	; 0x3f6a <lora_driver_sendUploadMessage+0x98>
    3f64:	80 ee       	ldi	r24, 0xE0	; 224
    3f66:	96 e0       	ldi	r25, 0x06	; 6
    3f68:	02 c0       	rjmp	.+4      	; 0x3f6e <lora_driver_sendUploadMessage+0x9c>
    3f6a:	82 ee       	ldi	r24, 0xE2	; 226
    3f6c:	96 e0       	ldi	r25, 0x06	; 6
    3f6e:	22 e2       	ldi	r18, 0x22	; 34
    3f70:	34 e1       	ldi	r19, 0x14	; 20
    3f72:	3f 93       	push	r19
    3f74:	2f 93       	push	r18
    3f76:	1f 92       	push	r1
    3f78:	4f 93       	push	r20
    3f7a:	9f 93       	push	r25
    3f7c:	8f 93       	push	r24
    3f7e:	86 ee       	ldi	r24, 0xE6	; 230
    3f80:	96 e0       	ldi	r25, 0x06	; 6
    3f82:	9f 93       	push	r25
    3f84:	8f 93       	push	r24
    3f86:	84 e6       	ldi	r24, 0x64	; 100
    3f88:	94 e1       	ldi	r25, 0x14	; 20
    3f8a:	9f 93       	push	r25
    3f8c:	8f 93       	push	r24
    3f8e:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <sprintf>
    3f92:	60 e0       	ldi	r22, 0x00	; 0
    3f94:	70 e0       	ldi	r23, 0x00	; 0
    3f96:	84 e6       	ldi	r24, 0x64	; 100
    3f98:	94 e1       	ldi	r25, 0x14	; 20
    3f9a:	b3 de       	rcall	.-666    	; 0x3d02 <_uploadMessageRc>
    3f9c:	0f b6       	in	r0, 0x3f	; 63
    3f9e:	f8 94       	cli
    3fa0:	de bf       	out	0x3e, r29	; 62
    3fa2:	0f be       	out	0x3f, r0	; 63
    3fa4:	cd bf       	out	0x3d, r28	; 61
    3fa6:	81 11       	cpse	r24, r1
    3fa8:	59 c0       	rjmp	.+178    	; 0x405c <lora_driver_sendUploadMessage+0x18a>
    3faa:	08 e2       	ldi	r16, 0x28	; 40
    3fac:	15 e0       	ldi	r17, 0x05	; 5
    3fae:	20 e0       	ldi	r18, 0x00	; 0
    3fb0:	30 e0       	ldi	r19, 0x00	; 0
    3fb2:	4d e2       	ldi	r20, 0x2D	; 45
    3fb4:	50 e0       	ldi	r21, 0x00	; 0
    3fb6:	61 e9       	ldi	r22, 0x91	; 145
    3fb8:	74 e1       	ldi	r23, 0x14	; 20
    3fba:	80 91 08 14 	lds	r24, 0x1408	; 0x801408 <_serialReplyBufferHandle>
    3fbe:	90 91 09 14 	lds	r25, 0x1409	; 0x801409 <_serialReplyBufferHandle+0x1>
    3fc2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <xStreamBufferReceive>
    3fc6:	88 23       	and	r24, r24
    3fc8:	09 f4       	brne	.+2      	; 0x3fcc <lora_driver_sendUploadMessage+0xfa>
    3fca:	47 c0       	rjmp	.+142    	; 0x405a <lora_driver_sendUploadMessage+0x188>
    3fcc:	81 e9       	ldi	r24, 0x91	; 145
    3fce:	94 e1       	ldi	r25, 0x14	; 20
    3fd0:	23 de       	rcall	.-954    	; 0x3c18 <_reply2ReturnCode>
    3fd2:	8e 30       	cpi	r24, 0x0E	; 14
    3fd4:	09 f0       	breq	.+2      	; 0x3fd8 <lora_driver_sendUploadMessage+0x106>
    3fd6:	42 c0       	rjmp	.+132    	; 0x405c <lora_driver_sendUploadMessage+0x18a>
    3fd8:	87 e0       	ldi	r24, 0x07	; 7
    3fda:	89 83       	std	Y+1, r24	; 0x01
    3fdc:	80 91 06 14 	lds	r24, 0x1406	; 0x801406 <_downlinkMessageBuffer>
    3fe0:	90 91 07 14 	lds	r25, 0x1407	; 0x801407 <_downlinkMessageBuffer+0x1>
    3fe4:	89 2b       	or	r24, r25
    3fe6:	a9 f1       	breq	.+106    	; 0x4052 <lora_driver_sendUploadMessage+0x180>
    3fe8:	be 01       	movw	r22, r28
    3fea:	6f 5f       	subi	r22, 0xFF	; 255
    3fec:	7f 4f       	sbci	r23, 0xFF	; 255
    3fee:	81 e9       	ldi	r24, 0x91	; 145
    3ff0:	94 e1       	ldi	r25, 0x14	; 20
    3ff2:	68 d1       	rcall	.+720    	; 0x42c4 <decode_port_no>
    3ff4:	80 93 0c 14 	sts	0x140C, r24	; 0x80140c <_downlinkPayload>
    3ff8:	e9 81       	ldd	r30, Y+1	; 0x01
    3ffa:	f0 e0       	ldi	r31, 0x00	; 0
    3ffc:	ef 56       	subi	r30, 0x6F	; 111
    3ffe:	fb 4e       	sbci	r31, 0xEB	; 235
    4000:	df 01       	movw	r26, r30
    4002:	0d 90       	ld	r0, X+
    4004:	00 20       	and	r0, r0
    4006:	e9 f7       	brne	.-6      	; 0x4002 <lora_driver_sendUploadMessage+0x130>
    4008:	11 97       	sbiw	r26, 0x01	; 1
    400a:	ae 1b       	sub	r26, r30
    400c:	bf 0b       	sbc	r27, r31
    400e:	aa 23       	and	r26, r26
    4010:	91 f0       	breq	.+36     	; 0x4036 <lora_driver_sendUploadMessage+0x164>
    4012:	bb 27       	eor	r27, r27
    4014:	cd 01       	movw	r24, r26
    4016:	01 97       	sbiw	r24, 0x01	; 1
    4018:	9c 01       	movw	r18, r24
    401a:	12 f4       	brpl	.+4      	; 0x4020 <lora_driver_sendUploadMessage+0x14e>
    401c:	2f 5f       	subi	r18, 0xFF	; 255
    401e:	3f 4f       	sbci	r19, 0xFF	; 255
    4020:	35 95       	asr	r19
    4022:	27 95       	ror	r18
    4024:	20 93 0d 14 	sts	0x140D, r18	; 0x80140d <_downlinkPayload+0x1>
    4028:	af 01       	movw	r20, r30
    402a:	4f 5f       	subi	r20, 0xFF	; 255
    402c:	5f 4f       	sbci	r21, 0xFF	; 255
    402e:	64 e1       	ldi	r22, 0x14	; 20
    4030:	8e e0       	ldi	r24, 0x0E	; 14
    4032:	94 e1       	ldi	r25, 0x14	; 20
    4034:	73 d1       	rcall	.+742    	; 0x431c <decode_hexadecimal_string_bytes>
    4036:	01 e0       	ldi	r16, 0x01	; 1
    4038:	10 e0       	ldi	r17, 0x00	; 0
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	30 e0       	ldi	r19, 0x00	; 0
    403e:	46 e1       	ldi	r20, 0x16	; 22
    4040:	50 e0       	ldi	r21, 0x00	; 0
    4042:	6c e0       	ldi	r22, 0x0C	; 12
    4044:	74 e1       	ldi	r23, 0x14	; 20
    4046:	80 91 06 14 	lds	r24, 0x1406	; 0x801406 <_downlinkMessageBuffer>
    404a:	90 91 07 14 	lds	r25, 0x1407	; 0x801407 <_downlinkMessageBuffer+0x1>
    404e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <xStreamBufferSend>
    4052:	8e e0       	ldi	r24, 0x0E	; 14
    4054:	03 c0       	rjmp	.+6      	; 0x405c <lora_driver_sendUploadMessage+0x18a>
    4056:	84 e1       	ldi	r24, 0x14	; 20
    4058:	01 c0       	rjmp	.+2      	; 0x405c <lora_driver_sendUploadMessage+0x18a>
    405a:	80 e0       	ldi	r24, 0x00	; 0
    405c:	0f 90       	pop	r0
    405e:	df 91       	pop	r29
    4060:	cf 91       	pop	r28
    4062:	1f 91       	pop	r17
    4064:	0f 91       	pop	r16
    4066:	08 95       	ret

00004068 <lora_driver_setAdaptiveDataRate>:
    4068:	81 30       	cpi	r24, 0x01	; 1
    406a:	19 f0       	breq	.+6      	; 0x4072 <lora_driver_setAdaptiveDataRate+0xa>
    406c:	66 ef       	ldi	r22, 0xF6	; 246
    406e:	76 e0       	ldi	r23, 0x06	; 6
    4070:	02 c0       	rjmp	.+4      	; 0x4076 <lora_driver_setAdaptiveDataRate+0xe>
    4072:	6f ec       	ldi	r22, 0xCF	; 207
    4074:	77 e0       	ldi	r23, 0x07	; 7
    4076:	8a ef       	ldi	r24, 0xFA	; 250
    4078:	96 e0       	ldi	r25, 0x06	; 6
    407a:	43 ce       	rjmp	.-890    	; 0x3d02 <_uploadMessageRc>
    407c:	08 95       	ret

0000407e <lora_driver_setReceiveDelay>:
    407e:	9f 93       	push	r25
    4080:	8f 93       	push	r24
    4082:	8b e2       	ldi	r24, 0x2B	; 43
    4084:	97 e0       	ldi	r25, 0x07	; 7
    4086:	9f 93       	push	r25
    4088:	8f 93       	push	r24
    408a:	84 e6       	ldi	r24, 0x64	; 100
    408c:	94 e1       	ldi	r25, 0x14	; 20
    408e:	9f 93       	push	r25
    4090:	8f 93       	push	r24
    4092:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <sprintf>
    4096:	60 e0       	ldi	r22, 0x00	; 0
    4098:	70 e0       	ldi	r23, 0x00	; 0
    409a:	84 e6       	ldi	r24, 0x64	; 100
    409c:	94 e1       	ldi	r25, 0x14	; 20
    409e:	31 de       	rcall	.-926    	; 0x3d02 <_uploadMessageRc>
    40a0:	0f 90       	pop	r0
    40a2:	0f 90       	pop	r0
    40a4:	0f 90       	pop	r0
    40a6:	0f 90       	pop	r0
    40a8:	0f 90       	pop	r0
    40aa:	0f 90       	pop	r0
    40ac:	08 95       	ret

000040ae <lora_driver_configureToEu868>:
    40ae:	2f 92       	push	r2
    40b0:	3f 92       	push	r3
    40b2:	4f 92       	push	r4
    40b4:	5f 92       	push	r5
    40b6:	6f 92       	push	r6
    40b8:	7f 92       	push	r7
    40ba:	8f 92       	push	r8
    40bc:	9f 92       	push	r9
    40be:	af 92       	push	r10
    40c0:	bf 92       	push	r11
    40c2:	cf 92       	push	r12
    40c4:	df 92       	push	r13
    40c6:	ef 92       	push	r14
    40c8:	ff 92       	push	r15
    40ca:	0f 93       	push	r16
    40cc:	1f 93       	push	r17
    40ce:	cf 93       	push	r28
    40d0:	df 93       	push	r29
    40d2:	cd b7       	in	r28, 0x3d	; 61
    40d4:	de b7       	in	r29, 0x3e	; 62
    40d6:	a0 97       	sbiw	r28, 0x20	; 32
    40d8:	0f b6       	in	r0, 0x3f	; 63
    40da:	f8 94       	cli
    40dc:	de bf       	out	0x3e, r29	; 62
    40de:	0f be       	out	0x3f, r0	; 63
    40e0:	cd bf       	out	0x3d, r28	; 61
    40e2:	68 e5       	ldi	r22, 0x58	; 88
    40e4:	77 e0       	ldi	r23, 0x07	; 7
    40e6:	84 e6       	ldi	r24, 0x64	; 100
    40e8:	97 e0       	ldi	r25, 0x07	; 7
    40ea:	3c dd       	rcall	.-1416   	; 0x3b64 <_uploadMessage>
    40ec:	95 dd       	rcall	.-1238   	; 0x3c18 <_reply2ReturnCode>
    40ee:	81 11       	cpse	r24, r1
    40f0:	a3 c0       	rjmp	.+326    	; 0x4238 <lora_driver_configureToEu868+0x18a>
    40f2:	80 e2       	ldi	r24, 0x20	; 32
    40f4:	e2 e2       	ldi	r30, 0x22	; 34
    40f6:	f2 e0       	ldi	r31, 0x02	; 2
    40f8:	de 01       	movw	r26, r28
    40fa:	11 96       	adiw	r26, 0x01	; 1
    40fc:	01 90       	ld	r0, Z+
    40fe:	0d 92       	st	X+, r0
    4100:	8a 95       	dec	r24
    4102:	e1 f7       	brne	.-8      	; 0x40fc <lora_driver_configureToEu868+0x4e>
    4104:	9e 01       	movw	r18, r28
    4106:	2f 5f       	subi	r18, 0xFF	; 255
    4108:	3f 4f       	sbci	r19, 0xFF	; 255
    410a:	69 01       	movw	r12, r18
    410c:	e1 2c       	mov	r14, r1
    410e:	f1 2c       	mov	r15, r1
    4110:	0f 2e       	mov	r0, r31
    4112:	f0 e7       	ldi	r31, 0x70	; 112
    4114:	af 2e       	mov	r10, r31
    4116:	f7 e0       	ldi	r31, 0x07	; 7
    4118:	bf 2e       	mov	r11, r31
    411a:	f0 2d       	mov	r31, r0
    411c:	04 e6       	ldi	r16, 0x64	; 100
    411e:	14 e1       	ldi	r17, 0x14	; 20
    4120:	0f 2e       	mov	r0, r31
    4122:	f9 e8       	ldi	r31, 0x89	; 137
    4124:	4f 2e       	mov	r4, r31
    4126:	f7 e0       	ldi	r31, 0x07	; 7
    4128:	5f 2e       	mov	r5, r31
    412a:	f0 2d       	mov	r31, r0
    412c:	0f 2e       	mov	r0, r31
    412e:	f0 ea       	ldi	r31, 0xA0	; 160
    4130:	8f 2e       	mov	r8, r31
    4132:	f7 e0       	ldi	r31, 0x07	; 7
    4134:	9f 2e       	mov	r9, r31
    4136:	f0 2d       	mov	r31, r0
    4138:	0f 2e       	mov	r0, r31
    413a:	fa eb       	ldi	r31, 0xBA	; 186
    413c:	6f 2e       	mov	r6, r31
    413e:	f7 e0       	ldi	r31, 0x07	; 7
    4140:	7f 2e       	mov	r7, r31
    4142:	f0 2d       	mov	r31, r0
    4144:	3e 2c       	mov	r3, r14
    4146:	2f 2c       	mov	r2, r15
    4148:	ff 92       	push	r15
    414a:	ef 92       	push	r14
    414c:	bf 92       	push	r11
    414e:	af 92       	push	r10
    4150:	1f 93       	push	r17
    4152:	0f 93       	push	r16
    4154:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <sprintf>
    4158:	60 e0       	ldi	r22, 0x00	; 0
    415a:	70 e0       	ldi	r23, 0x00	; 0
    415c:	c8 01       	movw	r24, r16
    415e:	02 dd       	rcall	.-1532   	; 0x3b64 <_uploadMessage>
    4160:	5b dd       	rcall	.-1354   	; 0x3c18 <_reply2ReturnCode>
    4162:	0f 90       	pop	r0
    4164:	0f 90       	pop	r0
    4166:	0f 90       	pop	r0
    4168:	0f 90       	pop	r0
    416a:	0f 90       	pop	r0
    416c:	0f 90       	pop	r0
    416e:	81 11       	cpse	r24, r1
    4170:	63 c0       	rjmp	.+198    	; 0x4238 <lora_driver_configureToEu868+0x18a>
    4172:	32 e0       	ldi	r19, 0x02	; 2
    4174:	3e 15       	cp	r19, r14
    4176:	e8 f4       	brcc	.+58     	; 0x41b2 <lora_driver_configureToEu868+0x104>
    4178:	f6 01       	movw	r30, r12
    417a:	83 81       	ldd	r24, Z+3	; 0x03
    417c:	8f 93       	push	r24
    417e:	82 81       	ldd	r24, Z+2	; 0x02
    4180:	8f 93       	push	r24
    4182:	81 81       	ldd	r24, Z+1	; 0x01
    4184:	8f 93       	push	r24
    4186:	80 81       	ld	r24, Z
    4188:	8f 93       	push	r24
    418a:	ff 92       	push	r15
    418c:	ef 92       	push	r14
    418e:	5f 92       	push	r5
    4190:	4f 92       	push	r4
    4192:	1f 93       	push	r17
    4194:	0f 93       	push	r16
    4196:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <sprintf>
    419a:	60 e0       	ldi	r22, 0x00	; 0
    419c:	70 e0       	ldi	r23, 0x00	; 0
    419e:	c8 01       	movw	r24, r16
    41a0:	e1 dc       	rcall	.-1598   	; 0x3b64 <_uploadMessage>
    41a2:	3a dd       	rcall	.-1420   	; 0x3c18 <_reply2ReturnCode>
    41a4:	0f b6       	in	r0, 0x3f	; 63
    41a6:	f8 94       	cli
    41a8:	de bf       	out	0x3e, r29	; 62
    41aa:	0f be       	out	0x3f, r0	; 63
    41ac:	cd bf       	out	0x3d, r28	; 61
    41ae:	81 11       	cpse	r24, r1
    41b0:	43 c0       	rjmp	.+134    	; 0x4238 <lora_driver_configureToEu868+0x18a>
    41b2:	2f 92       	push	r2
    41b4:	3f 92       	push	r3
    41b6:	9f 92       	push	r9
    41b8:	8f 92       	push	r8
    41ba:	1f 93       	push	r17
    41bc:	0f 93       	push	r16
    41be:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <sprintf>
    41c2:	60 e0       	ldi	r22, 0x00	; 0
    41c4:	70 e0       	ldi	r23, 0x00	; 0
    41c6:	c8 01       	movw	r24, r16
    41c8:	cd dc       	rcall	.-1638   	; 0x3b64 <_uploadMessage>
    41ca:	26 dd       	rcall	.-1460   	; 0x3c18 <_reply2ReturnCode>
    41cc:	0f 90       	pop	r0
    41ce:	0f 90       	pop	r0
    41d0:	0f 90       	pop	r0
    41d2:	0f 90       	pop	r0
    41d4:	0f 90       	pop	r0
    41d6:	0f 90       	pop	r0
    41d8:	81 11       	cpse	r24, r1
    41da:	2e c0       	rjmp	.+92     	; 0x4238 <lora_driver_configureToEu868+0x18a>
    41dc:	2f 92       	push	r2
    41de:	3f 92       	push	r3
    41e0:	7f 92       	push	r7
    41e2:	6f 92       	push	r6
    41e4:	1f 93       	push	r17
    41e6:	0f 93       	push	r16
    41e8:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <sprintf>
    41ec:	60 e0       	ldi	r22, 0x00	; 0
    41ee:	70 e0       	ldi	r23, 0x00	; 0
    41f0:	c8 01       	movw	r24, r16
    41f2:	b8 dc       	rcall	.-1680   	; 0x3b64 <_uploadMessage>
    41f4:	11 dd       	rcall	.-1502   	; 0x3c18 <_reply2ReturnCode>
    41f6:	0f 90       	pop	r0
    41f8:	0f 90       	pop	r0
    41fa:	0f 90       	pop	r0
    41fc:	0f 90       	pop	r0
    41fe:	0f 90       	pop	r0
    4200:	0f 90       	pop	r0
    4202:	81 11       	cpse	r24, r1
    4204:	19 c0       	rjmp	.+50     	; 0x4238 <lora_driver_configureToEu868+0x18a>
    4206:	3f ef       	ldi	r19, 0xFF	; 255
    4208:	e3 1a       	sub	r14, r19
    420a:	f3 0a       	sbc	r15, r19
    420c:	84 e0       	ldi	r24, 0x04	; 4
    420e:	c8 0e       	add	r12, r24
    4210:	d1 1c       	adc	r13, r1
    4212:	98 e0       	ldi	r25, 0x08	; 8
    4214:	e9 16       	cp	r14, r25
    4216:	f1 04       	cpc	r15, r1
    4218:	09 f0       	breq	.+2      	; 0x421c <lora_driver_configureToEu868+0x16e>
    421a:	94 cf       	rjmp	.-216    	; 0x4144 <lora_driver_configureToEu868+0x96>
    421c:	60 e0       	ldi	r22, 0x00	; 0
    421e:	70 e0       	ldi	r23, 0x00	; 0
    4220:	82 ed       	ldi	r24, 0xD2	; 210
    4222:	97 e0       	ldi	r25, 0x07	; 7
    4224:	9f dc       	rcall	.-1730   	; 0x3b64 <_uploadMessage>
    4226:	f8 dc       	rcall	.-1552   	; 0x3c18 <_reply2ReturnCode>
    4228:	81 11       	cpse	r24, r1
    422a:	06 c0       	rjmp	.+12     	; 0x4238 <lora_driver_configureToEu868+0x18a>
    422c:	60 e0       	ldi	r22, 0x00	; 0
    422e:	70 e0       	ldi	r23, 0x00	; 0
    4230:	83 ee       	ldi	r24, 0xE3	; 227
    4232:	97 e0       	ldi	r25, 0x07	; 7
    4234:	97 dc       	rcall	.-1746   	; 0x3b64 <_uploadMessage>
    4236:	f0 dc       	rcall	.-1568   	; 0x3c18 <_reply2ReturnCode>
    4238:	a0 96       	adiw	r28, 0x20	; 32
    423a:	0f b6       	in	r0, 0x3f	; 63
    423c:	f8 94       	cli
    423e:	de bf       	out	0x3e, r29	; 62
    4240:	0f be       	out	0x3f, r0	; 63
    4242:	cd bf       	out	0x3d, r28	; 61
    4244:	df 91       	pop	r29
    4246:	cf 91       	pop	r28
    4248:	1f 91       	pop	r17
    424a:	0f 91       	pop	r16
    424c:	ff 90       	pop	r15
    424e:	ef 90       	pop	r14
    4250:	df 90       	pop	r13
    4252:	cf 90       	pop	r12
    4254:	bf 90       	pop	r11
    4256:	af 90       	pop	r10
    4258:	9f 90       	pop	r9
    425a:	8f 90       	pop	r8
    425c:	7f 90       	pop	r7
    425e:	6f 90       	pop	r6
    4260:	5f 90       	pop	r5
    4262:	4f 90       	pop	r4
    4264:	3f 90       	pop	r3
    4266:	2f 90       	pop	r2
    4268:	08 95       	ret

0000426a <lora_driver_setOtaaIdentity>:
    426a:	ef 92       	push	r14
    426c:	ff 92       	push	r15
    426e:	0f 93       	push	r16
    4270:	1f 93       	push	r17
    4272:	cf 93       	push	r28
    4274:	df 93       	push	r29
    4276:	ec 01       	movw	r28, r24
    4278:	8b 01       	movw	r16, r22
    427a:	7a 01       	movw	r14, r20
    427c:	81 e0       	ldi	r24, 0x01	; 1
    427e:	f4 de       	rcall	.-536    	; 0x4068 <lora_driver_setAdaptiveDataRate>
    4280:	81 11       	cpse	r24, r1
    4282:	0d c0       	rjmp	.+26     	; 0x429e <lora_driver_setOtaaIdentity+0x34>
    4284:	ce 01       	movw	r24, r28
    4286:	d4 dd       	rcall	.-1112   	; 0x3e30 <lora_driver_setApplicationIdentifier>
    4288:	81 11       	cpse	r24, r1
    428a:	09 c0       	rjmp	.+18     	; 0x429e <lora_driver_setOtaaIdentity+0x34>
    428c:	c8 01       	movw	r24, r16
    428e:	e1 dd       	rcall	.-1086   	; 0x3e52 <lora_driver_setApplicationKey>
    4290:	81 11       	cpse	r24, r1
    4292:	05 c0       	rjmp	.+10     	; 0x429e <lora_driver_setOtaaIdentity+0x34>
    4294:	c7 01       	movw	r24, r14
    4296:	bb dd       	rcall	.-1162   	; 0x3e0e <lora_driver_setDeviceIdentifier>
    4298:	81 11       	cpse	r24, r1
    429a:	01 c0       	rjmp	.+2      	; 0x429e <lora_driver_setOtaaIdentity+0x34>
    429c:	eb dd       	rcall	.-1066   	; 0x3e74 <lora_driver_saveMac>
    429e:	df 91       	pop	r29
    42a0:	cf 91       	pop	r28
    42a2:	1f 91       	pop	r17
    42a4:	0f 91       	pop	r16
    42a6:	ff 90       	pop	r15
    42a8:	ef 90       	pop	r14
    42aa:	08 95       	ret

000042ac <lora_driver_mapReturnCodeToText>:
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	fc 01       	movw	r30, r24
    42b0:	ee 0f       	add	r30, r30
    42b2:	ff 1f       	adc	r31, r31
    42b4:	8e 0f       	add	r24, r30
    42b6:	9f 1f       	adc	r25, r31
    42b8:	fc 01       	movw	r30, r24
    42ba:	e4 55       	subi	r30, 0x54	; 84
    42bc:	f7 4f       	sbci	r31, 0xF7	; 247
    42be:	81 81       	ldd	r24, Z+1	; 0x01
    42c0:	92 81       	ldd	r25, Z+2	; 0x02
    42c2:	08 95       	ret

000042c4 <decode_port_no>:
    42c4:	dc 01       	movw	r26, r24
    42c6:	00 97       	sbiw	r24, 0x00	; 0
    42c8:	29 f1       	breq	.+74     	; 0x4314 <decode_port_no+0x50>
    42ca:	fb 01       	movw	r30, r22
    42cc:	20 81       	ld	r18, Z
    42ce:	fc 01       	movw	r30, r24
    42d0:	01 90       	ld	r0, Z+
    42d2:	00 20       	and	r0, r0
    42d4:	e9 f7       	brne	.-6      	; 0x42d0 <decode_port_no+0xc>
    42d6:	31 97       	sbiw	r30, 0x01	; 1
    42d8:	e8 1b       	sub	r30, r24
    42da:	f9 0b       	sbc	r31, r25
    42dc:	82 2f       	mov	r24, r18
    42de:	90 e0       	ldi	r25, 0x00	; 0
    42e0:	e8 17       	cp	r30, r24
    42e2:	f9 07       	cpc	r31, r25
    42e4:	c8 f0       	brcs	.+50     	; 0x4318 <decode_port_no+0x54>
    42e6:	80 e0       	ldi	r24, 0x00	; 0
    42e8:	08 c0       	rjmp	.+16     	; 0x42fa <decode_port_no+0x36>
    42ea:	88 0f       	add	r24, r24
    42ec:	38 2f       	mov	r19, r24
    42ee:	33 0f       	add	r19, r19
    42f0:	33 0f       	add	r19, r19
    42f2:	83 0f       	add	r24, r19
    42f4:	80 53       	subi	r24, 0x30	; 48
    42f6:	89 0f       	add	r24, r25
    42f8:	2f 5f       	subi	r18, 0xFF	; 255
    42fa:	fd 01       	movw	r30, r26
    42fc:	e2 0f       	add	r30, r18
    42fe:	f1 1d       	adc	r31, r1
    4300:	90 81       	ld	r25, Z
    4302:	30 ed       	ldi	r19, 0xD0	; 208
    4304:	39 0f       	add	r19, r25
    4306:	3a 30       	cpi	r19, 0x0A	; 10
    4308:	10 f4       	brcc	.+4      	; 0x430e <decode_port_no+0x4a>
    430a:	91 11       	cpse	r25, r1
    430c:	ee cf       	rjmp	.-36     	; 0x42ea <decode_port_no+0x26>
    430e:	fb 01       	movw	r30, r22
    4310:	20 83       	st	Z, r18
    4312:	08 95       	ret
    4314:	80 e0       	ldi	r24, 0x00	; 0
    4316:	08 95       	ret
    4318:	80 e0       	ldi	r24, 0x00	; 0
    431a:	08 95       	ret

0000431c <decode_hexadecimal_string_bytes>:
    431c:	0f 93       	push	r16
    431e:	1f 93       	push	r17
    4320:	cf 93       	push	r28
    4322:	df 93       	push	r29
    4324:	dc 01       	movw	r26, r24
    4326:	ea 01       	movw	r28, r20
    4328:	20 97       	sbiw	r28, 0x00	; 0
    432a:	e1 f1       	breq	.+120    	; 0x43a4 <decode_hexadecimal_string_bytes+0x88>
    432c:	fa 01       	movw	r30, r20
    432e:	01 90       	ld	r0, Z+
    4330:	00 20       	and	r0, r0
    4332:	e9 f7       	brne	.-6      	; 0x432e <decode_hexadecimal_string_bytes+0x12>
    4334:	31 97       	sbiw	r30, 0x01	; 1
    4336:	e4 1b       	sub	r30, r20
    4338:	f5 0b       	sbc	r31, r21
    433a:	32 97       	sbiw	r30, 0x02	; 2
    433c:	10 f5       	brcc	.+68     	; 0x4382 <decode_hexadecimal_string_bytes+0x66>
    433e:	32 c0       	rjmp	.+100    	; 0x43a4 <decode_hexadecimal_string_bytes+0x88>
    4340:	8d 01       	movw	r16, r26
    4342:	04 0f       	add	r16, r20
    4344:	15 1f       	adc	r17, r21
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	ae 01       	movw	r20, r28
    434a:	42 0f       	add	r20, r18
    434c:	53 1f       	adc	r21, r19
    434e:	fa 01       	movw	r30, r20
    4350:	90 81       	ld	r25, Z
    4352:	91 34       	cpi	r25, 0x41	; 65
    4354:	28 f0       	brcs	.+10     	; 0x4360 <decode_hexadecimal_string_bytes+0x44>
    4356:	97 53       	subi	r25, 0x37	; 55
    4358:	59 2f       	mov	r21, r25
    435a:	52 95       	swap	r21
    435c:	50 7f       	andi	r21, 0xF0	; 240
    435e:	03 c0       	rjmp	.+6      	; 0x4366 <decode_hexadecimal_string_bytes+0x4a>
    4360:	59 2f       	mov	r21, r25
    4362:	52 95       	swap	r21
    4364:	50 7f       	andi	r21, 0xF0	; 240
    4366:	2c 0f       	add	r18, r28
    4368:	3d 1f       	adc	r19, r29
    436a:	f9 01       	movw	r30, r18
    436c:	91 81       	ldd	r25, Z+1	; 0x01
    436e:	91 34       	cpi	r25, 0x41	; 65
    4370:	10 f0       	brcs	.+4      	; 0x4376 <decode_hexadecimal_string_bytes+0x5a>
    4372:	97 53       	subi	r25, 0x37	; 55
    4374:	01 c0       	rjmp	.+2      	; 0x4378 <decode_hexadecimal_string_bytes+0x5c>
    4376:	90 53       	subi	r25, 0x30	; 48
    4378:	95 0f       	add	r25, r21
    437a:	f8 01       	movw	r30, r16
    437c:	90 83       	st	Z, r25
    437e:	8f 5f       	subi	r24, 0xFF	; 255
    4380:	01 c0       	rjmp	.+2      	; 0x4384 <decode_hexadecimal_string_bytes+0x68>
    4382:	80 e0       	ldi	r24, 0x00	; 0
    4384:	28 2f       	mov	r18, r24
    4386:	22 0f       	add	r18, r18
    4388:	48 2f       	mov	r20, r24
    438a:	50 e0       	ldi	r21, 0x00	; 0
    438c:	fe 01       	movw	r30, r28
    438e:	01 90       	ld	r0, Z+
    4390:	00 20       	and	r0, r0
    4392:	e9 f7       	brne	.-6      	; 0x438e <decode_hexadecimal_string_bytes+0x72>
    4394:	31 97       	sbiw	r30, 0x01	; 1
    4396:	ec 1b       	sub	r30, r28
    4398:	fd 0b       	sbc	r31, r29
    439a:	4e 17       	cp	r20, r30
    439c:	5f 07       	cpc	r21, r31
    439e:	10 f4       	brcc	.+4      	; 0x43a4 <decode_hexadecimal_string_bytes+0x88>
    43a0:	86 13       	cpse	r24, r22
    43a2:	ce cf       	rjmp	.-100    	; 0x4340 <decode_hexadecimal_string_bytes+0x24>
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	1f 91       	pop	r17
    43aa:	0f 91       	pop	r16
    43ac:	08 95       	ret

000043ae <_serialCallBack>:
    43ae:	80 91 c1 14 	lds	r24, 0x14C1	; 0x8014c1 <crc_sum.1945>
    43b2:	86 0f       	add	r24, r22
    43b4:	80 93 c1 14 	sts	0x14C1, r24	; 0x8014c1 <crc_sum.1945>
    43b8:	90 91 c4 14 	lds	r25, 0x14C4	; 0x8014c4 <_mh_state>
    43bc:	91 30       	cpi	r25, 0x01	; 1
    43be:	79 f0       	breq	.+30     	; 0x43de <_serialCallBack+0x30>
    43c0:	28 f0       	brcs	.+10     	; 0x43cc <_serialCallBack+0x1e>
    43c2:	92 30       	cpi	r25, 0x02	; 2
    43c4:	a9 f0       	breq	.+42     	; 0x43f0 <_serialCallBack+0x42>
    43c6:	93 30       	cpi	r25, 0x03	; 3
    43c8:	19 f1       	breq	.+70     	; 0x4410 <_serialCallBack+0x62>
    43ca:	08 95       	ret
    43cc:	6f 3f       	cpi	r22, 0xFF	; 255
    43ce:	09 f0       	breq	.+2      	; 0x43d2 <_serialCallBack+0x24>
    43d0:	48 c0       	rjmp	.+144    	; 0x4462 <_serialCallBack+0xb4>
    43d2:	10 92 c1 14 	sts	0x14C1, r1	; 0x8014c1 <crc_sum.1945>
    43d6:	81 e0       	ldi	r24, 0x01	; 1
    43d8:	80 93 c4 14 	sts	0x14C4, r24	; 0x8014c4 <_mh_state>
    43dc:	08 95       	ret
    43de:	66 38       	cpi	r22, 0x86	; 134
    43e0:	09 f0       	breq	.+2      	; 0x43e4 <_serialCallBack+0x36>
    43e2:	3f c0       	rjmp	.+126    	; 0x4462 <_serialCallBack+0xb4>
    43e4:	10 92 c0 14 	sts	0x14C0, r1	; 0x8014c0 <inDex.1943>
    43e8:	82 e0       	ldi	r24, 0x02	; 2
    43ea:	80 93 c4 14 	sts	0x14C4, r24	; 0x8014c4 <_mh_state>
    43ee:	08 95       	ret
    43f0:	e0 91 c0 14 	lds	r30, 0x14C0	; 0x8014c0 <inDex.1943>
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	8e 0f       	add	r24, r30
    43f8:	80 93 c0 14 	sts	0x14C0, r24	; 0x8014c0 <inDex.1943>
    43fc:	f0 e0       	ldi	r31, 0x00	; 0
    43fe:	e2 54       	subi	r30, 0x42	; 66
    4400:	fb 4e       	sbci	r31, 0xEB	; 235
    4402:	60 83       	st	Z, r22
    4404:	82 30       	cpi	r24, 0x02	; 2
    4406:	69 f5       	brne	.+90     	; 0x4462 <_serialCallBack+0xb4>
    4408:	83 e0       	ldi	r24, 0x03	; 3
    440a:	80 93 c4 14 	sts	0x14C4, r24	; 0x8014c4 <_mh_state>
    440e:	08 95       	ret
    4410:	90 91 c0 14 	lds	r25, 0x14C0	; 0x8014c0 <inDex.1943>
    4414:	21 e0       	ldi	r18, 0x01	; 1
    4416:	29 0f       	add	r18, r25
    4418:	20 93 c0 14 	sts	0x14C0, r18	; 0x8014c0 <inDex.1943>
    441c:	96 30       	cpi	r25, 0x06	; 6
    441e:	09 f5       	brne	.+66     	; 0x4462 <_serialCallBack+0xb4>
    4420:	81 11       	cpse	r24, r1
    4422:	0e c0       	rjmp	.+28     	; 0x4440 <_serialCallBack+0x92>
    4424:	ee eb       	ldi	r30, 0xBE	; 190
    4426:	f4 e1       	ldi	r31, 0x14	; 20
    4428:	80 81       	ld	r24, Z
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	98 2f       	mov	r25, r24
    442e:	88 27       	eor	r24, r24
    4430:	21 81       	ldd	r18, Z+1	; 0x01
    4432:	82 0f       	add	r24, r18
    4434:	91 1d       	adc	r25, r1
    4436:	90 93 c6 14 	sts	0x14C6, r25	; 0x8014c6 <_ppm+0x1>
    443a:	80 93 c5 14 	sts	0x14C5, r24	; 0x8014c5 <_ppm>
    443e:	04 c0       	rjmp	.+8      	; 0x4448 <_serialCallBack+0x9a>
    4440:	10 92 c6 14 	sts	0x14C6, r1	; 0x8014c6 <_ppm+0x1>
    4444:	10 92 c5 14 	sts	0x14C5, r1	; 0x8014c5 <_ppm>
    4448:	10 92 c4 14 	sts	0x14C4, r1	; 0x8014c4 <_mh_state>
    444c:	e0 91 c2 14 	lds	r30, 0x14C2	; 0x8014c2 <_appCallBack>
    4450:	f0 91 c3 14 	lds	r31, 0x14C3	; 0x8014c3 <_appCallBack+0x1>
    4454:	30 97       	sbiw	r30, 0x00	; 0
    4456:	29 f0       	breq	.+10     	; 0x4462 <_serialCallBack+0xb4>
    4458:	80 91 c5 14 	lds	r24, 0x14C5	; 0x8014c5 <_ppm>
    445c:	90 91 c6 14 	lds	r25, 0x14C6	; 0x8014c6 <_ppm+0x1>
    4460:	19 95       	eicall
    4462:	08 95       	ret

00004464 <mh_z19_initialise>:
    4464:	8f 92       	push	r8
    4466:	9f 92       	push	r9
    4468:	af 92       	push	r10
    446a:	cf 92       	push	r12
    446c:	ef 92       	push	r14
    446e:	0f 93       	push	r16
    4470:	0f 2e       	mov	r0, r31
    4472:	f7 ed       	ldi	r31, 0xD7	; 215
    4474:	8f 2e       	mov	r8, r31
    4476:	f1 e2       	ldi	r31, 0x21	; 33
    4478:	9f 2e       	mov	r9, r31
    447a:	f0 2d       	mov	r31, r0
    447c:	68 94       	set
    447e:	aa 24       	eor	r10, r10
    4480:	a4 f8       	bld	r10, 4
    4482:	68 94       	set
    4484:	cc 24       	eor	r12, r12
    4486:	c4 f8       	bld	r12, 4
    4488:	e1 2c       	mov	r14, r1
    448a:	00 e0       	ldi	r16, 0x00	; 0
    448c:	23 e0       	ldi	r18, 0x03	; 3
    448e:	40 e8       	ldi	r20, 0x80	; 128
    4490:	55 e2       	ldi	r21, 0x25	; 37
    4492:	60 e0       	ldi	r22, 0x00	; 0
    4494:	70 e0       	ldi	r23, 0x00	; 0
    4496:	73 d0       	rcall	.+230    	; 0x457e <serial_create>
    4498:	90 93 c8 14 	sts	0x14C8, r25	; 0x8014c8 <_serial+0x1>
    449c:	80 93 c7 14 	sts	0x14C7, r24	; 0x8014c7 <_serial>
    44a0:	0f 91       	pop	r16
    44a2:	ef 90       	pop	r14
    44a4:	cf 90       	pop	r12
    44a6:	af 90       	pop	r10
    44a8:	9f 90       	pop	r9
    44aa:	8f 90       	pop	r8
    44ac:	08 95       	ret

000044ae <mh_z19_injectCallBack>:
    44ae:	90 93 c3 14 	sts	0x14C3, r25	; 0x8014c3 <_appCallBack+0x1>
    44b2:	80 93 c2 14 	sts	0x14C2, r24	; 0x8014c2 <_appCallBack>
    44b6:	08 95       	ret

000044b8 <mh_z19_takeMeassuring>:
    44b8:	cf 93       	push	r28
    44ba:	df 93       	push	r29
    44bc:	cd b7       	in	r28, 0x3d	; 61
    44be:	de b7       	in	r29, 0x3e	; 62
    44c0:	29 97       	sbiw	r28, 0x09	; 9
    44c2:	0f b6       	in	r0, 0x3f	; 63
    44c4:	f8 94       	cli
    44c6:	de bf       	out	0x3e, r29	; 62
    44c8:	0f be       	out	0x3f, r0	; 63
    44ca:	cd bf       	out	0x3d, r28	; 61
    44cc:	89 e0       	ldi	r24, 0x09	; 9
    44ce:	e2 e4       	ldi	r30, 0x42	; 66
    44d0:	f2 e0       	ldi	r31, 0x02	; 2
    44d2:	9e 01       	movw	r18, r28
    44d4:	2f 5f       	subi	r18, 0xFF	; 255
    44d6:	3f 4f       	sbci	r19, 0xFF	; 255
    44d8:	d9 01       	movw	r26, r18
    44da:	01 90       	ld	r0, Z+
    44dc:	0d 92       	st	X+, r0
    44de:	8a 95       	dec	r24
    44e0:	e1 f7       	brne	.-8      	; 0x44da <mh_z19_takeMeassuring+0x22>
    44e2:	10 92 c6 14 	sts	0x14C6, r1	; 0x8014c6 <_ppm+0x1>
    44e6:	10 92 c5 14 	sts	0x14C5, r1	; 0x8014c5 <_ppm>
    44ea:	80 91 c7 14 	lds	r24, 0x14C7	; 0x8014c7 <_serial>
    44ee:	90 91 c8 14 	lds	r25, 0x14C8	; 0x8014c8 <_serial+0x1>
    44f2:	00 97       	sbiw	r24, 0x00	; 0
    44f4:	31 f0       	breq	.+12     	; 0x4502 <mh_z19_takeMeassuring+0x4a>
    44f6:	42 2f       	mov	r20, r18
    44f8:	53 2f       	mov	r21, r19
    44fa:	69 e0       	ldi	r22, 0x09	; 9
    44fc:	10 d1       	rcall	.+544    	; 0x471e <serial_sendBytes>
    44fe:	80 e0       	ldi	r24, 0x00	; 0
    4500:	01 c0       	rjmp	.+2      	; 0x4504 <mh_z19_takeMeassuring+0x4c>
    4502:	82 e0       	ldi	r24, 0x02	; 2
    4504:	29 96       	adiw	r28, 0x09	; 9
    4506:	0f b6       	in	r0, 0x3f	; 63
    4508:	f8 94       	cli
    450a:	de bf       	out	0x3e, r29	; 62
    450c:	0f be       	out	0x3f, r0	; 63
    450e:	cd bf       	out	0x3d, r28	; 61
    4510:	df 91       	pop	r29
    4512:	cf 91       	pop	r28
    4514:	08 95       	ret

00004516 <rc_servo_setPosition>:
    4516:	65 36       	cpi	r22, 0x65	; 101
    4518:	0c f0       	brlt	.+2      	; 0x451c <rc_servo_setPosition+0x6>
    451a:	64 e6       	ldi	r22, 0x64	; 100
    451c:	6c 39       	cpi	r22, 0x9C	; 156
    451e:	0c f4       	brge	.+2      	; 0x4522 <rc_servo_setPosition+0xc>
    4520:	6c e9       	ldi	r22, 0x9C	; 156
    4522:	96 ef       	ldi	r25, 0xF6	; 246
    4524:	69 02       	muls	r22, r25
    4526:	b0 01       	movw	r22, r0
    4528:	11 24       	eor	r1, r1
    452a:	68 54       	subi	r22, 0x48	; 72
    452c:	74 4f       	sbci	r23, 0xF4	; 244
    452e:	81 11       	cpse	r24, r1
    4530:	05 c0       	rjmp	.+10     	; 0x453c <rc_servo_setPosition+0x26>
    4532:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4536:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    453a:	08 95       	ret
    453c:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4540:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4544:	08 95       	ret

00004546 <rc_servo_initialise>:
    4546:	ea e0       	ldi	r30, 0x0A	; 10
    4548:	f1 e0       	ldi	r31, 0x01	; 1
    454a:	80 81       	ld	r24, Z
    454c:	88 61       	ori	r24, 0x18	; 24
    454e:	80 83       	st	Z, r24
    4550:	8f e3       	ldi	r24, 0x3F	; 63
    4552:	9c e9       	ldi	r25, 0x9C	; 156
    4554:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4558:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    455c:	60 e0       	ldi	r22, 0x00	; 0
    455e:	80 e0       	ldi	r24, 0x00	; 0
    4560:	da df       	rcall	.-76     	; 0x4516 <rc_servo_setPosition>
    4562:	60 e0       	ldi	r22, 0x00	; 0
    4564:	81 e0       	ldi	r24, 0x01	; 1
    4566:	d7 df       	rcall	.-82     	; 0x4516 <rc_servo_setPosition>
    4568:	e0 e2       	ldi	r30, 0x20	; 32
    456a:	f1 e0       	ldi	r31, 0x01	; 1
    456c:	80 81       	ld	r24, Z
    456e:	82 6a       	ori	r24, 0xA2	; 162
    4570:	80 83       	st	Z, r24
    4572:	e1 e2       	ldi	r30, 0x21	; 33
    4574:	f1 e0       	ldi	r31, 0x01	; 1
    4576:	80 81       	ld	r24, Z
    4578:	8a 61       	ori	r24, 0x1A	; 26
    457a:	80 83       	st	Z, r24
    457c:	08 95       	ret

0000457e <serial_create>:
    457e:	2f 92       	push	r2
    4580:	3f 92       	push	r3
    4582:	4f 92       	push	r4
    4584:	5f 92       	push	r5
    4586:	6f 92       	push	r6
    4588:	7f 92       	push	r7
    458a:	8f 92       	push	r8
    458c:	9f 92       	push	r9
    458e:	af 92       	push	r10
    4590:	cf 92       	push	r12
    4592:	ef 92       	push	r14
    4594:	ff 92       	push	r15
    4596:	0f 93       	push	r16
    4598:	1f 93       	push	r17
    459a:	cf 93       	push	r28
    459c:	df 93       	push	r29
    459e:	cd b7       	in	r28, 0x3d	; 61
    45a0:	de b7       	in	r29, 0x3e	; 62
    45a2:	f8 2e       	mov	r15, r24
    45a4:	2a 01       	movw	r4, r20
    45a6:	3b 01       	movw	r6, r22
    45a8:	88 e0       	ldi	r24, 0x08	; 8
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <malloc>
    45b0:	8c 01       	movw	r16, r24
    45b2:	8f 2d       	mov	r24, r15
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	fc 01       	movw	r30, r24
    45b8:	ee 0f       	add	r30, r30
    45ba:	ff 1f       	adc	r31, r31
    45bc:	e7 53       	subi	r30, 0x37	; 55
    45be:	fb 4e       	sbci	r31, 0xEB	; 235
    45c0:	11 83       	std	Z+1, r17	; 0x01
    45c2:	00 83       	st	Z, r16
    45c4:	01 15       	cp	r16, r1
    45c6:	11 05       	cpc	r17, r1
    45c8:	09 f4       	brne	.+2      	; 0x45cc <serial_create+0x4e>
    45ca:	6c c0       	rjmp	.+216    	; 0x46a4 <serial_create+0x126>
    45cc:	88 0f       	add	r24, r24
    45ce:	99 1f       	adc	r25, r25
    45d0:	fc 01       	movw	r30, r24
    45d2:	e5 5f       	subi	r30, 0xF5	; 245
    45d4:	fd 4f       	sbci	r31, 0xFD	; 253
    45d6:	80 81       	ld	r24, Z
    45d8:	91 81       	ldd	r25, Z+1	; 0x01
    45da:	d8 01       	movw	r26, r16
    45dc:	8d 93       	st	X+, r24
    45de:	9c 93       	st	X, r25
    45e0:	8c 2d       	mov	r24, r12
    45e2:	90 e0       	ldi	r25, 0x00	; 0
    45e4:	88 0f       	add	r24, r24
    45e6:	99 1f       	adc	r25, r25
    45e8:	88 0f       	add	r24, r24
    45ea:	99 1f       	adc	r25, r25
    45ec:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <malloc>
    45f0:	1c 01       	movw	r2, r24
    45f2:	86 e0       	ldi	r24, 0x06	; 6
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <malloc>
    45fa:	7c 01       	movw	r14, r24
    45fc:	4c 2d       	mov	r20, r12
    45fe:	b1 01       	movw	r22, r2
    4600:	0e 94 0a 2b 	call	0x5614	; 0x5614 <fifo_init>
    4604:	f8 01       	movw	r30, r16
    4606:	f5 82       	std	Z+5, r15	; 0x05
    4608:	e4 82       	std	Z+4, r14	; 0x04
    460a:	8a 2d       	mov	r24, r10
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	88 0f       	add	r24, r24
    4610:	99 1f       	adc	r25, r25
    4612:	88 0f       	add	r24, r24
    4614:	99 1f       	adc	r25, r25
    4616:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <malloc>
    461a:	1c 01       	movw	r2, r24
    461c:	86 e0       	ldi	r24, 0x06	; 6
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <malloc>
    4624:	7c 01       	movw	r14, r24
    4626:	4a 2d       	mov	r20, r10
    4628:	b1 01       	movw	r22, r2
    462a:	f4 d7       	rcall	.+4072   	; 0x5614 <fifo_init>
    462c:	d8 01       	movw	r26, r16
    462e:	13 96       	adiw	r26, 0x03	; 3
    4630:	fc 92       	st	X, r15
    4632:	ee 92       	st	-X, r14
    4634:	12 97       	sbiw	r26, 0x02	; 2
    4636:	17 96       	adiw	r26, 0x07	; 7
    4638:	9c 92       	st	X, r9
    463a:	8e 92       	st	-X, r8
    463c:	16 97       	sbiw	r26, 0x06	; 6
    463e:	ff b6       	in	r15, 0x3f	; 63
    4640:	f8 94       	cli
    4642:	ed 91       	ld	r30, X+
    4644:	fc 91       	ld	r31, X
    4646:	11 97       	sbiw	r26, 0x01	; 1
    4648:	36 97       	sbiw	r30, 0x06	; 6
    464a:	80 81       	ld	r24, Z
    464c:	82 60       	ori	r24, 0x02	; 2
    464e:	80 83       	st	Z, r24
    4650:	8d 90       	ld	r8, X+
    4652:	9c 90       	ld	r9, X
    4654:	c3 01       	movw	r24, r6
    4656:	b2 01       	movw	r22, r4
    4658:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <__floatunsisf>
    465c:	20 e0       	ldi	r18, 0x00	; 0
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	40 e0       	ldi	r20, 0x00	; 0
    4662:	51 e4       	ldi	r21, 0x41	; 65
    4664:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__mulsf3>
    4668:	9b 01       	movw	r18, r22
    466a:	ac 01       	movw	r20, r24
    466c:	60 e0       	ldi	r22, 0x00	; 0
    466e:	74 e2       	ldi	r23, 0x24	; 36
    4670:	84 e7       	ldi	r24, 0x74	; 116
    4672:	9b e4       	ldi	r25, 0x4B	; 75
    4674:	0e 94 8d 2b 	call	0x571a	; 0x571a <__divsf3>
    4678:	20 e0       	ldi	r18, 0x00	; 0
    467a:	30 e0       	ldi	r19, 0x00	; 0
    467c:	40 e8       	ldi	r20, 0x80	; 128
    467e:	5f e3       	ldi	r21, 0x3F	; 63
    4680:	e5 d7       	rcall	.+4042   	; 0x564c <__subsf3>
    4682:	25 d9       	rcall	.-3510   	; 0x38ce <__fixunssfsi>
    4684:	f4 01       	movw	r30, r8
    4686:	32 97       	sbiw	r30, 0x02	; 2
    4688:	60 83       	st	Z, r22
    468a:	d8 01       	movw	r26, r16
    468c:	ed 91       	ld	r30, X+
    468e:	fc 91       	ld	r31, X
    4690:	11 97       	sbiw	r26, 0x01	; 1
    4692:	35 97       	sbiw	r30, 0x05	; 5
    4694:	88 e9       	ldi	r24, 0x98	; 152
    4696:	80 83       	st	Z, r24
    4698:	ed 91       	ld	r30, X+
    469a:	fc 91       	ld	r31, X
    469c:	34 97       	sbiw	r30, 0x04	; 4
    469e:	86 e0       	ldi	r24, 0x06	; 6
    46a0:	80 83       	st	Z, r24
    46a2:	ff be       	out	0x3f, r15	; 63
    46a4:	c8 01       	movw	r24, r16
    46a6:	df 91       	pop	r29
    46a8:	cf 91       	pop	r28
    46aa:	1f 91       	pop	r17
    46ac:	0f 91       	pop	r16
    46ae:	ff 90       	pop	r15
    46b0:	ef 90       	pop	r14
    46b2:	cf 90       	pop	r12
    46b4:	af 90       	pop	r10
    46b6:	9f 90       	pop	r9
    46b8:	8f 90       	pop	r8
    46ba:	7f 90       	pop	r7
    46bc:	6f 90       	pop	r6
    46be:	5f 90       	pop	r5
    46c0:	4f 90       	pop	r4
    46c2:	3f 90       	pop	r3
    46c4:	2f 90       	pop	r2
    46c6:	08 95       	ret

000046c8 <serial_sendByte>:
    46c8:	cf 93       	push	r28
    46ca:	df 93       	push	r29
    46cc:	dc 01       	movw	r26, r24
    46ce:	89 2b       	or	r24, r25
    46d0:	01 f1       	breq	.+64     	; 0x4712 <serial_sendByte+0x4a>
    46d2:	12 96       	adiw	r26, 0x02	; 2
    46d4:	ed 91       	ld	r30, X+
    46d6:	fc 91       	ld	r31, X
    46d8:	13 97       	sbiw	r26, 0x03	; 3
    46da:	93 81       	ldd	r25, Z+3	; 0x03
    46dc:	82 81       	ldd	r24, Z+2	; 0x02
    46de:	25 81       	ldd	r18, Z+5	; 0x05
    46e0:	98 1b       	sub	r25, r24
    46e2:	92 23       	and	r25, r18
    46e4:	84 81       	ldd	r24, Z+4	; 0x04
    46e6:	98 17       	cp	r25, r24
    46e8:	b1 f0       	breq	.+44     	; 0x4716 <serial_sendByte+0x4e>
    46ea:	83 81       	ldd	r24, Z+3	; 0x03
    46ec:	26 95       	lsr	r18
    46ee:	28 23       	and	r18, r24
    46f0:	c0 81       	ld	r28, Z
    46f2:	d1 81       	ldd	r29, Z+1	; 0x01
    46f4:	c2 0f       	add	r28, r18
    46f6:	d1 1d       	adc	r29, r1
    46f8:	68 83       	st	Y, r22
    46fa:	8f 5f       	subi	r24, 0xFF	; 255
    46fc:	95 81       	ldd	r25, Z+5	; 0x05
    46fe:	89 23       	and	r24, r25
    4700:	83 83       	std	Z+3, r24	; 0x03
    4702:	ed 91       	ld	r30, X+
    4704:	fc 91       	ld	r31, X
    4706:	35 97       	sbiw	r30, 0x05	; 5
    4708:	80 81       	ld	r24, Z
    470a:	80 62       	ori	r24, 0x20	; 32
    470c:	80 83       	st	Z, r24
    470e:	80 e0       	ldi	r24, 0x00	; 0
    4710:	03 c0       	rjmp	.+6      	; 0x4718 <serial_sendByte+0x50>
    4712:	81 e0       	ldi	r24, 0x01	; 1
    4714:	01 c0       	rjmp	.+2      	; 0x4718 <serial_sendByte+0x50>
    4716:	82 e0       	ldi	r24, 0x02	; 2
    4718:	df 91       	pop	r29
    471a:	cf 91       	pop	r28
    471c:	08 95       	ret

0000471e <serial_sendBytes>:
    471e:	ef 92       	push	r14
    4720:	ff 92       	push	r15
    4722:	0f 93       	push	r16
    4724:	1f 93       	push	r17
    4726:	cf 93       	push	r28
    4728:	df 93       	push	r29
    472a:	7c 01       	movw	r14, r24
    472c:	00 97       	sbiw	r24, 0x00	; 0
    472e:	09 f4       	brne	.+2      	; 0x4732 <serial_sendBytes+0x14>
    4730:	41 c0       	rjmp	.+130    	; 0x47b4 <serial_sendBytes+0x96>
    4732:	dc 01       	movw	r26, r24
    4734:	12 96       	adiw	r26, 0x02	; 2
    4736:	ed 91       	ld	r30, X+
    4738:	fc 91       	ld	r31, X
    473a:	13 97       	sbiw	r26, 0x03	; 3
    473c:	93 81       	ldd	r25, Z+3	; 0x03
    473e:	82 81       	ldd	r24, Z+2	; 0x02
    4740:	98 1b       	sub	r25, r24
    4742:	85 81       	ldd	r24, Z+5	; 0x05
    4744:	98 23       	and	r25, r24
    4746:	84 81       	ldd	r24, Z+4	; 0x04
    4748:	89 1b       	sub	r24, r25
    474a:	86 17       	cp	r24, r22
    474c:	a8 f1       	brcs	.+106    	; 0x47b8 <serial_sendBytes+0x9a>
    474e:	66 23       	and	r22, r22
    4750:	41 f1       	breq	.+80     	; 0x47a2 <serial_sendBytes+0x84>
    4752:	84 2f       	mov	r24, r20
    4754:	95 2f       	mov	r25, r21
    4756:	dc 01       	movw	r26, r24
    4758:	61 50       	subi	r22, 0x01	; 1
    475a:	46 2f       	mov	r20, r22
    475c:	50 e0       	ldi	r21, 0x00	; 0
    475e:	4f 5f       	subi	r20, 0xFF	; 255
    4760:	5f 4f       	sbci	r21, 0xFF	; 255
    4762:	48 0f       	add	r20, r24
    4764:	59 1f       	adc	r21, r25
    4766:	e7 01       	movw	r28, r14
    4768:	ea 81       	ldd	r30, Y+2	; 0x02
    476a:	fb 81       	ldd	r31, Y+3	; 0x03
    476c:	93 81       	ldd	r25, Z+3	; 0x03
    476e:	82 81       	ldd	r24, Z+2	; 0x02
    4770:	25 81       	ldd	r18, Z+5	; 0x05
    4772:	98 1b       	sub	r25, r24
    4774:	92 23       	and	r25, r18
    4776:	84 81       	ldd	r24, Z+4	; 0x04
    4778:	98 17       	cp	r25, r24
    477a:	79 f0       	breq	.+30     	; 0x479a <serial_sendBytes+0x7c>
    477c:	8c 91       	ld	r24, X
    477e:	93 81       	ldd	r25, Z+3	; 0x03
    4780:	26 95       	lsr	r18
    4782:	29 23       	and	r18, r25
    4784:	60 81       	ld	r22, Z
    4786:	71 81       	ldd	r23, Z+1	; 0x01
    4788:	8b 01       	movw	r16, r22
    478a:	02 0f       	add	r16, r18
    478c:	11 1d       	adc	r17, r1
    478e:	e8 01       	movw	r28, r16
    4790:	88 83       	st	Y, r24
    4792:	9f 5f       	subi	r25, 0xFF	; 255
    4794:	85 81       	ldd	r24, Z+5	; 0x05
    4796:	98 23       	and	r25, r24
    4798:	93 83       	std	Z+3, r25	; 0x03
    479a:	11 96       	adiw	r26, 0x01	; 1
    479c:	a4 17       	cp	r26, r20
    479e:	b5 07       	cpc	r27, r21
    47a0:	11 f7       	brne	.-60     	; 0x4766 <serial_sendBytes+0x48>
    47a2:	d7 01       	movw	r26, r14
    47a4:	ed 91       	ld	r30, X+
    47a6:	fc 91       	ld	r31, X
    47a8:	35 97       	sbiw	r30, 0x05	; 5
    47aa:	80 81       	ld	r24, Z
    47ac:	80 62       	ori	r24, 0x20	; 32
    47ae:	80 83       	st	Z, r24
    47b0:	80 e0       	ldi	r24, 0x00	; 0
    47b2:	03 c0       	rjmp	.+6      	; 0x47ba <serial_sendBytes+0x9c>
    47b4:	81 e0       	ldi	r24, 0x01	; 1
    47b6:	01 c0       	rjmp	.+2      	; 0x47ba <serial_sendBytes+0x9c>
    47b8:	82 e0       	ldi	r24, 0x02	; 2
    47ba:	df 91       	pop	r29
    47bc:	cf 91       	pop	r28
    47be:	1f 91       	pop	r17
    47c0:	0f 91       	pop	r16
    47c2:	ff 90       	pop	r15
    47c4:	ef 90       	pop	r14
    47c6:	08 95       	ret

000047c8 <serial_getByte>:
    47c8:	00 97       	sbiw	r24, 0x00	; 0
    47ca:	d1 f0       	breq	.+52     	; 0x4800 <serial_getByte+0x38>
    47cc:	dc 01       	movw	r26, r24
    47ce:	14 96       	adiw	r26, 0x04	; 4
    47d0:	ed 91       	ld	r30, X+
    47d2:	fc 91       	ld	r31, X
    47d4:	15 97       	sbiw	r26, 0x05	; 5
    47d6:	93 81       	ldd	r25, Z+3	; 0x03
    47d8:	82 81       	ldd	r24, Z+2	; 0x02
    47da:	98 17       	cp	r25, r24
    47dc:	99 f0       	breq	.+38     	; 0x4804 <serial_getByte+0x3c>
    47de:	92 81       	ldd	r25, Z+2	; 0x02
    47e0:	85 81       	ldd	r24, Z+5	; 0x05
    47e2:	86 95       	lsr	r24
    47e4:	89 23       	and	r24, r25
    47e6:	a0 81       	ld	r26, Z
    47e8:	b1 81       	ldd	r27, Z+1	; 0x01
    47ea:	a8 0f       	add	r26, r24
    47ec:	b1 1d       	adc	r27, r1
    47ee:	8c 91       	ld	r24, X
    47f0:	db 01       	movw	r26, r22
    47f2:	8c 93       	st	X, r24
    47f4:	9f 5f       	subi	r25, 0xFF	; 255
    47f6:	85 81       	ldd	r24, Z+5	; 0x05
    47f8:	98 23       	and	r25, r24
    47fa:	92 83       	std	Z+2, r25	; 0x02
    47fc:	80 e0       	ldi	r24, 0x00	; 0
    47fe:	08 95       	ret
    4800:	81 e0       	ldi	r24, 0x01	; 1
    4802:	08 95       	ret
    4804:	83 e0       	ldi	r24, 0x03	; 3
    4806:	08 95       	ret

00004808 <__vector_25>:
    4808:	1f 92       	push	r1
    480a:	0f 92       	push	r0
    480c:	0f b6       	in	r0, 0x3f	; 63
    480e:	0f 92       	push	r0
    4810:	11 24       	eor	r1, r1
    4812:	0b b6       	in	r0, 0x3b	; 59
    4814:	0f 92       	push	r0
    4816:	2f 93       	push	r18
    4818:	3f 93       	push	r19
    481a:	4f 93       	push	r20
    481c:	5f 93       	push	r21
    481e:	6f 93       	push	r22
    4820:	7f 93       	push	r23
    4822:	8f 93       	push	r24
    4824:	9f 93       	push	r25
    4826:	af 93       	push	r26
    4828:	bf 93       	push	r27
    482a:	cf 93       	push	r28
    482c:	df 93       	push	r29
    482e:	ef 93       	push	r30
    4830:	ff 93       	push	r31
    4832:	a0 91 c9 14 	lds	r26, 0x14C9	; 0x8014c9 <_ser_handle>
    4836:	b0 91 ca 14 	lds	r27, 0x14CA	; 0x8014ca <_ser_handle+0x1>
    483a:	10 97       	sbiw	r26, 0x00	; 0
    483c:	11 f1       	breq	.+68     	; 0x4882 <__vector_25+0x7a>
    483e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4842:	14 96       	adiw	r26, 0x04	; 4
    4844:	ed 91       	ld	r30, X+
    4846:	fc 91       	ld	r31, X
    4848:	15 97       	sbiw	r26, 0x05	; 5
    484a:	93 81       	ldd	r25, Z+3	; 0x03
    484c:	82 81       	ldd	r24, Z+2	; 0x02
    484e:	25 81       	ldd	r18, Z+5	; 0x05
    4850:	98 1b       	sub	r25, r24
    4852:	92 23       	and	r25, r18
    4854:	84 81       	ldd	r24, Z+4	; 0x04
    4856:	98 17       	cp	r25, r24
    4858:	61 f0       	breq	.+24     	; 0x4872 <__vector_25+0x6a>
    485a:	83 81       	ldd	r24, Z+3	; 0x03
    485c:	26 95       	lsr	r18
    485e:	28 23       	and	r18, r24
    4860:	c0 81       	ld	r28, Z
    4862:	d1 81       	ldd	r29, Z+1	; 0x01
    4864:	c2 0f       	add	r28, r18
    4866:	d1 1d       	adc	r29, r1
    4868:	68 83       	st	Y, r22
    486a:	8f 5f       	subi	r24, 0xFF	; 255
    486c:	95 81       	ldd	r25, Z+5	; 0x05
    486e:	89 23       	and	r24, r25
    4870:	83 83       	std	Z+3, r24	; 0x03
    4872:	16 96       	adiw	r26, 0x06	; 6
    4874:	ed 91       	ld	r30, X+
    4876:	fc 91       	ld	r31, X
    4878:	17 97       	sbiw	r26, 0x07	; 7
    487a:	30 97       	sbiw	r30, 0x00	; 0
    487c:	11 f0       	breq	.+4      	; 0x4882 <__vector_25+0x7a>
    487e:	cd 01       	movw	r24, r26
    4880:	19 95       	eicall
    4882:	ff 91       	pop	r31
    4884:	ef 91       	pop	r30
    4886:	df 91       	pop	r29
    4888:	cf 91       	pop	r28
    488a:	bf 91       	pop	r27
    488c:	af 91       	pop	r26
    488e:	9f 91       	pop	r25
    4890:	8f 91       	pop	r24
    4892:	7f 91       	pop	r23
    4894:	6f 91       	pop	r22
    4896:	5f 91       	pop	r21
    4898:	4f 91       	pop	r20
    489a:	3f 91       	pop	r19
    489c:	2f 91       	pop	r18
    489e:	0f 90       	pop	r0
    48a0:	0b be       	out	0x3b, r0	; 59
    48a2:	0f 90       	pop	r0
    48a4:	0f be       	out	0x3f, r0	; 63
    48a6:	0f 90       	pop	r0
    48a8:	1f 90       	pop	r1
    48aa:	18 95       	reti

000048ac <__vector_26>:
    48ac:	1f 92       	push	r1
    48ae:	0f 92       	push	r0
    48b0:	0f b6       	in	r0, 0x3f	; 63
    48b2:	0f 92       	push	r0
    48b4:	11 24       	eor	r1, r1
    48b6:	0b b6       	in	r0, 0x3b	; 59
    48b8:	0f 92       	push	r0
    48ba:	2f 93       	push	r18
    48bc:	8f 93       	push	r24
    48be:	9f 93       	push	r25
    48c0:	af 93       	push	r26
    48c2:	bf 93       	push	r27
    48c4:	ef 93       	push	r30
    48c6:	ff 93       	push	r31
    48c8:	e0 91 c9 14 	lds	r30, 0x14C9	; 0x8014c9 <_ser_handle>
    48cc:	f0 91 ca 14 	lds	r31, 0x14CA	; 0x8014ca <_ser_handle+0x1>
    48d0:	30 97       	sbiw	r30, 0x00	; 0
    48d2:	b9 f0       	breq	.+46     	; 0x4902 <__vector_26+0x56>
    48d4:	02 80       	ldd	r0, Z+2	; 0x02
    48d6:	f3 81       	ldd	r31, Z+3	; 0x03
    48d8:	e0 2d       	mov	r30, r0
    48da:	93 81       	ldd	r25, Z+3	; 0x03
    48dc:	82 81       	ldd	r24, Z+2	; 0x02
    48de:	98 17       	cp	r25, r24
    48e0:	b1 f0       	breq	.+44     	; 0x490e <__vector_26+0x62>
    48e2:	92 81       	ldd	r25, Z+2	; 0x02
    48e4:	85 81       	ldd	r24, Z+5	; 0x05
    48e6:	28 2f       	mov	r18, r24
    48e8:	26 95       	lsr	r18
    48ea:	29 23       	and	r18, r25
    48ec:	a0 81       	ld	r26, Z
    48ee:	b1 81       	ldd	r27, Z+1	; 0x01
    48f0:	a2 0f       	add	r26, r18
    48f2:	b1 1d       	adc	r27, r1
    48f4:	2c 91       	ld	r18, X
    48f6:	9f 5f       	subi	r25, 0xFF	; 255
    48f8:	89 23       	and	r24, r25
    48fa:	82 83       	std	Z+2, r24	; 0x02
    48fc:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4900:	0b c0       	rjmp	.+22     	; 0x4918 <__vector_26+0x6c>
    4902:	e1 ec       	ldi	r30, 0xC1	; 193
    4904:	f0 e0       	ldi	r31, 0x00	; 0
    4906:	80 81       	ld	r24, Z
    4908:	8f 7d       	andi	r24, 0xDF	; 223
    490a:	80 83       	st	Z, r24
    490c:	05 c0       	rjmp	.+10     	; 0x4918 <__vector_26+0x6c>
    490e:	e1 ec       	ldi	r30, 0xC1	; 193
    4910:	f0 e0       	ldi	r31, 0x00	; 0
    4912:	80 81       	ld	r24, Z
    4914:	8f 7d       	andi	r24, 0xDF	; 223
    4916:	80 83       	st	Z, r24
    4918:	ff 91       	pop	r31
    491a:	ef 91       	pop	r30
    491c:	bf 91       	pop	r27
    491e:	af 91       	pop	r26
    4920:	9f 91       	pop	r25
    4922:	8f 91       	pop	r24
    4924:	2f 91       	pop	r18
    4926:	0f 90       	pop	r0
    4928:	0b be       	out	0x3b, r0	; 59
    492a:	0f 90       	pop	r0
    492c:	0f be       	out	0x3f, r0	; 63
    492e:	0f 90       	pop	r0
    4930:	1f 90       	pop	r1
    4932:	18 95       	reti

00004934 <__vector_36>:
    4934:	1f 92       	push	r1
    4936:	0f 92       	push	r0
    4938:	0f b6       	in	r0, 0x3f	; 63
    493a:	0f 92       	push	r0
    493c:	11 24       	eor	r1, r1
    493e:	0b b6       	in	r0, 0x3b	; 59
    4940:	0f 92       	push	r0
    4942:	2f 93       	push	r18
    4944:	3f 93       	push	r19
    4946:	4f 93       	push	r20
    4948:	5f 93       	push	r21
    494a:	6f 93       	push	r22
    494c:	7f 93       	push	r23
    494e:	8f 93       	push	r24
    4950:	9f 93       	push	r25
    4952:	af 93       	push	r26
    4954:	bf 93       	push	r27
    4956:	cf 93       	push	r28
    4958:	df 93       	push	r29
    495a:	ef 93       	push	r30
    495c:	ff 93       	push	r31
    495e:	a0 91 cb 14 	lds	r26, 0x14CB	; 0x8014cb <_ser_handle+0x2>
    4962:	b0 91 cc 14 	lds	r27, 0x14CC	; 0x8014cc <_ser_handle+0x3>
    4966:	10 97       	sbiw	r26, 0x00	; 0
    4968:	11 f1       	breq	.+68     	; 0x49ae <__vector_36+0x7a>
    496a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    496e:	14 96       	adiw	r26, 0x04	; 4
    4970:	ed 91       	ld	r30, X+
    4972:	fc 91       	ld	r31, X
    4974:	15 97       	sbiw	r26, 0x05	; 5
    4976:	93 81       	ldd	r25, Z+3	; 0x03
    4978:	82 81       	ldd	r24, Z+2	; 0x02
    497a:	25 81       	ldd	r18, Z+5	; 0x05
    497c:	98 1b       	sub	r25, r24
    497e:	92 23       	and	r25, r18
    4980:	84 81       	ldd	r24, Z+4	; 0x04
    4982:	98 17       	cp	r25, r24
    4984:	61 f0       	breq	.+24     	; 0x499e <__vector_36+0x6a>
    4986:	83 81       	ldd	r24, Z+3	; 0x03
    4988:	26 95       	lsr	r18
    498a:	28 23       	and	r18, r24
    498c:	c0 81       	ld	r28, Z
    498e:	d1 81       	ldd	r29, Z+1	; 0x01
    4990:	c2 0f       	add	r28, r18
    4992:	d1 1d       	adc	r29, r1
    4994:	68 83       	st	Y, r22
    4996:	8f 5f       	subi	r24, 0xFF	; 255
    4998:	95 81       	ldd	r25, Z+5	; 0x05
    499a:	89 23       	and	r24, r25
    499c:	83 83       	std	Z+3, r24	; 0x03
    499e:	16 96       	adiw	r26, 0x06	; 6
    49a0:	ed 91       	ld	r30, X+
    49a2:	fc 91       	ld	r31, X
    49a4:	17 97       	sbiw	r26, 0x07	; 7
    49a6:	30 97       	sbiw	r30, 0x00	; 0
    49a8:	11 f0       	breq	.+4      	; 0x49ae <__vector_36+0x7a>
    49aa:	cd 01       	movw	r24, r26
    49ac:	19 95       	eicall
    49ae:	ff 91       	pop	r31
    49b0:	ef 91       	pop	r30
    49b2:	df 91       	pop	r29
    49b4:	cf 91       	pop	r28
    49b6:	bf 91       	pop	r27
    49b8:	af 91       	pop	r26
    49ba:	9f 91       	pop	r25
    49bc:	8f 91       	pop	r24
    49be:	7f 91       	pop	r23
    49c0:	6f 91       	pop	r22
    49c2:	5f 91       	pop	r21
    49c4:	4f 91       	pop	r20
    49c6:	3f 91       	pop	r19
    49c8:	2f 91       	pop	r18
    49ca:	0f 90       	pop	r0
    49cc:	0b be       	out	0x3b, r0	; 59
    49ce:	0f 90       	pop	r0
    49d0:	0f be       	out	0x3f, r0	; 63
    49d2:	0f 90       	pop	r0
    49d4:	1f 90       	pop	r1
    49d6:	18 95       	reti

000049d8 <__vector_37>:
    49d8:	1f 92       	push	r1
    49da:	0f 92       	push	r0
    49dc:	0f b6       	in	r0, 0x3f	; 63
    49de:	0f 92       	push	r0
    49e0:	11 24       	eor	r1, r1
    49e2:	0b b6       	in	r0, 0x3b	; 59
    49e4:	0f 92       	push	r0
    49e6:	2f 93       	push	r18
    49e8:	8f 93       	push	r24
    49ea:	9f 93       	push	r25
    49ec:	af 93       	push	r26
    49ee:	bf 93       	push	r27
    49f0:	ef 93       	push	r30
    49f2:	ff 93       	push	r31
    49f4:	e0 91 cb 14 	lds	r30, 0x14CB	; 0x8014cb <_ser_handle+0x2>
    49f8:	f0 91 cc 14 	lds	r31, 0x14CC	; 0x8014cc <_ser_handle+0x3>
    49fc:	30 97       	sbiw	r30, 0x00	; 0
    49fe:	b9 f0       	breq	.+46     	; 0x4a2e <__vector_37+0x56>
    4a00:	02 80       	ldd	r0, Z+2	; 0x02
    4a02:	f3 81       	ldd	r31, Z+3	; 0x03
    4a04:	e0 2d       	mov	r30, r0
    4a06:	93 81       	ldd	r25, Z+3	; 0x03
    4a08:	82 81       	ldd	r24, Z+2	; 0x02
    4a0a:	98 17       	cp	r25, r24
    4a0c:	b1 f0       	breq	.+44     	; 0x4a3a <__vector_37+0x62>
    4a0e:	92 81       	ldd	r25, Z+2	; 0x02
    4a10:	85 81       	ldd	r24, Z+5	; 0x05
    4a12:	28 2f       	mov	r18, r24
    4a14:	26 95       	lsr	r18
    4a16:	29 23       	and	r18, r25
    4a18:	a0 81       	ld	r26, Z
    4a1a:	b1 81       	ldd	r27, Z+1	; 0x01
    4a1c:	a2 0f       	add	r26, r18
    4a1e:	b1 1d       	adc	r27, r1
    4a20:	2c 91       	ld	r18, X
    4a22:	9f 5f       	subi	r25, 0xFF	; 255
    4a24:	89 23       	and	r24, r25
    4a26:	82 83       	std	Z+2, r24	; 0x02
    4a28:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4a2c:	0b c0       	rjmp	.+22     	; 0x4a44 <__vector_37+0x6c>
    4a2e:	e9 ec       	ldi	r30, 0xC9	; 201
    4a30:	f0 e0       	ldi	r31, 0x00	; 0
    4a32:	80 81       	ld	r24, Z
    4a34:	8f 7d       	andi	r24, 0xDF	; 223
    4a36:	80 83       	st	Z, r24
    4a38:	05 c0       	rjmp	.+10     	; 0x4a44 <__vector_37+0x6c>
    4a3a:	e9 ec       	ldi	r30, 0xC9	; 201
    4a3c:	f0 e0       	ldi	r31, 0x00	; 0
    4a3e:	80 81       	ld	r24, Z
    4a40:	8f 7d       	andi	r24, 0xDF	; 223
    4a42:	80 83       	st	Z, r24
    4a44:	ff 91       	pop	r31
    4a46:	ef 91       	pop	r30
    4a48:	bf 91       	pop	r27
    4a4a:	af 91       	pop	r26
    4a4c:	9f 91       	pop	r25
    4a4e:	8f 91       	pop	r24
    4a50:	2f 91       	pop	r18
    4a52:	0f 90       	pop	r0
    4a54:	0b be       	out	0x3b, r0	; 59
    4a56:	0f 90       	pop	r0
    4a58:	0f be       	out	0x3f, r0	; 63
    4a5a:	0f 90       	pop	r0
    4a5c:	1f 90       	pop	r1
    4a5e:	18 95       	reti

00004a60 <__vector_51>:
    4a60:	1f 92       	push	r1
    4a62:	0f 92       	push	r0
    4a64:	0f b6       	in	r0, 0x3f	; 63
    4a66:	0f 92       	push	r0
    4a68:	11 24       	eor	r1, r1
    4a6a:	0b b6       	in	r0, 0x3b	; 59
    4a6c:	0f 92       	push	r0
    4a6e:	2f 93       	push	r18
    4a70:	3f 93       	push	r19
    4a72:	4f 93       	push	r20
    4a74:	5f 93       	push	r21
    4a76:	6f 93       	push	r22
    4a78:	7f 93       	push	r23
    4a7a:	8f 93       	push	r24
    4a7c:	9f 93       	push	r25
    4a7e:	af 93       	push	r26
    4a80:	bf 93       	push	r27
    4a82:	cf 93       	push	r28
    4a84:	df 93       	push	r29
    4a86:	ef 93       	push	r30
    4a88:	ff 93       	push	r31
    4a8a:	a0 91 cd 14 	lds	r26, 0x14CD	; 0x8014cd <_ser_handle+0x4>
    4a8e:	b0 91 ce 14 	lds	r27, 0x14CE	; 0x8014ce <_ser_handle+0x5>
    4a92:	10 97       	sbiw	r26, 0x00	; 0
    4a94:	11 f1       	breq	.+68     	; 0x4ada <__vector_51+0x7a>
    4a96:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4a9a:	14 96       	adiw	r26, 0x04	; 4
    4a9c:	ed 91       	ld	r30, X+
    4a9e:	fc 91       	ld	r31, X
    4aa0:	15 97       	sbiw	r26, 0x05	; 5
    4aa2:	93 81       	ldd	r25, Z+3	; 0x03
    4aa4:	82 81       	ldd	r24, Z+2	; 0x02
    4aa6:	25 81       	ldd	r18, Z+5	; 0x05
    4aa8:	98 1b       	sub	r25, r24
    4aaa:	92 23       	and	r25, r18
    4aac:	84 81       	ldd	r24, Z+4	; 0x04
    4aae:	98 17       	cp	r25, r24
    4ab0:	61 f0       	breq	.+24     	; 0x4aca <__vector_51+0x6a>
    4ab2:	83 81       	ldd	r24, Z+3	; 0x03
    4ab4:	26 95       	lsr	r18
    4ab6:	28 23       	and	r18, r24
    4ab8:	c0 81       	ld	r28, Z
    4aba:	d1 81       	ldd	r29, Z+1	; 0x01
    4abc:	c2 0f       	add	r28, r18
    4abe:	d1 1d       	adc	r29, r1
    4ac0:	68 83       	st	Y, r22
    4ac2:	8f 5f       	subi	r24, 0xFF	; 255
    4ac4:	95 81       	ldd	r25, Z+5	; 0x05
    4ac6:	89 23       	and	r24, r25
    4ac8:	83 83       	std	Z+3, r24	; 0x03
    4aca:	16 96       	adiw	r26, 0x06	; 6
    4acc:	ed 91       	ld	r30, X+
    4ace:	fc 91       	ld	r31, X
    4ad0:	17 97       	sbiw	r26, 0x07	; 7
    4ad2:	30 97       	sbiw	r30, 0x00	; 0
    4ad4:	11 f0       	breq	.+4      	; 0x4ada <__vector_51+0x7a>
    4ad6:	cd 01       	movw	r24, r26
    4ad8:	19 95       	eicall
    4ada:	ff 91       	pop	r31
    4adc:	ef 91       	pop	r30
    4ade:	df 91       	pop	r29
    4ae0:	cf 91       	pop	r28
    4ae2:	bf 91       	pop	r27
    4ae4:	af 91       	pop	r26
    4ae6:	9f 91       	pop	r25
    4ae8:	8f 91       	pop	r24
    4aea:	7f 91       	pop	r23
    4aec:	6f 91       	pop	r22
    4aee:	5f 91       	pop	r21
    4af0:	4f 91       	pop	r20
    4af2:	3f 91       	pop	r19
    4af4:	2f 91       	pop	r18
    4af6:	0f 90       	pop	r0
    4af8:	0b be       	out	0x3b, r0	; 59
    4afa:	0f 90       	pop	r0
    4afc:	0f be       	out	0x3f, r0	; 63
    4afe:	0f 90       	pop	r0
    4b00:	1f 90       	pop	r1
    4b02:	18 95       	reti

00004b04 <__vector_52>:
    4b04:	1f 92       	push	r1
    4b06:	0f 92       	push	r0
    4b08:	0f b6       	in	r0, 0x3f	; 63
    4b0a:	0f 92       	push	r0
    4b0c:	11 24       	eor	r1, r1
    4b0e:	0b b6       	in	r0, 0x3b	; 59
    4b10:	0f 92       	push	r0
    4b12:	2f 93       	push	r18
    4b14:	8f 93       	push	r24
    4b16:	9f 93       	push	r25
    4b18:	af 93       	push	r26
    4b1a:	bf 93       	push	r27
    4b1c:	ef 93       	push	r30
    4b1e:	ff 93       	push	r31
    4b20:	e0 91 cd 14 	lds	r30, 0x14CD	; 0x8014cd <_ser_handle+0x4>
    4b24:	f0 91 ce 14 	lds	r31, 0x14CE	; 0x8014ce <_ser_handle+0x5>
    4b28:	30 97       	sbiw	r30, 0x00	; 0
    4b2a:	b9 f0       	breq	.+46     	; 0x4b5a <__vector_52+0x56>
    4b2c:	02 80       	ldd	r0, Z+2	; 0x02
    4b2e:	f3 81       	ldd	r31, Z+3	; 0x03
    4b30:	e0 2d       	mov	r30, r0
    4b32:	93 81       	ldd	r25, Z+3	; 0x03
    4b34:	82 81       	ldd	r24, Z+2	; 0x02
    4b36:	98 17       	cp	r25, r24
    4b38:	b1 f0       	breq	.+44     	; 0x4b66 <__vector_52+0x62>
    4b3a:	92 81       	ldd	r25, Z+2	; 0x02
    4b3c:	85 81       	ldd	r24, Z+5	; 0x05
    4b3e:	28 2f       	mov	r18, r24
    4b40:	26 95       	lsr	r18
    4b42:	29 23       	and	r18, r25
    4b44:	a0 81       	ld	r26, Z
    4b46:	b1 81       	ldd	r27, Z+1	; 0x01
    4b48:	a2 0f       	add	r26, r18
    4b4a:	b1 1d       	adc	r27, r1
    4b4c:	2c 91       	ld	r18, X
    4b4e:	9f 5f       	subi	r25, 0xFF	; 255
    4b50:	89 23       	and	r24, r25
    4b52:	82 83       	std	Z+2, r24	; 0x02
    4b54:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4b58:	0b c0       	rjmp	.+22     	; 0x4b70 <__vector_52+0x6c>
    4b5a:	e1 ed       	ldi	r30, 0xD1	; 209
    4b5c:	f0 e0       	ldi	r31, 0x00	; 0
    4b5e:	80 81       	ld	r24, Z
    4b60:	8f 7d       	andi	r24, 0xDF	; 223
    4b62:	80 83       	st	Z, r24
    4b64:	05 c0       	rjmp	.+10     	; 0x4b70 <__vector_52+0x6c>
    4b66:	e1 ed       	ldi	r30, 0xD1	; 209
    4b68:	f0 e0       	ldi	r31, 0x00	; 0
    4b6a:	80 81       	ld	r24, Z
    4b6c:	8f 7d       	andi	r24, 0xDF	; 223
    4b6e:	80 83       	st	Z, r24
    4b70:	ff 91       	pop	r31
    4b72:	ef 91       	pop	r30
    4b74:	bf 91       	pop	r27
    4b76:	af 91       	pop	r26
    4b78:	9f 91       	pop	r25
    4b7a:	8f 91       	pop	r24
    4b7c:	2f 91       	pop	r18
    4b7e:	0f 90       	pop	r0
    4b80:	0b be       	out	0x3b, r0	; 59
    4b82:	0f 90       	pop	r0
    4b84:	0f be       	out	0x3f, r0	; 63
    4b86:	0f 90       	pop	r0
    4b88:	1f 90       	pop	r1
    4b8a:	18 95       	reti

00004b8c <__vector_54>:
    4b8c:	1f 92       	push	r1
    4b8e:	0f 92       	push	r0
    4b90:	0f b6       	in	r0, 0x3f	; 63
    4b92:	0f 92       	push	r0
    4b94:	11 24       	eor	r1, r1
    4b96:	0b b6       	in	r0, 0x3b	; 59
    4b98:	0f 92       	push	r0
    4b9a:	2f 93       	push	r18
    4b9c:	3f 93       	push	r19
    4b9e:	4f 93       	push	r20
    4ba0:	5f 93       	push	r21
    4ba2:	6f 93       	push	r22
    4ba4:	7f 93       	push	r23
    4ba6:	8f 93       	push	r24
    4ba8:	9f 93       	push	r25
    4baa:	af 93       	push	r26
    4bac:	bf 93       	push	r27
    4bae:	cf 93       	push	r28
    4bb0:	df 93       	push	r29
    4bb2:	ef 93       	push	r30
    4bb4:	ff 93       	push	r31
    4bb6:	a0 91 cf 14 	lds	r26, 0x14CF	; 0x8014cf <_ser_handle+0x6>
    4bba:	b0 91 d0 14 	lds	r27, 0x14D0	; 0x8014d0 <_ser_handle+0x7>
    4bbe:	10 97       	sbiw	r26, 0x00	; 0
    4bc0:	11 f1       	breq	.+68     	; 0x4c06 <__vector_54+0x7a>
    4bc2:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4bc6:	14 96       	adiw	r26, 0x04	; 4
    4bc8:	ed 91       	ld	r30, X+
    4bca:	fc 91       	ld	r31, X
    4bcc:	15 97       	sbiw	r26, 0x05	; 5
    4bce:	93 81       	ldd	r25, Z+3	; 0x03
    4bd0:	82 81       	ldd	r24, Z+2	; 0x02
    4bd2:	25 81       	ldd	r18, Z+5	; 0x05
    4bd4:	98 1b       	sub	r25, r24
    4bd6:	92 23       	and	r25, r18
    4bd8:	84 81       	ldd	r24, Z+4	; 0x04
    4bda:	98 17       	cp	r25, r24
    4bdc:	61 f0       	breq	.+24     	; 0x4bf6 <__vector_54+0x6a>
    4bde:	83 81       	ldd	r24, Z+3	; 0x03
    4be0:	26 95       	lsr	r18
    4be2:	28 23       	and	r18, r24
    4be4:	c0 81       	ld	r28, Z
    4be6:	d1 81       	ldd	r29, Z+1	; 0x01
    4be8:	c2 0f       	add	r28, r18
    4bea:	d1 1d       	adc	r29, r1
    4bec:	68 83       	st	Y, r22
    4bee:	8f 5f       	subi	r24, 0xFF	; 255
    4bf0:	95 81       	ldd	r25, Z+5	; 0x05
    4bf2:	89 23       	and	r24, r25
    4bf4:	83 83       	std	Z+3, r24	; 0x03
    4bf6:	16 96       	adiw	r26, 0x06	; 6
    4bf8:	ed 91       	ld	r30, X+
    4bfa:	fc 91       	ld	r31, X
    4bfc:	17 97       	sbiw	r26, 0x07	; 7
    4bfe:	30 97       	sbiw	r30, 0x00	; 0
    4c00:	11 f0       	breq	.+4      	; 0x4c06 <__vector_54+0x7a>
    4c02:	cd 01       	movw	r24, r26
    4c04:	19 95       	eicall
    4c06:	ff 91       	pop	r31
    4c08:	ef 91       	pop	r30
    4c0a:	df 91       	pop	r29
    4c0c:	cf 91       	pop	r28
    4c0e:	bf 91       	pop	r27
    4c10:	af 91       	pop	r26
    4c12:	9f 91       	pop	r25
    4c14:	8f 91       	pop	r24
    4c16:	7f 91       	pop	r23
    4c18:	6f 91       	pop	r22
    4c1a:	5f 91       	pop	r21
    4c1c:	4f 91       	pop	r20
    4c1e:	3f 91       	pop	r19
    4c20:	2f 91       	pop	r18
    4c22:	0f 90       	pop	r0
    4c24:	0b be       	out	0x3b, r0	; 59
    4c26:	0f 90       	pop	r0
    4c28:	0f be       	out	0x3f, r0	; 63
    4c2a:	0f 90       	pop	r0
    4c2c:	1f 90       	pop	r1
    4c2e:	18 95       	reti

00004c30 <__vector_55>:
    4c30:	1f 92       	push	r1
    4c32:	0f 92       	push	r0
    4c34:	0f b6       	in	r0, 0x3f	; 63
    4c36:	0f 92       	push	r0
    4c38:	11 24       	eor	r1, r1
    4c3a:	0b b6       	in	r0, 0x3b	; 59
    4c3c:	0f 92       	push	r0
    4c3e:	2f 93       	push	r18
    4c40:	8f 93       	push	r24
    4c42:	9f 93       	push	r25
    4c44:	af 93       	push	r26
    4c46:	bf 93       	push	r27
    4c48:	ef 93       	push	r30
    4c4a:	ff 93       	push	r31
    4c4c:	e0 91 cf 14 	lds	r30, 0x14CF	; 0x8014cf <_ser_handle+0x6>
    4c50:	f0 91 d0 14 	lds	r31, 0x14D0	; 0x8014d0 <_ser_handle+0x7>
    4c54:	30 97       	sbiw	r30, 0x00	; 0
    4c56:	b9 f0       	breq	.+46     	; 0x4c86 <__vector_55+0x56>
    4c58:	02 80       	ldd	r0, Z+2	; 0x02
    4c5a:	f3 81       	ldd	r31, Z+3	; 0x03
    4c5c:	e0 2d       	mov	r30, r0
    4c5e:	93 81       	ldd	r25, Z+3	; 0x03
    4c60:	82 81       	ldd	r24, Z+2	; 0x02
    4c62:	98 17       	cp	r25, r24
    4c64:	b1 f0       	breq	.+44     	; 0x4c92 <__vector_55+0x62>
    4c66:	92 81       	ldd	r25, Z+2	; 0x02
    4c68:	85 81       	ldd	r24, Z+5	; 0x05
    4c6a:	28 2f       	mov	r18, r24
    4c6c:	26 95       	lsr	r18
    4c6e:	29 23       	and	r18, r25
    4c70:	a0 81       	ld	r26, Z
    4c72:	b1 81       	ldd	r27, Z+1	; 0x01
    4c74:	a2 0f       	add	r26, r18
    4c76:	b1 1d       	adc	r27, r1
    4c78:	2c 91       	ld	r18, X
    4c7a:	9f 5f       	subi	r25, 0xFF	; 255
    4c7c:	89 23       	and	r24, r25
    4c7e:	82 83       	std	Z+2, r24	; 0x02
    4c80:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4c84:	0b c0       	rjmp	.+22     	; 0x4c9c <__vector_55+0x6c>
    4c86:	e1 e3       	ldi	r30, 0x31	; 49
    4c88:	f1 e0       	ldi	r31, 0x01	; 1
    4c8a:	80 81       	ld	r24, Z
    4c8c:	8f 7d       	andi	r24, 0xDF	; 223
    4c8e:	80 83       	st	Z, r24
    4c90:	05 c0       	rjmp	.+10     	; 0x4c9c <__vector_55+0x6c>
    4c92:	e1 e3       	ldi	r30, 0x31	; 49
    4c94:	f1 e0       	ldi	r31, 0x01	; 1
    4c96:	80 81       	ld	r24, Z
    4c98:	8f 7d       	andi	r24, 0xDF	; 223
    4c9a:	80 83       	st	Z, r24
    4c9c:	ff 91       	pop	r31
    4c9e:	ef 91       	pop	r30
    4ca0:	bf 91       	pop	r27
    4ca2:	af 91       	pop	r26
    4ca4:	9f 91       	pop	r25
    4ca6:	8f 91       	pop	r24
    4ca8:	2f 91       	pop	r18
    4caa:	0f 90       	pop	r0
    4cac:	0b be       	out	0x3b, r0	; 59
    4cae:	0f 90       	pop	r0
    4cb0:	0f be       	out	0x3f, r0	; 63
    4cb2:	0f 90       	pop	r0
    4cb4:	1f 90       	pop	r1
    4cb6:	18 95       	reti

00004cb8 <usart_getchar>:
    4cb8:	cf 93       	push	r28
    4cba:	df 93       	push	r29
    4cbc:	1f 92       	push	r1
    4cbe:	cd b7       	in	r28, 0x3d	; 61
    4cc0:	de b7       	in	r29, 0x3e	; 62
    4cc2:	be 01       	movw	r22, r28
    4cc4:	6f 5f       	subi	r22, 0xFF	; 255
    4cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    4cc8:	80 91 d1 14 	lds	r24, 0x14D1	; 0x8014d1 <_com_serial_instance>
    4ccc:	90 91 d2 14 	lds	r25, 0x14D2	; 0x8014d2 <_com_serial_instance+0x1>
    4cd0:	7b dd       	rcall	.-1290   	; 0x47c8 <serial_getByte>
    4cd2:	81 11       	cpse	r24, r1
    4cd4:	f6 cf       	rjmp	.-20     	; 0x4cc2 <usart_getchar+0xa>
    4cd6:	89 81       	ldd	r24, Y+1	; 0x01
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	0f 90       	pop	r0
    4cdc:	df 91       	pop	r29
    4cde:	cf 91       	pop	r28
    4ce0:	08 95       	ret

00004ce2 <usart_putchar>:
    4ce2:	68 2f       	mov	r22, r24
    4ce4:	80 91 d1 14 	lds	r24, 0x14D1	; 0x8014d1 <_com_serial_instance>
    4ce8:	90 91 d2 14 	lds	r25, 0x14D2	; 0x8014d2 <_com_serial_instance+0x1>
    4cec:	ed dc       	rcall	.-1574   	; 0x46c8 <serial_sendByte>
    4cee:	80 e0       	ldi	r24, 0x00	; 0
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	08 95       	ret

00004cf4 <stdio_initialise>:
    4cf4:	8f 92       	push	r8
    4cf6:	9f 92       	push	r9
    4cf8:	af 92       	push	r10
    4cfa:	cf 92       	push	r12
    4cfc:	ef 92       	push	r14
    4cfe:	0f 93       	push	r16
    4d00:	81 2c       	mov	r8, r1
    4d02:	91 2c       	mov	r9, r1
    4d04:	68 94       	set
    4d06:	aa 24       	eor	r10, r10
    4d08:	a7 f8       	bld	r10, 7
    4d0a:	68 94       	set
    4d0c:	cc 24       	eor	r12, r12
    4d0e:	c7 f8       	bld	r12, 7
    4d10:	e1 2c       	mov	r14, r1
    4d12:	00 e0       	ldi	r16, 0x00	; 0
    4d14:	23 e0       	ldi	r18, 0x03	; 3
    4d16:	40 e0       	ldi	r20, 0x00	; 0
    4d18:	51 ee       	ldi	r21, 0xE1	; 225
    4d1a:	60 e0       	ldi	r22, 0x00	; 0
    4d1c:	70 e0       	ldi	r23, 0x00	; 0
    4d1e:	2f dc       	rcall	.-1954   	; 0x457e <serial_create>
    4d20:	90 93 d2 14 	sts	0x14D2, r25	; 0x8014d2 <_com_serial_instance+0x1>
    4d24:	80 93 d1 14 	sts	0x14D1, r24	; 0x8014d1 <_com_serial_instance>
    4d28:	ee e1       	ldi	r30, 0x1E	; 30
    4d2a:	f5 e1       	ldi	r31, 0x15	; 21
    4d2c:	83 e1       	ldi	r24, 0x13	; 19
    4d2e:	92 e0       	ldi	r25, 0x02	; 2
    4d30:	91 83       	std	Z+1, r25	; 0x01
    4d32:	80 83       	st	Z, r24
    4d34:	93 83       	std	Z+3, r25	; 0x03
    4d36:	82 83       	std	Z+2, r24	; 0x02
    4d38:	0f 91       	pop	r16
    4d3a:	ef 90       	pop	r14
    4d3c:	cf 90       	pop	r12
    4d3e:	af 90       	pop	r10
    4d40:	9f 90       	pop	r9
    4d42:	8f 90       	pop	r8
    4d44:	08 95       	ret

00004d46 <_turn_off>:
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	fc 01       	movw	r30, r24
    4d4a:	ee 0f       	add	r30, r30
    4d4c:	ff 1f       	adc	r31, r31
    4d4e:	e8 0f       	add	r30, r24
    4d50:	f9 1f       	adc	r31, r25
    4d52:	ee 0f       	add	r30, r30
    4d54:	ff 1f       	adc	r31, r31
    4d56:	ed 52       	subi	r30, 0x2D	; 45
    4d58:	fb 4e       	sbci	r31, 0xEB	; 235
    4d5a:	23 81       	ldd	r18, Z+3	; 0x03
    4d5c:	21 11       	cpse	r18, r1
    4d5e:	1f c0       	rjmp	.+62     	; 0x4d9e <_turn_off+0x58>
    4d60:	9c 01       	movw	r18, r24
    4d62:	22 0f       	add	r18, r18
    4d64:	33 1f       	adc	r19, r19
    4d66:	f9 01       	movw	r30, r18
    4d68:	e8 0f       	add	r30, r24
    4d6a:	f9 1f       	adc	r31, r25
    4d6c:	ee 0f       	add	r30, r30
    4d6e:	ff 1f       	adc	r31, r31
    4d70:	ed 52       	subi	r30, 0x2D	; 45
    4d72:	fb 4e       	sbci	r31, 0xEB	; 235
    4d74:	a0 81       	ld	r26, Z
    4d76:	b1 81       	ldd	r27, Z+1	; 0x01
    4d78:	4c 91       	ld	r20, X
    4d7a:	f9 01       	movw	r30, r18
    4d7c:	e8 0f       	add	r30, r24
    4d7e:	f9 1f       	adc	r31, r25
    4d80:	ee 0f       	add	r30, r30
    4d82:	ff 1f       	adc	r31, r31
    4d84:	ed 52       	subi	r30, 0x2D	; 45
    4d86:	fb 4e       	sbci	r31, 0xEB	; 235
    4d88:	81 e0       	ldi	r24, 0x01	; 1
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	02 80       	ldd	r0, Z+2	; 0x02
    4d8e:	02 c0       	rjmp	.+4      	; 0x4d94 <_turn_off+0x4e>
    4d90:	88 0f       	add	r24, r24
    4d92:	99 1f       	adc	r25, r25
    4d94:	0a 94       	dec	r0
    4d96:	e2 f7       	brpl	.-8      	; 0x4d90 <_turn_off+0x4a>
    4d98:	84 2b       	or	r24, r20
    4d9a:	8c 93       	st	X, r24
    4d9c:	08 95       	ret
    4d9e:	fc 01       	movw	r30, r24
    4da0:	ee 0f       	add	r30, r30
    4da2:	ff 1f       	adc	r31, r31
    4da4:	df 01       	movw	r26, r30
    4da6:	a8 0f       	add	r26, r24
    4da8:	b9 1f       	adc	r27, r25
    4daa:	aa 0f       	add	r26, r26
    4dac:	bb 1f       	adc	r27, r27
    4dae:	ad 52       	subi	r26, 0x2D	; 45
    4db0:	bb 4e       	sbci	r27, 0xEB	; 235
    4db2:	0d 90       	ld	r0, X+
    4db4:	bc 91       	ld	r27, X
    4db6:	a0 2d       	mov	r26, r0
    4db8:	2c 91       	ld	r18, X
    4dba:	e8 0f       	add	r30, r24
    4dbc:	f9 1f       	adc	r31, r25
    4dbe:	ee 0f       	add	r30, r30
    4dc0:	ff 1f       	adc	r31, r31
    4dc2:	ed 52       	subi	r30, 0x2D	; 45
    4dc4:	fb 4e       	sbci	r31, 0xEB	; 235
    4dc6:	81 e0       	ldi	r24, 0x01	; 1
    4dc8:	90 e0       	ldi	r25, 0x00	; 0
    4dca:	02 80       	ldd	r0, Z+2	; 0x02
    4dcc:	02 c0       	rjmp	.+4      	; 0x4dd2 <_turn_off+0x8c>
    4dce:	88 0f       	add	r24, r24
    4dd0:	99 1f       	adc	r25, r25
    4dd2:	0a 94       	dec	r0
    4dd4:	e2 f7       	brpl	.-8      	; 0x4dce <_turn_off+0x88>
    4dd6:	80 95       	com	r24
    4dd8:	82 23       	and	r24, r18
    4dda:	8c 93       	st	X, r24
    4ddc:	08 95       	ret

00004dde <_turn_on>:
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	fc 01       	movw	r30, r24
    4de2:	ee 0f       	add	r30, r30
    4de4:	ff 1f       	adc	r31, r31
    4de6:	e8 0f       	add	r30, r24
    4de8:	f9 1f       	adc	r31, r25
    4dea:	ee 0f       	add	r30, r30
    4dec:	ff 1f       	adc	r31, r31
    4dee:	ed 52       	subi	r30, 0x2D	; 45
    4df0:	fb 4e       	sbci	r31, 0xEB	; 235
    4df2:	23 81       	ldd	r18, Z+3	; 0x03
    4df4:	21 11       	cpse	r18, r1
    4df6:	20 c0       	rjmp	.+64     	; 0x4e38 <_turn_on+0x5a>
    4df8:	9c 01       	movw	r18, r24
    4dfa:	22 0f       	add	r18, r18
    4dfc:	33 1f       	adc	r19, r19
    4dfe:	f9 01       	movw	r30, r18
    4e00:	e8 0f       	add	r30, r24
    4e02:	f9 1f       	adc	r31, r25
    4e04:	ee 0f       	add	r30, r30
    4e06:	ff 1f       	adc	r31, r31
    4e08:	ed 52       	subi	r30, 0x2D	; 45
    4e0a:	fb 4e       	sbci	r31, 0xEB	; 235
    4e0c:	a0 81       	ld	r26, Z
    4e0e:	b1 81       	ldd	r27, Z+1	; 0x01
    4e10:	4c 91       	ld	r20, X
    4e12:	f9 01       	movw	r30, r18
    4e14:	e8 0f       	add	r30, r24
    4e16:	f9 1f       	adc	r31, r25
    4e18:	ee 0f       	add	r30, r30
    4e1a:	ff 1f       	adc	r31, r31
    4e1c:	ed 52       	subi	r30, 0x2D	; 45
    4e1e:	fb 4e       	sbci	r31, 0xEB	; 235
    4e20:	81 e0       	ldi	r24, 0x01	; 1
    4e22:	90 e0       	ldi	r25, 0x00	; 0
    4e24:	02 80       	ldd	r0, Z+2	; 0x02
    4e26:	02 c0       	rjmp	.+4      	; 0x4e2c <_turn_on+0x4e>
    4e28:	88 0f       	add	r24, r24
    4e2a:	99 1f       	adc	r25, r25
    4e2c:	0a 94       	dec	r0
    4e2e:	e2 f7       	brpl	.-8      	; 0x4e28 <_turn_on+0x4a>
    4e30:	80 95       	com	r24
    4e32:	84 23       	and	r24, r20
    4e34:	8c 93       	st	X, r24
    4e36:	08 95       	ret
    4e38:	fc 01       	movw	r30, r24
    4e3a:	ee 0f       	add	r30, r30
    4e3c:	ff 1f       	adc	r31, r31
    4e3e:	df 01       	movw	r26, r30
    4e40:	a8 0f       	add	r26, r24
    4e42:	b9 1f       	adc	r27, r25
    4e44:	aa 0f       	add	r26, r26
    4e46:	bb 1f       	adc	r27, r27
    4e48:	ad 52       	subi	r26, 0x2D	; 45
    4e4a:	bb 4e       	sbci	r27, 0xEB	; 235
    4e4c:	0d 90       	ld	r0, X+
    4e4e:	bc 91       	ld	r27, X
    4e50:	a0 2d       	mov	r26, r0
    4e52:	2c 91       	ld	r18, X
    4e54:	e8 0f       	add	r30, r24
    4e56:	f9 1f       	adc	r31, r25
    4e58:	ee 0f       	add	r30, r30
    4e5a:	ff 1f       	adc	r31, r31
    4e5c:	ed 52       	subi	r30, 0x2D	; 45
    4e5e:	fb 4e       	sbci	r31, 0xEB	; 235
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	02 80       	ldd	r0, Z+2	; 0x02
    4e66:	02 c0       	rjmp	.+4      	; 0x4e6c <_turn_on+0x8e>
    4e68:	88 0f       	add	r24, r24
    4e6a:	99 1f       	adc	r25, r25
    4e6c:	0a 94       	dec	r0
    4e6e:	e2 f7       	brpl	.-8      	; 0x4e68 <_turn_on+0x8a>
    4e70:	82 2b       	or	r24, r18
    4e72:	8c 93       	st	X, r24
    4e74:	08 95       	ret

00004e76 <_hal_led_task>:
    4e76:	cc 24       	eor	r12, r12
    4e78:	c3 94       	inc	r12
    4e7a:	d1 2c       	mov	r13, r1
    4e7c:	68 94       	set
    4e7e:	bb 24       	eor	r11, r11
    4e80:	b2 f8       	bld	r11, 2
    4e82:	c3 ed       	ldi	r28, 0xD3	; 211
    4e84:	d4 e1       	ldi	r29, 0x14	; 20
    4e86:	10 e0       	ldi	r17, 0x00	; 0
    4e88:	8c 81       	ldd	r24, Y+4	; 0x04
    4e8a:	81 30       	cpi	r24, 0x01	; 1
    4e8c:	81 f0       	breq	.+32     	; 0x4eae <_hal_led_task+0x38>
    4e8e:	18 f1       	brcs	.+70     	; 0x4ed6 <_hal_led_task+0x60>
    4e90:	82 30       	cpi	r24, 0x02	; 2
    4e92:	61 f5       	brne	.+88     	; 0x4eec <_hal_led_task+0x76>
    4e94:	e8 81       	ld	r30, Y
    4e96:	f9 81       	ldd	r31, Y+1	; 0x01
    4e98:	20 81       	ld	r18, Z
    4e9a:	c6 01       	movw	r24, r12
    4e9c:	0a 80       	ldd	r0, Y+2	; 0x02
    4e9e:	02 c0       	rjmp	.+4      	; 0x4ea4 <_hal_led_task+0x2e>
    4ea0:	88 0f       	add	r24, r24
    4ea2:	99 1f       	adc	r25, r25
    4ea4:	0a 94       	dec	r0
    4ea6:	e2 f7       	brpl	.-8      	; 0x4ea0 <_hal_led_task+0x2a>
    4ea8:	82 27       	eor	r24, r18
    4eaa:	80 83       	st	Z, r24
    4eac:	1f c0       	rjmp	.+62     	; 0x4eec <_hal_led_task+0x76>
    4eae:	8d 81       	ldd	r24, Y+5	; 0x05
    4eb0:	8f 5f       	subi	r24, 0xFF	; 255
    4eb2:	8a 30       	cpi	r24, 0x0A	; 10
    4eb4:	10 f4       	brcc	.+4      	; 0x4eba <_hal_led_task+0x44>
    4eb6:	8d 83       	std	Y+5, r24	; 0x05
    4eb8:	19 c0       	rjmp	.+50     	; 0x4eec <_hal_led_task+0x76>
    4eba:	1d 82       	std	Y+5, r1	; 0x05
    4ebc:	e8 81       	ld	r30, Y
    4ebe:	f9 81       	ldd	r31, Y+1	; 0x01
    4ec0:	20 81       	ld	r18, Z
    4ec2:	c6 01       	movw	r24, r12
    4ec4:	0a 80       	ldd	r0, Y+2	; 0x02
    4ec6:	02 c0       	rjmp	.+4      	; 0x4ecc <_hal_led_task+0x56>
    4ec8:	88 0f       	add	r24, r24
    4eca:	99 1f       	adc	r25, r25
    4ecc:	0a 94       	dec	r0
    4ece:	e2 f7       	brpl	.-8      	; 0x4ec8 <_hal_led_task+0x52>
    4ed0:	82 27       	eor	r24, r18
    4ed2:	80 83       	st	Z, r24
    4ed4:	0b c0       	rjmp	.+22     	; 0x4eec <_hal_led_task+0x76>
    4ed6:	0d 81       	ldd	r16, Y+5	; 0x05
    4ed8:	00 23       	and	r16, r16
    4eda:	29 f0       	breq	.+10     	; 0x4ee6 <_hal_led_task+0x70>
    4edc:	81 2f       	mov	r24, r17
    4ede:	7f df       	rcall	.-258    	; 0x4dde <_turn_on>
    4ee0:	01 50       	subi	r16, 0x01	; 1
    4ee2:	0d 83       	std	Y+5, r16	; 0x05
    4ee4:	03 c0       	rjmp	.+6      	; 0x4eec <_hal_led_task+0x76>
    4ee6:	bc 82       	std	Y+4, r11	; 0x04
    4ee8:	81 2f       	mov	r24, r17
    4eea:	2d df       	rcall	.-422    	; 0x4d46 <_turn_off>
    4eec:	1f 5f       	subi	r17, 0xFF	; 255
    4eee:	26 96       	adiw	r28, 0x06	; 6
    4ef0:	14 30       	cpi	r17, 0x04	; 4
    4ef2:	51 f6       	brne	.-108    	; 0x4e88 <_hal_led_task+0x12>
    4ef4:	65 e0       	ldi	r22, 0x05	; 5
    4ef6:	70 e0       	ldi	r23, 0x00	; 0
    4ef8:	80 e0       	ldi	r24, 0x00	; 0
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <vTaskDelay>
    4f00:	c0 cf       	rjmp	.-128    	; 0x4e82 <_hal_led_task+0xc>

00004f02 <status_leds_initialise>:
    4f02:	ef 92       	push	r14
    4f04:	ff 92       	push	r15
    4f06:	0f 93       	push	r16
    4f08:	1f 93       	push	r17
    4f0a:	cf 93       	push	r28
    4f0c:	df 93       	push	r29
    4f0e:	08 2f       	mov	r16, r24
    4f10:	80 e4       	ldi	r24, 0x40	; 64
    4f12:	87 b9       	out	0x07, r24	; 7
    4f14:	c3 ed       	ldi	r28, 0xD3	; 211
    4f16:	d4 e1       	ldi	r29, 0x14	; 20
    4f18:	0f 2e       	mov	r0, r31
    4f1a:	f8 e2       	ldi	r31, 0x28	; 40
    4f1c:	ef 2e       	mov	r14, r31
    4f1e:	f1 2c       	mov	r15, r1
    4f20:	f0 2d       	mov	r31, r0
    4f22:	f9 82       	std	Y+1, r15	; 0x01
    4f24:	e8 82       	st	Y, r14
    4f26:	86 e0       	ldi	r24, 0x06	; 6
    4f28:	8a 83       	std	Y+2, r24	; 0x02
    4f2a:	1b 82       	std	Y+3, r1	; 0x03
    4f2c:	14 e0       	ldi	r17, 0x04	; 4
    4f2e:	1c 83       	std	Y+4, r17	; 0x04
    4f30:	80 e0       	ldi	r24, 0x00	; 0
    4f32:	09 df       	rcall	.-494    	; 0x4d46 <_turn_off>
    4f34:	80 e8       	ldi	r24, 0x80	; 128
    4f36:	87 b9       	out	0x07, r24	; 7
    4f38:	ff 82       	std	Y+7, r15	; 0x07
    4f3a:	ee 82       	std	Y+6, r14	; 0x06
    4f3c:	87 e0       	ldi	r24, 0x07	; 7
    4f3e:	88 87       	std	Y+8, r24	; 0x08
    4f40:	19 86       	std	Y+9, r1	; 0x09
    4f42:	1a 87       	std	Y+10, r17	; 0x0a
    4f44:	81 e0       	ldi	r24, 0x01	; 1
    4f46:	ff de       	rcall	.-514    	; 0x4d46 <_turn_off>
    4f48:	80 e2       	ldi	r24, 0x20	; 32
    4f4a:	83 bb       	out	0x13, r24	; 19
    4f4c:	84 e3       	ldi	r24, 0x34	; 52
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	9d 87       	std	Y+13, r25	; 0x0d
    4f52:	8c 87       	std	Y+12, r24	; 0x0c
    4f54:	85 e0       	ldi	r24, 0x05	; 5
    4f56:	8e 87       	std	Y+14, r24	; 0x0e
    4f58:	1f 86       	std	Y+15, r1	; 0x0f
    4f5a:	18 8b       	std	Y+16, r17	; 0x10
    4f5c:	82 e0       	ldi	r24, 0x02	; 2
    4f5e:	f3 de       	rcall	.-538    	; 0x4d46 <_turn_off>
    4f60:	80 e1       	ldi	r24, 0x10	; 16
    4f62:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    4f66:	82 e0       	ldi	r24, 0x02	; 2
    4f68:	91 e0       	ldi	r25, 0x01	; 1
    4f6a:	9b 8b       	std	Y+19, r25	; 0x13
    4f6c:	8a 8b       	std	Y+18, r24	; 0x12
    4f6e:	1c 8b       	std	Y+20, r17	; 0x14
    4f70:	1d 8a       	std	Y+21, r1	; 0x15
    4f72:	1e 8b       	std	Y+22, r17	; 0x16
    4f74:	83 e0       	ldi	r24, 0x03	; 3
    4f76:	e7 de       	rcall	.-562    	; 0x4d46 <_turn_off>
    4f78:	e1 2c       	mov	r14, r1
    4f7a:	f1 2c       	mov	r15, r1
    4f7c:	20 e0       	ldi	r18, 0x00	; 0
    4f7e:	30 e0       	ldi	r19, 0x00	; 0
    4f80:	40 ec       	ldi	r20, 0xC0	; 192
    4f82:	50 e0       	ldi	r21, 0x00	; 0
    4f84:	6f ed       	ldi	r22, 0xDF	; 223
    4f86:	78 e0       	ldi	r23, 0x08	; 8
    4f88:	8b e3       	ldi	r24, 0x3B	; 59
    4f8a:	97 e2       	ldi	r25, 0x27	; 39
    4f8c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <xTaskCreate>
    4f90:	df 91       	pop	r29
    4f92:	cf 91       	pop	r28
    4f94:	1f 91       	pop	r17
    4f96:	0f 91       	pop	r16
    4f98:	ff 90       	pop	r15
    4f9a:	ef 90       	pop	r14
    4f9c:	08 95       	ret

00004f9e <status_leds_slowBlink>:
    4f9e:	cf 93       	push	r28
    4fa0:	df 93       	push	r29
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	fc 01       	movw	r30, r24
    4fa6:	ee 0f       	add	r30, r30
    4fa8:	ff 1f       	adc	r31, r31
    4faa:	df 01       	movw	r26, r30
    4fac:	a8 0f       	add	r26, r24
    4fae:	b9 1f       	adc	r27, r25
    4fb0:	aa 0f       	add	r26, r26
    4fb2:	bb 1f       	adc	r27, r27
    4fb4:	ad 52       	subi	r26, 0x2D	; 45
    4fb6:	bb 4e       	sbci	r27, 0xEB	; 235
    4fb8:	cd 91       	ld	r28, X+
    4fba:	dc 91       	ld	r29, X
    4fbc:	11 97       	sbiw	r26, 0x01	; 1
    4fbe:	48 81       	ld	r20, Y
    4fc0:	21 e0       	ldi	r18, 0x01	; 1
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	12 96       	adiw	r26, 0x02	; 2
    4fc6:	0c 90       	ld	r0, X
    4fc8:	12 97       	sbiw	r26, 0x02	; 2
    4fca:	02 c0       	rjmp	.+4      	; 0x4fd0 <status_leds_slowBlink+0x32>
    4fcc:	22 0f       	add	r18, r18
    4fce:	33 1f       	adc	r19, r19
    4fd0:	0a 94       	dec	r0
    4fd2:	e2 f7       	brpl	.-8      	; 0x4fcc <status_leds_slowBlink+0x2e>
    4fd4:	24 27       	eor	r18, r20
    4fd6:	28 83       	st	Y, r18
    4fd8:	fd 01       	movw	r30, r26
    4fda:	81 e0       	ldi	r24, 0x01	; 1
    4fdc:	84 83       	std	Z+4, r24	; 0x04
    4fde:	df 91       	pop	r29
    4fe0:	cf 91       	pop	r28
    4fe2:	08 95       	ret

00004fe4 <_callBack>:
    4fe4:	e0 91 f3 14 	lds	r30, 0x14F3	; 0x8014f3 <_callBackFunction>
    4fe8:	f0 91 f4 14 	lds	r31, 0x14F4	; 0x8014f4 <_callBackFunction+0x1>
    4fec:	30 97       	sbiw	r30, 0x00	; 0
    4fee:	09 f0       	breq	.+2      	; 0x4ff2 <_callBack+0xe>
    4ff0:	19 95       	eicall
    4ff2:	08 95       	ret

00004ff4 <_tsl2591TwiCallback>:
    4ff4:	64 50       	subi	r22, 0x04	; 4
    4ff6:	62 30       	cpi	r22, 0x02	; 2
    4ff8:	08 f0       	brcs	.+2      	; 0x4ffc <_tsl2591TwiCallback+0x8>
    4ffa:	3b c0       	rjmp	.+118    	; 0x5072 <_tsl2591TwiCallback+0x7e>
    4ffc:	20 91 f2 14 	lds	r18, 0x14F2	; 0x8014f2 <_nextState>
    5000:	22 30       	cpi	r18, 0x02	; 2
    5002:	79 f0       	breq	.+30     	; 0x5022 <_tsl2591TwiCallback+0x2e>
    5004:	18 f4       	brcc	.+6      	; 0x500c <_tsl2591TwiCallback+0x18>
    5006:	21 30       	cpi	r18, 0x01	; 1
    5008:	31 f0       	breq	.+12     	; 0x5016 <_tsl2591TwiCallback+0x22>
    500a:	30 c0       	rjmp	.+96     	; 0x506c <_tsl2591TwiCallback+0x78>
    500c:	23 30       	cpi	r18, 0x03	; 3
    500e:	81 f0       	breq	.+32     	; 0x5030 <_tsl2591TwiCallback+0x3c>
    5010:	24 30       	cpi	r18, 0x04	; 4
    5012:	a1 f0       	breq	.+40     	; 0x503c <_tsl2591TwiCallback+0x48>
    5014:	2b c0       	rjmp	.+86     	; 0x506c <_tsl2591TwiCallback+0x78>
    5016:	22 e0       	ldi	r18, 0x02	; 2
    5018:	20 93 f2 14 	sts	0x14F2, r18	; 0x8014f2 <_nextState>
    501c:	61 e0       	ldi	r22, 0x01	; 1
    501e:	0a c2       	rjmp	.+1044   	; 0x5434 <twiReceive>
    5020:	08 95       	ret
    5022:	fa 01       	movw	r30, r20
    5024:	80 81       	ld	r24, Z
    5026:	80 93 ef 14 	sts	0x14EF, r24	; 0x8014ef <_deviceId>
    502a:	82 e0       	ldi	r24, 0x02	; 2
    502c:	db cf       	rjmp	.-74     	; 0x4fe4 <_callBack>
    502e:	08 95       	ret
    5030:	24 e0       	ldi	r18, 0x04	; 4
    5032:	20 93 f2 14 	sts	0x14F2, r18	; 0x8014f2 <_nextState>
    5036:	64 e0       	ldi	r22, 0x04	; 4
    5038:	fd c1       	rjmp	.+1018   	; 0x5434 <twiReceive>
    503a:	08 95       	ret
    503c:	fa 01       	movw	r30, r20
    503e:	81 81       	ldd	r24, Z+1	; 0x01
    5040:	90 e0       	ldi	r25, 0x00	; 0
    5042:	98 2f       	mov	r25, r24
    5044:	88 27       	eor	r24, r24
    5046:	20 81       	ld	r18, Z
    5048:	82 2b       	or	r24, r18
    504a:	90 93 ee 14 	sts	0x14EE, r25	; 0x8014ee <_fullSpectrumRaw+0x1>
    504e:	80 93 ed 14 	sts	0x14ED, r24	; 0x8014ed <_fullSpectrumRaw>
    5052:	83 81       	ldd	r24, Z+3	; 0x03
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	98 2f       	mov	r25, r24
    5058:	88 27       	eor	r24, r24
    505a:	22 81       	ldd	r18, Z+2	; 0x02
    505c:	82 2b       	or	r24, r18
    505e:	90 93 ec 14 	sts	0x14EC, r25	; 0x8014ec <_infraredRaw+0x1>
    5062:	80 93 eb 14 	sts	0x14EB, r24	; 0x8014eb <_infraredRaw>
    5066:	81 e0       	ldi	r24, 0x01	; 1
    5068:	bd cf       	rjmp	.-134    	; 0x4fe4 <_callBack>
    506a:	08 95       	ret
    506c:	80 e0       	ldi	r24, 0x00	; 0
    506e:	ba cf       	rjmp	.-140    	; 0x4fe4 <_callBack>
    5070:	08 95       	ret
    5072:	10 92 f2 14 	sts	0x14F2, r1	; 0x8014f2 <_nextState>
    5076:	86 e0       	ldi	r24, 0x06	; 6
    5078:	b5 cf       	rjmp	.-150    	; 0x4fe4 <_callBack>
    507a:	08 95       	ret

0000507c <_twiTransmit>:
    507c:	20 91 f5 14 	lds	r18, 0x14F5	; 0x8014f5 <_twiHandler>
    5080:	30 91 f6 14 	lds	r19, 0x14F6	; 0x8014f6 <_twiHandler+0x1>
    5084:	21 15       	cp	r18, r1
    5086:	31 05       	cpc	r19, r1
    5088:	41 f0       	breq	.+16     	; 0x509a <_twiTransmit+0x1e>
    508a:	46 2f       	mov	r20, r22
    508c:	bc 01       	movw	r22, r24
    508e:	c9 01       	movw	r24, r18
    5090:	85 d1       	rcall	.+778    	; 0x539c <twiTransmit>
    5092:	82 30       	cpi	r24, 0x02	; 2
    5094:	21 f0       	breq	.+8      	; 0x509e <_twiTransmit+0x22>
    5096:	80 e0       	ldi	r24, 0x00	; 0
    5098:	08 95       	ret
    509a:	87 e0       	ldi	r24, 0x07	; 7
    509c:	08 95       	ret
    509e:	85 e0       	ldi	r24, 0x05	; 5
    50a0:	08 95       	ret

000050a2 <tsl2591_initialise>:
    50a2:	0f 93       	push	r16
    50a4:	1f 93       	push	r17
    50a6:	90 93 f4 14 	sts	0x14F4, r25	; 0x8014f4 <_callBackFunction+0x1>
    50aa:	80 93 f3 14 	sts	0x14F3, r24	; 0x8014f3 <_callBackFunction>
    50ae:	0a ef       	ldi	r16, 0xFA	; 250
    50b0:	17 e2       	ldi	r17, 0x27	; 39
    50b2:	20 e0       	ldi	r18, 0x00	; 0
    50b4:	34 e2       	ldi	r19, 0x24	; 36
    50b6:	44 ef       	ldi	r20, 0xF4	; 244
    50b8:	50 e0       	ldi	r21, 0x00	; 0
    50ba:	60 e0       	ldi	r22, 0x00	; 0
    50bc:	89 e2       	ldi	r24, 0x29	; 41
    50be:	1d d1       	rcall	.+570    	; 0x52fa <twiCreate>
    50c0:	90 93 f6 14 	sts	0x14F6, r25	; 0x8014f6 <_twiHandler+0x1>
    50c4:	80 93 f5 14 	sts	0x14F5, r24	; 0x8014f5 <_twiHandler>
    50c8:	89 2b       	or	r24, r25
    50ca:	11 f0       	breq	.+4      	; 0x50d0 <tsl2591_initialise+0x2e>
    50cc:	80 e0       	ldi	r24, 0x00	; 0
    50ce:	01 c0       	rjmp	.+2      	; 0x50d2 <tsl2591_initialise+0x30>
    50d0:	88 e0       	ldi	r24, 0x08	; 8
    50d2:	1f 91       	pop	r17
    50d4:	0f 91       	pop	r16
    50d6:	08 95       	ret

000050d8 <tsl2591_enable>:
    50d8:	cf 93       	push	r28
    50da:	df 93       	push	r29
    50dc:	1f 92       	push	r1
    50de:	1f 92       	push	r1
    50e0:	cd b7       	in	r28, 0x3d	; 61
    50e2:	de b7       	in	r29, 0x3e	; 62
    50e4:	80 ea       	ldi	r24, 0xA0	; 160
    50e6:	89 83       	std	Y+1, r24	; 0x01
    50e8:	83 e0       	ldi	r24, 0x03	; 3
    50ea:	8a 83       	std	Y+2, r24	; 0x02
    50ec:	10 92 f2 14 	sts	0x14F2, r1	; 0x8014f2 <_nextState>
    50f0:	62 e0       	ldi	r22, 0x02	; 2
    50f2:	ce 01       	movw	r24, r28
    50f4:	01 96       	adiw	r24, 0x01	; 1
    50f6:	c2 df       	rcall	.-124    	; 0x507c <_twiTransmit>
    50f8:	0f 90       	pop	r0
    50fa:	0f 90       	pop	r0
    50fc:	df 91       	pop	r29
    50fe:	cf 91       	pop	r28
    5100:	08 95       	ret

00005102 <tsl2591_fetchData>:
    5102:	cf 93       	push	r28
    5104:	df 93       	push	r29
    5106:	1f 92       	push	r1
    5108:	cd b7       	in	r28, 0x3d	; 61
    510a:	de b7       	in	r29, 0x3e	; 62
    510c:	84 eb       	ldi	r24, 0xB4	; 180
    510e:	89 83       	std	Y+1, r24	; 0x01
    5110:	83 e0       	ldi	r24, 0x03	; 3
    5112:	80 93 f2 14 	sts	0x14F2, r24	; 0x8014f2 <_nextState>
    5116:	61 e0       	ldi	r22, 0x01	; 1
    5118:	ce 01       	movw	r24, r28
    511a:	01 96       	adiw	r24, 0x01	; 1
    511c:	af df       	rcall	.-162    	; 0x507c <_twiTransmit>
    511e:	0f 90       	pop	r0
    5120:	df 91       	pop	r29
    5122:	cf 91       	pop	r28
    5124:	08 95       	ret

00005126 <tsl2591_getLux>:
    5126:	2f 92       	push	r2
    5128:	3f 92       	push	r3
    512a:	4f 92       	push	r4
    512c:	5f 92       	push	r5
    512e:	6f 92       	push	r6
    5130:	7f 92       	push	r7
    5132:	8f 92       	push	r8
    5134:	9f 92       	push	r9
    5136:	af 92       	push	r10
    5138:	bf 92       	push	r11
    513a:	cf 92       	push	r12
    513c:	df 92       	push	r13
    513e:	ef 92       	push	r14
    5140:	ff 92       	push	r15
    5142:	0f 93       	push	r16
    5144:	1f 93       	push	r17
    5146:	cf 93       	push	r28
    5148:	df 93       	push	r29
    514a:	c0 91 eb 14 	lds	r28, 0x14EB	; 0x8014eb <_infraredRaw>
    514e:	d0 91 ec 14 	lds	r29, 0x14EC	; 0x8014ec <_infraredRaw+0x1>
    5152:	cf 3f       	cpi	r28, 0xFF	; 255
    5154:	2f ef       	ldi	r18, 0xFF	; 255
    5156:	d2 07       	cpc	r29, r18
    5158:	41 f0       	breq	.+16     	; 0x516a <tsl2591_getLux+0x44>
    515a:	60 91 ed 14 	lds	r22, 0x14ED	; 0x8014ed <_fullSpectrumRaw>
    515e:	70 91 ee 14 	lds	r23, 0x14EE	; 0x8014ee <_fullSpectrumRaw+0x1>
    5162:	6f 3f       	cpi	r22, 0xFF	; 255
    5164:	ef ef       	ldi	r30, 0xFF	; 255
    5166:	7e 07       	cpc	r23, r30
    5168:	59 f4       	brne	.+22     	; 0x5180 <tsl2591_getLux+0x5a>
    516a:	4f ef       	ldi	r20, 0xFF	; 255
    516c:	5f ef       	ldi	r21, 0xFF	; 255
    516e:	6f e7       	ldi	r22, 0x7F	; 127
    5170:	7f e7       	ldi	r23, 0x7F	; 127
    5172:	fc 01       	movw	r30, r24
    5174:	40 83       	st	Z, r20
    5176:	51 83       	std	Z+1, r21	; 0x01
    5178:	62 83       	std	Z+2, r22	; 0x02
    517a:	73 83       	std	Z+3, r23	; 0x03
    517c:	83 e0       	ldi	r24, 0x03	; 3
    517e:	99 c0       	rjmp	.+306    	; 0x52b2 <tsl2591_getLux+0x18c>
    5180:	1c 01       	movw	r2, r24
    5182:	80 e0       	ldi	r24, 0x00	; 0
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	3b d3       	rcall	.+1654   	; 0x57fe <__floatunsisf>
    5188:	2b 01       	movw	r4, r22
    518a:	3c 01       	movw	r6, r24
    518c:	be 01       	movw	r22, r28
    518e:	80 e0       	ldi	r24, 0x00	; 0
    5190:	90 e0       	ldi	r25, 0x00	; 0
    5192:	35 d3       	rcall	.+1642   	; 0x57fe <__floatunsisf>
    5194:	4b 01       	movw	r8, r22
    5196:	5c 01       	movw	r10, r24
    5198:	80 91 f0 14 	lds	r24, 0x14F0	; 0x8014f0 <_currentIntegrationTime>
    519c:	90 e0       	ldi	r25, 0x00	; 0
    519e:	01 96       	adiw	r24, 0x01	; 1
    51a0:	24 e6       	ldi	r18, 0x64	; 100
    51a2:	28 9f       	mul	r18, r24
    51a4:	b0 01       	movw	r22, r0
    51a6:	29 9f       	mul	r18, r25
    51a8:	70 0d       	add	r23, r0
    51aa:	11 24       	eor	r1, r1
    51ac:	80 91 f1 14 	lds	r24, 0x14F1	; 0x8014f1 <_currentGain>
    51b0:	80 32       	cpi	r24, 0x20	; 32
    51b2:	69 f0       	breq	.+26     	; 0x51ce <tsl2591_getLux+0xa8>
    51b4:	80 33       	cpi	r24, 0x30	; 48
    51b6:	a1 f0       	breq	.+40     	; 0x51e0 <tsl2591_getLux+0xba>
    51b8:	80 31       	cpi	r24, 0x10	; 16
    51ba:	e1 f4       	brne	.+56     	; 0x51f4 <tsl2591_getLux+0xce>
    51bc:	0f 2e       	mov	r0, r31
    51be:	c1 2c       	mov	r12, r1
    51c0:	d1 2c       	mov	r13, r1
    51c2:	f8 ec       	ldi	r31, 0xC8	; 200
    51c4:	ef 2e       	mov	r14, r31
    51c6:	f1 e4       	ldi	r31, 0x41	; 65
    51c8:	ff 2e       	mov	r15, r31
    51ca:	f0 2d       	mov	r31, r0
    51cc:	1b c0       	rjmp	.+54     	; 0x5204 <tsl2591_getLux+0xde>
    51ce:	0f 2e       	mov	r0, r31
    51d0:	c1 2c       	mov	r12, r1
    51d2:	d1 2c       	mov	r13, r1
    51d4:	f6 ed       	ldi	r31, 0xD6	; 214
    51d6:	ef 2e       	mov	r14, r31
    51d8:	f3 e4       	ldi	r31, 0x43	; 67
    51da:	ff 2e       	mov	r15, r31
    51dc:	f0 2d       	mov	r31, r0
    51de:	12 c0       	rjmp	.+36     	; 0x5204 <tsl2591_getLux+0xde>
    51e0:	0f 2e       	mov	r0, r31
    51e2:	c1 2c       	mov	r12, r1
    51e4:	f0 e5       	ldi	r31, 0x50	; 80
    51e6:	df 2e       	mov	r13, r31
    51e8:	fa e1       	ldi	r31, 0x1A	; 26
    51ea:	ef 2e       	mov	r14, r31
    51ec:	f6 e4       	ldi	r31, 0x46	; 70
    51ee:	ff 2e       	mov	r15, r31
    51f0:	f0 2d       	mov	r31, r0
    51f2:	08 c0       	rjmp	.+16     	; 0x5204 <tsl2591_getLux+0xde>
    51f4:	0f 2e       	mov	r0, r31
    51f6:	c1 2c       	mov	r12, r1
    51f8:	d1 2c       	mov	r13, r1
    51fa:	f0 e8       	ldi	r31, 0x80	; 128
    51fc:	ef 2e       	mov	r14, r31
    51fe:	ff e3       	ldi	r31, 0x3F	; 63
    5200:	ff 2e       	mov	r15, r31
    5202:	f0 2d       	mov	r31, r0
    5204:	07 2e       	mov	r0, r23
    5206:	00 0c       	add	r0, r0
    5208:	88 0b       	sbc	r24, r24
    520a:	99 0b       	sbc	r25, r25
    520c:	fa d2       	rcall	.+1524   	; 0x5802 <__floatsisf>
    520e:	a7 01       	movw	r20, r14
    5210:	96 01       	movw	r18, r12
    5212:	5e d3       	rcall	.+1724   	; 0x58d0 <__mulsf3>
    5214:	20 e0       	ldi	r18, 0x00	; 0
    5216:	30 e0       	ldi	r19, 0x00	; 0
    5218:	4c ec       	ldi	r20, 0xCC	; 204
    521a:	53 e4       	ldi	r21, 0x43	; 67
    521c:	7e d2       	rcall	.+1276   	; 0x571a <__divsf3>
    521e:	6b 01       	movw	r12, r22
    5220:	7c 01       	movw	r14, r24
    5222:	25 e8       	ldi	r18, 0x85	; 133
    5224:	3b ee       	ldi	r19, 0xEB	; 235
    5226:	41 ed       	ldi	r20, 0xD1	; 209
    5228:	5f e3       	ldi	r21, 0x3F	; 63
    522a:	c5 01       	movw	r24, r10
    522c:	b4 01       	movw	r22, r8
    522e:	50 d3       	rcall	.+1696   	; 0x58d0 <__mulsf3>
    5230:	9b 01       	movw	r18, r22
    5232:	ac 01       	movw	r20, r24
    5234:	c3 01       	movw	r24, r6
    5236:	b2 01       	movw	r22, r4
    5238:	09 d2       	rcall	.+1042   	; 0x564c <__subsf3>
    523a:	a7 01       	movw	r20, r14
    523c:	96 01       	movw	r18, r12
    523e:	6d d2       	rcall	.+1242   	; 0x571a <__divsf3>
    5240:	16 2f       	mov	r17, r22
    5242:	d7 2f       	mov	r29, r23
    5244:	c8 2f       	mov	r28, r24
    5246:	09 2f       	mov	r16, r25
    5248:	2d e3       	ldi	r18, 0x3D	; 61
    524a:	3a e0       	ldi	r19, 0x0A	; 10
    524c:	47 e1       	ldi	r20, 0x17	; 23
    524e:	5f e3       	ldi	r21, 0x3F	; 63
    5250:	c3 01       	movw	r24, r6
    5252:	b2 01       	movw	r22, r4
    5254:	3d d3       	rcall	.+1658   	; 0x58d0 <__mulsf3>
    5256:	2b 01       	movw	r4, r22
    5258:	3c 01       	movw	r6, r24
    525a:	26 ef       	ldi	r18, 0xF6	; 246
    525c:	38 e2       	ldi	r19, 0x28	; 40
    525e:	4c e5       	ldi	r20, 0x5C	; 92
    5260:	5f e3       	ldi	r21, 0x3F	; 63
    5262:	c5 01       	movw	r24, r10
    5264:	b4 01       	movw	r22, r8
    5266:	34 d3       	rcall	.+1640   	; 0x58d0 <__mulsf3>
    5268:	9b 01       	movw	r18, r22
    526a:	ac 01       	movw	r20, r24
    526c:	c3 01       	movw	r24, r6
    526e:	b2 01       	movw	r22, r4
    5270:	ed d1       	rcall	.+986    	; 0x564c <__subsf3>
    5272:	a7 01       	movw	r20, r14
    5274:	96 01       	movw	r18, r12
    5276:	51 d2       	rcall	.+1186   	; 0x571a <__divsf3>
    5278:	c6 2e       	mov	r12, r22
    527a:	d7 2e       	mov	r13, r23
    527c:	e8 2e       	mov	r14, r24
    527e:	f9 2e       	mov	r15, r25
    5280:	26 2f       	mov	r18, r22
    5282:	37 2f       	mov	r19, r23
    5284:	48 2f       	mov	r20, r24
    5286:	59 2f       	mov	r21, r25
    5288:	61 2f       	mov	r22, r17
    528a:	7d 2f       	mov	r23, r29
    528c:	8c 2f       	mov	r24, r28
    528e:	90 2f       	mov	r25, r16
    5290:	1b d3       	rcall	.+1590   	; 0x58c8 <__gesf2>
    5292:	18 16       	cp	r1, r24
    5294:	24 f0       	brlt	.+8      	; 0x529e <tsl2591_getLux+0x178>
    5296:	1c 2d       	mov	r17, r12
    5298:	dd 2d       	mov	r29, r13
    529a:	ce 2d       	mov	r28, r14
    529c:	0f 2d       	mov	r16, r15
    529e:	41 2f       	mov	r20, r17
    52a0:	5d 2f       	mov	r21, r29
    52a2:	6c 2f       	mov	r22, r28
    52a4:	70 2f       	mov	r23, r16
    52a6:	f1 01       	movw	r30, r2
    52a8:	40 83       	st	Z, r20
    52aa:	51 83       	std	Z+1, r21	; 0x01
    52ac:	62 83       	std	Z+2, r22	; 0x02
    52ae:	73 83       	std	Z+3, r23	; 0x03
    52b0:	80 e0       	ldi	r24, 0x00	; 0
    52b2:	df 91       	pop	r29
    52b4:	cf 91       	pop	r28
    52b6:	1f 91       	pop	r17
    52b8:	0f 91       	pop	r16
    52ba:	ff 90       	pop	r15
    52bc:	ef 90       	pop	r14
    52be:	df 90       	pop	r13
    52c0:	cf 90       	pop	r12
    52c2:	bf 90       	pop	r11
    52c4:	af 90       	pop	r10
    52c6:	9f 90       	pop	r9
    52c8:	8f 90       	pop	r8
    52ca:	7f 90       	pop	r7
    52cc:	6f 90       	pop	r6
    52ce:	5f 90       	pop	r5
    52d0:	4f 90       	pop	r4
    52d2:	3f 90       	pop	r3
    52d4:	2f 90       	pop	r2
    52d6:	08 95       	ret

000052d8 <_initTwiInterface>:
    52d8:	80 91 05 15 	lds	r24, 0x1505	; 0x801505 <_twiIsInitiated>
    52dc:	81 11       	cpse	r24, r1
    52de:	0c c0       	rjmp	.+24     	; 0x52f8 <_initTwiInterface+0x20>
    52e0:	8c e0       	ldi	r24, 0x0C	; 12
    52e2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    52e6:	8f ef       	ldi	r24, 0xFF	; 255
    52e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    52ec:	84 e0       	ldi	r24, 0x04	; 4
    52ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    52f2:	81 e0       	ldi	r24, 0x01	; 1
    52f4:	80 93 05 15 	sts	0x1505, r24	; 0x801505 <_twiIsInitiated>
    52f8:	08 95       	ret

000052fa <twiCreate>:
    52fa:	af 92       	push	r10
    52fc:	bf 92       	push	r11
    52fe:	cf 92       	push	r12
    5300:	df 92       	push	r13
    5302:	ef 92       	push	r14
    5304:	ff 92       	push	r15
    5306:	0f 93       	push	r16
    5308:	1f 93       	push	r17
    530a:	cf 93       	push	r28
    530c:	df 93       	push	r29
    530e:	a8 2e       	mov	r10, r24
    5310:	b6 2e       	mov	r11, r22
    5312:	69 01       	movw	r12, r18
    5314:	7a 01       	movw	r14, r20
    5316:	84 e0       	ldi	r24, 0x04	; 4
    5318:	90 e0       	ldi	r25, 0x00	; 0
    531a:	8e d3       	rcall	.+1820   	; 0x5a38 <malloc>
    531c:	ec 01       	movw	r28, r24
    531e:	89 2b       	or	r24, r25
    5320:	61 f1       	breq	.+88     	; 0x537a <twiCreate+0x80>
    5322:	a8 82       	st	Y, r10
    5324:	81 e0       	ldi	r24, 0x01	; 1
    5326:	b8 12       	cpse	r11, r24
    5328:	12 c0       	rjmp	.+36     	; 0x534e <twiCreate+0x54>
    532a:	c7 01       	movw	r24, r14
    532c:	b6 01       	movw	r22, r12
    532e:	20 ea       	ldi	r18, 0xA0	; 160
    5330:	36 e8       	ldi	r19, 0x86	; 134
    5332:	41 e0       	ldi	r20, 0x01	; 1
    5334:	50 e0       	ldi	r21, 0x00	; 0
    5336:	56 d3       	rcall	.+1708   	; 0x59e4 <__udivmodsi4>
    5338:	da 01       	movw	r26, r20
    533a:	c9 01       	movw	r24, r18
    533c:	40 97       	sbiw	r24, 0x10	; 16
    533e:	a1 09       	sbc	r26, r1
    5340:	b1 09       	sbc	r27, r1
    5342:	b6 95       	lsr	r27
    5344:	a7 95       	ror	r26
    5346:	97 95       	ror	r25
    5348:	87 95       	ror	r24
    534a:	89 83       	std	Y+1, r24	; 0x01
    534c:	11 c0       	rjmp	.+34     	; 0x5370 <twiCreate+0x76>
    534e:	c7 01       	movw	r24, r14
    5350:	b6 01       	movw	r22, r12
    5352:	20 e8       	ldi	r18, 0x80	; 128
    5354:	3a e1       	ldi	r19, 0x1A	; 26
    5356:	46 e0       	ldi	r20, 0x06	; 6
    5358:	50 e0       	ldi	r21, 0x00	; 0
    535a:	44 d3       	rcall	.+1672   	; 0x59e4 <__udivmodsi4>
    535c:	da 01       	movw	r26, r20
    535e:	c9 01       	movw	r24, r18
    5360:	40 97       	sbiw	r24, 0x10	; 16
    5362:	a1 09       	sbc	r26, r1
    5364:	b1 09       	sbc	r27, r1
    5366:	b6 95       	lsr	r27
    5368:	a7 95       	ror	r26
    536a:	97 95       	ror	r25
    536c:	87 95       	ror	r24
    536e:	89 83       	std	Y+1, r24	; 0x01
    5370:	1b 83       	std	Y+3, r17	; 0x03
    5372:	0a 83       	std	Y+2, r16	; 0x02
    5374:	8c 2f       	mov	r24, r28
    5376:	9d 2f       	mov	r25, r29
    5378:	02 c0       	rjmp	.+4      	; 0x537e <twiCreate+0x84>
    537a:	80 e0       	ldi	r24, 0x00	; 0
    537c:	90 e0       	ldi	r25, 0x00	; 0
    537e:	df 91       	pop	r29
    5380:	cf 91       	pop	r28
    5382:	1f 91       	pop	r17
    5384:	0f 91       	pop	r16
    5386:	ff 90       	pop	r15
    5388:	ef 90       	pop	r14
    538a:	df 90       	pop	r13
    538c:	cf 90       	pop	r12
    538e:	bf 90       	pop	r11
    5390:	af 90       	pop	r10
    5392:	08 95       	ret

00005394 <twiIsBusy>:
    5394:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5398:	81 70       	andi	r24, 0x01	; 1
    539a:	08 95       	ret

0000539c <twiTransmit>:
    539c:	ff 92       	push	r15
    539e:	0f 93       	push	r16
    53a0:	1f 93       	push	r17
    53a2:	cf 93       	push	r28
    53a4:	df 93       	push	r29
    53a6:	00 97       	sbiw	r24, 0x00	; 0
    53a8:	d1 f1       	breq	.+116    	; 0x541e <twiTransmit+0x82>
    53aa:	4a 30       	cpi	r20, 0x0A	; 10
    53ac:	d0 f5       	brcc	.+116    	; 0x5422 <twiTransmit+0x86>
    53ae:	f4 2e       	mov	r15, r20
    53b0:	8b 01       	movw	r16, r22
    53b2:	ec 01       	movw	r28, r24
    53b4:	ef df       	rcall	.-34     	; 0x5394 <twiIsBusy>
    53b6:	81 11       	cpse	r24, r1
    53b8:	36 c0       	rjmp	.+108    	; 0x5426 <twiTransmit+0x8a>
    53ba:	80 91 f8 14 	lds	r24, 0x14F8	; 0x8014f8 <_twiCurrentHandler>
    53be:	90 91 f9 14 	lds	r25, 0x14F9	; 0x8014f9 <_twiCurrentHandler+0x1>
    53c2:	c8 17       	cp	r28, r24
    53c4:	d9 07       	cpc	r29, r25
    53c6:	41 f0       	breq	.+16     	; 0x53d8 <twiTransmit+0x3c>
    53c8:	87 df       	rcall	.-242    	; 0x52d8 <_initTwiInterface>
    53ca:	89 81       	ldd	r24, Y+1	; 0x01
    53cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    53d0:	d0 93 f9 14 	sts	0x14F9, r29	; 0x8014f9 <_twiCurrentHandler+0x1>
    53d4:	c0 93 f8 14 	sts	0x14F8, r28	; 0x8014f8 <_twiCurrentHandler>
    53d8:	81 e0       	ldi	r24, 0x01	; 1
    53da:	8f 0d       	add	r24, r15
    53dc:	80 93 fa 14 	sts	0x14FA, r24	; 0x8014fa <_twiMessageLen>
    53e0:	88 81       	ld	r24, Y
    53e2:	88 0f       	add	r24, r24
    53e4:	80 93 fb 14 	sts	0x14FB, r24	; 0x8014fb <_twiMessageBuffer>
    53e8:	ff 20       	and	r15, r15
    53ea:	89 f0       	breq	.+34     	; 0x540e <twiTransmit+0x72>
    53ec:	f8 01       	movw	r30, r16
    53ee:	ac ef       	ldi	r26, 0xFC	; 252
    53f0:	b4 e1       	ldi	r27, 0x14	; 20
    53f2:	4f ef       	ldi	r20, 0xFF	; 255
    53f4:	4f 0d       	add	r20, r15
    53f6:	64 2f       	mov	r22, r20
    53f8:	70 e0       	ldi	r23, 0x00	; 0
    53fa:	cb 01       	movw	r24, r22
    53fc:	01 96       	adiw	r24, 0x01	; 1
    53fe:	b8 01       	movw	r22, r16
    5400:	68 0f       	add	r22, r24
    5402:	79 1f       	adc	r23, r25
    5404:	81 91       	ld	r24, Z+
    5406:	8d 93       	st	X+, r24
    5408:	e6 17       	cp	r30, r22
    540a:	f7 07       	cpc	r31, r23
    540c:	d9 f7       	brne	.-10     	; 0x5404 <twiTransmit+0x68>
    540e:	88 ef       	ldi	r24, 0xF8	; 248
    5410:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5414:	85 ea       	ldi	r24, 0xA5	; 165
    5416:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    541a:	84 e0       	ldi	r24, 0x04	; 4
    541c:	05 c0       	rjmp	.+10     	; 0x5428 <twiTransmit+0x8c>
    541e:	86 e0       	ldi	r24, 0x06	; 6
    5420:	03 c0       	rjmp	.+6      	; 0x5428 <twiTransmit+0x8c>
    5422:	87 e0       	ldi	r24, 0x07	; 7
    5424:	01 c0       	rjmp	.+2      	; 0x5428 <twiTransmit+0x8c>
    5426:	82 e0       	ldi	r24, 0x02	; 2
    5428:	df 91       	pop	r29
    542a:	cf 91       	pop	r28
    542c:	1f 91       	pop	r17
    542e:	0f 91       	pop	r16
    5430:	ff 90       	pop	r15
    5432:	08 95       	ret

00005434 <twiReceive>:
    5434:	1f 93       	push	r17
    5436:	cf 93       	push	r28
    5438:	df 93       	push	r29
    543a:	00 97       	sbiw	r24, 0x00	; 0
    543c:	29 f1       	breq	.+74     	; 0x5488 <twiReceive+0x54>
    543e:	6b 30       	cpi	r22, 0x0B	; 11
    5440:	28 f5       	brcc	.+74     	; 0x548c <twiReceive+0x58>
    5442:	16 2f       	mov	r17, r22
    5444:	ec 01       	movw	r28, r24
    5446:	a6 df       	rcall	.-180    	; 0x5394 <twiIsBusy>
    5448:	81 11       	cpse	r24, r1
    544a:	22 c0       	rjmp	.+68     	; 0x5490 <twiReceive+0x5c>
    544c:	80 91 f8 14 	lds	r24, 0x14F8	; 0x8014f8 <_twiCurrentHandler>
    5450:	90 91 f9 14 	lds	r25, 0x14F9	; 0x8014f9 <_twiCurrentHandler+0x1>
    5454:	c8 17       	cp	r28, r24
    5456:	d9 07       	cpc	r29, r25
    5458:	41 f0       	breq	.+16     	; 0x546a <twiReceive+0x36>
    545a:	3e df       	rcall	.-388    	; 0x52d8 <_initTwiInterface>
    545c:	89 81       	ldd	r24, Y+1	; 0x01
    545e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5462:	d0 93 f9 14 	sts	0x14F9, r29	; 0x8014f9 <_twiCurrentHandler+0x1>
    5466:	c0 93 f8 14 	sts	0x14F8, r28	; 0x8014f8 <_twiCurrentHandler>
    546a:	10 93 fa 14 	sts	0x14FA, r17	; 0x8014fa <_twiMessageLen>
    546e:	88 81       	ld	r24, Y
    5470:	88 0f       	add	r24, r24
    5472:	81 60       	ori	r24, 0x01	; 1
    5474:	80 93 fb 14 	sts	0x14FB, r24	; 0x8014fb <_twiMessageBuffer>
    5478:	88 ef       	ldi	r24, 0xF8	; 248
    547a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    547e:	85 ea       	ldi	r24, 0xA5	; 165
    5480:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5484:	85 e0       	ldi	r24, 0x05	; 5
    5486:	05 c0       	rjmp	.+10     	; 0x5492 <twiReceive+0x5e>
    5488:	86 e0       	ldi	r24, 0x06	; 6
    548a:	03 c0       	rjmp	.+6      	; 0x5492 <twiReceive+0x5e>
    548c:	87 e0       	ldi	r24, 0x07	; 7
    548e:	01 c0       	rjmp	.+2      	; 0x5492 <twiReceive+0x5e>
    5490:	82 e0       	ldi	r24, 0x02	; 2
    5492:	df 91       	pop	r29
    5494:	cf 91       	pop	r28
    5496:	1f 91       	pop	r17
    5498:	08 95       	ret

0000549a <__vector_39>:
    549a:	1f 92       	push	r1
    549c:	0f 92       	push	r0
    549e:	0f b6       	in	r0, 0x3f	; 63
    54a0:	0f 92       	push	r0
    54a2:	11 24       	eor	r1, r1
    54a4:	0b b6       	in	r0, 0x3b	; 59
    54a6:	0f 92       	push	r0
    54a8:	2f 93       	push	r18
    54aa:	3f 93       	push	r19
    54ac:	4f 93       	push	r20
    54ae:	5f 93       	push	r21
    54b0:	6f 93       	push	r22
    54b2:	7f 93       	push	r23
    54b4:	8f 93       	push	r24
    54b6:	9f 93       	push	r25
    54b8:	af 93       	push	r26
    54ba:	bf 93       	push	r27
    54bc:	ef 93       	push	r30
    54be:	ff 93       	push	r31
    54c0:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    54c4:	8e 2f       	mov	r24, r30
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	fc 01       	movw	r30, r24
    54ca:	38 97       	sbiw	r30, 0x08	; 8
    54cc:	e1 35       	cpi	r30, 0x51	; 81
    54ce:	f1 05       	cpc	r31, r1
    54d0:	08 f0       	brcs	.+2      	; 0x54d4 <__vector_39+0x3a>
    54d2:	75 c0       	rjmp	.+234    	; 0x55be <__vector_39+0x124>
    54d4:	88 27       	eor	r24, r24
    54d6:	e4 58       	subi	r30, 0x84	; 132
    54d8:	ff 4f       	sbci	r31, 0xFF	; 255
    54da:	8f 4f       	sbci	r24, 0xFF	; 255
    54dc:	a5 c2       	rjmp	.+1354   	; 0x5a28 <__tablejump2__>
    54de:	10 92 f7 14 	sts	0x14F7, r1	; 0x8014f7 <_index.1885>
    54e2:	e0 91 f7 14 	lds	r30, 0x14F7	; 0x8014f7 <_index.1885>
    54e6:	80 91 fa 14 	lds	r24, 0x14FA	; 0x8014fa <_twiMessageLen>
    54ea:	e8 17       	cp	r30, r24
    54ec:	70 f4       	brcc	.+28     	; 0x550a <__vector_39+0x70>
    54ee:	81 e0       	ldi	r24, 0x01	; 1
    54f0:	8e 0f       	add	r24, r30
    54f2:	80 93 f7 14 	sts	0x14F7, r24	; 0x8014f7 <_index.1885>
    54f6:	f0 e0       	ldi	r31, 0x00	; 0
    54f8:	e5 50       	subi	r30, 0x05	; 5
    54fa:	fb 4e       	sbci	r31, 0xEB	; 235
    54fc:	80 81       	ld	r24, Z
    54fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5502:	85 e8       	ldi	r24, 0x85	; 133
    5504:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5508:	72 c0       	rjmp	.+228    	; 0x55ee <__vector_39+0x154>
    550a:	84 e9       	ldi	r24, 0x94	; 148
    550c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5510:	80 91 f8 14 	lds	r24, 0x14F8	; 0x8014f8 <_twiCurrentHandler>
    5514:	90 91 f9 14 	lds	r25, 0x14F9	; 0x8014f9 <_twiCurrentHandler+0x1>
    5518:	dc 01       	movw	r26, r24
    551a:	12 96       	adiw	r26, 0x02	; 2
    551c:	ed 91       	ld	r30, X+
    551e:	fc 91       	ld	r31, X
    5520:	13 97       	sbiw	r26, 0x03	; 3
    5522:	30 97       	sbiw	r30, 0x00	; 0
    5524:	09 f4       	brne	.+2      	; 0x5528 <__vector_39+0x8e>
    5526:	63 c0       	rjmp	.+198    	; 0x55ee <__vector_39+0x154>
    5528:	20 e0       	ldi	r18, 0x00	; 0
    552a:	40 e0       	ldi	r20, 0x00	; 0
    552c:	50 e0       	ldi	r21, 0x00	; 0
    552e:	64 e0       	ldi	r22, 0x04	; 4
    5530:	19 95       	eicall
    5532:	5d c0       	rjmp	.+186    	; 0x55ee <__vector_39+0x154>
    5534:	e0 91 f7 14 	lds	r30, 0x14F7	; 0x8014f7 <_index.1885>
    5538:	81 e0       	ldi	r24, 0x01	; 1
    553a:	8e 0f       	add	r24, r30
    553c:	80 93 f7 14 	sts	0x14F7, r24	; 0x8014f7 <_index.1885>
    5540:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5544:	f0 e0       	ldi	r31, 0x00	; 0
    5546:	e5 50       	subi	r30, 0x05	; 5
    5548:	fb 4e       	sbci	r31, 0xEB	; 235
    554a:	80 83       	st	Z, r24
    554c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5550:	80 34       	cpi	r24, 0x40	; 64
    5552:	11 f4       	brne	.+4      	; 0x5558 <__vector_39+0xbe>
    5554:	10 92 f7 14 	sts	0x14F7, r1	; 0x8014f7 <_index.1885>
    5558:	20 91 f7 14 	lds	r18, 0x14F7	; 0x8014f7 <_index.1885>
    555c:	30 e0       	ldi	r19, 0x00	; 0
    555e:	80 91 fa 14 	lds	r24, 0x14FA	; 0x8014fa <_twiMessageLen>
    5562:	90 e0       	ldi	r25, 0x00	; 0
    5564:	01 97       	sbiw	r24, 0x01	; 1
    5566:	28 17       	cp	r18, r24
    5568:	39 07       	cpc	r19, r25
    556a:	24 f4       	brge	.+8      	; 0x5574 <__vector_39+0xda>
    556c:	85 ec       	ldi	r24, 0xC5	; 197
    556e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5572:	3d c0       	rjmp	.+122    	; 0x55ee <__vector_39+0x154>
    5574:	85 e8       	ldi	r24, 0x85	; 133
    5576:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    557a:	39 c0       	rjmp	.+114    	; 0x55ee <__vector_39+0x154>
    557c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5580:	e0 91 f7 14 	lds	r30, 0x14F7	; 0x8014f7 <_index.1885>
    5584:	f0 e0       	ldi	r31, 0x00	; 0
    5586:	e5 50       	subi	r30, 0x05	; 5
    5588:	fb 4e       	sbci	r31, 0xEB	; 235
    558a:	80 83       	st	Z, r24
    558c:	84 e9       	ldi	r24, 0x94	; 148
    558e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5592:	80 91 f8 14 	lds	r24, 0x14F8	; 0x8014f8 <_twiCurrentHandler>
    5596:	90 91 f9 14 	lds	r25, 0x14F9	; 0x8014f9 <_twiCurrentHandler+0x1>
    559a:	dc 01       	movw	r26, r24
    559c:	12 96       	adiw	r26, 0x02	; 2
    559e:	ed 91       	ld	r30, X+
    55a0:	fc 91       	ld	r31, X
    55a2:	13 97       	sbiw	r26, 0x03	; 3
    55a4:	30 97       	sbiw	r30, 0x00	; 0
    55a6:	19 f1       	breq	.+70     	; 0x55ee <__vector_39+0x154>
    55a8:	20 91 fa 14 	lds	r18, 0x14FA	; 0x8014fa <_twiMessageLen>
    55ac:	4b ef       	ldi	r20, 0xFB	; 251
    55ae:	54 e1       	ldi	r21, 0x14	; 20
    55b0:	65 e0       	ldi	r22, 0x05	; 5
    55b2:	19 95       	eicall
    55b4:	1c c0       	rjmp	.+56     	; 0x55ee <__vector_39+0x154>
    55b6:	85 ea       	ldi	r24, 0xA5	; 165
    55b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55bc:	18 c0       	rjmp	.+48     	; 0x55ee <__vector_39+0x154>
    55be:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    55c2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    55c6:	84 e0       	ldi	r24, 0x04	; 4
    55c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55cc:	80 91 f8 14 	lds	r24, 0x14F8	; 0x8014f8 <_twiCurrentHandler>
    55d0:	90 91 f9 14 	lds	r25, 0x14F9	; 0x8014f9 <_twiCurrentHandler+0x1>
    55d4:	dc 01       	movw	r26, r24
    55d6:	12 96       	adiw	r26, 0x02	; 2
    55d8:	ed 91       	ld	r30, X+
    55da:	fc 91       	ld	r31, X
    55dc:	13 97       	sbiw	r26, 0x03	; 3
    55de:	30 97       	sbiw	r30, 0x00	; 0
    55e0:	31 f0       	breq	.+12     	; 0x55ee <__vector_39+0x154>
    55e2:	20 e0       	ldi	r18, 0x00	; 0
    55e4:	40 e0       	ldi	r20, 0x00	; 0
    55e6:	50 e0       	ldi	r21, 0x00	; 0
    55e8:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    55ec:	19 95       	eicall
    55ee:	ff 91       	pop	r31
    55f0:	ef 91       	pop	r30
    55f2:	bf 91       	pop	r27
    55f4:	af 91       	pop	r26
    55f6:	9f 91       	pop	r25
    55f8:	8f 91       	pop	r24
    55fa:	7f 91       	pop	r23
    55fc:	6f 91       	pop	r22
    55fe:	5f 91       	pop	r21
    5600:	4f 91       	pop	r20
    5602:	3f 91       	pop	r19
    5604:	2f 91       	pop	r18
    5606:	0f 90       	pop	r0
    5608:	0b be       	out	0x3b, r0	; 59
    560a:	0f 90       	pop	r0
    560c:	0f be       	out	0x3f, r0	; 63
    560e:	0f 90       	pop	r0
    5610:	1f 90       	pop	r1
    5612:	18 95       	reti

00005614 <fifo_init>:
    5614:	fc 01       	movw	r30, r24
    5616:	41 11       	cpse	r20, r1
    5618:	01 c0       	rjmp	.+2      	; 0x561c <fifo_init+0x8>
    561a:	2f d3       	rcall	.+1630   	; 0x5c7a <abort>
    561c:	84 2f       	mov	r24, r20
    561e:	90 e0       	ldi	r25, 0x00	; 0
    5620:	9c 01       	movw	r18, r24
    5622:	21 50       	subi	r18, 0x01	; 1
    5624:	31 09       	sbc	r19, r1
    5626:	82 23       	and	r24, r18
    5628:	93 23       	and	r25, r19
    562a:	89 2b       	or	r24, r25
    562c:	09 f0       	breq	.+2      	; 0x5630 <fifo_init+0x1c>
    562e:	25 d3       	rcall	.+1610   	; 0x5c7a <abort>
    5630:	41 38       	cpi	r20, 0x81	; 129
    5632:	08 f0       	brcs	.+2      	; 0x5636 <fifo_init+0x22>
    5634:	22 d3       	rcall	.+1604   	; 0x5c7a <abort>
    5636:	12 82       	std	Z+2, r1	; 0x02
    5638:	13 82       	std	Z+3, r1	; 0x03
    563a:	44 83       	std	Z+4, r20	; 0x04
    563c:	44 0f       	add	r20, r20
    563e:	41 50       	subi	r20, 0x01	; 1
    5640:	45 83       	std	Z+5, r20	; 0x05
    5642:	71 83       	std	Z+1, r23	; 0x01
    5644:	60 83       	st	Z, r22
    5646:	80 e0       	ldi	r24, 0x00	; 0
    5648:	90 e0       	ldi	r25, 0x00	; 0
    564a:	08 95       	ret

0000564c <__subsf3>:
    564c:	50 58       	subi	r21, 0x80	; 128

0000564e <__addsf3>:
    564e:	bb 27       	eor	r27, r27
    5650:	aa 27       	eor	r26, r26
    5652:	0e d0       	rcall	.+28     	; 0x5670 <__addsf3x>
    5654:	28 c1       	rjmp	.+592    	; 0x58a6 <__fp_round>
    5656:	19 d1       	rcall	.+562    	; 0x588a <__fp_pscA>
    5658:	30 f0       	brcs	.+12     	; 0x5666 <__addsf3+0x18>
    565a:	1e d1       	rcall	.+572    	; 0x5898 <__fp_pscB>
    565c:	20 f0       	brcs	.+8      	; 0x5666 <__addsf3+0x18>
    565e:	31 f4       	brne	.+12     	; 0x566c <__addsf3+0x1e>
    5660:	9f 3f       	cpi	r25, 0xFF	; 255
    5662:	11 f4       	brne	.+4      	; 0x5668 <__addsf3+0x1a>
    5664:	1e f4       	brtc	.+6      	; 0x566c <__addsf3+0x1e>
    5666:	0e c1       	rjmp	.+540    	; 0x5884 <__fp_nan>
    5668:	0e f4       	brtc	.+2      	; 0x566c <__addsf3+0x1e>
    566a:	e0 95       	com	r30
    566c:	e7 fb       	bst	r30, 7
    566e:	04 c1       	rjmp	.+520    	; 0x5878 <__fp_inf>

00005670 <__addsf3x>:
    5670:	e9 2f       	mov	r30, r25
    5672:	0e 94 93 1c 	call	0x3926	; 0x3926 <__fp_split3>
    5676:	78 f3       	brcs	.-34     	; 0x5656 <__addsf3+0x8>
    5678:	ba 17       	cp	r27, r26
    567a:	62 07       	cpc	r22, r18
    567c:	73 07       	cpc	r23, r19
    567e:	84 07       	cpc	r24, r20
    5680:	95 07       	cpc	r25, r21
    5682:	20 f0       	brcs	.+8      	; 0x568c <__addsf3x+0x1c>
    5684:	79 f4       	brne	.+30     	; 0x56a4 <__addsf3x+0x34>
    5686:	a6 f5       	brtc	.+104    	; 0x56f0 <__addsf3x+0x80>
    5688:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__fp_zero>
    568c:	0e f4       	brtc	.+2      	; 0x5690 <__addsf3x+0x20>
    568e:	e0 95       	com	r30
    5690:	0b 2e       	mov	r0, r27
    5692:	ba 2f       	mov	r27, r26
    5694:	a0 2d       	mov	r26, r0
    5696:	0b 01       	movw	r0, r22
    5698:	b9 01       	movw	r22, r18
    569a:	90 01       	movw	r18, r0
    569c:	0c 01       	movw	r0, r24
    569e:	ca 01       	movw	r24, r20
    56a0:	a0 01       	movw	r20, r0
    56a2:	11 24       	eor	r1, r1
    56a4:	ff 27       	eor	r31, r31
    56a6:	59 1b       	sub	r21, r25
    56a8:	99 f0       	breq	.+38     	; 0x56d0 <__addsf3x+0x60>
    56aa:	59 3f       	cpi	r21, 0xF9	; 249
    56ac:	50 f4       	brcc	.+20     	; 0x56c2 <__addsf3x+0x52>
    56ae:	50 3e       	cpi	r21, 0xE0	; 224
    56b0:	68 f1       	brcs	.+90     	; 0x570c <__addsf3x+0x9c>
    56b2:	1a 16       	cp	r1, r26
    56b4:	f0 40       	sbci	r31, 0x00	; 0
    56b6:	a2 2f       	mov	r26, r18
    56b8:	23 2f       	mov	r18, r19
    56ba:	34 2f       	mov	r19, r20
    56bc:	44 27       	eor	r20, r20
    56be:	58 5f       	subi	r21, 0xF8	; 248
    56c0:	f3 cf       	rjmp	.-26     	; 0x56a8 <__addsf3x+0x38>
    56c2:	46 95       	lsr	r20
    56c4:	37 95       	ror	r19
    56c6:	27 95       	ror	r18
    56c8:	a7 95       	ror	r26
    56ca:	f0 40       	sbci	r31, 0x00	; 0
    56cc:	53 95       	inc	r21
    56ce:	c9 f7       	brne	.-14     	; 0x56c2 <__addsf3x+0x52>
    56d0:	7e f4       	brtc	.+30     	; 0x56f0 <__addsf3x+0x80>
    56d2:	1f 16       	cp	r1, r31
    56d4:	ba 0b       	sbc	r27, r26
    56d6:	62 0b       	sbc	r22, r18
    56d8:	73 0b       	sbc	r23, r19
    56da:	84 0b       	sbc	r24, r20
    56dc:	ba f0       	brmi	.+46     	; 0x570c <__addsf3x+0x9c>
    56de:	91 50       	subi	r25, 0x01	; 1
    56e0:	a1 f0       	breq	.+40     	; 0x570a <__addsf3x+0x9a>
    56e2:	ff 0f       	add	r31, r31
    56e4:	bb 1f       	adc	r27, r27
    56e6:	66 1f       	adc	r22, r22
    56e8:	77 1f       	adc	r23, r23
    56ea:	88 1f       	adc	r24, r24
    56ec:	c2 f7       	brpl	.-16     	; 0x56de <__addsf3x+0x6e>
    56ee:	0e c0       	rjmp	.+28     	; 0x570c <__addsf3x+0x9c>
    56f0:	ba 0f       	add	r27, r26
    56f2:	62 1f       	adc	r22, r18
    56f4:	73 1f       	adc	r23, r19
    56f6:	84 1f       	adc	r24, r20
    56f8:	48 f4       	brcc	.+18     	; 0x570c <__addsf3x+0x9c>
    56fa:	87 95       	ror	r24
    56fc:	77 95       	ror	r23
    56fe:	67 95       	ror	r22
    5700:	b7 95       	ror	r27
    5702:	f7 95       	ror	r31
    5704:	9e 3f       	cpi	r25, 0xFE	; 254
    5706:	08 f0       	brcs	.+2      	; 0x570a <__addsf3x+0x9a>
    5708:	b1 cf       	rjmp	.-158    	; 0x566c <__addsf3+0x1e>
    570a:	93 95       	inc	r25
    570c:	88 0f       	add	r24, r24
    570e:	08 f0       	brcs	.+2      	; 0x5712 <__addsf3x+0xa2>
    5710:	99 27       	eor	r25, r25
    5712:	ee 0f       	add	r30, r30
    5714:	97 95       	ror	r25
    5716:	87 95       	ror	r24
    5718:	08 95       	ret

0000571a <__divsf3>:
    571a:	0d d0       	rcall	.+26     	; 0x5736 <__divsf3x>
    571c:	c4 c0       	rjmp	.+392    	; 0x58a6 <__fp_round>
    571e:	bc d0       	rcall	.+376    	; 0x5898 <__fp_pscB>
    5720:	48 f0       	brcs	.+18     	; 0x5734 <__divsf3+0x1a>
    5722:	b3 d0       	rcall	.+358    	; 0x588a <__fp_pscA>
    5724:	38 f0       	brcs	.+14     	; 0x5734 <__divsf3+0x1a>
    5726:	21 f4       	brne	.+8      	; 0x5730 <__divsf3+0x16>
    5728:	5f 3f       	cpi	r21, 0xFF	; 255
    572a:	21 f0       	breq	.+8      	; 0x5734 <__divsf3+0x1a>
    572c:	a5 c0       	rjmp	.+330    	; 0x5878 <__fp_inf>
    572e:	51 11       	cpse	r21, r1
    5730:	0c 94 b6 1c 	jmp	0x396c	; 0x396c <__fp_szero>
    5734:	a7 c0       	rjmp	.+334    	; 0x5884 <__fp_nan>

00005736 <__divsf3x>:
    5736:	0e 94 93 1c 	call	0x3926	; 0x3926 <__fp_split3>
    573a:	88 f3       	brcs	.-30     	; 0x571e <__divsf3+0x4>

0000573c <__divsf3_pse>:
    573c:	99 23       	and	r25, r25
    573e:	b9 f3       	breq	.-18     	; 0x572e <__divsf3+0x14>
    5740:	55 23       	and	r21, r21
    5742:	a1 f3       	breq	.-24     	; 0x572c <__divsf3+0x12>
    5744:	95 1b       	sub	r25, r21
    5746:	55 0b       	sbc	r21, r21
    5748:	bb 27       	eor	r27, r27
    574a:	aa 27       	eor	r26, r26
    574c:	62 17       	cp	r22, r18
    574e:	73 07       	cpc	r23, r19
    5750:	84 07       	cpc	r24, r20
    5752:	38 f0       	brcs	.+14     	; 0x5762 <__divsf3_pse+0x26>
    5754:	9f 5f       	subi	r25, 0xFF	; 255
    5756:	5f 4f       	sbci	r21, 0xFF	; 255
    5758:	22 0f       	add	r18, r18
    575a:	33 1f       	adc	r19, r19
    575c:	44 1f       	adc	r20, r20
    575e:	aa 1f       	adc	r26, r26
    5760:	a9 f3       	breq	.-22     	; 0x574c <__divsf3_pse+0x10>
    5762:	34 d0       	rcall	.+104    	; 0x57cc <__divsf3_pse+0x90>
    5764:	0e 2e       	mov	r0, r30
    5766:	3a f0       	brmi	.+14     	; 0x5776 <__divsf3_pse+0x3a>
    5768:	e0 e8       	ldi	r30, 0x80	; 128
    576a:	31 d0       	rcall	.+98     	; 0x57ce <__divsf3_pse+0x92>
    576c:	91 50       	subi	r25, 0x01	; 1
    576e:	50 40       	sbci	r21, 0x00	; 0
    5770:	e6 95       	lsr	r30
    5772:	00 1c       	adc	r0, r0
    5774:	ca f7       	brpl	.-14     	; 0x5768 <__divsf3_pse+0x2c>
    5776:	2a d0       	rcall	.+84     	; 0x57cc <__divsf3_pse+0x90>
    5778:	fe 2f       	mov	r31, r30
    577a:	28 d0       	rcall	.+80     	; 0x57cc <__divsf3_pse+0x90>
    577c:	66 0f       	add	r22, r22
    577e:	77 1f       	adc	r23, r23
    5780:	88 1f       	adc	r24, r24
    5782:	bb 1f       	adc	r27, r27
    5784:	26 17       	cp	r18, r22
    5786:	37 07       	cpc	r19, r23
    5788:	48 07       	cpc	r20, r24
    578a:	ab 07       	cpc	r26, r27
    578c:	b0 e8       	ldi	r27, 0x80	; 128
    578e:	09 f0       	breq	.+2      	; 0x5792 <__divsf3_pse+0x56>
    5790:	bb 0b       	sbc	r27, r27
    5792:	80 2d       	mov	r24, r0
    5794:	bf 01       	movw	r22, r30
    5796:	ff 27       	eor	r31, r31
    5798:	93 58       	subi	r25, 0x83	; 131
    579a:	5f 4f       	sbci	r21, 0xFF	; 255
    579c:	32 f0       	brmi	.+12     	; 0x57aa <__divsf3_pse+0x6e>
    579e:	9e 3f       	cpi	r25, 0xFE	; 254
    57a0:	51 05       	cpc	r21, r1
    57a2:	70 f0       	brcs	.+28     	; 0x57c0 <__divsf3_pse+0x84>
    57a4:	69 c0       	rjmp	.+210    	; 0x5878 <__fp_inf>
    57a6:	0c 94 b6 1c 	jmp	0x396c	; 0x396c <__fp_szero>
    57aa:	5f 3f       	cpi	r21, 0xFF	; 255
    57ac:	e4 f3       	brlt	.-8      	; 0x57a6 <__divsf3_pse+0x6a>
    57ae:	98 3e       	cpi	r25, 0xE8	; 232
    57b0:	d4 f3       	brlt	.-12     	; 0x57a6 <__divsf3_pse+0x6a>
    57b2:	86 95       	lsr	r24
    57b4:	77 95       	ror	r23
    57b6:	67 95       	ror	r22
    57b8:	b7 95       	ror	r27
    57ba:	f7 95       	ror	r31
    57bc:	9f 5f       	subi	r25, 0xFF	; 255
    57be:	c9 f7       	brne	.-14     	; 0x57b2 <__divsf3_pse+0x76>
    57c0:	88 0f       	add	r24, r24
    57c2:	91 1d       	adc	r25, r1
    57c4:	96 95       	lsr	r25
    57c6:	87 95       	ror	r24
    57c8:	97 f9       	bld	r25, 7
    57ca:	08 95       	ret
    57cc:	e1 e0       	ldi	r30, 0x01	; 1
    57ce:	66 0f       	add	r22, r22
    57d0:	77 1f       	adc	r23, r23
    57d2:	88 1f       	adc	r24, r24
    57d4:	bb 1f       	adc	r27, r27
    57d6:	62 17       	cp	r22, r18
    57d8:	73 07       	cpc	r23, r19
    57da:	84 07       	cpc	r24, r20
    57dc:	ba 07       	cpc	r27, r26
    57de:	20 f0       	brcs	.+8      	; 0x57e8 <__divsf3_pse+0xac>
    57e0:	62 1b       	sub	r22, r18
    57e2:	73 0b       	sbc	r23, r19
    57e4:	84 0b       	sbc	r24, r20
    57e6:	ba 0b       	sbc	r27, r26
    57e8:	ee 1f       	adc	r30, r30
    57ea:	88 f7       	brcc	.-30     	; 0x57ce <__divsf3_pse+0x92>
    57ec:	e0 95       	com	r30
    57ee:	08 95       	ret

000057f0 <__fixsfsi>:
    57f0:	0e 94 67 1c 	call	0x38ce	; 0x38ce <__fixunssfsi>
    57f4:	68 94       	set
    57f6:	b1 11       	cpse	r27, r1
    57f8:	0c 94 b6 1c 	jmp	0x396c	; 0x396c <__fp_szero>
    57fc:	08 95       	ret

000057fe <__floatunsisf>:
    57fe:	e8 94       	clt
    5800:	09 c0       	rjmp	.+18     	; 0x5814 <__floatsisf+0x12>

00005802 <__floatsisf>:
    5802:	97 fb       	bst	r25, 7
    5804:	3e f4       	brtc	.+14     	; 0x5814 <__floatsisf+0x12>
    5806:	90 95       	com	r25
    5808:	80 95       	com	r24
    580a:	70 95       	com	r23
    580c:	61 95       	neg	r22
    580e:	7f 4f       	sbci	r23, 0xFF	; 255
    5810:	8f 4f       	sbci	r24, 0xFF	; 255
    5812:	9f 4f       	sbci	r25, 0xFF	; 255
    5814:	99 23       	and	r25, r25
    5816:	a9 f0       	breq	.+42     	; 0x5842 <__floatsisf+0x40>
    5818:	f9 2f       	mov	r31, r25
    581a:	96 e9       	ldi	r25, 0x96	; 150
    581c:	bb 27       	eor	r27, r27
    581e:	93 95       	inc	r25
    5820:	f6 95       	lsr	r31
    5822:	87 95       	ror	r24
    5824:	77 95       	ror	r23
    5826:	67 95       	ror	r22
    5828:	b7 95       	ror	r27
    582a:	f1 11       	cpse	r31, r1
    582c:	f8 cf       	rjmp	.-16     	; 0x581e <__floatsisf+0x1c>
    582e:	fa f4       	brpl	.+62     	; 0x586e <__floatsisf+0x6c>
    5830:	bb 0f       	add	r27, r27
    5832:	11 f4       	brne	.+4      	; 0x5838 <__floatsisf+0x36>
    5834:	60 ff       	sbrs	r22, 0
    5836:	1b c0       	rjmp	.+54     	; 0x586e <__floatsisf+0x6c>
    5838:	6f 5f       	subi	r22, 0xFF	; 255
    583a:	7f 4f       	sbci	r23, 0xFF	; 255
    583c:	8f 4f       	sbci	r24, 0xFF	; 255
    583e:	9f 4f       	sbci	r25, 0xFF	; 255
    5840:	16 c0       	rjmp	.+44     	; 0x586e <__floatsisf+0x6c>
    5842:	88 23       	and	r24, r24
    5844:	11 f0       	breq	.+4      	; 0x584a <__floatsisf+0x48>
    5846:	96 e9       	ldi	r25, 0x96	; 150
    5848:	11 c0       	rjmp	.+34     	; 0x586c <__floatsisf+0x6a>
    584a:	77 23       	and	r23, r23
    584c:	21 f0       	breq	.+8      	; 0x5856 <__floatsisf+0x54>
    584e:	9e e8       	ldi	r25, 0x8E	; 142
    5850:	87 2f       	mov	r24, r23
    5852:	76 2f       	mov	r23, r22
    5854:	05 c0       	rjmp	.+10     	; 0x5860 <__floatsisf+0x5e>
    5856:	66 23       	and	r22, r22
    5858:	71 f0       	breq	.+28     	; 0x5876 <__floatsisf+0x74>
    585a:	96 e8       	ldi	r25, 0x86	; 134
    585c:	86 2f       	mov	r24, r22
    585e:	70 e0       	ldi	r23, 0x00	; 0
    5860:	60 e0       	ldi	r22, 0x00	; 0
    5862:	2a f0       	brmi	.+10     	; 0x586e <__floatsisf+0x6c>
    5864:	9a 95       	dec	r25
    5866:	66 0f       	add	r22, r22
    5868:	77 1f       	adc	r23, r23
    586a:	88 1f       	adc	r24, r24
    586c:	da f7       	brpl	.-10     	; 0x5864 <__floatsisf+0x62>
    586e:	88 0f       	add	r24, r24
    5870:	96 95       	lsr	r25
    5872:	87 95       	ror	r24
    5874:	97 f9       	bld	r25, 7
    5876:	08 95       	ret

00005878 <__fp_inf>:
    5878:	97 f9       	bld	r25, 7
    587a:	9f 67       	ori	r25, 0x7F	; 127
    587c:	80 e8       	ldi	r24, 0x80	; 128
    587e:	70 e0       	ldi	r23, 0x00	; 0
    5880:	60 e0       	ldi	r22, 0x00	; 0
    5882:	08 95       	ret

00005884 <__fp_nan>:
    5884:	9f ef       	ldi	r25, 0xFF	; 255
    5886:	80 ec       	ldi	r24, 0xC0	; 192
    5888:	08 95       	ret

0000588a <__fp_pscA>:
    588a:	00 24       	eor	r0, r0
    588c:	0a 94       	dec	r0
    588e:	16 16       	cp	r1, r22
    5890:	17 06       	cpc	r1, r23
    5892:	18 06       	cpc	r1, r24
    5894:	09 06       	cpc	r0, r25
    5896:	08 95       	ret

00005898 <__fp_pscB>:
    5898:	00 24       	eor	r0, r0
    589a:	0a 94       	dec	r0
    589c:	12 16       	cp	r1, r18
    589e:	13 06       	cpc	r1, r19
    58a0:	14 06       	cpc	r1, r20
    58a2:	05 06       	cpc	r0, r21
    58a4:	08 95       	ret

000058a6 <__fp_round>:
    58a6:	09 2e       	mov	r0, r25
    58a8:	03 94       	inc	r0
    58aa:	00 0c       	add	r0, r0
    58ac:	11 f4       	brne	.+4      	; 0x58b2 <__fp_round+0xc>
    58ae:	88 23       	and	r24, r24
    58b0:	52 f0       	brmi	.+20     	; 0x58c6 <__fp_round+0x20>
    58b2:	bb 0f       	add	r27, r27
    58b4:	40 f4       	brcc	.+16     	; 0x58c6 <__fp_round+0x20>
    58b6:	bf 2b       	or	r27, r31
    58b8:	11 f4       	brne	.+4      	; 0x58be <__fp_round+0x18>
    58ba:	60 ff       	sbrs	r22, 0
    58bc:	04 c0       	rjmp	.+8      	; 0x58c6 <__fp_round+0x20>
    58be:	6f 5f       	subi	r22, 0xFF	; 255
    58c0:	7f 4f       	sbci	r23, 0xFF	; 255
    58c2:	8f 4f       	sbci	r24, 0xFF	; 255
    58c4:	9f 4f       	sbci	r25, 0xFF	; 255
    58c6:	08 95       	ret

000058c8 <__gesf2>:
    58c8:	69 d0       	rcall	.+210    	; 0x599c <__fp_cmp>
    58ca:	08 f4       	brcc	.+2      	; 0x58ce <__gesf2+0x6>
    58cc:	8f ef       	ldi	r24, 0xFF	; 255
    58ce:	08 95       	ret

000058d0 <__mulsf3>:
    58d0:	0c d0       	rcall	.+24     	; 0x58ea <__mulsf3x>
    58d2:	e9 cf       	rjmp	.-46     	; 0x58a6 <__fp_round>
    58d4:	da df       	rcall	.-76     	; 0x588a <__fp_pscA>
    58d6:	28 f0       	brcs	.+10     	; 0x58e2 <__mulsf3+0x12>
    58d8:	df df       	rcall	.-66     	; 0x5898 <__fp_pscB>
    58da:	18 f0       	brcs	.+6      	; 0x58e2 <__mulsf3+0x12>
    58dc:	95 23       	and	r25, r21
    58de:	09 f0       	breq	.+2      	; 0x58e2 <__mulsf3+0x12>
    58e0:	cb cf       	rjmp	.-106    	; 0x5878 <__fp_inf>
    58e2:	d0 cf       	rjmp	.-96     	; 0x5884 <__fp_nan>
    58e4:	11 24       	eor	r1, r1
    58e6:	0c 94 b6 1c 	jmp	0x396c	; 0x396c <__fp_szero>

000058ea <__mulsf3x>:
    58ea:	0e 94 93 1c 	call	0x3926	; 0x3926 <__fp_split3>
    58ee:	90 f3       	brcs	.-28     	; 0x58d4 <__mulsf3+0x4>

000058f0 <__mulsf3_pse>:
    58f0:	95 9f       	mul	r25, r21
    58f2:	c1 f3       	breq	.-16     	; 0x58e4 <__mulsf3+0x14>
    58f4:	95 0f       	add	r25, r21
    58f6:	50 e0       	ldi	r21, 0x00	; 0
    58f8:	55 1f       	adc	r21, r21
    58fa:	62 9f       	mul	r22, r18
    58fc:	f0 01       	movw	r30, r0
    58fe:	72 9f       	mul	r23, r18
    5900:	bb 27       	eor	r27, r27
    5902:	f0 0d       	add	r31, r0
    5904:	b1 1d       	adc	r27, r1
    5906:	63 9f       	mul	r22, r19
    5908:	aa 27       	eor	r26, r26
    590a:	f0 0d       	add	r31, r0
    590c:	b1 1d       	adc	r27, r1
    590e:	aa 1f       	adc	r26, r26
    5910:	64 9f       	mul	r22, r20
    5912:	66 27       	eor	r22, r22
    5914:	b0 0d       	add	r27, r0
    5916:	a1 1d       	adc	r26, r1
    5918:	66 1f       	adc	r22, r22
    591a:	82 9f       	mul	r24, r18
    591c:	22 27       	eor	r18, r18
    591e:	b0 0d       	add	r27, r0
    5920:	a1 1d       	adc	r26, r1
    5922:	62 1f       	adc	r22, r18
    5924:	73 9f       	mul	r23, r19
    5926:	b0 0d       	add	r27, r0
    5928:	a1 1d       	adc	r26, r1
    592a:	62 1f       	adc	r22, r18
    592c:	83 9f       	mul	r24, r19
    592e:	a0 0d       	add	r26, r0
    5930:	61 1d       	adc	r22, r1
    5932:	22 1f       	adc	r18, r18
    5934:	74 9f       	mul	r23, r20
    5936:	33 27       	eor	r19, r19
    5938:	a0 0d       	add	r26, r0
    593a:	61 1d       	adc	r22, r1
    593c:	23 1f       	adc	r18, r19
    593e:	84 9f       	mul	r24, r20
    5940:	60 0d       	add	r22, r0
    5942:	21 1d       	adc	r18, r1
    5944:	82 2f       	mov	r24, r18
    5946:	76 2f       	mov	r23, r22
    5948:	6a 2f       	mov	r22, r26
    594a:	11 24       	eor	r1, r1
    594c:	9f 57       	subi	r25, 0x7F	; 127
    594e:	50 40       	sbci	r21, 0x00	; 0
    5950:	92 f0       	brmi	.+36     	; 0x5976 <__mulsf3_pse+0x86>
    5952:	e9 f0       	breq	.+58     	; 0x598e <__mulsf3_pse+0x9e>
    5954:	88 23       	and	r24, r24
    5956:	4a f0       	brmi	.+18     	; 0x596a <__mulsf3_pse+0x7a>
    5958:	ee 0f       	add	r30, r30
    595a:	ff 1f       	adc	r31, r31
    595c:	bb 1f       	adc	r27, r27
    595e:	66 1f       	adc	r22, r22
    5960:	77 1f       	adc	r23, r23
    5962:	88 1f       	adc	r24, r24
    5964:	91 50       	subi	r25, 0x01	; 1
    5966:	50 40       	sbci	r21, 0x00	; 0
    5968:	a9 f7       	brne	.-22     	; 0x5954 <__mulsf3_pse+0x64>
    596a:	9e 3f       	cpi	r25, 0xFE	; 254
    596c:	51 05       	cpc	r21, r1
    596e:	78 f0       	brcs	.+30     	; 0x598e <__mulsf3_pse+0x9e>
    5970:	83 cf       	rjmp	.-250    	; 0x5878 <__fp_inf>
    5972:	0c 94 b6 1c 	jmp	0x396c	; 0x396c <__fp_szero>
    5976:	5f 3f       	cpi	r21, 0xFF	; 255
    5978:	e4 f3       	brlt	.-8      	; 0x5972 <__mulsf3_pse+0x82>
    597a:	98 3e       	cpi	r25, 0xE8	; 232
    597c:	d4 f3       	brlt	.-12     	; 0x5972 <__mulsf3_pse+0x82>
    597e:	86 95       	lsr	r24
    5980:	77 95       	ror	r23
    5982:	67 95       	ror	r22
    5984:	b7 95       	ror	r27
    5986:	f7 95       	ror	r31
    5988:	e7 95       	ror	r30
    598a:	9f 5f       	subi	r25, 0xFF	; 255
    598c:	c1 f7       	brne	.-16     	; 0x597e <__mulsf3_pse+0x8e>
    598e:	fe 2b       	or	r31, r30
    5990:	88 0f       	add	r24, r24
    5992:	91 1d       	adc	r25, r1
    5994:	96 95       	lsr	r25
    5996:	87 95       	ror	r24
    5998:	97 f9       	bld	r25, 7
    599a:	08 95       	ret

0000599c <__fp_cmp>:
    599c:	99 0f       	add	r25, r25
    599e:	00 08       	sbc	r0, r0
    59a0:	55 0f       	add	r21, r21
    59a2:	aa 0b       	sbc	r26, r26
    59a4:	e0 e8       	ldi	r30, 0x80	; 128
    59a6:	fe ef       	ldi	r31, 0xFE	; 254
    59a8:	16 16       	cp	r1, r22
    59aa:	17 06       	cpc	r1, r23
    59ac:	e8 07       	cpc	r30, r24
    59ae:	f9 07       	cpc	r31, r25
    59b0:	c0 f0       	brcs	.+48     	; 0x59e2 <__fp_cmp+0x46>
    59b2:	12 16       	cp	r1, r18
    59b4:	13 06       	cpc	r1, r19
    59b6:	e4 07       	cpc	r30, r20
    59b8:	f5 07       	cpc	r31, r21
    59ba:	98 f0       	brcs	.+38     	; 0x59e2 <__fp_cmp+0x46>
    59bc:	62 1b       	sub	r22, r18
    59be:	73 0b       	sbc	r23, r19
    59c0:	84 0b       	sbc	r24, r20
    59c2:	95 0b       	sbc	r25, r21
    59c4:	39 f4       	brne	.+14     	; 0x59d4 <__fp_cmp+0x38>
    59c6:	0a 26       	eor	r0, r26
    59c8:	61 f0       	breq	.+24     	; 0x59e2 <__fp_cmp+0x46>
    59ca:	23 2b       	or	r18, r19
    59cc:	24 2b       	or	r18, r20
    59ce:	25 2b       	or	r18, r21
    59d0:	21 f4       	brne	.+8      	; 0x59da <__fp_cmp+0x3e>
    59d2:	08 95       	ret
    59d4:	0a 26       	eor	r0, r26
    59d6:	09 f4       	brne	.+2      	; 0x59da <__fp_cmp+0x3e>
    59d8:	a1 40       	sbci	r26, 0x01	; 1
    59da:	a6 95       	lsr	r26
    59dc:	8f ef       	ldi	r24, 0xFF	; 255
    59de:	81 1d       	adc	r24, r1
    59e0:	81 1d       	adc	r24, r1
    59e2:	08 95       	ret

000059e4 <__udivmodsi4>:
    59e4:	a1 e2       	ldi	r26, 0x21	; 33
    59e6:	1a 2e       	mov	r1, r26
    59e8:	aa 1b       	sub	r26, r26
    59ea:	bb 1b       	sub	r27, r27
    59ec:	fd 01       	movw	r30, r26
    59ee:	0d c0       	rjmp	.+26     	; 0x5a0a <__udivmodsi4_ep>

000059f0 <__udivmodsi4_loop>:
    59f0:	aa 1f       	adc	r26, r26
    59f2:	bb 1f       	adc	r27, r27
    59f4:	ee 1f       	adc	r30, r30
    59f6:	ff 1f       	adc	r31, r31
    59f8:	a2 17       	cp	r26, r18
    59fa:	b3 07       	cpc	r27, r19
    59fc:	e4 07       	cpc	r30, r20
    59fe:	f5 07       	cpc	r31, r21
    5a00:	20 f0       	brcs	.+8      	; 0x5a0a <__udivmodsi4_ep>
    5a02:	a2 1b       	sub	r26, r18
    5a04:	b3 0b       	sbc	r27, r19
    5a06:	e4 0b       	sbc	r30, r20
    5a08:	f5 0b       	sbc	r31, r21

00005a0a <__udivmodsi4_ep>:
    5a0a:	66 1f       	adc	r22, r22
    5a0c:	77 1f       	adc	r23, r23
    5a0e:	88 1f       	adc	r24, r24
    5a10:	99 1f       	adc	r25, r25
    5a12:	1a 94       	dec	r1
    5a14:	69 f7       	brne	.-38     	; 0x59f0 <__udivmodsi4_loop>
    5a16:	60 95       	com	r22
    5a18:	70 95       	com	r23
    5a1a:	80 95       	com	r24
    5a1c:	90 95       	com	r25
    5a1e:	9b 01       	movw	r18, r22
    5a20:	ac 01       	movw	r20, r24
    5a22:	bd 01       	movw	r22, r26
    5a24:	cf 01       	movw	r24, r30
    5a26:	08 95       	ret

00005a28 <__tablejump2__>:
    5a28:	ee 0f       	add	r30, r30
    5a2a:	ff 1f       	adc	r31, r31
    5a2c:	88 1f       	adc	r24, r24
    5a2e:	8b bf       	out	0x3b, r24	; 59
    5a30:	07 90       	elpm	r0, Z+
    5a32:	f6 91       	elpm	r31, Z
    5a34:	e0 2d       	mov	r30, r0
    5a36:	19 94       	eijmp

00005a38 <malloc>:
    5a38:	0f 93       	push	r16
    5a3a:	1f 93       	push	r17
    5a3c:	cf 93       	push	r28
    5a3e:	df 93       	push	r29
    5a40:	82 30       	cpi	r24, 0x02	; 2
    5a42:	91 05       	cpc	r25, r1
    5a44:	10 f4       	brcc	.+4      	; 0x5a4a <malloc+0x12>
    5a46:	82 e0       	ldi	r24, 0x02	; 2
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	e0 91 1c 15 	lds	r30, 0x151C	; 0x80151c <__flp>
    5a4e:	f0 91 1d 15 	lds	r31, 0x151D	; 0x80151d <__flp+0x1>
    5a52:	20 e0       	ldi	r18, 0x00	; 0
    5a54:	30 e0       	ldi	r19, 0x00	; 0
    5a56:	a0 e0       	ldi	r26, 0x00	; 0
    5a58:	b0 e0       	ldi	r27, 0x00	; 0
    5a5a:	30 97       	sbiw	r30, 0x00	; 0
    5a5c:	19 f1       	breq	.+70     	; 0x5aa4 <malloc+0x6c>
    5a5e:	40 81       	ld	r20, Z
    5a60:	51 81       	ldd	r21, Z+1	; 0x01
    5a62:	02 81       	ldd	r16, Z+2	; 0x02
    5a64:	13 81       	ldd	r17, Z+3	; 0x03
    5a66:	48 17       	cp	r20, r24
    5a68:	59 07       	cpc	r21, r25
    5a6a:	c8 f0       	brcs	.+50     	; 0x5a9e <malloc+0x66>
    5a6c:	84 17       	cp	r24, r20
    5a6e:	95 07       	cpc	r25, r21
    5a70:	69 f4       	brne	.+26     	; 0x5a8c <malloc+0x54>
    5a72:	10 97       	sbiw	r26, 0x00	; 0
    5a74:	31 f0       	breq	.+12     	; 0x5a82 <malloc+0x4a>
    5a76:	12 96       	adiw	r26, 0x02	; 2
    5a78:	0c 93       	st	X, r16
    5a7a:	12 97       	sbiw	r26, 0x02	; 2
    5a7c:	13 96       	adiw	r26, 0x03	; 3
    5a7e:	1c 93       	st	X, r17
    5a80:	27 c0       	rjmp	.+78     	; 0x5ad0 <malloc+0x98>
    5a82:	00 93 1c 15 	sts	0x151C, r16	; 0x80151c <__flp>
    5a86:	10 93 1d 15 	sts	0x151D, r17	; 0x80151d <__flp+0x1>
    5a8a:	22 c0       	rjmp	.+68     	; 0x5ad0 <malloc+0x98>
    5a8c:	21 15       	cp	r18, r1
    5a8e:	31 05       	cpc	r19, r1
    5a90:	19 f0       	breq	.+6      	; 0x5a98 <malloc+0x60>
    5a92:	42 17       	cp	r20, r18
    5a94:	53 07       	cpc	r21, r19
    5a96:	18 f4       	brcc	.+6      	; 0x5a9e <malloc+0x66>
    5a98:	9a 01       	movw	r18, r20
    5a9a:	bd 01       	movw	r22, r26
    5a9c:	ef 01       	movw	r28, r30
    5a9e:	df 01       	movw	r26, r30
    5aa0:	f8 01       	movw	r30, r16
    5aa2:	db cf       	rjmp	.-74     	; 0x5a5a <malloc+0x22>
    5aa4:	21 15       	cp	r18, r1
    5aa6:	31 05       	cpc	r19, r1
    5aa8:	f9 f0       	breq	.+62     	; 0x5ae8 <malloc+0xb0>
    5aaa:	28 1b       	sub	r18, r24
    5aac:	39 0b       	sbc	r19, r25
    5aae:	24 30       	cpi	r18, 0x04	; 4
    5ab0:	31 05       	cpc	r19, r1
    5ab2:	80 f4       	brcc	.+32     	; 0x5ad4 <malloc+0x9c>
    5ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    5ab8:	61 15       	cp	r22, r1
    5aba:	71 05       	cpc	r23, r1
    5abc:	21 f0       	breq	.+8      	; 0x5ac6 <malloc+0x8e>
    5abe:	fb 01       	movw	r30, r22
    5ac0:	93 83       	std	Z+3, r25	; 0x03
    5ac2:	82 83       	std	Z+2, r24	; 0x02
    5ac4:	04 c0       	rjmp	.+8      	; 0x5ace <malloc+0x96>
    5ac6:	90 93 1d 15 	sts	0x151D, r25	; 0x80151d <__flp+0x1>
    5aca:	80 93 1c 15 	sts	0x151C, r24	; 0x80151c <__flp>
    5ace:	fe 01       	movw	r30, r28
    5ad0:	32 96       	adiw	r30, 0x02	; 2
    5ad2:	44 c0       	rjmp	.+136    	; 0x5b5c <malloc+0x124>
    5ad4:	fe 01       	movw	r30, r28
    5ad6:	e2 0f       	add	r30, r18
    5ad8:	f3 1f       	adc	r31, r19
    5ada:	81 93       	st	Z+, r24
    5adc:	91 93       	st	Z+, r25
    5ade:	22 50       	subi	r18, 0x02	; 2
    5ae0:	31 09       	sbc	r19, r1
    5ae2:	39 83       	std	Y+1, r19	; 0x01
    5ae4:	28 83       	st	Y, r18
    5ae6:	3a c0       	rjmp	.+116    	; 0x5b5c <malloc+0x124>
    5ae8:	20 91 1a 15 	lds	r18, 0x151A	; 0x80151a <__brkval>
    5aec:	30 91 1b 15 	lds	r19, 0x151B	; 0x80151b <__brkval+0x1>
    5af0:	23 2b       	or	r18, r19
    5af2:	41 f4       	brne	.+16     	; 0x5b04 <malloc+0xcc>
    5af4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5af8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5afc:	30 93 1b 15 	sts	0x151B, r19	; 0x80151b <__brkval+0x1>
    5b00:	20 93 1a 15 	sts	0x151A, r18	; 0x80151a <__brkval>
    5b04:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5b08:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5b0c:	21 15       	cp	r18, r1
    5b0e:	31 05       	cpc	r19, r1
    5b10:	41 f4       	brne	.+16     	; 0x5b22 <malloc+0xea>
    5b12:	2d b7       	in	r18, 0x3d	; 61
    5b14:	3e b7       	in	r19, 0x3e	; 62
    5b16:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5b1a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5b1e:	24 1b       	sub	r18, r20
    5b20:	35 0b       	sbc	r19, r21
    5b22:	e0 91 1a 15 	lds	r30, 0x151A	; 0x80151a <__brkval>
    5b26:	f0 91 1b 15 	lds	r31, 0x151B	; 0x80151b <__brkval+0x1>
    5b2a:	e2 17       	cp	r30, r18
    5b2c:	f3 07       	cpc	r31, r19
    5b2e:	a0 f4       	brcc	.+40     	; 0x5b58 <malloc+0x120>
    5b30:	2e 1b       	sub	r18, r30
    5b32:	3f 0b       	sbc	r19, r31
    5b34:	28 17       	cp	r18, r24
    5b36:	39 07       	cpc	r19, r25
    5b38:	78 f0       	brcs	.+30     	; 0x5b58 <malloc+0x120>
    5b3a:	ac 01       	movw	r20, r24
    5b3c:	4e 5f       	subi	r20, 0xFE	; 254
    5b3e:	5f 4f       	sbci	r21, 0xFF	; 255
    5b40:	24 17       	cp	r18, r20
    5b42:	35 07       	cpc	r19, r21
    5b44:	48 f0       	brcs	.+18     	; 0x5b58 <malloc+0x120>
    5b46:	4e 0f       	add	r20, r30
    5b48:	5f 1f       	adc	r21, r31
    5b4a:	50 93 1b 15 	sts	0x151B, r21	; 0x80151b <__brkval+0x1>
    5b4e:	40 93 1a 15 	sts	0x151A, r20	; 0x80151a <__brkval>
    5b52:	81 93       	st	Z+, r24
    5b54:	91 93       	st	Z+, r25
    5b56:	02 c0       	rjmp	.+4      	; 0x5b5c <malloc+0x124>
    5b58:	e0 e0       	ldi	r30, 0x00	; 0
    5b5a:	f0 e0       	ldi	r31, 0x00	; 0
    5b5c:	cf 01       	movw	r24, r30
    5b5e:	df 91       	pop	r29
    5b60:	cf 91       	pop	r28
    5b62:	1f 91       	pop	r17
    5b64:	0f 91       	pop	r16
    5b66:	08 95       	ret

00005b68 <free>:
    5b68:	cf 93       	push	r28
    5b6a:	df 93       	push	r29
    5b6c:	00 97       	sbiw	r24, 0x00	; 0
    5b6e:	09 f4       	brne	.+2      	; 0x5b72 <free+0xa>
    5b70:	81 c0       	rjmp	.+258    	; 0x5c74 <free+0x10c>
    5b72:	fc 01       	movw	r30, r24
    5b74:	32 97       	sbiw	r30, 0x02	; 2
    5b76:	13 82       	std	Z+3, r1	; 0x03
    5b78:	12 82       	std	Z+2, r1	; 0x02
    5b7a:	a0 91 1c 15 	lds	r26, 0x151C	; 0x80151c <__flp>
    5b7e:	b0 91 1d 15 	lds	r27, 0x151D	; 0x80151d <__flp+0x1>
    5b82:	10 97       	sbiw	r26, 0x00	; 0
    5b84:	81 f4       	brne	.+32     	; 0x5ba6 <free+0x3e>
    5b86:	20 81       	ld	r18, Z
    5b88:	31 81       	ldd	r19, Z+1	; 0x01
    5b8a:	82 0f       	add	r24, r18
    5b8c:	93 1f       	adc	r25, r19
    5b8e:	20 91 1a 15 	lds	r18, 0x151A	; 0x80151a <__brkval>
    5b92:	30 91 1b 15 	lds	r19, 0x151B	; 0x80151b <__brkval+0x1>
    5b96:	28 17       	cp	r18, r24
    5b98:	39 07       	cpc	r19, r25
    5b9a:	51 f5       	brne	.+84     	; 0x5bf0 <free+0x88>
    5b9c:	f0 93 1b 15 	sts	0x151B, r31	; 0x80151b <__brkval+0x1>
    5ba0:	e0 93 1a 15 	sts	0x151A, r30	; 0x80151a <__brkval>
    5ba4:	67 c0       	rjmp	.+206    	; 0x5c74 <free+0x10c>
    5ba6:	ed 01       	movw	r28, r26
    5ba8:	20 e0       	ldi	r18, 0x00	; 0
    5baa:	30 e0       	ldi	r19, 0x00	; 0
    5bac:	ce 17       	cp	r28, r30
    5bae:	df 07       	cpc	r29, r31
    5bb0:	40 f4       	brcc	.+16     	; 0x5bc2 <free+0x5a>
    5bb2:	4a 81       	ldd	r20, Y+2	; 0x02
    5bb4:	5b 81       	ldd	r21, Y+3	; 0x03
    5bb6:	9e 01       	movw	r18, r28
    5bb8:	41 15       	cp	r20, r1
    5bba:	51 05       	cpc	r21, r1
    5bbc:	f1 f0       	breq	.+60     	; 0x5bfa <free+0x92>
    5bbe:	ea 01       	movw	r28, r20
    5bc0:	f5 cf       	rjmp	.-22     	; 0x5bac <free+0x44>
    5bc2:	d3 83       	std	Z+3, r29	; 0x03
    5bc4:	c2 83       	std	Z+2, r28	; 0x02
    5bc6:	40 81       	ld	r20, Z
    5bc8:	51 81       	ldd	r21, Z+1	; 0x01
    5bca:	84 0f       	add	r24, r20
    5bcc:	95 1f       	adc	r25, r21
    5bce:	c8 17       	cp	r28, r24
    5bd0:	d9 07       	cpc	r29, r25
    5bd2:	59 f4       	brne	.+22     	; 0x5bea <free+0x82>
    5bd4:	88 81       	ld	r24, Y
    5bd6:	99 81       	ldd	r25, Y+1	; 0x01
    5bd8:	84 0f       	add	r24, r20
    5bda:	95 1f       	adc	r25, r21
    5bdc:	02 96       	adiw	r24, 0x02	; 2
    5bde:	91 83       	std	Z+1, r25	; 0x01
    5be0:	80 83       	st	Z, r24
    5be2:	8a 81       	ldd	r24, Y+2	; 0x02
    5be4:	9b 81       	ldd	r25, Y+3	; 0x03
    5be6:	93 83       	std	Z+3, r25	; 0x03
    5be8:	82 83       	std	Z+2, r24	; 0x02
    5bea:	21 15       	cp	r18, r1
    5bec:	31 05       	cpc	r19, r1
    5bee:	29 f4       	brne	.+10     	; 0x5bfa <free+0x92>
    5bf0:	f0 93 1d 15 	sts	0x151D, r31	; 0x80151d <__flp+0x1>
    5bf4:	e0 93 1c 15 	sts	0x151C, r30	; 0x80151c <__flp>
    5bf8:	3d c0       	rjmp	.+122    	; 0x5c74 <free+0x10c>
    5bfa:	e9 01       	movw	r28, r18
    5bfc:	fb 83       	std	Y+3, r31	; 0x03
    5bfe:	ea 83       	std	Y+2, r30	; 0x02
    5c00:	49 91       	ld	r20, Y+
    5c02:	59 91       	ld	r21, Y+
    5c04:	c4 0f       	add	r28, r20
    5c06:	d5 1f       	adc	r29, r21
    5c08:	ec 17       	cp	r30, r28
    5c0a:	fd 07       	cpc	r31, r29
    5c0c:	61 f4       	brne	.+24     	; 0x5c26 <free+0xbe>
    5c0e:	80 81       	ld	r24, Z
    5c10:	91 81       	ldd	r25, Z+1	; 0x01
    5c12:	84 0f       	add	r24, r20
    5c14:	95 1f       	adc	r25, r21
    5c16:	02 96       	adiw	r24, 0x02	; 2
    5c18:	e9 01       	movw	r28, r18
    5c1a:	99 83       	std	Y+1, r25	; 0x01
    5c1c:	88 83       	st	Y, r24
    5c1e:	82 81       	ldd	r24, Z+2	; 0x02
    5c20:	93 81       	ldd	r25, Z+3	; 0x03
    5c22:	9b 83       	std	Y+3, r25	; 0x03
    5c24:	8a 83       	std	Y+2, r24	; 0x02
    5c26:	e0 e0       	ldi	r30, 0x00	; 0
    5c28:	f0 e0       	ldi	r31, 0x00	; 0
    5c2a:	12 96       	adiw	r26, 0x02	; 2
    5c2c:	8d 91       	ld	r24, X+
    5c2e:	9c 91       	ld	r25, X
    5c30:	13 97       	sbiw	r26, 0x03	; 3
    5c32:	00 97       	sbiw	r24, 0x00	; 0
    5c34:	19 f0       	breq	.+6      	; 0x5c3c <free+0xd4>
    5c36:	fd 01       	movw	r30, r26
    5c38:	dc 01       	movw	r26, r24
    5c3a:	f7 cf       	rjmp	.-18     	; 0x5c2a <free+0xc2>
    5c3c:	8d 91       	ld	r24, X+
    5c3e:	9c 91       	ld	r25, X
    5c40:	11 97       	sbiw	r26, 0x01	; 1
    5c42:	9d 01       	movw	r18, r26
    5c44:	2e 5f       	subi	r18, 0xFE	; 254
    5c46:	3f 4f       	sbci	r19, 0xFF	; 255
    5c48:	82 0f       	add	r24, r18
    5c4a:	93 1f       	adc	r25, r19
    5c4c:	20 91 1a 15 	lds	r18, 0x151A	; 0x80151a <__brkval>
    5c50:	30 91 1b 15 	lds	r19, 0x151B	; 0x80151b <__brkval+0x1>
    5c54:	28 17       	cp	r18, r24
    5c56:	39 07       	cpc	r19, r25
    5c58:	69 f4       	brne	.+26     	; 0x5c74 <free+0x10c>
    5c5a:	30 97       	sbiw	r30, 0x00	; 0
    5c5c:	29 f4       	brne	.+10     	; 0x5c68 <free+0x100>
    5c5e:	10 92 1d 15 	sts	0x151D, r1	; 0x80151d <__flp+0x1>
    5c62:	10 92 1c 15 	sts	0x151C, r1	; 0x80151c <__flp>
    5c66:	02 c0       	rjmp	.+4      	; 0x5c6c <free+0x104>
    5c68:	13 82       	std	Z+3, r1	; 0x03
    5c6a:	12 82       	std	Z+2, r1	; 0x02
    5c6c:	b0 93 1b 15 	sts	0x151B, r27	; 0x80151b <__brkval+0x1>
    5c70:	a0 93 1a 15 	sts	0x151A, r26	; 0x80151a <__brkval>
    5c74:	df 91       	pop	r29
    5c76:	cf 91       	pop	r28
    5c78:	08 95       	ret

00005c7a <abort>:
    5c7a:	81 e0       	ldi	r24, 0x01	; 1
    5c7c:	90 e0       	ldi	r25, 0x00	; 0
    5c7e:	f8 94       	cli
    5c80:	7d c3       	rjmp	.+1786   	; 0x637c <_exit>

00005c82 <memcpy>:
    5c82:	fb 01       	movw	r30, r22
    5c84:	dc 01       	movw	r26, r24
    5c86:	02 c0       	rjmp	.+4      	; 0x5c8c <memcpy+0xa>
    5c88:	01 90       	ld	r0, Z+
    5c8a:	0d 92       	st	X+, r0
    5c8c:	41 50       	subi	r20, 0x01	; 1
    5c8e:	50 40       	sbci	r21, 0x00	; 0
    5c90:	d8 f7       	brcc	.-10     	; 0x5c88 <memcpy+0x6>
    5c92:	08 95       	ret

00005c94 <memset>:
    5c94:	dc 01       	movw	r26, r24
    5c96:	01 c0       	rjmp	.+2      	; 0x5c9a <memset+0x6>
    5c98:	6d 93       	st	X+, r22
    5c9a:	41 50       	subi	r20, 0x01	; 1
    5c9c:	50 40       	sbci	r21, 0x00	; 0
    5c9e:	e0 f7       	brcc	.-8      	; 0x5c98 <memset+0x4>
    5ca0:	08 95       	ret

00005ca2 <strcasestr>:
    5ca2:	fb 01       	movw	r30, r22
    5ca4:	51 91       	ld	r21, Z+
    5ca6:	55 23       	and	r21, r21
    5ca8:	b1 f0       	breq	.+44     	; 0x5cd6 <strcasestr+0x34>
    5caa:	bf 01       	movw	r22, r30
    5cac:	dc 01       	movw	r26, r24
    5cae:	05 2e       	mov	r0, r21
    5cb0:	4d 91       	ld	r20, X+
    5cb2:	44 23       	and	r20, r20
    5cb4:	69 f0       	breq	.+26     	; 0x5cd0 <strcasestr+0x2e>
    5cb6:	10 d0       	rcall	.+32     	; 0x5cd8 <strcasestr+0x36>
    5cb8:	d9 f7       	brne	.-10     	; 0x5cb0 <strcasestr+0xe>
    5cba:	cd 01       	movw	r24, r26
    5cbc:	01 90       	ld	r0, Z+
    5cbe:	00 20       	and	r0, r0
    5cc0:	49 f0       	breq	.+18     	; 0x5cd4 <strcasestr+0x32>
    5cc2:	4d 91       	ld	r20, X+
    5cc4:	41 11       	cpse	r20, r1
    5cc6:	08 d0       	rcall	.+16     	; 0x5cd8 <strcasestr+0x36>
    5cc8:	c9 f3       	breq	.-14     	; 0x5cbc <strcasestr+0x1a>
    5cca:	fb 01       	movw	r30, r22
    5ccc:	41 11       	cpse	r20, r1
    5cce:	ee cf       	rjmp	.-36     	; 0x5cac <strcasestr+0xa>
    5cd0:	81 e0       	ldi	r24, 0x01	; 1
    5cd2:	90 e0       	ldi	r25, 0x00	; 0
    5cd4:	01 97       	sbiw	r24, 0x01	; 1
    5cd6:	08 95       	ret
    5cd8:	40 25       	eor	r20, r0
    5cda:	39 f0       	breq	.+14     	; 0x5cea <strcasestr+0x48>
    5cdc:	40 32       	cpi	r20, 0x20	; 32
    5cde:	29 f4       	brne	.+10     	; 0x5cea <strcasestr+0x48>
    5ce0:	40 29       	or	r20, r0
    5ce2:	4b 57       	subi	r20, 0x7B	; 123
    5ce4:	46 5e       	subi	r20, 0xE6	; 230
    5ce6:	08 f0       	brcs	.+2      	; 0x5cea <strcasestr+0x48>
    5ce8:	18 94       	sez
    5cea:	08 95       	ret

00005cec <strcat>:
    5cec:	fb 01       	movw	r30, r22
    5cee:	dc 01       	movw	r26, r24
    5cf0:	0d 90       	ld	r0, X+
    5cf2:	00 20       	and	r0, r0
    5cf4:	e9 f7       	brne	.-6      	; 0x5cf0 <strcat+0x4>
    5cf6:	11 97       	sbiw	r26, 0x01	; 1
    5cf8:	01 90       	ld	r0, Z+
    5cfa:	0d 92       	st	X+, r0
    5cfc:	00 20       	and	r0, r0
    5cfe:	e1 f7       	brne	.-8      	; 0x5cf8 <strcat+0xc>
    5d00:	08 95       	ret

00005d02 <strcpy>:
    5d02:	fb 01       	movw	r30, r22
    5d04:	dc 01       	movw	r26, r24
    5d06:	01 90       	ld	r0, Z+
    5d08:	0d 92       	st	X+, r0
    5d0a:	00 20       	and	r0, r0
    5d0c:	e1 f7       	brne	.-8      	; 0x5d06 <strcpy+0x4>
    5d0e:	08 95       	ret

00005d10 <strncasecmp>:
    5d10:	fb 01       	movw	r30, r22
    5d12:	dc 01       	movw	r26, r24
    5d14:	41 50       	subi	r20, 0x01	; 1
    5d16:	50 40       	sbci	r21, 0x00	; 0
    5d18:	88 f0       	brcs	.+34     	; 0x5d3c <strncasecmp+0x2c>
    5d1a:	8d 91       	ld	r24, X+
    5d1c:	81 34       	cpi	r24, 0x41	; 65
    5d1e:	1c f0       	brlt	.+6      	; 0x5d26 <strncasecmp+0x16>
    5d20:	8b 35       	cpi	r24, 0x5B	; 91
    5d22:	0c f4       	brge	.+2      	; 0x5d26 <strncasecmp+0x16>
    5d24:	80 5e       	subi	r24, 0xE0	; 224
    5d26:	61 91       	ld	r22, Z+
    5d28:	61 34       	cpi	r22, 0x41	; 65
    5d2a:	1c f0       	brlt	.+6      	; 0x5d32 <strncasecmp+0x22>
    5d2c:	6b 35       	cpi	r22, 0x5B	; 91
    5d2e:	0c f4       	brge	.+2      	; 0x5d32 <strncasecmp+0x22>
    5d30:	60 5e       	subi	r22, 0xE0	; 224
    5d32:	86 1b       	sub	r24, r22
    5d34:	61 11       	cpse	r22, r1
    5d36:	71 f3       	breq	.-36     	; 0x5d14 <strncasecmp+0x4>
    5d38:	99 0b       	sbc	r25, r25
    5d3a:	08 95       	ret
    5d3c:	88 1b       	sub	r24, r24
    5d3e:	fc cf       	rjmp	.-8      	; 0x5d38 <strncasecmp+0x28>

00005d40 <printf>:
    5d40:	cf 93       	push	r28
    5d42:	df 93       	push	r29
    5d44:	cd b7       	in	r28, 0x3d	; 61
    5d46:	de b7       	in	r29, 0x3e	; 62
    5d48:	ae 01       	movw	r20, r28
    5d4a:	4a 5f       	subi	r20, 0xFA	; 250
    5d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    5d4e:	fa 01       	movw	r30, r20
    5d50:	61 91       	ld	r22, Z+
    5d52:	71 91       	ld	r23, Z+
    5d54:	af 01       	movw	r20, r30
    5d56:	80 91 20 15 	lds	r24, 0x1520	; 0x801520 <__iob+0x2>
    5d5a:	90 91 21 15 	lds	r25, 0x1521	; 0x801521 <__iob+0x3>
    5d5e:	61 d0       	rcall	.+194    	; 0x5e22 <vfprintf>
    5d60:	df 91       	pop	r29
    5d62:	cf 91       	pop	r28
    5d64:	08 95       	ret

00005d66 <puts>:
    5d66:	0f 93       	push	r16
    5d68:	1f 93       	push	r17
    5d6a:	cf 93       	push	r28
    5d6c:	df 93       	push	r29
    5d6e:	e0 91 20 15 	lds	r30, 0x1520	; 0x801520 <__iob+0x2>
    5d72:	f0 91 21 15 	lds	r31, 0x1521	; 0x801521 <__iob+0x3>
    5d76:	23 81       	ldd	r18, Z+3	; 0x03
    5d78:	21 ff       	sbrs	r18, 1
    5d7a:	1b c0       	rjmp	.+54     	; 0x5db2 <puts+0x4c>
    5d7c:	8c 01       	movw	r16, r24
    5d7e:	d0 e0       	ldi	r29, 0x00	; 0
    5d80:	c0 e0       	ldi	r28, 0x00	; 0
    5d82:	f8 01       	movw	r30, r16
    5d84:	81 91       	ld	r24, Z+
    5d86:	8f 01       	movw	r16, r30
    5d88:	60 91 20 15 	lds	r22, 0x1520	; 0x801520 <__iob+0x2>
    5d8c:	70 91 21 15 	lds	r23, 0x1521	; 0x801521 <__iob+0x3>
    5d90:	db 01       	movw	r26, r22
    5d92:	18 96       	adiw	r26, 0x08	; 8
    5d94:	ed 91       	ld	r30, X+
    5d96:	fc 91       	ld	r31, X
    5d98:	19 97       	sbiw	r26, 0x09	; 9
    5d9a:	88 23       	and	r24, r24
    5d9c:	31 f0       	breq	.+12     	; 0x5daa <puts+0x44>
    5d9e:	19 95       	eicall
    5da0:	89 2b       	or	r24, r25
    5da2:	79 f3       	breq	.-34     	; 0x5d82 <puts+0x1c>
    5da4:	df ef       	ldi	r29, 0xFF	; 255
    5da6:	cf ef       	ldi	r28, 0xFF	; 255
    5da8:	ec cf       	rjmp	.-40     	; 0x5d82 <puts+0x1c>
    5daa:	8a e0       	ldi	r24, 0x0A	; 10
    5dac:	19 95       	eicall
    5dae:	89 2b       	or	r24, r25
    5db0:	19 f0       	breq	.+6      	; 0x5db8 <puts+0x52>
    5db2:	8f ef       	ldi	r24, 0xFF	; 255
    5db4:	9f ef       	ldi	r25, 0xFF	; 255
    5db6:	02 c0       	rjmp	.+4      	; 0x5dbc <puts+0x56>
    5db8:	8d 2f       	mov	r24, r29
    5dba:	9c 2f       	mov	r25, r28
    5dbc:	df 91       	pop	r29
    5dbe:	cf 91       	pop	r28
    5dc0:	1f 91       	pop	r17
    5dc2:	0f 91       	pop	r16
    5dc4:	08 95       	ret

00005dc6 <sprintf>:
    5dc6:	0f 93       	push	r16
    5dc8:	1f 93       	push	r17
    5dca:	cf 93       	push	r28
    5dcc:	df 93       	push	r29
    5dce:	cd b7       	in	r28, 0x3d	; 61
    5dd0:	de b7       	in	r29, 0x3e	; 62
    5dd2:	2e 97       	sbiw	r28, 0x0e	; 14
    5dd4:	0f b6       	in	r0, 0x3f	; 63
    5dd6:	f8 94       	cli
    5dd8:	de bf       	out	0x3e, r29	; 62
    5dda:	0f be       	out	0x3f, r0	; 63
    5ddc:	cd bf       	out	0x3d, r28	; 61
    5dde:	0e 89       	ldd	r16, Y+22	; 0x16
    5de0:	1f 89       	ldd	r17, Y+23	; 0x17
    5de2:	86 e0       	ldi	r24, 0x06	; 6
    5de4:	8c 83       	std	Y+4, r24	; 0x04
    5de6:	1a 83       	std	Y+2, r17	; 0x02
    5de8:	09 83       	std	Y+1, r16	; 0x01
    5dea:	8f ef       	ldi	r24, 0xFF	; 255
    5dec:	9f e7       	ldi	r25, 0x7F	; 127
    5dee:	9e 83       	std	Y+6, r25	; 0x06
    5df0:	8d 83       	std	Y+5, r24	; 0x05
    5df2:	ae 01       	movw	r20, r28
    5df4:	46 5e       	subi	r20, 0xE6	; 230
    5df6:	5f 4f       	sbci	r21, 0xFF	; 255
    5df8:	68 8d       	ldd	r22, Y+24	; 0x18
    5dfa:	79 8d       	ldd	r23, Y+25	; 0x19
    5dfc:	ce 01       	movw	r24, r28
    5dfe:	01 96       	adiw	r24, 0x01	; 1
    5e00:	10 d0       	rcall	.+32     	; 0x5e22 <vfprintf>
    5e02:	ef 81       	ldd	r30, Y+7	; 0x07
    5e04:	f8 85       	ldd	r31, Y+8	; 0x08
    5e06:	e0 0f       	add	r30, r16
    5e08:	f1 1f       	adc	r31, r17
    5e0a:	10 82       	st	Z, r1
    5e0c:	2e 96       	adiw	r28, 0x0e	; 14
    5e0e:	0f b6       	in	r0, 0x3f	; 63
    5e10:	f8 94       	cli
    5e12:	de bf       	out	0x3e, r29	; 62
    5e14:	0f be       	out	0x3f, r0	; 63
    5e16:	cd bf       	out	0x3d, r28	; 61
    5e18:	df 91       	pop	r29
    5e1a:	cf 91       	pop	r28
    5e1c:	1f 91       	pop	r17
    5e1e:	0f 91       	pop	r16
    5e20:	08 95       	ret

00005e22 <vfprintf>:
    5e22:	2f 92       	push	r2
    5e24:	3f 92       	push	r3
    5e26:	4f 92       	push	r4
    5e28:	5f 92       	push	r5
    5e2a:	6f 92       	push	r6
    5e2c:	7f 92       	push	r7
    5e2e:	8f 92       	push	r8
    5e30:	9f 92       	push	r9
    5e32:	af 92       	push	r10
    5e34:	bf 92       	push	r11
    5e36:	cf 92       	push	r12
    5e38:	df 92       	push	r13
    5e3a:	ef 92       	push	r14
    5e3c:	ff 92       	push	r15
    5e3e:	0f 93       	push	r16
    5e40:	1f 93       	push	r17
    5e42:	cf 93       	push	r28
    5e44:	df 93       	push	r29
    5e46:	cd b7       	in	r28, 0x3d	; 61
    5e48:	de b7       	in	r29, 0x3e	; 62
    5e4a:	2b 97       	sbiw	r28, 0x0b	; 11
    5e4c:	0f b6       	in	r0, 0x3f	; 63
    5e4e:	f8 94       	cli
    5e50:	de bf       	out	0x3e, r29	; 62
    5e52:	0f be       	out	0x3f, r0	; 63
    5e54:	cd bf       	out	0x3d, r28	; 61
    5e56:	6c 01       	movw	r12, r24
    5e58:	7b 01       	movw	r14, r22
    5e5a:	8a 01       	movw	r16, r20
    5e5c:	fc 01       	movw	r30, r24
    5e5e:	17 82       	std	Z+7, r1	; 0x07
    5e60:	16 82       	std	Z+6, r1	; 0x06
    5e62:	83 81       	ldd	r24, Z+3	; 0x03
    5e64:	81 ff       	sbrs	r24, 1
    5e66:	bf c1       	rjmp	.+894    	; 0x61e6 <vfprintf+0x3c4>
    5e68:	ce 01       	movw	r24, r28
    5e6a:	01 96       	adiw	r24, 0x01	; 1
    5e6c:	3c 01       	movw	r6, r24
    5e6e:	f6 01       	movw	r30, r12
    5e70:	93 81       	ldd	r25, Z+3	; 0x03
    5e72:	f7 01       	movw	r30, r14
    5e74:	93 fd       	sbrc	r25, 3
    5e76:	85 91       	lpm	r24, Z+
    5e78:	93 ff       	sbrs	r25, 3
    5e7a:	81 91       	ld	r24, Z+
    5e7c:	7f 01       	movw	r14, r30
    5e7e:	88 23       	and	r24, r24
    5e80:	09 f4       	brne	.+2      	; 0x5e84 <vfprintf+0x62>
    5e82:	ad c1       	rjmp	.+858    	; 0x61de <vfprintf+0x3bc>
    5e84:	85 32       	cpi	r24, 0x25	; 37
    5e86:	39 f4       	brne	.+14     	; 0x5e96 <vfprintf+0x74>
    5e88:	93 fd       	sbrc	r25, 3
    5e8a:	85 91       	lpm	r24, Z+
    5e8c:	93 ff       	sbrs	r25, 3
    5e8e:	81 91       	ld	r24, Z+
    5e90:	7f 01       	movw	r14, r30
    5e92:	85 32       	cpi	r24, 0x25	; 37
    5e94:	21 f4       	brne	.+8      	; 0x5e9e <vfprintf+0x7c>
    5e96:	b6 01       	movw	r22, r12
    5e98:	90 e0       	ldi	r25, 0x00	; 0
    5e9a:	d6 d1       	rcall	.+940    	; 0x6248 <fputc>
    5e9c:	e8 cf       	rjmp	.-48     	; 0x5e6e <vfprintf+0x4c>
    5e9e:	91 2c       	mov	r9, r1
    5ea0:	21 2c       	mov	r2, r1
    5ea2:	31 2c       	mov	r3, r1
    5ea4:	ff e1       	ldi	r31, 0x1F	; 31
    5ea6:	f3 15       	cp	r31, r3
    5ea8:	d8 f0       	brcs	.+54     	; 0x5ee0 <vfprintf+0xbe>
    5eaa:	8b 32       	cpi	r24, 0x2B	; 43
    5eac:	79 f0       	breq	.+30     	; 0x5ecc <vfprintf+0xaa>
    5eae:	38 f4       	brcc	.+14     	; 0x5ebe <vfprintf+0x9c>
    5eb0:	80 32       	cpi	r24, 0x20	; 32
    5eb2:	79 f0       	breq	.+30     	; 0x5ed2 <vfprintf+0xb0>
    5eb4:	83 32       	cpi	r24, 0x23	; 35
    5eb6:	a1 f4       	brne	.+40     	; 0x5ee0 <vfprintf+0xbe>
    5eb8:	23 2d       	mov	r18, r3
    5eba:	20 61       	ori	r18, 0x10	; 16
    5ebc:	1d c0       	rjmp	.+58     	; 0x5ef8 <vfprintf+0xd6>
    5ebe:	8d 32       	cpi	r24, 0x2D	; 45
    5ec0:	61 f0       	breq	.+24     	; 0x5eda <vfprintf+0xb8>
    5ec2:	80 33       	cpi	r24, 0x30	; 48
    5ec4:	69 f4       	brne	.+26     	; 0x5ee0 <vfprintf+0xbe>
    5ec6:	23 2d       	mov	r18, r3
    5ec8:	21 60       	ori	r18, 0x01	; 1
    5eca:	16 c0       	rjmp	.+44     	; 0x5ef8 <vfprintf+0xd6>
    5ecc:	83 2d       	mov	r24, r3
    5ece:	82 60       	ori	r24, 0x02	; 2
    5ed0:	38 2e       	mov	r3, r24
    5ed2:	e3 2d       	mov	r30, r3
    5ed4:	e4 60       	ori	r30, 0x04	; 4
    5ed6:	3e 2e       	mov	r3, r30
    5ed8:	2a c0       	rjmp	.+84     	; 0x5f2e <vfprintf+0x10c>
    5eda:	f3 2d       	mov	r31, r3
    5edc:	f8 60       	ori	r31, 0x08	; 8
    5ede:	1d c0       	rjmp	.+58     	; 0x5f1a <vfprintf+0xf8>
    5ee0:	37 fc       	sbrc	r3, 7
    5ee2:	2d c0       	rjmp	.+90     	; 0x5f3e <vfprintf+0x11c>
    5ee4:	20 ed       	ldi	r18, 0xD0	; 208
    5ee6:	28 0f       	add	r18, r24
    5ee8:	2a 30       	cpi	r18, 0x0A	; 10
    5eea:	40 f0       	brcs	.+16     	; 0x5efc <vfprintf+0xda>
    5eec:	8e 32       	cpi	r24, 0x2E	; 46
    5eee:	b9 f4       	brne	.+46     	; 0x5f1e <vfprintf+0xfc>
    5ef0:	36 fc       	sbrc	r3, 6
    5ef2:	75 c1       	rjmp	.+746    	; 0x61de <vfprintf+0x3bc>
    5ef4:	23 2d       	mov	r18, r3
    5ef6:	20 64       	ori	r18, 0x40	; 64
    5ef8:	32 2e       	mov	r3, r18
    5efa:	19 c0       	rjmp	.+50     	; 0x5f2e <vfprintf+0x10c>
    5efc:	36 fe       	sbrs	r3, 6
    5efe:	06 c0       	rjmp	.+12     	; 0x5f0c <vfprintf+0xea>
    5f00:	8a e0       	ldi	r24, 0x0A	; 10
    5f02:	98 9e       	mul	r9, r24
    5f04:	20 0d       	add	r18, r0
    5f06:	11 24       	eor	r1, r1
    5f08:	92 2e       	mov	r9, r18
    5f0a:	11 c0       	rjmp	.+34     	; 0x5f2e <vfprintf+0x10c>
    5f0c:	ea e0       	ldi	r30, 0x0A	; 10
    5f0e:	2e 9e       	mul	r2, r30
    5f10:	20 0d       	add	r18, r0
    5f12:	11 24       	eor	r1, r1
    5f14:	22 2e       	mov	r2, r18
    5f16:	f3 2d       	mov	r31, r3
    5f18:	f0 62       	ori	r31, 0x20	; 32
    5f1a:	3f 2e       	mov	r3, r31
    5f1c:	08 c0       	rjmp	.+16     	; 0x5f2e <vfprintf+0x10c>
    5f1e:	8c 36       	cpi	r24, 0x6C	; 108
    5f20:	21 f4       	brne	.+8      	; 0x5f2a <vfprintf+0x108>
    5f22:	83 2d       	mov	r24, r3
    5f24:	80 68       	ori	r24, 0x80	; 128
    5f26:	38 2e       	mov	r3, r24
    5f28:	02 c0       	rjmp	.+4      	; 0x5f2e <vfprintf+0x10c>
    5f2a:	88 36       	cpi	r24, 0x68	; 104
    5f2c:	41 f4       	brne	.+16     	; 0x5f3e <vfprintf+0x11c>
    5f2e:	f7 01       	movw	r30, r14
    5f30:	93 fd       	sbrc	r25, 3
    5f32:	85 91       	lpm	r24, Z+
    5f34:	93 ff       	sbrs	r25, 3
    5f36:	81 91       	ld	r24, Z+
    5f38:	7f 01       	movw	r14, r30
    5f3a:	81 11       	cpse	r24, r1
    5f3c:	b3 cf       	rjmp	.-154    	; 0x5ea4 <vfprintf+0x82>
    5f3e:	98 2f       	mov	r25, r24
    5f40:	9f 7d       	andi	r25, 0xDF	; 223
    5f42:	95 54       	subi	r25, 0x45	; 69
    5f44:	93 30       	cpi	r25, 0x03	; 3
    5f46:	28 f4       	brcc	.+10     	; 0x5f52 <vfprintf+0x130>
    5f48:	0c 5f       	subi	r16, 0xFC	; 252
    5f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    5f4c:	9f e3       	ldi	r25, 0x3F	; 63
    5f4e:	99 83       	std	Y+1, r25	; 0x01
    5f50:	0d c0       	rjmp	.+26     	; 0x5f6c <vfprintf+0x14a>
    5f52:	83 36       	cpi	r24, 0x63	; 99
    5f54:	31 f0       	breq	.+12     	; 0x5f62 <vfprintf+0x140>
    5f56:	83 37       	cpi	r24, 0x73	; 115
    5f58:	71 f0       	breq	.+28     	; 0x5f76 <vfprintf+0x154>
    5f5a:	83 35       	cpi	r24, 0x53	; 83
    5f5c:	09 f0       	breq	.+2      	; 0x5f60 <vfprintf+0x13e>
    5f5e:	55 c0       	rjmp	.+170    	; 0x600a <vfprintf+0x1e8>
    5f60:	20 c0       	rjmp	.+64     	; 0x5fa2 <vfprintf+0x180>
    5f62:	f8 01       	movw	r30, r16
    5f64:	80 81       	ld	r24, Z
    5f66:	89 83       	std	Y+1, r24	; 0x01
    5f68:	0e 5f       	subi	r16, 0xFE	; 254
    5f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    5f6c:	88 24       	eor	r8, r8
    5f6e:	83 94       	inc	r8
    5f70:	91 2c       	mov	r9, r1
    5f72:	53 01       	movw	r10, r6
    5f74:	12 c0       	rjmp	.+36     	; 0x5f9a <vfprintf+0x178>
    5f76:	28 01       	movw	r4, r16
    5f78:	f2 e0       	ldi	r31, 0x02	; 2
    5f7a:	4f 0e       	add	r4, r31
    5f7c:	51 1c       	adc	r5, r1
    5f7e:	f8 01       	movw	r30, r16
    5f80:	a0 80       	ld	r10, Z
    5f82:	b1 80       	ldd	r11, Z+1	; 0x01
    5f84:	36 fe       	sbrs	r3, 6
    5f86:	03 c0       	rjmp	.+6      	; 0x5f8e <vfprintf+0x16c>
    5f88:	69 2d       	mov	r22, r9
    5f8a:	70 e0       	ldi	r23, 0x00	; 0
    5f8c:	02 c0       	rjmp	.+4      	; 0x5f92 <vfprintf+0x170>
    5f8e:	6f ef       	ldi	r22, 0xFF	; 255
    5f90:	7f ef       	ldi	r23, 0xFF	; 255
    5f92:	c5 01       	movw	r24, r10
    5f94:	4e d1       	rcall	.+668    	; 0x6232 <strnlen>
    5f96:	4c 01       	movw	r8, r24
    5f98:	82 01       	movw	r16, r4
    5f9a:	f3 2d       	mov	r31, r3
    5f9c:	ff 77       	andi	r31, 0x7F	; 127
    5f9e:	3f 2e       	mov	r3, r31
    5fa0:	15 c0       	rjmp	.+42     	; 0x5fcc <vfprintf+0x1aa>
    5fa2:	28 01       	movw	r4, r16
    5fa4:	22 e0       	ldi	r18, 0x02	; 2
    5fa6:	42 0e       	add	r4, r18
    5fa8:	51 1c       	adc	r5, r1
    5faa:	f8 01       	movw	r30, r16
    5fac:	a0 80       	ld	r10, Z
    5fae:	b1 80       	ldd	r11, Z+1	; 0x01
    5fb0:	36 fe       	sbrs	r3, 6
    5fb2:	03 c0       	rjmp	.+6      	; 0x5fba <vfprintf+0x198>
    5fb4:	69 2d       	mov	r22, r9
    5fb6:	70 e0       	ldi	r23, 0x00	; 0
    5fb8:	02 c0       	rjmp	.+4      	; 0x5fbe <vfprintf+0x19c>
    5fba:	6f ef       	ldi	r22, 0xFF	; 255
    5fbc:	7f ef       	ldi	r23, 0xFF	; 255
    5fbe:	c5 01       	movw	r24, r10
    5fc0:	2d d1       	rcall	.+602    	; 0x621c <strnlen_P>
    5fc2:	4c 01       	movw	r8, r24
    5fc4:	f3 2d       	mov	r31, r3
    5fc6:	f0 68       	ori	r31, 0x80	; 128
    5fc8:	3f 2e       	mov	r3, r31
    5fca:	82 01       	movw	r16, r4
    5fcc:	33 fc       	sbrc	r3, 3
    5fce:	19 c0       	rjmp	.+50     	; 0x6002 <vfprintf+0x1e0>
    5fd0:	82 2d       	mov	r24, r2
    5fd2:	90 e0       	ldi	r25, 0x00	; 0
    5fd4:	88 16       	cp	r8, r24
    5fd6:	99 06       	cpc	r9, r25
    5fd8:	a0 f4       	brcc	.+40     	; 0x6002 <vfprintf+0x1e0>
    5fda:	b6 01       	movw	r22, r12
    5fdc:	80 e2       	ldi	r24, 0x20	; 32
    5fde:	90 e0       	ldi	r25, 0x00	; 0
    5fe0:	33 d1       	rcall	.+614    	; 0x6248 <fputc>
    5fe2:	2a 94       	dec	r2
    5fe4:	f5 cf       	rjmp	.-22     	; 0x5fd0 <vfprintf+0x1ae>
    5fe6:	f5 01       	movw	r30, r10
    5fe8:	37 fc       	sbrc	r3, 7
    5fea:	85 91       	lpm	r24, Z+
    5fec:	37 fe       	sbrs	r3, 7
    5fee:	81 91       	ld	r24, Z+
    5ff0:	5f 01       	movw	r10, r30
    5ff2:	b6 01       	movw	r22, r12
    5ff4:	90 e0       	ldi	r25, 0x00	; 0
    5ff6:	28 d1       	rcall	.+592    	; 0x6248 <fputc>
    5ff8:	21 10       	cpse	r2, r1
    5ffa:	2a 94       	dec	r2
    5ffc:	21 e0       	ldi	r18, 0x01	; 1
    5ffe:	82 1a       	sub	r8, r18
    6000:	91 08       	sbc	r9, r1
    6002:	81 14       	cp	r8, r1
    6004:	91 04       	cpc	r9, r1
    6006:	79 f7       	brne	.-34     	; 0x5fe6 <vfprintf+0x1c4>
    6008:	e1 c0       	rjmp	.+450    	; 0x61cc <vfprintf+0x3aa>
    600a:	84 36       	cpi	r24, 0x64	; 100
    600c:	11 f0       	breq	.+4      	; 0x6012 <vfprintf+0x1f0>
    600e:	89 36       	cpi	r24, 0x69	; 105
    6010:	39 f5       	brne	.+78     	; 0x6060 <vfprintf+0x23e>
    6012:	f8 01       	movw	r30, r16
    6014:	37 fe       	sbrs	r3, 7
    6016:	07 c0       	rjmp	.+14     	; 0x6026 <vfprintf+0x204>
    6018:	60 81       	ld	r22, Z
    601a:	71 81       	ldd	r23, Z+1	; 0x01
    601c:	82 81       	ldd	r24, Z+2	; 0x02
    601e:	93 81       	ldd	r25, Z+3	; 0x03
    6020:	0c 5f       	subi	r16, 0xFC	; 252
    6022:	1f 4f       	sbci	r17, 0xFF	; 255
    6024:	08 c0       	rjmp	.+16     	; 0x6036 <vfprintf+0x214>
    6026:	60 81       	ld	r22, Z
    6028:	71 81       	ldd	r23, Z+1	; 0x01
    602a:	07 2e       	mov	r0, r23
    602c:	00 0c       	add	r0, r0
    602e:	88 0b       	sbc	r24, r24
    6030:	99 0b       	sbc	r25, r25
    6032:	0e 5f       	subi	r16, 0xFE	; 254
    6034:	1f 4f       	sbci	r17, 0xFF	; 255
    6036:	f3 2d       	mov	r31, r3
    6038:	ff 76       	andi	r31, 0x6F	; 111
    603a:	3f 2e       	mov	r3, r31
    603c:	97 ff       	sbrs	r25, 7
    603e:	09 c0       	rjmp	.+18     	; 0x6052 <vfprintf+0x230>
    6040:	90 95       	com	r25
    6042:	80 95       	com	r24
    6044:	70 95       	com	r23
    6046:	61 95       	neg	r22
    6048:	7f 4f       	sbci	r23, 0xFF	; 255
    604a:	8f 4f       	sbci	r24, 0xFF	; 255
    604c:	9f 4f       	sbci	r25, 0xFF	; 255
    604e:	f0 68       	ori	r31, 0x80	; 128
    6050:	3f 2e       	mov	r3, r31
    6052:	2a e0       	ldi	r18, 0x0A	; 10
    6054:	30 e0       	ldi	r19, 0x00	; 0
    6056:	a3 01       	movw	r20, r6
    6058:	33 d1       	rcall	.+614    	; 0x62c0 <__ultoa_invert>
    605a:	88 2e       	mov	r8, r24
    605c:	86 18       	sub	r8, r6
    605e:	44 c0       	rjmp	.+136    	; 0x60e8 <vfprintf+0x2c6>
    6060:	85 37       	cpi	r24, 0x75	; 117
    6062:	31 f4       	brne	.+12     	; 0x6070 <vfprintf+0x24e>
    6064:	23 2d       	mov	r18, r3
    6066:	2f 7e       	andi	r18, 0xEF	; 239
    6068:	b2 2e       	mov	r11, r18
    606a:	2a e0       	ldi	r18, 0x0A	; 10
    606c:	30 e0       	ldi	r19, 0x00	; 0
    606e:	25 c0       	rjmp	.+74     	; 0x60ba <vfprintf+0x298>
    6070:	93 2d       	mov	r25, r3
    6072:	99 7f       	andi	r25, 0xF9	; 249
    6074:	b9 2e       	mov	r11, r25
    6076:	8f 36       	cpi	r24, 0x6F	; 111
    6078:	c1 f0       	breq	.+48     	; 0x60aa <vfprintf+0x288>
    607a:	18 f4       	brcc	.+6      	; 0x6082 <vfprintf+0x260>
    607c:	88 35       	cpi	r24, 0x58	; 88
    607e:	79 f0       	breq	.+30     	; 0x609e <vfprintf+0x27c>
    6080:	ae c0       	rjmp	.+348    	; 0x61de <vfprintf+0x3bc>
    6082:	80 37       	cpi	r24, 0x70	; 112
    6084:	19 f0       	breq	.+6      	; 0x608c <vfprintf+0x26a>
    6086:	88 37       	cpi	r24, 0x78	; 120
    6088:	21 f0       	breq	.+8      	; 0x6092 <vfprintf+0x270>
    608a:	a9 c0       	rjmp	.+338    	; 0x61de <vfprintf+0x3bc>
    608c:	e9 2f       	mov	r30, r25
    608e:	e0 61       	ori	r30, 0x10	; 16
    6090:	be 2e       	mov	r11, r30
    6092:	b4 fe       	sbrs	r11, 4
    6094:	0d c0       	rjmp	.+26     	; 0x60b0 <vfprintf+0x28e>
    6096:	fb 2d       	mov	r31, r11
    6098:	f4 60       	ori	r31, 0x04	; 4
    609a:	bf 2e       	mov	r11, r31
    609c:	09 c0       	rjmp	.+18     	; 0x60b0 <vfprintf+0x28e>
    609e:	34 fe       	sbrs	r3, 4
    60a0:	0a c0       	rjmp	.+20     	; 0x60b6 <vfprintf+0x294>
    60a2:	29 2f       	mov	r18, r25
    60a4:	26 60       	ori	r18, 0x06	; 6
    60a6:	b2 2e       	mov	r11, r18
    60a8:	06 c0       	rjmp	.+12     	; 0x60b6 <vfprintf+0x294>
    60aa:	28 e0       	ldi	r18, 0x08	; 8
    60ac:	30 e0       	ldi	r19, 0x00	; 0
    60ae:	05 c0       	rjmp	.+10     	; 0x60ba <vfprintf+0x298>
    60b0:	20 e1       	ldi	r18, 0x10	; 16
    60b2:	30 e0       	ldi	r19, 0x00	; 0
    60b4:	02 c0       	rjmp	.+4      	; 0x60ba <vfprintf+0x298>
    60b6:	20 e1       	ldi	r18, 0x10	; 16
    60b8:	32 e0       	ldi	r19, 0x02	; 2
    60ba:	f8 01       	movw	r30, r16
    60bc:	b7 fe       	sbrs	r11, 7
    60be:	07 c0       	rjmp	.+14     	; 0x60ce <vfprintf+0x2ac>
    60c0:	60 81       	ld	r22, Z
    60c2:	71 81       	ldd	r23, Z+1	; 0x01
    60c4:	82 81       	ldd	r24, Z+2	; 0x02
    60c6:	93 81       	ldd	r25, Z+3	; 0x03
    60c8:	0c 5f       	subi	r16, 0xFC	; 252
    60ca:	1f 4f       	sbci	r17, 0xFF	; 255
    60cc:	06 c0       	rjmp	.+12     	; 0x60da <vfprintf+0x2b8>
    60ce:	60 81       	ld	r22, Z
    60d0:	71 81       	ldd	r23, Z+1	; 0x01
    60d2:	80 e0       	ldi	r24, 0x00	; 0
    60d4:	90 e0       	ldi	r25, 0x00	; 0
    60d6:	0e 5f       	subi	r16, 0xFE	; 254
    60d8:	1f 4f       	sbci	r17, 0xFF	; 255
    60da:	a3 01       	movw	r20, r6
    60dc:	f1 d0       	rcall	.+482    	; 0x62c0 <__ultoa_invert>
    60de:	88 2e       	mov	r8, r24
    60e0:	86 18       	sub	r8, r6
    60e2:	fb 2d       	mov	r31, r11
    60e4:	ff 77       	andi	r31, 0x7F	; 127
    60e6:	3f 2e       	mov	r3, r31
    60e8:	36 fe       	sbrs	r3, 6
    60ea:	0d c0       	rjmp	.+26     	; 0x6106 <vfprintf+0x2e4>
    60ec:	23 2d       	mov	r18, r3
    60ee:	2e 7f       	andi	r18, 0xFE	; 254
    60f0:	a2 2e       	mov	r10, r18
    60f2:	89 14       	cp	r8, r9
    60f4:	58 f4       	brcc	.+22     	; 0x610c <vfprintf+0x2ea>
    60f6:	34 fe       	sbrs	r3, 4
    60f8:	0b c0       	rjmp	.+22     	; 0x6110 <vfprintf+0x2ee>
    60fa:	32 fc       	sbrc	r3, 2
    60fc:	09 c0       	rjmp	.+18     	; 0x6110 <vfprintf+0x2ee>
    60fe:	83 2d       	mov	r24, r3
    6100:	8e 7e       	andi	r24, 0xEE	; 238
    6102:	a8 2e       	mov	r10, r24
    6104:	05 c0       	rjmp	.+10     	; 0x6110 <vfprintf+0x2ee>
    6106:	b8 2c       	mov	r11, r8
    6108:	a3 2c       	mov	r10, r3
    610a:	03 c0       	rjmp	.+6      	; 0x6112 <vfprintf+0x2f0>
    610c:	b8 2c       	mov	r11, r8
    610e:	01 c0       	rjmp	.+2      	; 0x6112 <vfprintf+0x2f0>
    6110:	b9 2c       	mov	r11, r9
    6112:	a4 fe       	sbrs	r10, 4
    6114:	0f c0       	rjmp	.+30     	; 0x6134 <vfprintf+0x312>
    6116:	fe 01       	movw	r30, r28
    6118:	e8 0d       	add	r30, r8
    611a:	f1 1d       	adc	r31, r1
    611c:	80 81       	ld	r24, Z
    611e:	80 33       	cpi	r24, 0x30	; 48
    6120:	21 f4       	brne	.+8      	; 0x612a <vfprintf+0x308>
    6122:	9a 2d       	mov	r25, r10
    6124:	99 7e       	andi	r25, 0xE9	; 233
    6126:	a9 2e       	mov	r10, r25
    6128:	09 c0       	rjmp	.+18     	; 0x613c <vfprintf+0x31a>
    612a:	a2 fe       	sbrs	r10, 2
    612c:	06 c0       	rjmp	.+12     	; 0x613a <vfprintf+0x318>
    612e:	b3 94       	inc	r11
    6130:	b3 94       	inc	r11
    6132:	04 c0       	rjmp	.+8      	; 0x613c <vfprintf+0x31a>
    6134:	8a 2d       	mov	r24, r10
    6136:	86 78       	andi	r24, 0x86	; 134
    6138:	09 f0       	breq	.+2      	; 0x613c <vfprintf+0x31a>
    613a:	b3 94       	inc	r11
    613c:	a3 fc       	sbrc	r10, 3
    613e:	10 c0       	rjmp	.+32     	; 0x6160 <vfprintf+0x33e>
    6140:	a0 fe       	sbrs	r10, 0
    6142:	06 c0       	rjmp	.+12     	; 0x6150 <vfprintf+0x32e>
    6144:	b2 14       	cp	r11, r2
    6146:	80 f4       	brcc	.+32     	; 0x6168 <vfprintf+0x346>
    6148:	28 0c       	add	r2, r8
    614a:	92 2c       	mov	r9, r2
    614c:	9b 18       	sub	r9, r11
    614e:	0d c0       	rjmp	.+26     	; 0x616a <vfprintf+0x348>
    6150:	b2 14       	cp	r11, r2
    6152:	58 f4       	brcc	.+22     	; 0x616a <vfprintf+0x348>
    6154:	b6 01       	movw	r22, r12
    6156:	80 e2       	ldi	r24, 0x20	; 32
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	76 d0       	rcall	.+236    	; 0x6248 <fputc>
    615c:	b3 94       	inc	r11
    615e:	f8 cf       	rjmp	.-16     	; 0x6150 <vfprintf+0x32e>
    6160:	b2 14       	cp	r11, r2
    6162:	18 f4       	brcc	.+6      	; 0x616a <vfprintf+0x348>
    6164:	2b 18       	sub	r2, r11
    6166:	02 c0       	rjmp	.+4      	; 0x616c <vfprintf+0x34a>
    6168:	98 2c       	mov	r9, r8
    616a:	21 2c       	mov	r2, r1
    616c:	a4 fe       	sbrs	r10, 4
    616e:	0f c0       	rjmp	.+30     	; 0x618e <vfprintf+0x36c>
    6170:	b6 01       	movw	r22, r12
    6172:	80 e3       	ldi	r24, 0x30	; 48
    6174:	90 e0       	ldi	r25, 0x00	; 0
    6176:	68 d0       	rcall	.+208    	; 0x6248 <fputc>
    6178:	a2 fe       	sbrs	r10, 2
    617a:	16 c0       	rjmp	.+44     	; 0x61a8 <vfprintf+0x386>
    617c:	a1 fc       	sbrc	r10, 1
    617e:	03 c0       	rjmp	.+6      	; 0x6186 <vfprintf+0x364>
    6180:	88 e7       	ldi	r24, 0x78	; 120
    6182:	90 e0       	ldi	r25, 0x00	; 0
    6184:	02 c0       	rjmp	.+4      	; 0x618a <vfprintf+0x368>
    6186:	88 e5       	ldi	r24, 0x58	; 88
    6188:	90 e0       	ldi	r25, 0x00	; 0
    618a:	b6 01       	movw	r22, r12
    618c:	0c c0       	rjmp	.+24     	; 0x61a6 <vfprintf+0x384>
    618e:	8a 2d       	mov	r24, r10
    6190:	86 78       	andi	r24, 0x86	; 134
    6192:	51 f0       	breq	.+20     	; 0x61a8 <vfprintf+0x386>
    6194:	a1 fe       	sbrs	r10, 1
    6196:	02 c0       	rjmp	.+4      	; 0x619c <vfprintf+0x37a>
    6198:	8b e2       	ldi	r24, 0x2B	; 43
    619a:	01 c0       	rjmp	.+2      	; 0x619e <vfprintf+0x37c>
    619c:	80 e2       	ldi	r24, 0x20	; 32
    619e:	a7 fc       	sbrc	r10, 7
    61a0:	8d e2       	ldi	r24, 0x2D	; 45
    61a2:	b6 01       	movw	r22, r12
    61a4:	90 e0       	ldi	r25, 0x00	; 0
    61a6:	50 d0       	rcall	.+160    	; 0x6248 <fputc>
    61a8:	89 14       	cp	r8, r9
    61aa:	30 f4       	brcc	.+12     	; 0x61b8 <vfprintf+0x396>
    61ac:	b6 01       	movw	r22, r12
    61ae:	80 e3       	ldi	r24, 0x30	; 48
    61b0:	90 e0       	ldi	r25, 0x00	; 0
    61b2:	4a d0       	rcall	.+148    	; 0x6248 <fputc>
    61b4:	9a 94       	dec	r9
    61b6:	f8 cf       	rjmp	.-16     	; 0x61a8 <vfprintf+0x386>
    61b8:	8a 94       	dec	r8
    61ba:	f3 01       	movw	r30, r6
    61bc:	e8 0d       	add	r30, r8
    61be:	f1 1d       	adc	r31, r1
    61c0:	80 81       	ld	r24, Z
    61c2:	b6 01       	movw	r22, r12
    61c4:	90 e0       	ldi	r25, 0x00	; 0
    61c6:	40 d0       	rcall	.+128    	; 0x6248 <fputc>
    61c8:	81 10       	cpse	r8, r1
    61ca:	f6 cf       	rjmp	.-20     	; 0x61b8 <vfprintf+0x396>
    61cc:	22 20       	and	r2, r2
    61ce:	09 f4       	brne	.+2      	; 0x61d2 <vfprintf+0x3b0>
    61d0:	4e ce       	rjmp	.-868    	; 0x5e6e <vfprintf+0x4c>
    61d2:	b6 01       	movw	r22, r12
    61d4:	80 e2       	ldi	r24, 0x20	; 32
    61d6:	90 e0       	ldi	r25, 0x00	; 0
    61d8:	37 d0       	rcall	.+110    	; 0x6248 <fputc>
    61da:	2a 94       	dec	r2
    61dc:	f7 cf       	rjmp	.-18     	; 0x61cc <vfprintf+0x3aa>
    61de:	f6 01       	movw	r30, r12
    61e0:	86 81       	ldd	r24, Z+6	; 0x06
    61e2:	97 81       	ldd	r25, Z+7	; 0x07
    61e4:	02 c0       	rjmp	.+4      	; 0x61ea <vfprintf+0x3c8>
    61e6:	8f ef       	ldi	r24, 0xFF	; 255
    61e8:	9f ef       	ldi	r25, 0xFF	; 255
    61ea:	2b 96       	adiw	r28, 0x0b	; 11
    61ec:	0f b6       	in	r0, 0x3f	; 63
    61ee:	f8 94       	cli
    61f0:	de bf       	out	0x3e, r29	; 62
    61f2:	0f be       	out	0x3f, r0	; 63
    61f4:	cd bf       	out	0x3d, r28	; 61
    61f6:	df 91       	pop	r29
    61f8:	cf 91       	pop	r28
    61fa:	1f 91       	pop	r17
    61fc:	0f 91       	pop	r16
    61fe:	ff 90       	pop	r15
    6200:	ef 90       	pop	r14
    6202:	df 90       	pop	r13
    6204:	cf 90       	pop	r12
    6206:	bf 90       	pop	r11
    6208:	af 90       	pop	r10
    620a:	9f 90       	pop	r9
    620c:	8f 90       	pop	r8
    620e:	7f 90       	pop	r7
    6210:	6f 90       	pop	r6
    6212:	5f 90       	pop	r5
    6214:	4f 90       	pop	r4
    6216:	3f 90       	pop	r3
    6218:	2f 90       	pop	r2
    621a:	08 95       	ret

0000621c <strnlen_P>:
    621c:	fc 01       	movw	r30, r24
    621e:	05 90       	lpm	r0, Z+
    6220:	61 50       	subi	r22, 0x01	; 1
    6222:	70 40       	sbci	r23, 0x00	; 0
    6224:	01 10       	cpse	r0, r1
    6226:	d8 f7       	brcc	.-10     	; 0x621e <strnlen_P+0x2>
    6228:	80 95       	com	r24
    622a:	90 95       	com	r25
    622c:	8e 0f       	add	r24, r30
    622e:	9f 1f       	adc	r25, r31
    6230:	08 95       	ret

00006232 <strnlen>:
    6232:	fc 01       	movw	r30, r24
    6234:	61 50       	subi	r22, 0x01	; 1
    6236:	70 40       	sbci	r23, 0x00	; 0
    6238:	01 90       	ld	r0, Z+
    623a:	01 10       	cpse	r0, r1
    623c:	d8 f7       	brcc	.-10     	; 0x6234 <strnlen+0x2>
    623e:	80 95       	com	r24
    6240:	90 95       	com	r25
    6242:	8e 0f       	add	r24, r30
    6244:	9f 1f       	adc	r25, r31
    6246:	08 95       	ret

00006248 <fputc>:
    6248:	0f 93       	push	r16
    624a:	1f 93       	push	r17
    624c:	cf 93       	push	r28
    624e:	df 93       	push	r29
    6250:	fb 01       	movw	r30, r22
    6252:	23 81       	ldd	r18, Z+3	; 0x03
    6254:	21 fd       	sbrc	r18, 1
    6256:	03 c0       	rjmp	.+6      	; 0x625e <fputc+0x16>
    6258:	8f ef       	ldi	r24, 0xFF	; 255
    625a:	9f ef       	ldi	r25, 0xFF	; 255
    625c:	2c c0       	rjmp	.+88     	; 0x62b6 <fputc+0x6e>
    625e:	22 ff       	sbrs	r18, 2
    6260:	16 c0       	rjmp	.+44     	; 0x628e <fputc+0x46>
    6262:	46 81       	ldd	r20, Z+6	; 0x06
    6264:	57 81       	ldd	r21, Z+7	; 0x07
    6266:	24 81       	ldd	r18, Z+4	; 0x04
    6268:	35 81       	ldd	r19, Z+5	; 0x05
    626a:	42 17       	cp	r20, r18
    626c:	53 07       	cpc	r21, r19
    626e:	44 f4       	brge	.+16     	; 0x6280 <fputc+0x38>
    6270:	a0 81       	ld	r26, Z
    6272:	b1 81       	ldd	r27, Z+1	; 0x01
    6274:	9d 01       	movw	r18, r26
    6276:	2f 5f       	subi	r18, 0xFF	; 255
    6278:	3f 4f       	sbci	r19, 0xFF	; 255
    627a:	31 83       	std	Z+1, r19	; 0x01
    627c:	20 83       	st	Z, r18
    627e:	8c 93       	st	X, r24
    6280:	26 81       	ldd	r18, Z+6	; 0x06
    6282:	37 81       	ldd	r19, Z+7	; 0x07
    6284:	2f 5f       	subi	r18, 0xFF	; 255
    6286:	3f 4f       	sbci	r19, 0xFF	; 255
    6288:	37 83       	std	Z+7, r19	; 0x07
    628a:	26 83       	std	Z+6, r18	; 0x06
    628c:	14 c0       	rjmp	.+40     	; 0x62b6 <fputc+0x6e>
    628e:	8b 01       	movw	r16, r22
    6290:	ec 01       	movw	r28, r24
    6292:	fb 01       	movw	r30, r22
    6294:	00 84       	ldd	r0, Z+8	; 0x08
    6296:	f1 85       	ldd	r31, Z+9	; 0x09
    6298:	e0 2d       	mov	r30, r0
    629a:	19 95       	eicall
    629c:	89 2b       	or	r24, r25
    629e:	e1 f6       	brne	.-72     	; 0x6258 <fputc+0x10>
    62a0:	d8 01       	movw	r26, r16
    62a2:	16 96       	adiw	r26, 0x06	; 6
    62a4:	8d 91       	ld	r24, X+
    62a6:	9c 91       	ld	r25, X
    62a8:	17 97       	sbiw	r26, 0x07	; 7
    62aa:	01 96       	adiw	r24, 0x01	; 1
    62ac:	17 96       	adiw	r26, 0x07	; 7
    62ae:	9c 93       	st	X, r25
    62b0:	8e 93       	st	-X, r24
    62b2:	16 97       	sbiw	r26, 0x06	; 6
    62b4:	ce 01       	movw	r24, r28
    62b6:	df 91       	pop	r29
    62b8:	cf 91       	pop	r28
    62ba:	1f 91       	pop	r17
    62bc:	0f 91       	pop	r16
    62be:	08 95       	ret

000062c0 <__ultoa_invert>:
    62c0:	fa 01       	movw	r30, r20
    62c2:	aa 27       	eor	r26, r26
    62c4:	28 30       	cpi	r18, 0x08	; 8
    62c6:	51 f1       	breq	.+84     	; 0x631c <__ultoa_invert+0x5c>
    62c8:	20 31       	cpi	r18, 0x10	; 16
    62ca:	81 f1       	breq	.+96     	; 0x632c <__ultoa_invert+0x6c>
    62cc:	e8 94       	clt
    62ce:	6f 93       	push	r22
    62d0:	6e 7f       	andi	r22, 0xFE	; 254
    62d2:	6e 5f       	subi	r22, 0xFE	; 254
    62d4:	7f 4f       	sbci	r23, 0xFF	; 255
    62d6:	8f 4f       	sbci	r24, 0xFF	; 255
    62d8:	9f 4f       	sbci	r25, 0xFF	; 255
    62da:	af 4f       	sbci	r26, 0xFF	; 255
    62dc:	b1 e0       	ldi	r27, 0x01	; 1
    62de:	3e d0       	rcall	.+124    	; 0x635c <__ultoa_invert+0x9c>
    62e0:	b4 e0       	ldi	r27, 0x04	; 4
    62e2:	3c d0       	rcall	.+120    	; 0x635c <__ultoa_invert+0x9c>
    62e4:	67 0f       	add	r22, r23
    62e6:	78 1f       	adc	r23, r24
    62e8:	89 1f       	adc	r24, r25
    62ea:	9a 1f       	adc	r25, r26
    62ec:	a1 1d       	adc	r26, r1
    62ee:	68 0f       	add	r22, r24
    62f0:	79 1f       	adc	r23, r25
    62f2:	8a 1f       	adc	r24, r26
    62f4:	91 1d       	adc	r25, r1
    62f6:	a1 1d       	adc	r26, r1
    62f8:	6a 0f       	add	r22, r26
    62fa:	71 1d       	adc	r23, r1
    62fc:	81 1d       	adc	r24, r1
    62fe:	91 1d       	adc	r25, r1
    6300:	a1 1d       	adc	r26, r1
    6302:	20 d0       	rcall	.+64     	; 0x6344 <__ultoa_invert+0x84>
    6304:	09 f4       	brne	.+2      	; 0x6308 <__ultoa_invert+0x48>
    6306:	68 94       	set
    6308:	3f 91       	pop	r19
    630a:	2a e0       	ldi	r18, 0x0A	; 10
    630c:	26 9f       	mul	r18, r22
    630e:	11 24       	eor	r1, r1
    6310:	30 19       	sub	r19, r0
    6312:	30 5d       	subi	r19, 0xD0	; 208
    6314:	31 93       	st	Z+, r19
    6316:	de f6       	brtc	.-74     	; 0x62ce <__ultoa_invert+0xe>
    6318:	cf 01       	movw	r24, r30
    631a:	08 95       	ret
    631c:	46 2f       	mov	r20, r22
    631e:	47 70       	andi	r20, 0x07	; 7
    6320:	40 5d       	subi	r20, 0xD0	; 208
    6322:	41 93       	st	Z+, r20
    6324:	b3 e0       	ldi	r27, 0x03	; 3
    6326:	0f d0       	rcall	.+30     	; 0x6346 <__ultoa_invert+0x86>
    6328:	c9 f7       	brne	.-14     	; 0x631c <__ultoa_invert+0x5c>
    632a:	f6 cf       	rjmp	.-20     	; 0x6318 <__ultoa_invert+0x58>
    632c:	46 2f       	mov	r20, r22
    632e:	4f 70       	andi	r20, 0x0F	; 15
    6330:	40 5d       	subi	r20, 0xD0	; 208
    6332:	4a 33       	cpi	r20, 0x3A	; 58
    6334:	18 f0       	brcs	.+6      	; 0x633c <__ultoa_invert+0x7c>
    6336:	49 5d       	subi	r20, 0xD9	; 217
    6338:	31 fd       	sbrc	r19, 1
    633a:	40 52       	subi	r20, 0x20	; 32
    633c:	41 93       	st	Z+, r20
    633e:	02 d0       	rcall	.+4      	; 0x6344 <__ultoa_invert+0x84>
    6340:	a9 f7       	brne	.-22     	; 0x632c <__ultoa_invert+0x6c>
    6342:	ea cf       	rjmp	.-44     	; 0x6318 <__ultoa_invert+0x58>
    6344:	b4 e0       	ldi	r27, 0x04	; 4
    6346:	a6 95       	lsr	r26
    6348:	97 95       	ror	r25
    634a:	87 95       	ror	r24
    634c:	77 95       	ror	r23
    634e:	67 95       	ror	r22
    6350:	ba 95       	dec	r27
    6352:	c9 f7       	brne	.-14     	; 0x6346 <__ultoa_invert+0x86>
    6354:	00 97       	sbiw	r24, 0x00	; 0
    6356:	61 05       	cpc	r22, r1
    6358:	71 05       	cpc	r23, r1
    635a:	08 95       	ret
    635c:	9b 01       	movw	r18, r22
    635e:	ac 01       	movw	r20, r24
    6360:	0a 2e       	mov	r0, r26
    6362:	06 94       	lsr	r0
    6364:	57 95       	ror	r21
    6366:	47 95       	ror	r20
    6368:	37 95       	ror	r19
    636a:	27 95       	ror	r18
    636c:	ba 95       	dec	r27
    636e:	c9 f7       	brne	.-14     	; 0x6362 <__ultoa_invert+0xa2>
    6370:	62 0f       	add	r22, r18
    6372:	73 1f       	adc	r23, r19
    6374:	84 1f       	adc	r24, r20
    6376:	95 1f       	adc	r25, r21
    6378:	a0 1d       	adc	r26, r0
    637a:	08 95       	ret

0000637c <_exit>:
    637c:	f8 94       	cli

0000637e <__stop_program>:
    637e:	ff cf       	rjmp	.-2      	; 0x637e <__stop_program>
