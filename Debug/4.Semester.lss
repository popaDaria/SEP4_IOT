
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000396  00800200  00005dc4  00005e58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005dc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e30  00800596  00800596  000061ee  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000061ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000624c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000af0  00000000  00000000  0000628c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d97a  00000000  00000000  00006d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036dd  00000000  00000000  000146f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006bd0  00000000  00000000  00017dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000025a8  00000000  00000000  0001e9a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004608  00000000  00000000  00020f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ba04  00000000  00000000  00025554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a18  00000000  00000000  00030f58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	0a c4       	rjmp	.+2068   	; 0x846 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__vector_25>
      68:	0c 94 8b 21 	jmp	0x4316	; 0x4316 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 cf 21 	jmp	0x439e	; 0x439e <__vector_36>
      94:	0c 94 21 22 	jmp	0x4442	; 0x4442 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 82 27 	jmp	0x4f04	; 0x4f04 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <__vector_51>
      d0:	0c 94 b7 22 	jmp	0x456e	; 0x456e <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 fb 22 	jmp	0x45f6	; 0x45f6 <__vector_54>
      dc:	0c 94 4d 23 	jmp	0x469a	; 0x469a <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	86 18       	sub	r8, r6
      e6:	86 18       	sub	r8, r6
      e8:	86 18       	sub	r8, r6
      ea:	bd 18       	sub	r11, r13
      ec:	c5 18       	sub	r12, r5
      ee:	da 18       	sub	r13, r10
      f0:	86 18       	sub	r8, r6
      f2:	86 18       	sub	r8, r6
      f4:	bd 18       	sub	r11, r13
      f6:	c5 18       	sub	r12, r5
      f8:	a4 27       	eor	r26, r20
      fa:	14 28       	or	r1, r4
      fc:	14 28       	or	r1, r4
      fe:	14 28       	or	r1, r4
     100:	14 28       	or	r1, r4
     102:	14 28       	or	r1, r4
     104:	14 28       	or	r1, r4
     106:	14 28       	or	r1, r4
     108:	a4 27       	eor	r26, r20
     10a:	14 28       	or	r1, r4
     10c:	14 28       	or	r1, r4
     10e:	14 28       	or	r1, r4
     110:	14 28       	or	r1, r4
     112:	14 28       	or	r1, r4
     114:	14 28       	or	r1, r4
     116:	14 28       	or	r1, r4
     118:	a6 27       	eor	r26, r22
     11a:	14 28       	or	r1, r4
     11c:	14 28       	or	r1, r4
     11e:	14 28       	or	r1, r4
     120:	14 28       	or	r1, r4
     122:	14 28       	or	r1, r4
     124:	14 28       	or	r1, r4
     126:	14 28       	or	r1, r4
     128:	14 28       	or	r1, r4
     12a:	14 28       	or	r1, r4
     12c:	14 28       	or	r1, r4
     12e:	14 28       	or	r1, r4
     130:	14 28       	or	r1, r4
     132:	14 28       	or	r1, r4
     134:	14 28       	or	r1, r4
     136:	14 28       	or	r1, r4
     138:	a6 27       	eor	r26, r22
     13a:	14 28       	or	r1, r4
     13c:	14 28       	or	r1, r4
     13e:	14 28       	or	r1, r4
     140:	14 28       	or	r1, r4
     142:	14 28       	or	r1, r4
     144:	14 28       	or	r1, r4
     146:	14 28       	or	r1, r4
     148:	14 28       	or	r1, r4
     14a:	14 28       	or	r1, r4
     14c:	14 28       	or	r1, r4
     14e:	14 28       	or	r1, r4
     150:	14 28       	or	r1, r4
     152:	14 28       	or	r1, r4
     154:	14 28       	or	r1, r4
     156:	14 28       	or	r1, r4
     158:	10 28       	or	r1, r0
     15a:	14 28       	or	r1, r4
     15c:	14 28       	or	r1, r4
     15e:	14 28       	or	r1, r4
     160:	14 28       	or	r1, r4
     162:	14 28       	or	r1, r4
     164:	14 28       	or	r1, r4
     166:	14 28       	or	r1, r4
     168:	db 27       	eor	r29, r27
     16a:	14 28       	or	r1, r4
     16c:	14 28       	or	r1, r4
     16e:	14 28       	or	r1, r4
     170:	14 28       	or	r1, r4
     172:	14 28       	or	r1, r4
     174:	14 28       	or	r1, r4
     176:	14 28       	or	r1, r4
     178:	14 28       	or	r1, r4
     17a:	14 28       	or	r1, r4
     17c:	14 28       	or	r1, r4
     17e:	14 28       	or	r1, r4
     180:	14 28       	or	r1, r4
     182:	14 28       	or	r1, r4
     184:	14 28       	or	r1, r4
     186:	14 28       	or	r1, r4
     188:	cf 27       	eor	r28, r31
     18a:	14 28       	or	r1, r4
     18c:	14 28       	or	r1, r4
     18e:	14 28       	or	r1, r4
     190:	14 28       	or	r1, r4
     192:	14 28       	or	r1, r4
     194:	14 28       	or	r1, r4
     196:	14 28       	or	r1, r4
     198:	f3 27       	eor	r31, r19

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 3b 0c 	call	0x1876	; 0x1876 <prvCheckTasksWaitingTermination>
     19e:	80 91 af 11 	lds	r24, 0x11AF	; 0x8011af <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	89 d2       	rcall	.+1298   	; 0x6ba <vPortYield>
     1a8:	0e 94 03 19 	call	0x3206	; 0x3206 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 03 16 	call	0x2c06	; 0x2c06 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 4f 18 	call	0x309e	; 0x309e <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	15 e0       	ldi	r17, 0x05	; 5
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e4 ec       	ldi	r30, 0xC4	; 196
     1e4:	fd e5       	ldi	r31, 0x5D	; 93
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a6 39       	cpi	r26, 0x96	; 150
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	23 e1       	ldi	r18, 0x13	; 19
     1f8:	a6 e9       	ldi	r26, 0x96	; 150
     1fa:	b5 e0       	ldi	r27, 0x05	; 5
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a6 3c       	cpi	r26, 0xC6	; 198
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <main>
     20a:	0c 94 e0 2e 	jmp	0x5dc0	; 0x5dc0 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <co2Task>:
#include "mh_z19.h"

void co2Task(void *pvParameters){
	(void)pvParameters;
	while(1){
		vTaskDelay(50);
     210:	62 e3       	ldi	r22, 0x32	; 50
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskDelay>
		int statusCode = mh_z19_takeMeassuring();
     21c:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <mh_z19_takeMeassuring>
		/*if(statusCode!=MHZ19_OK){
			printf("CO2 measuring error %d\n",statusCode);
		}*/
		vTaskDelay(9900);
     220:	6c ea       	ldi	r22, 0xAC	; 172
     222:	76 e2       	ldi	r23, 0x26	; 38
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskDelay>
     22c:	f1 cf       	rjmp	.-30     	; 0x210 <co2Task>

0000022e <co2Callback>:
	}
}
void co2Callback(uint16_t ppm){
     22e:	0f 93       	push	r16
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	ec 01       	movw	r28, r24
	xSemaphoreTake(hardware_semaphore,portMAX_DELAY);
     236:	4f ef       	ldi	r20, 0xFF	; 255
     238:	5f ef       	ldi	r21, 0xFF	; 255
     23a:	ba 01       	movw	r22, r20
     23c:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <hardware_semaphore>
     240:	90 91 bb 13 	lds	r25, 0x13BB	; 0x8013bb <hardware_semaphore+0x1>
     244:	cc d5       	rcall	.+2968   	; 0xdde <xQueueSemaphoreTake>
	entry_data.co2=ppm;
     246:	d0 93 af 13 	sts	0x13AF, r29	; 0x8013af <entry_data+0x5>
     24a:	c0 93 ae 13 	sts	0x13AE, r28	; 0x8013ae <entry_data+0x4>
	//printf("CO2 VALUE : %d ", entry_data.co2);
	xSemaphoreGive(hardware_semaphore);
     24e:	00 e0       	ldi	r16, 0x00	; 0
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	a9 01       	movw	r20, r18
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	70 e0       	ldi	r23, 0x00	; 0
     25a:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <hardware_semaphore>
     25e:	90 91 bb 13 	lds	r25, 0x13BB	; 0x8013bb <hardware_semaphore+0x1>
     262:	43 d4       	rcall	.+2182   	; 0xaea <xQueueGenericSend>
}
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	0f 91       	pop	r16
     26a:	08 95       	ret

0000026c <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     26c:	e2 ea       	ldi	r30, 0xA2	; 162
     26e:	f5 e0       	ldi	r31, 0x05	; 5
     270:	a6 ea       	ldi	r26, 0xA6	; 166
     272:	b5 e0       	ldi	r27, 0x05	; 5
     274:	b1 83       	std	Z+1, r27	; 0x01
     276:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     278:	13 82       	std	Z+3, r1	; 0x03
     27a:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     27c:	ea e5       	ldi	r30, 0x5A	; 90
     27e:	f1 e1       	ldi	r31, 0x11	; 17
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     280:	f0 93 a1 05 	sts	0x05A1, r31	; 0x8005a1 <pxEnd+0x1>
     284:	e0 93 a0 05 	sts	0x05A0, r30	; 0x8005a0 <pxEnd>
    pxEnd->xBlockSize = 0;
     288:	13 82       	std	Z+3, r1	; 0x03
     28a:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     28c:	11 82       	std	Z+1, r1	; 0x01
     28e:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     290:	84 eb       	ldi	r24, 0xB4	; 180
     292:	9b e0       	ldi	r25, 0x0B	; 11
     294:	13 96       	adiw	r26, 0x03	; 3
     296:	9c 93       	st	X, r25
     298:	8e 93       	st	-X, r24
     29a:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     29c:	ed 93       	st	X+, r30
     29e:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     2a0:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <xMinimumEverFreeBytesRemaining+0x1>
     2a4:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     2a8:	90 93 9f 05 	sts	0x059F, r25	; 0x80059f <xFreeBytesRemaining+0x1>
     2ac:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e8       	ldi	r25, 0x80	; 128
     2b4:	90 93 97 05 	sts	0x0597, r25	; 0x800597 <__data_end+0x1>
     2b8:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <__data_end>
     2bc:	08 95       	ret

000002be <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     2c4:	a2 ea       	ldi	r26, 0xA2	; 162
     2c6:	b5 e0       	ldi	r27, 0x05	; 5
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <prvInsertBlockIntoFreeList+0xe>
     2ca:	df 01       	movw	r26, r30
     2cc:	ed 91       	ld	r30, X+
     2ce:	fc 91       	ld	r31, X
     2d0:	11 97       	sbiw	r26, 0x01	; 1
     2d2:	ec 17       	cp	r30, r28
     2d4:	fd 07       	cpc	r31, r29
     2d6:	c8 f3       	brcs	.-14     	; 0x2ca <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     2d8:	12 96       	adiw	r26, 0x02	; 2
     2da:	8d 91       	ld	r24, X+
     2dc:	9c 91       	ld	r25, X
     2de:	13 97       	sbiw	r26, 0x03	; 3
     2e0:	9d 01       	movw	r18, r26
     2e2:	28 0f       	add	r18, r24
     2e4:	39 1f       	adc	r19, r25
     2e6:	c2 17       	cp	r28, r18
     2e8:	d3 07       	cpc	r29, r19
     2ea:	49 f4       	brne	.+18     	; 0x2fe <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     2ec:	2a 81       	ldd	r18, Y+2	; 0x02
     2ee:	3b 81       	ldd	r19, Y+3	; 0x03
     2f0:	82 0f       	add	r24, r18
     2f2:	93 1f       	adc	r25, r19
     2f4:	13 96       	adiw	r26, 0x03	; 3
     2f6:	9c 93       	st	X, r25
     2f8:	8e 93       	st	-X, r24
     2fa:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     2fc:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     2fe:	8a 81       	ldd	r24, Y+2	; 0x02
     300:	9b 81       	ldd	r25, Y+3	; 0x03
     302:	9e 01       	movw	r18, r28
     304:	28 0f       	add	r18, r24
     306:	39 1f       	adc	r19, r25
     308:	e2 17       	cp	r30, r18
     30a:	f3 07       	cpc	r31, r19
     30c:	c1 f4       	brne	.+48     	; 0x33e <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     30e:	20 91 a0 05 	lds	r18, 0x05A0	; 0x8005a0 <pxEnd>
     312:	30 91 a1 05 	lds	r19, 0x05A1	; 0x8005a1 <pxEnd+0x1>
     316:	e2 17       	cp	r30, r18
     318:	f3 07       	cpc	r31, r19
     31a:	71 f0       	breq	.+28     	; 0x338 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     31c:	22 81       	ldd	r18, Z+2	; 0x02
     31e:	33 81       	ldd	r19, Z+3	; 0x03
     320:	82 0f       	add	r24, r18
     322:	93 1f       	adc	r25, r19
     324:	9b 83       	std	Y+3, r25	; 0x03
     326:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     328:	ed 91       	ld	r30, X+
     32a:	fc 91       	ld	r31, X
     32c:	11 97       	sbiw	r26, 0x01	; 1
     32e:	80 81       	ld	r24, Z
     330:	91 81       	ldd	r25, Z+1	; 0x01
     332:	99 83       	std	Y+1, r25	; 0x01
     334:	88 83       	st	Y, r24
     336:	05 c0       	rjmp	.+10     	; 0x342 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     338:	39 83       	std	Y+1, r19	; 0x01
     33a:	28 83       	st	Y, r18
     33c:	02 c0       	rjmp	.+4      	; 0x342 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     33e:	f9 83       	std	Y+1, r31	; 0x01
     340:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     342:	ca 17       	cp	r28, r26
     344:	db 07       	cpc	r29, r27
     346:	11 f0       	breq	.+4      	; 0x34c <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     348:	cd 93       	st	X+, r28
     34a:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     360:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     364:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <pxEnd>
     368:	90 91 a1 05 	lds	r25, 0x05A1	; 0x8005a1 <pxEnd+0x1>
     36c:	89 2b       	or	r24, r25
     36e:	09 f4       	brne	.+2      	; 0x372 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     370:	7d df       	rcall	.-262    	; 0x26c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     372:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <__data_end>
     376:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <__data_end+0x1>
     37a:	80 23       	and	r24, r16
     37c:	91 23       	and	r25, r17
     37e:	89 2b       	or	r24, r25
     380:	09 f0       	breq	.+2      	; 0x384 <pvPortMalloc+0x32>
     382:	76 c0       	rjmp	.+236    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     384:	01 15       	cp	r16, r1
     386:	11 05       	cpc	r17, r1
     388:	49 f0       	breq	.+18     	; 0x39c <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     38a:	c8 01       	movw	r24, r16
     38c:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     38e:	08 17       	cp	r16, r24
     390:	19 07       	cpc	r17, r25
     392:	18 f0       	brcs	.+6      	; 0x39a <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     394:	00 e0       	ldi	r16, 0x00	; 0
     396:	10 e0       	ldi	r17, 0x00	; 0
     398:	01 c0       	rjmp	.+2      	; 0x39c <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     39a:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     39c:	01 15       	cp	r16, r1
     39e:	11 05       	cpc	r17, r1
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <pvPortMalloc+0x52>
     3a2:	69 c0       	rjmp	.+210    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     3a4:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <xFreeBytesRemaining>
     3a8:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <xFreeBytesRemaining+0x1>
     3ac:	80 17       	cp	r24, r16
     3ae:	91 07       	cpc	r25, r17
     3b0:	08 f4       	brcc	.+2      	; 0x3b4 <pvPortMalloc+0x62>
     3b2:	64 c0       	rjmp	.+200    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     3b4:	c0 91 a2 05 	lds	r28, 0x05A2	; 0x8005a2 <xStart>
     3b8:	d0 91 a3 05 	lds	r29, 0x05A3	; 0x8005a3 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     3bc:	e2 ea       	ldi	r30, 0xA2	; 162
     3be:	f5 e0       	ldi	r31, 0x05	; 5
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     3c2:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     3c4:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     3c6:	8a 81       	ldd	r24, Y+2	; 0x02
     3c8:	9b 81       	ldd	r25, Y+3	; 0x03
     3ca:	80 17       	cp	r24, r16
     3cc:	91 07       	cpc	r25, r17
     3ce:	20 f4       	brcc	.+8      	; 0x3d8 <pvPortMalloc+0x86>
     3d0:	88 81       	ld	r24, Y
     3d2:	99 81       	ldd	r25, Y+1	; 0x01
     3d4:	00 97       	sbiw	r24, 0x00	; 0
     3d6:	a9 f7       	brne	.-22     	; 0x3c2 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     3d8:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <pxEnd>
     3dc:	90 91 a1 05 	lds	r25, 0x05A1	; 0x8005a1 <pxEnd+0x1>
     3e0:	c8 17       	cp	r28, r24
     3e2:	d9 07       	cpc	r29, r25
     3e4:	09 f4       	brne	.+2      	; 0x3e8 <pvPortMalloc+0x96>
     3e6:	4d c0       	rjmp	.+154    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     3e8:	e0 80       	ld	r14, Z
     3ea:	f1 80       	ldd	r15, Z+1	; 0x01
     3ec:	84 e0       	ldi	r24, 0x04	; 4
     3ee:	e8 0e       	add	r14, r24
     3f0:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     3f2:	88 81       	ld	r24, Y
     3f4:	99 81       	ldd	r25, Y+1	; 0x01
     3f6:	91 83       	std	Z+1, r25	; 0x01
     3f8:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     3fa:	2a 81       	ldd	r18, Y+2	; 0x02
     3fc:	3b 81       	ldd	r19, Y+3	; 0x03
     3fe:	20 1b       	sub	r18, r16
     400:	31 0b       	sbc	r19, r17
     402:	29 30       	cpi	r18, 0x09	; 9
     404:	31 05       	cpc	r19, r1
     406:	48 f0       	brcs	.+18     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     408:	ce 01       	movw	r24, r28
     40a:	80 0f       	add	r24, r16
     40c:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     40e:	fc 01       	movw	r30, r24
     410:	33 83       	std	Z+3, r19	; 0x03
     412:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     414:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     416:	0a 83       	std	Y+2, r16	; 0x02
     418:	52 df       	rcall	.-348    	; 0x2be <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     41a:	2a 81       	ldd	r18, Y+2	; 0x02
     41c:	3b 81       	ldd	r19, Y+3	; 0x03
     41e:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <xFreeBytesRemaining>
     422:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <xFreeBytesRemaining+0x1>
     426:	82 1b       	sub	r24, r18
     428:	93 0b       	sbc	r25, r19
     42a:	90 93 9f 05 	sts	0x059F, r25	; 0x80059f <xFreeBytesRemaining+0x1>
     42e:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     432:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <xMinimumEverFreeBytesRemaining>
     436:	50 91 9d 05 	lds	r21, 0x059D	; 0x80059d <xMinimumEverFreeBytesRemaining+0x1>
     43a:	84 17       	cp	r24, r20
     43c:	95 07       	cpc	r25, r21
     43e:	20 f4       	brcc	.+8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     440:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <xMinimumEverFreeBytesRemaining+0x1>
     444:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     448:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <__data_end>
     44c:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <__data_end+0x1>
     450:	28 2b       	or	r18, r24
     452:	39 2b       	or	r19, r25
     454:	3b 83       	std	Y+3, r19	; 0x03
     456:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     458:	19 82       	std	Y+1, r1	; 0x01
     45a:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     45c:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <xNumberOfSuccessfulAllocations>
     460:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <xNumberOfSuccessfulAllocations+0x1>
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	90 93 9b 05 	sts	0x059B, r25	; 0x80059b <xNumberOfSuccessfulAllocations+0x1>
     46a:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <xNumberOfSuccessfulAllocations>
     46e:	0b c0       	rjmp	.+22     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     470:	e1 2c       	mov	r14, r1
     472:	f1 2c       	mov	r15, r1
     474:	08 c0       	rjmp	.+16     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     476:	e1 2c       	mov	r14, r1
     478:	f1 2c       	mov	r15, r1
     47a:	05 c0       	rjmp	.+10     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     47c:	e1 2c       	mov	r14, r1
     47e:	f1 2c       	mov	r15, r1
     480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     482:	e1 2c       	mov	r14, r1
     484:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     486:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     48a:	e1 14       	cp	r14, r1
     48c:	f1 04       	cpc	r15, r1
     48e:	11 f4       	brne	.+4      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     490:	0e 94 0f 19 	call	0x321e	; 0x321e <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     494:	c7 01       	movw	r24, r14
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	08 95       	ret

000004a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     4ac:	00 97       	sbiw	r24, 0x00	; 0
     4ae:	91 f1       	breq	.+100    	; 0x514 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     4b0:	ec 01       	movw	r28, r24
     4b2:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     4b4:	4a 81       	ldd	r20, Y+2	; 0x02
     4b6:	5b 81       	ldd	r21, Y+3	; 0x03
     4b8:	20 91 96 05 	lds	r18, 0x0596	; 0x800596 <__data_end>
     4bc:	30 91 97 05 	lds	r19, 0x0597	; 0x800597 <__data_end+0x1>
     4c0:	ba 01       	movw	r22, r20
     4c2:	62 23       	and	r22, r18
     4c4:	73 23       	and	r23, r19
     4c6:	67 2b       	or	r22, r23
     4c8:	29 f1       	breq	.+74     	; 0x514 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     4ca:	68 81       	ld	r22, Y
     4cc:	79 81       	ldd	r23, Y+1	; 0x01
     4ce:	67 2b       	or	r22, r23
     4d0:	09 f5       	brne	.+66     	; 0x514 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     4d2:	20 95       	com	r18
     4d4:	30 95       	com	r19
     4d6:	24 23       	and	r18, r20
     4d8:	35 23       	and	r19, r21
     4da:	3b 83       	std	Y+3, r19	; 0x03
     4dc:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     4de:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     4e2:	8a 81       	ldd	r24, Y+2	; 0x02
     4e4:	9b 81       	ldd	r25, Y+3	; 0x03
     4e6:	20 91 9e 05 	lds	r18, 0x059E	; 0x80059e <xFreeBytesRemaining>
     4ea:	30 91 9f 05 	lds	r19, 0x059F	; 0x80059f <xFreeBytesRemaining+0x1>
     4ee:	82 0f       	add	r24, r18
     4f0:	93 1f       	adc	r25, r19
     4f2:	90 93 9f 05 	sts	0x059F, r25	; 0x80059f <xFreeBytesRemaining+0x1>
     4f6:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     4fa:	ce 01       	movw	r24, r28
     4fc:	e0 de       	rcall	.-576    	; 0x2be <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     4fe:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <xNumberOfSuccessfulFrees>
     502:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <xNumberOfSuccessfulFrees+0x1>
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <xNumberOfSuccessfulFrees+0x1>
     50c:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     510:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	08 95       	ret

0000051e <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     51e:	fc 01       	movw	r30, r24
     520:	03 96       	adiw	r24, 0x03	; 3
     522:	92 83       	std	Z+2, r25	; 0x02
     524:	81 83       	std	Z+1, r24	; 0x01
     526:	4f ef       	ldi	r20, 0xFF	; 255
     528:	5f ef       	ldi	r21, 0xFF	; 255
     52a:	ba 01       	movw	r22, r20
     52c:	43 83       	std	Z+3, r20	; 0x03
     52e:	54 83       	std	Z+4, r21	; 0x04
     530:	65 83       	std	Z+5, r22	; 0x05
     532:	76 83       	std	Z+6, r23	; 0x06
     534:	90 87       	std	Z+8, r25	; 0x08
     536:	87 83       	std	Z+7, r24	; 0x07
     538:	92 87       	std	Z+10, r25	; 0x0a
     53a:	81 87       	std	Z+9, r24	; 0x09
     53c:	10 82       	st	Z, r1
     53e:	08 95       	ret

00000540 <vListInitialiseItem>:
     540:	fc 01       	movw	r30, r24
     542:	13 86       	std	Z+11, r1	; 0x0b
     544:	12 86       	std	Z+10, r1	; 0x0a
     546:	08 95       	ret

00000548 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     552:	08 81       	ld	r16, Y
     554:	19 81       	ldd	r17, Y+1	; 0x01
     556:	2a 81       	ldd	r18, Y+2	; 0x02
     558:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     55a:	0f 3f       	cpi	r16, 0xFF	; 255
     55c:	4f ef       	ldi	r20, 0xFF	; 255
     55e:	14 07       	cpc	r17, r20
     560:	24 07       	cpc	r18, r20
     562:	34 07       	cpc	r19, r20
     564:	21 f4       	brne	.+8      	; 0x56e <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     566:	fc 01       	movw	r30, r24
     568:	a1 85       	ldd	r26, Z+9	; 0x09
     56a:	b2 85       	ldd	r27, Z+10	; 0x0a
     56c:	11 c0       	rjmp	.+34     	; 0x590 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     56e:	dc 01       	movw	r26, r24
     570:	13 96       	adiw	r26, 0x03	; 3
     572:	01 c0       	rjmp	.+2      	; 0x576 <vListInsert+0x2e>
     574:	df 01       	movw	r26, r30
     576:	14 96       	adiw	r26, 0x04	; 4
     578:	ed 91       	ld	r30, X+
     57a:	fc 91       	ld	r31, X
     57c:	15 97       	sbiw	r26, 0x05	; 5
     57e:	40 81       	ld	r20, Z
     580:	51 81       	ldd	r21, Z+1	; 0x01
     582:	62 81       	ldd	r22, Z+2	; 0x02
     584:	73 81       	ldd	r23, Z+3	; 0x03
     586:	04 17       	cp	r16, r20
     588:	15 07       	cpc	r17, r21
     58a:	26 07       	cpc	r18, r22
     58c:	37 07       	cpc	r19, r23
     58e:	90 f7       	brcc	.-28     	; 0x574 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     590:	14 96       	adiw	r26, 0x04	; 4
     592:	ed 91       	ld	r30, X+
     594:	fc 91       	ld	r31, X
     596:	15 97       	sbiw	r26, 0x05	; 5
     598:	fd 83       	std	Y+5, r31	; 0x05
     59a:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     59c:	d7 83       	std	Z+7, r29	; 0x07
     59e:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     5a0:	bf 83       	std	Y+7, r27	; 0x07
     5a2:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     5a4:	15 96       	adiw	r26, 0x05	; 5
     5a6:	dc 93       	st	X, r29
     5a8:	ce 93       	st	-X, r28
     5aa:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     5ac:	9b 87       	std	Y+11, r25	; 0x0b
     5ae:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 81       	ld	r18, Z
     5b4:	2f 5f       	subi	r18, 0xFF	; 255
     5b6:	20 83       	st	Z, r18
}
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	08 95       	ret

000005c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     5c8:	a2 85       	ldd	r26, Z+10	; 0x0a
     5ca:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5cc:	c4 81       	ldd	r28, Z+4	; 0x04
     5ce:	d5 81       	ldd	r29, Z+5	; 0x05
     5d0:	86 81       	ldd	r24, Z+6	; 0x06
     5d2:	97 81       	ldd	r25, Z+7	; 0x07
     5d4:	9f 83       	std	Y+7, r25	; 0x07
     5d6:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5d8:	c6 81       	ldd	r28, Z+6	; 0x06
     5da:	d7 81       	ldd	r29, Z+7	; 0x07
     5dc:	84 81       	ldd	r24, Z+4	; 0x04
     5de:	95 81       	ldd	r25, Z+5	; 0x05
     5e0:	9d 83       	std	Y+5, r25	; 0x05
     5e2:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     5e4:	11 96       	adiw	r26, 0x01	; 1
     5e6:	8d 91       	ld	r24, X+
     5e8:	9c 91       	ld	r25, X
     5ea:	12 97       	sbiw	r26, 0x02	; 2
     5ec:	e8 17       	cp	r30, r24
     5ee:	f9 07       	cpc	r31, r25
     5f0:	31 f4       	brne	.+12     	; 0x5fe <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     5f2:	86 81       	ldd	r24, Z+6	; 0x06
     5f4:	97 81       	ldd	r25, Z+7	; 0x07
     5f6:	12 96       	adiw	r26, 0x02	; 2
     5f8:	9c 93       	st	X, r25
     5fa:	8e 93       	st	-X, r24
     5fc:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     5fe:	13 86       	std	Z+11, r1	; 0x0b
     600:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     602:	8c 91       	ld	r24, X
     604:	81 50       	subi	r24, 0x01	; 1
     606:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     608:	8c 91       	ld	r24, X
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     610:	a8 95       	wdr
     612:	90 ec       	ldi	r25, 0xC0	; 192
     614:	88 e1       	ldi	r24, 0x18	; 24
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	f8 94       	cli
     61a:	a8 95       	wdr
     61c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     620:	0f be       	out	0x3f, r0	; 63
     622:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     626:	08 95       	ret

00000628 <pxPortInitialiseStack>:
     628:	fc 01       	movw	r30, r24
     62a:	60 83       	st	Z, r22
     62c:	31 97       	sbiw	r30, 0x01	; 1
     62e:	70 83       	st	Z, r23
     630:	31 97       	sbiw	r30, 0x01	; 1
     632:	10 82       	st	Z, r1
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	10 82       	st	Z, r1
     638:	31 97       	sbiw	r30, 0x01	; 1
     63a:	20 e8       	ldi	r18, 0x80	; 128
     63c:	20 83       	st	Z, r18
     63e:	31 97       	sbiw	r30, 0x01	; 1
     640:	10 82       	st	Z, r1
     642:	31 97       	sbiw	r30, 0x01	; 1
     644:	10 82       	st	Z, r1
     646:	31 97       	sbiw	r30, 0x01	; 1
     648:	10 82       	st	Z, r1
     64a:	77 97       	sbiw	r30, 0x17	; 23
     64c:	40 83       	st	Z, r20
     64e:	31 97       	sbiw	r30, 0x01	; 1
     650:	50 83       	st	Z, r21
     652:	86 97       	sbiw	r24, 0x26	; 38
     654:	08 95       	ret

00000656 <xPortStartScheduler>:
     656:	dc df       	rcall	.-72     	; 0x610 <prvSetupTimerInterrupt>
     658:	a0 91 1d 12 	lds	r26, 0x121D	; 0x80121d <pxCurrentTCB>
     65c:	b0 91 1e 12 	lds	r27, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
     660:	cd 91       	ld	r28, X+
     662:	cd bf       	out	0x3d, r28	; 61
     664:	dd 91       	ld	r29, X+
     666:	de bf       	out	0x3e, r29	; 62
     668:	ff 91       	pop	r31
     66a:	ef 91       	pop	r30
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	bf 91       	pop	r27
     672:	af 91       	pop	r26
     674:	9f 91       	pop	r25
     676:	8f 91       	pop	r24
     678:	7f 91       	pop	r23
     67a:	6f 91       	pop	r22
     67c:	5f 91       	pop	r21
     67e:	4f 91       	pop	r20
     680:	3f 91       	pop	r19
     682:	2f 91       	pop	r18
     684:	1f 91       	pop	r17
     686:	0f 91       	pop	r16
     688:	ff 90       	pop	r15
     68a:	ef 90       	pop	r14
     68c:	df 90       	pop	r13
     68e:	cf 90       	pop	r12
     690:	bf 90       	pop	r11
     692:	af 90       	pop	r10
     694:	9f 90       	pop	r9
     696:	8f 90       	pop	r8
     698:	7f 90       	pop	r7
     69a:	6f 90       	pop	r6
     69c:	5f 90       	pop	r5
     69e:	4f 90       	pop	r4
     6a0:	3f 90       	pop	r3
     6a2:	2f 90       	pop	r2
     6a4:	1f 90       	pop	r1
     6a6:	0f 90       	pop	r0
     6a8:	0c be       	out	0x3c, r0	; 60
     6aa:	0f 90       	pop	r0
     6ac:	0b be       	out	0x3b, r0	; 59
     6ae:	0f 90       	pop	r0
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	0f 90       	pop	r0
     6b4:	08 95       	ret
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	08 95       	ret

000006ba <vPortYield>:
     6ba:	0f 92       	push	r0
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	0f 92       	push	r0
     6c2:	0b b6       	in	r0, 0x3b	; 59
     6c4:	0f 92       	push	r0
     6c6:	0c b6       	in	r0, 0x3c	; 60
     6c8:	0f 92       	push	r0
     6ca:	1f 92       	push	r1
     6cc:	11 24       	eor	r1, r1
     6ce:	2f 92       	push	r2
     6d0:	3f 92       	push	r3
     6d2:	4f 92       	push	r4
     6d4:	5f 92       	push	r5
     6d6:	6f 92       	push	r6
     6d8:	7f 92       	push	r7
     6da:	8f 92       	push	r8
     6dc:	9f 92       	push	r9
     6de:	af 92       	push	r10
     6e0:	bf 92       	push	r11
     6e2:	cf 92       	push	r12
     6e4:	df 92       	push	r13
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	2f 93       	push	r18
     6f0:	3f 93       	push	r19
     6f2:	4f 93       	push	r20
     6f4:	5f 93       	push	r21
     6f6:	6f 93       	push	r22
     6f8:	7f 93       	push	r23
     6fa:	8f 93       	push	r24
     6fc:	9f 93       	push	r25
     6fe:	af 93       	push	r26
     700:	bf 93       	push	r27
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	ef 93       	push	r30
     708:	ff 93       	push	r31
     70a:	a0 91 1d 12 	lds	r26, 0x121D	; 0x80121d <pxCurrentTCB>
     70e:	b0 91 1e 12 	lds	r27, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
     712:	0d b6       	in	r0, 0x3d	; 61
     714:	0d 92       	st	X+, r0
     716:	0e b6       	in	r0, 0x3e	; 62
     718:	0d 92       	st	X+, r0
     71a:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vTaskSwitchContext>
     71e:	a0 91 1d 12 	lds	r26, 0x121D	; 0x80121d <pxCurrentTCB>
     722:	b0 91 1e 12 	lds	r27, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
     726:	cd 91       	ld	r28, X+
     728:	cd bf       	out	0x3d, r28	; 61
     72a:	dd 91       	ld	r29, X+
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	ff 91       	pop	r31
     730:	ef 91       	pop	r30
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	bf 91       	pop	r27
     738:	af 91       	pop	r26
     73a:	9f 91       	pop	r25
     73c:	8f 91       	pop	r24
     73e:	7f 91       	pop	r23
     740:	6f 91       	pop	r22
     742:	5f 91       	pop	r21
     744:	4f 91       	pop	r20
     746:	3f 91       	pop	r19
     748:	2f 91       	pop	r18
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	ef 90       	pop	r14
     752:	df 90       	pop	r13
     754:	cf 90       	pop	r12
     756:	bf 90       	pop	r11
     758:	af 90       	pop	r10
     75a:	9f 90       	pop	r9
     75c:	8f 90       	pop	r8
     75e:	7f 90       	pop	r7
     760:	6f 90       	pop	r6
     762:	5f 90       	pop	r5
     764:	4f 90       	pop	r4
     766:	3f 90       	pop	r3
     768:	2f 90       	pop	r2
     76a:	1f 90       	pop	r1
     76c:	0f 90       	pop	r0
     76e:	0c be       	out	0x3c, r0	; 60
     770:	0f 90       	pop	r0
     772:	0b be       	out	0x3b, r0	; 59
     774:	0f 90       	pop	r0
     776:	0f be       	out	0x3f, r0	; 63
     778:	0f 90       	pop	r0
     77a:	08 95       	ret

0000077c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	0f 92       	push	r0
     784:	0b b6       	in	r0, 0x3b	; 59
     786:	0f 92       	push	r0
     788:	0c b6       	in	r0, 0x3c	; 60
     78a:	0f 92       	push	r0
     78c:	1f 92       	push	r1
     78e:	11 24       	eor	r1, r1
     790:	2f 92       	push	r2
     792:	3f 92       	push	r3
     794:	4f 92       	push	r4
     796:	5f 92       	push	r5
     798:	6f 92       	push	r6
     79a:	7f 92       	push	r7
     79c:	8f 92       	push	r8
     79e:	9f 92       	push	r9
     7a0:	af 92       	push	r10
     7a2:	bf 92       	push	r11
     7a4:	cf 92       	push	r12
     7a6:	df 92       	push	r13
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	2f 93       	push	r18
     7b2:	3f 93       	push	r19
     7b4:	4f 93       	push	r20
     7b6:	5f 93       	push	r21
     7b8:	6f 93       	push	r22
     7ba:	7f 93       	push	r23
     7bc:	8f 93       	push	r24
     7be:	9f 93       	push	r25
     7c0:	af 93       	push	r26
     7c2:	bf 93       	push	r27
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	ef 93       	push	r30
     7ca:	ff 93       	push	r31
     7cc:	a0 91 1d 12 	lds	r26, 0x121D	; 0x80121d <pxCurrentTCB>
     7d0:	b0 91 1e 12 	lds	r27, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
     7d4:	0d b6       	in	r0, 0x3d	; 61
     7d6:	0d 92       	st	X+, r0
     7d8:	0e b6       	in	r0, 0x3e	; 62
     7da:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     7dc:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     7de:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <xTaskIncrementTick>
     7e2:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     7e4:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     7e8:	a0 91 1d 12 	lds	r26, 0x121D	; 0x80121d <pxCurrentTCB>
     7ec:	b0 91 1e 12 	lds	r27, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
     7f0:	cd 91       	ld	r28, X+
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	dd 91       	ld	r29, X+
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	ff 91       	pop	r31
     7fa:	ef 91       	pop	r30
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	bf 91       	pop	r27
     802:	af 91       	pop	r26
     804:	9f 91       	pop	r25
     806:	8f 91       	pop	r24
     808:	7f 91       	pop	r23
     80a:	6f 91       	pop	r22
     80c:	5f 91       	pop	r21
     80e:	4f 91       	pop	r20
     810:	3f 91       	pop	r19
     812:	2f 91       	pop	r18
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	df 90       	pop	r13
     81e:	cf 90       	pop	r12
     820:	bf 90       	pop	r11
     822:	af 90       	pop	r10
     824:	9f 90       	pop	r9
     826:	8f 90       	pop	r8
     828:	7f 90       	pop	r7
     82a:	6f 90       	pop	r6
     82c:	5f 90       	pop	r5
     82e:	4f 90       	pop	r4
     830:	3f 90       	pop	r3
     832:	2f 90       	pop	r2
     834:	1f 90       	pop	r1
     836:	0f 90       	pop	r0
     838:	0c be       	out	0x3c, r0	; 60
     83a:	0f 90       	pop	r0
     83c:	0b be       	out	0x3b, r0	; 59
     83e:	0f 90       	pop	r0
     840:	0f be       	out	0x3f, r0	; 63
     842:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     844:	08 95       	ret

00000846 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     846:	9a df       	rcall	.-204    	; 0x77c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     848:	18 95       	reti

0000084a <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     84a:	dc 01       	movw	r26, r24
     84c:	53 96       	adiw	r26, 0x13	; 19
     84e:	2c 91       	ld	r18, X
     850:	53 97       	sbiw	r26, 0x13	; 19
     852:	22 23       	and	r18, r18
     854:	41 f0       	breq	.+16     	; 0x866 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     856:	5a 96       	adiw	r26, 0x1a	; 26
     858:	ed 91       	ld	r30, X+
     85a:	fc 91       	ld	r31, X
     85c:	5b 97       	sbiw	r26, 0x1b	; 27
     85e:	90 81       	ld	r25, Z
     860:	8a e0       	ldi	r24, 0x0A	; 10
     862:	89 1b       	sub	r24, r25
     864:	08 95       	ret
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	08 95       	ret

0000086a <prvIsQueueEmpty>:
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	0f 92       	push	r0
     870:	fc 01       	movw	r30, r24
     872:	86 8d       	ldd	r24, Z+30	; 0x1e
     874:	81 11       	cpse	r24, r1
     876:	02 c0       	rjmp	.+4      	; 0x87c <prvIsQueueEmpty+0x12>
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	01 c0       	rjmp	.+2      	; 0x87e <prvIsQueueEmpty+0x14>
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	0f 90       	pop	r0
     880:	0f be       	out	0x3f, r0	; 63
     882:	08 95       	ret

00000884 <prvIsQueueFull>:
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	0f 92       	push	r0
     88a:	fc 01       	movw	r30, r24
     88c:	26 8d       	ldd	r18, Z+30	; 0x1e
     88e:	87 8d       	ldd	r24, Z+31	; 0x1f
     890:	28 13       	cpse	r18, r24
     892:	02 c0       	rjmp	.+4      	; 0x898 <prvIsQueueFull+0x14>
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	01 c0       	rjmp	.+2      	; 0x89a <prvIsQueueFull+0x16>
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	0f 90       	pop	r0
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	08 95       	ret

000008a0 <prvCopyDataToQueue>:
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	ec 01       	movw	r28, r24
     8aa:	04 2f       	mov	r16, r20
     8ac:	1e 8d       	ldd	r17, Y+30	; 0x1e
     8ae:	48 a1       	ldd	r20, Y+32	; 0x20
     8b0:	41 11       	cpse	r20, r1
     8b2:	0c c0       	rjmp	.+24     	; 0x8cc <prvCopyDataToQueue+0x2c>
     8b4:	88 81       	ld	r24, Y
     8b6:	99 81       	ldd	r25, Y+1	; 0x01
     8b8:	89 2b       	or	r24, r25
     8ba:	09 f0       	breq	.+2      	; 0x8be <prvCopyDataToQueue+0x1e>
     8bc:	42 c0       	rjmp	.+132    	; 0x942 <prvCopyDataToQueue+0xa2>
     8be:	8c 81       	ldd	r24, Y+4	; 0x04
     8c0:	9d 81       	ldd	r25, Y+5	; 0x05
     8c2:	0e 94 55 12 	call	0x24aa	; 0x24aa <xTaskPriorityDisinherit>
     8c6:	1d 82       	std	Y+5, r1	; 0x05
     8c8:	1c 82       	std	Y+4, r1	; 0x04
     8ca:	42 c0       	rjmp	.+132    	; 0x950 <prvCopyDataToQueue+0xb0>
     8cc:	01 11       	cpse	r16, r1
     8ce:	17 c0       	rjmp	.+46     	; 0x8fe <prvCopyDataToQueue+0x5e>
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	8a 81       	ldd	r24, Y+2	; 0x02
     8d4:	9b 81       	ldd	r25, Y+3	; 0x03
     8d6:	0e 94 76 2b 	call	0x56ec	; 0x56ec <memcpy>
     8da:	28 a1       	ldd	r18, Y+32	; 0x20
     8dc:	8a 81       	ldd	r24, Y+2	; 0x02
     8de:	9b 81       	ldd	r25, Y+3	; 0x03
     8e0:	82 0f       	add	r24, r18
     8e2:	91 1d       	adc	r25, r1
     8e4:	9b 83       	std	Y+3, r25	; 0x03
     8e6:	8a 83       	std	Y+2, r24	; 0x02
     8e8:	2c 81       	ldd	r18, Y+4	; 0x04
     8ea:	3d 81       	ldd	r19, Y+5	; 0x05
     8ec:	82 17       	cp	r24, r18
     8ee:	93 07       	cpc	r25, r19
     8f0:	50 f1       	brcs	.+84     	; 0x946 <prvCopyDataToQueue+0xa6>
     8f2:	88 81       	ld	r24, Y
     8f4:	99 81       	ldd	r25, Y+1	; 0x01
     8f6:	9b 83       	std	Y+3, r25	; 0x03
     8f8:	8a 83       	std	Y+2, r24	; 0x02
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	29 c0       	rjmp	.+82     	; 0x950 <prvCopyDataToQueue+0xb0>
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	8e 81       	ldd	r24, Y+6	; 0x06
     902:	9f 81       	ldd	r25, Y+7	; 0x07
     904:	0e 94 76 2b 	call	0x56ec	; 0x56ec <memcpy>
     908:	88 a1       	ldd	r24, Y+32	; 0x20
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	91 95       	neg	r25
     90e:	81 95       	neg	r24
     910:	91 09       	sbc	r25, r1
     912:	2e 81       	ldd	r18, Y+6	; 0x06
     914:	3f 81       	ldd	r19, Y+7	; 0x07
     916:	28 0f       	add	r18, r24
     918:	39 1f       	adc	r19, r25
     91a:	3f 83       	std	Y+7, r19	; 0x07
     91c:	2e 83       	std	Y+6, r18	; 0x06
     91e:	48 81       	ld	r20, Y
     920:	59 81       	ldd	r21, Y+1	; 0x01
     922:	24 17       	cp	r18, r20
     924:	35 07       	cpc	r19, r21
     926:	30 f4       	brcc	.+12     	; 0x934 <prvCopyDataToQueue+0x94>
     928:	2c 81       	ldd	r18, Y+4	; 0x04
     92a:	3d 81       	ldd	r19, Y+5	; 0x05
     92c:	82 0f       	add	r24, r18
     92e:	93 1f       	adc	r25, r19
     930:	9f 83       	std	Y+7, r25	; 0x07
     932:	8e 83       	std	Y+6, r24	; 0x06
     934:	02 30       	cpi	r16, 0x02	; 2
     936:	49 f4       	brne	.+18     	; 0x94a <prvCopyDataToQueue+0xaa>
     938:	11 23       	and	r17, r17
     93a:	49 f0       	breq	.+18     	; 0x94e <prvCopyDataToQueue+0xae>
     93c:	11 50       	subi	r17, 0x01	; 1
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	07 c0       	rjmp	.+14     	; 0x950 <prvCopyDataToQueue+0xb0>
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	05 c0       	rjmp	.+10     	; 0x950 <prvCopyDataToQueue+0xb0>
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	03 c0       	rjmp	.+6      	; 0x950 <prvCopyDataToQueue+0xb0>
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	01 c0       	rjmp	.+2      	; 0x950 <prvCopyDataToQueue+0xb0>
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	1f 5f       	subi	r17, 0xFF	; 255
     952:	1e 8f       	std	Y+30, r17	; 0x1e
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	08 95       	ret

0000095e <prvCopyDataFromQueue>:
     95e:	fc 01       	movw	r30, r24
     960:	40 a1       	ldd	r20, Z+32	; 0x20
     962:	44 23       	and	r20, r20
     964:	a9 f0       	breq	.+42     	; 0x990 <prvCopyDataFromQueue+0x32>
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	26 81       	ldd	r18, Z+6	; 0x06
     96a:	37 81       	ldd	r19, Z+7	; 0x07
     96c:	24 0f       	add	r18, r20
     96e:	35 1f       	adc	r19, r21
     970:	37 83       	std	Z+7, r19	; 0x07
     972:	26 83       	std	Z+6, r18	; 0x06
     974:	84 81       	ldd	r24, Z+4	; 0x04
     976:	95 81       	ldd	r25, Z+5	; 0x05
     978:	28 17       	cp	r18, r24
     97a:	39 07       	cpc	r19, r25
     97c:	20 f0       	brcs	.+8      	; 0x986 <prvCopyDataFromQueue+0x28>
     97e:	80 81       	ld	r24, Z
     980:	91 81       	ldd	r25, Z+1	; 0x01
     982:	97 83       	std	Z+7, r25	; 0x07
     984:	86 83       	std	Z+6, r24	; 0x06
     986:	cb 01       	movw	r24, r22
     988:	66 81       	ldd	r22, Z+6	; 0x06
     98a:	77 81       	ldd	r23, Z+7	; 0x07
     98c:	0c 94 76 2b 	jmp	0x56ec	; 0x56ec <memcpy>
     990:	08 95       	ret

00000992 <prvUnlockQueue>:
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	ec 01       	movw	r28, r24
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	0f 92       	push	r0
     9a0:	1a a1       	ldd	r17, Y+34	; 0x22
     9a2:	0b c0       	rjmp	.+22     	; 0x9ba <prvUnlockQueue+0x28>
     9a4:	8b 89       	ldd	r24, Y+19	; 0x13
     9a6:	88 23       	and	r24, r24
     9a8:	51 f0       	breq	.+20     	; 0x9be <prvUnlockQueue+0x2c>
     9aa:	ce 01       	movw	r24, r28
     9ac:	43 96       	adiw	r24, 0x13	; 19
     9ae:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <xTaskRemoveFromEventList>
     9b2:	81 11       	cpse	r24, r1
     9b4:	0e 94 b7 11 	call	0x236e	; 0x236e <vTaskMissedYield>
     9b8:	11 50       	subi	r17, 0x01	; 1
     9ba:	11 16       	cp	r1, r17
     9bc:	9c f3       	brlt	.-26     	; 0x9a4 <prvUnlockQueue+0x12>
     9be:	8f ef       	ldi	r24, 0xFF	; 255
     9c0:	8a a3       	std	Y+34, r24	; 0x22
     9c2:	0f 90       	pop	r0
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	0f 92       	push	r0
     9cc:	19 a1       	ldd	r17, Y+33	; 0x21
     9ce:	0b c0       	rjmp	.+22     	; 0x9e6 <prvUnlockQueue+0x54>
     9d0:	88 85       	ldd	r24, Y+8	; 0x08
     9d2:	88 23       	and	r24, r24
     9d4:	51 f0       	breq	.+20     	; 0x9ea <prvUnlockQueue+0x58>
     9d6:	ce 01       	movw	r24, r28
     9d8:	08 96       	adiw	r24, 0x08	; 8
     9da:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <xTaskRemoveFromEventList>
     9de:	81 11       	cpse	r24, r1
     9e0:	0e 94 b7 11 	call	0x236e	; 0x236e <vTaskMissedYield>
     9e4:	11 50       	subi	r17, 0x01	; 1
     9e6:	11 16       	cp	r1, r17
     9e8:	9c f3       	brlt	.-26     	; 0x9d0 <prvUnlockQueue+0x3e>
     9ea:	8f ef       	ldi	r24, 0xFF	; 255
     9ec:	89 a3       	std	Y+33, r24	; 0x21
     9ee:	0f 90       	pop	r0
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	08 95       	ret

000009fa <xQueueGenericReset>:
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	ec 01       	movw	r28, r24
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	0f 92       	push	r0
     a06:	e8 81       	ld	r30, Y
     a08:	f9 81       	ldd	r31, Y+1	; 0x01
     a0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a0c:	28 a1       	ldd	r18, Y+32	; 0x20
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	82 9f       	mul	r24, r18
     a14:	a0 01       	movw	r20, r0
     a16:	83 9f       	mul	r24, r19
     a18:	50 0d       	add	r21, r0
     a1a:	92 9f       	mul	r25, r18
     a1c:	50 0d       	add	r21, r0
     a1e:	11 24       	eor	r1, r1
     a20:	4e 0f       	add	r20, r30
     a22:	5f 1f       	adc	r21, r31
     a24:	5d 83       	std	Y+5, r21	; 0x05
     a26:	4c 83       	std	Y+4, r20	; 0x04
     a28:	1e 8e       	std	Y+30, r1	; 0x1e
     a2a:	fb 83       	std	Y+3, r31	; 0x03
     a2c:	ea 83       	std	Y+2, r30	; 0x02
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	28 9f       	mul	r18, r24
     a32:	a0 01       	movw	r20, r0
     a34:	29 9f       	mul	r18, r25
     a36:	50 0d       	add	r21, r0
     a38:	38 9f       	mul	r19, r24
     a3a:	50 0d       	add	r21, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	cf 01       	movw	r24, r30
     a40:	84 0f       	add	r24, r20
     a42:	95 1f       	adc	r25, r21
     a44:	9f 83       	std	Y+7, r25	; 0x07
     a46:	8e 83       	std	Y+6, r24	; 0x06
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	89 a3       	std	Y+33, r24	; 0x21
     a4c:	8a a3       	std	Y+34, r24	; 0x22
     a4e:	61 11       	cpse	r22, r1
     a50:	0b c0       	rjmp	.+22     	; 0xa68 <xQueueGenericReset+0x6e>
     a52:	88 85       	ldd	r24, Y+8	; 0x08
     a54:	88 23       	and	r24, r24
     a56:	71 f0       	breq	.+28     	; 0xa74 <xQueueGenericReset+0x7a>
     a58:	ce 01       	movw	r24, r28
     a5a:	08 96       	adiw	r24, 0x08	; 8
     a5c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <xTaskRemoveFromEventList>
     a60:	88 23       	and	r24, r24
     a62:	41 f0       	breq	.+16     	; 0xa74 <xQueueGenericReset+0x7a>
     a64:	2a de       	rcall	.-940    	; 0x6ba <vPortYield>
     a66:	06 c0       	rjmp	.+12     	; 0xa74 <xQueueGenericReset+0x7a>
     a68:	ce 01       	movw	r24, r28
     a6a:	08 96       	adiw	r24, 0x08	; 8
     a6c:	58 dd       	rcall	.-1360   	; 0x51e <vListInitialise>
     a6e:	ce 01       	movw	r24, r28
     a70:	43 96       	adiw	r24, 0x13	; 19
     a72:	55 dd       	rcall	.-1366   	; 0x51e <vListInitialise>
     a74:	0f 90       	pop	r0
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <prvInitialiseNewQueue>:
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	f8 01       	movw	r30, r16
     a86:	61 11       	cpse	r22, r1
     a88:	03 c0       	rjmp	.+6      	; 0xa90 <prvInitialiseNewQueue+0x10>
     a8a:	11 83       	std	Z+1, r17	; 0x01
     a8c:	00 83       	st	Z, r16
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <prvInitialiseNewQueue+0x14>
     a90:	51 83       	std	Z+1, r21	; 0x01
     a92:	40 83       	st	Z, r20
     a94:	87 8f       	std	Z+31, r24	; 0x1f
     a96:	60 a3       	std	Z+32, r22	; 0x20
     a98:	61 e0       	ldi	r22, 0x01	; 1
     a9a:	cf 01       	movw	r24, r30
     a9c:	ae df       	rcall	.-164    	; 0x9fa <xQueueGenericReset>
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	08 95       	ret

00000aa4 <xQueueGenericCreate>:
     aa4:	df 92       	push	r13
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	f8 2e       	mov	r15, r24
     ab4:	e6 2e       	mov	r14, r22
     ab6:	d4 2e       	mov	r13, r20
     ab8:	86 9f       	mul	r24, r22
     aba:	c0 01       	movw	r24, r0
     abc:	11 24       	eor	r1, r1
     abe:	83 96       	adiw	r24, 0x23	; 35
     ac0:	48 dc       	rcall	.-1904   	; 0x352 <pvPortMalloc>
     ac2:	ec 01       	movw	r28, r24
     ac4:	00 97       	sbiw	r24, 0x00	; 0
     ac6:	41 f0       	breq	.+16     	; 0xad8 <xQueueGenericCreate+0x34>
     ac8:	8c 01       	movw	r16, r24
     aca:	2d 2d       	mov	r18, r13
     acc:	ac 01       	movw	r20, r24
     ace:	4d 5d       	subi	r20, 0xDD	; 221
     ad0:	5f 4f       	sbci	r21, 0xFF	; 255
     ad2:	6e 2d       	mov	r22, r14
     ad4:	8f 2d       	mov	r24, r15
     ad6:	d4 df       	rcall	.-88     	; 0xa80 <prvInitialiseNewQueue>
     ad8:	ce 01       	movw	r24, r28
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	08 95       	ret

00000aea <xQueueGenericSend>:
     aea:	cf 92       	push	r12
     aec:	df 92       	push	r13
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	29 97       	sbiw	r28, 0x09	; 9
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	7c 01       	movw	r14, r24
     b0c:	6b 01       	movw	r12, r22
     b0e:	2e 83       	std	Y+6, r18	; 0x06
     b10:	3f 83       	std	Y+7, r19	; 0x07
     b12:	48 87       	std	Y+8, r20	; 0x08
     b14:	59 87       	std	Y+9, r21	; 0x09
     b16:	10 e0       	ldi	r17, 0x00	; 0
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	0f 92       	push	r0
     b1e:	f7 01       	movw	r30, r14
     b20:	96 8d       	ldd	r25, Z+30	; 0x1e
     b22:	87 8d       	ldd	r24, Z+31	; 0x1f
     b24:	98 17       	cp	r25, r24
     b26:	10 f0       	brcs	.+4      	; 0xb2c <xQueueGenericSend+0x42>
     b28:	02 30       	cpi	r16, 0x02	; 2
     b2a:	b1 f4       	brne	.+44     	; 0xb58 <xQueueGenericSend+0x6e>
     b2c:	40 2f       	mov	r20, r16
     b2e:	b6 01       	movw	r22, r12
     b30:	c7 01       	movw	r24, r14
     b32:	b6 de       	rcall	.-660    	; 0x8a0 <prvCopyDataToQueue>
     b34:	f7 01       	movw	r30, r14
     b36:	93 89       	ldd	r25, Z+19	; 0x13
     b38:	99 23       	and	r25, r25
     b3a:	41 f0       	breq	.+16     	; 0xb4c <xQueueGenericSend+0x62>
     b3c:	c7 01       	movw	r24, r14
     b3e:	43 96       	adiw	r24, 0x13	; 19
     b40:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <xTaskRemoveFromEventList>
     b44:	88 23       	and	r24, r24
     b46:	21 f0       	breq	.+8      	; 0xb50 <xQueueGenericSend+0x66>
     b48:	b8 dd       	rcall	.-1168   	; 0x6ba <vPortYield>
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <xQueueGenericSend+0x66>
     b4c:	81 11       	cpse	r24, r1
     b4e:	b5 dd       	rcall	.-1174   	; 0x6ba <vPortYield>
     b50:	0f 90       	pop	r0
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	4c c0       	rjmp	.+152    	; 0xbf0 <xQueueGenericSend+0x106>
     b58:	8e 81       	ldd	r24, Y+6	; 0x06
     b5a:	9f 81       	ldd	r25, Y+7	; 0x07
     b5c:	a8 85       	ldd	r26, Y+8	; 0x08
     b5e:	b9 85       	ldd	r27, Y+9	; 0x09
     b60:	89 2b       	or	r24, r25
     b62:	8a 2b       	or	r24, r26
     b64:	8b 2b       	or	r24, r27
     b66:	21 f4       	brne	.+8      	; 0xb70 <xQueueGenericSend+0x86>
     b68:	0f 90       	pop	r0
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	40 c0       	rjmp	.+128    	; 0xbf0 <xQueueGenericSend+0x106>
     b70:	11 11       	cpse	r17, r1
     b72:	05 c0       	rjmp	.+10     	; 0xb7e <xQueueGenericSend+0x94>
     b74:	ce 01       	movw	r24, r28
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	0e 94 40 11 	call	0x2280	; 0x2280 <vTaskInternalSetTimeOutState>
     b7c:	11 e0       	ldi	r17, 0x01	; 1
     b7e:	0f 90       	pop	r0
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	c4 d7       	rcall	.+3976   	; 0x1b0c <vTaskSuspendAll>
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	0f 92       	push	r0
     b8a:	f7 01       	movw	r30, r14
     b8c:	81 a1       	ldd	r24, Z+33	; 0x21
     b8e:	8f 3f       	cpi	r24, 0xFF	; 255
     b90:	09 f4       	brne	.+2      	; 0xb94 <xQueueGenericSend+0xaa>
     b92:	11 a2       	std	Z+33, r1	; 0x21
     b94:	f7 01       	movw	r30, r14
     b96:	82 a1       	ldd	r24, Z+34	; 0x22
     b98:	8f 3f       	cpi	r24, 0xFF	; 255
     b9a:	09 f4       	brne	.+2      	; 0xb9e <xQueueGenericSend+0xb4>
     b9c:	12 a2       	std	Z+34, r1	; 0x22
     b9e:	0f 90       	pop	r0
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	be 01       	movw	r22, r28
     ba4:	6a 5f       	subi	r22, 0xFA	; 250
     ba6:	7f 4f       	sbci	r23, 0xFF	; 255
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	0e 94 51 11 	call	0x22a2	; 0x22a2 <xTaskCheckForTimeOut>
     bb0:	81 11       	cpse	r24, r1
     bb2:	19 c0       	rjmp	.+50     	; 0xbe6 <xQueueGenericSend+0xfc>
     bb4:	c7 01       	movw	r24, r14
     bb6:	66 de       	rcall	.-820    	; 0x884 <prvIsQueueFull>
     bb8:	88 23       	and	r24, r24
     bba:	81 f0       	breq	.+32     	; 0xbdc <xQueueGenericSend+0xf2>
     bbc:	4e 81       	ldd	r20, Y+6	; 0x06
     bbe:	5f 81       	ldd	r21, Y+7	; 0x07
     bc0:	68 85       	ldd	r22, Y+8	; 0x08
     bc2:	79 85       	ldd	r23, Y+9	; 0x09
     bc4:	c7 01       	movw	r24, r14
     bc6:	08 96       	adiw	r24, 0x08	; 8
     bc8:	0e 94 22 10 	call	0x2044	; 0x2044 <vTaskPlaceOnEventList>
     bcc:	c7 01       	movw	r24, r14
     bce:	e1 de       	rcall	.-574    	; 0x992 <prvUnlockQueue>
     bd0:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <xTaskResumeAll>
     bd4:	81 11       	cpse	r24, r1
     bd6:	a0 cf       	rjmp	.-192    	; 0xb18 <xQueueGenericSend+0x2e>
     bd8:	70 dd       	rcall	.-1312   	; 0x6ba <vPortYield>
     bda:	9e cf       	rjmp	.-196    	; 0xb18 <xQueueGenericSend+0x2e>
     bdc:	c7 01       	movw	r24, r14
     bde:	d9 de       	rcall	.-590    	; 0x992 <prvUnlockQueue>
     be0:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <xTaskResumeAll>
     be4:	99 cf       	rjmp	.-206    	; 0xb18 <xQueueGenericSend+0x2e>
     be6:	c7 01       	movw	r24, r14
     be8:	d4 de       	rcall	.-600    	; 0x992 <prvUnlockQueue>
     bea:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <xTaskResumeAll>
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	29 96       	adiw	r28, 0x09	; 9
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	df 90       	pop	r13
     c0a:	cf 90       	pop	r12
     c0c:	08 95       	ret

00000c0e <prvInitialiseMutex>:
     c0e:	0f 93       	push	r16
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	69 f0       	breq	.+26     	; 0xc2e <prvInitialiseMutex+0x20>
     c14:	fc 01       	movw	r30, r24
     c16:	15 82       	std	Z+5, r1	; 0x05
     c18:	14 82       	std	Z+4, r1	; 0x04
     c1a:	11 82       	std	Z+1, r1	; 0x01
     c1c:	10 82       	st	Z, r1
     c1e:	16 82       	std	Z+6, r1	; 0x06
     c20:	00 e0       	ldi	r16, 0x00	; 0
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	a9 01       	movw	r20, r18
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	5e df       	rcall	.-324    	; 0xaea <xQueueGenericSend>
     c2e:	0f 91       	pop	r16
     c30:	08 95       	ret

00000c32 <xQueueCreateMutex>:
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	48 2f       	mov	r20, r24
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	33 df       	rcall	.-410    	; 0xaa4 <xQueueGenericCreate>
     c3e:	ec 01       	movw	r28, r24
     c40:	e6 df       	rcall	.-52     	; 0xc0e <prvInitialiseMutex>
     c42:	ce 01       	movw	r24, r28
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	08 95       	ret

00000c4a <xQueueGenericSendFromISR>:
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	8a 01       	movw	r16, r20
     c58:	fc 01       	movw	r30, r24
     c5a:	56 8d       	ldd	r21, Z+30	; 0x1e
     c5c:	37 8d       	ldd	r19, Z+31	; 0x1f
     c5e:	53 17       	cp	r21, r19
     c60:	10 f0       	brcs	.+4      	; 0xc66 <xQueueGenericSendFromISR+0x1c>
     c62:	22 30       	cpi	r18, 0x02	; 2
     c64:	f9 f4       	brne	.+62     	; 0xca4 <xQueueGenericSendFromISR+0x5a>
     c66:	42 2f       	mov	r20, r18
     c68:	78 01       	movw	r14, r16
     c6a:	ec 01       	movw	r28, r24
     c6c:	1a a1       	ldd	r17, Y+34	; 0x22
     c6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c70:	ce 01       	movw	r24, r28
     c72:	16 de       	rcall	.-980    	; 0x8a0 <prvCopyDataToQueue>
     c74:	1f 3f       	cpi	r17, 0xFF	; 255
     c76:	81 f4       	brne	.+32     	; 0xc98 <xQueueGenericSendFromISR+0x4e>
     c78:	8b 89       	ldd	r24, Y+19	; 0x13
     c7a:	88 23       	and	r24, r24
     c7c:	a9 f0       	breq	.+42     	; 0xca8 <xQueueGenericSendFromISR+0x5e>
     c7e:	ce 01       	movw	r24, r28
     c80:	43 96       	adiw	r24, 0x13	; 19
     c82:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <xTaskRemoveFromEventList>
     c86:	88 23       	and	r24, r24
     c88:	89 f0       	breq	.+34     	; 0xcac <xQueueGenericSendFromISR+0x62>
     c8a:	e1 14       	cp	r14, r1
     c8c:	f1 04       	cpc	r15, r1
     c8e:	81 f0       	breq	.+32     	; 0xcb0 <xQueueGenericSendFromISR+0x66>
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	f7 01       	movw	r30, r14
     c94:	80 83       	st	Z, r24
     c96:	0d c0       	rjmp	.+26     	; 0xcb2 <xQueueGenericSendFromISR+0x68>
     c98:	ff 24       	eor	r15, r15
     c9a:	f3 94       	inc	r15
     c9c:	f1 0e       	add	r15, r17
     c9e:	fa a2       	std	Y+34, r15	; 0x22
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	07 c0       	rjmp	.+14     	; 0xcb2 <xQueueGenericSendFromISR+0x68>
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <xQueueGenericSendFromISR+0x68>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <xQueueGenericSendFromISR+0x68>
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	01 c0       	rjmp	.+2      	; 0xcb2 <xQueueGenericSendFromISR+0x68>
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	ff 90       	pop	r15
     cbc:	ef 90       	pop	r14
     cbe:	08 95       	ret

00000cc0 <xQueueReceive>:
     cc0:	cf 92       	push	r12
     cc2:	df 92       	push	r13
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	29 97       	sbiw	r28, 0x09	; 9
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	8c 01       	movw	r16, r24
     ce2:	6b 01       	movw	r12, r22
     ce4:	2e 83       	std	Y+6, r18	; 0x06
     ce6:	3f 83       	std	Y+7, r19	; 0x07
     ce8:	48 87       	std	Y+8, r20	; 0x08
     cea:	59 87       	std	Y+9, r21	; 0x09
     cec:	e1 2c       	mov	r14, r1
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	0f 92       	push	r0
     cf4:	f8 01       	movw	r30, r16
     cf6:	f6 8c       	ldd	r15, Z+30	; 0x1e
     cf8:	ff 20       	and	r15, r15
     cfa:	99 f0       	breq	.+38     	; 0xd22 <xQueueReceive+0x62>
     cfc:	b6 01       	movw	r22, r12
     cfe:	c8 01       	movw	r24, r16
     d00:	2e de       	rcall	.-932    	; 0x95e <prvCopyDataFromQueue>
     d02:	fa 94       	dec	r15
     d04:	f8 01       	movw	r30, r16
     d06:	f6 8e       	std	Z+30, r15	; 0x1e
     d08:	80 85       	ldd	r24, Z+8	; 0x08
     d0a:	88 23       	and	r24, r24
     d0c:	31 f0       	breq	.+12     	; 0xd1a <xQueueReceive+0x5a>
     d0e:	c8 01       	movw	r24, r16
     d10:	08 96       	adiw	r24, 0x08	; 8
     d12:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <xTaskRemoveFromEventList>
     d16:	81 11       	cpse	r24, r1
     d18:	d0 dc       	rcall	.-1632   	; 0x6ba <vPortYield>
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	4f c0       	rjmp	.+158    	; 0xdc0 <xQueueReceive+0x100>
     d22:	8e 81       	ldd	r24, Y+6	; 0x06
     d24:	9f 81       	ldd	r25, Y+7	; 0x07
     d26:	a8 85       	ldd	r26, Y+8	; 0x08
     d28:	b9 85       	ldd	r27, Y+9	; 0x09
     d2a:	89 2b       	or	r24, r25
     d2c:	8a 2b       	or	r24, r26
     d2e:	8b 2b       	or	r24, r27
     d30:	21 f4       	brne	.+8      	; 0xd3a <xQueueReceive+0x7a>
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	43 c0       	rjmp	.+134    	; 0xdc0 <xQueueReceive+0x100>
     d3a:	e1 10       	cpse	r14, r1
     d3c:	06 c0       	rjmp	.+12     	; 0xd4a <xQueueReceive+0x8a>
     d3e:	ce 01       	movw	r24, r28
     d40:	01 96       	adiw	r24, 0x01	; 1
     d42:	0e 94 40 11 	call	0x2280	; 0x2280 <vTaskInternalSetTimeOutState>
     d46:	ee 24       	eor	r14, r14
     d48:	e3 94       	inc	r14
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	de d6       	rcall	.+3516   	; 0x1b0c <vTaskSuspendAll>
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	0f 92       	push	r0
     d56:	f8 01       	movw	r30, r16
     d58:	81 a1       	ldd	r24, Z+33	; 0x21
     d5a:	8f 3f       	cpi	r24, 0xFF	; 255
     d5c:	09 f4       	brne	.+2      	; 0xd60 <xQueueReceive+0xa0>
     d5e:	11 a2       	std	Z+33, r1	; 0x21
     d60:	f8 01       	movw	r30, r16
     d62:	82 a1       	ldd	r24, Z+34	; 0x22
     d64:	8f 3f       	cpi	r24, 0xFF	; 255
     d66:	09 f4       	brne	.+2      	; 0xd6a <xQueueReceive+0xaa>
     d68:	12 a2       	std	Z+34, r1	; 0x22
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	be 01       	movw	r22, r28
     d70:	6a 5f       	subi	r22, 0xFA	; 250
     d72:	7f 4f       	sbci	r23, 0xFF	; 255
     d74:	ce 01       	movw	r24, r28
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	0e 94 51 11 	call	0x22a2	; 0x22a2 <xTaskCheckForTimeOut>
     d7c:	81 11       	cpse	r24, r1
     d7e:	17 c0       	rjmp	.+46     	; 0xdae <xQueueReceive+0xee>
     d80:	c8 01       	movw	r24, r16
     d82:	73 dd       	rcall	.-1306   	; 0x86a <prvIsQueueEmpty>
     d84:	88 23       	and	r24, r24
     d86:	79 f0       	breq	.+30     	; 0xda6 <xQueueReceive+0xe6>
     d88:	4e 81       	ldd	r20, Y+6	; 0x06
     d8a:	5f 81       	ldd	r21, Y+7	; 0x07
     d8c:	68 85       	ldd	r22, Y+8	; 0x08
     d8e:	79 85       	ldd	r23, Y+9	; 0x09
     d90:	c8 01       	movw	r24, r16
     d92:	43 96       	adiw	r24, 0x13	; 19
     d94:	0e 94 22 10 	call	0x2044	; 0x2044 <vTaskPlaceOnEventList>
     d98:	c8 01       	movw	r24, r16
     d9a:	fb dd       	rcall	.-1034   	; 0x992 <prvUnlockQueue>
     d9c:	f7 d7       	rcall	.+4078   	; 0x1d8c <xTaskResumeAll>
     d9e:	81 11       	cpse	r24, r1
     da0:	a6 cf       	rjmp	.-180    	; 0xcee <xQueueReceive+0x2e>
     da2:	8b dc       	rcall	.-1770   	; 0x6ba <vPortYield>
     da4:	a4 cf       	rjmp	.-184    	; 0xcee <xQueueReceive+0x2e>
     da6:	c8 01       	movw	r24, r16
     da8:	f4 dd       	rcall	.-1048   	; 0x992 <prvUnlockQueue>
     daa:	f0 d7       	rcall	.+4064   	; 0x1d8c <xTaskResumeAll>
     dac:	a0 cf       	rjmp	.-192    	; 0xcee <xQueueReceive+0x2e>
     dae:	c8 01       	movw	r24, r16
     db0:	f0 dd       	rcall	.-1056   	; 0x992 <prvUnlockQueue>
     db2:	ec d7       	rcall	.+4056   	; 0x1d8c <xTaskResumeAll>
     db4:	c8 01       	movw	r24, r16
     db6:	59 dd       	rcall	.-1358   	; 0x86a <prvIsQueueEmpty>
     db8:	88 23       	and	r24, r24
     dba:	09 f4       	brne	.+2      	; 0xdbe <xQueueReceive+0xfe>
     dbc:	98 cf       	rjmp	.-208    	; 0xcee <xQueueReceive+0x2e>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	29 96       	adiw	r28, 0x09	; 9
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	08 95       	ret

00000dde <xQueueSemaphoreTake>:
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	29 97       	sbiw	r28, 0x09	; 9
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	8c 01       	movw	r16, r24
     dfc:	4e 83       	std	Y+6, r20	; 0x06
     dfe:	5f 83       	std	Y+7, r21	; 0x07
     e00:	68 87       	std	Y+8, r22	; 0x08
     e02:	79 87       	std	Y+9, r23	; 0x09
     e04:	e1 2c       	mov	r14, r1
     e06:	f1 2c       	mov	r15, r1
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	0f 92       	push	r0
     e0e:	f8 01       	movw	r30, r16
     e10:	86 8d       	ldd	r24, Z+30	; 0x1e
     e12:	88 23       	and	r24, r24
     e14:	c9 f0       	breq	.+50     	; 0xe48 <xQueueSemaphoreTake+0x6a>
     e16:	81 50       	subi	r24, 0x01	; 1
     e18:	86 8f       	std	Z+30, r24	; 0x1e
     e1a:	80 81       	ld	r24, Z
     e1c:	91 81       	ldd	r25, Z+1	; 0x01
     e1e:	89 2b       	or	r24, r25
     e20:	29 f4       	brne	.+10     	; 0xe2c <xQueueSemaphoreTake+0x4e>
     e22:	0e 94 17 13 	call	0x262e	; 0x262e <pvTaskIncrementMutexHeldCount>
     e26:	f8 01       	movw	r30, r16
     e28:	95 83       	std	Z+5, r25	; 0x05
     e2a:	84 83       	std	Z+4, r24	; 0x04
     e2c:	f8 01       	movw	r30, r16
     e2e:	80 85       	ldd	r24, Z+8	; 0x08
     e30:	88 23       	and	r24, r24
     e32:	31 f0       	breq	.+12     	; 0xe40 <xQueueSemaphoreTake+0x62>
     e34:	c8 01       	movw	r24, r16
     e36:	08 96       	adiw	r24, 0x08	; 8
     e38:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <xTaskRemoveFromEventList>
     e3c:	81 11       	cpse	r24, r1
     e3e:	3d dc       	rcall	.-1926   	; 0x6ba <vPortYield>
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	6f c0       	rjmp	.+222    	; 0xf26 <xQueueSemaphoreTake+0x148>
     e48:	8e 81       	ldd	r24, Y+6	; 0x06
     e4a:	9f 81       	ldd	r25, Y+7	; 0x07
     e4c:	a8 85       	ldd	r26, Y+8	; 0x08
     e4e:	b9 85       	ldd	r27, Y+9	; 0x09
     e50:	89 2b       	or	r24, r25
     e52:	8a 2b       	or	r24, r26
     e54:	8b 2b       	or	r24, r27
     e56:	21 f4       	brne	.+8      	; 0xe60 <xQueueSemaphoreTake+0x82>
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	63 c0       	rjmp	.+198    	; 0xf26 <xQueueSemaphoreTake+0x148>
     e60:	f1 10       	cpse	r15, r1
     e62:	06 c0       	rjmp	.+12     	; 0xe70 <xQueueSemaphoreTake+0x92>
     e64:	ce 01       	movw	r24, r28
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	0e 94 40 11 	call	0x2280	; 0x2280 <vTaskInternalSetTimeOutState>
     e6c:	ff 24       	eor	r15, r15
     e6e:	f3 94       	inc	r15
     e70:	0f 90       	pop	r0
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	4b d6       	rcall	.+3222   	; 0x1b0c <vTaskSuspendAll>
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	0f 92       	push	r0
     e7c:	f8 01       	movw	r30, r16
     e7e:	81 a1       	ldd	r24, Z+33	; 0x21
     e80:	8f 3f       	cpi	r24, 0xFF	; 255
     e82:	09 f4       	brne	.+2      	; 0xe86 <xQueueSemaphoreTake+0xa8>
     e84:	11 a2       	std	Z+33, r1	; 0x21
     e86:	f8 01       	movw	r30, r16
     e88:	82 a1       	ldd	r24, Z+34	; 0x22
     e8a:	8f 3f       	cpi	r24, 0xFF	; 255
     e8c:	09 f4       	brne	.+2      	; 0xe90 <xQueueSemaphoreTake+0xb2>
     e8e:	12 a2       	std	Z+34, r1	; 0x22
     e90:	0f 90       	pop	r0
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	be 01       	movw	r22, r28
     e96:	6a 5f       	subi	r22, 0xFA	; 250
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	ce 01       	movw	r24, r28
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	0e 94 51 11 	call	0x22a2	; 0x22a2 <xTaskCheckForTimeOut>
     ea2:	81 11       	cpse	r24, r1
     ea4:	26 c0       	rjmp	.+76     	; 0xef2 <xQueueSemaphoreTake+0x114>
     ea6:	c8 01       	movw	r24, r16
     ea8:	e0 dc       	rcall	.-1600   	; 0x86a <prvIsQueueEmpty>
     eaa:	88 23       	and	r24, r24
     eac:	f1 f0       	breq	.+60     	; 0xeea <xQueueSemaphoreTake+0x10c>
     eae:	f8 01       	movw	r30, r16
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	89 2b       	or	r24, r25
     eb6:	51 f4       	brne	.+20     	; 0xecc <xQueueSemaphoreTake+0xee>
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	0f 92       	push	r0
     ebe:	84 81       	ldd	r24, Z+4	; 0x04
     ec0:	95 81       	ldd	r25, Z+5	; 0x05
     ec2:	0e 94 ce 11 	call	0x239c	; 0x239c <xTaskPriorityInherit>
     ec6:	e8 2e       	mov	r14, r24
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	4e 81       	ldd	r20, Y+6	; 0x06
     ece:	5f 81       	ldd	r21, Y+7	; 0x07
     ed0:	68 85       	ldd	r22, Y+8	; 0x08
     ed2:	79 85       	ldd	r23, Y+9	; 0x09
     ed4:	c8 01       	movw	r24, r16
     ed6:	43 96       	adiw	r24, 0x13	; 19
     ed8:	0e 94 22 10 	call	0x2044	; 0x2044 <vTaskPlaceOnEventList>
     edc:	c8 01       	movw	r24, r16
     ede:	59 dd       	rcall	.-1358   	; 0x992 <prvUnlockQueue>
     ee0:	55 d7       	rcall	.+3754   	; 0x1d8c <xTaskResumeAll>
     ee2:	81 11       	cpse	r24, r1
     ee4:	91 cf       	rjmp	.-222    	; 0xe08 <xQueueSemaphoreTake+0x2a>
     ee6:	e9 db       	rcall	.-2094   	; 0x6ba <vPortYield>
     ee8:	8f cf       	rjmp	.-226    	; 0xe08 <xQueueSemaphoreTake+0x2a>
     eea:	c8 01       	movw	r24, r16
     eec:	52 dd       	rcall	.-1372   	; 0x992 <prvUnlockQueue>
     eee:	4e d7       	rcall	.+3740   	; 0x1d8c <xTaskResumeAll>
     ef0:	8b cf       	rjmp	.-234    	; 0xe08 <xQueueSemaphoreTake+0x2a>
     ef2:	c8 01       	movw	r24, r16
     ef4:	4e dd       	rcall	.-1380   	; 0x992 <prvUnlockQueue>
     ef6:	4a d7       	rcall	.+3732   	; 0x1d8c <xTaskResumeAll>
     ef8:	c8 01       	movw	r24, r16
     efa:	b7 dc       	rcall	.-1682   	; 0x86a <prvIsQueueEmpty>
     efc:	88 23       	and	r24, r24
     efe:	09 f4       	brne	.+2      	; 0xf02 <xQueueSemaphoreTake+0x124>
     f00:	83 cf       	rjmp	.-250    	; 0xe08 <xQueueSemaphoreTake+0x2a>
     f02:	ee 20       	and	r14, r14
     f04:	79 f0       	breq	.+30     	; 0xf24 <xQueueSemaphoreTake+0x146>
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	0f 92       	push	r0
     f0c:	c8 01       	movw	r24, r16
     f0e:	9d dc       	rcall	.-1734   	; 0x84a <prvGetDisinheritPriorityAfterTimeout>
     f10:	68 2f       	mov	r22, r24
     f12:	f8 01       	movw	r30, r16
     f14:	84 81       	ldd	r24, Z+4	; 0x04
     f16:	95 81       	ldd	r25, Z+5	; 0x05
     f18:	0e 94 b0 12 	call	0x2560	; 0x2560 <vTaskPriorityDisinheritAfterTimeout>
     f1c:	0f 90       	pop	r0
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <xQueueSemaphoreTake+0x148>
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	29 96       	adiw	r28, 0x09	; 9
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	ff 90       	pop	r15
     f3c:	ef 90       	pop	r14
     f3e:	08 95       	ret

00000f40 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	0f 92       	push	r0
     f4c:	89 a1       	ldd	r24, Y+33	; 0x21
     f4e:	8f 3f       	cpi	r24, 0xFF	; 255
     f50:	09 f4       	brne	.+2      	; 0xf54 <vQueueWaitForMessageRestricted+0x14>
     f52:	19 a2       	std	Y+33, r1	; 0x21
     f54:	8a a1       	ldd	r24, Y+34	; 0x22
     f56:	8f 3f       	cpi	r24, 0xFF	; 255
     f58:	09 f4       	brne	.+2      	; 0xf5c <vQueueWaitForMessageRestricted+0x1c>
     f5a:	1a a2       	std	Y+34, r1	; 0x22
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     f60:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f62:	81 11       	cpse	r24, r1
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     f66:	ce 01       	movw	r24, r28
     f68:	43 96       	adiw	r24, 0x13	; 19
     f6a:	0e 94 39 10 	call	0x2072	; 0x2072 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     f6e:	ce 01       	movw	r24, r28
     f70:	10 dd       	rcall	.-1504   	; 0x992 <prvUnlockQueue>
    }
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     f78:	fc 01       	movw	r30, r24
     f7a:	44 81       	ldd	r20, Z+4	; 0x04
     f7c:	55 81       	ldd	r21, Z+5	; 0x05
     f7e:	22 81       	ldd	r18, Z+2	; 0x02
     f80:	33 81       	ldd	r19, Z+3	; 0x03
     f82:	24 0f       	add	r18, r20
     f84:	35 1f       	adc	r19, r21
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	b9 01       	movw	r22, r18
     f8c:	68 1b       	sub	r22, r24
     f8e:	79 0b       	sbc	r23, r25
     f90:	cb 01       	movw	r24, r22
     f92:	64 17       	cp	r22, r20
     f94:	75 07       	cpc	r23, r21
     f96:	10 f0       	brcs	.+4      	; 0xf9c <prvBytesInBuffer+0x24>
     f98:	84 1b       	sub	r24, r20
     f9a:	95 0b       	sbc	r25, r21
     f9c:	08 95       	ret

00000f9e <prvInitialiseNewStreamBuffer>:
     f9e:	0f 93       	push	r16
     fa0:	fc 01       	movw	r30, r24
     fa2:	8f e0       	ldi	r24, 0x0F	; 15
     fa4:	df 01       	movw	r26, r30
     fa6:	1d 92       	st	X+, r1
     fa8:	8a 95       	dec	r24
     faa:	e9 f7       	brne	.-6      	; 0xfa6 <prvInitialiseNewStreamBuffer+0x8>
     fac:	75 87       	std	Z+13, r23	; 0x0d
     fae:	64 87       	std	Z+12, r22	; 0x0c
     fb0:	55 83       	std	Z+5, r21	; 0x05
     fb2:	44 83       	std	Z+4, r20	; 0x04
     fb4:	37 83       	std	Z+7, r19	; 0x07
     fb6:	26 83       	std	Z+6, r18	; 0x06
     fb8:	06 87       	std	Z+14, r16	; 0x0e
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <prvWriteBytesToBuffer>:
     fbe:	af 92       	push	r10
     fc0:	bf 92       	push	r11
     fc2:	cf 92       	push	r12
     fc4:	df 92       	push	r13
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	6c 01       	movw	r12, r24
     fd4:	5b 01       	movw	r10, r22
     fd6:	7a 01       	movw	r14, r20
     fd8:	fc 01       	movw	r30, r24
     fda:	c2 81       	ldd	r28, Z+2	; 0x02
     fdc:	d3 81       	ldd	r29, Z+3	; 0x03
     fde:	04 81       	ldd	r16, Z+4	; 0x04
     fe0:	15 81       	ldd	r17, Z+5	; 0x05
     fe2:	0c 1b       	sub	r16, r28
     fe4:	1d 0b       	sbc	r17, r29
     fe6:	40 17       	cp	r20, r16
     fe8:	51 07       	cpc	r21, r17
     fea:	08 f4       	brcc	.+2      	; 0xfee <prvWriteBytesToBuffer+0x30>
     fec:	8a 01       	movw	r16, r20
     fee:	f6 01       	movw	r30, r12
     ff0:	84 85       	ldd	r24, Z+12	; 0x0c
     ff2:	95 85       	ldd	r25, Z+13	; 0x0d
     ff4:	a8 01       	movw	r20, r16
     ff6:	b5 01       	movw	r22, r10
     ff8:	8c 0f       	add	r24, r28
     ffa:	9d 1f       	adc	r25, r29
     ffc:	0e 94 76 2b 	call	0x56ec	; 0x56ec <memcpy>
    1000:	0e 15       	cp	r16, r14
    1002:	1f 05       	cpc	r17, r15
    1004:	58 f4       	brcc	.+22     	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
    1006:	a7 01       	movw	r20, r14
    1008:	40 1b       	sub	r20, r16
    100a:	51 0b       	sbc	r21, r17
    100c:	b5 01       	movw	r22, r10
    100e:	60 0f       	add	r22, r16
    1010:	71 1f       	adc	r23, r17
    1012:	f6 01       	movw	r30, r12
    1014:	84 85       	ldd	r24, Z+12	; 0x0c
    1016:	95 85       	ldd	r25, Z+13	; 0x0d
    1018:	0e 94 76 2b 	call	0x56ec	; 0x56ec <memcpy>
    101c:	ce 01       	movw	r24, r28
    101e:	8e 0d       	add	r24, r14
    1020:	9f 1d       	adc	r25, r15
    1022:	f6 01       	movw	r30, r12
    1024:	24 81       	ldd	r18, Z+4	; 0x04
    1026:	35 81       	ldd	r19, Z+5	; 0x05
    1028:	82 17       	cp	r24, r18
    102a:	93 07       	cpc	r25, r19
    102c:	10 f0       	brcs	.+4      	; 0x1032 <__EEPROM_REGION_LENGTH__+0x32>
    102e:	82 1b       	sub	r24, r18
    1030:	93 0b       	sbc	r25, r19
    1032:	f6 01       	movw	r30, r12
    1034:	93 83       	std	Z+3, r25	; 0x03
    1036:	82 83       	std	Z+2, r24	; 0x02
    1038:	c7 01       	movw	r24, r14
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	df 90       	pop	r13
    1048:	cf 90       	pop	r12
    104a:	bf 90       	pop	r11
    104c:	af 90       	pop	r10
    104e:	08 95       	ret

00001050 <prvWriteMessageToBuffer>:
    1050:	cf 92       	push	r12
    1052:	df 92       	push	r13
    1054:	ef 92       	push	r14
    1056:	ff 92       	push	r15
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	1f 92       	push	r1
    1062:	1f 92       	push	r1
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	7c 01       	movw	r14, r24
    106a:	6b 01       	movw	r12, r22
    106c:	5a 83       	std	Y+2, r21	; 0x02
    106e:	49 83       	std	Y+1, r20	; 0x01
    1070:	21 15       	cp	r18, r1
    1072:	31 05       	cpc	r19, r1
    1074:	c1 f0       	breq	.+48     	; 0x10a6 <prvWriteMessageToBuffer+0x56>
    1076:	fc 01       	movw	r30, r24
    1078:	86 85       	ldd	r24, Z+14	; 0x0e
    107a:	80 fd       	sbrc	r24, 0
    107c:	08 c0       	rjmp	.+16     	; 0x108e <prvWriteMessageToBuffer+0x3e>
    107e:	42 17       	cp	r20, r18
    1080:	53 07       	cpc	r21, r19
    1082:	08 f4       	brcc	.+2      	; 0x1086 <prvWriteMessageToBuffer+0x36>
    1084:	9a 01       	movw	r18, r20
    1086:	3a 83       	std	Y+2, r19	; 0x02
    1088:	29 83       	std	Y+1, r18	; 0x01
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	0f c0       	rjmp	.+30     	; 0x10ac <prvWriteMessageToBuffer+0x5c>
    108e:	20 17       	cp	r18, r16
    1090:	31 07       	cpc	r19, r17
    1092:	58 f0       	brcs	.+22     	; 0x10aa <prvWriteMessageToBuffer+0x5a>
    1094:	42 e0       	ldi	r20, 0x02	; 2
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	be 01       	movw	r22, r28
    109a:	6f 5f       	subi	r22, 0xFF	; 255
    109c:	7f 4f       	sbci	r23, 0xFF	; 255
    109e:	c7 01       	movw	r24, r14
    10a0:	8e df       	rcall	.-228    	; 0xfbe <prvWriteBytesToBuffer>
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	03 c0       	rjmp	.+6      	; 0x10ac <prvWriteMessageToBuffer+0x5c>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	01 c0       	rjmp	.+2      	; 0x10ac <prvWriteMessageToBuffer+0x5c>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	88 23       	and	r24, r24
    10ae:	31 f0       	breq	.+12     	; 0x10bc <prvWriteMessageToBuffer+0x6c>
    10b0:	49 81       	ldd	r20, Y+1	; 0x01
    10b2:	5a 81       	ldd	r21, Y+2	; 0x02
    10b4:	b6 01       	movw	r22, r12
    10b6:	c7 01       	movw	r24, r14
    10b8:	82 df       	rcall	.-252    	; 0xfbe <prvWriteBytesToBuffer>
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <prvWriteMessageToBuffer+0x70>
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	08 95       	ret

000010d6 <prvReadBytesFromBuffer>:
    10d6:	af 92       	push	r10
    10d8:	bf 92       	push	r11
    10da:	cf 92       	push	r12
    10dc:	df 92       	push	r13
    10de:	ef 92       	push	r14
    10e0:	ff 92       	push	r15
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	7c 01       	movw	r14, r24
    10ec:	5b 01       	movw	r10, r22
    10ee:	e9 01       	movw	r28, r18
    10f0:	42 17       	cp	r20, r18
    10f2:	53 07       	cpc	r21, r19
    10f4:	08 f4       	brcc	.+2      	; 0x10f8 <prvReadBytesFromBuffer+0x22>
    10f6:	ea 01       	movw	r28, r20
    10f8:	20 97       	sbiw	r28, 0x00	; 0
    10fa:	81 f1       	breq	.+96     	; 0x115c <prvReadBytesFromBuffer+0x86>
    10fc:	f7 01       	movw	r30, r14
    10fe:	00 81       	ld	r16, Z
    1100:	11 81       	ldd	r17, Z+1	; 0x01
    1102:	84 81       	ldd	r24, Z+4	; 0x04
    1104:	95 81       	ldd	r25, Z+5	; 0x05
    1106:	80 1b       	sub	r24, r16
    1108:	91 0b       	sbc	r25, r17
    110a:	6e 01       	movw	r12, r28
    110c:	8c 17       	cp	r24, r28
    110e:	9d 07       	cpc	r25, r29
    1110:	08 f4       	brcc	.+2      	; 0x1114 <prvReadBytesFromBuffer+0x3e>
    1112:	6c 01       	movw	r12, r24
    1114:	f7 01       	movw	r30, r14
    1116:	64 85       	ldd	r22, Z+12	; 0x0c
    1118:	75 85       	ldd	r23, Z+13	; 0x0d
    111a:	60 0f       	add	r22, r16
    111c:	71 1f       	adc	r23, r17
    111e:	a6 01       	movw	r20, r12
    1120:	c5 01       	movw	r24, r10
    1122:	0e 94 76 2b 	call	0x56ec	; 0x56ec <memcpy>
    1126:	cc 16       	cp	r12, r28
    1128:	dd 06       	cpc	r13, r29
    112a:	58 f4       	brcc	.+22     	; 0x1142 <prvReadBytesFromBuffer+0x6c>
    112c:	ae 01       	movw	r20, r28
    112e:	4c 19       	sub	r20, r12
    1130:	5d 09       	sbc	r21, r13
    1132:	f7 01       	movw	r30, r14
    1134:	64 85       	ldd	r22, Z+12	; 0x0c
    1136:	75 85       	ldd	r23, Z+13	; 0x0d
    1138:	c5 01       	movw	r24, r10
    113a:	8c 0d       	add	r24, r12
    113c:	9d 1d       	adc	r25, r13
    113e:	0e 94 76 2b 	call	0x56ec	; 0x56ec <memcpy>
    1142:	0c 0f       	add	r16, r28
    1144:	1d 1f       	adc	r17, r29
    1146:	f7 01       	movw	r30, r14
    1148:	84 81       	ldd	r24, Z+4	; 0x04
    114a:	95 81       	ldd	r25, Z+5	; 0x05
    114c:	08 17       	cp	r16, r24
    114e:	19 07       	cpc	r17, r25
    1150:	10 f0       	brcs	.+4      	; 0x1156 <prvReadBytesFromBuffer+0x80>
    1152:	08 1b       	sub	r16, r24
    1154:	19 0b       	sbc	r17, r25
    1156:	f7 01       	movw	r30, r14
    1158:	11 83       	std	Z+1, r17	; 0x01
    115a:	00 83       	st	Z, r16
    115c:	ce 01       	movw	r24, r28
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	cf 90       	pop	r12
    116e:	bf 90       	pop	r11
    1170:	af 90       	pop	r10
    1172:	08 95       	ret

00001174 <prvReadMessageFromBuffer>:
    1174:	6f 92       	push	r6
    1176:	7f 92       	push	r7
    1178:	8f 92       	push	r8
    117a:	9f 92       	push	r9
    117c:	af 92       	push	r10
    117e:	bf 92       	push	r11
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	1f 92       	push	r1
    1192:	1f 92       	push	r1
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	6c 01       	movw	r12, r24
    119a:	4b 01       	movw	r8, r22
    119c:	5a 01       	movw	r10, r20
    119e:	79 01       	movw	r14, r18
    11a0:	01 15       	cp	r16, r1
    11a2:	11 05       	cpc	r17, r1
    11a4:	b1 f0       	breq	.+44     	; 0x11d2 <prvReadMessageFromBuffer+0x5e>
    11a6:	fc 01       	movw	r30, r24
    11a8:	60 80       	ld	r6, Z
    11aa:	71 80       	ldd	r7, Z+1	; 0x01
    11ac:	a8 01       	movw	r20, r16
    11ae:	be 01       	movw	r22, r28
    11b0:	6f 5f       	subi	r22, 0xFF	; 255
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	90 df       	rcall	.-224    	; 0x10d6 <prvReadBytesFromBuffer>
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	e0 1a       	sub	r14, r16
    11bc:	f1 0a       	sbc	r15, r17
    11be:	a8 16       	cp	r10, r24
    11c0:	b9 06       	cpc	r11, r25
    11c2:	30 f4       	brcc	.+12     	; 0x11d0 <prvReadMessageFromBuffer+0x5c>
    11c4:	f6 01       	movw	r30, r12
    11c6:	71 82       	std	Z+1, r7	; 0x01
    11c8:	60 82       	st	Z, r6
    11ca:	a1 2c       	mov	r10, r1
    11cc:	b1 2c       	mov	r11, r1
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <prvReadMessageFromBuffer+0x5e>
    11d0:	5c 01       	movw	r10, r24
    11d2:	97 01       	movw	r18, r14
    11d4:	a5 01       	movw	r20, r10
    11d6:	b4 01       	movw	r22, r8
    11d8:	c6 01       	movw	r24, r12
    11da:	7d df       	rcall	.-262    	; 0x10d6 <prvReadBytesFromBuffer>
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ff 90       	pop	r15
    11ea:	ef 90       	pop	r14
    11ec:	df 90       	pop	r13
    11ee:	cf 90       	pop	r12
    11f0:	bf 90       	pop	r11
    11f2:	af 90       	pop	r10
    11f4:	9f 90       	pop	r9
    11f6:	8f 90       	pop	r8
    11f8:	7f 90       	pop	r7
    11fa:	6f 90       	pop	r6
    11fc:	08 95       	ret

000011fe <xStreamBufferGenericCreate>:
    11fe:	cf 92       	push	r12
    1200:	df 92       	push	r13
    1202:	ef 92       	push	r14
    1204:	ff 92       	push	r15
    1206:	0f 93       	push	r16
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	ec 01       	movw	r28, r24
    120e:	6b 01       	movw	r12, r22
    1210:	41 30       	cpi	r20, 0x01	; 1
    1212:	11 f4       	brne	.+4      	; 0x1218 <xStreamBufferGenericCreate+0x1a>
    1214:	01 e0       	ldi	r16, 0x01	; 1
    1216:	01 c0       	rjmp	.+2      	; 0x121a <xStreamBufferGenericCreate+0x1c>
    1218:	00 e0       	ldi	r16, 0x00	; 0
    121a:	c1 14       	cp	r12, r1
    121c:	d1 04       	cpc	r13, r1
    121e:	19 f4       	brne	.+6      	; 0x1226 <xStreamBufferGenericCreate+0x28>
    1220:	cc 24       	eor	r12, r12
    1222:	c3 94       	inc	r12
    1224:	d1 2c       	mov	r13, r1
    1226:	ce 01       	movw	r24, r28
    1228:	40 96       	adiw	r24, 0x10	; 16
    122a:	c8 17       	cp	r28, r24
    122c:	d9 07       	cpc	r29, r25
    122e:	20 f4       	brcc	.+8      	; 0x1238 <xStreamBufferGenericCreate+0x3a>
    1230:	21 96       	adiw	r28, 0x01	; 1
    1232:	8f d8       	rcall	.-3810   	; 0x352 <pvPortMalloc>
    1234:	7c 01       	movw	r14, r24
    1236:	02 c0       	rjmp	.+4      	; 0x123c <xStreamBufferGenericCreate+0x3e>
    1238:	e1 2c       	mov	r14, r1
    123a:	f1 2c       	mov	r15, r1
    123c:	e1 14       	cp	r14, r1
    123e:	f1 04       	cpc	r15, r1
    1240:	39 f0       	breq	.+14     	; 0x1250 <xStreamBufferGenericCreate+0x52>
    1242:	96 01       	movw	r18, r12
    1244:	ae 01       	movw	r20, r28
    1246:	b7 01       	movw	r22, r14
    1248:	61 5f       	subi	r22, 0xF1	; 241
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	c7 01       	movw	r24, r14
    124e:	a7 de       	rcall	.-690    	; 0xf9e <prvInitialiseNewStreamBuffer>
    1250:	c7 01       	movw	r24, r14
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	0f 91       	pop	r16
    1258:	ff 90       	pop	r15
    125a:	ef 90       	pop	r14
    125c:	df 90       	pop	r13
    125e:	cf 90       	pop	r12
    1260:	08 95       	ret

00001262 <xStreamBufferReset>:
    1262:	0f 93       	push	r16
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	0f 92       	push	r0
    126a:	fc 01       	movw	r30, r24
    126c:	20 85       	ldd	r18, Z+8	; 0x08
    126e:	31 85       	ldd	r19, Z+9	; 0x09
    1270:	23 2b       	or	r18, r19
    1272:	71 f4       	brne	.+28     	; 0x1290 <xStreamBufferReset+0x2e>
    1274:	22 85       	ldd	r18, Z+10	; 0x0a
    1276:	33 85       	ldd	r19, Z+11	; 0x0b
    1278:	23 2b       	or	r18, r19
    127a:	61 f4       	brne	.+24     	; 0x1294 <xStreamBufferReset+0x32>
    127c:	26 81       	ldd	r18, Z+6	; 0x06
    127e:	37 81       	ldd	r19, Z+7	; 0x07
    1280:	44 81       	ldd	r20, Z+4	; 0x04
    1282:	55 81       	ldd	r21, Z+5	; 0x05
    1284:	64 85       	ldd	r22, Z+12	; 0x0c
    1286:	75 85       	ldd	r23, Z+13	; 0x0d
    1288:	06 85       	ldd	r16, Z+14	; 0x0e
    128a:	89 de       	rcall	.-750    	; 0xf9e <prvInitialiseNewStreamBuffer>
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <xStreamBufferReset+0x34>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <xStreamBufferReset+0x34>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	0f 90       	pop	r0
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	0f 91       	pop	r16
    129c:	08 95       	ret

0000129e <xStreamBufferSpacesAvailable>:
    129e:	fc 01       	movw	r30, r24
    12a0:	24 81       	ldd	r18, Z+4	; 0x04
    12a2:	35 81       	ldd	r19, Z+5	; 0x05
    12a4:	80 81       	ld	r24, Z
    12a6:	91 81       	ldd	r25, Z+1	; 0x01
    12a8:	82 0f       	add	r24, r18
    12aa:	93 1f       	adc	r25, r19
    12ac:	42 81       	ldd	r20, Z+2	; 0x02
    12ae:	53 81       	ldd	r21, Z+3	; 0x03
    12b0:	84 1b       	sub	r24, r20
    12b2:	95 0b       	sbc	r25, r21
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	82 17       	cp	r24, r18
    12b8:	93 07       	cpc	r25, r19
    12ba:	10 f0       	brcs	.+4      	; 0x12c0 <xStreamBufferSpacesAvailable+0x22>
    12bc:	82 1b       	sub	r24, r18
    12be:	93 0b       	sbc	r25, r19
    12c0:	08 95       	ret

000012c2 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    12c2:	2f 92       	push	r2
    12c4:	3f 92       	push	r3
    12c6:	4f 92       	push	r4
    12c8:	5f 92       	push	r5
    12ca:	6f 92       	push	r6
    12cc:	7f 92       	push	r7
    12ce:	8f 92       	push	r8
    12d0:	9f 92       	push	r9
    12d2:	af 92       	push	r10
    12d4:	bf 92       	push	r11
    12d6:	cf 92       	push	r12
    12d8:	df 92       	push	r13
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	2b 97       	sbiw	r28, 0x0b	; 11
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	4c 01       	movw	r8, r24
    12f8:	7b 87       	std	Y+11, r23	; 0x0b
    12fa:	6a 87       	std	Y+10, r22	; 0x0a
    12fc:	1a 01       	movw	r2, r20
    12fe:	0e 83       	std	Y+6, r16	; 0x06
    1300:	1f 83       	std	Y+7, r17	; 0x07
    1302:	28 87       	std	Y+8, r18	; 0x08
    1304:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1306:	fc 01       	movw	r30, r24
    1308:	84 81       	ldd	r24, Z+4	; 0x04
    130a:	95 81       	ldd	r25, Z+5	; 0x05
    130c:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    130e:	26 85       	ldd	r18, Z+14	; 0x0e
    1310:	20 ff       	sbrs	r18, 0
    1312:	0c c0       	rjmp	.+24     	; 0x132c <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1314:	2a 01       	movw	r4, r20
    1316:	f2 e0       	ldi	r31, 0x02	; 2
    1318:	4f 0e       	add	r4, r31
    131a:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    131c:	84 15       	cp	r24, r4
    131e:	95 05       	cpc	r25, r5
    1320:	58 f4       	brcc	.+22     	; 0x1338 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1322:	1e 82       	std	Y+6, r1	; 0x06
    1324:	1f 82       	std	Y+7, r1	; 0x07
    1326:	18 86       	std	Y+8, r1	; 0x08
    1328:	19 86       	std	Y+9, r1	; 0x09
    132a:	06 c0       	rjmp	.+12     	; 0x1338 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    132c:	84 17       	cp	r24, r20
    132e:	95 07       	cpc	r25, r21
    1330:	10 f0       	brcs	.+4      	; 0x1336 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1332:	2a 01       	movw	r4, r20
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1336:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1338:	8e 81       	ldd	r24, Y+6	; 0x06
    133a:	9f 81       	ldd	r25, Y+7	; 0x07
    133c:	a8 85       	ldd	r26, Y+8	; 0x08
    133e:	b9 85       	ldd	r27, Y+9	; 0x09
    1340:	89 2b       	or	r24, r25
    1342:	8a 2b       	or	r24, r26
    1344:	8b 2b       	or	r24, r27
    1346:	09 f4       	brne	.+2      	; 0x134a <xStreamBufferSend+0x88>
    1348:	36 c0       	rjmp	.+108    	; 0x13b6 <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    134a:	ce 01       	movw	r24, r28
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	82 d7       	rcall	.+3844   	; 0x2254 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1356:	c4 01       	movw	r24, r8
    1358:	a2 df       	rcall	.-188    	; 0x129e <xStreamBufferSpacesAvailable>
    135a:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    135c:	84 15       	cp	r24, r4
    135e:	95 05       	cpc	r25, r5
    1360:	38 f5       	brcc	.+78     	; 0x13b0 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    136c:	0e 94 bb 11 	call	0x2376	; 0x2376 <xTaskGetCurrentTaskHandle>
    1370:	f4 01       	movw	r30, r8
    1372:	93 87       	std	Z+11, r25	; 0x0b
    1374:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    137a:	ae 80       	ldd	r10, Y+6	; 0x06
    137c:	bf 80       	ldd	r11, Y+7	; 0x07
    137e:	c8 84       	ldd	r12, Y+8	; 0x08
    1380:	d9 84       	ldd	r13, Y+9	; 0x09
    1382:	e1 2c       	mov	r14, r1
    1384:	f1 2c       	mov	r15, r1
    1386:	00 e0       	ldi	r16, 0x00	; 0
    1388:	10 e0       	ldi	r17, 0x00	; 0
    138a:	98 01       	movw	r18, r16
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	ba 01       	movw	r22, r20
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	0e 94 29 13 	call	0x2652	; 0x2652 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1398:	f4 01       	movw	r30, r8
    139a:	13 86       	std	Z+11, r1	; 0x0b
    139c:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    139e:	be 01       	movw	r22, r28
    13a0:	6a 5f       	subi	r22, 0xFA	; 250
    13a2:	7f 4f       	sbci	r23, 0xFF	; 255
    13a4:	ce 01       	movw	r24, r28
    13a6:	01 96       	adiw	r24, 0x01	; 1
    13a8:	7c d7       	rcall	.+3832   	; 0x22a2 <xTaskCheckForTimeOut>
    13aa:	88 23       	and	r24, r24
    13ac:	89 f2       	breq	.-94     	; 0x1350 <xStreamBufferSend+0x8e>
    13ae:	05 c0       	rjmp	.+10     	; 0x13ba <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    13b0:	0f 90       	pop	r0
    13b2:	0f be       	out	0x3f, r0	; 63
                    break;
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    13b6:	61 2c       	mov	r6, r1
    13b8:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    13ba:	61 14       	cp	r6, r1
    13bc:	71 04       	cpc	r7, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    13be:	19 f4       	brne	.+6      	; 0x13c6 <xStreamBufferSend+0x104>
    13c0:	c4 01       	movw	r24, r8
    13c2:	6d df       	rcall	.-294    	; 0x129e <xStreamBufferSpacesAvailable>
    13c4:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    13c6:	82 01       	movw	r16, r4
    13c8:	93 01       	movw	r18, r6
    13ca:	a1 01       	movw	r20, r2
    13cc:	6a 85       	ldd	r22, Y+10	; 0x0a
    13ce:	7b 85       	ldd	r23, Y+11	; 0x0b
    13d0:	c4 01       	movw	r24, r8
    13d2:	3e de       	rcall	.-900    	; 0x1050 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    13d4:	6c 01       	movw	r12, r24
    13d6:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    13d8:	e9 f0       	breq	.+58     	; 0x1414 <xStreamBufferSend+0x152>
    13da:	c4 01       	movw	r24, r8
    13dc:	cd dd       	rcall	.-1126   	; 0xf78 <prvBytesInBuffer>
    13de:	f4 01       	movw	r30, r8
    13e0:	26 81       	ldd	r18, Z+6	; 0x06
    13e2:	37 81       	ldd	r19, Z+7	; 0x07
    13e4:	82 17       	cp	r24, r18
    13e6:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    13e8:	a8 f0       	brcs	.+42     	; 0x1414 <xStreamBufferSend+0x152>
    13ea:	90 d3       	rcall	.+1824   	; 0x1b0c <vTaskSuspendAll>
    13ec:	f4 01       	movw	r30, r8
    13ee:	80 85       	ldd	r24, Z+8	; 0x08
    13f0:	91 85       	ldd	r25, Z+9	; 0x09
    13f2:	89 2b       	or	r24, r25
    13f4:	71 f0       	breq	.+28     	; 0x1412 <xStreamBufferSend+0x150>
    13f6:	80 85       	ldd	r24, Z+8	; 0x08
    13f8:	91 85       	ldd	r25, Z+9	; 0x09
    13fa:	e1 2c       	mov	r14, r1
    13fc:	f1 2c       	mov	r15, r1
    13fe:	00 e0       	ldi	r16, 0x00	; 0
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	a9 01       	movw	r20, r18
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <xTaskGenericNotify>
    140c:	f4 01       	movw	r30, r8
    140e:	11 86       	std	Z+9, r1	; 0x09
    1410:	10 86       	std	Z+8, r1	; 0x08
    1412:	bc d4       	rcall	.+2424   	; 0x1d8c <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1414:	c6 01       	movw	r24, r12
    1416:	2b 96       	adiw	r28, 0x0b	; 11
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	ff 90       	pop	r15
    142c:	ef 90       	pop	r14
    142e:	df 90       	pop	r13
    1430:	cf 90       	pop	r12
    1432:	bf 90       	pop	r11
    1434:	af 90       	pop	r10
    1436:	9f 90       	pop	r9
    1438:	8f 90       	pop	r8
    143a:	7f 90       	pop	r7
    143c:	6f 90       	pop	r6
    143e:	5f 90       	pop	r5
    1440:	4f 90       	pop	r4
    1442:	3f 90       	pop	r3
    1444:	2f 90       	pop	r2
    1446:	08 95       	ret

00001448 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1448:	af 92       	push	r10
    144a:	bf 92       	push	r11
    144c:	cf 92       	push	r12
    144e:	df 92       	push	r13
    1450:	ef 92       	push	r14
    1452:	ff 92       	push	r15
    1454:	0f 93       	push	r16
    1456:	1f 93       	push	r17
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	ec 01       	movw	r28, r24
    145e:	7b 01       	movw	r14, r22
    1460:	5a 01       	movw	r10, r20
    1462:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1464:	8e 85       	ldd	r24, Y+14	; 0x0e
    1466:	80 ff       	sbrs	r24, 0
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    146a:	8a 01       	movw	r16, r20
    146c:	0e 5f       	subi	r16, 0xFE	; 254
    146e:	1f 4f       	sbci	r17, 0xFF	; 255
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1472:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1474:	ce 01       	movw	r24, r28
    1476:	13 df       	rcall	.-474    	; 0x129e <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1478:	9c 01       	movw	r18, r24
    147a:	a5 01       	movw	r20, r10
    147c:	b7 01       	movw	r22, r14
    147e:	ce 01       	movw	r24, r28
    1480:	e7 dd       	rcall	.-1074   	; 0x1050 <prvWriteMessageToBuffer>
    1482:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1484:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1486:	c1 f0       	breq	.+48     	; 0x14b8 <xStreamBufferSendFromISR+0x70>
    1488:	ce 01       	movw	r24, r28
    148a:	76 dd       	rcall	.-1300   	; 0xf78 <prvBytesInBuffer>
    148c:	2e 81       	ldd	r18, Y+6	; 0x06
    148e:	3f 81       	ldd	r19, Y+7	; 0x07
    1490:	82 17       	cp	r24, r18
    1492:	93 07       	cpc	r25, r19
    1494:	88 f0       	brcs	.+34     	; 0x14b8 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1496:	88 85       	ldd	r24, Y+8	; 0x08
    1498:	99 85       	ldd	r25, Y+9	; 0x09
    149a:	89 2b       	or	r24, r25
    149c:	69 f0       	breq	.+26     	; 0x14b8 <xStreamBufferSendFromISR+0x70>
    149e:	88 85       	ldd	r24, Y+8	; 0x08
    14a0:	99 85       	ldd	r25, Y+9	; 0x09
    14a2:	e1 2c       	mov	r14, r1
    14a4:	f1 2c       	mov	r15, r1
    14a6:	00 e0       	ldi	r16, 0x00	; 0
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	a9 01       	movw	r20, r18
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	0e 94 c7 14 	call	0x298e	; 0x298e <xTaskGenericNotifyFromISR>
    14b4:	19 86       	std	Y+9, r1	; 0x09
    14b6:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    14b8:	c5 01       	movw	r24, r10
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	cf 90       	pop	r12
    14ca:	bf 90       	pop	r11
    14cc:	af 90       	pop	r10
    14ce:	08 95       	ret

000014d0 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    14d0:	4f 92       	push	r4
    14d2:	5f 92       	push	r5
    14d4:	6f 92       	push	r6
    14d6:	7f 92       	push	r7
    14d8:	8f 92       	push	r8
    14da:	9f 92       	push	r9
    14dc:	af 92       	push	r10
    14de:	bf 92       	push	r11
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	ec 01       	movw	r28, r24
    14f2:	2b 01       	movw	r4, r22
    14f4:	3a 01       	movw	r6, r20
    14f6:	58 01       	movw	r10, r16
    14f8:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    14fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    14fc:	80 ff       	sbrs	r24, 0
    14fe:	05 c0       	rjmp	.+10     	; 0x150a <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1500:	68 94       	set
    1502:	88 24       	eor	r8, r8
    1504:	81 f8       	bld	r8, 1
    1506:	91 2c       	mov	r9, r1
    1508:	02 c0       	rjmp	.+4      	; 0x150e <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    150a:	81 2c       	mov	r8, r1
    150c:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    150e:	a1 14       	cp	r10, r1
    1510:	b1 04       	cpc	r11, r1
    1512:	c1 04       	cpc	r12, r1
    1514:	d1 04       	cpc	r13, r1
    1516:	39 f1       	breq	.+78     	; 0x1566 <xStreamBufferReceive+0x96>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    151e:	ce 01       	movw	r24, r28
    1520:	2b dd       	rcall	.-1450   	; 0xf78 <prvBytesInBuffer>
    1522:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1524:	88 16       	cp	r8, r24
    1526:	99 06       	cpc	r9, r25
    1528:	40 f0       	brcs	.+16     	; 0x153a <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1534:	20 d7       	rcall	.+3648   	; 0x2376 <xTaskGetCurrentTaskHandle>
    1536:	99 87       	std	Y+9, r25	; 0x09
    1538:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    153a:	0f 90       	pop	r0
    153c:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    153e:	8e 14       	cp	r8, r14
    1540:	9f 04       	cpc	r9, r15
    1542:	a0 f0       	brcs	.+40     	; 0x156c <xStreamBufferReceive+0x9c>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1544:	e1 2c       	mov	r14, r1
    1546:	f1 2c       	mov	r15, r1
    1548:	00 e0       	ldi	r16, 0x00	; 0
    154a:	10 e0       	ldi	r17, 0x00	; 0
    154c:	98 01       	movw	r18, r16
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	ba 01       	movw	r22, r20
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	0e 94 29 13 	call	0x2652	; 0x2652 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    155a:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    155c:	18 86       	std	Y+8, r1	; 0x08
    155e:	ce 01       	movw	r24, r28
    1560:	0b dd       	rcall	.-1514   	; 0xf78 <prvBytesInBuffer>
    1562:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1564:	03 c0       	rjmp	.+6      	; 0x156c <xStreamBufferReceive+0x9c>
    1566:	ce 01       	movw	r24, r28
    1568:	07 dd       	rcall	.-1522   	; 0xf78 <prvBytesInBuffer>
    156a:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    156c:	8e 14       	cp	r8, r14
    156e:	9f 04       	cpc	r9, r15
    1570:	e8 f4       	brcc	.+58     	; 0x15ac <xStreamBufferReceive+0xdc>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1572:	84 01       	movw	r16, r8
    1574:	97 01       	movw	r18, r14
    1576:	a3 01       	movw	r20, r6
    1578:	b2 01       	movw	r22, r4
    157a:	ce 01       	movw	r24, r28
    157c:	fb dd       	rcall	.-1034   	; 0x1174 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    157e:	6c 01       	movw	r12, r24
    1580:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1582:	b1 f0       	breq	.+44     	; 0x15b0 <xStreamBufferReceive+0xe0>
    1584:	c3 d2       	rcall	.+1414   	; 0x1b0c <vTaskSuspendAll>
    1586:	8a 85       	ldd	r24, Y+10	; 0x0a
    1588:	9b 85       	ldd	r25, Y+11	; 0x0b
    158a:	89 2b       	or	r24, r25
    158c:	69 f0       	breq	.+26     	; 0x15a8 <xStreamBufferReceive+0xd8>
    158e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1590:	9b 85       	ldd	r25, Y+11	; 0x0b
    1592:	e1 2c       	mov	r14, r1
    1594:	f1 2c       	mov	r15, r1
    1596:	00 e0       	ldi	r16, 0x00	; 0
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	a9 01       	movw	r20, r18
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <xTaskGenericNotify>
    15a4:	1b 86       	std	Y+11, r1	; 0x0b
    15a6:	1a 86       	std	Y+10, r1	; 0x0a
    15a8:	f1 d3       	rcall	.+2018   	; 0x1d8c <xTaskResumeAll>
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <xStreamBufferReceive+0xe0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    15ac:	c1 2c       	mov	r12, r1
    15ae:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    15b0:	c6 01       	movw	r24, r12
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	ef 90       	pop	r14
    15be:	df 90       	pop	r13
    15c0:	cf 90       	pop	r12
    15c2:	bf 90       	pop	r11
    15c4:	af 90       	pop	r10
    15c6:	9f 90       	pop	r9
    15c8:	8f 90       	pop	r8
    15ca:	7f 90       	pop	r7
    15cc:	6f 90       	pop	r6
    15ce:	5f 90       	pop	r5
    15d0:	4f 90       	pop	r4
    15d2:	08 95       	ret

000015d4 <prvResetNextTaskUnblockTime>:
    15d4:	e0 91 97 11 	lds	r30, 0x1197	; 0x801197 <pxDelayedTaskList>
    15d8:	f0 91 98 11 	lds	r31, 0x1198	; 0x801198 <pxDelayedTaskList+0x1>
    15dc:	80 81       	ld	r24, Z
    15de:	81 11       	cpse	r24, r1
    15e0:	0c c0       	rjmp	.+24     	; 0x15fa <prvResetNextTaskUnblockTime+0x26>
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	9f ef       	ldi	r25, 0xFF	; 255
    15e6:	dc 01       	movw	r26, r24
    15e8:	80 93 61 11 	sts	0x1161, r24	; 0x801161 <xNextTaskUnblockTime>
    15ec:	90 93 62 11 	sts	0x1162, r25	; 0x801162 <xNextTaskUnblockTime+0x1>
    15f0:	a0 93 63 11 	sts	0x1163, r26	; 0x801163 <xNextTaskUnblockTime+0x2>
    15f4:	b0 93 64 11 	sts	0x1164, r27	; 0x801164 <xNextTaskUnblockTime+0x3>
    15f8:	08 95       	ret
    15fa:	e0 91 97 11 	lds	r30, 0x1197	; 0x801197 <pxDelayedTaskList>
    15fe:	f0 91 98 11 	lds	r31, 0x1198	; 0x801198 <pxDelayedTaskList+0x1>
    1602:	07 80       	ldd	r0, Z+7	; 0x07
    1604:	f0 85       	ldd	r31, Z+8	; 0x08
    1606:	e0 2d       	mov	r30, r0
    1608:	80 81       	ld	r24, Z
    160a:	91 81       	ldd	r25, Z+1	; 0x01
    160c:	a2 81       	ldd	r26, Z+2	; 0x02
    160e:	b3 81       	ldd	r27, Z+3	; 0x03
    1610:	80 93 61 11 	sts	0x1161, r24	; 0x801161 <xNextTaskUnblockTime>
    1614:	90 93 62 11 	sts	0x1162, r25	; 0x801162 <xNextTaskUnblockTime+0x1>
    1618:	a0 93 63 11 	sts	0x1163, r26	; 0x801163 <xNextTaskUnblockTime+0x2>
    161c:	b0 93 64 11 	sts	0x1164, r27	; 0x801164 <xNextTaskUnblockTime+0x3>
    1620:	08 95       	ret

00001622 <prvDeleteTCB>:
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	ec 01       	movw	r28, r24
    1628:	8b 8d       	ldd	r24, Y+27	; 0x1b
    162a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    162c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <vPortFree>
    1630:	ce 01       	movw	r24, r28
    1632:	0e 94 52 02 	call	0x4a4	; 0x4a4 <vPortFree>
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	08 95       	ret

0000163c <prvInitialiseNewTask>:
    163c:	4f 92       	push	r4
    163e:	5f 92       	push	r5
    1640:	6f 92       	push	r6
    1642:	7f 92       	push	r7
    1644:	8f 92       	push	r8
    1646:	9f 92       	push	r9
    1648:	af 92       	push	r10
    164a:	bf 92       	push	r11
    164c:	cf 92       	push	r12
    164e:	df 92       	push	r13
    1650:	ef 92       	push	r14
    1652:	ff 92       	push	r15
    1654:	0f 93       	push	r16
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	2c 01       	movw	r4, r24
    165c:	5b 01       	movw	r10, r22
    165e:	4a 01       	movw	r8, r20
    1660:	39 01       	movw	r6, r18
    1662:	e6 01       	movw	r28, r12
    1664:	65 ea       	ldi	r22, 0xA5	; 165
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	8b 8d       	ldd	r24, Y+27	; 0x1b
    166a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    166c:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <memset>
    1670:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1672:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1674:	21 e0       	ldi	r18, 0x01	; 1
    1676:	82 1a       	sub	r8, r18
    1678:	91 08       	sbc	r9, r1
    167a:	88 0e       	add	r8, r24
    167c:	99 1e       	adc	r9, r25
    167e:	a1 14       	cp	r10, r1
    1680:	b1 04       	cpc	r11, r1
    1682:	89 f4       	brne	.+34     	; 0x16a6 <prvInitialiseNewTask+0x6a>
    1684:	15 c0       	rjmp	.+42     	; 0x16b0 <prvInitialiseNewTask+0x74>
    1686:	82 2f       	mov	r24, r18
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	f5 01       	movw	r30, r10
    168c:	e8 0f       	add	r30, r24
    168e:	f9 1f       	adc	r31, r25
    1690:	30 81       	ld	r19, Z
    1692:	de 01       	movw	r26, r28
    1694:	a8 0f       	add	r26, r24
    1696:	b9 1f       	adc	r27, r25
    1698:	5d 96       	adiw	r26, 0x1d	; 29
    169a:	3c 93       	st	X, r19
    169c:	80 81       	ld	r24, Z
    169e:	88 23       	and	r24, r24
    16a0:	29 f0       	breq	.+10     	; 0x16ac <prvInitialiseNewTask+0x70>
    16a2:	2f 5f       	subi	r18, 0xFF	; 255
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <prvInitialiseNewTask+0x6c>
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	20 31       	cpi	r18, 0x10	; 16
    16aa:	68 f3       	brcs	.-38     	; 0x1686 <prvInitialiseNewTask+0x4a>
    16ac:	1c a6       	std	Y+44, r1	; 0x2c
    16ae:	01 c0       	rjmp	.+2      	; 0x16b2 <prvInitialiseNewTask+0x76>
    16b0:	1d 8e       	std	Y+29, r1	; 0x1d
    16b2:	0a 30       	cpi	r16, 0x0A	; 10
    16b4:	08 f0       	brcs	.+2      	; 0x16b8 <prvInitialiseNewTask+0x7c>
    16b6:	09 e0       	ldi	r16, 0x09	; 9
    16b8:	0a 8f       	std	Y+26, r16	; 0x1a
    16ba:	0d a7       	std	Y+45, r16	; 0x2d
    16bc:	1e a6       	std	Y+46, r1	; 0x2e
    16be:	ce 01       	movw	r24, r28
    16c0:	02 96       	adiw	r24, 0x02	; 2
    16c2:	0e 94 a0 02 	call	0x540	; 0x540 <vListInitialiseItem>
    16c6:	ce 01       	movw	r24, r28
    16c8:	0e 96       	adiw	r24, 0x0e	; 14
    16ca:	0e 94 a0 02 	call	0x540	; 0x540 <vListInitialiseItem>
    16ce:	db 87       	std	Y+11, r29	; 0x0b
    16d0:	ca 87       	std	Y+10, r28	; 0x0a
    16d2:	8a e0       	ldi	r24, 0x0A	; 10
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a0 e0       	ldi	r26, 0x00	; 0
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	80 1b       	sub	r24, r16
    16dc:	91 09       	sbc	r25, r1
    16de:	a1 09       	sbc	r26, r1
    16e0:	b1 09       	sbc	r27, r1
    16e2:	8e 87       	std	Y+14, r24	; 0x0e
    16e4:	9f 87       	std	Y+15, r25	; 0x0f
    16e6:	a8 8b       	std	Y+16, r26	; 0x10
    16e8:	b9 8b       	std	Y+17, r27	; 0x11
    16ea:	df 8b       	std	Y+23, r29	; 0x17
    16ec:	ce 8b       	std	Y+22, r28	; 0x16
    16ee:	84 e0       	ldi	r24, 0x04	; 4
    16f0:	fe 01       	movw	r30, r28
    16f2:	bf 96       	adiw	r30, 0x2f	; 47
    16f4:	df 01       	movw	r26, r30
    16f6:	1d 92       	st	X+, r1
    16f8:	8a 95       	dec	r24
    16fa:	e9 f7       	brne	.-6      	; 0x16f6 <prvInitialiseNewTask+0xba>
    16fc:	1b aa       	std	Y+51, r1	; 0x33
    16fe:	a3 01       	movw	r20, r6
    1700:	b2 01       	movw	r22, r4
    1702:	c4 01       	movw	r24, r8
    1704:	0e 94 14 03 	call	0x628	; 0x628 <pxPortInitialiseStack>
    1708:	99 83       	std	Y+1, r25	; 0x01
    170a:	88 83       	st	Y, r24
    170c:	e1 14       	cp	r14, r1
    170e:	f1 04       	cpc	r15, r1
    1710:	19 f0       	breq	.+6      	; 0x1718 <prvInitialiseNewTask+0xdc>
    1712:	f7 01       	movw	r30, r14
    1714:	d1 83       	std	Z+1, r29	; 0x01
    1716:	c0 83       	st	Z, r28
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	0f 91       	pop	r16
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	cf 90       	pop	r12
    1726:	bf 90       	pop	r11
    1728:	af 90       	pop	r10
    172a:	9f 90       	pop	r9
    172c:	8f 90       	pop	r8
    172e:	7f 90       	pop	r7
    1730:	6f 90       	pop	r6
    1732:	5f 90       	pop	r5
    1734:	4f 90       	pop	r4
    1736:	08 95       	ret

00001738 <prvInitialiseTaskLists>:
    1738:	cf 93       	push	r28
    173a:	c0 e0       	ldi	r28, 0x00	; 0
    173c:	09 c0       	rjmp	.+18     	; 0x1750 <prvInitialiseTaskLists+0x18>
    173e:	2b e0       	ldi	r18, 0x0B	; 11
    1740:	c2 9f       	mul	r28, r18
    1742:	c0 01       	movw	r24, r0
    1744:	11 24       	eor	r1, r1
    1746:	81 55       	subi	r24, 0x51	; 81
    1748:	9e 4e       	sbci	r25, 0xEE	; 238
    174a:	0e 94 8f 02 	call	0x51e	; 0x51e <vListInitialise>
    174e:	cf 5f       	subi	r28, 0xFF	; 255
    1750:	ca 30       	cpi	r28, 0x0A	; 10
    1752:	a8 f3       	brcs	.-22     	; 0x173e <prvInitialiseTaskLists+0x6>
    1754:	84 ea       	ldi	r24, 0xA4	; 164
    1756:	91 e1       	ldi	r25, 0x11	; 17
    1758:	0e 94 8f 02 	call	0x51e	; 0x51e <vListInitialise>
    175c:	89 e9       	ldi	r24, 0x99	; 153
    175e:	91 e1       	ldi	r25, 0x11	; 17
    1760:	0e 94 8f 02 	call	0x51e	; 0x51e <vListInitialise>
    1764:	8a e8       	ldi	r24, 0x8A	; 138
    1766:	91 e1       	ldi	r25, 0x11	; 17
    1768:	0e 94 8f 02 	call	0x51e	; 0x51e <vListInitialise>
    176c:	8f e7       	ldi	r24, 0x7F	; 127
    176e:	91 e1       	ldi	r25, 0x11	; 17
    1770:	0e 94 8f 02 	call	0x51e	; 0x51e <vListInitialise>
    1774:	83 e7       	ldi	r24, 0x73	; 115
    1776:	91 e1       	ldi	r25, 0x11	; 17
    1778:	0e 94 8f 02 	call	0x51e	; 0x51e <vListInitialise>
    177c:	84 ea       	ldi	r24, 0xA4	; 164
    177e:	91 e1       	ldi	r25, 0x11	; 17
    1780:	90 93 98 11 	sts	0x1198, r25	; 0x801198 <pxDelayedTaskList+0x1>
    1784:	80 93 97 11 	sts	0x1197, r24	; 0x801197 <pxDelayedTaskList>
    1788:	89 e9       	ldi	r24, 0x99	; 153
    178a:	91 e1       	ldi	r25, 0x11	; 17
    178c:	90 93 96 11 	sts	0x1196, r25	; 0x801196 <pxOverflowDelayedTaskList+0x1>
    1790:	80 93 95 11 	sts	0x1195, r24	; 0x801195 <pxOverflowDelayedTaskList>
    1794:	cf 91       	pop	r28
    1796:	08 95       	ret

00001798 <prvAddNewTaskToReadyList>:
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	ec 01       	movw	r28, r24
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	0f 92       	push	r0
    17a4:	80 91 72 11 	lds	r24, 0x1172	; 0x801172 <uxCurrentNumberOfTasks>
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	80 93 72 11 	sts	0x1172, r24	; 0x801172 <uxCurrentNumberOfTasks>
    17ae:	80 91 1d 12 	lds	r24, 0x121D	; 0x80121d <pxCurrentTCB>
    17b2:	90 91 1e 12 	lds	r25, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    17b6:	89 2b       	or	r24, r25
    17b8:	51 f4       	brne	.+20     	; 0x17ce <prvAddNewTaskToReadyList+0x36>
    17ba:	d0 93 1e 12 	sts	0x121E, r29	; 0x80121e <pxCurrentTCB+0x1>
    17be:	c0 93 1d 12 	sts	0x121D, r28	; 0x80121d <pxCurrentTCB>
    17c2:	80 91 72 11 	lds	r24, 0x1172	; 0x801172 <uxCurrentNumberOfTasks>
    17c6:	81 30       	cpi	r24, 0x01	; 1
    17c8:	91 f4       	brne	.+36     	; 0x17ee <prvAddNewTaskToReadyList+0x56>
    17ca:	b6 df       	rcall	.-148    	; 0x1738 <prvInitialiseTaskLists>
    17cc:	10 c0       	rjmp	.+32     	; 0x17ee <prvAddNewTaskToReadyList+0x56>
    17ce:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <xSchedulerRunning>
    17d2:	81 11       	cpse	r24, r1
    17d4:	0c c0       	rjmp	.+24     	; 0x17ee <prvAddNewTaskToReadyList+0x56>
    17d6:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    17da:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    17de:	92 8d       	ldd	r25, Z+26	; 0x1a
    17e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17e2:	89 17       	cp	r24, r25
    17e4:	20 f0       	brcs	.+8      	; 0x17ee <prvAddNewTaskToReadyList+0x56>
    17e6:	d0 93 1e 12 	sts	0x121E, r29	; 0x80121e <pxCurrentTCB+0x1>
    17ea:	c0 93 1d 12 	sts	0x121D, r28	; 0x80121d <pxCurrentTCB>
    17ee:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <uxTaskNumber>
    17f2:	8f 5f       	subi	r24, 0xFF	; 255
    17f4:	80 93 65 11 	sts	0x1165, r24	; 0x801165 <uxTaskNumber>
    17f8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    17fa:	80 91 6d 11 	lds	r24, 0x116D	; 0x80116d <uxTopReadyPriority>
    17fe:	8e 17       	cp	r24, r30
    1800:	10 f4       	brcc	.+4      	; 0x1806 <prvAddNewTaskToReadyList+0x6e>
    1802:	e0 93 6d 11 	sts	0x116D, r30	; 0x80116d <uxTopReadyPriority>
    1806:	8b e0       	ldi	r24, 0x0B	; 11
    1808:	8e 9f       	mul	r24, r30
    180a:	f0 01       	movw	r30, r0
    180c:	11 24       	eor	r1, r1
    180e:	e1 55       	subi	r30, 0x51	; 81
    1810:	fe 4e       	sbci	r31, 0xEE	; 238
    1812:	01 80       	ldd	r0, Z+1	; 0x01
    1814:	f2 81       	ldd	r31, Z+2	; 0x02
    1816:	e0 2d       	mov	r30, r0
    1818:	ff 83       	std	Y+7, r31	; 0x07
    181a:	ee 83       	std	Y+6, r30	; 0x06
    181c:	26 81       	ldd	r18, Z+6	; 0x06
    181e:	37 81       	ldd	r19, Z+7	; 0x07
    1820:	39 87       	std	Y+9, r19	; 0x09
    1822:	28 87       	std	Y+8, r18	; 0x08
    1824:	a6 81       	ldd	r26, Z+6	; 0x06
    1826:	b7 81       	ldd	r27, Z+7	; 0x07
    1828:	9e 01       	movw	r18, r28
    182a:	2e 5f       	subi	r18, 0xFE	; 254
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
    182e:	15 96       	adiw	r26, 0x05	; 5
    1830:	3c 93       	st	X, r19
    1832:	2e 93       	st	-X, r18
    1834:	14 97       	sbiw	r26, 0x04	; 4
    1836:	37 83       	std	Z+7, r19	; 0x07
    1838:	26 83       	std	Z+6, r18	; 0x06
    183a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    183c:	8e 9f       	mul	r24, r30
    183e:	f0 01       	movw	r30, r0
    1840:	11 24       	eor	r1, r1
    1842:	e1 55       	subi	r30, 0x51	; 81
    1844:	fe 4e       	sbci	r31, 0xEE	; 238
    1846:	fd 87       	std	Y+13, r31	; 0x0d
    1848:	ec 87       	std	Y+12, r30	; 0x0c
    184a:	80 81       	ld	r24, Z
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	80 83       	st	Z, r24
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <xSchedulerRunning>
    1858:	88 23       	and	r24, r24
    185a:	51 f0       	breq	.+20     	; 0x1870 <prvAddNewTaskToReadyList+0xd8>
    185c:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    1860:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    1864:	92 8d       	ldd	r25, Z+26	; 0x1a
    1866:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1868:	98 17       	cp	r25, r24
    186a:	10 f4       	brcc	.+4      	; 0x1870 <prvAddNewTaskToReadyList+0xd8>
    186c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <vPortYield>
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	08 95       	ret

00001876 <prvCheckTasksWaitingTermination>:
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	1b c0       	rjmp	.+54     	; 0x18b2 <prvCheckTasksWaitingTermination+0x3c>
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	0f 92       	push	r0
    1882:	e0 91 86 11 	lds	r30, 0x1186	; 0x801186 <xTasksWaitingTermination+0x7>
    1886:	f0 91 87 11 	lds	r31, 0x1187	; 0x801187 <xTasksWaitingTermination+0x8>
    188a:	c0 85       	ldd	r28, Z+8	; 0x08
    188c:	d1 85       	ldd	r29, Z+9	; 0x09
    188e:	ce 01       	movw	r24, r28
    1890:	02 96       	adiw	r24, 0x02	; 2
    1892:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <uxListRemove>
    1896:	80 91 72 11 	lds	r24, 0x1172	; 0x801172 <uxCurrentNumberOfTasks>
    189a:	81 50       	subi	r24, 0x01	; 1
    189c:	80 93 72 11 	sts	0x1172, r24	; 0x801172 <uxCurrentNumberOfTasks>
    18a0:	80 91 7e 11 	lds	r24, 0x117E	; 0x80117e <uxDeletedTasksWaitingCleanUp>
    18a4:	81 50       	subi	r24, 0x01	; 1
    18a6:	80 93 7e 11 	sts	0x117E, r24	; 0x80117e <uxDeletedTasksWaitingCleanUp>
    18aa:	0f 90       	pop	r0
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	ce 01       	movw	r24, r28
    18b0:	b8 de       	rcall	.-656    	; 0x1622 <prvDeleteTCB>
    18b2:	80 91 7e 11 	lds	r24, 0x117E	; 0x80117e <uxDeletedTasksWaitingCleanUp>
    18b6:	81 11       	cpse	r24, r1
    18b8:	e1 cf       	rjmp	.-62     	; 0x187c <prvCheckTasksWaitingTermination+0x6>
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <prvAddCurrentTaskToDelayedList>:
    18c0:	8f 92       	push	r8
    18c2:	9f 92       	push	r9
    18c4:	af 92       	push	r10
    18c6:	bf 92       	push	r11
    18c8:	cf 92       	push	r12
    18ca:	df 92       	push	r13
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	6b 01       	movw	r12, r22
    18d6:	7c 01       	movw	r14, r24
    18d8:	c4 2f       	mov	r28, r20
    18da:	80 90 6e 11 	lds	r8, 0x116E	; 0x80116e <xTickCount>
    18de:	90 90 6f 11 	lds	r9, 0x116F	; 0x80116f <xTickCount+0x1>
    18e2:	a0 90 70 11 	lds	r10, 0x1170	; 0x801170 <xTickCount+0x2>
    18e6:	b0 90 71 11 	lds	r11, 0x1171	; 0x801171 <xTickCount+0x3>
    18ea:	80 91 1d 12 	lds	r24, 0x121D	; 0x80121d <pxCurrentTCB>
    18ee:	90 91 1e 12 	lds	r25, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    18f2:	02 96       	adiw	r24, 0x02	; 2
    18f4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <uxListRemove>
    18f8:	8f ef       	ldi	r24, 0xFF	; 255
    18fa:	c8 16       	cp	r12, r24
    18fc:	d8 06       	cpc	r13, r24
    18fe:	e8 06       	cpc	r14, r24
    1900:	f8 06       	cpc	r15, r24
    1902:	b1 f5       	brne	.+108    	; 0x1970 <prvAddCurrentTaskToDelayedList+0xb0>
    1904:	cc 23       	and	r28, r28
    1906:	a1 f1       	breq	.+104    	; 0x1970 <prvAddCurrentTaskToDelayedList+0xb0>
    1908:	e3 e7       	ldi	r30, 0x73	; 115
    190a:	f1 e1       	ldi	r31, 0x11	; 17
    190c:	a1 81       	ldd	r26, Z+1	; 0x01
    190e:	b2 81       	ldd	r27, Z+2	; 0x02
    1910:	c0 91 1d 12 	lds	r28, 0x121D	; 0x80121d <pxCurrentTCB>
    1914:	d0 91 1e 12 	lds	r29, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    1918:	bf 83       	std	Y+7, r27	; 0x07
    191a:	ae 83       	std	Y+6, r26	; 0x06
    191c:	c0 91 1d 12 	lds	r28, 0x121D	; 0x80121d <pxCurrentTCB>
    1920:	d0 91 1e 12 	lds	r29, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    1924:	16 96       	adiw	r26, 0x06	; 6
    1926:	8d 91       	ld	r24, X+
    1928:	9c 91       	ld	r25, X
    192a:	17 97       	sbiw	r26, 0x07	; 7
    192c:	99 87       	std	Y+9, r25	; 0x09
    192e:	88 87       	std	Y+8, r24	; 0x08
    1930:	16 96       	adiw	r26, 0x06	; 6
    1932:	cd 91       	ld	r28, X+
    1934:	dc 91       	ld	r29, X
    1936:	17 97       	sbiw	r26, 0x07	; 7
    1938:	80 91 1d 12 	lds	r24, 0x121D	; 0x80121d <pxCurrentTCB>
    193c:	90 91 1e 12 	lds	r25, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    1940:	02 96       	adiw	r24, 0x02	; 2
    1942:	9d 83       	std	Y+5, r25	; 0x05
    1944:	8c 83       	std	Y+4, r24	; 0x04
    1946:	80 91 1d 12 	lds	r24, 0x121D	; 0x80121d <pxCurrentTCB>
    194a:	90 91 1e 12 	lds	r25, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    194e:	02 96       	adiw	r24, 0x02	; 2
    1950:	17 96       	adiw	r26, 0x07	; 7
    1952:	9c 93       	st	X, r25
    1954:	8e 93       	st	-X, r24
    1956:	16 97       	sbiw	r26, 0x06	; 6
    1958:	a0 91 1d 12 	lds	r26, 0x121D	; 0x80121d <pxCurrentTCB>
    195c:	b0 91 1e 12 	lds	r27, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    1960:	1d 96       	adiw	r26, 0x0d	; 13
    1962:	fc 93       	st	X, r31
    1964:	ee 93       	st	-X, r30
    1966:	1c 97       	sbiw	r26, 0x0c	; 12
    1968:	80 81       	ld	r24, Z
    196a:	8f 5f       	subi	r24, 0xFF	; 255
    196c:	80 83       	st	Z, r24
    196e:	3f c0       	rjmp	.+126    	; 0x19ee <prvAddCurrentTaskToDelayedList+0x12e>
    1970:	c8 0c       	add	r12, r8
    1972:	d9 1c       	adc	r13, r9
    1974:	ea 1c       	adc	r14, r10
    1976:	fb 1c       	adc	r15, r11
    1978:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    197c:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    1980:	c2 82       	std	Z+2, r12	; 0x02
    1982:	d3 82       	std	Z+3, r13	; 0x03
    1984:	e4 82       	std	Z+4, r14	; 0x04
    1986:	f5 82       	std	Z+5, r15	; 0x05
    1988:	c8 14       	cp	r12, r8
    198a:	d9 04       	cpc	r13, r9
    198c:	ea 04       	cpc	r14, r10
    198e:	fb 04       	cpc	r15, r11
    1990:	68 f4       	brcc	.+26     	; 0x19ac <prvAddCurrentTaskToDelayedList+0xec>
    1992:	60 91 1d 12 	lds	r22, 0x121D	; 0x80121d <pxCurrentTCB>
    1996:	70 91 1e 12 	lds	r23, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    199a:	80 91 95 11 	lds	r24, 0x1195	; 0x801195 <pxOverflowDelayedTaskList>
    199e:	90 91 96 11 	lds	r25, 0x1196	; 0x801196 <pxOverflowDelayedTaskList+0x1>
    19a2:	6e 5f       	subi	r22, 0xFE	; 254
    19a4:	7f 4f       	sbci	r23, 0xFF	; 255
    19a6:	0e 94 a4 02 	call	0x548	; 0x548 <vListInsert>
    19aa:	21 c0       	rjmp	.+66     	; 0x19ee <prvAddCurrentTaskToDelayedList+0x12e>
    19ac:	60 91 1d 12 	lds	r22, 0x121D	; 0x80121d <pxCurrentTCB>
    19b0:	70 91 1e 12 	lds	r23, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    19b4:	80 91 97 11 	lds	r24, 0x1197	; 0x801197 <pxDelayedTaskList>
    19b8:	90 91 98 11 	lds	r25, 0x1198	; 0x801198 <pxDelayedTaskList+0x1>
    19bc:	6e 5f       	subi	r22, 0xFE	; 254
    19be:	7f 4f       	sbci	r23, 0xFF	; 255
    19c0:	0e 94 a4 02 	call	0x548	; 0x548 <vListInsert>
    19c4:	80 91 61 11 	lds	r24, 0x1161	; 0x801161 <xNextTaskUnblockTime>
    19c8:	90 91 62 11 	lds	r25, 0x1162	; 0x801162 <xNextTaskUnblockTime+0x1>
    19cc:	a0 91 63 11 	lds	r26, 0x1163	; 0x801163 <xNextTaskUnblockTime+0x2>
    19d0:	b0 91 64 11 	lds	r27, 0x1164	; 0x801164 <xNextTaskUnblockTime+0x3>
    19d4:	c8 16       	cp	r12, r24
    19d6:	d9 06       	cpc	r13, r25
    19d8:	ea 06       	cpc	r14, r26
    19da:	fb 06       	cpc	r15, r27
    19dc:	40 f4       	brcc	.+16     	; 0x19ee <prvAddCurrentTaskToDelayedList+0x12e>
    19de:	c0 92 61 11 	sts	0x1161, r12	; 0x801161 <xNextTaskUnblockTime>
    19e2:	d0 92 62 11 	sts	0x1162, r13	; 0x801162 <xNextTaskUnblockTime+0x1>
    19e6:	e0 92 63 11 	sts	0x1163, r14	; 0x801163 <xNextTaskUnblockTime+0x2>
    19ea:	f0 92 64 11 	sts	0x1164, r15	; 0x801164 <xNextTaskUnblockTime+0x3>
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	df 90       	pop	r13
    19f8:	cf 90       	pop	r12
    19fa:	bf 90       	pop	r11
    19fc:	af 90       	pop	r10
    19fe:	9f 90       	pop	r9
    1a00:	8f 90       	pop	r8
    1a02:	08 95       	ret

00001a04 <xTaskCreate>:
    1a04:	2f 92       	push	r2
    1a06:	3f 92       	push	r3
    1a08:	4f 92       	push	r4
    1a0a:	5f 92       	push	r5
    1a0c:	6f 92       	push	r6
    1a0e:	7f 92       	push	r7
    1a10:	8f 92       	push	r8
    1a12:	9f 92       	push	r9
    1a14:	af 92       	push	r10
    1a16:	bf 92       	push	r11
    1a18:	cf 92       	push	r12
    1a1a:	df 92       	push	r13
    1a1c:	ef 92       	push	r14
    1a1e:	ff 92       	push	r15
    1a20:	0f 93       	push	r16
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	3c 01       	movw	r6, r24
    1a28:	1b 01       	movw	r2, r22
    1a2a:	4a 01       	movw	r8, r20
    1a2c:	29 01       	movw	r4, r18
    1a2e:	ca 01       	movw	r24, r20
    1a30:	0e 94 a9 01 	call	0x352	; 0x352 <pvPortMalloc>
    1a34:	6c 01       	movw	r12, r24
    1a36:	89 2b       	or	r24, r25
    1a38:	71 f0       	breq	.+28     	; 0x1a56 <xTaskCreate+0x52>
    1a3a:	84 e3       	ldi	r24, 0x34	; 52
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 a9 01 	call	0x352	; 0x352 <pvPortMalloc>
    1a42:	ec 01       	movw	r28, r24
    1a44:	89 2b       	or	r24, r25
    1a46:	19 f0       	breq	.+6      	; 0x1a4e <xTaskCreate+0x4a>
    1a48:	dc 8e       	std	Y+28, r13	; 0x1c
    1a4a:	cb 8e       	std	Y+27, r12	; 0x1b
    1a4c:	06 c0       	rjmp	.+12     	; 0x1a5a <xTaskCreate+0x56>
    1a4e:	c6 01       	movw	r24, r12
    1a50:	0e 94 52 02 	call	0x4a4	; 0x4a4 <vPortFree>
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <xTaskCreate+0x56>
    1a56:	c0 e0       	ldi	r28, 0x00	; 0
    1a58:	d0 e0       	ldi	r29, 0x00	; 0
    1a5a:	20 97       	sbiw	r28, 0x00	; 0
    1a5c:	61 f0       	breq	.+24     	; 0x1a76 <xTaskCreate+0x72>
    1a5e:	a1 2c       	mov	r10, r1
    1a60:	b1 2c       	mov	r11, r1
    1a62:	6e 01       	movw	r12, r28
    1a64:	92 01       	movw	r18, r4
    1a66:	a4 01       	movw	r20, r8
    1a68:	b1 01       	movw	r22, r2
    1a6a:	c3 01       	movw	r24, r6
    1a6c:	e7 dd       	rcall	.-1074   	; 0x163c <prvInitialiseNewTask>
    1a6e:	ce 01       	movw	r24, r28
    1a70:	93 de       	rcall	.-730    	; 0x1798 <prvAddNewTaskToReadyList>
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <xTaskCreate+0x74>
    1a76:	8f ef       	ldi	r24, 0xFF	; 255
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	0f 91       	pop	r16
    1a7e:	ff 90       	pop	r15
    1a80:	ef 90       	pop	r14
    1a82:	df 90       	pop	r13
    1a84:	cf 90       	pop	r12
    1a86:	bf 90       	pop	r11
    1a88:	af 90       	pop	r10
    1a8a:	9f 90       	pop	r9
    1a8c:	8f 90       	pop	r8
    1a8e:	7f 90       	pop	r7
    1a90:	6f 90       	pop	r6
    1a92:	5f 90       	pop	r5
    1a94:	4f 90       	pop	r4
    1a96:	3f 90       	pop	r3
    1a98:	2f 90       	pop	r2
    1a9a:	08 95       	ret

00001a9c <vTaskStartScheduler>:
    1a9c:	ef 92       	push	r14
    1a9e:	ff 92       	push	r15
    1aa0:	0f 93       	push	r16
    1aa2:	0f 2e       	mov	r0, r31
    1aa4:	ff e5       	ldi	r31, 0x5F	; 95
    1aa6:	ef 2e       	mov	r14, r31
    1aa8:	f1 e1       	ldi	r31, 0x11	; 17
    1aaa:	ff 2e       	mov	r15, r31
    1aac:	f0 2d       	mov	r31, r0
    1aae:	00 e0       	ldi	r16, 0x00	; 0
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 ec       	ldi	r20, 0xC0	; 192
    1ab6:	50 e0       	ldi	r21, 0x00	; 0
    1ab8:	6f e4       	ldi	r22, 0x4F	; 79
    1aba:	72 e0       	ldi	r23, 0x02	; 2
    1abc:	8d ec       	ldi	r24, 0xCD	; 205
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	a1 df       	rcall	.-190    	; 0x1a04 <xTaskCreate>
    1ac2:	81 30       	cpi	r24, 0x01	; 1
    1ac4:	11 f4       	brne	.+4      	; 0x1aca <vTaskStartScheduler+0x2e>
    1ac6:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <xTimerCreateTimerTask>
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	c9 f4       	brne	.+50     	; 0x1b00 <vTaskStartScheduler+0x64>
    1ace:	f8 94       	cli
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	9f ef       	ldi	r25, 0xFF	; 255
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	80 93 61 11 	sts	0x1161, r24	; 0x801161 <xNextTaskUnblockTime>
    1ada:	90 93 62 11 	sts	0x1162, r25	; 0x801162 <xNextTaskUnblockTime+0x1>
    1ade:	a0 93 63 11 	sts	0x1163, r26	; 0x801163 <xNextTaskUnblockTime+0x2>
    1ae2:	b0 93 64 11 	sts	0x1164, r27	; 0x801164 <xNextTaskUnblockTime+0x3>
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	80 93 6c 11 	sts	0x116C, r24	; 0x80116c <xSchedulerRunning>
    1aec:	10 92 6e 11 	sts	0x116E, r1	; 0x80116e <xTickCount>
    1af0:	10 92 6f 11 	sts	0x116F, r1	; 0x80116f <xTickCount+0x1>
    1af4:	10 92 70 11 	sts	0x1170, r1	; 0x801170 <xTickCount+0x2>
    1af8:	10 92 71 11 	sts	0x1171, r1	; 0x801171 <xTickCount+0x3>
    1afc:	0e 94 2b 03 	call	0x656	; 0x656 <xPortStartScheduler>
    1b00:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1b04:	0f 91       	pop	r16
    1b06:	ff 90       	pop	r15
    1b08:	ef 90       	pop	r14
    1b0a:	08 95       	ret

00001b0c <vTaskSuspendAll>:
    1b0c:	80 91 5e 11 	lds	r24, 0x115E	; 0x80115e <uxSchedulerSuspended>
    1b10:	8f 5f       	subi	r24, 0xFF	; 255
    1b12:	80 93 5e 11 	sts	0x115E, r24	; 0x80115e <uxSchedulerSuspended>
    1b16:	08 95       	ret

00001b18 <xTaskGetTickCount>:
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	0f 92       	push	r0
    1b1e:	60 91 6e 11 	lds	r22, 0x116E	; 0x80116e <xTickCount>
    1b22:	70 91 6f 11 	lds	r23, 0x116F	; 0x80116f <xTickCount+0x1>
    1b26:	80 91 70 11 	lds	r24, 0x1170	; 0x801170 <xTickCount+0x2>
    1b2a:	90 91 71 11 	lds	r25, 0x1171	; 0x801171 <xTickCount+0x3>
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	08 95       	ret

00001b34 <xTaskIncrementTick>:
    1b34:	cf 92       	push	r12
    1b36:	df 92       	push	r13
    1b38:	ef 92       	push	r14
    1b3a:	ff 92       	push	r15
    1b3c:	cf 93       	push	r28
    1b3e:	df 93       	push	r29
    1b40:	80 91 5e 11 	lds	r24, 0x115E	; 0x80115e <uxSchedulerSuspended>
    1b44:	81 11       	cpse	r24, r1
    1b46:	05 c1       	rjmp	.+522    	; 0x1d52 <xTaskIncrementTick+0x21e>
    1b48:	c0 90 6e 11 	lds	r12, 0x116E	; 0x80116e <xTickCount>
    1b4c:	d0 90 6f 11 	lds	r13, 0x116F	; 0x80116f <xTickCount+0x1>
    1b50:	e0 90 70 11 	lds	r14, 0x1170	; 0x801170 <xTickCount+0x2>
    1b54:	f0 90 71 11 	lds	r15, 0x1171	; 0x801171 <xTickCount+0x3>
    1b58:	8f ef       	ldi	r24, 0xFF	; 255
    1b5a:	c8 1a       	sub	r12, r24
    1b5c:	d8 0a       	sbc	r13, r24
    1b5e:	e8 0a       	sbc	r14, r24
    1b60:	f8 0a       	sbc	r15, r24
    1b62:	c0 92 6e 11 	sts	0x116E, r12	; 0x80116e <xTickCount>
    1b66:	d0 92 6f 11 	sts	0x116F, r13	; 0x80116f <xTickCount+0x1>
    1b6a:	e0 92 70 11 	sts	0x1170, r14	; 0x801170 <xTickCount+0x2>
    1b6e:	f0 92 71 11 	sts	0x1171, r15	; 0x801171 <xTickCount+0x3>
    1b72:	c1 14       	cp	r12, r1
    1b74:	d1 04       	cpc	r13, r1
    1b76:	e1 04       	cpc	r14, r1
    1b78:	f1 04       	cpc	r15, r1
    1b7a:	b1 f4       	brne	.+44     	; 0x1ba8 <xTaskIncrementTick+0x74>
    1b7c:	80 91 97 11 	lds	r24, 0x1197	; 0x801197 <pxDelayedTaskList>
    1b80:	90 91 98 11 	lds	r25, 0x1198	; 0x801198 <pxDelayedTaskList+0x1>
    1b84:	20 91 95 11 	lds	r18, 0x1195	; 0x801195 <pxOverflowDelayedTaskList>
    1b88:	30 91 96 11 	lds	r19, 0x1196	; 0x801196 <pxOverflowDelayedTaskList+0x1>
    1b8c:	30 93 98 11 	sts	0x1198, r19	; 0x801198 <pxDelayedTaskList+0x1>
    1b90:	20 93 97 11 	sts	0x1197, r18	; 0x801197 <pxDelayedTaskList>
    1b94:	90 93 96 11 	sts	0x1196, r25	; 0x801196 <pxOverflowDelayedTaskList+0x1>
    1b98:	80 93 95 11 	sts	0x1195, r24	; 0x801195 <pxOverflowDelayedTaskList>
    1b9c:	80 91 66 11 	lds	r24, 0x1166	; 0x801166 <xNumOfOverflows>
    1ba0:	8f 5f       	subi	r24, 0xFF	; 255
    1ba2:	80 93 66 11 	sts	0x1166, r24	; 0x801166 <xNumOfOverflows>
    1ba6:	16 dd       	rcall	.-1492   	; 0x15d4 <prvResetNextTaskUnblockTime>
    1ba8:	80 91 61 11 	lds	r24, 0x1161	; 0x801161 <xNextTaskUnblockTime>
    1bac:	90 91 62 11 	lds	r25, 0x1162	; 0x801162 <xNextTaskUnblockTime+0x1>
    1bb0:	a0 91 63 11 	lds	r26, 0x1163	; 0x801163 <xNextTaskUnblockTime+0x2>
    1bb4:	b0 91 64 11 	lds	r27, 0x1164	; 0x801164 <xNextTaskUnblockTime+0x3>
    1bb8:	c8 16       	cp	r12, r24
    1bba:	d9 06       	cpc	r13, r25
    1bbc:	ea 06       	cpc	r14, r26
    1bbe:	fb 06       	cpc	r15, r27
    1bc0:	20 f4       	brcc	.+8      	; 0x1bca <xTaskIncrementTick+0x96>
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	b2 c0       	rjmp	.+356    	; 0x1d2a <xTaskIncrementTick+0x1f6>
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	01 c0       	rjmp	.+2      	; 0x1bcc <xTaskIncrementTick+0x98>
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	e0 91 97 11 	lds	r30, 0x1197	; 0x801197 <pxDelayedTaskList>
    1bd0:	f0 91 98 11 	lds	r31, 0x1198	; 0x801198 <pxDelayedTaskList+0x1>
    1bd4:	90 81       	ld	r25, Z
    1bd6:	91 11       	cpse	r25, r1
    1bd8:	0c c0       	rjmp	.+24     	; 0x1bf2 <xTaskIncrementTick+0xbe>
    1bda:	4f ef       	ldi	r20, 0xFF	; 255
    1bdc:	5f ef       	ldi	r21, 0xFF	; 255
    1bde:	ba 01       	movw	r22, r20
    1be0:	40 93 61 11 	sts	0x1161, r20	; 0x801161 <xNextTaskUnblockTime>
    1be4:	50 93 62 11 	sts	0x1162, r21	; 0x801162 <xNextTaskUnblockTime+0x1>
    1be8:	60 93 63 11 	sts	0x1163, r22	; 0x801163 <xNextTaskUnblockTime+0x2>
    1bec:	70 93 64 11 	sts	0x1164, r23	; 0x801164 <xNextTaskUnblockTime+0x3>
    1bf0:	9c c0       	rjmp	.+312    	; 0x1d2a <xTaskIncrementTick+0x1f6>
    1bf2:	e0 91 97 11 	lds	r30, 0x1197	; 0x801197 <pxDelayedTaskList>
    1bf6:	f0 91 98 11 	lds	r31, 0x1198	; 0x801198 <pxDelayedTaskList+0x1>
    1bfa:	07 80       	ldd	r0, Z+7	; 0x07
    1bfc:	f0 85       	ldd	r31, Z+8	; 0x08
    1bfe:	e0 2d       	mov	r30, r0
    1c00:	00 84       	ldd	r0, Z+8	; 0x08
    1c02:	f1 85       	ldd	r31, Z+9	; 0x09
    1c04:	e0 2d       	mov	r30, r0
    1c06:	42 81       	ldd	r20, Z+2	; 0x02
    1c08:	53 81       	ldd	r21, Z+3	; 0x03
    1c0a:	64 81       	ldd	r22, Z+4	; 0x04
    1c0c:	75 81       	ldd	r23, Z+5	; 0x05
    1c0e:	c4 16       	cp	r12, r20
    1c10:	d5 06       	cpc	r13, r21
    1c12:	e6 06       	cpc	r14, r22
    1c14:	f7 06       	cpc	r15, r23
    1c16:	48 f4       	brcc	.+18     	; 0x1c2a <xTaskIncrementTick+0xf6>
    1c18:	40 93 61 11 	sts	0x1161, r20	; 0x801161 <xNextTaskUnblockTime>
    1c1c:	50 93 62 11 	sts	0x1162, r21	; 0x801162 <xNextTaskUnblockTime+0x1>
    1c20:	60 93 63 11 	sts	0x1163, r22	; 0x801163 <xNextTaskUnblockTime+0x2>
    1c24:	70 93 64 11 	sts	0x1164, r23	; 0x801164 <xNextTaskUnblockTime+0x3>
    1c28:	80 c0       	rjmp	.+256    	; 0x1d2a <xTaskIncrementTick+0x1f6>
    1c2a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c2c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c2e:	c6 81       	ldd	r28, Z+6	; 0x06
    1c30:	d7 81       	ldd	r29, Z+7	; 0x07
    1c32:	20 85       	ldd	r18, Z+8	; 0x08
    1c34:	31 85       	ldd	r19, Z+9	; 0x09
    1c36:	3f 83       	std	Y+7, r19	; 0x07
    1c38:	2e 83       	std	Y+6, r18	; 0x06
    1c3a:	c0 85       	ldd	r28, Z+8	; 0x08
    1c3c:	d1 85       	ldd	r29, Z+9	; 0x09
    1c3e:	26 81       	ldd	r18, Z+6	; 0x06
    1c40:	37 81       	ldd	r19, Z+7	; 0x07
    1c42:	3d 83       	std	Y+5, r19	; 0x05
    1c44:	2c 83       	std	Y+4, r18	; 0x04
    1c46:	11 96       	adiw	r26, 0x01	; 1
    1c48:	4d 91       	ld	r20, X+
    1c4a:	5c 91       	ld	r21, X
    1c4c:	12 97       	sbiw	r26, 0x02	; 2
    1c4e:	9f 01       	movw	r18, r30
    1c50:	2e 5f       	subi	r18, 0xFE	; 254
    1c52:	3f 4f       	sbci	r19, 0xFF	; 255
    1c54:	42 17       	cp	r20, r18
    1c56:	53 07       	cpc	r21, r19
    1c58:	31 f4       	brne	.+12     	; 0x1c66 <xTaskIncrementTick+0x132>
    1c5a:	40 85       	ldd	r20, Z+8	; 0x08
    1c5c:	51 85       	ldd	r21, Z+9	; 0x09
    1c5e:	12 96       	adiw	r26, 0x02	; 2
    1c60:	5c 93       	st	X, r21
    1c62:	4e 93       	st	-X, r20
    1c64:	11 97       	sbiw	r26, 0x01	; 1
    1c66:	15 86       	std	Z+13, r1	; 0x0d
    1c68:	14 86       	std	Z+12, r1	; 0x0c
    1c6a:	9c 91       	ld	r25, X
    1c6c:	91 50       	subi	r25, 0x01	; 1
    1c6e:	9c 93       	st	X, r25
    1c70:	a0 8d       	ldd	r26, Z+24	; 0x18
    1c72:	b1 8d       	ldd	r27, Z+25	; 0x19
    1c74:	10 97       	sbiw	r26, 0x00	; 0
    1c76:	09 f1       	breq	.+66     	; 0x1cba <xTaskIncrementTick+0x186>
    1c78:	c2 89       	ldd	r28, Z+18	; 0x12
    1c7a:	d3 89       	ldd	r29, Z+19	; 0x13
    1c7c:	44 89       	ldd	r20, Z+20	; 0x14
    1c7e:	55 89       	ldd	r21, Z+21	; 0x15
    1c80:	5f 83       	std	Y+7, r21	; 0x07
    1c82:	4e 83       	std	Y+6, r20	; 0x06
    1c84:	c4 89       	ldd	r28, Z+20	; 0x14
    1c86:	d5 89       	ldd	r29, Z+21	; 0x15
    1c88:	42 89       	ldd	r20, Z+18	; 0x12
    1c8a:	53 89       	ldd	r21, Z+19	; 0x13
    1c8c:	5d 83       	std	Y+5, r21	; 0x05
    1c8e:	4c 83       	std	Y+4, r20	; 0x04
    1c90:	11 96       	adiw	r26, 0x01	; 1
    1c92:	6d 91       	ld	r22, X+
    1c94:	7c 91       	ld	r23, X
    1c96:	12 97       	sbiw	r26, 0x02	; 2
    1c98:	af 01       	movw	r20, r30
    1c9a:	42 5f       	subi	r20, 0xF2	; 242
    1c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9e:	64 17       	cp	r22, r20
    1ca0:	75 07       	cpc	r23, r21
    1ca2:	31 f4       	brne	.+12     	; 0x1cb0 <xTaskIncrementTick+0x17c>
    1ca4:	44 89       	ldd	r20, Z+20	; 0x14
    1ca6:	55 89       	ldd	r21, Z+21	; 0x15
    1ca8:	12 96       	adiw	r26, 0x02	; 2
    1caa:	5c 93       	st	X, r21
    1cac:	4e 93       	st	-X, r20
    1cae:	11 97       	sbiw	r26, 0x01	; 1
    1cb0:	11 8e       	std	Z+25, r1	; 0x19
    1cb2:	10 8e       	std	Z+24, r1	; 0x18
    1cb4:	9c 91       	ld	r25, X
    1cb6:	91 50       	subi	r25, 0x01	; 1
    1cb8:	9c 93       	st	X, r25
    1cba:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1cbc:	90 91 6d 11 	lds	r25, 0x116D	; 0x80116d <uxTopReadyPriority>
    1cc0:	9a 17       	cp	r25, r26
    1cc2:	10 f4       	brcc	.+4      	; 0x1cc8 <xTaskIncrementTick+0x194>
    1cc4:	a0 93 6d 11 	sts	0x116D, r26	; 0x80116d <uxTopReadyPriority>
    1cc8:	9b e0       	ldi	r25, 0x0B	; 11
    1cca:	9a 9f       	mul	r25, r26
    1ccc:	d0 01       	movw	r26, r0
    1cce:	11 24       	eor	r1, r1
    1cd0:	a1 55       	subi	r26, 0x51	; 81
    1cd2:	be 4e       	sbci	r27, 0xEE	; 238
    1cd4:	11 96       	adiw	r26, 0x01	; 1
    1cd6:	0d 90       	ld	r0, X+
    1cd8:	bc 91       	ld	r27, X
    1cda:	a0 2d       	mov	r26, r0
    1cdc:	b7 83       	std	Z+7, r27	; 0x07
    1cde:	a6 83       	std	Z+6, r26	; 0x06
    1ce0:	16 96       	adiw	r26, 0x06	; 6
    1ce2:	4d 91       	ld	r20, X+
    1ce4:	5c 91       	ld	r21, X
    1ce6:	17 97       	sbiw	r26, 0x07	; 7
    1ce8:	51 87       	std	Z+9, r21	; 0x09
    1cea:	40 87       	std	Z+8, r20	; 0x08
    1cec:	16 96       	adiw	r26, 0x06	; 6
    1cee:	cd 91       	ld	r28, X+
    1cf0:	dc 91       	ld	r29, X
    1cf2:	17 97       	sbiw	r26, 0x07	; 7
    1cf4:	3d 83       	std	Y+5, r19	; 0x05
    1cf6:	2c 83       	std	Y+4, r18	; 0x04
    1cf8:	17 96       	adiw	r26, 0x07	; 7
    1cfa:	3c 93       	st	X, r19
    1cfc:	2e 93       	st	-X, r18
    1cfe:	16 97       	sbiw	r26, 0x06	; 6
    1d00:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d02:	9a 9f       	mul	r25, r26
    1d04:	d0 01       	movw	r26, r0
    1d06:	11 24       	eor	r1, r1
    1d08:	a1 55       	subi	r26, 0x51	; 81
    1d0a:	be 4e       	sbci	r27, 0xEE	; 238
    1d0c:	b5 87       	std	Z+13, r27	; 0x0d
    1d0e:	a4 87       	std	Z+12, r26	; 0x0c
    1d10:	9c 91       	ld	r25, X
    1d12:	9f 5f       	subi	r25, 0xFF	; 255
    1d14:	9c 93       	st	X, r25
    1d16:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d18:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    1d1c:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    1d20:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d22:	29 17       	cp	r18, r25
    1d24:	08 f0       	brcs	.+2      	; 0x1d28 <xTaskIncrementTick+0x1f4>
    1d26:	4f cf       	rjmp	.-354    	; 0x1bc6 <xTaskIncrementTick+0x92>
    1d28:	51 cf       	rjmp	.-350    	; 0x1bcc <xTaskIncrementTick+0x98>
    1d2a:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    1d2e:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    1d32:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1d34:	9b e0       	ldi	r25, 0x0B	; 11
    1d36:	e9 9f       	mul	r30, r25
    1d38:	f0 01       	movw	r30, r0
    1d3a:	11 24       	eor	r1, r1
    1d3c:	e1 55       	subi	r30, 0x51	; 81
    1d3e:	fe 4e       	sbci	r31, 0xEE	; 238
    1d40:	90 81       	ld	r25, Z
    1d42:	92 30       	cpi	r25, 0x02	; 2
    1d44:	08 f0       	brcs	.+2      	; 0x1d48 <xTaskIncrementTick+0x214>
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 91 67 11 	lds	r25, 0x1167	; 0x801167 <xYieldPending>
    1d4c:	91 11       	cpse	r25, r1
    1d4e:	16 c0       	rjmp	.+44     	; 0x1d7c <xTaskIncrementTick+0x248>
    1d50:	16 c0       	rjmp	.+44     	; 0x1d7e <xTaskIncrementTick+0x24a>
    1d52:	80 91 68 11 	lds	r24, 0x1168	; 0x801168 <xPendedTicks>
    1d56:	90 91 69 11 	lds	r25, 0x1169	; 0x801169 <xPendedTicks+0x1>
    1d5a:	a0 91 6a 11 	lds	r26, 0x116A	; 0x80116a <xPendedTicks+0x2>
    1d5e:	b0 91 6b 11 	lds	r27, 0x116B	; 0x80116b <xPendedTicks+0x3>
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	a1 1d       	adc	r26, r1
    1d66:	b1 1d       	adc	r27, r1
    1d68:	80 93 68 11 	sts	0x1168, r24	; 0x801168 <xPendedTicks>
    1d6c:	90 93 69 11 	sts	0x1169, r25	; 0x801169 <xPendedTicks+0x1>
    1d70:	a0 93 6a 11 	sts	0x116A, r26	; 0x80116a <xPendedTicks+0x2>
    1d74:	b0 93 6b 11 	sts	0x116B, r27	; 0x80116b <xPendedTicks+0x3>
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	01 c0       	rjmp	.+2      	; 0x1d7e <xTaskIncrementTick+0x24a>
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	df 91       	pop	r29
    1d80:	cf 91       	pop	r28
    1d82:	ff 90       	pop	r15
    1d84:	ef 90       	pop	r14
    1d86:	df 90       	pop	r13
    1d88:	cf 90       	pop	r12
    1d8a:	08 95       	ret

00001d8c <xTaskResumeAll>:
    1d8c:	cf 92       	push	r12
    1d8e:	df 92       	push	r13
    1d90:	ef 92       	push	r14
    1d92:	ff 92       	push	r15
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	0f 92       	push	r0
    1d9e:	80 91 5e 11 	lds	r24, 0x115E	; 0x80115e <uxSchedulerSuspended>
    1da2:	81 50       	subi	r24, 0x01	; 1
    1da4:	80 93 5e 11 	sts	0x115E, r24	; 0x80115e <uxSchedulerSuspended>
    1da8:	80 91 5e 11 	lds	r24, 0x115E	; 0x80115e <uxSchedulerSuspended>
    1dac:	81 11       	cpse	r24, r1
    1dae:	be c0       	rjmp	.+380    	; 0x1f2c <xTaskResumeAll+0x1a0>
    1db0:	80 91 72 11 	lds	r24, 0x1172	; 0x801172 <uxCurrentNumberOfTasks>
    1db4:	81 11       	cpse	r24, r1
    1db6:	88 c0       	rjmp	.+272    	; 0x1ec8 <xTaskResumeAll+0x13c>
    1db8:	bc c0       	rjmp	.+376    	; 0x1f32 <xTaskResumeAll+0x1a6>
    1dba:	e0 91 91 11 	lds	r30, 0x1191	; 0x801191 <xPendingReadyList+0x7>
    1dbe:	f0 91 92 11 	lds	r31, 0x1192	; 0x801192 <xPendingReadyList+0x8>
    1dc2:	00 84       	ldd	r0, Z+8	; 0x08
    1dc4:	f1 85       	ldd	r31, Z+9	; 0x09
    1dc6:	e0 2d       	mov	r30, r0
    1dc8:	a0 8d       	ldd	r26, Z+24	; 0x18
    1dca:	b1 8d       	ldd	r27, Z+25	; 0x19
    1dcc:	c2 89       	ldd	r28, Z+18	; 0x12
    1dce:	d3 89       	ldd	r29, Z+19	; 0x13
    1dd0:	84 89       	ldd	r24, Z+20	; 0x14
    1dd2:	95 89       	ldd	r25, Z+21	; 0x15
    1dd4:	9f 83       	std	Y+7, r25	; 0x07
    1dd6:	8e 83       	std	Y+6, r24	; 0x06
    1dd8:	c4 89       	ldd	r28, Z+20	; 0x14
    1dda:	d5 89       	ldd	r29, Z+21	; 0x15
    1ddc:	82 89       	ldd	r24, Z+18	; 0x12
    1dde:	93 89       	ldd	r25, Z+19	; 0x13
    1de0:	9d 83       	std	Y+5, r25	; 0x05
    1de2:	8c 83       	std	Y+4, r24	; 0x04
    1de4:	11 96       	adiw	r26, 0x01	; 1
    1de6:	2d 91       	ld	r18, X+
    1de8:	3c 91       	ld	r19, X
    1dea:	12 97       	sbiw	r26, 0x02	; 2
    1dec:	cf 01       	movw	r24, r30
    1dee:	0e 96       	adiw	r24, 0x0e	; 14
    1df0:	28 17       	cp	r18, r24
    1df2:	39 07       	cpc	r19, r25
    1df4:	31 f4       	brne	.+12     	; 0x1e02 <xTaskResumeAll+0x76>
    1df6:	84 89       	ldd	r24, Z+20	; 0x14
    1df8:	95 89       	ldd	r25, Z+21	; 0x15
    1dfa:	12 96       	adiw	r26, 0x02	; 2
    1dfc:	9c 93       	st	X, r25
    1dfe:	8e 93       	st	-X, r24
    1e00:	11 97       	sbiw	r26, 0x01	; 1
    1e02:	11 8e       	std	Z+25, r1	; 0x19
    1e04:	10 8e       	std	Z+24, r1	; 0x18
    1e06:	8c 91       	ld	r24, X
    1e08:	81 50       	subi	r24, 0x01	; 1
    1e0a:	8c 93       	st	X, r24
    1e0c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e0e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e10:	c6 81       	ldd	r28, Z+6	; 0x06
    1e12:	d7 81       	ldd	r29, Z+7	; 0x07
    1e14:	80 85       	ldd	r24, Z+8	; 0x08
    1e16:	91 85       	ldd	r25, Z+9	; 0x09
    1e18:	9f 83       	std	Y+7, r25	; 0x07
    1e1a:	8e 83       	std	Y+6, r24	; 0x06
    1e1c:	c0 85       	ldd	r28, Z+8	; 0x08
    1e1e:	d1 85       	ldd	r29, Z+9	; 0x09
    1e20:	86 81       	ldd	r24, Z+6	; 0x06
    1e22:	97 81       	ldd	r25, Z+7	; 0x07
    1e24:	9d 83       	std	Y+5, r25	; 0x05
    1e26:	8c 83       	std	Y+4, r24	; 0x04
    1e28:	11 96       	adiw	r26, 0x01	; 1
    1e2a:	8d 91       	ld	r24, X+
    1e2c:	9c 91       	ld	r25, X
    1e2e:	12 97       	sbiw	r26, 0x02	; 2
    1e30:	9f 01       	movw	r18, r30
    1e32:	2e 5f       	subi	r18, 0xFE	; 254
    1e34:	3f 4f       	sbci	r19, 0xFF	; 255
    1e36:	82 17       	cp	r24, r18
    1e38:	93 07       	cpc	r25, r19
    1e3a:	31 f4       	brne	.+12     	; 0x1e48 <xTaskResumeAll+0xbc>
    1e3c:	80 85       	ldd	r24, Z+8	; 0x08
    1e3e:	91 85       	ldd	r25, Z+9	; 0x09
    1e40:	12 96       	adiw	r26, 0x02	; 2
    1e42:	9c 93       	st	X, r25
    1e44:	8e 93       	st	-X, r24
    1e46:	11 97       	sbiw	r26, 0x01	; 1
    1e48:	15 86       	std	Z+13, r1	; 0x0d
    1e4a:	14 86       	std	Z+12, r1	; 0x0c
    1e4c:	8c 91       	ld	r24, X
    1e4e:	81 50       	subi	r24, 0x01	; 1
    1e50:	8c 93       	st	X, r24
    1e52:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e54:	80 91 6d 11 	lds	r24, 0x116D	; 0x80116d <uxTopReadyPriority>
    1e58:	8a 17       	cp	r24, r26
    1e5a:	10 f4       	brcc	.+4      	; 0x1e60 <xTaskResumeAll+0xd4>
    1e5c:	a0 93 6d 11 	sts	0x116D, r26	; 0x80116d <uxTopReadyPriority>
    1e60:	8b e0       	ldi	r24, 0x0B	; 11
    1e62:	8a 9f       	mul	r24, r26
    1e64:	d0 01       	movw	r26, r0
    1e66:	11 24       	eor	r1, r1
    1e68:	a1 55       	subi	r26, 0x51	; 81
    1e6a:	be 4e       	sbci	r27, 0xEE	; 238
    1e6c:	11 96       	adiw	r26, 0x01	; 1
    1e6e:	0d 90       	ld	r0, X+
    1e70:	bc 91       	ld	r27, X
    1e72:	a0 2d       	mov	r26, r0
    1e74:	b7 83       	std	Z+7, r27	; 0x07
    1e76:	a6 83       	std	Z+6, r26	; 0x06
    1e78:	16 96       	adiw	r26, 0x06	; 6
    1e7a:	4d 91       	ld	r20, X+
    1e7c:	5c 91       	ld	r21, X
    1e7e:	17 97       	sbiw	r26, 0x07	; 7
    1e80:	51 87       	std	Z+9, r21	; 0x09
    1e82:	40 87       	std	Z+8, r20	; 0x08
    1e84:	16 96       	adiw	r26, 0x06	; 6
    1e86:	cd 91       	ld	r28, X+
    1e88:	dc 91       	ld	r29, X
    1e8a:	17 97       	sbiw	r26, 0x07	; 7
    1e8c:	3d 83       	std	Y+5, r19	; 0x05
    1e8e:	2c 83       	std	Y+4, r18	; 0x04
    1e90:	17 96       	adiw	r26, 0x07	; 7
    1e92:	3c 93       	st	X, r19
    1e94:	2e 93       	st	-X, r18
    1e96:	16 97       	sbiw	r26, 0x06	; 6
    1e98:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e9a:	8a 9f       	mul	r24, r26
    1e9c:	d0 01       	movw	r26, r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	a1 55       	subi	r26, 0x51	; 81
    1ea2:	be 4e       	sbci	r27, 0xEE	; 238
    1ea4:	b5 87       	std	Z+13, r27	; 0x0d
    1ea6:	a4 87       	std	Z+12, r26	; 0x0c
    1ea8:	8c 91       	ld	r24, X
    1eaa:	8f 5f       	subi	r24, 0xFF	; 255
    1eac:	8c 93       	st	X, r24
    1eae:	92 8d       	ldd	r25, Z+26	; 0x1a
    1eb0:	a0 91 1d 12 	lds	r26, 0x121D	; 0x80121d <pxCurrentTCB>
    1eb4:	b0 91 1e 12 	lds	r27, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    1eb8:	5a 96       	adiw	r26, 0x1a	; 26
    1eba:	8c 91       	ld	r24, X
    1ebc:	98 17       	cp	r25, r24
    1ebe:	30 f0       	brcs	.+12     	; 0x1ecc <xTaskResumeAll+0x140>
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	80 93 67 11 	sts	0x1167, r24	; 0x801167 <xYieldPending>
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <xTaskResumeAll+0x140>
    1ec8:	e0 e0       	ldi	r30, 0x00	; 0
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 91 8a 11 	lds	r24, 0x118A	; 0x80118a <xPendingReadyList>
    1ed0:	81 11       	cpse	r24, r1
    1ed2:	73 cf       	rjmp	.-282    	; 0x1dba <xTaskResumeAll+0x2e>
    1ed4:	ef 2b       	or	r30, r31
    1ed6:	09 f0       	breq	.+2      	; 0x1eda <xTaskResumeAll+0x14e>
    1ed8:	7d db       	rcall	.-2310   	; 0x15d4 <prvResetNextTaskUnblockTime>
    1eda:	c0 90 68 11 	lds	r12, 0x1168	; 0x801168 <xPendedTicks>
    1ede:	d0 90 69 11 	lds	r13, 0x1169	; 0x801169 <xPendedTicks+0x1>
    1ee2:	e0 90 6a 11 	lds	r14, 0x116A	; 0x80116a <xPendedTicks+0x2>
    1ee6:	f0 90 6b 11 	lds	r15, 0x116B	; 0x80116b <xPendedTicks+0x3>
    1eea:	c1 14       	cp	r12, r1
    1eec:	d1 04       	cpc	r13, r1
    1eee:	e1 04       	cpc	r14, r1
    1ef0:	f1 04       	cpc	r15, r1
    1ef2:	a1 f0       	breq	.+40     	; 0x1f1c <xTaskResumeAll+0x190>
    1ef4:	1f de       	rcall	.-962    	; 0x1b34 <xTaskIncrementTick>
    1ef6:	88 23       	and	r24, r24
    1ef8:	19 f0       	breq	.+6      	; 0x1f00 <xTaskResumeAll+0x174>
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	80 93 67 11 	sts	0x1167, r24	; 0x801167 <xYieldPending>
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	c8 1a       	sub	r12, r24
    1f04:	d1 08       	sbc	r13, r1
    1f06:	e1 08       	sbc	r14, r1
    1f08:	f1 08       	sbc	r15, r1
    1f0a:	a1 f7       	brne	.-24     	; 0x1ef4 <xTaskResumeAll+0x168>
    1f0c:	10 92 68 11 	sts	0x1168, r1	; 0x801168 <xPendedTicks>
    1f10:	10 92 69 11 	sts	0x1169, r1	; 0x801169 <xPendedTicks+0x1>
    1f14:	10 92 6a 11 	sts	0x116A, r1	; 0x80116a <xPendedTicks+0x2>
    1f18:	10 92 6b 11 	sts	0x116B, r1	; 0x80116b <xPendedTicks+0x3>
    1f1c:	80 91 67 11 	lds	r24, 0x1167	; 0x801167 <xYieldPending>
    1f20:	88 23       	and	r24, r24
    1f22:	31 f0       	breq	.+12     	; 0x1f30 <xTaskResumeAll+0x1a4>
    1f24:	0e 94 5d 03 	call	0x6ba	; 0x6ba <vPortYield>
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	03 c0       	rjmp	.+6      	; 0x1f32 <xTaskResumeAll+0x1a6>
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	01 c0       	rjmp	.+2      	; 0x1f32 <xTaskResumeAll+0x1a6>
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	0f 90       	pop	r0
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	ff 90       	pop	r15
    1f3c:	ef 90       	pop	r14
    1f3e:	df 90       	pop	r13
    1f40:	cf 90       	pop	r12
    1f42:	08 95       	ret

00001f44 <vTaskDelay>:
    1f44:	cf 92       	push	r12
    1f46:	df 92       	push	r13
    1f48:	ef 92       	push	r14
    1f4a:	ff 92       	push	r15
    1f4c:	6b 01       	movw	r12, r22
    1f4e:	7c 01       	movw	r14, r24
    1f50:	67 2b       	or	r22, r23
    1f52:	68 2b       	or	r22, r24
    1f54:	69 2b       	or	r22, r25
    1f56:	39 f0       	breq	.+14     	; 0x1f66 <vTaskDelay+0x22>
    1f58:	d9 dd       	rcall	.-1102   	; 0x1b0c <vTaskSuspendAll>
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	c7 01       	movw	r24, r14
    1f5e:	b6 01       	movw	r22, r12
    1f60:	af dc       	rcall	.-1698   	; 0x18c0 <prvAddCurrentTaskToDelayedList>
    1f62:	14 df       	rcall	.-472    	; 0x1d8c <xTaskResumeAll>
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <vTaskDelay+0x24>
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	81 11       	cpse	r24, r1
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <vTaskDelay+0x2c>
    1f6c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <vPortYield>
    1f70:	ff 90       	pop	r15
    1f72:	ef 90       	pop	r14
    1f74:	df 90       	pop	r13
    1f76:	cf 90       	pop	r12
    1f78:	08 95       	ret

00001f7a <vTaskSwitchContext>:
    1f7a:	80 91 5e 11 	lds	r24, 0x115E	; 0x80115e <uxSchedulerSuspended>
    1f7e:	88 23       	and	r24, r24
    1f80:	21 f0       	breq	.+8      	; 0x1f8a <vTaskSwitchContext+0x10>
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	80 93 67 11 	sts	0x1167, r24	; 0x801167 <xYieldPending>
    1f88:	08 95       	ret
    1f8a:	10 92 67 11 	sts	0x1167, r1	; 0x801167 <xYieldPending>
    1f8e:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    1f92:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    1f96:	20 81       	ld	r18, Z
    1f98:	31 81       	ldd	r19, Z+1	; 0x01
    1f9a:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    1f9e:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    1fa2:	83 8d       	ldd	r24, Z+27	; 0x1b
    1fa4:	94 8d       	ldd	r25, Z+28	; 0x1c
    1fa6:	82 17       	cp	r24, r18
    1fa8:	93 07       	cpc	r25, r19
    1faa:	60 f0       	brcs	.+24     	; 0x1fc4 <vTaskSwitchContext+0x4a>
    1fac:	60 91 1d 12 	lds	r22, 0x121D	; 0x80121d <pxCurrentTCB>
    1fb0:	70 91 1e 12 	lds	r23, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    1fb4:	63 5e       	subi	r22, 0xE3	; 227
    1fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb8:	80 91 1d 12 	lds	r24, 0x121D	; 0x80121d <pxCurrentTCB>
    1fbc:	90 91 1e 12 	lds	r25, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    1fc0:	0e 94 1b 19 	call	0x3236	; 0x3236 <vApplicationStackOverflowHook>
    1fc4:	80 91 6d 11 	lds	r24, 0x116D	; 0x80116d <uxTopReadyPriority>
    1fc8:	01 c0       	rjmp	.+2      	; 0x1fcc <vTaskSwitchContext+0x52>
    1fca:	81 50       	subi	r24, 0x01	; 1
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	9b e0       	ldi	r25, 0x0B	; 11
    1fd2:	92 9f       	mul	r25, r18
    1fd4:	f0 01       	movw	r30, r0
    1fd6:	93 9f       	mul	r25, r19
    1fd8:	f0 0d       	add	r31, r0
    1fda:	11 24       	eor	r1, r1
    1fdc:	e1 55       	subi	r30, 0x51	; 81
    1fde:	fe 4e       	sbci	r31, 0xEE	; 238
    1fe0:	90 81       	ld	r25, Z
    1fe2:	99 23       	and	r25, r25
    1fe4:	91 f3       	breq	.-28     	; 0x1fca <vTaskSwitchContext+0x50>
    1fe6:	9b e0       	ldi	r25, 0x0B	; 11
    1fe8:	92 9f       	mul	r25, r18
    1fea:	a0 01       	movw	r20, r0
    1fec:	93 9f       	mul	r25, r19
    1fee:	50 0d       	add	r21, r0
    1ff0:	11 24       	eor	r1, r1
    1ff2:	df 01       	movw	r26, r30
    1ff4:	01 80       	ldd	r0, Z+1	; 0x01
    1ff6:	f2 81       	ldd	r31, Z+2	; 0x02
    1ff8:	e0 2d       	mov	r30, r0
    1ffa:	04 80       	ldd	r0, Z+4	; 0x04
    1ffc:	f5 81       	ldd	r31, Z+5	; 0x05
    1ffe:	e0 2d       	mov	r30, r0
    2000:	12 96       	adiw	r26, 0x02	; 2
    2002:	fc 93       	st	X, r31
    2004:	ee 93       	st	-X, r30
    2006:	11 97       	sbiw	r26, 0x01	; 1
    2008:	4e 54       	subi	r20, 0x4E	; 78
    200a:	5e 4e       	sbci	r21, 0xEE	; 238
    200c:	e4 17       	cp	r30, r20
    200e:	f5 07       	cpc	r31, r21
    2010:	29 f4       	brne	.+10     	; 0x201c <__DATA_REGION_LENGTH__+0x1c>
    2012:	44 81       	ldd	r20, Z+4	; 0x04
    2014:	55 81       	ldd	r21, Z+5	; 0x05
    2016:	fd 01       	movw	r30, r26
    2018:	52 83       	std	Z+2, r21	; 0x02
    201a:	41 83       	std	Z+1, r20	; 0x01
    201c:	9b e0       	ldi	r25, 0x0B	; 11
    201e:	92 9f       	mul	r25, r18
    2020:	f0 01       	movw	r30, r0
    2022:	93 9f       	mul	r25, r19
    2024:	f0 0d       	add	r31, r0
    2026:	11 24       	eor	r1, r1
    2028:	e1 55       	subi	r30, 0x51	; 81
    202a:	fe 4e       	sbci	r31, 0xEE	; 238
    202c:	01 80       	ldd	r0, Z+1	; 0x01
    202e:	f2 81       	ldd	r31, Z+2	; 0x02
    2030:	e0 2d       	mov	r30, r0
    2032:	20 85       	ldd	r18, Z+8	; 0x08
    2034:	31 85       	ldd	r19, Z+9	; 0x09
    2036:	30 93 1e 12 	sts	0x121E, r19	; 0x80121e <pxCurrentTCB+0x1>
    203a:	20 93 1d 12 	sts	0x121D, r18	; 0x80121d <pxCurrentTCB>
    203e:	80 93 6d 11 	sts	0x116D, r24	; 0x80116d <uxTopReadyPriority>
    2042:	08 95       	ret

00002044 <vTaskPlaceOnEventList>:
    2044:	cf 92       	push	r12
    2046:	df 92       	push	r13
    2048:	ef 92       	push	r14
    204a:	ff 92       	push	r15
    204c:	6a 01       	movw	r12, r20
    204e:	7b 01       	movw	r14, r22
    2050:	60 91 1d 12 	lds	r22, 0x121D	; 0x80121d <pxCurrentTCB>
    2054:	70 91 1e 12 	lds	r23, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    2058:	62 5f       	subi	r22, 0xF2	; 242
    205a:	7f 4f       	sbci	r23, 0xFF	; 255
    205c:	0e 94 a4 02 	call	0x548	; 0x548 <vListInsert>
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	c7 01       	movw	r24, r14
    2064:	b6 01       	movw	r22, r12
    2066:	2c dc       	rcall	.-1960   	; 0x18c0 <prvAddCurrentTaskToDelayedList>
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	df 90       	pop	r13
    206e:	cf 90       	pop	r12
    2070:	08 95       	ret

00002072 <vTaskPlaceOnEventListRestricted>:
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	fc 01       	movw	r30, r24
    2078:	cb 01       	movw	r24, r22
    207a:	ba 01       	movw	r22, r20
    207c:	a1 81       	ldd	r26, Z+1	; 0x01
    207e:	b2 81       	ldd	r27, Z+2	; 0x02
    2080:	c0 91 1d 12 	lds	r28, 0x121D	; 0x80121d <pxCurrentTCB>
    2084:	d0 91 1e 12 	lds	r29, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    2088:	bb 8b       	std	Y+19, r27	; 0x13
    208a:	aa 8b       	std	Y+18, r26	; 0x12
    208c:	c0 91 1d 12 	lds	r28, 0x121D	; 0x80121d <pxCurrentTCB>
    2090:	d0 91 1e 12 	lds	r29, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    2094:	16 96       	adiw	r26, 0x06	; 6
    2096:	4d 91       	ld	r20, X+
    2098:	5c 91       	ld	r21, X
    209a:	17 97       	sbiw	r26, 0x07	; 7
    209c:	5d 8b       	std	Y+21, r21	; 0x15
    209e:	4c 8b       	std	Y+20, r20	; 0x14
    20a0:	16 96       	adiw	r26, 0x06	; 6
    20a2:	cd 91       	ld	r28, X+
    20a4:	dc 91       	ld	r29, X
    20a6:	17 97       	sbiw	r26, 0x07	; 7
    20a8:	40 91 1d 12 	lds	r20, 0x121D	; 0x80121d <pxCurrentTCB>
    20ac:	50 91 1e 12 	lds	r21, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    20b0:	42 5f       	subi	r20, 0xF2	; 242
    20b2:	5f 4f       	sbci	r21, 0xFF	; 255
    20b4:	5d 83       	std	Y+5, r21	; 0x05
    20b6:	4c 83       	std	Y+4, r20	; 0x04
    20b8:	40 91 1d 12 	lds	r20, 0x121D	; 0x80121d <pxCurrentTCB>
    20bc:	50 91 1e 12 	lds	r21, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    20c0:	42 5f       	subi	r20, 0xF2	; 242
    20c2:	5f 4f       	sbci	r21, 0xFF	; 255
    20c4:	17 96       	adiw	r26, 0x07	; 7
    20c6:	5c 93       	st	X, r21
    20c8:	4e 93       	st	-X, r20
    20ca:	16 97       	sbiw	r26, 0x06	; 6
    20cc:	a0 91 1d 12 	lds	r26, 0x121D	; 0x80121d <pxCurrentTCB>
    20d0:	b0 91 1e 12 	lds	r27, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    20d4:	59 96       	adiw	r26, 0x19	; 25
    20d6:	fc 93       	st	X, r31
    20d8:	ee 93       	st	-X, r30
    20da:	58 97       	sbiw	r26, 0x18	; 24
    20dc:	30 81       	ld	r19, Z
    20de:	3f 5f       	subi	r19, 0xFF	; 255
    20e0:	30 83       	st	Z, r19
    20e2:	22 23       	and	r18, r18
    20e4:	19 f0       	breq	.+6      	; 0x20ec <vTaskPlaceOnEventListRestricted+0x7a>
    20e6:	6f ef       	ldi	r22, 0xFF	; 255
    20e8:	7f ef       	ldi	r23, 0xFF	; 255
    20ea:	cb 01       	movw	r24, r22
    20ec:	42 2f       	mov	r20, r18
    20ee:	e8 db       	rcall	.-2096   	; 0x18c0 <prvAddCurrentTaskToDelayedList>
    20f0:	df 91       	pop	r29
    20f2:	cf 91       	pop	r28
    20f4:	08 95       	ret

000020f6 <xTaskRemoveFromEventList>:
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	dc 01       	movw	r26, r24
    20fc:	17 96       	adiw	r26, 0x07	; 7
    20fe:	ed 91       	ld	r30, X+
    2100:	fc 91       	ld	r31, X
    2102:	18 97       	sbiw	r26, 0x08	; 8
    2104:	00 84       	ldd	r0, Z+8	; 0x08
    2106:	f1 85       	ldd	r31, Z+9	; 0x09
    2108:	e0 2d       	mov	r30, r0
    210a:	a0 8d       	ldd	r26, Z+24	; 0x18
    210c:	b1 8d       	ldd	r27, Z+25	; 0x19
    210e:	c2 89       	ldd	r28, Z+18	; 0x12
    2110:	d3 89       	ldd	r29, Z+19	; 0x13
    2112:	84 89       	ldd	r24, Z+20	; 0x14
    2114:	95 89       	ldd	r25, Z+21	; 0x15
    2116:	9f 83       	std	Y+7, r25	; 0x07
    2118:	8e 83       	std	Y+6, r24	; 0x06
    211a:	c4 89       	ldd	r28, Z+20	; 0x14
    211c:	d5 89       	ldd	r29, Z+21	; 0x15
    211e:	82 89       	ldd	r24, Z+18	; 0x12
    2120:	93 89       	ldd	r25, Z+19	; 0x13
    2122:	9d 83       	std	Y+5, r25	; 0x05
    2124:	8c 83       	std	Y+4, r24	; 0x04
    2126:	11 96       	adiw	r26, 0x01	; 1
    2128:	8d 91       	ld	r24, X+
    212a:	9c 91       	ld	r25, X
    212c:	12 97       	sbiw	r26, 0x02	; 2
    212e:	9f 01       	movw	r18, r30
    2130:	22 5f       	subi	r18, 0xF2	; 242
    2132:	3f 4f       	sbci	r19, 0xFF	; 255
    2134:	82 17       	cp	r24, r18
    2136:	93 07       	cpc	r25, r19
    2138:	31 f4       	brne	.+12     	; 0x2146 <xTaskRemoveFromEventList+0x50>
    213a:	84 89       	ldd	r24, Z+20	; 0x14
    213c:	95 89       	ldd	r25, Z+21	; 0x15
    213e:	12 96       	adiw	r26, 0x02	; 2
    2140:	9c 93       	st	X, r25
    2142:	8e 93       	st	-X, r24
    2144:	11 97       	sbiw	r26, 0x01	; 1
    2146:	11 8e       	std	Z+25, r1	; 0x19
    2148:	10 8e       	std	Z+24, r1	; 0x18
    214a:	8c 91       	ld	r24, X
    214c:	81 50       	subi	r24, 0x01	; 1
    214e:	8c 93       	st	X, r24
    2150:	80 91 5e 11 	lds	r24, 0x115E	; 0x80115e <uxSchedulerSuspended>
    2154:	81 11       	cpse	r24, r1
    2156:	52 c0       	rjmp	.+164    	; 0x21fc <xTaskRemoveFromEventList+0x106>
    2158:	a4 85       	ldd	r26, Z+12	; 0x0c
    215a:	b5 85       	ldd	r27, Z+13	; 0x0d
    215c:	c6 81       	ldd	r28, Z+6	; 0x06
    215e:	d7 81       	ldd	r29, Z+7	; 0x07
    2160:	80 85       	ldd	r24, Z+8	; 0x08
    2162:	91 85       	ldd	r25, Z+9	; 0x09
    2164:	9f 83       	std	Y+7, r25	; 0x07
    2166:	8e 83       	std	Y+6, r24	; 0x06
    2168:	c0 85       	ldd	r28, Z+8	; 0x08
    216a:	d1 85       	ldd	r29, Z+9	; 0x09
    216c:	86 81       	ldd	r24, Z+6	; 0x06
    216e:	97 81       	ldd	r25, Z+7	; 0x07
    2170:	9d 83       	std	Y+5, r25	; 0x05
    2172:	8c 83       	std	Y+4, r24	; 0x04
    2174:	11 96       	adiw	r26, 0x01	; 1
    2176:	8d 91       	ld	r24, X+
    2178:	9c 91       	ld	r25, X
    217a:	12 97       	sbiw	r26, 0x02	; 2
    217c:	9f 01       	movw	r18, r30
    217e:	2e 5f       	subi	r18, 0xFE	; 254
    2180:	3f 4f       	sbci	r19, 0xFF	; 255
    2182:	82 17       	cp	r24, r18
    2184:	93 07       	cpc	r25, r19
    2186:	31 f4       	brne	.+12     	; 0x2194 <xTaskRemoveFromEventList+0x9e>
    2188:	80 85       	ldd	r24, Z+8	; 0x08
    218a:	91 85       	ldd	r25, Z+9	; 0x09
    218c:	12 96       	adiw	r26, 0x02	; 2
    218e:	9c 93       	st	X, r25
    2190:	8e 93       	st	-X, r24
    2192:	11 97       	sbiw	r26, 0x01	; 1
    2194:	15 86       	std	Z+13, r1	; 0x0d
    2196:	14 86       	std	Z+12, r1	; 0x0c
    2198:	8c 91       	ld	r24, X
    219a:	81 50       	subi	r24, 0x01	; 1
    219c:	8c 93       	st	X, r24
    219e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21a0:	80 91 6d 11 	lds	r24, 0x116D	; 0x80116d <uxTopReadyPriority>
    21a4:	8a 17       	cp	r24, r26
    21a6:	10 f4       	brcc	.+4      	; 0x21ac <xTaskRemoveFromEventList+0xb6>
    21a8:	a0 93 6d 11 	sts	0x116D, r26	; 0x80116d <uxTopReadyPriority>
    21ac:	8b e0       	ldi	r24, 0x0B	; 11
    21ae:	8a 9f       	mul	r24, r26
    21b0:	d0 01       	movw	r26, r0
    21b2:	11 24       	eor	r1, r1
    21b4:	a1 55       	subi	r26, 0x51	; 81
    21b6:	be 4e       	sbci	r27, 0xEE	; 238
    21b8:	11 96       	adiw	r26, 0x01	; 1
    21ba:	0d 90       	ld	r0, X+
    21bc:	bc 91       	ld	r27, X
    21be:	a0 2d       	mov	r26, r0
    21c0:	b7 83       	std	Z+7, r27	; 0x07
    21c2:	a6 83       	std	Z+6, r26	; 0x06
    21c4:	16 96       	adiw	r26, 0x06	; 6
    21c6:	4d 91       	ld	r20, X+
    21c8:	5c 91       	ld	r21, X
    21ca:	17 97       	sbiw	r26, 0x07	; 7
    21cc:	51 87       	std	Z+9, r21	; 0x09
    21ce:	40 87       	std	Z+8, r20	; 0x08
    21d0:	16 96       	adiw	r26, 0x06	; 6
    21d2:	cd 91       	ld	r28, X+
    21d4:	dc 91       	ld	r29, X
    21d6:	17 97       	sbiw	r26, 0x07	; 7
    21d8:	3d 83       	std	Y+5, r19	; 0x05
    21da:	2c 83       	std	Y+4, r18	; 0x04
    21dc:	17 96       	adiw	r26, 0x07	; 7
    21de:	3c 93       	st	X, r19
    21e0:	2e 93       	st	-X, r18
    21e2:	16 97       	sbiw	r26, 0x06	; 6
    21e4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21e6:	8a 9f       	mul	r24, r26
    21e8:	d0 01       	movw	r26, r0
    21ea:	11 24       	eor	r1, r1
    21ec:	a1 55       	subi	r26, 0x51	; 81
    21ee:	be 4e       	sbci	r27, 0xEE	; 238
    21f0:	b5 87       	std	Z+13, r27	; 0x0d
    21f2:	a4 87       	std	Z+12, r26	; 0x0c
    21f4:	8c 91       	ld	r24, X
    21f6:	8f 5f       	subi	r24, 0xFF	; 255
    21f8:	8c 93       	st	X, r24
    21fa:	1c c0       	rjmp	.+56     	; 0x2234 <__stack+0x35>
    21fc:	4a e8       	ldi	r20, 0x8A	; 138
    21fe:	51 e1       	ldi	r21, 0x11	; 17
    2200:	da 01       	movw	r26, r20
    2202:	11 96       	adiw	r26, 0x01	; 1
    2204:	cd 91       	ld	r28, X+
    2206:	dc 91       	ld	r29, X
    2208:	12 97       	sbiw	r26, 0x02	; 2
    220a:	d3 8b       	std	Z+19, r29	; 0x13
    220c:	c2 8b       	std	Z+18, r28	; 0x12
    220e:	8e 81       	ldd	r24, Y+6	; 0x06
    2210:	9f 81       	ldd	r25, Y+7	; 0x07
    2212:	95 8b       	std	Z+21, r25	; 0x15
    2214:	84 8b       	std	Z+20, r24	; 0x14
    2216:	8e 81       	ldd	r24, Y+6	; 0x06
    2218:	9f 81       	ldd	r25, Y+7	; 0x07
    221a:	dc 01       	movw	r26, r24
    221c:	15 96       	adiw	r26, 0x05	; 5
    221e:	3c 93       	st	X, r19
    2220:	2e 93       	st	-X, r18
    2222:	14 97       	sbiw	r26, 0x04	; 4
    2224:	3f 83       	std	Y+7, r19	; 0x07
    2226:	2e 83       	std	Y+6, r18	; 0x06
    2228:	51 8f       	std	Z+25, r21	; 0x19
    222a:	40 8f       	std	Z+24, r20	; 0x18
    222c:	da 01       	movw	r26, r20
    222e:	8c 91       	ld	r24, X
    2230:	8f 5f       	subi	r24, 0xFF	; 255
    2232:	8c 93       	st	X, r24
    2234:	92 8d       	ldd	r25, Z+26	; 0x1a
    2236:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    223a:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    223e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2240:	89 17       	cp	r24, r25
    2242:	20 f4       	brcc	.+8      	; 0x224c <__stack+0x4d>
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	80 93 67 11 	sts	0x1167, r24	; 0x801167 <xYieldPending>
    224a:	01 c0       	rjmp	.+2      	; 0x224e <__stack+0x4f>
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	08 95       	ret

00002254 <vTaskSetTimeOutState>:
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	0f 92       	push	r0
    225a:	20 91 66 11 	lds	r18, 0x1166	; 0x801166 <xNumOfOverflows>
    225e:	fc 01       	movw	r30, r24
    2260:	20 83       	st	Z, r18
    2262:	40 91 6e 11 	lds	r20, 0x116E	; 0x80116e <xTickCount>
    2266:	50 91 6f 11 	lds	r21, 0x116F	; 0x80116f <xTickCount+0x1>
    226a:	60 91 70 11 	lds	r22, 0x1170	; 0x801170 <xTickCount+0x2>
    226e:	70 91 71 11 	lds	r23, 0x1171	; 0x801171 <xTickCount+0x3>
    2272:	41 83       	std	Z+1, r20	; 0x01
    2274:	52 83       	std	Z+2, r21	; 0x02
    2276:	63 83       	std	Z+3, r22	; 0x03
    2278:	74 83       	std	Z+4, r23	; 0x04
    227a:	0f 90       	pop	r0
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	08 95       	ret

00002280 <vTaskInternalSetTimeOutState>:
    2280:	20 91 66 11 	lds	r18, 0x1166	; 0x801166 <xNumOfOverflows>
    2284:	fc 01       	movw	r30, r24
    2286:	20 83       	st	Z, r18
    2288:	40 91 6e 11 	lds	r20, 0x116E	; 0x80116e <xTickCount>
    228c:	50 91 6f 11 	lds	r21, 0x116F	; 0x80116f <xTickCount+0x1>
    2290:	60 91 70 11 	lds	r22, 0x1170	; 0x801170 <xTickCount+0x2>
    2294:	70 91 71 11 	lds	r23, 0x1171	; 0x801171 <xTickCount+0x3>
    2298:	41 83       	std	Z+1, r20	; 0x01
    229a:	52 83       	std	Z+2, r21	; 0x02
    229c:	63 83       	std	Z+3, r22	; 0x03
    229e:	74 83       	std	Z+4, r23	; 0x04
    22a0:	08 95       	ret

000022a2 <xTaskCheckForTimeOut>:
    22a2:	8f 92       	push	r8
    22a4:	9f 92       	push	r9
    22a6:	af 92       	push	r10
    22a8:	bf 92       	push	r11
    22aa:	cf 92       	push	r12
    22ac:	df 92       	push	r13
    22ae:	ef 92       	push	r14
    22b0:	ff 92       	push	r15
    22b2:	0f 93       	push	r16
    22b4:	1f 93       	push	r17
    22b6:	cf 93       	push	r28
    22b8:	df 93       	push	r29
    22ba:	fb 01       	movw	r30, r22
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	0f 92       	push	r0
    22c2:	c0 90 6e 11 	lds	r12, 0x116E	; 0x80116e <xTickCount>
    22c6:	d0 90 6f 11 	lds	r13, 0x116F	; 0x80116f <xTickCount+0x1>
    22ca:	e0 90 70 11 	lds	r14, 0x1170	; 0x801170 <xTickCount+0x2>
    22ce:	f0 90 71 11 	lds	r15, 0x1171	; 0x801171 <xTickCount+0x3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	11 96       	adiw	r26, 0x01	; 1
    22d6:	0d 91       	ld	r16, X+
    22d8:	1d 91       	ld	r17, X+
    22da:	2d 91       	ld	r18, X+
    22dc:	3c 91       	ld	r19, X
    22de:	14 97       	sbiw	r26, 0x04	; 4
    22e0:	46 01       	movw	r8, r12
    22e2:	57 01       	movw	r10, r14
    22e4:	80 1a       	sub	r8, r16
    22e6:	91 0a       	sbc	r9, r17
    22e8:	a2 0a       	sbc	r10, r18
    22ea:	b3 0a       	sbc	r11, r19
    22ec:	40 81       	ld	r20, Z
    22ee:	51 81       	ldd	r21, Z+1	; 0x01
    22f0:	62 81       	ldd	r22, Z+2	; 0x02
    22f2:	73 81       	ldd	r23, Z+3	; 0x03
    22f4:	4f 3f       	cpi	r20, 0xFF	; 255
    22f6:	bf ef       	ldi	r27, 0xFF	; 255
    22f8:	5b 07       	cpc	r21, r27
    22fa:	6b 07       	cpc	r22, r27
    22fc:	7b 07       	cpc	r23, r27
    22fe:	39 f1       	breq	.+78     	; 0x234e <xTaskCheckForTimeOut+0xac>
    2300:	ec 01       	movw	r28, r24
    2302:	b8 81       	ld	r27, Y
    2304:	a0 91 66 11 	lds	r26, 0x1166	; 0x801166 <xNumOfOverflows>
    2308:	ba 17       	cp	r27, r26
    230a:	59 f0       	breq	.+22     	; 0x2322 <xTaskCheckForTimeOut+0x80>
    230c:	c0 16       	cp	r12, r16
    230e:	d1 06       	cpc	r13, r17
    2310:	e2 06       	cpc	r14, r18
    2312:	f3 06       	cpc	r15, r19
    2314:	30 f0       	brcs	.+12     	; 0x2322 <xTaskCheckForTimeOut+0x80>
    2316:	10 82       	st	Z, r1
    2318:	11 82       	std	Z+1, r1	; 0x01
    231a:	12 82       	std	Z+2, r1	; 0x02
    231c:	13 82       	std	Z+3, r1	; 0x03
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	17 c0       	rjmp	.+46     	; 0x2350 <xTaskCheckForTimeOut+0xae>
    2322:	84 16       	cp	r8, r20
    2324:	95 06       	cpc	r9, r21
    2326:	a6 06       	cpc	r10, r22
    2328:	b7 06       	cpc	r11, r23
    232a:	58 f4       	brcc	.+22     	; 0x2342 <xTaskCheckForTimeOut+0xa0>
    232c:	48 19       	sub	r20, r8
    232e:	59 09       	sbc	r21, r9
    2330:	6a 09       	sbc	r22, r10
    2332:	7b 09       	sbc	r23, r11
    2334:	40 83       	st	Z, r20
    2336:	51 83       	std	Z+1, r21	; 0x01
    2338:	62 83       	std	Z+2, r22	; 0x02
    233a:	73 83       	std	Z+3, r23	; 0x03
    233c:	a1 df       	rcall	.-190    	; 0x2280 <vTaskInternalSetTimeOutState>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	07 c0       	rjmp	.+14     	; 0x2350 <xTaskCheckForTimeOut+0xae>
    2342:	10 82       	st	Z, r1
    2344:	11 82       	std	Z+1, r1	; 0x01
    2346:	12 82       	std	Z+2, r1	; 0x02
    2348:	13 82       	std	Z+3, r1	; 0x03
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	01 c0       	rjmp	.+2      	; 0x2350 <xTaskCheckForTimeOut+0xae>
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	0f 90       	pop	r0
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	ff 90       	pop	r15
    235e:	ef 90       	pop	r14
    2360:	df 90       	pop	r13
    2362:	cf 90       	pop	r12
    2364:	bf 90       	pop	r11
    2366:	af 90       	pop	r10
    2368:	9f 90       	pop	r9
    236a:	8f 90       	pop	r8
    236c:	08 95       	ret

0000236e <vTaskMissedYield>:
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	80 93 67 11 	sts	0x1167, r24	; 0x801167 <xYieldPending>
    2374:	08 95       	ret

00002376 <xTaskGetCurrentTaskHandle>:
    2376:	80 91 1d 12 	lds	r24, 0x121D	; 0x80121d <pxCurrentTCB>
    237a:	90 91 1e 12 	lds	r25, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    237e:	08 95       	ret

00002380 <xTaskGetSchedulerState>:
    2380:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <xSchedulerRunning>
    2384:	88 23       	and	r24, r24
    2386:	31 f0       	breq	.+12     	; 0x2394 <xTaskGetSchedulerState+0x14>
    2388:	80 91 5e 11 	lds	r24, 0x115E	; 0x80115e <uxSchedulerSuspended>
    238c:	81 11       	cpse	r24, r1
    238e:	04 c0       	rjmp	.+8      	; 0x2398 <xTaskGetSchedulerState+0x18>
    2390:	82 e0       	ldi	r24, 0x02	; 2
    2392:	08 95       	ret
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	08 95       	ret
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	08 95       	ret

0000239c <xTaskPriorityInherit>:
    239c:	0f 93       	push	r16
    239e:	1f 93       	push	r17
    23a0:	cf 93       	push	r28
    23a2:	df 93       	push	r29
    23a4:	fc 01       	movw	r30, r24
    23a6:	89 2b       	or	r24, r25
    23a8:	09 f4       	brne	.+2      	; 0x23ac <xTaskPriorityInherit+0x10>
    23aa:	77 c0       	rjmp	.+238    	; 0x249a <xTaskPriorityInherit+0xfe>
    23ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    23ae:	a0 91 1d 12 	lds	r26, 0x121D	; 0x80121d <pxCurrentTCB>
    23b2:	b0 91 1e 12 	lds	r27, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    23b6:	5a 96       	adiw	r26, 0x1a	; 26
    23b8:	9c 91       	ld	r25, X
    23ba:	89 17       	cp	r24, r25
    23bc:	08 f0       	brcs	.+2      	; 0x23c0 <xTaskPriorityInherit+0x24>
    23be:	63 c0       	rjmp	.+198    	; 0x2486 <xTaskPriorityInherit+0xea>
    23c0:	46 85       	ldd	r20, Z+14	; 0x0e
    23c2:	57 85       	ldd	r21, Z+15	; 0x0f
    23c4:	60 89       	ldd	r22, Z+16	; 0x10
    23c6:	71 89       	ldd	r23, Z+17	; 0x11
    23c8:	77 23       	and	r23, r23
    23ca:	94 f0       	brlt	.+36     	; 0x23f0 <xTaskPriorityInherit+0x54>
    23cc:	a0 91 1d 12 	lds	r26, 0x121D	; 0x80121d <pxCurrentTCB>
    23d0:	b0 91 1e 12 	lds	r27, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    23d4:	5a 96       	adiw	r26, 0x1a	; 26
    23d6:	9c 91       	ld	r25, X
    23d8:	4a e0       	ldi	r20, 0x0A	; 10
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	70 e0       	ldi	r23, 0x00	; 0
    23e0:	49 1b       	sub	r20, r25
    23e2:	51 09       	sbc	r21, r1
    23e4:	61 09       	sbc	r22, r1
    23e6:	71 09       	sbc	r23, r1
    23e8:	46 87       	std	Z+14, r20	; 0x0e
    23ea:	57 87       	std	Z+15, r21	; 0x0f
    23ec:	60 8b       	std	Z+16, r22	; 0x10
    23ee:	71 8b       	std	Z+17, r23	; 0x11
    23f0:	24 85       	ldd	r18, Z+12	; 0x0c
    23f2:	35 85       	ldd	r19, Z+13	; 0x0d
    23f4:	4b e0       	ldi	r20, 0x0B	; 11
    23f6:	84 9f       	mul	r24, r20
    23f8:	c0 01       	movw	r24, r0
    23fa:	11 24       	eor	r1, r1
    23fc:	81 55       	subi	r24, 0x51	; 81
    23fe:	9e 4e       	sbci	r25, 0xEE	; 238
    2400:	28 17       	cp	r18, r24
    2402:	39 07       	cpc	r19, r25
    2404:	b9 f5       	brne	.+110    	; 0x2474 <xTaskPriorityInherit+0xd8>
    2406:	ef 01       	movw	r28, r30
    2408:	8f 01       	movw	r16, r30
    240a:	0e 5f       	subi	r16, 0xFE	; 254
    240c:	1f 4f       	sbci	r17, 0xFF	; 255
    240e:	c8 01       	movw	r24, r16
    2410:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <uxListRemove>
    2414:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    2418:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    241c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    241e:	ea 8f       	std	Y+26, r30	; 0x1a
    2420:	80 91 6d 11 	lds	r24, 0x116D	; 0x80116d <uxTopReadyPriority>
    2424:	8e 17       	cp	r24, r30
    2426:	10 f4       	brcc	.+4      	; 0x242c <xTaskPriorityInherit+0x90>
    2428:	e0 93 6d 11 	sts	0x116D, r30	; 0x80116d <uxTopReadyPriority>
    242c:	8b e0       	ldi	r24, 0x0B	; 11
    242e:	8e 9f       	mul	r24, r30
    2430:	f0 01       	movw	r30, r0
    2432:	11 24       	eor	r1, r1
    2434:	e1 55       	subi	r30, 0x51	; 81
    2436:	fe 4e       	sbci	r31, 0xEE	; 238
    2438:	01 80       	ldd	r0, Z+1	; 0x01
    243a:	f2 81       	ldd	r31, Z+2	; 0x02
    243c:	e0 2d       	mov	r30, r0
    243e:	ff 83       	std	Y+7, r31	; 0x07
    2440:	ee 83       	std	Y+6, r30	; 0x06
    2442:	26 81       	ldd	r18, Z+6	; 0x06
    2444:	37 81       	ldd	r19, Z+7	; 0x07
    2446:	39 87       	std	Y+9, r19	; 0x09
    2448:	28 87       	std	Y+8, r18	; 0x08
    244a:	a6 81       	ldd	r26, Z+6	; 0x06
    244c:	b7 81       	ldd	r27, Z+7	; 0x07
    244e:	15 96       	adiw	r26, 0x05	; 5
    2450:	1c 93       	st	X, r17
    2452:	0e 93       	st	-X, r16
    2454:	14 97       	sbiw	r26, 0x04	; 4
    2456:	17 83       	std	Z+7, r17	; 0x07
    2458:	06 83       	std	Z+6, r16	; 0x06
    245a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    245c:	8e 9f       	mul	r24, r30
    245e:	f0 01       	movw	r30, r0
    2460:	11 24       	eor	r1, r1
    2462:	e1 55       	subi	r30, 0x51	; 81
    2464:	fe 4e       	sbci	r31, 0xEE	; 238
    2466:	fd 87       	std	Y+13, r31	; 0x0d
    2468:	ec 87       	std	Y+12, r30	; 0x0c
    246a:	80 81       	ld	r24, Z
    246c:	8f 5f       	subi	r24, 0xFF	; 255
    246e:	80 83       	st	Z, r24
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	16 c0       	rjmp	.+44     	; 0x24a0 <xTaskPriorityInherit+0x104>
    2474:	a0 91 1d 12 	lds	r26, 0x121D	; 0x80121d <pxCurrentTCB>
    2478:	b0 91 1e 12 	lds	r27, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    247c:	5a 96       	adiw	r26, 0x1a	; 26
    247e:	8c 91       	ld	r24, X
    2480:	82 8f       	std	Z+26, r24	; 0x1a
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	0d c0       	rjmp	.+26     	; 0x24a0 <xTaskPriorityInherit+0x104>
    2486:	95 a5       	ldd	r25, Z+45	; 0x2d
    2488:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    248c:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    2490:	82 8d       	ldd	r24, Z+26	; 0x1a
    2492:	98 17       	cp	r25, r24
    2494:	20 f0       	brcs	.+8      	; 0x249e <xTaskPriorityInherit+0x102>
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	03 c0       	rjmp	.+6      	; 0x24a0 <xTaskPriorityInherit+0x104>
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	01 c0       	rjmp	.+2      	; 0x24a0 <xTaskPriorityInherit+0x104>
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	1f 91       	pop	r17
    24a6:	0f 91       	pop	r16
    24a8:	08 95       	ret

000024aa <xTaskPriorityDisinherit>:
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	fc 01       	movw	r30, r24
    24b4:	89 2b       	or	r24, r25
    24b6:	09 f4       	brne	.+2      	; 0x24ba <xTaskPriorityDisinherit+0x10>
    24b8:	49 c0       	rjmp	.+146    	; 0x254c <xTaskPriorityDisinherit+0xa2>
    24ba:	86 a5       	ldd	r24, Z+46	; 0x2e
    24bc:	81 50       	subi	r24, 0x01	; 1
    24be:	86 a7       	std	Z+46, r24	; 0x2e
    24c0:	22 8d       	ldd	r18, Z+26	; 0x1a
    24c2:	95 a5       	ldd	r25, Z+45	; 0x2d
    24c4:	29 17       	cp	r18, r25
    24c6:	09 f4       	brne	.+2      	; 0x24ca <xTaskPriorityDisinherit+0x20>
    24c8:	43 c0       	rjmp	.+134    	; 0x2550 <xTaskPriorityDisinherit+0xa6>
    24ca:	81 11       	cpse	r24, r1
    24cc:	43 c0       	rjmp	.+134    	; 0x2554 <xTaskPriorityDisinherit+0xaa>
    24ce:	ef 01       	movw	r28, r30
    24d0:	8f 01       	movw	r16, r30
    24d2:	0e 5f       	subi	r16, 0xFE	; 254
    24d4:	1f 4f       	sbci	r17, 0xFF	; 255
    24d6:	c8 01       	movw	r24, r16
    24d8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <uxListRemove>
    24dc:	ed a5       	ldd	r30, Y+45	; 0x2d
    24de:	ea 8f       	std	Y+26, r30	; 0x1a
    24e0:	8a e0       	ldi	r24, 0x0A	; 10
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	a0 e0       	ldi	r26, 0x00	; 0
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	8e 1b       	sub	r24, r30
    24ea:	91 09       	sbc	r25, r1
    24ec:	a1 09       	sbc	r26, r1
    24ee:	b1 09       	sbc	r27, r1
    24f0:	8e 87       	std	Y+14, r24	; 0x0e
    24f2:	9f 87       	std	Y+15, r25	; 0x0f
    24f4:	a8 8b       	std	Y+16, r26	; 0x10
    24f6:	b9 8b       	std	Y+17, r27	; 0x11
    24f8:	80 91 6d 11 	lds	r24, 0x116D	; 0x80116d <uxTopReadyPriority>
    24fc:	8e 17       	cp	r24, r30
    24fe:	10 f4       	brcc	.+4      	; 0x2504 <xTaskPriorityDisinherit+0x5a>
    2500:	e0 93 6d 11 	sts	0x116D, r30	; 0x80116d <uxTopReadyPriority>
    2504:	8b e0       	ldi	r24, 0x0B	; 11
    2506:	8e 9f       	mul	r24, r30
    2508:	f0 01       	movw	r30, r0
    250a:	11 24       	eor	r1, r1
    250c:	e1 55       	subi	r30, 0x51	; 81
    250e:	fe 4e       	sbci	r31, 0xEE	; 238
    2510:	01 80       	ldd	r0, Z+1	; 0x01
    2512:	f2 81       	ldd	r31, Z+2	; 0x02
    2514:	e0 2d       	mov	r30, r0
    2516:	ff 83       	std	Y+7, r31	; 0x07
    2518:	ee 83       	std	Y+6, r30	; 0x06
    251a:	26 81       	ldd	r18, Z+6	; 0x06
    251c:	37 81       	ldd	r19, Z+7	; 0x07
    251e:	39 87       	std	Y+9, r19	; 0x09
    2520:	28 87       	std	Y+8, r18	; 0x08
    2522:	a6 81       	ldd	r26, Z+6	; 0x06
    2524:	b7 81       	ldd	r27, Z+7	; 0x07
    2526:	15 96       	adiw	r26, 0x05	; 5
    2528:	1c 93       	st	X, r17
    252a:	0e 93       	st	-X, r16
    252c:	14 97       	sbiw	r26, 0x04	; 4
    252e:	17 83       	std	Z+7, r17	; 0x07
    2530:	06 83       	std	Z+6, r16	; 0x06
    2532:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2534:	8e 9f       	mul	r24, r30
    2536:	f0 01       	movw	r30, r0
    2538:	11 24       	eor	r1, r1
    253a:	e1 55       	subi	r30, 0x51	; 81
    253c:	fe 4e       	sbci	r31, 0xEE	; 238
    253e:	fd 87       	std	Y+13, r31	; 0x0d
    2540:	ec 87       	std	Y+12, r30	; 0x0c
    2542:	80 81       	ld	r24, Z
    2544:	8f 5f       	subi	r24, 0xFF	; 255
    2546:	80 83       	st	Z, r24
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	05 c0       	rjmp	.+10     	; 0x2556 <xTaskPriorityDisinherit+0xac>
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	03 c0       	rjmp	.+6      	; 0x2556 <xTaskPriorityDisinherit+0xac>
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	01 c0       	rjmp	.+2      	; 0x2556 <xTaskPriorityDisinherit+0xac>
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	1f 91       	pop	r17
    255c:	0f 91       	pop	r16
    255e:	08 95       	ret

00002560 <vTaskPriorityDisinheritAfterTimeout>:
    2560:	0f 93       	push	r16
    2562:	1f 93       	push	r17
    2564:	cf 93       	push	r28
    2566:	df 93       	push	r29
    2568:	fc 01       	movw	r30, r24
    256a:	89 2b       	or	r24, r25
    256c:	09 f4       	brne	.+2      	; 0x2570 <vTaskPriorityDisinheritAfterTimeout+0x10>
    256e:	5a c0       	rjmp	.+180    	; 0x2624 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2570:	85 a5       	ldd	r24, Z+45	; 0x2d
    2572:	86 17       	cp	r24, r22
    2574:	08 f4       	brcc	.+2      	; 0x2578 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2576:	86 2f       	mov	r24, r22
    2578:	92 8d       	ldd	r25, Z+26	; 0x1a
    257a:	89 17       	cp	r24, r25
    257c:	09 f4       	brne	.+2      	; 0x2580 <vTaskPriorityDisinheritAfterTimeout+0x20>
    257e:	52 c0       	rjmp	.+164    	; 0x2624 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2580:	26 a5       	ldd	r18, Z+46	; 0x2e
    2582:	21 30       	cpi	r18, 0x01	; 1
    2584:	09 f0       	breq	.+2      	; 0x2588 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2586:	4e c0       	rjmp	.+156    	; 0x2624 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2588:	82 8f       	std	Z+26, r24	; 0x1a
    258a:	46 85       	ldd	r20, Z+14	; 0x0e
    258c:	57 85       	ldd	r21, Z+15	; 0x0f
    258e:	60 89       	ldd	r22, Z+16	; 0x10
    2590:	71 89       	ldd	r23, Z+17	; 0x11
    2592:	77 23       	and	r23, r23
    2594:	64 f0       	brlt	.+24     	; 0x25ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2596:	4a e0       	ldi	r20, 0x0A	; 10
    2598:	50 e0       	ldi	r21, 0x00	; 0
    259a:	60 e0       	ldi	r22, 0x00	; 0
    259c:	70 e0       	ldi	r23, 0x00	; 0
    259e:	48 1b       	sub	r20, r24
    25a0:	51 09       	sbc	r21, r1
    25a2:	61 09       	sbc	r22, r1
    25a4:	71 09       	sbc	r23, r1
    25a6:	46 87       	std	Z+14, r20	; 0x0e
    25a8:	57 87       	std	Z+15, r21	; 0x0f
    25aa:	60 8b       	std	Z+16, r22	; 0x10
    25ac:	71 8b       	std	Z+17, r23	; 0x11
    25ae:	24 85       	ldd	r18, Z+12	; 0x0c
    25b0:	35 85       	ldd	r19, Z+13	; 0x0d
    25b2:	4b e0       	ldi	r20, 0x0B	; 11
    25b4:	94 9f       	mul	r25, r20
    25b6:	c0 01       	movw	r24, r0
    25b8:	11 24       	eor	r1, r1
    25ba:	81 55       	subi	r24, 0x51	; 81
    25bc:	9e 4e       	sbci	r25, 0xEE	; 238
    25be:	28 17       	cp	r18, r24
    25c0:	39 07       	cpc	r19, r25
    25c2:	81 f5       	brne	.+96     	; 0x2624 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    25c4:	ef 01       	movw	r28, r30
    25c6:	8f 01       	movw	r16, r30
    25c8:	0e 5f       	subi	r16, 0xFE	; 254
    25ca:	1f 4f       	sbci	r17, 0xFF	; 255
    25cc:	c8 01       	movw	r24, r16
    25ce:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <uxListRemove>
    25d2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    25d4:	80 91 6d 11 	lds	r24, 0x116D	; 0x80116d <uxTopReadyPriority>
    25d8:	8e 17       	cp	r24, r30
    25da:	10 f4       	brcc	.+4      	; 0x25e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
    25dc:	e0 93 6d 11 	sts	0x116D, r30	; 0x80116d <uxTopReadyPriority>
    25e0:	8b e0       	ldi	r24, 0x0B	; 11
    25e2:	8e 9f       	mul	r24, r30
    25e4:	f0 01       	movw	r30, r0
    25e6:	11 24       	eor	r1, r1
    25e8:	e1 55       	subi	r30, 0x51	; 81
    25ea:	fe 4e       	sbci	r31, 0xEE	; 238
    25ec:	01 80       	ldd	r0, Z+1	; 0x01
    25ee:	f2 81       	ldd	r31, Z+2	; 0x02
    25f0:	e0 2d       	mov	r30, r0
    25f2:	ff 83       	std	Y+7, r31	; 0x07
    25f4:	ee 83       	std	Y+6, r30	; 0x06
    25f6:	26 81       	ldd	r18, Z+6	; 0x06
    25f8:	37 81       	ldd	r19, Z+7	; 0x07
    25fa:	39 87       	std	Y+9, r19	; 0x09
    25fc:	28 87       	std	Y+8, r18	; 0x08
    25fe:	a6 81       	ldd	r26, Z+6	; 0x06
    2600:	b7 81       	ldd	r27, Z+7	; 0x07
    2602:	15 96       	adiw	r26, 0x05	; 5
    2604:	1c 93       	st	X, r17
    2606:	0e 93       	st	-X, r16
    2608:	14 97       	sbiw	r26, 0x04	; 4
    260a:	17 83       	std	Z+7, r17	; 0x07
    260c:	06 83       	std	Z+6, r16	; 0x06
    260e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2610:	8e 9f       	mul	r24, r30
    2612:	f0 01       	movw	r30, r0
    2614:	11 24       	eor	r1, r1
    2616:	e1 55       	subi	r30, 0x51	; 81
    2618:	fe 4e       	sbci	r31, 0xEE	; 238
    261a:	fd 87       	std	Y+13, r31	; 0x0d
    261c:	ec 87       	std	Y+12, r30	; 0x0c
    261e:	80 81       	ld	r24, Z
    2620:	8f 5f       	subi	r24, 0xFF	; 255
    2622:	80 83       	st	Z, r24
    2624:	df 91       	pop	r29
    2626:	cf 91       	pop	r28
    2628:	1f 91       	pop	r17
    262a:	0f 91       	pop	r16
    262c:	08 95       	ret

0000262e <pvTaskIncrementMutexHeldCount>:
    262e:	80 91 1d 12 	lds	r24, 0x121D	; 0x80121d <pxCurrentTCB>
    2632:	90 91 1e 12 	lds	r25, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    2636:	89 2b       	or	r24, r25
    2638:	39 f0       	breq	.+14     	; 0x2648 <pvTaskIncrementMutexHeldCount+0x1a>
    263a:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    263e:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    2642:	86 a5       	ldd	r24, Z+46	; 0x2e
    2644:	8f 5f       	subi	r24, 0xFF	; 255
    2646:	86 a7       	std	Z+46, r24	; 0x2e
    2648:	80 91 1d 12 	lds	r24, 0x121D	; 0x80121d <pxCurrentTCB>
    264c:	90 91 1e 12 	lds	r25, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    2650:	08 95       	ret

00002652 <xTaskGenericNotifyWait>:
    2652:	4f 92       	push	r4
    2654:	5f 92       	push	r5
    2656:	6f 92       	push	r6
    2658:	7f 92       	push	r7
    265a:	af 92       	push	r10
    265c:	bf 92       	push	r11
    265e:	cf 92       	push	r12
    2660:	df 92       	push	r13
    2662:	ef 92       	push	r14
    2664:	ff 92       	push	r15
    2666:	0f 93       	push	r16
    2668:	1f 93       	push	r17
    266a:	cf 93       	push	r28
    266c:	df 93       	push	r29
    266e:	28 01       	movw	r4, r16
    2670:	39 01       	movw	r6, r18
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	0f 92       	push	r0
    2678:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    267c:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    2680:	c8 2f       	mov	r28, r24
    2682:	d0 e0       	ldi	r29, 0x00	; 0
    2684:	ec 0f       	add	r30, r28
    2686:	fd 1f       	adc	r31, r29
    2688:	83 a9       	ldd	r24, Z+51	; 0x33
    268a:	82 30       	cpi	r24, 0x02	; 2
    268c:	71 f1       	breq	.+92     	; 0x26ea <xTaskGenericNotifyWait+0x98>
    268e:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    2692:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    2696:	ce 01       	movw	r24, r28
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	88 0f       	add	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	e8 0f       	add	r30, r24
    26a2:	f9 1f       	adc	r31, r25
    26a4:	87 a5       	ldd	r24, Z+47	; 0x2f
    26a6:	90 a9       	ldd	r25, Z+48	; 0x30
    26a8:	a1 a9       	ldd	r26, Z+49	; 0x31
    26aa:	b2 a9       	ldd	r27, Z+50	; 0x32
    26ac:	40 95       	com	r20
    26ae:	50 95       	com	r21
    26b0:	60 95       	com	r22
    26b2:	70 95       	com	r23
    26b4:	48 23       	and	r20, r24
    26b6:	59 23       	and	r21, r25
    26b8:	6a 23       	and	r22, r26
    26ba:	7b 23       	and	r23, r27
    26bc:	47 a7       	std	Z+47, r20	; 0x2f
    26be:	50 ab       	std	Z+48, r21	; 0x30
    26c0:	61 ab       	std	Z+49, r22	; 0x31
    26c2:	72 ab       	std	Z+50, r23	; 0x32
    26c4:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    26c8:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    26cc:	ec 0f       	add	r30, r28
    26ce:	fd 1f       	adc	r31, r29
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	83 ab       	std	Z+51, r24	; 0x33
    26d4:	a1 14       	cp	r10, r1
    26d6:	b1 04       	cpc	r11, r1
    26d8:	c1 04       	cpc	r12, r1
    26da:	d1 04       	cpc	r13, r1
    26dc:	31 f0       	breq	.+12     	; 0x26ea <xTaskGenericNotifyWait+0x98>
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	c6 01       	movw	r24, r12
    26e2:	b5 01       	movw	r22, r10
    26e4:	ed d8       	rcall	.-3622   	; 0x18c0 <prvAddCurrentTaskToDelayedList>
    26e6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <vPortYield>
    26ea:	0f 90       	pop	r0
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	f8 94       	cli
    26f2:	0f 92       	push	r0
    26f4:	e1 14       	cp	r14, r1
    26f6:	f1 04       	cpc	r15, r1
    26f8:	a1 f0       	breq	.+40     	; 0x2722 <xTaskGenericNotifyWait+0xd0>
    26fa:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    26fe:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    2702:	ce 01       	movw	r24, r28
    2704:	88 0f       	add	r24, r24
    2706:	99 1f       	adc	r25, r25
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	e8 0f       	add	r30, r24
    270e:	f9 1f       	adc	r31, r25
    2710:	87 a5       	ldd	r24, Z+47	; 0x2f
    2712:	90 a9       	ldd	r25, Z+48	; 0x30
    2714:	a1 a9       	ldd	r26, Z+49	; 0x31
    2716:	b2 a9       	ldd	r27, Z+50	; 0x32
    2718:	f7 01       	movw	r30, r14
    271a:	80 83       	st	Z, r24
    271c:	91 83       	std	Z+1, r25	; 0x01
    271e:	a2 83       	std	Z+2, r26	; 0x02
    2720:	b3 83       	std	Z+3, r27	; 0x03
    2722:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    2726:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    272a:	ec 0f       	add	r30, r28
    272c:	fd 1f       	adc	r31, r29
    272e:	83 a9       	ldd	r24, Z+51	; 0x33
    2730:	82 30       	cpi	r24, 0x02	; 2
    2732:	e9 f4       	brne	.+58     	; 0x276e <xTaskGenericNotifyWait+0x11c>
    2734:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    2738:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    273c:	ce 01       	movw	r24, r28
    273e:	88 0f       	add	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	88 0f       	add	r24, r24
    2744:	99 1f       	adc	r25, r25
    2746:	e8 0f       	add	r30, r24
    2748:	f9 1f       	adc	r31, r25
    274a:	87 a5       	ldd	r24, Z+47	; 0x2f
    274c:	90 a9       	ldd	r25, Z+48	; 0x30
    274e:	a1 a9       	ldd	r26, Z+49	; 0x31
    2750:	b2 a9       	ldd	r27, Z+50	; 0x32
    2752:	40 94       	com	r4
    2754:	50 94       	com	r5
    2756:	60 94       	com	r6
    2758:	70 94       	com	r7
    275a:	48 22       	and	r4, r24
    275c:	59 22       	and	r5, r25
    275e:	6a 22       	and	r6, r26
    2760:	7b 22       	and	r7, r27
    2762:	47 a6       	std	Z+47, r4	; 0x2f
    2764:	50 aa       	std	Z+48, r5	; 0x30
    2766:	61 aa       	std	Z+49, r6	; 0x31
    2768:	72 aa       	std	Z+50, r7	; 0x32
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	01 c0       	rjmp	.+2      	; 0x2770 <xTaskGenericNotifyWait+0x11e>
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	20 91 1d 12 	lds	r18, 0x121D	; 0x80121d <pxCurrentTCB>
    2774:	30 91 1e 12 	lds	r19, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    2778:	c2 0f       	add	r28, r18
    277a:	d3 1f       	adc	r29, r19
    277c:	1b aa       	std	Y+51, r1	; 0x33
    277e:	0f 90       	pop	r0
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	1f 91       	pop	r17
    2788:	0f 91       	pop	r16
    278a:	ff 90       	pop	r15
    278c:	ef 90       	pop	r14
    278e:	df 90       	pop	r13
    2790:	cf 90       	pop	r12
    2792:	bf 90       	pop	r11
    2794:	af 90       	pop	r10
    2796:	7f 90       	pop	r7
    2798:	6f 90       	pop	r6
    279a:	5f 90       	pop	r5
    279c:	4f 90       	pop	r4
    279e:	08 95       	ret

000027a0 <xTaskGenericNotify>:
    27a0:	8f 92       	push	r8
    27a2:	9f 92       	push	r9
    27a4:	af 92       	push	r10
    27a6:	bf 92       	push	r11
    27a8:	ef 92       	push	r14
    27aa:	ff 92       	push	r15
    27ac:	0f 93       	push	r16
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	dc 01       	movw	r26, r24
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	0f 92       	push	r0
    27ba:	e1 14       	cp	r14, r1
    27bc:	f1 04       	cpc	r15, r1
    27be:	89 f0       	breq	.+34     	; 0x27e2 <xTaskGenericNotify+0x42>
    27c0:	e6 2f       	mov	r30, r22
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	ee 0f       	add	r30, r30
    27c6:	ff 1f       	adc	r31, r31
    27c8:	ee 0f       	add	r30, r30
    27ca:	ff 1f       	adc	r31, r31
    27cc:	e8 0f       	add	r30, r24
    27ce:	f9 1f       	adc	r31, r25
    27d0:	87 a4       	ldd	r8, Z+47	; 0x2f
    27d2:	90 a8       	ldd	r9, Z+48	; 0x30
    27d4:	a1 a8       	ldd	r10, Z+49	; 0x31
    27d6:	b2 a8       	ldd	r11, Z+50	; 0x32
    27d8:	f7 01       	movw	r30, r14
    27da:	80 82       	st	Z, r8
    27dc:	91 82       	std	Z+1, r9	; 0x01
    27de:	a2 82       	std	Z+2, r10	; 0x02
    27e0:	b3 82       	std	Z+3, r11	; 0x03
    27e2:	70 e0       	ldi	r23, 0x00	; 0
    27e4:	fd 01       	movw	r30, r26
    27e6:	e6 0f       	add	r30, r22
    27e8:	f7 1f       	adc	r31, r23
    27ea:	83 a9       	ldd	r24, Z+51	; 0x33
    27ec:	92 e0       	ldi	r25, 0x02	; 2
    27ee:	93 ab       	std	Z+51, r25	; 0x33
    27f0:	02 30       	cpi	r16, 0x02	; 2
    27f2:	01 f1       	breq	.+64     	; 0x2834 <xTaskGenericNotify+0x94>
    27f4:	18 f4       	brcc	.+6      	; 0x27fc <xTaskGenericNotify+0x5c>
    27f6:	01 30       	cpi	r16, 0x01	; 1
    27f8:	31 f0       	breq	.+12     	; 0x2806 <xTaskGenericNotify+0x66>
    27fa:	4d c0       	rjmp	.+154    	; 0x2896 <xTaskGenericNotify+0xf6>
    27fc:	03 30       	cpi	r16, 0x03	; 3
    27fe:	79 f1       	breq	.+94     	; 0x285e <xTaskGenericNotify+0xbe>
    2800:	04 30       	cpi	r16, 0x04	; 4
    2802:	d1 f1       	breq	.+116    	; 0x2878 <xTaskGenericNotify+0xd8>
    2804:	48 c0       	rjmp	.+144    	; 0x2896 <xTaskGenericNotify+0xf6>
    2806:	66 0f       	add	r22, r22
    2808:	77 1f       	adc	r23, r23
    280a:	66 0f       	add	r22, r22
    280c:	77 1f       	adc	r23, r23
    280e:	fd 01       	movw	r30, r26
    2810:	e6 0f       	add	r30, r22
    2812:	f7 1f       	adc	r31, r23
    2814:	87 a4       	ldd	r8, Z+47	; 0x2f
    2816:	90 a8       	ldd	r9, Z+48	; 0x30
    2818:	a1 a8       	ldd	r10, Z+49	; 0x31
    281a:	b2 a8       	ldd	r11, Z+50	; 0x32
    281c:	ba 01       	movw	r22, r20
    281e:	a9 01       	movw	r20, r18
    2820:	48 29       	or	r20, r8
    2822:	59 29       	or	r21, r9
    2824:	6a 29       	or	r22, r10
    2826:	7b 29       	or	r23, r11
    2828:	47 a7       	std	Z+47, r20	; 0x2f
    282a:	50 ab       	std	Z+48, r21	; 0x30
    282c:	61 ab       	std	Z+49, r22	; 0x31
    282e:	72 ab       	std	Z+50, r23	; 0x32
    2830:	01 e0       	ldi	r16, 0x01	; 1
    2832:	34 c0       	rjmp	.+104    	; 0x289c <xTaskGenericNotify+0xfc>
    2834:	66 0f       	add	r22, r22
    2836:	77 1f       	adc	r23, r23
    2838:	66 0f       	add	r22, r22
    283a:	77 1f       	adc	r23, r23
    283c:	fd 01       	movw	r30, r26
    283e:	e6 0f       	add	r30, r22
    2840:	f7 1f       	adc	r31, r23
    2842:	47 a5       	ldd	r20, Z+47	; 0x2f
    2844:	50 a9       	ldd	r21, Z+48	; 0x30
    2846:	61 a9       	ldd	r22, Z+49	; 0x31
    2848:	72 a9       	ldd	r23, Z+50	; 0x32
    284a:	4f 5f       	subi	r20, 0xFF	; 255
    284c:	5f 4f       	sbci	r21, 0xFF	; 255
    284e:	6f 4f       	sbci	r22, 0xFF	; 255
    2850:	7f 4f       	sbci	r23, 0xFF	; 255
    2852:	47 a7       	std	Z+47, r20	; 0x2f
    2854:	50 ab       	std	Z+48, r21	; 0x30
    2856:	61 ab       	std	Z+49, r22	; 0x31
    2858:	72 ab       	std	Z+50, r23	; 0x32
    285a:	01 e0       	ldi	r16, 0x01	; 1
    285c:	1f c0       	rjmp	.+62     	; 0x289c <xTaskGenericNotify+0xfc>
    285e:	66 0f       	add	r22, r22
    2860:	77 1f       	adc	r23, r23
    2862:	66 0f       	add	r22, r22
    2864:	77 1f       	adc	r23, r23
    2866:	fd 01       	movw	r30, r26
    2868:	e6 0f       	add	r30, r22
    286a:	f7 1f       	adc	r31, r23
    286c:	27 a7       	std	Z+47, r18	; 0x2f
    286e:	30 ab       	std	Z+48, r19	; 0x30
    2870:	41 ab       	std	Z+49, r20	; 0x31
    2872:	52 ab       	std	Z+50, r21	; 0x32
    2874:	01 e0       	ldi	r16, 0x01	; 1
    2876:	12 c0       	rjmp	.+36     	; 0x289c <xTaskGenericNotify+0xfc>
    2878:	82 30       	cpi	r24, 0x02	; 2
    287a:	79 f0       	breq	.+30     	; 0x289a <xTaskGenericNotify+0xfa>
    287c:	66 0f       	add	r22, r22
    287e:	77 1f       	adc	r23, r23
    2880:	66 0f       	add	r22, r22
    2882:	77 1f       	adc	r23, r23
    2884:	fd 01       	movw	r30, r26
    2886:	e6 0f       	add	r30, r22
    2888:	f7 1f       	adc	r31, r23
    288a:	27 a7       	std	Z+47, r18	; 0x2f
    288c:	30 ab       	std	Z+48, r19	; 0x30
    288e:	41 ab       	std	Z+49, r20	; 0x31
    2890:	52 ab       	std	Z+50, r21	; 0x32
    2892:	01 e0       	ldi	r16, 0x01	; 1
    2894:	03 c0       	rjmp	.+6      	; 0x289c <xTaskGenericNotify+0xfc>
    2896:	01 e0       	ldi	r16, 0x01	; 1
    2898:	01 c0       	rjmp	.+2      	; 0x289c <xTaskGenericNotify+0xfc>
    289a:	00 e0       	ldi	r16, 0x00	; 0
    289c:	81 30       	cpi	r24, 0x01	; 1
    289e:	09 f0       	breq	.+2      	; 0x28a2 <xTaskGenericNotify+0x102>
    28a0:	69 c0       	rjmp	.+210    	; 0x2974 <xTaskGenericNotify+0x1d4>
    28a2:	1c 96       	adiw	r26, 0x0c	; 12
    28a4:	ed 91       	ld	r30, X+
    28a6:	fc 91       	ld	r31, X
    28a8:	1d 97       	sbiw	r26, 0x0d	; 13
    28aa:	16 96       	adiw	r26, 0x06	; 6
    28ac:	cd 91       	ld	r28, X+
    28ae:	dc 91       	ld	r29, X
    28b0:	17 97       	sbiw	r26, 0x07	; 7
    28b2:	18 96       	adiw	r26, 0x08	; 8
    28b4:	8d 91       	ld	r24, X+
    28b6:	9c 91       	ld	r25, X
    28b8:	19 97       	sbiw	r26, 0x09	; 9
    28ba:	9f 83       	std	Y+7, r25	; 0x07
    28bc:	8e 83       	std	Y+6, r24	; 0x06
    28be:	18 96       	adiw	r26, 0x08	; 8
    28c0:	cd 91       	ld	r28, X+
    28c2:	dc 91       	ld	r29, X
    28c4:	19 97       	sbiw	r26, 0x09	; 9
    28c6:	16 96       	adiw	r26, 0x06	; 6
    28c8:	8d 91       	ld	r24, X+
    28ca:	9c 91       	ld	r25, X
    28cc:	17 97       	sbiw	r26, 0x07	; 7
    28ce:	9d 83       	std	Y+5, r25	; 0x05
    28d0:	8c 83       	std	Y+4, r24	; 0x04
    28d2:	81 81       	ldd	r24, Z+1	; 0x01
    28d4:	92 81       	ldd	r25, Z+2	; 0x02
    28d6:	9d 01       	movw	r18, r26
    28d8:	2e 5f       	subi	r18, 0xFE	; 254
    28da:	3f 4f       	sbci	r19, 0xFF	; 255
    28dc:	82 17       	cp	r24, r18
    28de:	93 07       	cpc	r25, r19
    28e0:	31 f4       	brne	.+12     	; 0x28ee <xTaskGenericNotify+0x14e>
    28e2:	18 96       	adiw	r26, 0x08	; 8
    28e4:	8d 91       	ld	r24, X+
    28e6:	9c 91       	ld	r25, X
    28e8:	19 97       	sbiw	r26, 0x09	; 9
    28ea:	92 83       	std	Z+2, r25	; 0x02
    28ec:	81 83       	std	Z+1, r24	; 0x01
    28ee:	1d 96       	adiw	r26, 0x0d	; 13
    28f0:	1c 92       	st	X, r1
    28f2:	1e 92       	st	-X, r1
    28f4:	1c 97       	sbiw	r26, 0x0c	; 12
    28f6:	80 81       	ld	r24, Z
    28f8:	81 50       	subi	r24, 0x01	; 1
    28fa:	80 83       	st	Z, r24
    28fc:	5a 96       	adiw	r26, 0x1a	; 26
    28fe:	ec 91       	ld	r30, X
    2900:	5a 97       	sbiw	r26, 0x1a	; 26
    2902:	80 91 6d 11 	lds	r24, 0x116D	; 0x80116d <uxTopReadyPriority>
    2906:	8e 17       	cp	r24, r30
    2908:	10 f4       	brcc	.+4      	; 0x290e <xTaskGenericNotify+0x16e>
    290a:	e0 93 6d 11 	sts	0x116D, r30	; 0x80116d <uxTopReadyPriority>
    290e:	8b e0       	ldi	r24, 0x0B	; 11
    2910:	8e 9f       	mul	r24, r30
    2912:	f0 01       	movw	r30, r0
    2914:	11 24       	eor	r1, r1
    2916:	e1 55       	subi	r30, 0x51	; 81
    2918:	fe 4e       	sbci	r31, 0xEE	; 238
    291a:	01 80       	ldd	r0, Z+1	; 0x01
    291c:	f2 81       	ldd	r31, Z+2	; 0x02
    291e:	e0 2d       	mov	r30, r0
    2920:	17 96       	adiw	r26, 0x07	; 7
    2922:	fc 93       	st	X, r31
    2924:	ee 93       	st	-X, r30
    2926:	16 97       	sbiw	r26, 0x06	; 6
    2928:	46 81       	ldd	r20, Z+6	; 0x06
    292a:	57 81       	ldd	r21, Z+7	; 0x07
    292c:	19 96       	adiw	r26, 0x09	; 9
    292e:	5c 93       	st	X, r21
    2930:	4e 93       	st	-X, r20
    2932:	18 97       	sbiw	r26, 0x08	; 8
    2934:	c6 81       	ldd	r28, Z+6	; 0x06
    2936:	d7 81       	ldd	r29, Z+7	; 0x07
    2938:	3d 83       	std	Y+5, r19	; 0x05
    293a:	2c 83       	std	Y+4, r18	; 0x04
    293c:	37 83       	std	Z+7, r19	; 0x07
    293e:	26 83       	std	Z+6, r18	; 0x06
    2940:	5a 96       	adiw	r26, 0x1a	; 26
    2942:	ec 91       	ld	r30, X
    2944:	5a 97       	sbiw	r26, 0x1a	; 26
    2946:	8e 9f       	mul	r24, r30
    2948:	f0 01       	movw	r30, r0
    294a:	11 24       	eor	r1, r1
    294c:	e1 55       	subi	r30, 0x51	; 81
    294e:	fe 4e       	sbci	r31, 0xEE	; 238
    2950:	1d 96       	adiw	r26, 0x0d	; 13
    2952:	fc 93       	st	X, r31
    2954:	ee 93       	st	-X, r30
    2956:	1c 97       	sbiw	r26, 0x0c	; 12
    2958:	80 81       	ld	r24, Z
    295a:	8f 5f       	subi	r24, 0xFF	; 255
    295c:	80 83       	st	Z, r24
    295e:	5a 96       	adiw	r26, 0x1a	; 26
    2960:	9c 91       	ld	r25, X
    2962:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    2966:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    296a:	82 8d       	ldd	r24, Z+26	; 0x1a
    296c:	89 17       	cp	r24, r25
    296e:	10 f4       	brcc	.+4      	; 0x2974 <xTaskGenericNotify+0x1d4>
    2970:	0e 94 5d 03 	call	0x6ba	; 0x6ba <vPortYield>
    2974:	0f 90       	pop	r0
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	80 2f       	mov	r24, r16
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	0f 91       	pop	r16
    2980:	ff 90       	pop	r15
    2982:	ef 90       	pop	r14
    2984:	bf 90       	pop	r11
    2986:	af 90       	pop	r10
    2988:	9f 90       	pop	r9
    298a:	8f 90       	pop	r8
    298c:	08 95       	ret

0000298e <xTaskGenericNotifyFromISR>:
    298e:	8f 92       	push	r8
    2990:	9f 92       	push	r9
    2992:	af 92       	push	r10
    2994:	bf 92       	push	r11
    2996:	cf 92       	push	r12
    2998:	df 92       	push	r13
    299a:	ef 92       	push	r14
    299c:	ff 92       	push	r15
    299e:	0f 93       	push	r16
    29a0:	cf 93       	push	r28
    29a2:	df 93       	push	r29
    29a4:	dc 01       	movw	r26, r24
    29a6:	e1 14       	cp	r14, r1
    29a8:	f1 04       	cpc	r15, r1
    29aa:	89 f0       	breq	.+34     	; 0x29ce <xTaskGenericNotifyFromISR+0x40>
    29ac:	e6 2f       	mov	r30, r22
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	ee 0f       	add	r30, r30
    29b2:	ff 1f       	adc	r31, r31
    29b4:	ee 0f       	add	r30, r30
    29b6:	ff 1f       	adc	r31, r31
    29b8:	e8 0f       	add	r30, r24
    29ba:	f9 1f       	adc	r31, r25
    29bc:	87 a4       	ldd	r8, Z+47	; 0x2f
    29be:	90 a8       	ldd	r9, Z+48	; 0x30
    29c0:	a1 a8       	ldd	r10, Z+49	; 0x31
    29c2:	b2 a8       	ldd	r11, Z+50	; 0x32
    29c4:	f7 01       	movw	r30, r14
    29c6:	80 82       	st	Z, r8
    29c8:	91 82       	std	Z+1, r9	; 0x01
    29ca:	a2 82       	std	Z+2, r10	; 0x02
    29cc:	b3 82       	std	Z+3, r11	; 0x03
    29ce:	70 e0       	ldi	r23, 0x00	; 0
    29d0:	fd 01       	movw	r30, r26
    29d2:	e6 0f       	add	r30, r22
    29d4:	f7 1f       	adc	r31, r23
    29d6:	93 a9       	ldd	r25, Z+51	; 0x33
    29d8:	82 e0       	ldi	r24, 0x02	; 2
    29da:	83 ab       	std	Z+51, r24	; 0x33
    29dc:	02 30       	cpi	r16, 0x02	; 2
    29de:	01 f1       	breq	.+64     	; 0x2a20 <xTaskGenericNotifyFromISR+0x92>
    29e0:	18 f4       	brcc	.+6      	; 0x29e8 <xTaskGenericNotifyFromISR+0x5a>
    29e2:	01 30       	cpi	r16, 0x01	; 1
    29e4:	31 f0       	breq	.+12     	; 0x29f2 <xTaskGenericNotifyFromISR+0x64>
    29e6:	4d c0       	rjmp	.+154    	; 0x2a82 <xTaskGenericNotifyFromISR+0xf4>
    29e8:	03 30       	cpi	r16, 0x03	; 3
    29ea:	79 f1       	breq	.+94     	; 0x2a4a <xTaskGenericNotifyFromISR+0xbc>
    29ec:	04 30       	cpi	r16, 0x04	; 4
    29ee:	d1 f1       	breq	.+116    	; 0x2a64 <xTaskGenericNotifyFromISR+0xd6>
    29f0:	48 c0       	rjmp	.+144    	; 0x2a82 <xTaskGenericNotifyFromISR+0xf4>
    29f2:	66 0f       	add	r22, r22
    29f4:	77 1f       	adc	r23, r23
    29f6:	66 0f       	add	r22, r22
    29f8:	77 1f       	adc	r23, r23
    29fa:	fd 01       	movw	r30, r26
    29fc:	e6 0f       	add	r30, r22
    29fe:	f7 1f       	adc	r31, r23
    2a00:	87 a4       	ldd	r8, Z+47	; 0x2f
    2a02:	90 a8       	ldd	r9, Z+48	; 0x30
    2a04:	a1 a8       	ldd	r10, Z+49	; 0x31
    2a06:	b2 a8       	ldd	r11, Z+50	; 0x32
    2a08:	ba 01       	movw	r22, r20
    2a0a:	a9 01       	movw	r20, r18
    2a0c:	48 29       	or	r20, r8
    2a0e:	59 29       	or	r21, r9
    2a10:	6a 29       	or	r22, r10
    2a12:	7b 29       	or	r23, r11
    2a14:	47 a7       	std	Z+47, r20	; 0x2f
    2a16:	50 ab       	std	Z+48, r21	; 0x30
    2a18:	61 ab       	std	Z+49, r22	; 0x31
    2a1a:	72 ab       	std	Z+50, r23	; 0x32
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	34 c0       	rjmp	.+104    	; 0x2a88 <xTaskGenericNotifyFromISR+0xfa>
    2a20:	66 0f       	add	r22, r22
    2a22:	77 1f       	adc	r23, r23
    2a24:	66 0f       	add	r22, r22
    2a26:	77 1f       	adc	r23, r23
    2a28:	fd 01       	movw	r30, r26
    2a2a:	e6 0f       	add	r30, r22
    2a2c:	f7 1f       	adc	r31, r23
    2a2e:	47 a5       	ldd	r20, Z+47	; 0x2f
    2a30:	50 a9       	ldd	r21, Z+48	; 0x30
    2a32:	61 a9       	ldd	r22, Z+49	; 0x31
    2a34:	72 a9       	ldd	r23, Z+50	; 0x32
    2a36:	4f 5f       	subi	r20, 0xFF	; 255
    2a38:	5f 4f       	sbci	r21, 0xFF	; 255
    2a3a:	6f 4f       	sbci	r22, 0xFF	; 255
    2a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3e:	47 a7       	std	Z+47, r20	; 0x2f
    2a40:	50 ab       	std	Z+48, r21	; 0x30
    2a42:	61 ab       	std	Z+49, r22	; 0x31
    2a44:	72 ab       	std	Z+50, r23	; 0x32
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	1f c0       	rjmp	.+62     	; 0x2a88 <xTaskGenericNotifyFromISR+0xfa>
    2a4a:	66 0f       	add	r22, r22
    2a4c:	77 1f       	adc	r23, r23
    2a4e:	66 0f       	add	r22, r22
    2a50:	77 1f       	adc	r23, r23
    2a52:	fd 01       	movw	r30, r26
    2a54:	e6 0f       	add	r30, r22
    2a56:	f7 1f       	adc	r31, r23
    2a58:	27 a7       	std	Z+47, r18	; 0x2f
    2a5a:	30 ab       	std	Z+48, r19	; 0x30
    2a5c:	41 ab       	std	Z+49, r20	; 0x31
    2a5e:	52 ab       	std	Z+50, r21	; 0x32
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	12 c0       	rjmp	.+36     	; 0x2a88 <xTaskGenericNotifyFromISR+0xfa>
    2a64:	92 30       	cpi	r25, 0x02	; 2
    2a66:	79 f0       	breq	.+30     	; 0x2a86 <xTaskGenericNotifyFromISR+0xf8>
    2a68:	66 0f       	add	r22, r22
    2a6a:	77 1f       	adc	r23, r23
    2a6c:	66 0f       	add	r22, r22
    2a6e:	77 1f       	adc	r23, r23
    2a70:	fd 01       	movw	r30, r26
    2a72:	e6 0f       	add	r30, r22
    2a74:	f7 1f       	adc	r31, r23
    2a76:	27 a7       	std	Z+47, r18	; 0x2f
    2a78:	30 ab       	std	Z+48, r19	; 0x30
    2a7a:	41 ab       	std	Z+49, r20	; 0x31
    2a7c:	52 ab       	std	Z+50, r21	; 0x32
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	03 c0       	rjmp	.+6      	; 0x2a88 <xTaskGenericNotifyFromISR+0xfa>
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	01 c0       	rjmp	.+2      	; 0x2a88 <xTaskGenericNotifyFromISR+0xfa>
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	91 30       	cpi	r25, 0x01	; 1
    2a8a:	09 f0       	breq	.+2      	; 0x2a8e <xTaskGenericNotifyFromISR+0x100>
    2a8c:	96 c0       	rjmp	.+300    	; 0x2bba <xTaskGenericNotifyFromISR+0x22c>
    2a8e:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <uxSchedulerSuspended>
    2a92:	91 11       	cpse	r25, r1
    2a94:	5f c0       	rjmp	.+190    	; 0x2b54 <xTaskGenericNotifyFromISR+0x1c6>
    2a96:	1c 96       	adiw	r26, 0x0c	; 12
    2a98:	ed 91       	ld	r30, X+
    2a9a:	fc 91       	ld	r31, X
    2a9c:	1d 97       	sbiw	r26, 0x0d	; 13
    2a9e:	16 96       	adiw	r26, 0x06	; 6
    2aa0:	cd 91       	ld	r28, X+
    2aa2:	dc 91       	ld	r29, X
    2aa4:	17 97       	sbiw	r26, 0x07	; 7
    2aa6:	18 96       	adiw	r26, 0x08	; 8
    2aa8:	2d 91       	ld	r18, X+
    2aaa:	3c 91       	ld	r19, X
    2aac:	19 97       	sbiw	r26, 0x09	; 9
    2aae:	3f 83       	std	Y+7, r19	; 0x07
    2ab0:	2e 83       	std	Y+6, r18	; 0x06
    2ab2:	18 96       	adiw	r26, 0x08	; 8
    2ab4:	cd 91       	ld	r28, X+
    2ab6:	dc 91       	ld	r29, X
    2ab8:	19 97       	sbiw	r26, 0x09	; 9
    2aba:	16 96       	adiw	r26, 0x06	; 6
    2abc:	2d 91       	ld	r18, X+
    2abe:	3c 91       	ld	r19, X
    2ac0:	17 97       	sbiw	r26, 0x07	; 7
    2ac2:	3d 83       	std	Y+5, r19	; 0x05
    2ac4:	2c 83       	std	Y+4, r18	; 0x04
    2ac6:	41 81       	ldd	r20, Z+1	; 0x01
    2ac8:	52 81       	ldd	r21, Z+2	; 0x02
    2aca:	9d 01       	movw	r18, r26
    2acc:	2e 5f       	subi	r18, 0xFE	; 254
    2ace:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad0:	42 17       	cp	r20, r18
    2ad2:	53 07       	cpc	r21, r19
    2ad4:	31 f4       	brne	.+12     	; 0x2ae2 <xTaskGenericNotifyFromISR+0x154>
    2ad6:	18 96       	adiw	r26, 0x08	; 8
    2ad8:	4d 91       	ld	r20, X+
    2ada:	5c 91       	ld	r21, X
    2adc:	19 97       	sbiw	r26, 0x09	; 9
    2ade:	52 83       	std	Z+2, r21	; 0x02
    2ae0:	41 83       	std	Z+1, r20	; 0x01
    2ae2:	1d 96       	adiw	r26, 0x0d	; 13
    2ae4:	1c 92       	st	X, r1
    2ae6:	1e 92       	st	-X, r1
    2ae8:	1c 97       	sbiw	r26, 0x0c	; 12
    2aea:	90 81       	ld	r25, Z
    2aec:	91 50       	subi	r25, 0x01	; 1
    2aee:	90 83       	st	Z, r25
    2af0:	5a 96       	adiw	r26, 0x1a	; 26
    2af2:	ec 91       	ld	r30, X
    2af4:	5a 97       	sbiw	r26, 0x1a	; 26
    2af6:	90 91 6d 11 	lds	r25, 0x116D	; 0x80116d <uxTopReadyPriority>
    2afa:	9e 17       	cp	r25, r30
    2afc:	10 f4       	brcc	.+4      	; 0x2b02 <xTaskGenericNotifyFromISR+0x174>
    2afe:	e0 93 6d 11 	sts	0x116D, r30	; 0x80116d <uxTopReadyPriority>
    2b02:	9b e0       	ldi	r25, 0x0B	; 11
    2b04:	9e 9f       	mul	r25, r30
    2b06:	f0 01       	movw	r30, r0
    2b08:	11 24       	eor	r1, r1
    2b0a:	e1 55       	subi	r30, 0x51	; 81
    2b0c:	fe 4e       	sbci	r31, 0xEE	; 238
    2b0e:	01 80       	ldd	r0, Z+1	; 0x01
    2b10:	f2 81       	ldd	r31, Z+2	; 0x02
    2b12:	e0 2d       	mov	r30, r0
    2b14:	17 96       	adiw	r26, 0x07	; 7
    2b16:	fc 93       	st	X, r31
    2b18:	ee 93       	st	-X, r30
    2b1a:	16 97       	sbiw	r26, 0x06	; 6
    2b1c:	46 81       	ldd	r20, Z+6	; 0x06
    2b1e:	57 81       	ldd	r21, Z+7	; 0x07
    2b20:	19 96       	adiw	r26, 0x09	; 9
    2b22:	5c 93       	st	X, r21
    2b24:	4e 93       	st	-X, r20
    2b26:	18 97       	sbiw	r26, 0x08	; 8
    2b28:	c6 81       	ldd	r28, Z+6	; 0x06
    2b2a:	d7 81       	ldd	r29, Z+7	; 0x07
    2b2c:	3d 83       	std	Y+5, r19	; 0x05
    2b2e:	2c 83       	std	Y+4, r18	; 0x04
    2b30:	37 83       	std	Z+7, r19	; 0x07
    2b32:	26 83       	std	Z+6, r18	; 0x06
    2b34:	5a 96       	adiw	r26, 0x1a	; 26
    2b36:	ec 91       	ld	r30, X
    2b38:	5a 97       	sbiw	r26, 0x1a	; 26
    2b3a:	9e 9f       	mul	r25, r30
    2b3c:	f0 01       	movw	r30, r0
    2b3e:	11 24       	eor	r1, r1
    2b40:	e1 55       	subi	r30, 0x51	; 81
    2b42:	fe 4e       	sbci	r31, 0xEE	; 238
    2b44:	1d 96       	adiw	r26, 0x0d	; 13
    2b46:	fc 93       	st	X, r31
    2b48:	ee 93       	st	-X, r30
    2b4a:	1c 97       	sbiw	r26, 0x0c	; 12
    2b4c:	90 81       	ld	r25, Z
    2b4e:	9f 5f       	subi	r25, 0xFF	; 255
    2b50:	90 83       	st	Z, r25
    2b52:	21 c0       	rjmp	.+66     	; 0x2b96 <xTaskGenericNotifyFromISR+0x208>
    2b54:	6a e8       	ldi	r22, 0x8A	; 138
    2b56:	71 e1       	ldi	r23, 0x11	; 17
    2b58:	fb 01       	movw	r30, r22
    2b5a:	c1 81       	ldd	r28, Z+1	; 0x01
    2b5c:	d2 81       	ldd	r29, Z+2	; 0x02
    2b5e:	53 96       	adiw	r26, 0x13	; 19
    2b60:	dc 93       	st	X, r29
    2b62:	ce 93       	st	-X, r28
    2b64:	52 97       	sbiw	r26, 0x12	; 18
    2b66:	2e 81       	ldd	r18, Y+6	; 0x06
    2b68:	3f 81       	ldd	r19, Y+7	; 0x07
    2b6a:	55 96       	adiw	r26, 0x15	; 21
    2b6c:	3c 93       	st	X, r19
    2b6e:	2e 93       	st	-X, r18
    2b70:	54 97       	sbiw	r26, 0x14	; 20
    2b72:	4e 81       	ldd	r20, Y+6	; 0x06
    2b74:	5f 81       	ldd	r21, Y+7	; 0x07
    2b76:	9d 01       	movw	r18, r26
    2b78:	22 5f       	subi	r18, 0xF2	; 242
    2b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b7c:	fa 01       	movw	r30, r20
    2b7e:	35 83       	std	Z+5, r19	; 0x05
    2b80:	24 83       	std	Z+4, r18	; 0x04
    2b82:	3f 83       	std	Y+7, r19	; 0x07
    2b84:	2e 83       	std	Y+6, r18	; 0x06
    2b86:	59 96       	adiw	r26, 0x19	; 25
    2b88:	7c 93       	st	X, r23
    2b8a:	6e 93       	st	-X, r22
    2b8c:	58 97       	sbiw	r26, 0x18	; 24
    2b8e:	fb 01       	movw	r30, r22
    2b90:	90 81       	ld	r25, Z
    2b92:	9f 5f       	subi	r25, 0xFF	; 255
    2b94:	90 83       	st	Z, r25
    2b96:	5a 96       	adiw	r26, 0x1a	; 26
    2b98:	2c 91       	ld	r18, X
    2b9a:	e0 91 1d 12 	lds	r30, 0x121D	; 0x80121d <pxCurrentTCB>
    2b9e:	f0 91 1e 12 	lds	r31, 0x121E	; 0x80121e <pxCurrentTCB+0x1>
    2ba2:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ba4:	92 17       	cp	r25, r18
    2ba6:	48 f4       	brcc	.+18     	; 0x2bba <xTaskGenericNotifyFromISR+0x22c>
    2ba8:	c1 14       	cp	r12, r1
    2baa:	d1 04       	cpc	r13, r1
    2bac:	19 f0       	breq	.+6      	; 0x2bb4 <xTaskGenericNotifyFromISR+0x226>
    2bae:	91 e0       	ldi	r25, 0x01	; 1
    2bb0:	f6 01       	movw	r30, r12
    2bb2:	90 83       	st	Z, r25
    2bb4:	91 e0       	ldi	r25, 0x01	; 1
    2bb6:	90 93 67 11 	sts	0x1167, r25	; 0x801167 <xYieldPending>
    2bba:	df 91       	pop	r29
    2bbc:	cf 91       	pop	r28
    2bbe:	0f 91       	pop	r16
    2bc0:	ff 90       	pop	r15
    2bc2:	ef 90       	pop	r14
    2bc4:	df 90       	pop	r13
    2bc6:	cf 90       	pop	r12
    2bc8:	bf 90       	pop	r11
    2bca:	af 90       	pop	r10
    2bcc:	9f 90       	pop	r9
    2bce:	8f 90       	pop	r8
    2bd0:	08 95       	ret

00002bd2 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	21 f4       	brne	.+8      	; 0x2bde <xTaskGenericNotifyStateClear+0xc>
    2bd6:	80 91 1d 12 	lds	r24, 0x121D	; 0x80121d <pxCurrentTCB>
    2bda:	90 91 1e 12 	lds	r25, 0x121E	; 0x80121e <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2be4:	70 e0       	ldi	r23, 0x00	; 0
    2be6:	fc 01       	movw	r30, r24
    2be8:	e6 0f       	add	r30, r22
    2bea:	f7 1f       	adc	r31, r23
    2bec:	23 a9       	ldd	r18, Z+51	; 0x33
    2bee:	22 30       	cpi	r18, 0x02	; 2
    2bf0:	31 f4       	brne	.+12     	; 0x2bfe <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	e6 0f       	add	r30, r22
    2bf6:	f7 1f       	adc	r31, r23
    2bf8:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	01 c0       	rjmp	.+2      	; 0x2c00 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2c00:	0f 90       	pop	r0
    2c02:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2c04:	08 95       	ret

00002c06 <prvGetNextExpireTime>:
    2c06:	dc 01       	movw	r26, r24
    2c08:	e0 91 29 12 	lds	r30, 0x1229	; 0x801229 <pxCurrentTimerList>
    2c0c:	f0 91 2a 12 	lds	r31, 0x122A	; 0x80122a <pxCurrentTimerList+0x1>
    2c10:	80 81       	ld	r24, Z
    2c12:	91 e0       	ldi	r25, 0x01	; 1
    2c14:	81 11       	cpse	r24, r1
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	9c 93       	st	X, r25
    2c1a:	91 11       	cpse	r25, r1
    2c1c:	08 c0       	rjmp	.+16     	; 0x2c2e <prvGetNextExpireTime+0x28>
    2c1e:	07 80       	ldd	r0, Z+7	; 0x07
    2c20:	f0 85       	ldd	r31, Z+8	; 0x08
    2c22:	e0 2d       	mov	r30, r0
    2c24:	60 81       	ld	r22, Z
    2c26:	71 81       	ldd	r23, Z+1	; 0x01
    2c28:	82 81       	ldd	r24, Z+2	; 0x02
    2c2a:	93 81       	ldd	r25, Z+3	; 0x03
    2c2c:	08 95       	ret
    2c2e:	60 e0       	ldi	r22, 0x00	; 0
    2c30:	70 e0       	ldi	r23, 0x00	; 0
    2c32:	cb 01       	movw	r24, r22
    2c34:	08 95       	ret

00002c36 <prvInsertTimerInActiveList>:
    2c36:	cf 92       	push	r12
    2c38:	df 92       	push	r13
    2c3a:	ef 92       	push	r14
    2c3c:	ff 92       	push	r15
    2c3e:	0f 93       	push	r16
    2c40:	1f 93       	push	r17
    2c42:	fc 01       	movw	r30, r24
    2c44:	42 83       	std	Z+2, r20	; 0x02
    2c46:	53 83       	std	Z+3, r21	; 0x03
    2c48:	64 83       	std	Z+4, r22	; 0x04
    2c4a:	75 83       	std	Z+5, r23	; 0x05
    2c4c:	93 87       	std	Z+11, r25	; 0x0b
    2c4e:	82 87       	std	Z+10, r24	; 0x0a
    2c50:	04 17       	cp	r16, r20
    2c52:	15 07       	cpc	r17, r21
    2c54:	26 07       	cpc	r18, r22
    2c56:	37 07       	cpc	r19, r23
    2c58:	c0 f0       	brcs	.+48     	; 0x2c8a <prvInsertTimerInActiveList+0x54>
    2c5a:	0c 19       	sub	r16, r12
    2c5c:	1d 09       	sbc	r17, r13
    2c5e:	2e 09       	sbc	r18, r14
    2c60:	3f 09       	sbc	r19, r15
    2c62:	86 85       	ldd	r24, Z+14	; 0x0e
    2c64:	97 85       	ldd	r25, Z+15	; 0x0f
    2c66:	a0 89       	ldd	r26, Z+16	; 0x10
    2c68:	b1 89       	ldd	r27, Z+17	; 0x11
    2c6a:	08 17       	cp	r16, r24
    2c6c:	19 07       	cpc	r17, r25
    2c6e:	2a 07       	cpc	r18, r26
    2c70:	3b 07       	cpc	r19, r27
    2c72:	00 f5       	brcc	.+64     	; 0x2cb4 <prvInsertTimerInActiveList+0x7e>
    2c74:	bf 01       	movw	r22, r30
    2c76:	6e 5f       	subi	r22, 0xFE	; 254
    2c78:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7a:	80 91 27 12 	lds	r24, 0x1227	; 0x801227 <pxOverflowTimerList>
    2c7e:	90 91 28 12 	lds	r25, 0x1228	; 0x801228 <pxOverflowTimerList+0x1>
    2c82:	0e 94 a4 02 	call	0x548	; 0x548 <vListInsert>
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	18 c0       	rjmp	.+48     	; 0x2cba <prvInsertTimerInActiveList+0x84>
    2c8a:	0c 15       	cp	r16, r12
    2c8c:	1d 05       	cpc	r17, r13
    2c8e:	2e 05       	cpc	r18, r14
    2c90:	3f 05       	cpc	r19, r15
    2c92:	28 f4       	brcc	.+10     	; 0x2c9e <prvInsertTimerInActiveList+0x68>
    2c94:	4c 15       	cp	r20, r12
    2c96:	5d 05       	cpc	r21, r13
    2c98:	6e 05       	cpc	r22, r14
    2c9a:	7f 05       	cpc	r23, r15
    2c9c:	68 f4       	brcc	.+26     	; 0x2cb8 <prvInsertTimerInActiveList+0x82>
    2c9e:	bf 01       	movw	r22, r30
    2ca0:	6e 5f       	subi	r22, 0xFE	; 254
    2ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca4:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <pxCurrentTimerList>
    2ca8:	90 91 2a 12 	lds	r25, 0x122A	; 0x80122a <pxCurrentTimerList+0x1>
    2cac:	0e 94 a4 02 	call	0x548	; 0x548 <vListInsert>
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	03 c0       	rjmp	.+6      	; 0x2cba <prvInsertTimerInActiveList+0x84>
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	01 c0       	rjmp	.+2      	; 0x2cba <prvInsertTimerInActiveList+0x84>
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	1f 91       	pop	r17
    2cbc:	0f 91       	pop	r16
    2cbe:	ff 90       	pop	r15
    2cc0:	ef 90       	pop	r14
    2cc2:	df 90       	pop	r13
    2cc4:	cf 90       	pop	r12
    2cc6:	08 95       	ret

00002cc8 <prvCheckForValidListAndQueue>:
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	0f 92       	push	r0
    2cce:	80 91 25 12 	lds	r24, 0x1225	; 0x801225 <xTimerQueue>
    2cd2:	90 91 26 12 	lds	r25, 0x1226	; 0x801226 <xTimerQueue+0x1>
    2cd6:	89 2b       	or	r24, r25
    2cd8:	e9 f4       	brne	.+58     	; 0x2d14 <prvCheckForValidListAndQueue+0x4c>
    2cda:	86 e3       	ldi	r24, 0x36	; 54
    2cdc:	92 e1       	ldi	r25, 0x12	; 18
    2cde:	0e 94 8f 02 	call	0x51e	; 0x51e <vListInitialise>
    2ce2:	8b e2       	ldi	r24, 0x2B	; 43
    2ce4:	92 e1       	ldi	r25, 0x12	; 18
    2ce6:	0e 94 8f 02 	call	0x51e	; 0x51e <vListInitialise>
    2cea:	86 e3       	ldi	r24, 0x36	; 54
    2cec:	92 e1       	ldi	r25, 0x12	; 18
    2cee:	90 93 2a 12 	sts	0x122A, r25	; 0x80122a <pxCurrentTimerList+0x1>
    2cf2:	80 93 29 12 	sts	0x1229, r24	; 0x801229 <pxCurrentTimerList>
    2cf6:	8b e2       	ldi	r24, 0x2B	; 43
    2cf8:	92 e1       	ldi	r25, 0x12	; 18
    2cfa:	90 93 28 12 	sts	0x1228, r25	; 0x801228 <pxOverflowTimerList+0x1>
    2cfe:	80 93 27 12 	sts	0x1227, r24	; 0x801227 <pxOverflowTimerList>
    2d02:	40 e0       	ldi	r20, 0x00	; 0
    2d04:	67 e0       	ldi	r22, 0x07	; 7
    2d06:	8a e0       	ldi	r24, 0x0A	; 10
    2d08:	0e 94 52 05 	call	0xaa4	; 0xaa4 <xQueueGenericCreate>
    2d0c:	90 93 26 12 	sts	0x1226, r25	; 0x801226 <xTimerQueue+0x1>
    2d10:	80 93 25 12 	sts	0x1225, r24	; 0x801225 <xTimerQueue>
    2d14:	0f 90       	pop	r0
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	08 95       	ret

00002d1a <xTimerCreateTimerTask>:
    2d1a:	ef 92       	push	r14
    2d1c:	ff 92       	push	r15
    2d1e:	0f 93       	push	r16
    2d20:	d3 df       	rcall	.-90     	; 0x2cc8 <prvCheckForValidListAndQueue>
    2d22:	80 91 25 12 	lds	r24, 0x1225	; 0x801225 <xTimerQueue>
    2d26:	90 91 26 12 	lds	r25, 0x1226	; 0x801226 <xTimerQueue+0x1>
    2d2a:	89 2b       	or	r24, r25
    2d2c:	91 f0       	breq	.+36     	; 0x2d52 <xTimerCreateTimerTask+0x38>
    2d2e:	0f 2e       	mov	r0, r31
    2d30:	f3 e2       	ldi	r31, 0x23	; 35
    2d32:	ef 2e       	mov	r14, r31
    2d34:	f2 e1       	ldi	r31, 0x12	; 18
    2d36:	ff 2e       	mov	r15, r31
    2d38:	f0 2d       	mov	r31, r0
    2d3a:	03 e0       	ldi	r16, 0x03	; 3
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 ec       	ldi	r20, 0xC0	; 192
    2d42:	50 e0       	ldi	r21, 0x00	; 0
    2d44:	64 e5       	ldi	r22, 0x54	; 84
    2d46:	72 e0       	ldi	r23, 0x02	; 2
    2d48:	87 ed       	ldi	r24, 0xD7	; 215
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <xTaskCreate>
    2d50:	01 c0       	rjmp	.+2      	; 0x2d54 <xTimerCreateTimerTask+0x3a>
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	0f 91       	pop	r16
    2d56:	ff 90       	pop	r15
    2d58:	ef 90       	pop	r14
    2d5a:	08 95       	ret

00002d5c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2d5c:	8f 92       	push	r8
    2d5e:	9f 92       	push	r9
    2d60:	af 92       	push	r10
    2d62:	bf 92       	push	r11
    2d64:	cf 92       	push	r12
    2d66:	df 92       	push	r13
    2d68:	ef 92       	push	r14
    2d6a:	ff 92       	push	r15
    2d6c:	0f 93       	push	r16
    2d6e:	1f 93       	push	r17
    2d70:	cf 93       	push	r28
    2d72:	df 93       	push	r29
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	27 97       	sbiw	r28, 0x07	; 7
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2d84:	e0 91 25 12 	lds	r30, 0x1225	; 0x801225 <xTimerQueue>
    2d88:	f0 91 26 12 	lds	r31, 0x1226	; 0x801226 <xTimerQueue+0x1>
    2d8c:	30 97       	sbiw	r30, 0x00	; 0
    2d8e:	81 f1       	breq	.+96     	; 0x2df0 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2d90:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2d92:	2a 83       	std	Y+2, r18	; 0x02
    2d94:	3b 83       	std	Y+3, r19	; 0x03
    2d96:	4c 83       	std	Y+4, r20	; 0x04
    2d98:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2d9a:	9f 83       	std	Y+7, r25	; 0x07
    2d9c:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2d9e:	66 30       	cpi	r22, 0x06	; 6
    2da0:	f4 f4       	brge	.+60     	; 0x2dde <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2da2:	ee da       	rcall	.-2596   	; 0x2380 <xTaskGetSchedulerState>
    2da4:	82 30       	cpi	r24, 0x02	; 2
    2da6:	69 f4       	brne	.+26     	; 0x2dc2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2da8:	00 e0       	ldi	r16, 0x00	; 0
    2daa:	a7 01       	movw	r20, r14
    2dac:	96 01       	movw	r18, r12
    2dae:	be 01       	movw	r22, r28
    2db0:	6f 5f       	subi	r22, 0xFF	; 255
    2db2:	7f 4f       	sbci	r23, 0xFF	; 255
    2db4:	80 91 25 12 	lds	r24, 0x1225	; 0x801225 <xTimerQueue>
    2db8:	90 91 26 12 	lds	r25, 0x1226	; 0x801226 <xTimerQueue+0x1>
    2dbc:	0e 94 75 05 	call	0xaea	; 0xaea <xQueueGenericSend>
    2dc0:	18 c0       	rjmp	.+48     	; 0x2df2 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2dc2:	00 e0       	ldi	r16, 0x00	; 0
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	a9 01       	movw	r20, r18
    2dca:	be 01       	movw	r22, r28
    2dcc:	6f 5f       	subi	r22, 0xFF	; 255
    2dce:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd0:	80 91 25 12 	lds	r24, 0x1225	; 0x801225 <xTimerQueue>
    2dd4:	90 91 26 12 	lds	r25, 0x1226	; 0x801226 <xTimerQueue+0x1>
    2dd8:	0e 94 75 05 	call	0xaea	; 0xaea <xQueueGenericSend>
    2ddc:	0a c0       	rjmp	.+20     	; 0x2df2 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	a8 01       	movw	r20, r16
    2de2:	be 01       	movw	r22, r28
    2de4:	6f 5f       	subi	r22, 0xFF	; 255
    2de6:	7f 4f       	sbci	r23, 0xFF	; 255
    2de8:	cf 01       	movw	r24, r30
    2dea:	0e 94 25 06 	call	0xc4a	; 0xc4a <xQueueGenericSendFromISR>
    2dee:	01 c0       	rjmp	.+2      	; 0x2df2 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2df0:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2df2:	27 96       	adiw	r28, 0x07	; 7
    2df4:	0f b6       	in	r0, 0x3f	; 63
    2df6:	f8 94       	cli
    2df8:	de bf       	out	0x3e, r29	; 62
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	cd bf       	out	0x3d, r28	; 61
    2dfe:	df 91       	pop	r29
    2e00:	cf 91       	pop	r28
    2e02:	1f 91       	pop	r17
    2e04:	0f 91       	pop	r16
    2e06:	ff 90       	pop	r15
    2e08:	ef 90       	pop	r14
    2e0a:	df 90       	pop	r13
    2e0c:	cf 90       	pop	r12
    2e0e:	bf 90       	pop	r11
    2e10:	af 90       	pop	r10
    2e12:	9f 90       	pop	r9
    2e14:	8f 90       	pop	r8
    2e16:	08 95       	ret

00002e18 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2e18:	8f 92       	push	r8
    2e1a:	9f 92       	push	r9
    2e1c:	af 92       	push	r10
    2e1e:	bf 92       	push	r11
    2e20:	cf 92       	push	r12
    2e22:	df 92       	push	r13
    2e24:	ef 92       	push	r14
    2e26:	ff 92       	push	r15
    2e28:	0f 93       	push	r16
    2e2a:	1f 93       	push	r17
    2e2c:	cf 93       	push	r28
    2e2e:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2e30:	3b c0       	rjmp	.+118    	; 0x2ea8 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2e32:	07 80       	ldd	r0, Z+7	; 0x07
    2e34:	f0 85       	ldd	r31, Z+8	; 0x08
    2e36:	e0 2d       	mov	r30, r0
    2e38:	80 80       	ld	r8, Z
    2e3a:	91 80       	ldd	r9, Z+1	; 0x01
    2e3c:	a2 80       	ldd	r10, Z+2	; 0x02
    2e3e:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2e40:	c0 85       	ldd	r28, Z+8	; 0x08
    2e42:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e44:	8e 01       	movw	r16, r28
    2e46:	0e 5f       	subi	r16, 0xFE	; 254
    2e48:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4a:	c8 01       	movw	r24, r16
    2e4c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e50:	ec 89       	ldd	r30, Y+20	; 0x14
    2e52:	fd 89       	ldd	r31, Y+21	; 0x15
    2e54:	ce 01       	movw	r24, r28
    2e56:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2e58:	8e 89       	ldd	r24, Y+22	; 0x16
    2e5a:	82 ff       	sbrs	r24, 2
    2e5c:	25 c0       	rjmp	.+74     	; 0x2ea8 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2e5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e60:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e62:	a8 89       	ldd	r26, Y+16	; 0x10
    2e64:	b9 89       	ldd	r27, Y+17	; 0x11
    2e66:	88 0d       	add	r24, r8
    2e68:	99 1d       	adc	r25, r9
    2e6a:	aa 1d       	adc	r26, r10
    2e6c:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2e6e:	88 16       	cp	r8, r24
    2e70:	99 06       	cpc	r9, r25
    2e72:	aa 06       	cpc	r10, r26
    2e74:	bb 06       	cpc	r11, r27
    2e76:	70 f4       	brcc	.+28     	; 0x2e94 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2e78:	8a 83       	std	Y+2, r24	; 0x02
    2e7a:	9b 83       	std	Y+3, r25	; 0x03
    2e7c:	ac 83       	std	Y+4, r26	; 0x04
    2e7e:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2e80:	db 87       	std	Y+11, r29	; 0x0b
    2e82:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2e84:	b8 01       	movw	r22, r16
    2e86:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <pxCurrentTimerList>
    2e8a:	90 91 2a 12 	lds	r25, 0x122A	; 0x80122a <pxCurrentTimerList+0x1>
    2e8e:	0e 94 a4 02 	call	0x548	; 0x548 <vListInsert>
    2e92:	0a c0       	rjmp	.+20     	; 0x2ea8 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2e94:	c1 2c       	mov	r12, r1
    2e96:	d1 2c       	mov	r13, r1
    2e98:	76 01       	movw	r14, r12
    2e9a:	00 e0       	ldi	r16, 0x00	; 0
    2e9c:	10 e0       	ldi	r17, 0x00	; 0
    2e9e:	a5 01       	movw	r20, r10
    2ea0:	94 01       	movw	r18, r8
    2ea2:	60 e0       	ldi	r22, 0x00	; 0
    2ea4:	ce 01       	movw	r24, r28
    2ea6:	5a df       	rcall	.-332    	; 0x2d5c <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2ea8:	e0 91 29 12 	lds	r30, 0x1229	; 0x801229 <pxCurrentTimerList>
    2eac:	f0 91 2a 12 	lds	r31, 0x122A	; 0x80122a <pxCurrentTimerList+0x1>
    2eb0:	80 81       	ld	r24, Z
    2eb2:	81 11       	cpse	r24, r1
    2eb4:	be cf       	rjmp	.-132    	; 0x2e32 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2eb6:	80 91 27 12 	lds	r24, 0x1227	; 0x801227 <pxOverflowTimerList>
    2eba:	90 91 28 12 	lds	r25, 0x1228	; 0x801228 <pxOverflowTimerList+0x1>
    2ebe:	90 93 2a 12 	sts	0x122A, r25	; 0x80122a <pxCurrentTimerList+0x1>
    2ec2:	80 93 29 12 	sts	0x1229, r24	; 0x801229 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2ec6:	f0 93 28 12 	sts	0x1228, r31	; 0x801228 <pxOverflowTimerList+0x1>
    2eca:	e0 93 27 12 	sts	0x1227, r30	; 0x801227 <pxOverflowTimerList>
    }
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	1f 91       	pop	r17
    2ed4:	0f 91       	pop	r16
    2ed6:	ff 90       	pop	r15
    2ed8:	ef 90       	pop	r14
    2eda:	df 90       	pop	r13
    2edc:	cf 90       	pop	r12
    2ede:	bf 90       	pop	r11
    2ee0:	af 90       	pop	r10
    2ee2:	9f 90       	pop	r9
    2ee4:	8f 90       	pop	r8
    2ee6:	08 95       	ret

00002ee8 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2ee8:	cf 92       	push	r12
    2eea:	df 92       	push	r13
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	cf 93       	push	r28
    2ef2:	df 93       	push	r29
    2ef4:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2ef6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <xTaskGetTickCount>
    2efa:	6b 01       	movw	r12, r22
    2efc:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2efe:	80 91 1f 12 	lds	r24, 0x121F	; 0x80121f <xLastTime.2436>
    2f02:	90 91 20 12 	lds	r25, 0x1220	; 0x801220 <xLastTime.2436+0x1>
    2f06:	a0 91 21 12 	lds	r26, 0x1221	; 0x801221 <xLastTime.2436+0x2>
    2f0a:	b0 91 22 12 	lds	r27, 0x1222	; 0x801222 <xLastTime.2436+0x3>
    2f0e:	c8 16       	cp	r12, r24
    2f10:	d9 06       	cpc	r13, r25
    2f12:	ea 06       	cpc	r14, r26
    2f14:	fb 06       	cpc	r15, r27
    2f16:	20 f4       	brcc	.+8      	; 0x2f20 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2f18:	7f df       	rcall	.-258    	; 0x2e18 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	88 83       	st	Y, r24
    2f1e:	01 c0       	rjmp	.+2      	; 0x2f22 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2f20:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2f22:	c0 92 1f 12 	sts	0x121F, r12	; 0x80121f <xLastTime.2436>
    2f26:	d0 92 20 12 	sts	0x1220, r13	; 0x801220 <xLastTime.2436+0x1>
    2f2a:	e0 92 21 12 	sts	0x1221, r14	; 0x801221 <xLastTime.2436+0x2>
    2f2e:	f0 92 22 12 	sts	0x1222, r15	; 0x801222 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2f32:	c7 01       	movw	r24, r14
    2f34:	b6 01       	movw	r22, r12
    2f36:	df 91       	pop	r29
    2f38:	cf 91       	pop	r28
    2f3a:	ff 90       	pop	r15
    2f3c:	ef 90       	pop	r14
    2f3e:	df 90       	pop	r13
    2f40:	cf 90       	pop	r12
    2f42:	08 95       	ret

00002f44 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2f44:	4f 92       	push	r4
    2f46:	5f 92       	push	r5
    2f48:	6f 92       	push	r6
    2f4a:	7f 92       	push	r7
    2f4c:	8f 92       	push	r8
    2f4e:	9f 92       	push	r9
    2f50:	af 92       	push	r10
    2f52:	bf 92       	push	r11
    2f54:	cf 92       	push	r12
    2f56:	df 92       	push	r13
    2f58:	ef 92       	push	r14
    2f5a:	ff 92       	push	r15
    2f5c:	0f 93       	push	r16
    2f5e:	1f 93       	push	r17
    2f60:	cf 93       	push	r28
    2f62:	df 93       	push	r29
    2f64:	4b 01       	movw	r8, r22
    2f66:	5c 01       	movw	r10, r24
    2f68:	29 01       	movw	r4, r18
    2f6a:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2f6c:	e0 91 29 12 	lds	r30, 0x1229	; 0x801229 <pxCurrentTimerList>
    2f70:	f0 91 2a 12 	lds	r31, 0x122A	; 0x80122a <pxCurrentTimerList+0x1>
    2f74:	07 80       	ldd	r0, Z+7	; 0x07
    2f76:	f0 85       	ldd	r31, Z+8	; 0x08
    2f78:	e0 2d       	mov	r30, r0
    2f7a:	c0 85       	ldd	r28, Z+8	; 0x08
    2f7c:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2f7e:	ce 01       	movw	r24, r28
    2f80:	02 96       	adiw	r24, 0x02	; 2
    2f82:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2f86:	8e 89       	ldd	r24, Y+22	; 0x16
    2f88:	82 ff       	sbrs	r24, 2
    2f8a:	1b c0       	rjmp	.+54     	; 0x2fc2 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2f8c:	4e 85       	ldd	r20, Y+14	; 0x0e
    2f8e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2f90:	68 89       	ldd	r22, Y+16	; 0x10
    2f92:	79 89       	ldd	r23, Y+17	; 0x11
    2f94:	48 0d       	add	r20, r8
    2f96:	59 1d       	adc	r21, r9
    2f98:	6a 1d       	adc	r22, r10
    2f9a:	7b 1d       	adc	r23, r11
    2f9c:	75 01       	movw	r14, r10
    2f9e:	64 01       	movw	r12, r8
    2fa0:	93 01       	movw	r18, r6
    2fa2:	82 01       	movw	r16, r4
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	47 de       	rcall	.-882    	; 0x2c36 <prvInsertTimerInActiveList>
    2fa8:	88 23       	and	r24, r24
    2faa:	69 f0       	breq	.+26     	; 0x2fc6 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2fac:	c1 2c       	mov	r12, r1
    2fae:	d1 2c       	mov	r13, r1
    2fb0:	76 01       	movw	r14, r12
    2fb2:	00 e0       	ldi	r16, 0x00	; 0
    2fb4:	10 e0       	ldi	r17, 0x00	; 0
    2fb6:	a5 01       	movw	r20, r10
    2fb8:	94 01       	movw	r18, r8
    2fba:	60 e0       	ldi	r22, 0x00	; 0
    2fbc:	ce 01       	movw	r24, r28
    2fbe:	ce de       	rcall	.-612    	; 0x2d5c <xTimerGenericCommand>
    2fc0:	02 c0       	rjmp	.+4      	; 0x2fc6 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2fc2:	8e 7f       	andi	r24, 0xFE	; 254
    2fc4:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2fc6:	ec 89       	ldd	r30, Y+20	; 0x14
    2fc8:	fd 89       	ldd	r31, Y+21	; 0x15
    2fca:	ce 01       	movw	r24, r28
    2fcc:	19 95       	eicall
    }
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	df 90       	pop	r13
    2fdc:	cf 90       	pop	r12
    2fde:	bf 90       	pop	r11
    2fe0:	af 90       	pop	r10
    2fe2:	9f 90       	pop	r9
    2fe4:	8f 90       	pop	r8
    2fe6:	7f 90       	pop	r7
    2fe8:	6f 90       	pop	r6
    2fea:	5f 90       	pop	r5
    2fec:	4f 90       	pop	r4
    2fee:	08 95       	ret

00002ff0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2ff0:	8f 92       	push	r8
    2ff2:	9f 92       	push	r9
    2ff4:	af 92       	push	r10
    2ff6:	bf 92       	push	r11
    2ff8:	cf 92       	push	r12
    2ffa:	df 92       	push	r13
    2ffc:	ef 92       	push	r14
    2ffe:	ff 92       	push	r15
    3000:	1f 93       	push	r17
    3002:	cf 93       	push	r28
    3004:	df 93       	push	r29
    3006:	1f 92       	push	r1
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	6b 01       	movw	r12, r22
    300e:	7c 01       	movw	r14, r24
    3010:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3012:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3016:	ce 01       	movw	r24, r28
    3018:	01 96       	adiw	r24, 0x01	; 1
    301a:	66 df       	rcall	.-308    	; 0x2ee8 <prvSampleTimeNow>
    301c:	4b 01       	movw	r8, r22
    301e:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	81 11       	cpse	r24, r1
    3024:	2d c0       	rjmp	.+90     	; 0x3080 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3026:	11 11       	cpse	r17, r1
    3028:	0d c0       	rjmp	.+26     	; 0x3044 <prvProcessTimerOrBlockTask+0x54>
    302a:	8c 14       	cp	r8, r12
    302c:	9d 04       	cpc	r9, r13
    302e:	ae 04       	cpc	r10, r14
    3030:	bf 04       	cpc	r11, r15
    3032:	40 f0       	brcs	.+16     	; 0x3044 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3034:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3038:	a5 01       	movw	r20, r10
    303a:	94 01       	movw	r18, r8
    303c:	c7 01       	movw	r24, r14
    303e:	b6 01       	movw	r22, r12
    3040:	81 df       	rcall	.-254    	; 0x2f44 <prvProcessExpiredTimer>
    3042:	20 c0       	rjmp	.+64     	; 0x3084 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3044:	11 23       	and	r17, r17
    3046:	41 f0       	breq	.+16     	; 0x3058 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3048:	e0 91 27 12 	lds	r30, 0x1227	; 0x801227 <pxOverflowTimerList>
    304c:	f0 91 28 12 	lds	r31, 0x1228	; 0x801228 <pxOverflowTimerList+0x1>
    3050:	80 81       	ld	r24, Z
    3052:	11 e0       	ldi	r17, 0x01	; 1
    3054:	81 11       	cpse	r24, r1
    3056:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3058:	b7 01       	movw	r22, r14
    305a:	a6 01       	movw	r20, r12
    305c:	48 19       	sub	r20, r8
    305e:	59 09       	sbc	r21, r9
    3060:	6a 09       	sbc	r22, r10
    3062:	7b 09       	sbc	r23, r11
    3064:	21 2f       	mov	r18, r17
    3066:	80 91 25 12 	lds	r24, 0x1225	; 0x801225 <xTimerQueue>
    306a:	90 91 26 12 	lds	r25, 0x1226	; 0x801226 <xTimerQueue+0x1>
    306e:	0e 94 a0 07 	call	0xf40	; 0xf40 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3072:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <xTaskResumeAll>
    3076:	81 11       	cpse	r24, r1
    3078:	05 c0       	rjmp	.+10     	; 0x3084 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    307a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <vPortYield>
    307e:	02 c0       	rjmp	.+4      	; 0x3084 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3080:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <xTaskResumeAll>
            }
        }
    }
    3084:	0f 90       	pop	r0
    3086:	df 91       	pop	r29
    3088:	cf 91       	pop	r28
    308a:	1f 91       	pop	r17
    308c:	ff 90       	pop	r15
    308e:	ef 90       	pop	r14
    3090:	df 90       	pop	r13
    3092:	cf 90       	pop	r12
    3094:	bf 90       	pop	r11
    3096:	af 90       	pop	r10
    3098:	9f 90       	pop	r9
    309a:	8f 90       	pop	r8
    309c:	08 95       	ret

0000309e <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    309e:	af 92       	push	r10
    30a0:	bf 92       	push	r11
    30a2:	cf 92       	push	r12
    30a4:	df 92       	push	r13
    30a6:	ef 92       	push	r14
    30a8:	ff 92       	push	r15
    30aa:	0f 93       	push	r16
    30ac:	1f 93       	push	r17
    30ae:	cf 93       	push	r28
    30b0:	df 93       	push	r29
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
    30b6:	28 97       	sbiw	r28, 0x08	; 8
    30b8:	0f b6       	in	r0, 0x3f	; 63
    30ba:	f8 94       	cli
    30bc:	de bf       	out	0x3e, r29	; 62
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    30c2:	82 c0       	rjmp	.+260    	; 0x31c8 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	88 23       	and	r24, r24
    30c8:	0c f4       	brge	.+2      	; 0x30cc <prvProcessReceivedCommands+0x2e>
    30ca:	7e c0       	rjmp	.+252    	; 0x31c8 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    30cc:	ae 80       	ldd	r10, Y+6	; 0x06
    30ce:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    30d0:	d5 01       	movw	r26, r10
    30d2:	1c 96       	adiw	r26, 0x0c	; 12
    30d4:	8d 91       	ld	r24, X+
    30d6:	9c 91       	ld	r25, X
    30d8:	1d 97       	sbiw	r26, 0x0d	; 13
    30da:	89 2b       	or	r24, r25
    30dc:	21 f0       	breq	.+8      	; 0x30e6 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    30de:	c5 01       	movw	r24, r10
    30e0:	02 96       	adiw	r24, 0x02	; 2
    30e2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    30e6:	ce 01       	movw	r24, r28
    30e8:	08 96       	adiw	r24, 0x08	; 8
    30ea:	fe de       	rcall	.-516    	; 0x2ee8 <prvSampleTimeNow>
    30ec:	8b 01       	movw	r16, r22
    30ee:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    30f0:	e9 81       	ldd	r30, Y+1	; 0x01
    30f2:	0e 2e       	mov	r0, r30
    30f4:	00 0c       	add	r0, r0
    30f6:	ff 0b       	sbc	r31, r31
    30f8:	ea 30       	cpi	r30, 0x0A	; 10
    30fa:	f1 05       	cpc	r31, r1
    30fc:	08 f0       	brcs	.+2      	; 0x3100 <prvProcessReceivedCommands+0x62>
    30fe:	64 c0       	rjmp	.+200    	; 0x31c8 <prvProcessReceivedCommands+0x12a>
    3100:	88 27       	eor	r24, r24
    3102:	ee 58       	subi	r30, 0x8E	; 142
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	8f 4f       	sbci	r24, 0xFF	; 255
    3108:	0c 94 49 2a 	jmp	0x5492	; 0x5492 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    310c:	f5 01       	movw	r30, r10
    310e:	86 89       	ldd	r24, Z+22	; 0x16
    3110:	81 60       	ori	r24, 0x01	; 1
    3112:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3114:	ca 80       	ldd	r12, Y+2	; 0x02
    3116:	db 80       	ldd	r13, Y+3	; 0x03
    3118:	ec 80       	ldd	r14, Y+4	; 0x04
    311a:	fd 80       	ldd	r15, Y+5	; 0x05
    311c:	46 85       	ldd	r20, Z+14	; 0x0e
    311e:	57 85       	ldd	r21, Z+15	; 0x0f
    3120:	60 89       	ldd	r22, Z+16	; 0x10
    3122:	71 89       	ldd	r23, Z+17	; 0x11
    3124:	4c 0d       	add	r20, r12
    3126:	5d 1d       	adc	r21, r13
    3128:	6e 1d       	adc	r22, r14
    312a:	7f 1d       	adc	r23, r15
    312c:	c5 01       	movw	r24, r10
    312e:	83 dd       	rcall	.-1274   	; 0x2c36 <prvInsertTimerInActiveList>
    3130:	88 23       	and	r24, r24
    3132:	09 f4       	brne	.+2      	; 0x3136 <prvProcessReceivedCommands+0x98>
    3134:	49 c0       	rjmp	.+146    	; 0x31c8 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3136:	d5 01       	movw	r26, r10
    3138:	54 96       	adiw	r26, 0x14	; 20
    313a:	ed 91       	ld	r30, X+
    313c:	fc 91       	ld	r31, X
    313e:	55 97       	sbiw	r26, 0x15	; 21
    3140:	c5 01       	movw	r24, r10
    3142:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3144:	f5 01       	movw	r30, r10
    3146:	86 89       	ldd	r24, Z+22	; 0x16
    3148:	82 ff       	sbrs	r24, 2
    314a:	3e c0       	rjmp	.+124    	; 0x31c8 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    314c:	4a 81       	ldd	r20, Y+2	; 0x02
    314e:	5b 81       	ldd	r21, Y+3	; 0x03
    3150:	6c 81       	ldd	r22, Y+4	; 0x04
    3152:	7d 81       	ldd	r23, Y+5	; 0x05
    3154:	86 85       	ldd	r24, Z+14	; 0x0e
    3156:	97 85       	ldd	r25, Z+15	; 0x0f
    3158:	a0 89       	ldd	r26, Z+16	; 0x10
    315a:	b1 89       	ldd	r27, Z+17	; 0x11
    315c:	9a 01       	movw	r18, r20
    315e:	ab 01       	movw	r20, r22
    3160:	28 0f       	add	r18, r24
    3162:	39 1f       	adc	r19, r25
    3164:	4a 1f       	adc	r20, r26
    3166:	5b 1f       	adc	r21, r27
    3168:	c1 2c       	mov	r12, r1
    316a:	d1 2c       	mov	r13, r1
    316c:	76 01       	movw	r14, r12
    316e:	00 e0       	ldi	r16, 0x00	; 0
    3170:	10 e0       	ldi	r17, 0x00	; 0
    3172:	60 e0       	ldi	r22, 0x00	; 0
    3174:	c5 01       	movw	r24, r10
    3176:	f2 dd       	rcall	.-1052   	; 0x2d5c <xTimerGenericCommand>
    3178:	27 c0       	rjmp	.+78     	; 0x31c8 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    317a:	d5 01       	movw	r26, r10
    317c:	56 96       	adiw	r26, 0x16	; 22
    317e:	8c 91       	ld	r24, X
    3180:	56 97       	sbiw	r26, 0x16	; 22
    3182:	8e 7f       	andi	r24, 0xFE	; 254
    3184:	56 96       	adiw	r26, 0x16	; 22
    3186:	8c 93       	st	X, r24
                        break;
    3188:	1f c0       	rjmp	.+62     	; 0x31c8 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    318a:	f5 01       	movw	r30, r10
    318c:	86 89       	ldd	r24, Z+22	; 0x16
    318e:	81 60       	ori	r24, 0x01	; 1
    3190:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3192:	4a 81       	ldd	r20, Y+2	; 0x02
    3194:	5b 81       	ldd	r21, Y+3	; 0x03
    3196:	6c 81       	ldd	r22, Y+4	; 0x04
    3198:	7d 81       	ldd	r23, Y+5	; 0x05
    319a:	46 87       	std	Z+14, r20	; 0x0e
    319c:	57 87       	std	Z+15, r21	; 0x0f
    319e:	60 8b       	std	Z+16, r22	; 0x10
    31a0:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    31a2:	40 0f       	add	r20, r16
    31a4:	51 1f       	adc	r21, r17
    31a6:	62 1f       	adc	r22, r18
    31a8:	73 1f       	adc	r23, r19
    31aa:	68 01       	movw	r12, r16
    31ac:	79 01       	movw	r14, r18
    31ae:	c5 01       	movw	r24, r10
    31b0:	42 dd       	rcall	.-1404   	; 0x2c36 <prvInsertTimerInActiveList>
                        break;
    31b2:	0a c0       	rjmp	.+20     	; 0x31c8 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    31b4:	f5 01       	movw	r30, r10
    31b6:	86 89       	ldd	r24, Z+22	; 0x16
    31b8:	81 fd       	sbrc	r24, 1
    31ba:	04 c0       	rjmp	.+8      	; 0x31c4 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    31bc:	c5 01       	movw	r24, r10
    31be:	0e 94 52 02 	call	0x4a4	; 0x4a4 <vPortFree>
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    31c4:	8e 7f       	andi	r24, 0xFE	; 254
    31c6:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	a9 01       	movw	r20, r18
    31ce:	be 01       	movw	r22, r28
    31d0:	6f 5f       	subi	r22, 0xFF	; 255
    31d2:	7f 4f       	sbci	r23, 0xFF	; 255
    31d4:	80 91 25 12 	lds	r24, 0x1225	; 0x801225 <xTimerQueue>
    31d8:	90 91 26 12 	lds	r25, 0x1226	; 0x801226 <xTimerQueue+0x1>
    31dc:	0e 94 60 06 	call	0xcc0	; 0xcc0 <xQueueReceive>
    31e0:	81 11       	cpse	r24, r1
    31e2:	70 cf       	rjmp	.-288    	; 0x30c4 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    31e4:	28 96       	adiw	r28, 0x08	; 8
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	df 91       	pop	r29
    31f2:	cf 91       	pop	r28
    31f4:	1f 91       	pop	r17
    31f6:	0f 91       	pop	r16
    31f8:	ff 90       	pop	r15
    31fa:	ef 90       	pop	r14
    31fc:	df 90       	pop	r13
    31fe:	cf 90       	pop	r12
    3200:	bf 90       	pop	r11
    3202:	af 90       	pop	r10
    3204:	08 95       	ret

00003206 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3206:	08 95       	ret

00003208 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3208:	84 b1       	in	r24, 0x04	; 4
    320a:	80 68       	ori	r24, 0x80	; 128
    320c:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    320e:	85 b1       	in	r24, 0x05	; 5
    3210:	80 68       	ori	r24, 0x80	; 128
    3212:	85 b9       	out	0x05, r24	; 5
    3214:	08 95       	ret

00003216 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3216:	83 b1       	in	r24, 0x03	; 3
    3218:	80 68       	ori	r24, 0x80	; 128
    321a:	83 b9       	out	0x03, r24	; 3
    321c:	08 95       	ret

0000321e <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    321e:	f4 df       	rcall	.-24     	; 0x3208 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3220:	2f ef       	ldi	r18, 0xFF	; 255
    3222:	80 e7       	ldi	r24, 0x70	; 112
    3224:	92 e0       	ldi	r25, 0x02	; 2
    3226:	21 50       	subi	r18, 0x01	; 1
    3228:	80 40       	sbci	r24, 0x00	; 0
    322a:	90 40       	sbci	r25, 0x00	; 0
    322c:	e1 f7       	brne	.-8      	; 0x3226 <vApplicationMallocFailedHook+0x8>
    322e:	00 c0       	rjmp	.+0      	; 0x3230 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3230:	00 00       	nop
    3232:	f1 df       	rcall	.-30     	; 0x3216 <prvBlinkMainLed>
    3234:	f5 cf       	rjmp	.-22     	; 0x3220 <vApplicationMallocFailedHook+0x2>

00003236 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3236:	e8 df       	rcall	.-48     	; 0x3208 <prvSetMainLedOn>
    3238:	2f ef       	ldi	r18, 0xFF	; 255
    323a:	87 ea       	ldi	r24, 0xA7	; 167
    323c:	91 e6       	ldi	r25, 0x61	; 97
    323e:	21 50       	subi	r18, 0x01	; 1
    3240:	80 40       	sbci	r24, 0x00	; 0
    3242:	90 40       	sbci	r25, 0x00	; 0
    3244:	e1 f7       	brne	.-8      	; 0x323e <vApplicationStackOverflowHook+0x8>
    3246:	00 c0       	rjmp	.+0      	; 0x3248 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3248:	00 00       	nop
    324a:	e5 df       	rcall	.-54     	; 0x3216 <prvBlinkMainLed>
    324c:	f5 cf       	rjmp	.-22     	; 0x3238 <vApplicationStackOverflowHook+0x2>

0000324e <humMotorTask>:
	(void) pvParameters;
	
	while (1) {
		//vTaskDelay(100);
		
		xSemaphoreTake(hardware_semaphore, portMAX_DELAY);
    324e:	4f ef       	ldi	r20, 0xFF	; 255
    3250:	5f ef       	ldi	r21, 0xFF	; 255
    3252:	ba 01       	movw	r22, r20
    3254:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <hardware_semaphore>
    3258:	90 91 bb 13 	lds	r25, 0x13BB	; 0x8013bb <hardware_semaphore+0x1>
    325c:	0e 94 ef 06 	call	0xdde	; 0xdde <xQueueSemaphoreTake>
		
		if (desired_data.desired_hum > entry_data.humidity)
    3260:	20 91 b4 13 	lds	r18, 0x13B4	; 0x8013b4 <desired_data+0x2>
    3264:	30 91 b5 13 	lds	r19, 0x13B5	; 0x8013b5 <desired_data+0x3>
    3268:	80 91 ac 13 	lds	r24, 0x13AC	; 0x8013ac <entry_data+0x2>
    326c:	90 91 ad 13 	lds	r25, 0x13AD	; 0x8013ad <entry_data+0x3>
    3270:	82 17       	cp	r24, r18
    3272:	93 07       	cpc	r25, r19
    3274:	60 f4       	brcc	.+24     	; 0x328e <humMotorTask+0x40>
		{
			//printf("Water motor is moving right \n");
			rc_servo_setPosition(0,100);
    3276:	64 e6       	ldi	r22, 0x64	; 100
    3278:	80 e0       	ldi	r24, 0x00	; 0
    327a:	82 d6       	rcall	.+3332   	; 0x3f80 <rc_servo_setPosition>
			vTaskDelay(50);
    327c:	62 e3       	ldi	r22, 0x32	; 50
    327e:	70 e0       	ldi	r23, 0x00	; 0
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskDelay>
			//printf("Water motor is moving left \n");
			rc_servo_setPosition(0,-100);
    3288:	6c e9       	ldi	r22, 0x9C	; 156
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	79 d6       	rcall	.+3314   	; 0x3f80 <rc_servo_setPosition>
		}
		
		xSemaphoreGive(hardware_semaphore);
    328e:	00 e0       	ldi	r16, 0x00	; 0
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	a9 01       	movw	r20, r18
    3296:	60 e0       	ldi	r22, 0x00	; 0
    3298:	70 e0       	ldi	r23, 0x00	; 0
    329a:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <hardware_semaphore>
    329e:	90 91 bb 13 	lds	r25, 0x13BB	; 0x8013bb <hardware_semaphore+0x1>
    32a2:	0e 94 75 05 	call	0xaea	; 0xaea <xQueueGenericSend>
		
		vTaskDelay(9800);
    32a6:	68 e4       	ldi	r22, 0x48	; 72
    32a8:	76 e2       	ldi	r23, 0x26	; 38
    32aa:	80 e0       	ldi	r24, 0x00	; 0
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskDelay>
	}
    32b2:	cd cf       	rjmp	.-102    	; 0x324e <humMotorTask>

000032b4 <tempAndHumidityTask>:

void tempAndHumidityTask(void* pvParameters){
	(void) pvParameters;
	
	while(1){
		vTaskDelay(50);
    32b4:	62 e3       	ldi	r22, 0x32	; 50
    32b6:	70 e0       	ldi	r23, 0x00	; 0
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskDelay>
		
		int returnCode = hih8120_wakeup();
    32c0:	6a d2       	rcall	.+1236   	; 0x3796 <hih8120_wakeup>
		/*if(HIH8120_OK != returnCode && returnCode!= HIH8120_TWI_BUSY){
			printf("HIH8120 wakeup error %d \n",returnCode);
		}*/
		
		vTaskDelay(10);
    32c2:	6a e0       	ldi	r22, 0x0A	; 10
    32c4:	70 e0       	ldi	r23, 0x00	; 0
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskDelay>
		
		returnCode = hih8120_measure();
    32ce:	78 d2       	rcall	.+1264   	; 0x37c0 <hih8120_measure>
		/*if(HIH8120_OK!=returnCode && returnCode!= HIH8120_TWI_BUSY){
			printf("HIH8120 measure error %d \n",returnCode);
		}*/
		
		vTaskDelay(15);
    32d0:	6f e0       	ldi	r22, 0x0F	; 15
    32d2:	70 e0       	ldi	r23, 0x00	; 0
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskDelay>
		
		xSemaphoreTake(hardware_semaphore, portMAX_DELAY);
    32dc:	4f ef       	ldi	r20, 0xFF	; 255
    32de:	5f ef       	ldi	r21, 0xFF	; 255
    32e0:	ba 01       	movw	r22, r20
    32e2:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <hardware_semaphore>
    32e6:	90 91 bb 13 	lds	r25, 0x13BB	; 0x8013bb <hardware_semaphore+0x1>
    32ea:	0e 94 ef 06 	call	0xdde	; 0xdde <xQueueSemaphoreTake>
		
		entry_data.humidity=hih8120_getHumidityPercent_x10();
    32ee:	8e d2       	rcall	.+1308   	; 0x380c <hih8120_getHumidityPercent_x10>
    32f0:	ca ea       	ldi	r28, 0xAA	; 170
    32f2:	d3 e1       	ldi	r29, 0x13	; 19
    32f4:	9b 83       	std	Y+3, r25	; 0x03
		entry_data.temperature=hih8120_getTemperature_x10();
    32f6:	8a 83       	std	Y+2, r24	; 0x02
    32f8:	ae d2       	rcall	.+1372   	; 0x3856 <hih8120_getTemperature_x10>
    32fa:	99 83       	std	Y+1, r25	; 0x01
    32fc:	88 83       	st	Y, r24
		//printf("Humidity= %d and Temperature= %d \n",entry_data.humidity,entry_data.temperature);
		
		xSemaphoreGive(hardware_semaphore);
    32fe:	00 e0       	ldi	r16, 0x00	; 0
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	a9 01       	movw	r20, r18
    3306:	60 e0       	ldi	r22, 0x00	; 0
    3308:	70 e0       	ldi	r23, 0x00	; 0
    330a:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <hardware_semaphore>
    330e:	90 91 bb 13 	lds	r25, 0x13BB	; 0x8013bb <hardware_semaphore+0x1>
    3312:	0e 94 75 05 	call	0xaea	; 0xaea <xQueueGenericSend>
		
		vTaskDelay(9900); 
    3316:	6c ea       	ldi	r22, 0xAC	; 172
    3318:	76 e2       	ldi	r23, 0x26	; 38
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskDelay>
    3322:	c8 cf       	rjmp	.-112    	; 0x32b4 <tempAndHumidityTask>

00003324 <lightTask>:

void lightTask(void* pvParameters) {
	(void)pvParameters;

	while (1) {
		vTaskDelay(70);
    3324:	66 e4       	ldi	r22, 0x46	; 70
    3326:	70 e0       	ldi	r23, 0x00	; 0
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskDelay>
		int statusCode = tsl2591_fetchData();
    3330:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <tsl2591_fetchData>
		/*if (statusCode != TSL2591_OK) {
			printf("Light data error: %d\n", statusCode);
		} */
		vTaskDelay(9900);
    3334:	6c ea       	ldi	r22, 0xAC	; 172
    3336:	76 e2       	ldi	r23, 0x26	; 38
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskDelay>
    3340:	f1 cf       	rjmp	.-30     	; 0x3324 <lightTask>

00003342 <lightCallback>:
	}

}


void lightCallback(tsl2591_returnCode_t rc) {
    3342:	0f 93       	push	r16
    3344:	cf 93       	push	r28
    3346:	df 93       	push	r29
    3348:	00 d0       	rcall	.+0      	; 0x334a <lightCallback+0x8>
    334a:	1f 92       	push	r1
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
	float lux;
	xSemaphoreTake(hardware_semaphore, portMAX_DELAY);
    3350:	4f ef       	ldi	r20, 0xFF	; 255
    3352:	5f ef       	ldi	r21, 0xFF	; 255
    3354:	ba 01       	movw	r22, r20
    3356:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <hardware_semaphore>
    335a:	90 91 bb 13 	lds	r25, 0x13BB	; 0x8013bb <hardware_semaphore+0x1>
    335e:	0e 94 ef 06 	call	0xdde	; 0xdde <xQueueSemaphoreTake>
	
	if (TSL2591_OK == (rc = tsl2591_getLux(&lux)))
    3362:	ce 01       	movw	r24, r28
    3364:	01 96       	adiw	r24, 0x01	; 1
    3366:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <tsl2591_getLux>
    336a:	81 11       	cpse	r24, r1
    336c:	09 c0       	rjmp	.+18     	; 0x3380 <lightCallback+0x3e>
	{
		//printf("Lux: %d\n", (uint16_t)lux);
		entry_data.light = (uint16_t)lux;
    336e:	69 81       	ldd	r22, Y+1	; 0x01
    3370:	7a 81       	ldd	r23, Y+2	; 0x02
    3372:	8b 81       	ldd	r24, Y+3	; 0x03
    3374:	9c 81       	ldd	r25, Y+4	; 0x04
    3376:	75 d1       	rcall	.+746    	; 0x3662 <__fixunssfsi>
    3378:	70 93 b1 13 	sts	0x13B1, r23	; 0x8013b1 <entry_data+0x7>
    337c:	60 93 b0 13 	sts	0x13B0, r22	; 0x8013b0 <entry_data+0x6>
	}
	/*else if (TSL2591_OVERFLOW == rc)
	{
		printf("Lux overflow\n");
	}*/
	if(desired_data.desired_light>entry_data.light){
    3380:	20 91 b8 13 	lds	r18, 0x13B8	; 0x8013b8 <desired_data+0x6>
    3384:	30 91 b9 13 	lds	r19, 0x13B9	; 0x8013b9 <desired_data+0x7>
    3388:	80 91 b0 13 	lds	r24, 0x13B0	; 0x8013b0 <entry_data+0x6>
    338c:	90 91 b1 13 	lds	r25, 0x13B1	; 0x8013b1 <entry_data+0x7>
    3390:	82 17       	cp	r24, r18
    3392:	93 07       	cpc	r25, r19
    3394:	18 f4       	brcc	.+6      	; 0x339c <lightCallback+0x5a>
		rc_servo_setPosition(1,100)	;
    3396:	64 e6       	ldi	r22, 0x64	; 100
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	f2 d5       	rcall	.+3044   	; 0x3f80 <rc_servo_setPosition>
		//printf("Motor is moving right\n");
		//printf("Light level is turned up\n");
	}
	if(desired_data.desired_light<entry_data.light){
    339c:	20 91 b8 13 	lds	r18, 0x13B8	; 0x8013b8 <desired_data+0x6>
    33a0:	30 91 b9 13 	lds	r19, 0x13B9	; 0x8013b9 <desired_data+0x7>
    33a4:	80 91 b0 13 	lds	r24, 0x13B0	; 0x8013b0 <entry_data+0x6>
    33a8:	90 91 b1 13 	lds	r25, 0x13B1	; 0x8013b1 <entry_data+0x7>
    33ac:	28 17       	cp	r18, r24
    33ae:	39 07       	cpc	r19, r25
    33b0:	18 f4       	brcc	.+6      	; 0x33b8 <lightCallback+0x76>
		rc_servo_setPosition(1,-100)	;
    33b2:	6c e9       	ldi	r22, 0x9C	; 156
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	e4 d5       	rcall	.+3016   	; 0x3f80 <rc_servo_setPosition>
		//printf("Motor is moving left\n");
		//printf("Light level is turned down\n");
	}
	
	xSemaphoreGive(hardware_semaphore);
    33b8:	00 e0       	ldi	r16, 0x00	; 0
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	a9 01       	movw	r20, r18
    33c0:	60 e0       	ldi	r22, 0x00	; 0
    33c2:	70 e0       	ldi	r23, 0x00	; 0
    33c4:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <hardware_semaphore>
    33c8:	90 91 bb 13 	lds	r25, 0x13BB	; 0x8013bb <hardware_semaphore+0x1>
    33cc:	0e 94 75 05 	call	0xaea	; 0xaea <xQueueGenericSend>
    33d0:	0f 90       	pop	r0
    33d2:	0f 90       	pop	r0
    33d4:	0f 90       	pop	r0
    33d6:	0f 90       	pop	r0
    33d8:	df 91       	pop	r29
    33da:	cf 91       	pop	r28
    33dc:	0f 91       	pop	r16
    33de:	08 95       	ret

000033e0 <_lora_setup>:

static lora_driver_payload_t _uplink_payload;
static lora_driver_payload_t _downlink_payload;

static void _lora_setup(void)
{
    33e0:	cf 93       	push	r28
    33e2:	df 93       	push	r29
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); 
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	0e 94 04 25 	call	0x4a08	; 0x4a08 <status_leds_slowBlink>
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));

*/

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    33ea:	ca e0       	ldi	r28, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	ab d3       	rcall	.+1878   	; 0x3b46 <lora_driver_join>
    33f0:	d8 2f       	mov	r29, r24
		//printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));

		if ( rc != LORA_ACCEPTED)
    33f2:	88 30       	cpi	r24, 0x08	; 8
    33f4:	41 f0       	breq	.+16     	; 0x3406 <_lora_setup+0x26>
		{
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    33f6:	66 e3       	ldi	r22, 0x36	; 54
    33f8:	71 e0       	ldi	r23, 0x01	; 1
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3402:	c1 50       	subi	r28, 0x01	; 1
    3404:	99 f7       	brne	.-26     	; 0x33ec <_lora_setup+0xc>

	if (rc == LORA_ACCEPTED)
    3406:	d8 30       	cpi	r29, 0x08	; 8
    3408:	19 f0       	breq	.+6      	; 0x3410 <_lora_setup+0x30>
	else
	{
		//puts("Connection failed \n");
		while (1)
		{
			taskYIELD();
    340a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <vPortYield>
    340e:	fd cf       	rjmp	.-6      	; 0x340a <_lora_setup+0x2a>
		}
	}
}
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	08 95       	ret

00003416 <lora_handler_task>:

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	88 d3       	rcall	.+1808   	; 0x3b2a <lora_driver_resetRn2483>
	vTaskDelay(2);
    341a:	62 e0       	ldi	r22, 0x02	; 2
    341c:	70 e0       	ldi	r23, 0x00	; 0
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	80 d3       	rcall	.+1792   	; 0x3b2a <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    342a:	66 e9       	ldi	r22, 0x96	; 150
    342c:	70 e0       	ldi	r23, 0x00	; 0
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3436:	32 d3       	rcall	.+1636   	; 0x3a9c <lora_driver_flushBuffers>

	_lora_setup();
    3438:	d3 df       	rcall	.-90     	; 0x33e0 <_lora_setup>
    343a:	e7 e5       	ldi	r30, 0x57	; 87
	//vTaskDelay(150); //make sure the setup had time 

	_uplink_payload.len = 8;
    343c:	f2 e1       	ldi	r31, 0x12	; 18
    343e:	98 e0       	ldi	r25, 0x08	; 8
    3440:	91 83       	std	Z+1, r25	; 0x01
    3442:	81 e0       	ldi	r24, 0x01	; 1
	_uplink_payload.portNo = 1; 
    3444:	80 83       	st	Z, r24
    3446:	e1 e4       	ldi	r30, 0x41	; 65
	
	_downlink_payload.len = 8;
    3448:	f2 e1       	ldi	r31, 0x12	; 18
    344a:	91 83       	std	Z+1, r25	; 0x01
    344c:	80 83       	st	Z, r24
	_downlink_payload.portNo = 1;
    344e:	60 e1       	ldi	r22, 0x10	; 16
	
	for(;;)
	{
		vTaskDelay(10000); //500 = aprox 30 sec (10000 - aprox 3.5 min)
    3450:	77 e2       	ldi	r23, 0x27	; 39
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskDelay>
    345a:	4f ef       	ldi	r20, 0xFF	; 255
		xSemaphoreTake(hardware_semaphore,portMAX_DELAY);
    345c:	5f ef       	ldi	r21, 0xFF	; 255
    345e:	ba 01       	movw	r22, r20
    3460:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <hardware_semaphore>
    3464:	90 91 bb 13 	lds	r25, 0x13BB	; 0x8013bb <hardware_semaphore+0x1>
    3468:	0e 94 ef 06 	call	0xdde	; 0xdde <xQueueSemaphoreTake>
    346c:	aa ea       	ldi	r26, 0xAA	; 170
		//puts("in semaphore\n");
		
		_uplink_payload.bytes[0] = entry_data.humidity >> 8;
    346e:	b3 e1       	ldi	r27, 0x13	; 19
    3470:	12 96       	adiw	r26, 0x02	; 2
    3472:	8c 91       	ld	r24, X
    3474:	12 97       	sbiw	r26, 0x02	; 2
    3476:	13 96       	adiw	r26, 0x03	; 3
    3478:	9c 91       	ld	r25, X
    347a:	13 97       	sbiw	r26, 0x03	; 3
    347c:	e7 e5       	ldi	r30, 0x57	; 87
    347e:	f2 e1       	ldi	r31, 0x12	; 18
    3480:	92 83       	std	Z+2, r25	; 0x02
    3482:	83 83       	std	Z+3, r24	; 0x03
		_uplink_payload.bytes[1] = entry_data.humidity & 0xFF;
    3484:	8c 91       	ld	r24, X
		_uplink_payload.bytes[2] = entry_data.temperature >> 8;
    3486:	11 96       	adiw	r26, 0x01	; 1
    3488:	9c 91       	ld	r25, X
    348a:	11 97       	sbiw	r26, 0x01	; 1
    348c:	94 83       	std	Z+4, r25	; 0x04
    348e:	85 83       	std	Z+5, r24	; 0x05
		_uplink_payload.bytes[3] = entry_data.temperature & 0xFF;
    3490:	14 96       	adiw	r26, 0x04	; 4
		_uplink_payload.bytes[4] = entry_data.co2 >> 8;
    3492:	8c 91       	ld	r24, X
    3494:	14 97       	sbiw	r26, 0x04	; 4
    3496:	15 96       	adiw	r26, 0x05	; 5
    3498:	9c 91       	ld	r25, X
    349a:	15 97       	sbiw	r26, 0x05	; 5
    349c:	96 83       	std	Z+6, r25	; 0x06
    349e:	87 83       	std	Z+7, r24	; 0x07
		_uplink_payload.bytes[5] = entry_data.co2 & 0xFF;
    34a0:	16 96       	adiw	r26, 0x06	; 6
		_uplink_payload.bytes[6] = entry_data.light >> 8;
    34a2:	8c 91       	ld	r24, X
    34a4:	16 97       	sbiw	r26, 0x06	; 6
    34a6:	17 96       	adiw	r26, 0x07	; 7
    34a8:	9c 91       	ld	r25, X
    34aa:	90 87       	std	Z+8, r25	; 0x08
		_uplink_payload.bytes[7] = entry_data.light & 0xFF;
    34ac:	81 87       	std	Z+9, r24	; 0x09

		//printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
		
		lora_driver_returnCode_t rc;
		
		rc = lora_driver_sendUploadMessage(false, &_uplink_payload);
    34ae:	bf 01       	movw	r22, r30
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	72 d3       	rcall	.+1764   	; 0x3b98 <lora_driver_sendUploadMessage>
    34b4:	8d 30       	cpi	r24, 0x0D	; 13
		
		if (rc  == LORA_MAC_TX_OK )
    34b6:	09 f4       	brne	.+2      	; 0x34ba <lora_handler_task+0xa4>
    34b8:	48 c0       	rjmp	.+144    	; 0x354a <lora_handler_task+0x134>
    34ba:	8e 30       	cpi	r24, 0x0E	; 14
		{
			//puts("MESSAGE SENT \n");
			// The uplink message is sent and there is no downlink message received
		}
		else if(rc==LORA_MAC_RX)
    34bc:	09 f0       	breq	.+2      	; 0x34c0 <lora_handler_task+0xaa>
    34be:	41 c0       	rjmp	.+130    	; 0x3542 <lora_handler_task+0x12c>
    34c0:	0f ef       	ldi	r16, 0xFF	; 255
		{
			// The uplink message is sent and a downlink message is received
			//puts("MESSAGE SENT \n");
			
			xMessageBufferReceive(downlink_buffer, &_downlink_payload, sizeof(lora_driver_payload_t),portMAX_DELAY);
    34c2:	1f ef       	ldi	r17, 0xFF	; 255
    34c4:	98 01       	movw	r18, r16
    34c6:	46 e1       	ldi	r20, 0x16	; 22
    34c8:	50 e0       	ldi	r21, 0x00	; 0
    34ca:	61 e4       	ldi	r22, 0x41	; 65
    34cc:	72 e1       	ldi	r23, 0x12	; 18
    34ce:	80 91 a8 13 	lds	r24, 0x13A8	; 0x8013a8 <downlink_buffer>
    34d2:	90 91 a9 13 	lds	r25, 0x13A9	; 0x8013a9 <downlink_buffer+0x1>
    34d6:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <xStreamBufferReceive>
    34da:	80 91 42 12 	lds	r24, 0x1242	; 0x801242 <_downlink_payload+0x1>
			//printf("DOWN LINK: from port: %d with %d bytes received! \n", _downlink_payload.portNo, _downlink_payload.len);
			
			
			if(_downlink_payload.len==8) //number of bytes we send and expect to receive
    34de:	88 30       	cpi	r24, 0x08	; 8
    34e0:	a1 f5       	brne	.+104    	; 0x354a <lora_handler_task+0x134>
    34e2:	e1 e4       	ldi	r30, 0x41	; 65
			{
				desired_data.desired_temp=(_downlink_payload.bytes[0] << 8) + _downlink_payload.bytes[1];
    34e4:	f2 e1       	ldi	r31, 0x12	; 18
    34e6:	82 81       	ldd	r24, Z+2	; 0x02
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	98 2f       	mov	r25, r24
    34ec:	88 27       	eor	r24, r24
    34ee:	23 81       	ldd	r18, Z+3	; 0x03
    34f0:	82 0f       	add	r24, r18
    34f2:	91 1d       	adc	r25, r1
    34f4:	a2 eb       	ldi	r26, 0xB2	; 178
    34f6:	b3 e1       	ldi	r27, 0x13	; 19
    34f8:	11 96       	adiw	r26, 0x01	; 1
    34fa:	9c 93       	st	X, r25
    34fc:	8e 93       	st	-X, r24
    34fe:	84 81       	ldd	r24, Z+4	; 0x04
				desired_data.desired_hum=(_downlink_payload.bytes[2] << 8) + _downlink_payload.bytes[3];
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	98 2f       	mov	r25, r24
    3504:	88 27       	eor	r24, r24
    3506:	25 81       	ldd	r18, Z+5	; 0x05
    3508:	82 0f       	add	r24, r18
    350a:	91 1d       	adc	r25, r1
    350c:	13 96       	adiw	r26, 0x03	; 3
    350e:	9c 93       	st	X, r25
    3510:	8e 93       	st	-X, r24
    3512:	12 97       	sbiw	r26, 0x02	; 2
    3514:	86 81       	ldd	r24, Z+6	; 0x06
				desired_data.desired_co2=(_downlink_payload.bytes[4] << 8) + _downlink_payload.bytes[5];
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	98 2f       	mov	r25, r24
    351a:	88 27       	eor	r24, r24
    351c:	27 81       	ldd	r18, Z+7	; 0x07
    351e:	82 0f       	add	r24, r18
    3520:	91 1d       	adc	r25, r1
    3522:	15 96       	adiw	r26, 0x05	; 5
    3524:	9c 93       	st	X, r25
    3526:	8e 93       	st	-X, r24
    3528:	14 97       	sbiw	r26, 0x04	; 4
    352a:	80 85       	ldd	r24, Z+8	; 0x08
				desired_data.desired_light=(_downlink_payload.bytes[6] << 8) + _downlink_payload.bytes[7];
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	98 2f       	mov	r25, r24
    3530:	88 27       	eor	r24, r24
    3532:	21 85       	ldd	r18, Z+9	; 0x09
    3534:	82 0f       	add	r24, r18
    3536:	91 1d       	adc	r25, r1
    3538:	17 96       	adiw	r26, 0x07	; 7
    353a:	9c 93       	st	X, r25
    353c:	8e 93       	st	-X, r24
    353e:	16 97       	sbiw	r26, 0x06	; 6
    3540:	04 c0       	rjmp	.+8      	; 0x354a <lora_handler_task+0x134>
    3542:	8c e5       	ldi	r24, 0x5C	; 92
				//printf("values received: %d, %d, %d, %d \n \n",desired_data.desired_temp,desired_data.desired_hum,desired_data.desired_co2,desired_data.desired_light);
			}
			
		}
		else{
			puts("Message not sent \n");
    3544:	92 e0       	ldi	r25, 0x02	; 2
    3546:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <puts>
    354a:	00 e0       	ldi	r16, 0x00	; 0
		}
				
		xSemaphoreGive(hardware_semaphore);
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	a9 01       	movw	r20, r18
    3552:	60 e0       	ldi	r22, 0x00	; 0
    3554:	70 e0       	ldi	r23, 0x00	; 0
    3556:	80 91 ba 13 	lds	r24, 0x13BA	; 0x8013ba <hardware_semaphore>
    355a:	90 91 bb 13 	lds	r25, 0x13BB	; 0x8013bb <hardware_semaphore+0x1>
    355e:	0e 94 75 05 	call	0xaea	; 0xaea <xQueueGenericSend>
    3562:	75 cf       	rjmp	.-278    	; 0x344e <lora_handler_task+0x38>

00003564 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3564:	81 b1       	in	r24, 0x01	; 1
    3566:	81 68       	ori	r24, 0x81	; 129
    3568:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	0e 94 af 23 	call	0x475e	; 0x475e <stdio_initialise>
	
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3570:	85 e0       	ldi	r24, 0x05	; 5
    3572:	0e 94 b6 24 	call	0x496c	; 0x496c <status_leds_initialise>

	downlink_buffer = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3576:	41 e0       	ldi	r20, 0x01	; 1
    3578:	60 e0       	ldi	r22, 0x00	; 0
    357a:	70 e0       	ldi	r23, 0x00	; 0
    357c:	8c e2       	ldi	r24, 0x2C	; 44
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	0e 94 ff 08 	call	0x11fe	; 0x11fe <xStreamBufferGenericCreate>
    3584:	90 93 a9 13 	sts	0x13A9, r25	; 0x8013a9 <downlink_buffer+0x1>
    3588:	80 93 a8 13 	sts	0x13A8, r24	; 0x8013a8 <downlink_buffer>
	lora_driver_initialise(ser_USART1, downlink_buffer);
    358c:	bc 01       	movw	r22, r24
    358e:	81 e0       	ldi	r24, 0x01	; 1
    3590:	8c d2       	rcall	.+1304   	; 0x3aaa <lora_driver_initialise>
	//lora_handler_initialise(3);
	
	entry_data.co2 =0;
    3592:	ea ea       	ldi	r30, 0xAA	; 170
    3594:	f3 e1       	ldi	r31, 0x13	; 19
    3596:	15 82       	std	Z+5, r1	; 0x05
    3598:	14 82       	std	Z+4, r1	; 0x04
	entry_data.humidity=0;
    359a:	13 82       	std	Z+3, r1	; 0x03
    359c:	12 82       	std	Z+2, r1	; 0x02
	entry_data.light=0;
    359e:	17 82       	std	Z+7, r1	; 0x07
    35a0:	16 82       	std	Z+6, r1	; 0x06
	entry_data.temperature=0;
    35a2:	11 82       	std	Z+1, r1	; 0x01
	
	//temp&hum
	int returnCode = hih8120_initialise();
    35a4:	10 82       	st	Z, r1
		else {
		puts("Humidity and Temperature driver initialized");
	}*/
	
	//co2
	mh_z19_initialise(ser_USART3);
    35a6:	df d0       	rcall	.+446    	; 0x3766 <hih8120_initialise>
    35a8:	83 e0       	ldi	r24, 0x03	; 3
	mh_z19_injectCallBack(co2Callback);
    35aa:	91 d4       	rcall	.+2338   	; 0x3ece <mh_z19_initialise>
    35ac:	87 e1       	ldi	r24, 0x17	; 23
    35ae:	91 e0       	ldi	r25, 0x01	; 1
    35b0:	b3 d4       	rcall	.+2406   	; 0x3f18 <mh_z19_injectCallBack>
	//puts("Co2 driver started \n");
	
	//light 
	returnCode = tsl2591_initialise(lightCallback);
    35b2:	81 ea       	ldi	r24, 0xA1	; 161
    35b4:	99 e1       	ldi	r25, 0x19	; 25
    35b6:	0e 94 86 25 	call	0x4b0c	; 0x4b0c <tsl2591_initialise>
	else {
		puts("Light driver initialized");
	}*/

	//enable light sensor
	returnCode = tsl2591_enable();
    35ba:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <tsl2591_enable>
	/*if (returnCode != TSL2591_OK) {
		printf("Failed to enable light sensor %d\n", returnCode);
	}*/
	
	//initialise servo
	rc_servo_initialise();
    35be:	f8 c4       	rjmp	.+2544   	; 0x3fb0 <rc_servo_initialise>
    35c0:	08 95       	ret

000035c2 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    35c2:	d0 df       	rcall	.-96     	; 0x3564 <initialiseSystem>
	
	
	xTaskCreate(lora_handler_task,  "Lora task",  configMINIMAL_STACK_SIZE+200, NULL, 3 , NULL );
    35c4:	e1 2c       	mov	r14, r1
    35c6:	f1 2c       	mov	r15, r1
    35c8:	03 e0       	ldi	r16, 0x03	; 3
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	48 e8       	ldi	r20, 0x88	; 136
    35d0:	51 e0       	ldi	r21, 0x01	; 1
    35d2:	6f e6       	ldi	r22, 0x6F	; 111
    35d4:	72 e0       	ldi	r23, 0x02	; 2
    35d6:	8b e0       	ldi	r24, 0x0B	; 11
    35d8:	9a e1       	ldi	r25, 0x1A	; 26
    35da:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <xTaskCreate>
	xTaskCreate(tempAndHumidityTask, "temp&hum task", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    35de:	01 e0       	ldi	r16, 0x01	; 1
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	40 ec       	ldi	r20, 0xC0	; 192
    35e6:	50 e0       	ldi	r21, 0x00	; 0
    35e8:	69 e7       	ldi	r22, 0x79	; 121
    35ea:	72 e0       	ldi	r23, 0x02	; 2
    35ec:	8a e5       	ldi	r24, 0x5A	; 90
    35ee:	99 e1       	ldi	r25, 0x19	; 25
    35f0:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <xTaskCreate>
	xTaskCreate(co2Task, "co2 task", configMINIMAL_STACK_SIZE, NULL,1,NULL);
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	40 ec       	ldi	r20, 0xC0	; 192
    35fa:	50 e0       	ldi	r21, 0x00	; 0
    35fc:	67 e8       	ldi	r22, 0x87	; 135
    35fe:	72 e0       	ldi	r23, 0x02	; 2
    3600:	88 e0       	ldi	r24, 0x08	; 8
    3602:	91 e0       	ldi	r25, 0x01	; 1
    3604:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <xTaskCreate>
	xTaskCreate(lightTask,"light task",configMINIMAL_STACK_SIZE,NULL,1,NULL);
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	40 ec       	ldi	r20, 0xC0	; 192
    360e:	50 e0       	ldi	r21, 0x00	; 0
    3610:	60 e9       	ldi	r22, 0x90	; 144
    3612:	72 e0       	ldi	r23, 0x02	; 2
    3614:	82 e9       	ldi	r24, 0x92	; 146
    3616:	99 e1       	ldi	r25, 0x19	; 25
    3618:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <xTaskCreate>
	xTaskCreate(humMotorTask, "Humidity motor Task", configMINIMAL_STACK_SIZE + 200, NULL, 2, NULL);
    361c:	02 e0       	ldi	r16, 0x02	; 2
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	48 e8       	ldi	r20, 0x88	; 136
    3624:	51 e0       	ldi	r21, 0x01	; 1
    3626:	6b e9       	ldi	r22, 0x9B	; 155
    3628:	72 e0       	ldi	r23, 0x02	; 2
    362a:	87 e2       	ldi	r24, 0x27	; 39
    362c:	99 e1       	ldi	r25, 0x19	; 25
    362e:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <xTaskCreate>
	
	hardware_semaphore = xSemaphoreCreateMutex();
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	0e 94 19 06 	call	0xc32	; 0xc32 <xQueueCreateMutex>
    3638:	90 93 bb 13 	sts	0x13BB, r25	; 0x8013bb <hardware_semaphore+0x1>
    363c:	80 93 ba 13 	sts	0x13BA, r24	; 0x8013ba <hardware_semaphore>
	if((hardware_semaphore)!=NULL){
    3640:	00 97       	sbiw	r24, 0x00	; 0
    3642:	41 f0       	breq	.+16     	; 0x3654 <main+0x92>
		xSemaphoreGive((hardware_semaphore));
    3644:	00 e0       	ldi	r16, 0x00	; 0
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	a9 01       	movw	r20, r18
    364c:	60 e0       	ldi	r22, 0x00	; 0
    364e:	70 e0       	ldi	r23, 0x00	; 0
    3650:	0e 94 75 05 	call	0xaea	; 0xaea <xQueueGenericSend>
	}
	
	printf("Program Started!!\n");
    3654:	8f ea       	ldi	r24, 0xAF	; 175
    3656:	92 e0       	ldi	r25, 0x02	; 2
    3658:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <puts>
	vTaskStartScheduler(); 
    365c:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <vTaskStartScheduler>
    3660:	ff cf       	rjmp	.-2      	; 0x3660 <main+0x9e>

00003662 <__fixunssfsi>:
    3662:	33 d0       	rcall	.+102    	; 0x36ca <__fp_splitA>
    3664:	88 f0       	brcs	.+34     	; 0x3688 <__fixunssfsi+0x26>
    3666:	9f 57       	subi	r25, 0x7F	; 127
    3668:	90 f0       	brcs	.+36     	; 0x368e <__fixunssfsi+0x2c>
    366a:	b9 2f       	mov	r27, r25
    366c:	99 27       	eor	r25, r25
    366e:	b7 51       	subi	r27, 0x17	; 23
    3670:	a0 f0       	brcs	.+40     	; 0x369a <__fixunssfsi+0x38>
    3672:	d1 f0       	breq	.+52     	; 0x36a8 <__fixunssfsi+0x46>
    3674:	66 0f       	add	r22, r22
    3676:	77 1f       	adc	r23, r23
    3678:	88 1f       	adc	r24, r24
    367a:	99 1f       	adc	r25, r25
    367c:	1a f0       	brmi	.+6      	; 0x3684 <__fixunssfsi+0x22>
    367e:	ba 95       	dec	r27
    3680:	c9 f7       	brne	.-14     	; 0x3674 <__fixunssfsi+0x12>
    3682:	12 c0       	rjmp	.+36     	; 0x36a8 <__fixunssfsi+0x46>
    3684:	b1 30       	cpi	r27, 0x01	; 1
    3686:	81 f0       	breq	.+32     	; 0x36a8 <__fixunssfsi+0x46>
    3688:	3a d0       	rcall	.+116    	; 0x36fe <__fp_zero>
    368a:	b1 e0       	ldi	r27, 0x01	; 1
    368c:	08 95       	ret
    368e:	37 c0       	rjmp	.+110    	; 0x36fe <__fp_zero>
    3690:	67 2f       	mov	r22, r23
    3692:	78 2f       	mov	r23, r24
    3694:	88 27       	eor	r24, r24
    3696:	b8 5f       	subi	r27, 0xF8	; 248
    3698:	39 f0       	breq	.+14     	; 0x36a8 <__fixunssfsi+0x46>
    369a:	b9 3f       	cpi	r27, 0xF9	; 249
    369c:	cc f3       	brlt	.-14     	; 0x3690 <__fixunssfsi+0x2e>
    369e:	86 95       	lsr	r24
    36a0:	77 95       	ror	r23
    36a2:	67 95       	ror	r22
    36a4:	b3 95       	inc	r27
    36a6:	d9 f7       	brne	.-10     	; 0x369e <__fixunssfsi+0x3c>
    36a8:	3e f4       	brtc	.+14     	; 0x36b8 <__fixunssfsi+0x56>
    36aa:	90 95       	com	r25
    36ac:	80 95       	com	r24
    36ae:	70 95       	com	r23
    36b0:	61 95       	neg	r22
    36b2:	7f 4f       	sbci	r23, 0xFF	; 255
    36b4:	8f 4f       	sbci	r24, 0xFF	; 255
    36b6:	9f 4f       	sbci	r25, 0xFF	; 255
    36b8:	08 95       	ret

000036ba <__fp_split3>:
    36ba:	57 fd       	sbrc	r21, 7
    36bc:	90 58       	subi	r25, 0x80	; 128
    36be:	44 0f       	add	r20, r20
    36c0:	55 1f       	adc	r21, r21
    36c2:	59 f0       	breq	.+22     	; 0x36da <__fp_splitA+0x10>
    36c4:	5f 3f       	cpi	r21, 0xFF	; 255
    36c6:	71 f0       	breq	.+28     	; 0x36e4 <__fp_splitA+0x1a>
    36c8:	47 95       	ror	r20

000036ca <__fp_splitA>:
    36ca:	88 0f       	add	r24, r24
    36cc:	97 fb       	bst	r25, 7
    36ce:	99 1f       	adc	r25, r25
    36d0:	61 f0       	breq	.+24     	; 0x36ea <__fp_splitA+0x20>
    36d2:	9f 3f       	cpi	r25, 0xFF	; 255
    36d4:	79 f0       	breq	.+30     	; 0x36f4 <__fp_splitA+0x2a>
    36d6:	87 95       	ror	r24
    36d8:	08 95       	ret
    36da:	12 16       	cp	r1, r18
    36dc:	13 06       	cpc	r1, r19
    36de:	14 06       	cpc	r1, r20
    36e0:	55 1f       	adc	r21, r21
    36e2:	f2 cf       	rjmp	.-28     	; 0x36c8 <__fp_split3+0xe>
    36e4:	46 95       	lsr	r20
    36e6:	f1 df       	rcall	.-30     	; 0x36ca <__fp_splitA>
    36e8:	08 c0       	rjmp	.+16     	; 0x36fa <__fp_splitA+0x30>
    36ea:	16 16       	cp	r1, r22
    36ec:	17 06       	cpc	r1, r23
    36ee:	18 06       	cpc	r1, r24
    36f0:	99 1f       	adc	r25, r25
    36f2:	f1 cf       	rjmp	.-30     	; 0x36d6 <__fp_splitA+0xc>
    36f4:	86 95       	lsr	r24
    36f6:	71 05       	cpc	r23, r1
    36f8:	61 05       	cpc	r22, r1
    36fa:	08 94       	sec
    36fc:	08 95       	ret

000036fe <__fp_zero>:
    36fe:	e8 94       	clt

00003700 <__fp_szero>:
    3700:	bb 27       	eor	r27, r27
    3702:	66 27       	eor	r22, r22
    3704:	77 27       	eor	r23, r23
    3706:	cb 01       	movw	r24, r22
    3708:	97 f9       	bld	r25, 7
    370a:	08 95       	ret

0000370c <_hihTwiCallback>:
    370c:	65 30       	cpi	r22, 0x05	; 5
    370e:	f1 f4       	brne	.+60     	; 0x374c <_hihTwiCallback+0x40>
    3710:	fa 01       	movw	r30, r20
    3712:	80 81       	ld	r24, Z
    3714:	8f 73       	andi	r24, 0x3F	; 63
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	98 2f       	mov	r25, r24
    371a:	88 27       	eor	r24, r24
    371c:	21 81       	ldd	r18, Z+1	; 0x01
    371e:	82 2b       	or	r24, r18
    3720:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3724:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3728:	82 81       	ldd	r24, Z+2	; 0x02
    372a:	f0 e4       	ldi	r31, 0x40	; 64
    372c:	8f 9f       	mul	r24, r31
    372e:	c0 01       	movw	r24, r0
    3730:	11 24       	eor	r1, r1
    3732:	fa 01       	movw	r30, r20
    3734:	23 81       	ldd	r18, Z+3	; 0x03
    3736:	26 95       	lsr	r18
    3738:	26 95       	lsr	r18
    373a:	82 2b       	or	r24, r18
    373c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3740:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	80 93 6d 12 	sts	0x126D, r24	; 0x80126d <_measuringIsReady>
    374a:	08 95       	ret
    374c:	64 30       	cpi	r22, 0x04	; 4
    374e:	51 f0       	breq	.+20     	; 0x3764 <_hihTwiCallback+0x58>
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	90 e4       	ldi	r25, 0x40	; 64
    3754:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3758:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    375c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3760:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3764:	08 95       	ret

00003766 <hih8120_initialise>:
    3766:	0f 93       	push	r16
    3768:	1f 93       	push	r17
    376a:	06 e8       	ldi	r16, 0x86	; 134
    376c:	1b e1       	ldi	r17, 0x1B	; 27
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	34 e2       	ldi	r19, 0x24	; 36
    3772:	44 ef       	ldi	r20, 0xF4	; 244
    3774:	50 e0       	ldi	r21, 0x00	; 0
    3776:	60 e0       	ldi	r22, 0x00	; 0
    3778:	87 e2       	ldi	r24, 0x27	; 39
    377a:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <twiCreate>
    377e:	90 93 6f 12 	sts	0x126F, r25	; 0x80126f <_hih8120Handler+0x1>
    3782:	80 93 6e 12 	sts	0x126E, r24	; 0x80126e <_hih8120Handler>
    3786:	21 e0       	ldi	r18, 0x01	; 1
    3788:	89 2b       	or	r24, r25
    378a:	09 f0       	breq	.+2      	; 0x378e <hih8120_initialise+0x28>
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	82 2f       	mov	r24, r18
    3790:	1f 91       	pop	r17
    3792:	0f 91       	pop	r16
    3794:	08 95       	ret

00003796 <hih8120_wakeup>:
    3796:	80 91 6e 12 	lds	r24, 0x126E	; 0x80126e <_hih8120Handler>
    379a:	90 91 6f 12 	lds	r25, 0x126F	; 0x80126f <_hih8120Handler+0x1>
    379e:	00 97       	sbiw	r24, 0x00	; 0
    37a0:	59 f0       	breq	.+22     	; 0x37b8 <hih8120_wakeup+0x22>
    37a2:	40 e0       	ldi	r20, 0x00	; 0
    37a4:	60 e0       	ldi	r22, 0x00	; 0
    37a6:	70 e0       	ldi	r23, 0x00	; 0
    37a8:	0e 94 03 27 	call	0x4e06	; 0x4e06 <twiTransmit>
    37ac:	84 30       	cpi	r24, 0x04	; 4
    37ae:	31 f4       	brne	.+12     	; 0x37bc <hih8120_wakeup+0x26>
    37b0:	10 92 6d 12 	sts	0x126D, r1	; 0x80126d <_measuringIsReady>
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	08 95       	ret
    37b8:	82 e0       	ldi	r24, 0x02	; 2
    37ba:	08 95       	ret
    37bc:	83 e0       	ldi	r24, 0x03	; 3
    37be:	08 95       	ret

000037c0 <hih8120_measure>:
    37c0:	80 91 6e 12 	lds	r24, 0x126E	; 0x80126e <_hih8120Handler>
    37c4:	90 91 6f 12 	lds	r25, 0x126F	; 0x80126f <_hih8120Handler+0x1>
    37c8:	00 97       	sbiw	r24, 0x00	; 0
    37ca:	39 f0       	breq	.+14     	; 0x37da <hih8120_measure+0x1a>
    37cc:	64 e0       	ldi	r22, 0x04	; 4
    37ce:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <twiReceive>
    37d2:	85 30       	cpi	r24, 0x05	; 5
    37d4:	21 f0       	breq	.+8      	; 0x37de <hih8120_measure+0x1e>
    37d6:	83 e0       	ldi	r24, 0x03	; 3
    37d8:	08 95       	ret
    37da:	82 e0       	ldi	r24, 0x02	; 2
    37dc:	08 95       	ret
    37de:	80 e0       	ldi	r24, 0x00	; 0
    37e0:	08 95       	ret

000037e2 <hih8120_getHumidity>:
    37e2:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    37e6:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	0e 94 34 29 	call	0x5268	; 0x5268 <__floatunsisf>
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	48 ec       	ldi	r20, 0xC8	; 200
    37f8:	52 e4       	ldi	r21, 0x42	; 66
    37fa:	0e 94 9d 29 	call	0x533a	; 0x533a <__mulsf3>
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	38 ef       	ldi	r19, 0xF8	; 248
    3802:	4f e7       	ldi	r20, 0x7F	; 127
    3804:	56 e4       	ldi	r21, 0x46	; 70
    3806:	0c 94 c2 28 	jmp	0x5184	; 0x5184 <__divsf3>
    380a:	08 95       	ret

0000380c <hih8120_getHumidityPercent_x10>:
    380c:	ea df       	rcall	.-44     	; 0x37e2 <hih8120_getHumidity>
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	40 e2       	ldi	r20, 0x20	; 32
    3814:	51 e4       	ldi	r21, 0x41	; 65
    3816:	0e 94 9d 29 	call	0x533a	; 0x533a <__mulsf3>
    381a:	23 df       	rcall	.-442    	; 0x3662 <__fixunssfsi>
    381c:	cb 01       	movw	r24, r22
    381e:	08 95       	ret

00003820 <hih8120_getTemperature>:
    3820:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3824:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3828:	80 e0       	ldi	r24, 0x00	; 0
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	0e 94 34 29 	call	0x5268	; 0x5268 <__floatunsisf>
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	45 e2       	ldi	r20, 0x25	; 37
    3836:	53 e4       	ldi	r21, 0x43	; 67
    3838:	0e 94 9d 29 	call	0x533a	; 0x533a <__mulsf3>
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	38 ef       	ldi	r19, 0xF8	; 248
    3840:	4f e7       	ldi	r20, 0x7F	; 127
    3842:	56 e4       	ldi	r21, 0x46	; 70
    3844:	0e 94 c2 28 	call	0x5184	; 0x5184 <__divsf3>
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	40 e2       	ldi	r20, 0x20	; 32
    384e:	52 e4       	ldi	r21, 0x42	; 66
    3850:	0c 94 5b 28 	jmp	0x50b6	; 0x50b6 <__subsf3>
    3854:	08 95       	ret

00003856 <hih8120_getTemperature_x10>:
    3856:	e4 df       	rcall	.-56     	; 0x3820 <hih8120_getTemperature>
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	40 e2       	ldi	r20, 0x20	; 32
    385e:	51 e4       	ldi	r21, 0x41	; 65
    3860:	0e 94 9d 29 	call	0x533a	; 0x533a <__mulsf3>
    3864:	0e 94 2d 29 	call	0x525a	; 0x525a <__fixsfsi>
    3868:	cb 01       	movw	r24, r22
    386a:	08 95       	ret

0000386c <_serialCallBack>:
    386c:	0f 93       	push	r16
    386e:	1f 93       	push	r17
    3870:	cf 93       	push	r28
    3872:	df 93       	push	r29
    3874:	1f 92       	push	r1
    3876:	1f 92       	push	r1
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
    387c:	8c 01       	movw	r16, r24
    387e:	19 82       	std	Y+1, r1	; 0x01
    3880:	2d c0       	rjmp	.+90     	; 0x38dc <_serialCallBack+0x70>
    3882:	e0 91 a7 12 	lds	r30, 0x12A7	; 0x8012a7 <rec_buf_inp.2878>
    3886:	ec 32       	cpi	r30, 0x2C	; 44
    3888:	50 f4       	brcc	.+20     	; 0x389e <_serialCallBack+0x32>
    388a:	81 e0       	ldi	r24, 0x01	; 1
    388c:	8e 0f       	add	r24, r30
    388e:	80 93 a7 12 	sts	0x12A7, r24	; 0x8012a7 <rec_buf_inp.2878>
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	e7 52       	subi	r30, 0x27	; 39
    3896:	fd 4e       	sbci	r31, 0xED	; 237
    3898:	8a 81       	ldd	r24, Y+2	; 0x02
    389a:	80 83       	st	Z, r24
    389c:	02 c0       	rjmp	.+4      	; 0x38a2 <_serialCallBack+0x36>
    389e:	10 92 a7 12 	sts	0x12A7, r1	; 0x8012a7 <rec_buf_inp.2878>
    38a2:	8a 81       	ldd	r24, Y+2	; 0x02
    38a4:	8a 30       	cpi	r24, 0x0A	; 10
    38a6:	d1 f4       	brne	.+52     	; 0x38dc <_serialCallBack+0x70>
    38a8:	40 91 a7 12 	lds	r20, 0x12A7	; 0x8012a7 <rec_buf_inp.2878>
    38ac:	50 e0       	ldi	r21, 0x00	; 0
    38ae:	fa 01       	movw	r30, r20
    38b0:	e9 52       	subi	r30, 0x29	; 41
    38b2:	fd 4e       	sbci	r31, 0xED	; 237
    38b4:	10 82       	st	Z, r1
    38b6:	41 50       	subi	r20, 0x01	; 1
    38b8:	51 09       	sbc	r21, r1
    38ba:	9e 01       	movw	r18, r28
    38bc:	2f 5f       	subi	r18, 0xFF	; 255
    38be:	3f 4f       	sbci	r19, 0xFF	; 255
    38c0:	69 ed       	ldi	r22, 0xD9	; 217
    38c2:	72 e1       	ldi	r23, 0x12	; 18
    38c4:	80 91 aa 12 	lds	r24, 0x12AA	; 0x8012aa <_serialReplyBufferHandle>
    38c8:	90 91 ab 12 	lds	r25, 0x12AB	; 0x8012ab <_serialReplyBufferHandle+0x1>
    38cc:	0e 94 24 0a 	call	0x1448	; 0x1448 <xStreamBufferSendFromISR>
    38d0:	89 81       	ldd	r24, Y+1	; 0x01
    38d2:	81 11       	cpse	r24, r1
    38d4:	0e 94 5d 03 	call	0x6ba	; 0x6ba <vPortYield>
    38d8:	10 92 a7 12 	sts	0x12A7, r1	; 0x8012a7 <rec_buf_inp.2878>
    38dc:	be 01       	movw	r22, r28
    38de:	6e 5f       	subi	r22, 0xFE	; 254
    38e0:	7f 4f       	sbci	r23, 0xFF	; 255
    38e2:	c8 01       	movw	r24, r16
    38e4:	a6 d4       	rcall	.+2380   	; 0x4232 <serial_getByte>
    38e6:	88 23       	and	r24, r24
    38e8:	61 f2       	breq	.-104    	; 0x3882 <_serialCallBack+0x16>
    38ea:	0f 90       	pop	r0
    38ec:	0f 90       	pop	r0
    38ee:	df 91       	pop	r29
    38f0:	cf 91       	pop	r28
    38f2:	1f 91       	pop	r17
    38f4:	0f 91       	pop	r16
    38f6:	08 95       	ret

000038f8 <_uploadMessage>:
    38f8:	0f 93       	push	r16
    38fa:	1f 93       	push	r17
    38fc:	cf 93       	push	r28
    38fe:	df 93       	push	r29
    3900:	8c 01       	movw	r16, r24
    3902:	eb 01       	movw	r28, r22
    3904:	80 91 aa 12 	lds	r24, 0x12AA	; 0x8012aa <_serialReplyBufferHandle>
    3908:	90 91 ab 12 	lds	r25, 0x12AB	; 0x8012ab <_serialReplyBufferHandle+0x1>
    390c:	0e 94 31 09 	call	0x1262	; 0x1262 <xStreamBufferReset>
    3910:	b8 01       	movw	r22, r16
    3912:	80 e7       	ldi	r24, 0x70	; 112
    3914:	92 e1       	ldi	r25, 0x12	; 18
    3916:	0e 94 b6 2b 	call	0x576c	; 0x576c <strcpy>
    391a:	20 97       	sbiw	r28, 0x00	; 0
    391c:	79 f0       	breq	.+30     	; 0x393c <_uploadMessage+0x44>
    391e:	e0 e7       	ldi	r30, 0x70	; 112
    3920:	f2 e1       	ldi	r31, 0x12	; 18
    3922:	01 90       	ld	r0, Z+
    3924:	00 20       	and	r0, r0
    3926:	e9 f7       	brne	.-6      	; 0x3922 <_uploadMessage+0x2a>
    3928:	31 97       	sbiw	r30, 0x01	; 1
    392a:	80 e2       	ldi	r24, 0x20	; 32
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	91 83       	std	Z+1, r25	; 0x01
    3930:	80 83       	st	Z, r24
    3932:	be 01       	movw	r22, r28
    3934:	80 e7       	ldi	r24, 0x70	; 112
    3936:	92 e1       	ldi	r25, 0x12	; 18
    3938:	0e 94 ab 2b 	call	0x5756	; 0x5756 <strcat>
    393c:	e0 e7       	ldi	r30, 0x70	; 112
    393e:	f2 e1       	ldi	r31, 0x12	; 18
    3940:	df 01       	movw	r26, r30
    3942:	0d 90       	ld	r0, X+
    3944:	00 20       	and	r0, r0
    3946:	e9 f7       	brne	.-6      	; 0x3942 <_uploadMessage+0x4a>
    3948:	11 97       	sbiw	r26, 0x01	; 1
    394a:	8d e0       	ldi	r24, 0x0D	; 13
    394c:	9a e0       	ldi	r25, 0x0A	; 10
    394e:	11 96       	adiw	r26, 0x01	; 1
    3950:	9c 93       	st	X, r25
    3952:	8e 93       	st	-X, r24
    3954:	12 96       	adiw	r26, 0x02	; 2
    3956:	1c 92       	st	X, r1
    3958:	01 90       	ld	r0, Z+
    395a:	00 20       	and	r0, r0
    395c:	e9 f7       	brne	.-6      	; 0x3958 <_uploadMessage+0x60>
    395e:	31 97       	sbiw	r30, 0x01	; 1
    3960:	e0 57       	subi	r30, 0x70	; 112
    3962:	f2 41       	sbci	r31, 0x12	; 18
    3964:	ae 2f       	mov	r26, r30
    3966:	80 e7       	ldi	r24, 0x70	; 112
    3968:	92 e1       	ldi	r25, 0x12	; 18
    396a:	ac 01       	movw	r20, r24
    396c:	6a 2f       	mov	r22, r26
    396e:	80 91 ac 12 	lds	r24, 0x12AC	; 0x8012ac <_rn2483_serial>
    3972:	90 91 ad 12 	lds	r25, 0x12AD	; 0x8012ad <_rn2483_serial+0x1>
    3976:	08 d4       	rcall	.+2064   	; 0x4188 <serial_sendBytes>
    3978:	81 11       	cpse	r24, r1
    397a:	11 c0       	rjmp	.+34     	; 0x399e <_uploadMessage+0xa6>
    397c:	08 e2       	ldi	r16, 0x28	; 40
    397e:	15 e0       	ldi	r17, 0x05	; 5
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	4d e2       	ldi	r20, 0x2D	; 45
    3986:	50 e0       	ldi	r21, 0x00	; 0
    3988:	63 e3       	ldi	r22, 0x33	; 51
    398a:	73 e1       	ldi	r23, 0x13	; 19
    398c:	80 91 aa 12 	lds	r24, 0x12AA	; 0x8012aa <_serialReplyBufferHandle>
    3990:	90 91 ab 12 	lds	r25, 0x12AB	; 0x8012ab <_serialReplyBufferHandle+0x1>
    3994:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <xStreamBufferReceive>
    3998:	83 e3       	ldi	r24, 0x33	; 51
    399a:	93 e1       	ldi	r25, 0x13	; 19
    399c:	02 c0       	rjmp	.+4      	; 0x39a2 <_uploadMessage+0xaa>
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	df 91       	pop	r29
    39a4:	cf 91       	pop	r28
    39a6:	1f 91       	pop	r17
    39a8:	0f 91       	pop	r16
    39aa:	08 95       	ret

000039ac <_reply2ReturnCode>:
    39ac:	2f 92       	push	r2
    39ae:	3f 92       	push	r3
    39b0:	4f 92       	push	r4
    39b2:	5f 92       	push	r5
    39b4:	6f 92       	push	r6
    39b6:	7f 92       	push	r7
    39b8:	8f 92       	push	r8
    39ba:	9f 92       	push	r9
    39bc:	af 92       	push	r10
    39be:	bf 92       	push	r11
    39c0:	cf 92       	push	r12
    39c2:	df 92       	push	r13
    39c4:	ef 92       	push	r14
    39c6:	ff 92       	push	r15
    39c8:	0f 93       	push	r16
    39ca:	1f 93       	push	r17
    39cc:	cf 93       	push	r28
    39ce:	df 93       	push	r29
    39d0:	5c 01       	movw	r10, r24
    39d2:	fc 01       	movw	r30, r24
    39d4:	01 90       	ld	r0, Z+
    39d6:	00 20       	and	r0, r0
    39d8:	e9 f7       	brne	.-6      	; 0x39d4 <_reply2ReturnCode+0x28>
    39da:	31 97       	sbiw	r30, 0x01	; 1
    39dc:	6f 01       	movw	r12, r30
    39de:	c8 1a       	sub	r12, r24
    39e0:	d9 0a       	sbc	r13, r25
    39e2:	5c 2c       	mov	r5, r12
    39e4:	0f 2e       	mov	r0, r31
    39e6:	fa e5       	ldi	r31, 0x5A	; 90
    39e8:	8f 2e       	mov	r8, r31
    39ea:	f5 e0       	ldi	r31, 0x05	; 5
    39ec:	9f 2e       	mov	r9, r31
    39ee:	f0 2d       	mov	r31, r0
    39f0:	e1 2c       	mov	r14, r1
    39f2:	f1 2c       	mov	r15, r1
    39f4:	4c 2c       	mov	r4, r12
    39f6:	37 01       	movw	r6, r14
    39f8:	f4 01       	movw	r30, r8
    39fa:	01 81       	ldd	r16, Z+1	; 0x01
    39fc:	12 81       	ldd	r17, Z+2	; 0x02
    39fe:	e8 01       	movw	r28, r16
    3a00:	09 90       	ld	r0, Y+
    3a02:	00 20       	and	r0, r0
    3a04:	e9 f7       	brne	.-6      	; 0x3a00 <_reply2ReturnCode+0x54>
    3a06:	21 97       	sbiw	r28, 0x01	; 1
    3a08:	c0 1b       	sub	r28, r16
    3a0a:	d1 0b       	sbc	r29, r17
    3a0c:	3c 2e       	mov	r3, r28
    3a0e:	f9 e0       	ldi	r31, 0x09	; 9
    3a10:	cf 16       	cp	r12, r31
    3a12:	d1 04       	cpc	r13, r1
    3a14:	58 f0       	brcs	.+22     	; 0x3a2c <_reply2ReturnCode+0x80>
    3a16:	f4 01       	movw	r30, r8
    3a18:	20 80       	ld	r2, Z
    3a1a:	fe e0       	ldi	r31, 0x0E	; 14
    3a1c:	2f 12       	cpse	r2, r31
    3a1e:	06 c0       	rjmp	.+12     	; 0x3a2c <_reply2ReturnCode+0x80>
    3a20:	b8 01       	movw	r22, r16
    3a22:	c5 01       	movw	r24, r10
    3a24:	0e 94 86 2b 	call	0x570c	; 0x570c <strcasestr>
    3a28:	89 2b       	or	r24, r25
    3a2a:	09 f5       	brne	.+66     	; 0x3a6e <_reply2ReturnCode+0xc2>
    3a2c:	44 2d       	mov	r20, r4
    3a2e:	35 14       	cp	r3, r5
    3a30:	08 f4       	brcc	.+2      	; 0x3a34 <_reply2ReturnCode+0x88>
    3a32:	4c 2f       	mov	r20, r28
    3a34:	50 e0       	ldi	r21, 0x00	; 0
    3a36:	b8 01       	movw	r22, r16
    3a38:	c5 01       	movw	r24, r10
    3a3a:	0e 94 bd 2b 	call	0x577a	; 0x577a <strncasecmp>
    3a3e:	89 2b       	or	r24, r25
    3a40:	49 f4       	brne	.+18     	; 0x3a54 <_reply2ReturnCode+0xa8>
    3a42:	f3 01       	movw	r30, r6
    3a44:	ee 0f       	add	r30, r30
    3a46:	ff 1f       	adc	r31, r31
    3a48:	e6 0d       	add	r30, r6
    3a4a:	f7 1d       	adc	r31, r7
    3a4c:	e6 5a       	subi	r30, 0xA6	; 166
    3a4e:	fa 4f       	sbci	r31, 0xFA	; 250
    3a50:	20 80       	ld	r2, Z
    3a52:	0d c0       	rjmp	.+26     	; 0x3a6e <_reply2ReturnCode+0xc2>
    3a54:	8f ef       	ldi	r24, 0xFF	; 255
    3a56:	e8 1a       	sub	r14, r24
    3a58:	f8 0a       	sbc	r15, r24
    3a5a:	e3 e0       	ldi	r30, 0x03	; 3
    3a5c:	8e 0e       	add	r8, r30
    3a5e:	91 1c       	adc	r9, r1
    3a60:	f1 e1       	ldi	r31, 0x11	; 17
    3a62:	ef 16       	cp	r14, r31
    3a64:	f1 04       	cpc	r15, r1
    3a66:	39 f6       	brne	.-114    	; 0x39f6 <_reply2ReturnCode+0x4a>
    3a68:	68 94       	set
    3a6a:	22 24       	eor	r2, r2
    3a6c:	24 f8       	bld	r2, 4
    3a6e:	82 2d       	mov	r24, r2
    3a70:	df 91       	pop	r29
    3a72:	cf 91       	pop	r28
    3a74:	1f 91       	pop	r17
    3a76:	0f 91       	pop	r16
    3a78:	ff 90       	pop	r15
    3a7a:	ef 90       	pop	r14
    3a7c:	df 90       	pop	r13
    3a7e:	cf 90       	pop	r12
    3a80:	bf 90       	pop	r11
    3a82:	af 90       	pop	r10
    3a84:	9f 90       	pop	r9
    3a86:	8f 90       	pop	r8
    3a88:	7f 90       	pop	r7
    3a8a:	6f 90       	pop	r6
    3a8c:	5f 90       	pop	r5
    3a8e:	4f 90       	pop	r4
    3a90:	3f 90       	pop	r3
    3a92:	2f 90       	pop	r2
    3a94:	08 95       	ret

00003a96 <_uploadMessageRc>:
    3a96:	30 df       	rcall	.-416    	; 0x38f8 <_uploadMessage>
    3a98:	89 cf       	rjmp	.-238    	; 0x39ac <_reply2ReturnCode>
    3a9a:	08 95       	ret

00003a9c <lora_driver_flushBuffers>:
    3a9c:	80 91 aa 12 	lds	r24, 0x12AA	; 0x8012aa <_serialReplyBufferHandle>
    3aa0:	90 91 ab 12 	lds	r25, 0x12AB	; 0x8012ab <_serialReplyBufferHandle+0x1>
    3aa4:	0c 94 31 09 	jmp	0x1262	; 0x1262 <xStreamBufferReset>
    3aa8:	08 95       	ret

00003aaa <lora_driver_initialise>:
    3aaa:	8f 92       	push	r8
    3aac:	9f 92       	push	r9
    3aae:	af 92       	push	r10
    3ab0:	cf 92       	push	r12
    3ab2:	ef 92       	push	r14
    3ab4:	0f 93       	push	r16
    3ab6:	1f 93       	push	r17
    3ab8:	cf 93       	push	r28
    3aba:	c8 2f       	mov	r28, r24
    3abc:	8b 01       	movw	r16, r22
    3abe:	41 e0       	ldi	r20, 0x01	; 1
    3ac0:	60 e0       	ldi	r22, 0x00	; 0
    3ac2:	70 e0       	ldi	r23, 0x00	; 0
    3ac4:	88 ec       	ldi	r24, 0xC8	; 200
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <xStreamBufferGenericCreate>
    3acc:	90 93 ab 12 	sts	0x12AB, r25	; 0x8012ab <_serialReplyBufferHandle+0x1>
    3ad0:	80 93 aa 12 	sts	0x12AA, r24	; 0x8012aa <_serialReplyBufferHandle>
    3ad4:	10 93 a9 12 	sts	0x12A9, r17	; 0x8012a9 <_downlinkMessageBuffer+0x1>
    3ad8:	00 93 a8 12 	sts	0x12A8, r16	; 0x8012a8 <_downlinkMessageBuffer>
    3adc:	0f 2e       	mov	r0, r31
    3ade:	f6 e3       	ldi	r31, 0x36	; 54
    3ae0:	8f 2e       	mov	r8, r31
    3ae2:	fc e1       	ldi	r31, 0x1C	; 28
    3ae4:	9f 2e       	mov	r9, r31
    3ae6:	f0 2d       	mov	r31, r0
    3ae8:	68 94       	set
    3aea:	aa 24       	eor	r10, r10
    3aec:	a6 f8       	bld	r10, 6
    3aee:	68 94       	set
    3af0:	cc 24       	eor	r12, r12
    3af2:	c6 f8       	bld	r12, 6
    3af4:	e1 2c       	mov	r14, r1
    3af6:	00 e0       	ldi	r16, 0x00	; 0
    3af8:	23 e0       	ldi	r18, 0x03	; 3
    3afa:	40 e0       	ldi	r20, 0x00	; 0
    3afc:	51 ee       	ldi	r21, 0xE1	; 225
    3afe:	60 e0       	ldi	r22, 0x00	; 0
    3b00:	70 e0       	ldi	r23, 0x00	; 0
    3b02:	8c 2f       	mov	r24, r28
    3b04:	71 d2       	rcall	.+1250   	; 0x3fe8 <serial_create>
    3b06:	90 93 ad 12 	sts	0x12AD, r25	; 0x8012ad <_rn2483_serial+0x1>
    3b0a:	80 93 ac 12 	sts	0x12AC, r24	; 0x8012ac <_rn2483_serial>
    3b0e:	e7 e0       	ldi	r30, 0x07	; 7
    3b10:	f1 e0       	ldi	r31, 0x01	; 1
    3b12:	80 81       	ld	r24, Z
    3b14:	80 61       	ori	r24, 0x10	; 16
    3b16:	80 83       	st	Z, r24
    3b18:	cf 91       	pop	r28
    3b1a:	1f 91       	pop	r17
    3b1c:	0f 91       	pop	r16
    3b1e:	ef 90       	pop	r14
    3b20:	cf 90       	pop	r12
    3b22:	af 90       	pop	r10
    3b24:	9f 90       	pop	r9
    3b26:	8f 90       	pop	r8
    3b28:	08 95       	ret

00003b2a <lora_driver_resetRn2483>:
    3b2a:	88 23       	and	r24, r24
    3b2c:	31 f0       	breq	.+12     	; 0x3b3a <lora_driver_resetRn2483+0x10>
    3b2e:	e8 e0       	ldi	r30, 0x08	; 8
    3b30:	f1 e0       	ldi	r31, 0x01	; 1
    3b32:	80 81       	ld	r24, Z
    3b34:	8f 7e       	andi	r24, 0xEF	; 239
    3b36:	80 83       	st	Z, r24
    3b38:	08 95       	ret
    3b3a:	e8 e0       	ldi	r30, 0x08	; 8
    3b3c:	f1 e0       	ldi	r31, 0x01	; 1
    3b3e:	80 81       	ld	r24, Z
    3b40:	80 61       	ori	r24, 0x10	; 16
    3b42:	80 83       	st	Z, r24
    3b44:	08 95       	ret

00003b46 <lora_driver_join>:
    3b46:	0f 93       	push	r16
    3b48:	1f 93       	push	r17
    3b4a:	e8 2f       	mov	r30, r24
    3b4c:	f0 e0       	ldi	r31, 0x00	; 0
    3b4e:	ee 0f       	add	r30, r30
    3b50:	ff 1f       	adc	r31, r31
    3b52:	ea 5a       	subi	r30, 0xAA	; 170
    3b54:	fa 4f       	sbci	r31, 0xFA	; 250
    3b56:	60 81       	ld	r22, Z
    3b58:	71 81       	ldd	r23, Z+1	; 0x01
    3b5a:	85 e8       	ldi	r24, 0x85	; 133
    3b5c:	93 e0       	ldi	r25, 0x03	; 3
    3b5e:	9b df       	rcall	.-202    	; 0x3a96 <_uploadMessageRc>
    3b60:	81 11       	cpse	r24, r1
    3b62:	14 c0       	rjmp	.+40     	; 0x3b8c <lora_driver_join+0x46>
    3b64:	08 e2       	ldi	r16, 0x28	; 40
    3b66:	15 e0       	ldi	r17, 0x05	; 5
    3b68:	20 e0       	ldi	r18, 0x00	; 0
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	4d e2       	ldi	r20, 0x2D	; 45
    3b6e:	50 e0       	ldi	r21, 0x00	; 0
    3b70:	63 e3       	ldi	r22, 0x33	; 51
    3b72:	73 e1       	ldi	r23, 0x13	; 19
    3b74:	80 91 aa 12 	lds	r24, 0x12AA	; 0x8012aa <_serialReplyBufferHandle>
    3b78:	90 91 ab 12 	lds	r25, 0x12AB	; 0x8012ab <_serialReplyBufferHandle+0x1>
    3b7c:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <xStreamBufferReceive>
    3b80:	88 23       	and	r24, r24
    3b82:	21 f0       	breq	.+8      	; 0x3b8c <lora_driver_join+0x46>
    3b84:	83 e3       	ldi	r24, 0x33	; 51
    3b86:	93 e1       	ldi	r25, 0x13	; 19
    3b88:	11 df       	rcall	.-478    	; 0x39ac <_reply2ReturnCode>
    3b8a:	03 c0       	rjmp	.+6      	; 0x3b92 <lora_driver_join+0x4c>
    3b8c:	83 e3       	ldi	r24, 0x33	; 51
    3b8e:	93 e1       	ldi	r25, 0x13	; 19
    3b90:	0d df       	rcall	.-486    	; 0x39ac <_reply2ReturnCode>
    3b92:	1f 91       	pop	r17
    3b94:	0f 91       	pop	r16
    3b96:	08 95       	ret

00003b98 <lora_driver_sendUploadMessage>:
    3b98:	0f 93       	push	r16
    3b9a:	1f 93       	push	r17
    3b9c:	cf 93       	push	r28
    3b9e:	df 93       	push	r29
    3ba0:	1f 92       	push	r1
    3ba2:	cd b7       	in	r28, 0x3d	; 61
    3ba4:	de b7       	in	r29, 0x3e	; 62
    3ba6:	db 01       	movw	r26, r22
    3ba8:	11 96       	adiw	r26, 0x01	; 1
    3baa:	9c 91       	ld	r25, X
    3bac:	11 97       	sbiw	r26, 0x01	; 1
    3bae:	95 31       	cpi	r25, 0x15	; 21
    3bb0:	08 f0       	brcs	.+2      	; 0x3bb4 <lora_driver_sendUploadMessage+0x1c>
    3bb2:	b4 c0       	rjmp	.+360    	; 0x3d1c <lora_driver_sendUploadMessage+0x184>
    3bb4:	99 23       	and	r25, r25
    3bb6:	81 f1       	breq	.+96     	; 0x3c18 <lora_driver_sendUploadMessage+0x80>
    3bb8:	60 e0       	ldi	r22, 0x00	; 0
    3bba:	70 e0       	ldi	r23, 0x00	; 0
    3bbc:	27 2f       	mov	r18, r23
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	46 2f       	mov	r20, r22
    3bc2:	50 e0       	ldi	r21, 0x00	; 0
    3bc4:	fd 01       	movw	r30, r26
    3bc6:	e4 0f       	add	r30, r20
    3bc8:	f5 1f       	adc	r31, r21
    3bca:	92 81       	ldd	r25, Z+2	; 0x02
    3bcc:	92 95       	swap	r25
    3bce:	9f 70       	andi	r25, 0x0F	; 15
    3bd0:	9a 30       	cpi	r25, 0x0A	; 10
    3bd2:	10 f0       	brcs	.+4      	; 0x3bd8 <lora_driver_sendUploadMessage+0x40>
    3bd4:	99 5c       	subi	r25, 0xC9	; 201
    3bd6:	01 c0       	rjmp	.+2      	; 0x3bda <lora_driver_sendUploadMessage+0x42>
    3bd8:	90 5d       	subi	r25, 0xD0	; 208
    3bda:	f9 01       	movw	r30, r18
    3bdc:	ec 53       	subi	r30, 0x3C	; 60
    3bde:	fd 4e       	sbci	r31, 0xED	; 237
    3be0:	90 83       	st	Z, r25
    3be2:	2f 5f       	subi	r18, 0xFF	; 255
    3be4:	3f 4f       	sbci	r19, 0xFF	; 255
    3be6:	fd 01       	movw	r30, r26
    3be8:	e4 0f       	add	r30, r20
    3bea:	f5 1f       	adc	r31, r21
    3bec:	92 81       	ldd	r25, Z+2	; 0x02
    3bee:	9f 70       	andi	r25, 0x0F	; 15
    3bf0:	49 2f       	mov	r20, r25
    3bf2:	50 e0       	ldi	r21, 0x00	; 0
    3bf4:	4a 30       	cpi	r20, 0x0A	; 10
    3bf6:	51 05       	cpc	r21, r1
    3bf8:	14 f0       	brlt	.+4      	; 0x3bfe <lora_driver_sendUploadMessage+0x66>
    3bfa:	99 5c       	subi	r25, 0xC9	; 201
    3bfc:	01 c0       	rjmp	.+2      	; 0x3c00 <lora_driver_sendUploadMessage+0x68>
    3bfe:	90 5d       	subi	r25, 0xD0	; 208
    3c00:	f9 01       	movw	r30, r18
    3c02:	ec 53       	subi	r30, 0x3C	; 60
    3c04:	fd 4e       	sbci	r31, 0xED	; 237
    3c06:	90 83       	st	Z, r25
    3c08:	7e 5f       	subi	r23, 0xFE	; 254
    3c0a:	6f 5f       	subi	r22, 0xFF	; 255
    3c0c:	11 96       	adiw	r26, 0x01	; 1
    3c0e:	9c 91       	ld	r25, X
    3c10:	11 97       	sbiw	r26, 0x01	; 1
    3c12:	69 17       	cp	r22, r25
    3c14:	98 f2       	brcs	.-90     	; 0x3bbc <lora_driver_sendUploadMessage+0x24>
    3c16:	01 c0       	rjmp	.+2      	; 0x3c1a <lora_driver_sendUploadMessage+0x82>
    3c18:	70 e0       	ldi	r23, 0x00	; 0
    3c1a:	e7 2f       	mov	r30, r23
    3c1c:	f0 e0       	ldi	r31, 0x00	; 0
    3c1e:	ec 53       	subi	r30, 0x3C	; 60
    3c20:	fd 4e       	sbci	r31, 0xED	; 237
    3c22:	10 82       	st	Z, r1
    3c24:	4c 91       	ld	r20, X
    3c26:	81 11       	cpse	r24, r1
    3c28:	03 c0       	rjmp	.+6      	; 0x3c30 <lora_driver_sendUploadMessage+0x98>
    3c2a:	8e e8       	ldi	r24, 0x8E	; 142
    3c2c:	93 e0       	ldi	r25, 0x03	; 3
    3c2e:	02 c0       	rjmp	.+4      	; 0x3c34 <lora_driver_sendUploadMessage+0x9c>
    3c30:	80 e9       	ldi	r24, 0x90	; 144
    3c32:	93 e0       	ldi	r25, 0x03	; 3
    3c34:	24 ec       	ldi	r18, 0xC4	; 196
    3c36:	32 e1       	ldi	r19, 0x12	; 18
    3c38:	3f 93       	push	r19
    3c3a:	2f 93       	push	r18
    3c3c:	1f 92       	push	r1
    3c3e:	4f 93       	push	r20
    3c40:	9f 93       	push	r25
    3c42:	8f 93       	push	r24
    3c44:	84 e9       	ldi	r24, 0x94	; 148
    3c46:	93 e0       	ldi	r25, 0x03	; 3
    3c48:	9f 93       	push	r25
    3c4a:	8f 93       	push	r24
    3c4c:	86 e0       	ldi	r24, 0x06	; 6
    3c4e:	93 e1       	ldi	r25, 0x13	; 19
    3c50:	9f 93       	push	r25
    3c52:	8f 93       	push	r24
    3c54:	0e 94 05 2c 	call	0x580a	; 0x580a <sprintf>
    3c58:	60 e0       	ldi	r22, 0x00	; 0
    3c5a:	70 e0       	ldi	r23, 0x00	; 0
    3c5c:	86 e0       	ldi	r24, 0x06	; 6
    3c5e:	93 e1       	ldi	r25, 0x13	; 19
    3c60:	1a df       	rcall	.-460    	; 0x3a96 <_uploadMessageRc>
    3c62:	0f b6       	in	r0, 0x3f	; 63
    3c64:	f8 94       	cli
    3c66:	de bf       	out	0x3e, r29	; 62
    3c68:	0f be       	out	0x3f, r0	; 63
    3c6a:	cd bf       	out	0x3d, r28	; 61
    3c6c:	81 11       	cpse	r24, r1
    3c6e:	59 c0       	rjmp	.+178    	; 0x3d22 <lora_driver_sendUploadMessage+0x18a>
    3c70:	08 e2       	ldi	r16, 0x28	; 40
    3c72:	15 e0       	ldi	r17, 0x05	; 5
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	4d e2       	ldi	r20, 0x2D	; 45
    3c7a:	50 e0       	ldi	r21, 0x00	; 0
    3c7c:	63 e3       	ldi	r22, 0x33	; 51
    3c7e:	73 e1       	ldi	r23, 0x13	; 19
    3c80:	80 91 aa 12 	lds	r24, 0x12AA	; 0x8012aa <_serialReplyBufferHandle>
    3c84:	90 91 ab 12 	lds	r25, 0x12AB	; 0x8012ab <_serialReplyBufferHandle+0x1>
    3c88:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <xStreamBufferReceive>
    3c8c:	88 23       	and	r24, r24
    3c8e:	09 f4       	brne	.+2      	; 0x3c92 <lora_driver_sendUploadMessage+0xfa>
    3c90:	47 c0       	rjmp	.+142    	; 0x3d20 <lora_driver_sendUploadMessage+0x188>
    3c92:	83 e3       	ldi	r24, 0x33	; 51
    3c94:	93 e1       	ldi	r25, 0x13	; 19
    3c96:	8a de       	rcall	.-748    	; 0x39ac <_reply2ReturnCode>
    3c98:	8e 30       	cpi	r24, 0x0E	; 14
    3c9a:	09 f0       	breq	.+2      	; 0x3c9e <lora_driver_sendUploadMessage+0x106>
    3c9c:	42 c0       	rjmp	.+132    	; 0x3d22 <lora_driver_sendUploadMessage+0x18a>
    3c9e:	87 e0       	ldi	r24, 0x07	; 7
    3ca0:	89 83       	std	Y+1, r24	; 0x01
    3ca2:	80 91 a8 12 	lds	r24, 0x12A8	; 0x8012a8 <_downlinkMessageBuffer>
    3ca6:	90 91 a9 12 	lds	r25, 0x12A9	; 0x8012a9 <_downlinkMessageBuffer+0x1>
    3caa:	89 2b       	or	r24, r25
    3cac:	a9 f1       	breq	.+106    	; 0x3d18 <lora_driver_sendUploadMessage+0x180>
    3cae:	be 01       	movw	r22, r28
    3cb0:	6f 5f       	subi	r22, 0xFF	; 255
    3cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb4:	83 e3       	ldi	r24, 0x33	; 51
    3cb6:	93 e1       	ldi	r25, 0x13	; 19
    3cb8:	3a d0       	rcall	.+116    	; 0x3d2e <decode_port_no>
    3cba:	80 93 ae 12 	sts	0x12AE, r24	; 0x8012ae <_downlinkPayload>
    3cbe:	e9 81       	ldd	r30, Y+1	; 0x01
    3cc0:	f0 e0       	ldi	r31, 0x00	; 0
    3cc2:	ed 5c       	subi	r30, 0xCD	; 205
    3cc4:	fc 4e       	sbci	r31, 0xEC	; 236
    3cc6:	df 01       	movw	r26, r30
    3cc8:	0d 90       	ld	r0, X+
    3cca:	00 20       	and	r0, r0
    3ccc:	e9 f7       	brne	.-6      	; 0x3cc8 <lora_driver_sendUploadMessage+0x130>
    3cce:	11 97       	sbiw	r26, 0x01	; 1
    3cd0:	ae 1b       	sub	r26, r30
    3cd2:	bf 0b       	sbc	r27, r31
    3cd4:	aa 23       	and	r26, r26
    3cd6:	91 f0       	breq	.+36     	; 0x3cfc <lora_driver_sendUploadMessage+0x164>
    3cd8:	bb 27       	eor	r27, r27
    3cda:	cd 01       	movw	r24, r26
    3cdc:	01 97       	sbiw	r24, 0x01	; 1
    3cde:	9c 01       	movw	r18, r24
    3ce0:	12 f4       	brpl	.+4      	; 0x3ce6 <lora_driver_sendUploadMessage+0x14e>
    3ce2:	2f 5f       	subi	r18, 0xFF	; 255
    3ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce6:	35 95       	asr	r19
    3ce8:	27 95       	ror	r18
    3cea:	20 93 af 12 	sts	0x12AF, r18	; 0x8012af <_downlinkPayload+0x1>
    3cee:	af 01       	movw	r20, r30
    3cf0:	4f 5f       	subi	r20, 0xFF	; 255
    3cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    3cf4:	64 e1       	ldi	r22, 0x14	; 20
    3cf6:	80 eb       	ldi	r24, 0xB0	; 176
    3cf8:	92 e1       	ldi	r25, 0x12	; 18
    3cfa:	45 d0       	rcall	.+138    	; 0x3d86 <decode_hexadecimal_string_bytes>
    3cfc:	01 e0       	ldi	r16, 0x01	; 1
    3cfe:	10 e0       	ldi	r17, 0x00	; 0
    3d00:	20 e0       	ldi	r18, 0x00	; 0
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	46 e1       	ldi	r20, 0x16	; 22
    3d06:	50 e0       	ldi	r21, 0x00	; 0
    3d08:	6e ea       	ldi	r22, 0xAE	; 174
    3d0a:	72 e1       	ldi	r23, 0x12	; 18
    3d0c:	80 91 a8 12 	lds	r24, 0x12A8	; 0x8012a8 <_downlinkMessageBuffer>
    3d10:	90 91 a9 12 	lds	r25, 0x12A9	; 0x8012a9 <_downlinkMessageBuffer+0x1>
    3d14:	0e 94 61 09 	call	0x12c2	; 0x12c2 <xStreamBufferSend>
    3d18:	8e e0       	ldi	r24, 0x0E	; 14
    3d1a:	03 c0       	rjmp	.+6      	; 0x3d22 <lora_driver_sendUploadMessage+0x18a>
    3d1c:	84 e1       	ldi	r24, 0x14	; 20
    3d1e:	01 c0       	rjmp	.+2      	; 0x3d22 <lora_driver_sendUploadMessage+0x18a>
    3d20:	80 e0       	ldi	r24, 0x00	; 0
    3d22:	0f 90       	pop	r0
    3d24:	df 91       	pop	r29
    3d26:	cf 91       	pop	r28
    3d28:	1f 91       	pop	r17
    3d2a:	0f 91       	pop	r16
    3d2c:	08 95       	ret

00003d2e <decode_port_no>:
    3d2e:	dc 01       	movw	r26, r24
    3d30:	00 97       	sbiw	r24, 0x00	; 0
    3d32:	29 f1       	breq	.+74     	; 0x3d7e <decode_port_no+0x50>
    3d34:	fb 01       	movw	r30, r22
    3d36:	20 81       	ld	r18, Z
    3d38:	fc 01       	movw	r30, r24
    3d3a:	01 90       	ld	r0, Z+
    3d3c:	00 20       	and	r0, r0
    3d3e:	e9 f7       	brne	.-6      	; 0x3d3a <decode_port_no+0xc>
    3d40:	31 97       	sbiw	r30, 0x01	; 1
    3d42:	e8 1b       	sub	r30, r24
    3d44:	f9 0b       	sbc	r31, r25
    3d46:	82 2f       	mov	r24, r18
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	e8 17       	cp	r30, r24
    3d4c:	f9 07       	cpc	r31, r25
    3d4e:	c8 f0       	brcs	.+50     	; 0x3d82 <decode_port_no+0x54>
    3d50:	80 e0       	ldi	r24, 0x00	; 0
    3d52:	08 c0       	rjmp	.+16     	; 0x3d64 <decode_port_no+0x36>
    3d54:	88 0f       	add	r24, r24
    3d56:	38 2f       	mov	r19, r24
    3d58:	33 0f       	add	r19, r19
    3d5a:	33 0f       	add	r19, r19
    3d5c:	83 0f       	add	r24, r19
    3d5e:	80 53       	subi	r24, 0x30	; 48
    3d60:	89 0f       	add	r24, r25
    3d62:	2f 5f       	subi	r18, 0xFF	; 255
    3d64:	fd 01       	movw	r30, r26
    3d66:	e2 0f       	add	r30, r18
    3d68:	f1 1d       	adc	r31, r1
    3d6a:	90 81       	ld	r25, Z
    3d6c:	30 ed       	ldi	r19, 0xD0	; 208
    3d6e:	39 0f       	add	r19, r25
    3d70:	3a 30       	cpi	r19, 0x0A	; 10
    3d72:	10 f4       	brcc	.+4      	; 0x3d78 <decode_port_no+0x4a>
    3d74:	91 11       	cpse	r25, r1
    3d76:	ee cf       	rjmp	.-36     	; 0x3d54 <decode_port_no+0x26>
    3d78:	fb 01       	movw	r30, r22
    3d7a:	20 83       	st	Z, r18
    3d7c:	08 95       	ret
    3d7e:	80 e0       	ldi	r24, 0x00	; 0
    3d80:	08 95       	ret
    3d82:	80 e0       	ldi	r24, 0x00	; 0
    3d84:	08 95       	ret

00003d86 <decode_hexadecimal_string_bytes>:
    3d86:	0f 93       	push	r16
    3d88:	1f 93       	push	r17
    3d8a:	cf 93       	push	r28
    3d8c:	df 93       	push	r29
    3d8e:	dc 01       	movw	r26, r24
    3d90:	ea 01       	movw	r28, r20
    3d92:	20 97       	sbiw	r28, 0x00	; 0
    3d94:	e1 f1       	breq	.+120    	; 0x3e0e <decode_hexadecimal_string_bytes+0x88>
    3d96:	fa 01       	movw	r30, r20
    3d98:	01 90       	ld	r0, Z+
    3d9a:	00 20       	and	r0, r0
    3d9c:	e9 f7       	brne	.-6      	; 0x3d98 <decode_hexadecimal_string_bytes+0x12>
    3d9e:	31 97       	sbiw	r30, 0x01	; 1
    3da0:	e4 1b       	sub	r30, r20
    3da2:	f5 0b       	sbc	r31, r21
    3da4:	32 97       	sbiw	r30, 0x02	; 2
    3da6:	10 f5       	brcc	.+68     	; 0x3dec <decode_hexadecimal_string_bytes+0x66>
    3da8:	32 c0       	rjmp	.+100    	; 0x3e0e <decode_hexadecimal_string_bytes+0x88>
    3daa:	8d 01       	movw	r16, r26
    3dac:	04 0f       	add	r16, r20
    3dae:	15 1f       	adc	r17, r21
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	ae 01       	movw	r20, r28
    3db4:	42 0f       	add	r20, r18
    3db6:	53 1f       	adc	r21, r19
    3db8:	fa 01       	movw	r30, r20
    3dba:	90 81       	ld	r25, Z
    3dbc:	91 34       	cpi	r25, 0x41	; 65
    3dbe:	28 f0       	brcs	.+10     	; 0x3dca <decode_hexadecimal_string_bytes+0x44>
    3dc0:	97 53       	subi	r25, 0x37	; 55
    3dc2:	59 2f       	mov	r21, r25
    3dc4:	52 95       	swap	r21
    3dc6:	50 7f       	andi	r21, 0xF0	; 240
    3dc8:	03 c0       	rjmp	.+6      	; 0x3dd0 <decode_hexadecimal_string_bytes+0x4a>
    3dca:	59 2f       	mov	r21, r25
    3dcc:	52 95       	swap	r21
    3dce:	50 7f       	andi	r21, 0xF0	; 240
    3dd0:	2c 0f       	add	r18, r28
    3dd2:	3d 1f       	adc	r19, r29
    3dd4:	f9 01       	movw	r30, r18
    3dd6:	91 81       	ldd	r25, Z+1	; 0x01
    3dd8:	91 34       	cpi	r25, 0x41	; 65
    3dda:	10 f0       	brcs	.+4      	; 0x3de0 <decode_hexadecimal_string_bytes+0x5a>
    3ddc:	97 53       	subi	r25, 0x37	; 55
    3dde:	01 c0       	rjmp	.+2      	; 0x3de2 <decode_hexadecimal_string_bytes+0x5c>
    3de0:	90 53       	subi	r25, 0x30	; 48
    3de2:	95 0f       	add	r25, r21
    3de4:	f8 01       	movw	r30, r16
    3de6:	90 83       	st	Z, r25
    3de8:	8f 5f       	subi	r24, 0xFF	; 255
    3dea:	01 c0       	rjmp	.+2      	; 0x3dee <decode_hexadecimal_string_bytes+0x68>
    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	28 2f       	mov	r18, r24
    3df0:	22 0f       	add	r18, r18
    3df2:	48 2f       	mov	r20, r24
    3df4:	50 e0       	ldi	r21, 0x00	; 0
    3df6:	fe 01       	movw	r30, r28
    3df8:	01 90       	ld	r0, Z+
    3dfa:	00 20       	and	r0, r0
    3dfc:	e9 f7       	brne	.-6      	; 0x3df8 <decode_hexadecimal_string_bytes+0x72>
    3dfe:	31 97       	sbiw	r30, 0x01	; 1
    3e00:	ec 1b       	sub	r30, r28
    3e02:	fd 0b       	sbc	r31, r29
    3e04:	4e 17       	cp	r20, r30
    3e06:	5f 07       	cpc	r21, r31
    3e08:	10 f4       	brcc	.+4      	; 0x3e0e <decode_hexadecimal_string_bytes+0x88>
    3e0a:	86 13       	cpse	r24, r22
    3e0c:	ce cf       	rjmp	.-100    	; 0x3daa <decode_hexadecimal_string_bytes+0x24>
    3e0e:	df 91       	pop	r29
    3e10:	cf 91       	pop	r28
    3e12:	1f 91       	pop	r17
    3e14:	0f 91       	pop	r16
    3e16:	08 95       	ret

00003e18 <_serialCallBack>:
    3e18:	80 91 63 13 	lds	r24, 0x1363	; 0x801363 <crc_sum.1945>
    3e1c:	86 0f       	add	r24, r22
    3e1e:	80 93 63 13 	sts	0x1363, r24	; 0x801363 <crc_sum.1945>
    3e22:	90 91 66 13 	lds	r25, 0x1366	; 0x801366 <_mh_state>
    3e26:	91 30       	cpi	r25, 0x01	; 1
    3e28:	79 f0       	breq	.+30     	; 0x3e48 <_serialCallBack+0x30>
    3e2a:	28 f0       	brcs	.+10     	; 0x3e36 <_serialCallBack+0x1e>
    3e2c:	92 30       	cpi	r25, 0x02	; 2
    3e2e:	a9 f0       	breq	.+42     	; 0x3e5a <_serialCallBack+0x42>
    3e30:	93 30       	cpi	r25, 0x03	; 3
    3e32:	19 f1       	breq	.+70     	; 0x3e7a <_serialCallBack+0x62>
    3e34:	08 95       	ret
    3e36:	6f 3f       	cpi	r22, 0xFF	; 255
    3e38:	09 f0       	breq	.+2      	; 0x3e3c <_serialCallBack+0x24>
    3e3a:	48 c0       	rjmp	.+144    	; 0x3ecc <_serialCallBack+0xb4>
    3e3c:	10 92 63 13 	sts	0x1363, r1	; 0x801363 <crc_sum.1945>
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	80 93 66 13 	sts	0x1366, r24	; 0x801366 <_mh_state>
    3e46:	08 95       	ret
    3e48:	66 38       	cpi	r22, 0x86	; 134
    3e4a:	09 f0       	breq	.+2      	; 0x3e4e <_serialCallBack+0x36>
    3e4c:	3f c0       	rjmp	.+126    	; 0x3ecc <_serialCallBack+0xb4>
    3e4e:	10 92 62 13 	sts	0x1362, r1	; 0x801362 <inDex.1943>
    3e52:	82 e0       	ldi	r24, 0x02	; 2
    3e54:	80 93 66 13 	sts	0x1366, r24	; 0x801366 <_mh_state>
    3e58:	08 95       	ret
    3e5a:	e0 91 62 13 	lds	r30, 0x1362	; 0x801362 <inDex.1943>
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	8e 0f       	add	r24, r30
    3e62:	80 93 62 13 	sts	0x1362, r24	; 0x801362 <inDex.1943>
    3e66:	f0 e0       	ldi	r31, 0x00	; 0
    3e68:	e0 5a       	subi	r30, 0xA0	; 160
    3e6a:	fc 4e       	sbci	r31, 0xEC	; 236
    3e6c:	60 83       	st	Z, r22
    3e6e:	82 30       	cpi	r24, 0x02	; 2
    3e70:	69 f5       	brne	.+90     	; 0x3ecc <_serialCallBack+0xb4>
    3e72:	83 e0       	ldi	r24, 0x03	; 3
    3e74:	80 93 66 13 	sts	0x1366, r24	; 0x801366 <_mh_state>
    3e78:	08 95       	ret
    3e7a:	90 91 62 13 	lds	r25, 0x1362	; 0x801362 <inDex.1943>
    3e7e:	21 e0       	ldi	r18, 0x01	; 1
    3e80:	29 0f       	add	r18, r25
    3e82:	20 93 62 13 	sts	0x1362, r18	; 0x801362 <inDex.1943>
    3e86:	96 30       	cpi	r25, 0x06	; 6
    3e88:	09 f5       	brne	.+66     	; 0x3ecc <_serialCallBack+0xb4>
    3e8a:	81 11       	cpse	r24, r1
    3e8c:	0e c0       	rjmp	.+28     	; 0x3eaa <_serialCallBack+0x92>
    3e8e:	e0 e6       	ldi	r30, 0x60	; 96
    3e90:	f3 e1       	ldi	r31, 0x13	; 19
    3e92:	80 81       	ld	r24, Z
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	98 2f       	mov	r25, r24
    3e98:	88 27       	eor	r24, r24
    3e9a:	21 81       	ldd	r18, Z+1	; 0x01
    3e9c:	82 0f       	add	r24, r18
    3e9e:	91 1d       	adc	r25, r1
    3ea0:	90 93 68 13 	sts	0x1368, r25	; 0x801368 <_ppm+0x1>
    3ea4:	80 93 67 13 	sts	0x1367, r24	; 0x801367 <_ppm>
    3ea8:	04 c0       	rjmp	.+8      	; 0x3eb2 <_serialCallBack+0x9a>
    3eaa:	10 92 68 13 	sts	0x1368, r1	; 0x801368 <_ppm+0x1>
    3eae:	10 92 67 13 	sts	0x1367, r1	; 0x801367 <_ppm>
    3eb2:	10 92 66 13 	sts	0x1366, r1	; 0x801366 <_mh_state>
    3eb6:	e0 91 64 13 	lds	r30, 0x1364	; 0x801364 <_appCallBack>
    3eba:	f0 91 65 13 	lds	r31, 0x1365	; 0x801365 <_appCallBack+0x1>
    3ebe:	30 97       	sbiw	r30, 0x00	; 0
    3ec0:	29 f0       	breq	.+10     	; 0x3ecc <_serialCallBack+0xb4>
    3ec2:	80 91 67 13 	lds	r24, 0x1367	; 0x801367 <_ppm>
    3ec6:	90 91 68 13 	lds	r25, 0x1368	; 0x801368 <_ppm+0x1>
    3eca:	19 95       	eicall
    3ecc:	08 95       	ret

00003ece <mh_z19_initialise>:
    3ece:	8f 92       	push	r8
    3ed0:	9f 92       	push	r9
    3ed2:	af 92       	push	r10
    3ed4:	cf 92       	push	r12
    3ed6:	ef 92       	push	r14
    3ed8:	0f 93       	push	r16
    3eda:	0f 2e       	mov	r0, r31
    3edc:	fc e0       	ldi	r31, 0x0C	; 12
    3ede:	8f 2e       	mov	r8, r31
    3ee0:	ff e1       	ldi	r31, 0x1F	; 31
    3ee2:	9f 2e       	mov	r9, r31
    3ee4:	f0 2d       	mov	r31, r0
    3ee6:	68 94       	set
    3ee8:	aa 24       	eor	r10, r10
    3eea:	a4 f8       	bld	r10, 4
    3eec:	68 94       	set
    3eee:	cc 24       	eor	r12, r12
    3ef0:	c4 f8       	bld	r12, 4
    3ef2:	e1 2c       	mov	r14, r1
    3ef4:	00 e0       	ldi	r16, 0x00	; 0
    3ef6:	23 e0       	ldi	r18, 0x03	; 3
    3ef8:	40 e8       	ldi	r20, 0x80	; 128
    3efa:	55 e2       	ldi	r21, 0x25	; 37
    3efc:	60 e0       	ldi	r22, 0x00	; 0
    3efe:	70 e0       	ldi	r23, 0x00	; 0
    3f00:	73 d0       	rcall	.+230    	; 0x3fe8 <serial_create>
    3f02:	90 93 6a 13 	sts	0x136A, r25	; 0x80136a <_serial+0x1>
    3f06:	80 93 69 13 	sts	0x1369, r24	; 0x801369 <_serial>
    3f0a:	0f 91       	pop	r16
    3f0c:	ef 90       	pop	r14
    3f0e:	cf 90       	pop	r12
    3f10:	af 90       	pop	r10
    3f12:	9f 90       	pop	r9
    3f14:	8f 90       	pop	r8
    3f16:	08 95       	ret

00003f18 <mh_z19_injectCallBack>:
    3f18:	90 93 65 13 	sts	0x1365, r25	; 0x801365 <_appCallBack+0x1>
    3f1c:	80 93 64 13 	sts	0x1364, r24	; 0x801364 <_appCallBack>
    3f20:	08 95       	ret

00003f22 <mh_z19_takeMeassuring>:
    3f22:	cf 93       	push	r28
    3f24:	df 93       	push	r29
    3f26:	cd b7       	in	r28, 0x3d	; 61
    3f28:	de b7       	in	r29, 0x3e	; 62
    3f2a:	29 97       	sbiw	r28, 0x09	; 9
    3f2c:	0f b6       	in	r0, 0x3f	; 63
    3f2e:	f8 94       	cli
    3f30:	de bf       	out	0x3e, r29	; 62
    3f32:	0f be       	out	0x3f, r0	; 63
    3f34:	cd bf       	out	0x3d, r28	; 61
    3f36:	89 e0       	ldi	r24, 0x09	; 9
    3f38:	e2 e2       	ldi	r30, 0x22	; 34
    3f3a:	f2 e0       	ldi	r31, 0x02	; 2
    3f3c:	9e 01       	movw	r18, r28
    3f3e:	2f 5f       	subi	r18, 0xFF	; 255
    3f40:	3f 4f       	sbci	r19, 0xFF	; 255
    3f42:	d9 01       	movw	r26, r18
    3f44:	01 90       	ld	r0, Z+
    3f46:	0d 92       	st	X+, r0
    3f48:	8a 95       	dec	r24
    3f4a:	e1 f7       	brne	.-8      	; 0x3f44 <mh_z19_takeMeassuring+0x22>
    3f4c:	10 92 68 13 	sts	0x1368, r1	; 0x801368 <_ppm+0x1>
    3f50:	10 92 67 13 	sts	0x1367, r1	; 0x801367 <_ppm>
    3f54:	80 91 69 13 	lds	r24, 0x1369	; 0x801369 <_serial>
    3f58:	90 91 6a 13 	lds	r25, 0x136A	; 0x80136a <_serial+0x1>
    3f5c:	00 97       	sbiw	r24, 0x00	; 0
    3f5e:	31 f0       	breq	.+12     	; 0x3f6c <mh_z19_takeMeassuring+0x4a>
    3f60:	42 2f       	mov	r20, r18
    3f62:	53 2f       	mov	r21, r19
    3f64:	69 e0       	ldi	r22, 0x09	; 9
    3f66:	10 d1       	rcall	.+544    	; 0x4188 <serial_sendBytes>
    3f68:	80 e0       	ldi	r24, 0x00	; 0
    3f6a:	01 c0       	rjmp	.+2      	; 0x3f6e <mh_z19_takeMeassuring+0x4c>
    3f6c:	82 e0       	ldi	r24, 0x02	; 2
    3f6e:	29 96       	adiw	r28, 0x09	; 9
    3f70:	0f b6       	in	r0, 0x3f	; 63
    3f72:	f8 94       	cli
    3f74:	de bf       	out	0x3e, r29	; 62
    3f76:	0f be       	out	0x3f, r0	; 63
    3f78:	cd bf       	out	0x3d, r28	; 61
    3f7a:	df 91       	pop	r29
    3f7c:	cf 91       	pop	r28
    3f7e:	08 95       	ret

00003f80 <rc_servo_setPosition>:
    3f80:	65 36       	cpi	r22, 0x65	; 101
    3f82:	0c f0       	brlt	.+2      	; 0x3f86 <rc_servo_setPosition+0x6>
    3f84:	64 e6       	ldi	r22, 0x64	; 100
    3f86:	6c 39       	cpi	r22, 0x9C	; 156
    3f88:	0c f4       	brge	.+2      	; 0x3f8c <rc_servo_setPosition+0xc>
    3f8a:	6c e9       	ldi	r22, 0x9C	; 156
    3f8c:	96 ef       	ldi	r25, 0xF6	; 246
    3f8e:	69 02       	muls	r22, r25
    3f90:	b0 01       	movw	r22, r0
    3f92:	11 24       	eor	r1, r1
    3f94:	68 54       	subi	r22, 0x48	; 72
    3f96:	74 4f       	sbci	r23, 0xF4	; 244
    3f98:	81 11       	cpse	r24, r1
    3f9a:	05 c0       	rjmp	.+10     	; 0x3fa6 <rc_servo_setPosition+0x26>
    3f9c:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    3fa0:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    3fa4:	08 95       	ret
    3fa6:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    3faa:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    3fae:	08 95       	ret

00003fb0 <rc_servo_initialise>:
    3fb0:	ea e0       	ldi	r30, 0x0A	; 10
    3fb2:	f1 e0       	ldi	r31, 0x01	; 1
    3fb4:	80 81       	ld	r24, Z
    3fb6:	88 61       	ori	r24, 0x18	; 24
    3fb8:	80 83       	st	Z, r24
    3fba:	8f e3       	ldi	r24, 0x3F	; 63
    3fbc:	9c e9       	ldi	r25, 0x9C	; 156
    3fbe:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    3fc2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    3fc6:	60 e0       	ldi	r22, 0x00	; 0
    3fc8:	80 e0       	ldi	r24, 0x00	; 0
    3fca:	da df       	rcall	.-76     	; 0x3f80 <rc_servo_setPosition>
    3fcc:	60 e0       	ldi	r22, 0x00	; 0
    3fce:	81 e0       	ldi	r24, 0x01	; 1
    3fd0:	d7 df       	rcall	.-82     	; 0x3f80 <rc_servo_setPosition>
    3fd2:	e0 e2       	ldi	r30, 0x20	; 32
    3fd4:	f1 e0       	ldi	r31, 0x01	; 1
    3fd6:	80 81       	ld	r24, Z
    3fd8:	82 6a       	ori	r24, 0xA2	; 162
    3fda:	80 83       	st	Z, r24
    3fdc:	e1 e2       	ldi	r30, 0x21	; 33
    3fde:	f1 e0       	ldi	r31, 0x01	; 1
    3fe0:	80 81       	ld	r24, Z
    3fe2:	8a 61       	ori	r24, 0x1A	; 26
    3fe4:	80 83       	st	Z, r24
    3fe6:	08 95       	ret

00003fe8 <serial_create>:
    3fe8:	2f 92       	push	r2
    3fea:	3f 92       	push	r3
    3fec:	4f 92       	push	r4
    3fee:	5f 92       	push	r5
    3ff0:	6f 92       	push	r6
    3ff2:	7f 92       	push	r7
    3ff4:	8f 92       	push	r8
    3ff6:	9f 92       	push	r9
    3ff8:	af 92       	push	r10
    3ffa:	cf 92       	push	r12
    3ffc:	ef 92       	push	r14
    3ffe:	ff 92       	push	r15
    4000:	0f 93       	push	r16
    4002:	1f 93       	push	r17
    4004:	cf 93       	push	r28
    4006:	df 93       	push	r29
    4008:	cd b7       	in	r28, 0x3d	; 61
    400a:	de b7       	in	r29, 0x3e	; 62
    400c:	f8 2e       	mov	r15, r24
    400e:	2a 01       	movw	r4, r20
    4010:	3b 01       	movw	r6, r22
    4012:	88 e0       	ldi	r24, 0x08	; 8
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <malloc>
    401a:	8c 01       	movw	r16, r24
    401c:	8f 2d       	mov	r24, r15
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	fc 01       	movw	r30, r24
    4022:	ee 0f       	add	r30, r30
    4024:	ff 1f       	adc	r31, r31
    4026:	e5 59       	subi	r30, 0x95	; 149
    4028:	fc 4e       	sbci	r31, 0xEC	; 236
    402a:	11 83       	std	Z+1, r17	; 0x01
    402c:	00 83       	st	Z, r16
    402e:	01 15       	cp	r16, r1
    4030:	11 05       	cpc	r17, r1
    4032:	09 f4       	brne	.+2      	; 0x4036 <serial_create+0x4e>
    4034:	6c c0       	rjmp	.+216    	; 0x410e <serial_create+0x126>
    4036:	88 0f       	add	r24, r24
    4038:	99 1f       	adc	r25, r25
    403a:	fc 01       	movw	r30, r24
    403c:	e5 5f       	subi	r30, 0xF5	; 245
    403e:	fd 4f       	sbci	r31, 0xFD	; 253
    4040:	80 81       	ld	r24, Z
    4042:	91 81       	ldd	r25, Z+1	; 0x01
    4044:	d8 01       	movw	r26, r16
    4046:	8d 93       	st	X+, r24
    4048:	9c 93       	st	X, r25
    404a:	8c 2d       	mov	r24, r12
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	88 0f       	add	r24, r24
    4050:	99 1f       	adc	r25, r25
    4052:	88 0f       	add	r24, r24
    4054:	99 1f       	adc	r25, r25
    4056:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <malloc>
    405a:	1c 01       	movw	r2, r24
    405c:	86 e0       	ldi	r24, 0x06	; 6
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <malloc>
    4064:	7c 01       	movw	r14, r24
    4066:	4c 2d       	mov	r20, r12
    4068:	b1 01       	movw	r22, r2
    406a:	0e 94 3f 28 	call	0x507e	; 0x507e <fifo_init>
    406e:	f8 01       	movw	r30, r16
    4070:	f5 82       	std	Z+5, r15	; 0x05
    4072:	e4 82       	std	Z+4, r14	; 0x04
    4074:	8a 2d       	mov	r24, r10
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	88 0f       	add	r24, r24
    407a:	99 1f       	adc	r25, r25
    407c:	88 0f       	add	r24, r24
    407e:	99 1f       	adc	r25, r25
    4080:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <malloc>
    4084:	1c 01       	movw	r2, r24
    4086:	86 e0       	ldi	r24, 0x06	; 6
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <malloc>
    408e:	7c 01       	movw	r14, r24
    4090:	4a 2d       	mov	r20, r10
    4092:	b1 01       	movw	r22, r2
    4094:	f4 d7       	rcall	.+4072   	; 0x507e <fifo_init>
    4096:	d8 01       	movw	r26, r16
    4098:	13 96       	adiw	r26, 0x03	; 3
    409a:	fc 92       	st	X, r15
    409c:	ee 92       	st	-X, r14
    409e:	12 97       	sbiw	r26, 0x02	; 2
    40a0:	17 96       	adiw	r26, 0x07	; 7
    40a2:	9c 92       	st	X, r9
    40a4:	8e 92       	st	-X, r8
    40a6:	16 97       	sbiw	r26, 0x06	; 6
    40a8:	ff b6       	in	r15, 0x3f	; 63
    40aa:	f8 94       	cli
    40ac:	ed 91       	ld	r30, X+
    40ae:	fc 91       	ld	r31, X
    40b0:	11 97       	sbiw	r26, 0x01	; 1
    40b2:	36 97       	sbiw	r30, 0x06	; 6
    40b4:	80 81       	ld	r24, Z
    40b6:	82 60       	ori	r24, 0x02	; 2
    40b8:	80 83       	st	Z, r24
    40ba:	8d 90       	ld	r8, X+
    40bc:	9c 90       	ld	r9, X
    40be:	c3 01       	movw	r24, r6
    40c0:	b2 01       	movw	r22, r4
    40c2:	0e 94 34 29 	call	0x5268	; 0x5268 <__floatunsisf>
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	40 e0       	ldi	r20, 0x00	; 0
    40cc:	51 e4       	ldi	r21, 0x41	; 65
    40ce:	0e 94 9d 29 	call	0x533a	; 0x533a <__mulsf3>
    40d2:	9b 01       	movw	r18, r22
    40d4:	ac 01       	movw	r20, r24
    40d6:	60 e0       	ldi	r22, 0x00	; 0
    40d8:	74 e2       	ldi	r23, 0x24	; 36
    40da:	84 e7       	ldi	r24, 0x74	; 116
    40dc:	9b e4       	ldi	r25, 0x4B	; 75
    40de:	0e 94 c2 28 	call	0x5184	; 0x5184 <__divsf3>
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	40 e8       	ldi	r20, 0x80	; 128
    40e8:	5f e3       	ldi	r21, 0x3F	; 63
    40ea:	e5 d7       	rcall	.+4042   	; 0x50b6 <__subsf3>
    40ec:	ba da       	rcall	.-2700   	; 0x3662 <__fixunssfsi>
    40ee:	f4 01       	movw	r30, r8
    40f0:	32 97       	sbiw	r30, 0x02	; 2
    40f2:	60 83       	st	Z, r22
    40f4:	d8 01       	movw	r26, r16
    40f6:	ed 91       	ld	r30, X+
    40f8:	fc 91       	ld	r31, X
    40fa:	11 97       	sbiw	r26, 0x01	; 1
    40fc:	35 97       	sbiw	r30, 0x05	; 5
    40fe:	88 e9       	ldi	r24, 0x98	; 152
    4100:	80 83       	st	Z, r24
    4102:	ed 91       	ld	r30, X+
    4104:	fc 91       	ld	r31, X
    4106:	34 97       	sbiw	r30, 0x04	; 4
    4108:	86 e0       	ldi	r24, 0x06	; 6
    410a:	80 83       	st	Z, r24
    410c:	ff be       	out	0x3f, r15	; 63
    410e:	c8 01       	movw	r24, r16
    4110:	df 91       	pop	r29
    4112:	cf 91       	pop	r28
    4114:	1f 91       	pop	r17
    4116:	0f 91       	pop	r16
    4118:	ff 90       	pop	r15
    411a:	ef 90       	pop	r14
    411c:	cf 90       	pop	r12
    411e:	af 90       	pop	r10
    4120:	9f 90       	pop	r9
    4122:	8f 90       	pop	r8
    4124:	7f 90       	pop	r7
    4126:	6f 90       	pop	r6
    4128:	5f 90       	pop	r5
    412a:	4f 90       	pop	r4
    412c:	3f 90       	pop	r3
    412e:	2f 90       	pop	r2
    4130:	08 95       	ret

00004132 <serial_sendByte>:
    4132:	cf 93       	push	r28
    4134:	df 93       	push	r29
    4136:	dc 01       	movw	r26, r24
    4138:	89 2b       	or	r24, r25
    413a:	01 f1       	breq	.+64     	; 0x417c <serial_sendByte+0x4a>
    413c:	12 96       	adiw	r26, 0x02	; 2
    413e:	ed 91       	ld	r30, X+
    4140:	fc 91       	ld	r31, X
    4142:	13 97       	sbiw	r26, 0x03	; 3
    4144:	93 81       	ldd	r25, Z+3	; 0x03
    4146:	82 81       	ldd	r24, Z+2	; 0x02
    4148:	25 81       	ldd	r18, Z+5	; 0x05
    414a:	98 1b       	sub	r25, r24
    414c:	92 23       	and	r25, r18
    414e:	84 81       	ldd	r24, Z+4	; 0x04
    4150:	98 17       	cp	r25, r24
    4152:	b1 f0       	breq	.+44     	; 0x4180 <serial_sendByte+0x4e>
    4154:	83 81       	ldd	r24, Z+3	; 0x03
    4156:	26 95       	lsr	r18
    4158:	28 23       	and	r18, r24
    415a:	c0 81       	ld	r28, Z
    415c:	d1 81       	ldd	r29, Z+1	; 0x01
    415e:	c2 0f       	add	r28, r18
    4160:	d1 1d       	adc	r29, r1
    4162:	68 83       	st	Y, r22
    4164:	8f 5f       	subi	r24, 0xFF	; 255
    4166:	95 81       	ldd	r25, Z+5	; 0x05
    4168:	89 23       	and	r24, r25
    416a:	83 83       	std	Z+3, r24	; 0x03
    416c:	ed 91       	ld	r30, X+
    416e:	fc 91       	ld	r31, X
    4170:	35 97       	sbiw	r30, 0x05	; 5
    4172:	80 81       	ld	r24, Z
    4174:	80 62       	ori	r24, 0x20	; 32
    4176:	80 83       	st	Z, r24
    4178:	80 e0       	ldi	r24, 0x00	; 0
    417a:	03 c0       	rjmp	.+6      	; 0x4182 <serial_sendByte+0x50>
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	01 c0       	rjmp	.+2      	; 0x4182 <serial_sendByte+0x50>
    4180:	82 e0       	ldi	r24, 0x02	; 2
    4182:	df 91       	pop	r29
    4184:	cf 91       	pop	r28
    4186:	08 95       	ret

00004188 <serial_sendBytes>:
    4188:	ef 92       	push	r14
    418a:	ff 92       	push	r15
    418c:	0f 93       	push	r16
    418e:	1f 93       	push	r17
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
    4194:	7c 01       	movw	r14, r24
    4196:	00 97       	sbiw	r24, 0x00	; 0
    4198:	09 f4       	brne	.+2      	; 0x419c <serial_sendBytes+0x14>
    419a:	41 c0       	rjmp	.+130    	; 0x421e <serial_sendBytes+0x96>
    419c:	dc 01       	movw	r26, r24
    419e:	12 96       	adiw	r26, 0x02	; 2
    41a0:	ed 91       	ld	r30, X+
    41a2:	fc 91       	ld	r31, X
    41a4:	13 97       	sbiw	r26, 0x03	; 3
    41a6:	93 81       	ldd	r25, Z+3	; 0x03
    41a8:	82 81       	ldd	r24, Z+2	; 0x02
    41aa:	98 1b       	sub	r25, r24
    41ac:	85 81       	ldd	r24, Z+5	; 0x05
    41ae:	98 23       	and	r25, r24
    41b0:	84 81       	ldd	r24, Z+4	; 0x04
    41b2:	89 1b       	sub	r24, r25
    41b4:	86 17       	cp	r24, r22
    41b6:	a8 f1       	brcs	.+106    	; 0x4222 <serial_sendBytes+0x9a>
    41b8:	66 23       	and	r22, r22
    41ba:	41 f1       	breq	.+80     	; 0x420c <serial_sendBytes+0x84>
    41bc:	84 2f       	mov	r24, r20
    41be:	95 2f       	mov	r25, r21
    41c0:	dc 01       	movw	r26, r24
    41c2:	61 50       	subi	r22, 0x01	; 1
    41c4:	46 2f       	mov	r20, r22
    41c6:	50 e0       	ldi	r21, 0x00	; 0
    41c8:	4f 5f       	subi	r20, 0xFF	; 255
    41ca:	5f 4f       	sbci	r21, 0xFF	; 255
    41cc:	48 0f       	add	r20, r24
    41ce:	59 1f       	adc	r21, r25
    41d0:	e7 01       	movw	r28, r14
    41d2:	ea 81       	ldd	r30, Y+2	; 0x02
    41d4:	fb 81       	ldd	r31, Y+3	; 0x03
    41d6:	93 81       	ldd	r25, Z+3	; 0x03
    41d8:	82 81       	ldd	r24, Z+2	; 0x02
    41da:	25 81       	ldd	r18, Z+5	; 0x05
    41dc:	98 1b       	sub	r25, r24
    41de:	92 23       	and	r25, r18
    41e0:	84 81       	ldd	r24, Z+4	; 0x04
    41e2:	98 17       	cp	r25, r24
    41e4:	79 f0       	breq	.+30     	; 0x4204 <serial_sendBytes+0x7c>
    41e6:	8c 91       	ld	r24, X
    41e8:	93 81       	ldd	r25, Z+3	; 0x03
    41ea:	26 95       	lsr	r18
    41ec:	29 23       	and	r18, r25
    41ee:	60 81       	ld	r22, Z
    41f0:	71 81       	ldd	r23, Z+1	; 0x01
    41f2:	8b 01       	movw	r16, r22
    41f4:	02 0f       	add	r16, r18
    41f6:	11 1d       	adc	r17, r1
    41f8:	e8 01       	movw	r28, r16
    41fa:	88 83       	st	Y, r24
    41fc:	9f 5f       	subi	r25, 0xFF	; 255
    41fe:	85 81       	ldd	r24, Z+5	; 0x05
    4200:	98 23       	and	r25, r24
    4202:	93 83       	std	Z+3, r25	; 0x03
    4204:	11 96       	adiw	r26, 0x01	; 1
    4206:	a4 17       	cp	r26, r20
    4208:	b5 07       	cpc	r27, r21
    420a:	11 f7       	brne	.-60     	; 0x41d0 <serial_sendBytes+0x48>
    420c:	d7 01       	movw	r26, r14
    420e:	ed 91       	ld	r30, X+
    4210:	fc 91       	ld	r31, X
    4212:	35 97       	sbiw	r30, 0x05	; 5
    4214:	80 81       	ld	r24, Z
    4216:	80 62       	ori	r24, 0x20	; 32
    4218:	80 83       	st	Z, r24
    421a:	80 e0       	ldi	r24, 0x00	; 0
    421c:	03 c0       	rjmp	.+6      	; 0x4224 <serial_sendBytes+0x9c>
    421e:	81 e0       	ldi	r24, 0x01	; 1
    4220:	01 c0       	rjmp	.+2      	; 0x4224 <serial_sendBytes+0x9c>
    4222:	82 e0       	ldi	r24, 0x02	; 2
    4224:	df 91       	pop	r29
    4226:	cf 91       	pop	r28
    4228:	1f 91       	pop	r17
    422a:	0f 91       	pop	r16
    422c:	ff 90       	pop	r15
    422e:	ef 90       	pop	r14
    4230:	08 95       	ret

00004232 <serial_getByte>:
    4232:	00 97       	sbiw	r24, 0x00	; 0
    4234:	d1 f0       	breq	.+52     	; 0x426a <serial_getByte+0x38>
    4236:	dc 01       	movw	r26, r24
    4238:	14 96       	adiw	r26, 0x04	; 4
    423a:	ed 91       	ld	r30, X+
    423c:	fc 91       	ld	r31, X
    423e:	15 97       	sbiw	r26, 0x05	; 5
    4240:	93 81       	ldd	r25, Z+3	; 0x03
    4242:	82 81       	ldd	r24, Z+2	; 0x02
    4244:	98 17       	cp	r25, r24
    4246:	99 f0       	breq	.+38     	; 0x426e <serial_getByte+0x3c>
    4248:	92 81       	ldd	r25, Z+2	; 0x02
    424a:	85 81       	ldd	r24, Z+5	; 0x05
    424c:	86 95       	lsr	r24
    424e:	89 23       	and	r24, r25
    4250:	a0 81       	ld	r26, Z
    4252:	b1 81       	ldd	r27, Z+1	; 0x01
    4254:	a8 0f       	add	r26, r24
    4256:	b1 1d       	adc	r27, r1
    4258:	8c 91       	ld	r24, X
    425a:	db 01       	movw	r26, r22
    425c:	8c 93       	st	X, r24
    425e:	9f 5f       	subi	r25, 0xFF	; 255
    4260:	85 81       	ldd	r24, Z+5	; 0x05
    4262:	98 23       	and	r25, r24
    4264:	92 83       	std	Z+2, r25	; 0x02
    4266:	80 e0       	ldi	r24, 0x00	; 0
    4268:	08 95       	ret
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	08 95       	ret
    426e:	83 e0       	ldi	r24, 0x03	; 3
    4270:	08 95       	ret

00004272 <__vector_25>:
    4272:	1f 92       	push	r1
    4274:	0f 92       	push	r0
    4276:	0f b6       	in	r0, 0x3f	; 63
    4278:	0f 92       	push	r0
    427a:	11 24       	eor	r1, r1
    427c:	0b b6       	in	r0, 0x3b	; 59
    427e:	0f 92       	push	r0
    4280:	2f 93       	push	r18
    4282:	3f 93       	push	r19
    4284:	4f 93       	push	r20
    4286:	5f 93       	push	r21
    4288:	6f 93       	push	r22
    428a:	7f 93       	push	r23
    428c:	8f 93       	push	r24
    428e:	9f 93       	push	r25
    4290:	af 93       	push	r26
    4292:	bf 93       	push	r27
    4294:	cf 93       	push	r28
    4296:	df 93       	push	r29
    4298:	ef 93       	push	r30
    429a:	ff 93       	push	r31
    429c:	a0 91 6b 13 	lds	r26, 0x136B	; 0x80136b <_ser_handle>
    42a0:	b0 91 6c 13 	lds	r27, 0x136C	; 0x80136c <_ser_handle+0x1>
    42a4:	10 97       	sbiw	r26, 0x00	; 0
    42a6:	11 f1       	breq	.+68     	; 0x42ec <__vector_25+0x7a>
    42a8:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    42ac:	14 96       	adiw	r26, 0x04	; 4
    42ae:	ed 91       	ld	r30, X+
    42b0:	fc 91       	ld	r31, X
    42b2:	15 97       	sbiw	r26, 0x05	; 5
    42b4:	93 81       	ldd	r25, Z+3	; 0x03
    42b6:	82 81       	ldd	r24, Z+2	; 0x02
    42b8:	25 81       	ldd	r18, Z+5	; 0x05
    42ba:	98 1b       	sub	r25, r24
    42bc:	92 23       	and	r25, r18
    42be:	84 81       	ldd	r24, Z+4	; 0x04
    42c0:	98 17       	cp	r25, r24
    42c2:	61 f0       	breq	.+24     	; 0x42dc <__vector_25+0x6a>
    42c4:	83 81       	ldd	r24, Z+3	; 0x03
    42c6:	26 95       	lsr	r18
    42c8:	28 23       	and	r18, r24
    42ca:	c0 81       	ld	r28, Z
    42cc:	d1 81       	ldd	r29, Z+1	; 0x01
    42ce:	c2 0f       	add	r28, r18
    42d0:	d1 1d       	adc	r29, r1
    42d2:	68 83       	st	Y, r22
    42d4:	8f 5f       	subi	r24, 0xFF	; 255
    42d6:	95 81       	ldd	r25, Z+5	; 0x05
    42d8:	89 23       	and	r24, r25
    42da:	83 83       	std	Z+3, r24	; 0x03
    42dc:	16 96       	adiw	r26, 0x06	; 6
    42de:	ed 91       	ld	r30, X+
    42e0:	fc 91       	ld	r31, X
    42e2:	17 97       	sbiw	r26, 0x07	; 7
    42e4:	30 97       	sbiw	r30, 0x00	; 0
    42e6:	11 f0       	breq	.+4      	; 0x42ec <__vector_25+0x7a>
    42e8:	cd 01       	movw	r24, r26
    42ea:	19 95       	eicall
    42ec:	ff 91       	pop	r31
    42ee:	ef 91       	pop	r30
    42f0:	df 91       	pop	r29
    42f2:	cf 91       	pop	r28
    42f4:	bf 91       	pop	r27
    42f6:	af 91       	pop	r26
    42f8:	9f 91       	pop	r25
    42fa:	8f 91       	pop	r24
    42fc:	7f 91       	pop	r23
    42fe:	6f 91       	pop	r22
    4300:	5f 91       	pop	r21
    4302:	4f 91       	pop	r20
    4304:	3f 91       	pop	r19
    4306:	2f 91       	pop	r18
    4308:	0f 90       	pop	r0
    430a:	0b be       	out	0x3b, r0	; 59
    430c:	0f 90       	pop	r0
    430e:	0f be       	out	0x3f, r0	; 63
    4310:	0f 90       	pop	r0
    4312:	1f 90       	pop	r1
    4314:	18 95       	reti

00004316 <__vector_26>:
    4316:	1f 92       	push	r1
    4318:	0f 92       	push	r0
    431a:	0f b6       	in	r0, 0x3f	; 63
    431c:	0f 92       	push	r0
    431e:	11 24       	eor	r1, r1
    4320:	0b b6       	in	r0, 0x3b	; 59
    4322:	0f 92       	push	r0
    4324:	2f 93       	push	r18
    4326:	8f 93       	push	r24
    4328:	9f 93       	push	r25
    432a:	af 93       	push	r26
    432c:	bf 93       	push	r27
    432e:	ef 93       	push	r30
    4330:	ff 93       	push	r31
    4332:	e0 91 6b 13 	lds	r30, 0x136B	; 0x80136b <_ser_handle>
    4336:	f0 91 6c 13 	lds	r31, 0x136C	; 0x80136c <_ser_handle+0x1>
    433a:	30 97       	sbiw	r30, 0x00	; 0
    433c:	b9 f0       	breq	.+46     	; 0x436c <__vector_26+0x56>
    433e:	02 80       	ldd	r0, Z+2	; 0x02
    4340:	f3 81       	ldd	r31, Z+3	; 0x03
    4342:	e0 2d       	mov	r30, r0
    4344:	93 81       	ldd	r25, Z+3	; 0x03
    4346:	82 81       	ldd	r24, Z+2	; 0x02
    4348:	98 17       	cp	r25, r24
    434a:	b1 f0       	breq	.+44     	; 0x4378 <__vector_26+0x62>
    434c:	92 81       	ldd	r25, Z+2	; 0x02
    434e:	85 81       	ldd	r24, Z+5	; 0x05
    4350:	28 2f       	mov	r18, r24
    4352:	26 95       	lsr	r18
    4354:	29 23       	and	r18, r25
    4356:	a0 81       	ld	r26, Z
    4358:	b1 81       	ldd	r27, Z+1	; 0x01
    435a:	a2 0f       	add	r26, r18
    435c:	b1 1d       	adc	r27, r1
    435e:	2c 91       	ld	r18, X
    4360:	9f 5f       	subi	r25, 0xFF	; 255
    4362:	89 23       	and	r24, r25
    4364:	82 83       	std	Z+2, r24	; 0x02
    4366:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    436a:	0b c0       	rjmp	.+22     	; 0x4382 <__vector_26+0x6c>
    436c:	e1 ec       	ldi	r30, 0xC1	; 193
    436e:	f0 e0       	ldi	r31, 0x00	; 0
    4370:	80 81       	ld	r24, Z
    4372:	8f 7d       	andi	r24, 0xDF	; 223
    4374:	80 83       	st	Z, r24
    4376:	05 c0       	rjmp	.+10     	; 0x4382 <__vector_26+0x6c>
    4378:	e1 ec       	ldi	r30, 0xC1	; 193
    437a:	f0 e0       	ldi	r31, 0x00	; 0
    437c:	80 81       	ld	r24, Z
    437e:	8f 7d       	andi	r24, 0xDF	; 223
    4380:	80 83       	st	Z, r24
    4382:	ff 91       	pop	r31
    4384:	ef 91       	pop	r30
    4386:	bf 91       	pop	r27
    4388:	af 91       	pop	r26
    438a:	9f 91       	pop	r25
    438c:	8f 91       	pop	r24
    438e:	2f 91       	pop	r18
    4390:	0f 90       	pop	r0
    4392:	0b be       	out	0x3b, r0	; 59
    4394:	0f 90       	pop	r0
    4396:	0f be       	out	0x3f, r0	; 63
    4398:	0f 90       	pop	r0
    439a:	1f 90       	pop	r1
    439c:	18 95       	reti

0000439e <__vector_36>:
    439e:	1f 92       	push	r1
    43a0:	0f 92       	push	r0
    43a2:	0f b6       	in	r0, 0x3f	; 63
    43a4:	0f 92       	push	r0
    43a6:	11 24       	eor	r1, r1
    43a8:	0b b6       	in	r0, 0x3b	; 59
    43aa:	0f 92       	push	r0
    43ac:	2f 93       	push	r18
    43ae:	3f 93       	push	r19
    43b0:	4f 93       	push	r20
    43b2:	5f 93       	push	r21
    43b4:	6f 93       	push	r22
    43b6:	7f 93       	push	r23
    43b8:	8f 93       	push	r24
    43ba:	9f 93       	push	r25
    43bc:	af 93       	push	r26
    43be:	bf 93       	push	r27
    43c0:	cf 93       	push	r28
    43c2:	df 93       	push	r29
    43c4:	ef 93       	push	r30
    43c6:	ff 93       	push	r31
    43c8:	a0 91 6d 13 	lds	r26, 0x136D	; 0x80136d <_ser_handle+0x2>
    43cc:	b0 91 6e 13 	lds	r27, 0x136E	; 0x80136e <_ser_handle+0x3>
    43d0:	10 97       	sbiw	r26, 0x00	; 0
    43d2:	11 f1       	breq	.+68     	; 0x4418 <__vector_36+0x7a>
    43d4:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    43d8:	14 96       	adiw	r26, 0x04	; 4
    43da:	ed 91       	ld	r30, X+
    43dc:	fc 91       	ld	r31, X
    43de:	15 97       	sbiw	r26, 0x05	; 5
    43e0:	93 81       	ldd	r25, Z+3	; 0x03
    43e2:	82 81       	ldd	r24, Z+2	; 0x02
    43e4:	25 81       	ldd	r18, Z+5	; 0x05
    43e6:	98 1b       	sub	r25, r24
    43e8:	92 23       	and	r25, r18
    43ea:	84 81       	ldd	r24, Z+4	; 0x04
    43ec:	98 17       	cp	r25, r24
    43ee:	61 f0       	breq	.+24     	; 0x4408 <__vector_36+0x6a>
    43f0:	83 81       	ldd	r24, Z+3	; 0x03
    43f2:	26 95       	lsr	r18
    43f4:	28 23       	and	r18, r24
    43f6:	c0 81       	ld	r28, Z
    43f8:	d1 81       	ldd	r29, Z+1	; 0x01
    43fa:	c2 0f       	add	r28, r18
    43fc:	d1 1d       	adc	r29, r1
    43fe:	68 83       	st	Y, r22
    4400:	8f 5f       	subi	r24, 0xFF	; 255
    4402:	95 81       	ldd	r25, Z+5	; 0x05
    4404:	89 23       	and	r24, r25
    4406:	83 83       	std	Z+3, r24	; 0x03
    4408:	16 96       	adiw	r26, 0x06	; 6
    440a:	ed 91       	ld	r30, X+
    440c:	fc 91       	ld	r31, X
    440e:	17 97       	sbiw	r26, 0x07	; 7
    4410:	30 97       	sbiw	r30, 0x00	; 0
    4412:	11 f0       	breq	.+4      	; 0x4418 <__vector_36+0x7a>
    4414:	cd 01       	movw	r24, r26
    4416:	19 95       	eicall
    4418:	ff 91       	pop	r31
    441a:	ef 91       	pop	r30
    441c:	df 91       	pop	r29
    441e:	cf 91       	pop	r28
    4420:	bf 91       	pop	r27
    4422:	af 91       	pop	r26
    4424:	9f 91       	pop	r25
    4426:	8f 91       	pop	r24
    4428:	7f 91       	pop	r23
    442a:	6f 91       	pop	r22
    442c:	5f 91       	pop	r21
    442e:	4f 91       	pop	r20
    4430:	3f 91       	pop	r19
    4432:	2f 91       	pop	r18
    4434:	0f 90       	pop	r0
    4436:	0b be       	out	0x3b, r0	; 59
    4438:	0f 90       	pop	r0
    443a:	0f be       	out	0x3f, r0	; 63
    443c:	0f 90       	pop	r0
    443e:	1f 90       	pop	r1
    4440:	18 95       	reti

00004442 <__vector_37>:
    4442:	1f 92       	push	r1
    4444:	0f 92       	push	r0
    4446:	0f b6       	in	r0, 0x3f	; 63
    4448:	0f 92       	push	r0
    444a:	11 24       	eor	r1, r1
    444c:	0b b6       	in	r0, 0x3b	; 59
    444e:	0f 92       	push	r0
    4450:	2f 93       	push	r18
    4452:	8f 93       	push	r24
    4454:	9f 93       	push	r25
    4456:	af 93       	push	r26
    4458:	bf 93       	push	r27
    445a:	ef 93       	push	r30
    445c:	ff 93       	push	r31
    445e:	e0 91 6d 13 	lds	r30, 0x136D	; 0x80136d <_ser_handle+0x2>
    4462:	f0 91 6e 13 	lds	r31, 0x136E	; 0x80136e <_ser_handle+0x3>
    4466:	30 97       	sbiw	r30, 0x00	; 0
    4468:	b9 f0       	breq	.+46     	; 0x4498 <__vector_37+0x56>
    446a:	02 80       	ldd	r0, Z+2	; 0x02
    446c:	f3 81       	ldd	r31, Z+3	; 0x03
    446e:	e0 2d       	mov	r30, r0
    4470:	93 81       	ldd	r25, Z+3	; 0x03
    4472:	82 81       	ldd	r24, Z+2	; 0x02
    4474:	98 17       	cp	r25, r24
    4476:	b1 f0       	breq	.+44     	; 0x44a4 <__vector_37+0x62>
    4478:	92 81       	ldd	r25, Z+2	; 0x02
    447a:	85 81       	ldd	r24, Z+5	; 0x05
    447c:	28 2f       	mov	r18, r24
    447e:	26 95       	lsr	r18
    4480:	29 23       	and	r18, r25
    4482:	a0 81       	ld	r26, Z
    4484:	b1 81       	ldd	r27, Z+1	; 0x01
    4486:	a2 0f       	add	r26, r18
    4488:	b1 1d       	adc	r27, r1
    448a:	2c 91       	ld	r18, X
    448c:	9f 5f       	subi	r25, 0xFF	; 255
    448e:	89 23       	and	r24, r25
    4490:	82 83       	std	Z+2, r24	; 0x02
    4492:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4496:	0b c0       	rjmp	.+22     	; 0x44ae <__vector_37+0x6c>
    4498:	e9 ec       	ldi	r30, 0xC9	; 201
    449a:	f0 e0       	ldi	r31, 0x00	; 0
    449c:	80 81       	ld	r24, Z
    449e:	8f 7d       	andi	r24, 0xDF	; 223
    44a0:	80 83       	st	Z, r24
    44a2:	05 c0       	rjmp	.+10     	; 0x44ae <__vector_37+0x6c>
    44a4:	e9 ec       	ldi	r30, 0xC9	; 201
    44a6:	f0 e0       	ldi	r31, 0x00	; 0
    44a8:	80 81       	ld	r24, Z
    44aa:	8f 7d       	andi	r24, 0xDF	; 223
    44ac:	80 83       	st	Z, r24
    44ae:	ff 91       	pop	r31
    44b0:	ef 91       	pop	r30
    44b2:	bf 91       	pop	r27
    44b4:	af 91       	pop	r26
    44b6:	9f 91       	pop	r25
    44b8:	8f 91       	pop	r24
    44ba:	2f 91       	pop	r18
    44bc:	0f 90       	pop	r0
    44be:	0b be       	out	0x3b, r0	; 59
    44c0:	0f 90       	pop	r0
    44c2:	0f be       	out	0x3f, r0	; 63
    44c4:	0f 90       	pop	r0
    44c6:	1f 90       	pop	r1
    44c8:	18 95       	reti

000044ca <__vector_51>:
    44ca:	1f 92       	push	r1
    44cc:	0f 92       	push	r0
    44ce:	0f b6       	in	r0, 0x3f	; 63
    44d0:	0f 92       	push	r0
    44d2:	11 24       	eor	r1, r1
    44d4:	0b b6       	in	r0, 0x3b	; 59
    44d6:	0f 92       	push	r0
    44d8:	2f 93       	push	r18
    44da:	3f 93       	push	r19
    44dc:	4f 93       	push	r20
    44de:	5f 93       	push	r21
    44e0:	6f 93       	push	r22
    44e2:	7f 93       	push	r23
    44e4:	8f 93       	push	r24
    44e6:	9f 93       	push	r25
    44e8:	af 93       	push	r26
    44ea:	bf 93       	push	r27
    44ec:	cf 93       	push	r28
    44ee:	df 93       	push	r29
    44f0:	ef 93       	push	r30
    44f2:	ff 93       	push	r31
    44f4:	a0 91 6f 13 	lds	r26, 0x136F	; 0x80136f <_ser_handle+0x4>
    44f8:	b0 91 70 13 	lds	r27, 0x1370	; 0x801370 <_ser_handle+0x5>
    44fc:	10 97       	sbiw	r26, 0x00	; 0
    44fe:	11 f1       	breq	.+68     	; 0x4544 <__vector_51+0x7a>
    4500:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4504:	14 96       	adiw	r26, 0x04	; 4
    4506:	ed 91       	ld	r30, X+
    4508:	fc 91       	ld	r31, X
    450a:	15 97       	sbiw	r26, 0x05	; 5
    450c:	93 81       	ldd	r25, Z+3	; 0x03
    450e:	82 81       	ldd	r24, Z+2	; 0x02
    4510:	25 81       	ldd	r18, Z+5	; 0x05
    4512:	98 1b       	sub	r25, r24
    4514:	92 23       	and	r25, r18
    4516:	84 81       	ldd	r24, Z+4	; 0x04
    4518:	98 17       	cp	r25, r24
    451a:	61 f0       	breq	.+24     	; 0x4534 <__vector_51+0x6a>
    451c:	83 81       	ldd	r24, Z+3	; 0x03
    451e:	26 95       	lsr	r18
    4520:	28 23       	and	r18, r24
    4522:	c0 81       	ld	r28, Z
    4524:	d1 81       	ldd	r29, Z+1	; 0x01
    4526:	c2 0f       	add	r28, r18
    4528:	d1 1d       	adc	r29, r1
    452a:	68 83       	st	Y, r22
    452c:	8f 5f       	subi	r24, 0xFF	; 255
    452e:	95 81       	ldd	r25, Z+5	; 0x05
    4530:	89 23       	and	r24, r25
    4532:	83 83       	std	Z+3, r24	; 0x03
    4534:	16 96       	adiw	r26, 0x06	; 6
    4536:	ed 91       	ld	r30, X+
    4538:	fc 91       	ld	r31, X
    453a:	17 97       	sbiw	r26, 0x07	; 7
    453c:	30 97       	sbiw	r30, 0x00	; 0
    453e:	11 f0       	breq	.+4      	; 0x4544 <__vector_51+0x7a>
    4540:	cd 01       	movw	r24, r26
    4542:	19 95       	eicall
    4544:	ff 91       	pop	r31
    4546:	ef 91       	pop	r30
    4548:	df 91       	pop	r29
    454a:	cf 91       	pop	r28
    454c:	bf 91       	pop	r27
    454e:	af 91       	pop	r26
    4550:	9f 91       	pop	r25
    4552:	8f 91       	pop	r24
    4554:	7f 91       	pop	r23
    4556:	6f 91       	pop	r22
    4558:	5f 91       	pop	r21
    455a:	4f 91       	pop	r20
    455c:	3f 91       	pop	r19
    455e:	2f 91       	pop	r18
    4560:	0f 90       	pop	r0
    4562:	0b be       	out	0x3b, r0	; 59
    4564:	0f 90       	pop	r0
    4566:	0f be       	out	0x3f, r0	; 63
    4568:	0f 90       	pop	r0
    456a:	1f 90       	pop	r1
    456c:	18 95       	reti

0000456e <__vector_52>:
    456e:	1f 92       	push	r1
    4570:	0f 92       	push	r0
    4572:	0f b6       	in	r0, 0x3f	; 63
    4574:	0f 92       	push	r0
    4576:	11 24       	eor	r1, r1
    4578:	0b b6       	in	r0, 0x3b	; 59
    457a:	0f 92       	push	r0
    457c:	2f 93       	push	r18
    457e:	8f 93       	push	r24
    4580:	9f 93       	push	r25
    4582:	af 93       	push	r26
    4584:	bf 93       	push	r27
    4586:	ef 93       	push	r30
    4588:	ff 93       	push	r31
    458a:	e0 91 6f 13 	lds	r30, 0x136F	; 0x80136f <_ser_handle+0x4>
    458e:	f0 91 70 13 	lds	r31, 0x1370	; 0x801370 <_ser_handle+0x5>
    4592:	30 97       	sbiw	r30, 0x00	; 0
    4594:	b9 f0       	breq	.+46     	; 0x45c4 <__vector_52+0x56>
    4596:	02 80       	ldd	r0, Z+2	; 0x02
    4598:	f3 81       	ldd	r31, Z+3	; 0x03
    459a:	e0 2d       	mov	r30, r0
    459c:	93 81       	ldd	r25, Z+3	; 0x03
    459e:	82 81       	ldd	r24, Z+2	; 0x02
    45a0:	98 17       	cp	r25, r24
    45a2:	b1 f0       	breq	.+44     	; 0x45d0 <__vector_52+0x62>
    45a4:	92 81       	ldd	r25, Z+2	; 0x02
    45a6:	85 81       	ldd	r24, Z+5	; 0x05
    45a8:	28 2f       	mov	r18, r24
    45aa:	26 95       	lsr	r18
    45ac:	29 23       	and	r18, r25
    45ae:	a0 81       	ld	r26, Z
    45b0:	b1 81       	ldd	r27, Z+1	; 0x01
    45b2:	a2 0f       	add	r26, r18
    45b4:	b1 1d       	adc	r27, r1
    45b6:	2c 91       	ld	r18, X
    45b8:	9f 5f       	subi	r25, 0xFF	; 255
    45ba:	89 23       	and	r24, r25
    45bc:	82 83       	std	Z+2, r24	; 0x02
    45be:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    45c2:	0b c0       	rjmp	.+22     	; 0x45da <__vector_52+0x6c>
    45c4:	e1 ed       	ldi	r30, 0xD1	; 209
    45c6:	f0 e0       	ldi	r31, 0x00	; 0
    45c8:	80 81       	ld	r24, Z
    45ca:	8f 7d       	andi	r24, 0xDF	; 223
    45cc:	80 83       	st	Z, r24
    45ce:	05 c0       	rjmp	.+10     	; 0x45da <__vector_52+0x6c>
    45d0:	e1 ed       	ldi	r30, 0xD1	; 209
    45d2:	f0 e0       	ldi	r31, 0x00	; 0
    45d4:	80 81       	ld	r24, Z
    45d6:	8f 7d       	andi	r24, 0xDF	; 223
    45d8:	80 83       	st	Z, r24
    45da:	ff 91       	pop	r31
    45dc:	ef 91       	pop	r30
    45de:	bf 91       	pop	r27
    45e0:	af 91       	pop	r26
    45e2:	9f 91       	pop	r25
    45e4:	8f 91       	pop	r24
    45e6:	2f 91       	pop	r18
    45e8:	0f 90       	pop	r0
    45ea:	0b be       	out	0x3b, r0	; 59
    45ec:	0f 90       	pop	r0
    45ee:	0f be       	out	0x3f, r0	; 63
    45f0:	0f 90       	pop	r0
    45f2:	1f 90       	pop	r1
    45f4:	18 95       	reti

000045f6 <__vector_54>:
    45f6:	1f 92       	push	r1
    45f8:	0f 92       	push	r0
    45fa:	0f b6       	in	r0, 0x3f	; 63
    45fc:	0f 92       	push	r0
    45fe:	11 24       	eor	r1, r1
    4600:	0b b6       	in	r0, 0x3b	; 59
    4602:	0f 92       	push	r0
    4604:	2f 93       	push	r18
    4606:	3f 93       	push	r19
    4608:	4f 93       	push	r20
    460a:	5f 93       	push	r21
    460c:	6f 93       	push	r22
    460e:	7f 93       	push	r23
    4610:	8f 93       	push	r24
    4612:	9f 93       	push	r25
    4614:	af 93       	push	r26
    4616:	bf 93       	push	r27
    4618:	cf 93       	push	r28
    461a:	df 93       	push	r29
    461c:	ef 93       	push	r30
    461e:	ff 93       	push	r31
    4620:	a0 91 71 13 	lds	r26, 0x1371	; 0x801371 <_ser_handle+0x6>
    4624:	b0 91 72 13 	lds	r27, 0x1372	; 0x801372 <_ser_handle+0x7>
    4628:	10 97       	sbiw	r26, 0x00	; 0
    462a:	11 f1       	breq	.+68     	; 0x4670 <__vector_54+0x7a>
    462c:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4630:	14 96       	adiw	r26, 0x04	; 4
    4632:	ed 91       	ld	r30, X+
    4634:	fc 91       	ld	r31, X
    4636:	15 97       	sbiw	r26, 0x05	; 5
    4638:	93 81       	ldd	r25, Z+3	; 0x03
    463a:	82 81       	ldd	r24, Z+2	; 0x02
    463c:	25 81       	ldd	r18, Z+5	; 0x05
    463e:	98 1b       	sub	r25, r24
    4640:	92 23       	and	r25, r18
    4642:	84 81       	ldd	r24, Z+4	; 0x04
    4644:	98 17       	cp	r25, r24
    4646:	61 f0       	breq	.+24     	; 0x4660 <__vector_54+0x6a>
    4648:	83 81       	ldd	r24, Z+3	; 0x03
    464a:	26 95       	lsr	r18
    464c:	28 23       	and	r18, r24
    464e:	c0 81       	ld	r28, Z
    4650:	d1 81       	ldd	r29, Z+1	; 0x01
    4652:	c2 0f       	add	r28, r18
    4654:	d1 1d       	adc	r29, r1
    4656:	68 83       	st	Y, r22
    4658:	8f 5f       	subi	r24, 0xFF	; 255
    465a:	95 81       	ldd	r25, Z+5	; 0x05
    465c:	89 23       	and	r24, r25
    465e:	83 83       	std	Z+3, r24	; 0x03
    4660:	16 96       	adiw	r26, 0x06	; 6
    4662:	ed 91       	ld	r30, X+
    4664:	fc 91       	ld	r31, X
    4666:	17 97       	sbiw	r26, 0x07	; 7
    4668:	30 97       	sbiw	r30, 0x00	; 0
    466a:	11 f0       	breq	.+4      	; 0x4670 <__vector_54+0x7a>
    466c:	cd 01       	movw	r24, r26
    466e:	19 95       	eicall
    4670:	ff 91       	pop	r31
    4672:	ef 91       	pop	r30
    4674:	df 91       	pop	r29
    4676:	cf 91       	pop	r28
    4678:	bf 91       	pop	r27
    467a:	af 91       	pop	r26
    467c:	9f 91       	pop	r25
    467e:	8f 91       	pop	r24
    4680:	7f 91       	pop	r23
    4682:	6f 91       	pop	r22
    4684:	5f 91       	pop	r21
    4686:	4f 91       	pop	r20
    4688:	3f 91       	pop	r19
    468a:	2f 91       	pop	r18
    468c:	0f 90       	pop	r0
    468e:	0b be       	out	0x3b, r0	; 59
    4690:	0f 90       	pop	r0
    4692:	0f be       	out	0x3f, r0	; 63
    4694:	0f 90       	pop	r0
    4696:	1f 90       	pop	r1
    4698:	18 95       	reti

0000469a <__vector_55>:
    469a:	1f 92       	push	r1
    469c:	0f 92       	push	r0
    469e:	0f b6       	in	r0, 0x3f	; 63
    46a0:	0f 92       	push	r0
    46a2:	11 24       	eor	r1, r1
    46a4:	0b b6       	in	r0, 0x3b	; 59
    46a6:	0f 92       	push	r0
    46a8:	2f 93       	push	r18
    46aa:	8f 93       	push	r24
    46ac:	9f 93       	push	r25
    46ae:	af 93       	push	r26
    46b0:	bf 93       	push	r27
    46b2:	ef 93       	push	r30
    46b4:	ff 93       	push	r31
    46b6:	e0 91 71 13 	lds	r30, 0x1371	; 0x801371 <_ser_handle+0x6>
    46ba:	f0 91 72 13 	lds	r31, 0x1372	; 0x801372 <_ser_handle+0x7>
    46be:	30 97       	sbiw	r30, 0x00	; 0
    46c0:	b9 f0       	breq	.+46     	; 0x46f0 <__vector_55+0x56>
    46c2:	02 80       	ldd	r0, Z+2	; 0x02
    46c4:	f3 81       	ldd	r31, Z+3	; 0x03
    46c6:	e0 2d       	mov	r30, r0
    46c8:	93 81       	ldd	r25, Z+3	; 0x03
    46ca:	82 81       	ldd	r24, Z+2	; 0x02
    46cc:	98 17       	cp	r25, r24
    46ce:	b1 f0       	breq	.+44     	; 0x46fc <__vector_55+0x62>
    46d0:	92 81       	ldd	r25, Z+2	; 0x02
    46d2:	85 81       	ldd	r24, Z+5	; 0x05
    46d4:	28 2f       	mov	r18, r24
    46d6:	26 95       	lsr	r18
    46d8:	29 23       	and	r18, r25
    46da:	a0 81       	ld	r26, Z
    46dc:	b1 81       	ldd	r27, Z+1	; 0x01
    46de:	a2 0f       	add	r26, r18
    46e0:	b1 1d       	adc	r27, r1
    46e2:	2c 91       	ld	r18, X
    46e4:	9f 5f       	subi	r25, 0xFF	; 255
    46e6:	89 23       	and	r24, r25
    46e8:	82 83       	std	Z+2, r24	; 0x02
    46ea:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    46ee:	0b c0       	rjmp	.+22     	; 0x4706 <__vector_55+0x6c>
    46f0:	e1 e3       	ldi	r30, 0x31	; 49
    46f2:	f1 e0       	ldi	r31, 0x01	; 1
    46f4:	80 81       	ld	r24, Z
    46f6:	8f 7d       	andi	r24, 0xDF	; 223
    46f8:	80 83       	st	Z, r24
    46fa:	05 c0       	rjmp	.+10     	; 0x4706 <__vector_55+0x6c>
    46fc:	e1 e3       	ldi	r30, 0x31	; 49
    46fe:	f1 e0       	ldi	r31, 0x01	; 1
    4700:	80 81       	ld	r24, Z
    4702:	8f 7d       	andi	r24, 0xDF	; 223
    4704:	80 83       	st	Z, r24
    4706:	ff 91       	pop	r31
    4708:	ef 91       	pop	r30
    470a:	bf 91       	pop	r27
    470c:	af 91       	pop	r26
    470e:	9f 91       	pop	r25
    4710:	8f 91       	pop	r24
    4712:	2f 91       	pop	r18
    4714:	0f 90       	pop	r0
    4716:	0b be       	out	0x3b, r0	; 59
    4718:	0f 90       	pop	r0
    471a:	0f be       	out	0x3f, r0	; 63
    471c:	0f 90       	pop	r0
    471e:	1f 90       	pop	r1
    4720:	18 95       	reti

00004722 <usart_getchar>:
    4722:	cf 93       	push	r28
    4724:	df 93       	push	r29
    4726:	1f 92       	push	r1
    4728:	cd b7       	in	r28, 0x3d	; 61
    472a:	de b7       	in	r29, 0x3e	; 62
    472c:	be 01       	movw	r22, r28
    472e:	6f 5f       	subi	r22, 0xFF	; 255
    4730:	7f 4f       	sbci	r23, 0xFF	; 255
    4732:	80 91 73 13 	lds	r24, 0x1373	; 0x801373 <_com_serial_instance>
    4736:	90 91 74 13 	lds	r25, 0x1374	; 0x801374 <_com_serial_instance+0x1>
    473a:	7b dd       	rcall	.-1290   	; 0x4232 <serial_getByte>
    473c:	81 11       	cpse	r24, r1
    473e:	f6 cf       	rjmp	.-20     	; 0x472c <usart_getchar+0xa>
    4740:	89 81       	ldd	r24, Y+1	; 0x01
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	0f 90       	pop	r0
    4746:	df 91       	pop	r29
    4748:	cf 91       	pop	r28
    474a:	08 95       	ret

0000474c <usart_putchar>:
    474c:	68 2f       	mov	r22, r24
    474e:	80 91 73 13 	lds	r24, 0x1373	; 0x801373 <_com_serial_instance>
    4752:	90 91 74 13 	lds	r25, 0x1374	; 0x801374 <_com_serial_instance+0x1>
    4756:	ed dc       	rcall	.-1574   	; 0x4132 <serial_sendByte>
    4758:	80 e0       	ldi	r24, 0x00	; 0
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	08 95       	ret

0000475e <stdio_initialise>:
    475e:	8f 92       	push	r8
    4760:	9f 92       	push	r9
    4762:	af 92       	push	r10
    4764:	cf 92       	push	r12
    4766:	ef 92       	push	r14
    4768:	0f 93       	push	r16
    476a:	81 2c       	mov	r8, r1
    476c:	91 2c       	mov	r9, r1
    476e:	68 94       	set
    4770:	aa 24       	eor	r10, r10
    4772:	a7 f8       	bld	r10, 7
    4774:	68 94       	set
    4776:	cc 24       	eor	r12, r12
    4778:	c7 f8       	bld	r12, 7
    477a:	e1 2c       	mov	r14, r1
    477c:	00 e0       	ldi	r16, 0x00	; 0
    477e:	23 e0       	ldi	r18, 0x03	; 3
    4780:	40 e0       	ldi	r20, 0x00	; 0
    4782:	51 ee       	ldi	r21, 0xE1	; 225
    4784:	60 e0       	ldi	r22, 0x00	; 0
    4786:	70 e0       	ldi	r23, 0x00	; 0
    4788:	2f dc       	rcall	.-1954   	; 0x3fe8 <serial_create>
    478a:	90 93 74 13 	sts	0x1374, r25	; 0x801374 <_com_serial_instance+0x1>
    478e:	80 93 73 13 	sts	0x1373, r24	; 0x801373 <_com_serial_instance>
    4792:	e0 ec       	ldi	r30, 0xC0	; 192
    4794:	f3 e1       	ldi	r31, 0x13	; 19
    4796:	83 e1       	ldi	r24, 0x13	; 19
    4798:	92 e0       	ldi	r25, 0x02	; 2
    479a:	91 83       	std	Z+1, r25	; 0x01
    479c:	80 83       	st	Z, r24
    479e:	93 83       	std	Z+3, r25	; 0x03
    47a0:	82 83       	std	Z+2, r24	; 0x02
    47a2:	0f 91       	pop	r16
    47a4:	ef 90       	pop	r14
    47a6:	cf 90       	pop	r12
    47a8:	af 90       	pop	r10
    47aa:	9f 90       	pop	r9
    47ac:	8f 90       	pop	r8
    47ae:	08 95       	ret

000047b0 <_turn_off>:
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	fc 01       	movw	r30, r24
    47b4:	ee 0f       	add	r30, r30
    47b6:	ff 1f       	adc	r31, r31
    47b8:	e8 0f       	add	r30, r24
    47ba:	f9 1f       	adc	r31, r25
    47bc:	ee 0f       	add	r30, r30
    47be:	ff 1f       	adc	r31, r31
    47c0:	eb 58       	subi	r30, 0x8B	; 139
    47c2:	fc 4e       	sbci	r31, 0xEC	; 236
    47c4:	23 81       	ldd	r18, Z+3	; 0x03
    47c6:	21 11       	cpse	r18, r1
    47c8:	1f c0       	rjmp	.+62     	; 0x4808 <_turn_off+0x58>
    47ca:	9c 01       	movw	r18, r24
    47cc:	22 0f       	add	r18, r18
    47ce:	33 1f       	adc	r19, r19
    47d0:	f9 01       	movw	r30, r18
    47d2:	e8 0f       	add	r30, r24
    47d4:	f9 1f       	adc	r31, r25
    47d6:	ee 0f       	add	r30, r30
    47d8:	ff 1f       	adc	r31, r31
    47da:	eb 58       	subi	r30, 0x8B	; 139
    47dc:	fc 4e       	sbci	r31, 0xEC	; 236
    47de:	a0 81       	ld	r26, Z
    47e0:	b1 81       	ldd	r27, Z+1	; 0x01
    47e2:	4c 91       	ld	r20, X
    47e4:	f9 01       	movw	r30, r18
    47e6:	e8 0f       	add	r30, r24
    47e8:	f9 1f       	adc	r31, r25
    47ea:	ee 0f       	add	r30, r30
    47ec:	ff 1f       	adc	r31, r31
    47ee:	eb 58       	subi	r30, 0x8B	; 139
    47f0:	fc 4e       	sbci	r31, 0xEC	; 236
    47f2:	81 e0       	ldi	r24, 0x01	; 1
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	02 80       	ldd	r0, Z+2	; 0x02
    47f8:	02 c0       	rjmp	.+4      	; 0x47fe <_turn_off+0x4e>
    47fa:	88 0f       	add	r24, r24
    47fc:	99 1f       	adc	r25, r25
    47fe:	0a 94       	dec	r0
    4800:	e2 f7       	brpl	.-8      	; 0x47fa <_turn_off+0x4a>
    4802:	84 2b       	or	r24, r20
    4804:	8c 93       	st	X, r24
    4806:	08 95       	ret
    4808:	fc 01       	movw	r30, r24
    480a:	ee 0f       	add	r30, r30
    480c:	ff 1f       	adc	r31, r31
    480e:	df 01       	movw	r26, r30
    4810:	a8 0f       	add	r26, r24
    4812:	b9 1f       	adc	r27, r25
    4814:	aa 0f       	add	r26, r26
    4816:	bb 1f       	adc	r27, r27
    4818:	ab 58       	subi	r26, 0x8B	; 139
    481a:	bc 4e       	sbci	r27, 0xEC	; 236
    481c:	0d 90       	ld	r0, X+
    481e:	bc 91       	ld	r27, X
    4820:	a0 2d       	mov	r26, r0
    4822:	2c 91       	ld	r18, X
    4824:	e8 0f       	add	r30, r24
    4826:	f9 1f       	adc	r31, r25
    4828:	ee 0f       	add	r30, r30
    482a:	ff 1f       	adc	r31, r31
    482c:	eb 58       	subi	r30, 0x8B	; 139
    482e:	fc 4e       	sbci	r31, 0xEC	; 236
    4830:	81 e0       	ldi	r24, 0x01	; 1
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	02 80       	ldd	r0, Z+2	; 0x02
    4836:	02 c0       	rjmp	.+4      	; 0x483c <_turn_off+0x8c>
    4838:	88 0f       	add	r24, r24
    483a:	99 1f       	adc	r25, r25
    483c:	0a 94       	dec	r0
    483e:	e2 f7       	brpl	.-8      	; 0x4838 <_turn_off+0x88>
    4840:	80 95       	com	r24
    4842:	82 23       	and	r24, r18
    4844:	8c 93       	st	X, r24
    4846:	08 95       	ret

00004848 <_turn_on>:
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	fc 01       	movw	r30, r24
    484c:	ee 0f       	add	r30, r30
    484e:	ff 1f       	adc	r31, r31
    4850:	e8 0f       	add	r30, r24
    4852:	f9 1f       	adc	r31, r25
    4854:	ee 0f       	add	r30, r30
    4856:	ff 1f       	adc	r31, r31
    4858:	eb 58       	subi	r30, 0x8B	; 139
    485a:	fc 4e       	sbci	r31, 0xEC	; 236
    485c:	23 81       	ldd	r18, Z+3	; 0x03
    485e:	21 11       	cpse	r18, r1
    4860:	20 c0       	rjmp	.+64     	; 0x48a2 <_turn_on+0x5a>
    4862:	9c 01       	movw	r18, r24
    4864:	22 0f       	add	r18, r18
    4866:	33 1f       	adc	r19, r19
    4868:	f9 01       	movw	r30, r18
    486a:	e8 0f       	add	r30, r24
    486c:	f9 1f       	adc	r31, r25
    486e:	ee 0f       	add	r30, r30
    4870:	ff 1f       	adc	r31, r31
    4872:	eb 58       	subi	r30, 0x8B	; 139
    4874:	fc 4e       	sbci	r31, 0xEC	; 236
    4876:	a0 81       	ld	r26, Z
    4878:	b1 81       	ldd	r27, Z+1	; 0x01
    487a:	4c 91       	ld	r20, X
    487c:	f9 01       	movw	r30, r18
    487e:	e8 0f       	add	r30, r24
    4880:	f9 1f       	adc	r31, r25
    4882:	ee 0f       	add	r30, r30
    4884:	ff 1f       	adc	r31, r31
    4886:	eb 58       	subi	r30, 0x8B	; 139
    4888:	fc 4e       	sbci	r31, 0xEC	; 236
    488a:	81 e0       	ldi	r24, 0x01	; 1
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	02 80       	ldd	r0, Z+2	; 0x02
    4890:	02 c0       	rjmp	.+4      	; 0x4896 <_turn_on+0x4e>
    4892:	88 0f       	add	r24, r24
    4894:	99 1f       	adc	r25, r25
    4896:	0a 94       	dec	r0
    4898:	e2 f7       	brpl	.-8      	; 0x4892 <_turn_on+0x4a>
    489a:	80 95       	com	r24
    489c:	84 23       	and	r24, r20
    489e:	8c 93       	st	X, r24
    48a0:	08 95       	ret
    48a2:	fc 01       	movw	r30, r24
    48a4:	ee 0f       	add	r30, r30
    48a6:	ff 1f       	adc	r31, r31
    48a8:	df 01       	movw	r26, r30
    48aa:	a8 0f       	add	r26, r24
    48ac:	b9 1f       	adc	r27, r25
    48ae:	aa 0f       	add	r26, r26
    48b0:	bb 1f       	adc	r27, r27
    48b2:	ab 58       	subi	r26, 0x8B	; 139
    48b4:	bc 4e       	sbci	r27, 0xEC	; 236
    48b6:	0d 90       	ld	r0, X+
    48b8:	bc 91       	ld	r27, X
    48ba:	a0 2d       	mov	r26, r0
    48bc:	2c 91       	ld	r18, X
    48be:	e8 0f       	add	r30, r24
    48c0:	f9 1f       	adc	r31, r25
    48c2:	ee 0f       	add	r30, r30
    48c4:	ff 1f       	adc	r31, r31
    48c6:	eb 58       	subi	r30, 0x8B	; 139
    48c8:	fc 4e       	sbci	r31, 0xEC	; 236
    48ca:	81 e0       	ldi	r24, 0x01	; 1
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	02 80       	ldd	r0, Z+2	; 0x02
    48d0:	02 c0       	rjmp	.+4      	; 0x48d6 <_turn_on+0x8e>
    48d2:	88 0f       	add	r24, r24
    48d4:	99 1f       	adc	r25, r25
    48d6:	0a 94       	dec	r0
    48d8:	e2 f7       	brpl	.-8      	; 0x48d2 <_turn_on+0x8a>
    48da:	82 2b       	or	r24, r18
    48dc:	8c 93       	st	X, r24
    48de:	08 95       	ret

000048e0 <_hal_led_task>:
    48e0:	cc 24       	eor	r12, r12
    48e2:	c3 94       	inc	r12
    48e4:	d1 2c       	mov	r13, r1
    48e6:	68 94       	set
    48e8:	bb 24       	eor	r11, r11
    48ea:	b2 f8       	bld	r11, 2
    48ec:	c5 e7       	ldi	r28, 0x75	; 117
    48ee:	d3 e1       	ldi	r29, 0x13	; 19
    48f0:	10 e0       	ldi	r17, 0x00	; 0
    48f2:	8c 81       	ldd	r24, Y+4	; 0x04
    48f4:	81 30       	cpi	r24, 0x01	; 1
    48f6:	81 f0       	breq	.+32     	; 0x4918 <_hal_led_task+0x38>
    48f8:	18 f1       	brcs	.+70     	; 0x4940 <_hal_led_task+0x60>
    48fa:	82 30       	cpi	r24, 0x02	; 2
    48fc:	61 f5       	brne	.+88     	; 0x4956 <_hal_led_task+0x76>
    48fe:	e8 81       	ld	r30, Y
    4900:	f9 81       	ldd	r31, Y+1	; 0x01
    4902:	20 81       	ld	r18, Z
    4904:	c6 01       	movw	r24, r12
    4906:	0a 80       	ldd	r0, Y+2	; 0x02
    4908:	02 c0       	rjmp	.+4      	; 0x490e <_hal_led_task+0x2e>
    490a:	88 0f       	add	r24, r24
    490c:	99 1f       	adc	r25, r25
    490e:	0a 94       	dec	r0
    4910:	e2 f7       	brpl	.-8      	; 0x490a <_hal_led_task+0x2a>
    4912:	82 27       	eor	r24, r18
    4914:	80 83       	st	Z, r24
    4916:	1f c0       	rjmp	.+62     	; 0x4956 <_hal_led_task+0x76>
    4918:	8d 81       	ldd	r24, Y+5	; 0x05
    491a:	8f 5f       	subi	r24, 0xFF	; 255
    491c:	8a 30       	cpi	r24, 0x0A	; 10
    491e:	10 f4       	brcc	.+4      	; 0x4924 <_hal_led_task+0x44>
    4920:	8d 83       	std	Y+5, r24	; 0x05
    4922:	19 c0       	rjmp	.+50     	; 0x4956 <_hal_led_task+0x76>
    4924:	1d 82       	std	Y+5, r1	; 0x05
    4926:	e8 81       	ld	r30, Y
    4928:	f9 81       	ldd	r31, Y+1	; 0x01
    492a:	20 81       	ld	r18, Z
    492c:	c6 01       	movw	r24, r12
    492e:	0a 80       	ldd	r0, Y+2	; 0x02
    4930:	02 c0       	rjmp	.+4      	; 0x4936 <_hal_led_task+0x56>
    4932:	88 0f       	add	r24, r24
    4934:	99 1f       	adc	r25, r25
    4936:	0a 94       	dec	r0
    4938:	e2 f7       	brpl	.-8      	; 0x4932 <_hal_led_task+0x52>
    493a:	82 27       	eor	r24, r18
    493c:	80 83       	st	Z, r24
    493e:	0b c0       	rjmp	.+22     	; 0x4956 <_hal_led_task+0x76>
    4940:	0d 81       	ldd	r16, Y+5	; 0x05
    4942:	00 23       	and	r16, r16
    4944:	29 f0       	breq	.+10     	; 0x4950 <_hal_led_task+0x70>
    4946:	81 2f       	mov	r24, r17
    4948:	7f df       	rcall	.-258    	; 0x4848 <_turn_on>
    494a:	01 50       	subi	r16, 0x01	; 1
    494c:	0d 83       	std	Y+5, r16	; 0x05
    494e:	03 c0       	rjmp	.+6      	; 0x4956 <_hal_led_task+0x76>
    4950:	bc 82       	std	Y+4, r11	; 0x04
    4952:	81 2f       	mov	r24, r17
    4954:	2d df       	rcall	.-422    	; 0x47b0 <_turn_off>
    4956:	1f 5f       	subi	r17, 0xFF	; 255
    4958:	26 96       	adiw	r28, 0x06	; 6
    495a:	14 30       	cpi	r17, 0x04	; 4
    495c:	51 f6       	brne	.-108    	; 0x48f2 <_hal_led_task+0x12>
    495e:	65 e0       	ldi	r22, 0x05	; 5
    4960:	70 e0       	ldi	r23, 0x00	; 0
    4962:	80 e0       	ldi	r24, 0x00	; 0
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskDelay>
    496a:	c0 cf       	rjmp	.-128    	; 0x48ec <_hal_led_task+0xc>

0000496c <status_leds_initialise>:
    496c:	ef 92       	push	r14
    496e:	ff 92       	push	r15
    4970:	0f 93       	push	r16
    4972:	1f 93       	push	r17
    4974:	cf 93       	push	r28
    4976:	df 93       	push	r29
    4978:	08 2f       	mov	r16, r24
    497a:	80 e4       	ldi	r24, 0x40	; 64
    497c:	87 b9       	out	0x07, r24	; 7
    497e:	c5 e7       	ldi	r28, 0x75	; 117
    4980:	d3 e1       	ldi	r29, 0x13	; 19
    4982:	0f 2e       	mov	r0, r31
    4984:	f8 e2       	ldi	r31, 0x28	; 40
    4986:	ef 2e       	mov	r14, r31
    4988:	f1 2c       	mov	r15, r1
    498a:	f0 2d       	mov	r31, r0
    498c:	f9 82       	std	Y+1, r15	; 0x01
    498e:	e8 82       	st	Y, r14
    4990:	86 e0       	ldi	r24, 0x06	; 6
    4992:	8a 83       	std	Y+2, r24	; 0x02
    4994:	1b 82       	std	Y+3, r1	; 0x03
    4996:	14 e0       	ldi	r17, 0x04	; 4
    4998:	1c 83       	std	Y+4, r17	; 0x04
    499a:	80 e0       	ldi	r24, 0x00	; 0
    499c:	09 df       	rcall	.-494    	; 0x47b0 <_turn_off>
    499e:	80 e8       	ldi	r24, 0x80	; 128
    49a0:	87 b9       	out	0x07, r24	; 7
    49a2:	ff 82       	std	Y+7, r15	; 0x07
    49a4:	ee 82       	std	Y+6, r14	; 0x06
    49a6:	87 e0       	ldi	r24, 0x07	; 7
    49a8:	88 87       	std	Y+8, r24	; 0x08
    49aa:	19 86       	std	Y+9, r1	; 0x09
    49ac:	1a 87       	std	Y+10, r17	; 0x0a
    49ae:	81 e0       	ldi	r24, 0x01	; 1
    49b0:	ff de       	rcall	.-514    	; 0x47b0 <_turn_off>
    49b2:	80 e2       	ldi	r24, 0x20	; 32
    49b4:	83 bb       	out	0x13, r24	; 19
    49b6:	84 e3       	ldi	r24, 0x34	; 52
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	9d 87       	std	Y+13, r25	; 0x0d
    49bc:	8c 87       	std	Y+12, r24	; 0x0c
    49be:	85 e0       	ldi	r24, 0x05	; 5
    49c0:	8e 87       	std	Y+14, r24	; 0x0e
    49c2:	1f 86       	std	Y+15, r1	; 0x0f
    49c4:	18 8b       	std	Y+16, r17	; 0x10
    49c6:	82 e0       	ldi	r24, 0x02	; 2
    49c8:	f3 de       	rcall	.-538    	; 0x47b0 <_turn_off>
    49ca:	80 e1       	ldi	r24, 0x10	; 16
    49cc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    49d0:	82 e0       	ldi	r24, 0x02	; 2
    49d2:	91 e0       	ldi	r25, 0x01	; 1
    49d4:	9b 8b       	std	Y+19, r25	; 0x13
    49d6:	8a 8b       	std	Y+18, r24	; 0x12
    49d8:	1c 8b       	std	Y+20, r17	; 0x14
    49da:	1d 8a       	std	Y+21, r1	; 0x15
    49dc:	1e 8b       	std	Y+22, r17	; 0x16
    49de:	83 e0       	ldi	r24, 0x03	; 3
    49e0:	e7 de       	rcall	.-562    	; 0x47b0 <_turn_off>
    49e2:	e1 2c       	mov	r14, r1
    49e4:	f1 2c       	mov	r15, r1
    49e6:	20 e0       	ldi	r18, 0x00	; 0
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	40 ec       	ldi	r20, 0xC0	; 192
    49ec:	50 e0       	ldi	r21, 0x00	; 0
    49ee:	6d e8       	ldi	r22, 0x8D	; 141
    49f0:	75 e0       	ldi	r23, 0x05	; 5
    49f2:	80 e7       	ldi	r24, 0x70	; 112
    49f4:	94 e2       	ldi	r25, 0x24	; 36
    49f6:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <xTaskCreate>
    49fa:	df 91       	pop	r29
    49fc:	cf 91       	pop	r28
    49fe:	1f 91       	pop	r17
    4a00:	0f 91       	pop	r16
    4a02:	ff 90       	pop	r15
    4a04:	ef 90       	pop	r14
    4a06:	08 95       	ret

00004a08 <status_leds_slowBlink>:
    4a08:	cf 93       	push	r28
    4a0a:	df 93       	push	r29
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	fc 01       	movw	r30, r24
    4a10:	ee 0f       	add	r30, r30
    4a12:	ff 1f       	adc	r31, r31
    4a14:	df 01       	movw	r26, r30
    4a16:	a8 0f       	add	r26, r24
    4a18:	b9 1f       	adc	r27, r25
    4a1a:	aa 0f       	add	r26, r26
    4a1c:	bb 1f       	adc	r27, r27
    4a1e:	ab 58       	subi	r26, 0x8B	; 139
    4a20:	bc 4e       	sbci	r27, 0xEC	; 236
    4a22:	cd 91       	ld	r28, X+
    4a24:	dc 91       	ld	r29, X
    4a26:	11 97       	sbiw	r26, 0x01	; 1
    4a28:	48 81       	ld	r20, Y
    4a2a:	21 e0       	ldi	r18, 0x01	; 1
    4a2c:	30 e0       	ldi	r19, 0x00	; 0
    4a2e:	12 96       	adiw	r26, 0x02	; 2
    4a30:	0c 90       	ld	r0, X
    4a32:	12 97       	sbiw	r26, 0x02	; 2
    4a34:	02 c0       	rjmp	.+4      	; 0x4a3a <status_leds_slowBlink+0x32>
    4a36:	22 0f       	add	r18, r18
    4a38:	33 1f       	adc	r19, r19
    4a3a:	0a 94       	dec	r0
    4a3c:	e2 f7       	brpl	.-8      	; 0x4a36 <status_leds_slowBlink+0x2e>
    4a3e:	24 27       	eor	r18, r20
    4a40:	28 83       	st	Y, r18
    4a42:	fd 01       	movw	r30, r26
    4a44:	81 e0       	ldi	r24, 0x01	; 1
    4a46:	84 83       	std	Z+4, r24	; 0x04
    4a48:	df 91       	pop	r29
    4a4a:	cf 91       	pop	r28
    4a4c:	08 95       	ret

00004a4e <_callBack>:
    4a4e:	e0 91 95 13 	lds	r30, 0x1395	; 0x801395 <_callBackFunction>
    4a52:	f0 91 96 13 	lds	r31, 0x1396	; 0x801396 <_callBackFunction+0x1>
    4a56:	30 97       	sbiw	r30, 0x00	; 0
    4a58:	09 f0       	breq	.+2      	; 0x4a5c <_callBack+0xe>
    4a5a:	19 95       	eicall
    4a5c:	08 95       	ret

00004a5e <_tsl2591TwiCallback>:
    4a5e:	64 50       	subi	r22, 0x04	; 4
    4a60:	62 30       	cpi	r22, 0x02	; 2
    4a62:	08 f0       	brcs	.+2      	; 0x4a66 <_tsl2591TwiCallback+0x8>
    4a64:	3b c0       	rjmp	.+118    	; 0x4adc <_tsl2591TwiCallback+0x7e>
    4a66:	20 91 94 13 	lds	r18, 0x1394	; 0x801394 <_nextState>
    4a6a:	22 30       	cpi	r18, 0x02	; 2
    4a6c:	79 f0       	breq	.+30     	; 0x4a8c <_tsl2591TwiCallback+0x2e>
    4a6e:	18 f4       	brcc	.+6      	; 0x4a76 <_tsl2591TwiCallback+0x18>
    4a70:	21 30       	cpi	r18, 0x01	; 1
    4a72:	31 f0       	breq	.+12     	; 0x4a80 <_tsl2591TwiCallback+0x22>
    4a74:	30 c0       	rjmp	.+96     	; 0x4ad6 <_tsl2591TwiCallback+0x78>
    4a76:	23 30       	cpi	r18, 0x03	; 3
    4a78:	81 f0       	breq	.+32     	; 0x4a9a <_tsl2591TwiCallback+0x3c>
    4a7a:	24 30       	cpi	r18, 0x04	; 4
    4a7c:	a1 f0       	breq	.+40     	; 0x4aa6 <_tsl2591TwiCallback+0x48>
    4a7e:	2b c0       	rjmp	.+86     	; 0x4ad6 <_tsl2591TwiCallback+0x78>
    4a80:	22 e0       	ldi	r18, 0x02	; 2
    4a82:	20 93 94 13 	sts	0x1394, r18	; 0x801394 <_nextState>
    4a86:	61 e0       	ldi	r22, 0x01	; 1
    4a88:	0a c2       	rjmp	.+1044   	; 0x4e9e <twiReceive>
    4a8a:	08 95       	ret
    4a8c:	fa 01       	movw	r30, r20
    4a8e:	80 81       	ld	r24, Z
    4a90:	80 93 91 13 	sts	0x1391, r24	; 0x801391 <_deviceId>
    4a94:	82 e0       	ldi	r24, 0x02	; 2
    4a96:	db cf       	rjmp	.-74     	; 0x4a4e <_callBack>
    4a98:	08 95       	ret
    4a9a:	24 e0       	ldi	r18, 0x04	; 4
    4a9c:	20 93 94 13 	sts	0x1394, r18	; 0x801394 <_nextState>
    4aa0:	64 e0       	ldi	r22, 0x04	; 4
    4aa2:	fd c1       	rjmp	.+1018   	; 0x4e9e <twiReceive>
    4aa4:	08 95       	ret
    4aa6:	fa 01       	movw	r30, r20
    4aa8:	81 81       	ldd	r24, Z+1	; 0x01
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	98 2f       	mov	r25, r24
    4aae:	88 27       	eor	r24, r24
    4ab0:	20 81       	ld	r18, Z
    4ab2:	82 2b       	or	r24, r18
    4ab4:	90 93 90 13 	sts	0x1390, r25	; 0x801390 <_fullSpectrumRaw+0x1>
    4ab8:	80 93 8f 13 	sts	0x138F, r24	; 0x80138f <_fullSpectrumRaw>
    4abc:	83 81       	ldd	r24, Z+3	; 0x03
    4abe:	90 e0       	ldi	r25, 0x00	; 0
    4ac0:	98 2f       	mov	r25, r24
    4ac2:	88 27       	eor	r24, r24
    4ac4:	22 81       	ldd	r18, Z+2	; 0x02
    4ac6:	82 2b       	or	r24, r18
    4ac8:	90 93 8e 13 	sts	0x138E, r25	; 0x80138e <_infraredRaw+0x1>
    4acc:	80 93 8d 13 	sts	0x138D, r24	; 0x80138d <_infraredRaw>
    4ad0:	81 e0       	ldi	r24, 0x01	; 1
    4ad2:	bd cf       	rjmp	.-134    	; 0x4a4e <_callBack>
    4ad4:	08 95       	ret
    4ad6:	80 e0       	ldi	r24, 0x00	; 0
    4ad8:	ba cf       	rjmp	.-140    	; 0x4a4e <_callBack>
    4ada:	08 95       	ret
    4adc:	10 92 94 13 	sts	0x1394, r1	; 0x801394 <_nextState>
    4ae0:	86 e0       	ldi	r24, 0x06	; 6
    4ae2:	b5 cf       	rjmp	.-150    	; 0x4a4e <_callBack>
    4ae4:	08 95       	ret

00004ae6 <_twiTransmit>:
    4ae6:	20 91 97 13 	lds	r18, 0x1397	; 0x801397 <_twiHandler>
    4aea:	30 91 98 13 	lds	r19, 0x1398	; 0x801398 <_twiHandler+0x1>
    4aee:	21 15       	cp	r18, r1
    4af0:	31 05       	cpc	r19, r1
    4af2:	41 f0       	breq	.+16     	; 0x4b04 <_twiTransmit+0x1e>
    4af4:	46 2f       	mov	r20, r22
    4af6:	bc 01       	movw	r22, r24
    4af8:	c9 01       	movw	r24, r18
    4afa:	85 d1       	rcall	.+778    	; 0x4e06 <twiTransmit>
    4afc:	82 30       	cpi	r24, 0x02	; 2
    4afe:	21 f0       	breq	.+8      	; 0x4b08 <_twiTransmit+0x22>
    4b00:	80 e0       	ldi	r24, 0x00	; 0
    4b02:	08 95       	ret
    4b04:	87 e0       	ldi	r24, 0x07	; 7
    4b06:	08 95       	ret
    4b08:	85 e0       	ldi	r24, 0x05	; 5
    4b0a:	08 95       	ret

00004b0c <tsl2591_initialise>:
    4b0c:	0f 93       	push	r16
    4b0e:	1f 93       	push	r17
    4b10:	90 93 96 13 	sts	0x1396, r25	; 0x801396 <_callBackFunction+0x1>
    4b14:	80 93 95 13 	sts	0x1395, r24	; 0x801395 <_callBackFunction>
    4b18:	0f e2       	ldi	r16, 0x2F	; 47
    4b1a:	15 e2       	ldi	r17, 0x25	; 37
    4b1c:	20 e0       	ldi	r18, 0x00	; 0
    4b1e:	34 e2       	ldi	r19, 0x24	; 36
    4b20:	44 ef       	ldi	r20, 0xF4	; 244
    4b22:	50 e0       	ldi	r21, 0x00	; 0
    4b24:	60 e0       	ldi	r22, 0x00	; 0
    4b26:	89 e2       	ldi	r24, 0x29	; 41
    4b28:	1d d1       	rcall	.+570    	; 0x4d64 <twiCreate>
    4b2a:	90 93 98 13 	sts	0x1398, r25	; 0x801398 <_twiHandler+0x1>
    4b2e:	80 93 97 13 	sts	0x1397, r24	; 0x801397 <_twiHandler>
    4b32:	89 2b       	or	r24, r25
    4b34:	11 f0       	breq	.+4      	; 0x4b3a <tsl2591_initialise+0x2e>
    4b36:	80 e0       	ldi	r24, 0x00	; 0
    4b38:	01 c0       	rjmp	.+2      	; 0x4b3c <tsl2591_initialise+0x30>
    4b3a:	88 e0       	ldi	r24, 0x08	; 8
    4b3c:	1f 91       	pop	r17
    4b3e:	0f 91       	pop	r16
    4b40:	08 95       	ret

00004b42 <tsl2591_enable>:
    4b42:	cf 93       	push	r28
    4b44:	df 93       	push	r29
    4b46:	1f 92       	push	r1
    4b48:	1f 92       	push	r1
    4b4a:	cd b7       	in	r28, 0x3d	; 61
    4b4c:	de b7       	in	r29, 0x3e	; 62
    4b4e:	80 ea       	ldi	r24, 0xA0	; 160
    4b50:	89 83       	std	Y+1, r24	; 0x01
    4b52:	83 e0       	ldi	r24, 0x03	; 3
    4b54:	8a 83       	std	Y+2, r24	; 0x02
    4b56:	10 92 94 13 	sts	0x1394, r1	; 0x801394 <_nextState>
    4b5a:	62 e0       	ldi	r22, 0x02	; 2
    4b5c:	ce 01       	movw	r24, r28
    4b5e:	01 96       	adiw	r24, 0x01	; 1
    4b60:	c2 df       	rcall	.-124    	; 0x4ae6 <_twiTransmit>
    4b62:	0f 90       	pop	r0
    4b64:	0f 90       	pop	r0
    4b66:	df 91       	pop	r29
    4b68:	cf 91       	pop	r28
    4b6a:	08 95       	ret

00004b6c <tsl2591_fetchData>:
    4b6c:	cf 93       	push	r28
    4b6e:	df 93       	push	r29
    4b70:	1f 92       	push	r1
    4b72:	cd b7       	in	r28, 0x3d	; 61
    4b74:	de b7       	in	r29, 0x3e	; 62
    4b76:	84 eb       	ldi	r24, 0xB4	; 180
    4b78:	89 83       	std	Y+1, r24	; 0x01
    4b7a:	83 e0       	ldi	r24, 0x03	; 3
    4b7c:	80 93 94 13 	sts	0x1394, r24	; 0x801394 <_nextState>
    4b80:	61 e0       	ldi	r22, 0x01	; 1
    4b82:	ce 01       	movw	r24, r28
    4b84:	01 96       	adiw	r24, 0x01	; 1
    4b86:	af df       	rcall	.-162    	; 0x4ae6 <_twiTransmit>
    4b88:	0f 90       	pop	r0
    4b8a:	df 91       	pop	r29
    4b8c:	cf 91       	pop	r28
    4b8e:	08 95       	ret

00004b90 <tsl2591_getLux>:
    4b90:	2f 92       	push	r2
    4b92:	3f 92       	push	r3
    4b94:	4f 92       	push	r4
    4b96:	5f 92       	push	r5
    4b98:	6f 92       	push	r6
    4b9a:	7f 92       	push	r7
    4b9c:	8f 92       	push	r8
    4b9e:	9f 92       	push	r9
    4ba0:	af 92       	push	r10
    4ba2:	bf 92       	push	r11
    4ba4:	cf 92       	push	r12
    4ba6:	df 92       	push	r13
    4ba8:	ef 92       	push	r14
    4baa:	ff 92       	push	r15
    4bac:	0f 93       	push	r16
    4bae:	1f 93       	push	r17
    4bb0:	cf 93       	push	r28
    4bb2:	df 93       	push	r29
    4bb4:	c0 91 8d 13 	lds	r28, 0x138D	; 0x80138d <_infraredRaw>
    4bb8:	d0 91 8e 13 	lds	r29, 0x138E	; 0x80138e <_infraredRaw+0x1>
    4bbc:	cf 3f       	cpi	r28, 0xFF	; 255
    4bbe:	2f ef       	ldi	r18, 0xFF	; 255
    4bc0:	d2 07       	cpc	r29, r18
    4bc2:	41 f0       	breq	.+16     	; 0x4bd4 <tsl2591_getLux+0x44>
    4bc4:	60 91 8f 13 	lds	r22, 0x138F	; 0x80138f <_fullSpectrumRaw>
    4bc8:	70 91 90 13 	lds	r23, 0x1390	; 0x801390 <_fullSpectrumRaw+0x1>
    4bcc:	6f 3f       	cpi	r22, 0xFF	; 255
    4bce:	ef ef       	ldi	r30, 0xFF	; 255
    4bd0:	7e 07       	cpc	r23, r30
    4bd2:	59 f4       	brne	.+22     	; 0x4bea <tsl2591_getLux+0x5a>
    4bd4:	4f ef       	ldi	r20, 0xFF	; 255
    4bd6:	5f ef       	ldi	r21, 0xFF	; 255
    4bd8:	6f e7       	ldi	r22, 0x7F	; 127
    4bda:	7f e7       	ldi	r23, 0x7F	; 127
    4bdc:	fc 01       	movw	r30, r24
    4bde:	40 83       	st	Z, r20
    4be0:	51 83       	std	Z+1, r21	; 0x01
    4be2:	62 83       	std	Z+2, r22	; 0x02
    4be4:	73 83       	std	Z+3, r23	; 0x03
    4be6:	83 e0       	ldi	r24, 0x03	; 3
    4be8:	99 c0       	rjmp	.+306    	; 0x4d1c <tsl2591_getLux+0x18c>
    4bea:	1c 01       	movw	r2, r24
    4bec:	80 e0       	ldi	r24, 0x00	; 0
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	3b d3       	rcall	.+1654   	; 0x5268 <__floatunsisf>
    4bf2:	2b 01       	movw	r4, r22
    4bf4:	3c 01       	movw	r6, r24
    4bf6:	be 01       	movw	r22, r28
    4bf8:	80 e0       	ldi	r24, 0x00	; 0
    4bfa:	90 e0       	ldi	r25, 0x00	; 0
    4bfc:	35 d3       	rcall	.+1642   	; 0x5268 <__floatunsisf>
    4bfe:	4b 01       	movw	r8, r22
    4c00:	5c 01       	movw	r10, r24
    4c02:	80 91 92 13 	lds	r24, 0x1392	; 0x801392 <_currentIntegrationTime>
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	01 96       	adiw	r24, 0x01	; 1
    4c0a:	24 e6       	ldi	r18, 0x64	; 100
    4c0c:	28 9f       	mul	r18, r24
    4c0e:	b0 01       	movw	r22, r0
    4c10:	29 9f       	mul	r18, r25
    4c12:	70 0d       	add	r23, r0
    4c14:	11 24       	eor	r1, r1
    4c16:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <_currentGain>
    4c1a:	80 32       	cpi	r24, 0x20	; 32
    4c1c:	69 f0       	breq	.+26     	; 0x4c38 <tsl2591_getLux+0xa8>
    4c1e:	80 33       	cpi	r24, 0x30	; 48
    4c20:	a1 f0       	breq	.+40     	; 0x4c4a <tsl2591_getLux+0xba>
    4c22:	80 31       	cpi	r24, 0x10	; 16
    4c24:	e1 f4       	brne	.+56     	; 0x4c5e <tsl2591_getLux+0xce>
    4c26:	0f 2e       	mov	r0, r31
    4c28:	c1 2c       	mov	r12, r1
    4c2a:	d1 2c       	mov	r13, r1
    4c2c:	f8 ec       	ldi	r31, 0xC8	; 200
    4c2e:	ef 2e       	mov	r14, r31
    4c30:	f1 e4       	ldi	r31, 0x41	; 65
    4c32:	ff 2e       	mov	r15, r31
    4c34:	f0 2d       	mov	r31, r0
    4c36:	1b c0       	rjmp	.+54     	; 0x4c6e <tsl2591_getLux+0xde>
    4c38:	0f 2e       	mov	r0, r31
    4c3a:	c1 2c       	mov	r12, r1
    4c3c:	d1 2c       	mov	r13, r1
    4c3e:	f6 ed       	ldi	r31, 0xD6	; 214
    4c40:	ef 2e       	mov	r14, r31
    4c42:	f3 e4       	ldi	r31, 0x43	; 67
    4c44:	ff 2e       	mov	r15, r31
    4c46:	f0 2d       	mov	r31, r0
    4c48:	12 c0       	rjmp	.+36     	; 0x4c6e <tsl2591_getLux+0xde>
    4c4a:	0f 2e       	mov	r0, r31
    4c4c:	c1 2c       	mov	r12, r1
    4c4e:	f0 e5       	ldi	r31, 0x50	; 80
    4c50:	df 2e       	mov	r13, r31
    4c52:	fa e1       	ldi	r31, 0x1A	; 26
    4c54:	ef 2e       	mov	r14, r31
    4c56:	f6 e4       	ldi	r31, 0x46	; 70
    4c58:	ff 2e       	mov	r15, r31
    4c5a:	f0 2d       	mov	r31, r0
    4c5c:	08 c0       	rjmp	.+16     	; 0x4c6e <tsl2591_getLux+0xde>
    4c5e:	0f 2e       	mov	r0, r31
    4c60:	c1 2c       	mov	r12, r1
    4c62:	d1 2c       	mov	r13, r1
    4c64:	f0 e8       	ldi	r31, 0x80	; 128
    4c66:	ef 2e       	mov	r14, r31
    4c68:	ff e3       	ldi	r31, 0x3F	; 63
    4c6a:	ff 2e       	mov	r15, r31
    4c6c:	f0 2d       	mov	r31, r0
    4c6e:	07 2e       	mov	r0, r23
    4c70:	00 0c       	add	r0, r0
    4c72:	88 0b       	sbc	r24, r24
    4c74:	99 0b       	sbc	r25, r25
    4c76:	fa d2       	rcall	.+1524   	; 0x526c <__floatsisf>
    4c78:	a7 01       	movw	r20, r14
    4c7a:	96 01       	movw	r18, r12
    4c7c:	5e d3       	rcall	.+1724   	; 0x533a <__mulsf3>
    4c7e:	20 e0       	ldi	r18, 0x00	; 0
    4c80:	30 e0       	ldi	r19, 0x00	; 0
    4c82:	4c ec       	ldi	r20, 0xCC	; 204
    4c84:	53 e4       	ldi	r21, 0x43	; 67
    4c86:	7e d2       	rcall	.+1276   	; 0x5184 <__divsf3>
    4c88:	6b 01       	movw	r12, r22
    4c8a:	7c 01       	movw	r14, r24
    4c8c:	25 e8       	ldi	r18, 0x85	; 133
    4c8e:	3b ee       	ldi	r19, 0xEB	; 235
    4c90:	41 ed       	ldi	r20, 0xD1	; 209
    4c92:	5f e3       	ldi	r21, 0x3F	; 63
    4c94:	c5 01       	movw	r24, r10
    4c96:	b4 01       	movw	r22, r8
    4c98:	50 d3       	rcall	.+1696   	; 0x533a <__mulsf3>
    4c9a:	9b 01       	movw	r18, r22
    4c9c:	ac 01       	movw	r20, r24
    4c9e:	c3 01       	movw	r24, r6
    4ca0:	b2 01       	movw	r22, r4
    4ca2:	09 d2       	rcall	.+1042   	; 0x50b6 <__subsf3>
    4ca4:	a7 01       	movw	r20, r14
    4ca6:	96 01       	movw	r18, r12
    4ca8:	6d d2       	rcall	.+1242   	; 0x5184 <__divsf3>
    4caa:	16 2f       	mov	r17, r22
    4cac:	d7 2f       	mov	r29, r23
    4cae:	c8 2f       	mov	r28, r24
    4cb0:	09 2f       	mov	r16, r25
    4cb2:	2d e3       	ldi	r18, 0x3D	; 61
    4cb4:	3a e0       	ldi	r19, 0x0A	; 10
    4cb6:	47 e1       	ldi	r20, 0x17	; 23
    4cb8:	5f e3       	ldi	r21, 0x3F	; 63
    4cba:	c3 01       	movw	r24, r6
    4cbc:	b2 01       	movw	r22, r4
    4cbe:	3d d3       	rcall	.+1658   	; 0x533a <__mulsf3>
    4cc0:	2b 01       	movw	r4, r22
    4cc2:	3c 01       	movw	r6, r24
    4cc4:	26 ef       	ldi	r18, 0xF6	; 246
    4cc6:	38 e2       	ldi	r19, 0x28	; 40
    4cc8:	4c e5       	ldi	r20, 0x5C	; 92
    4cca:	5f e3       	ldi	r21, 0x3F	; 63
    4ccc:	c5 01       	movw	r24, r10
    4cce:	b4 01       	movw	r22, r8
    4cd0:	34 d3       	rcall	.+1640   	; 0x533a <__mulsf3>
    4cd2:	9b 01       	movw	r18, r22
    4cd4:	ac 01       	movw	r20, r24
    4cd6:	c3 01       	movw	r24, r6
    4cd8:	b2 01       	movw	r22, r4
    4cda:	ed d1       	rcall	.+986    	; 0x50b6 <__subsf3>
    4cdc:	a7 01       	movw	r20, r14
    4cde:	96 01       	movw	r18, r12
    4ce0:	51 d2       	rcall	.+1186   	; 0x5184 <__divsf3>
    4ce2:	c6 2e       	mov	r12, r22
    4ce4:	d7 2e       	mov	r13, r23
    4ce6:	e8 2e       	mov	r14, r24
    4ce8:	f9 2e       	mov	r15, r25
    4cea:	26 2f       	mov	r18, r22
    4cec:	37 2f       	mov	r19, r23
    4cee:	48 2f       	mov	r20, r24
    4cf0:	59 2f       	mov	r21, r25
    4cf2:	61 2f       	mov	r22, r17
    4cf4:	7d 2f       	mov	r23, r29
    4cf6:	8c 2f       	mov	r24, r28
    4cf8:	90 2f       	mov	r25, r16
    4cfa:	1b d3       	rcall	.+1590   	; 0x5332 <__gesf2>
    4cfc:	18 16       	cp	r1, r24
    4cfe:	24 f0       	brlt	.+8      	; 0x4d08 <tsl2591_getLux+0x178>
    4d00:	1c 2d       	mov	r17, r12
    4d02:	dd 2d       	mov	r29, r13
    4d04:	ce 2d       	mov	r28, r14
    4d06:	0f 2d       	mov	r16, r15
    4d08:	41 2f       	mov	r20, r17
    4d0a:	5d 2f       	mov	r21, r29
    4d0c:	6c 2f       	mov	r22, r28
    4d0e:	70 2f       	mov	r23, r16
    4d10:	f1 01       	movw	r30, r2
    4d12:	40 83       	st	Z, r20
    4d14:	51 83       	std	Z+1, r21	; 0x01
    4d16:	62 83       	std	Z+2, r22	; 0x02
    4d18:	73 83       	std	Z+3, r23	; 0x03
    4d1a:	80 e0       	ldi	r24, 0x00	; 0
    4d1c:	df 91       	pop	r29
    4d1e:	cf 91       	pop	r28
    4d20:	1f 91       	pop	r17
    4d22:	0f 91       	pop	r16
    4d24:	ff 90       	pop	r15
    4d26:	ef 90       	pop	r14
    4d28:	df 90       	pop	r13
    4d2a:	cf 90       	pop	r12
    4d2c:	bf 90       	pop	r11
    4d2e:	af 90       	pop	r10
    4d30:	9f 90       	pop	r9
    4d32:	8f 90       	pop	r8
    4d34:	7f 90       	pop	r7
    4d36:	6f 90       	pop	r6
    4d38:	5f 90       	pop	r5
    4d3a:	4f 90       	pop	r4
    4d3c:	3f 90       	pop	r3
    4d3e:	2f 90       	pop	r2
    4d40:	08 95       	ret

00004d42 <_initTwiInterface>:
    4d42:	80 91 a7 13 	lds	r24, 0x13A7	; 0x8013a7 <_twiIsInitiated>
    4d46:	81 11       	cpse	r24, r1
    4d48:	0c c0       	rjmp	.+24     	; 0x4d62 <_initTwiInterface+0x20>
    4d4a:	8c e0       	ldi	r24, 0x0C	; 12
    4d4c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4d50:	8f ef       	ldi	r24, 0xFF	; 255
    4d52:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4d56:	84 e0       	ldi	r24, 0x04	; 4
    4d58:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4d5c:	81 e0       	ldi	r24, 0x01	; 1
    4d5e:	80 93 a7 13 	sts	0x13A7, r24	; 0x8013a7 <_twiIsInitiated>
    4d62:	08 95       	ret

00004d64 <twiCreate>:
    4d64:	af 92       	push	r10
    4d66:	bf 92       	push	r11
    4d68:	cf 92       	push	r12
    4d6a:	df 92       	push	r13
    4d6c:	ef 92       	push	r14
    4d6e:	ff 92       	push	r15
    4d70:	0f 93       	push	r16
    4d72:	1f 93       	push	r17
    4d74:	cf 93       	push	r28
    4d76:	df 93       	push	r29
    4d78:	a8 2e       	mov	r10, r24
    4d7a:	b6 2e       	mov	r11, r22
    4d7c:	69 01       	movw	r12, r18
    4d7e:	7a 01       	movw	r14, r20
    4d80:	84 e0       	ldi	r24, 0x04	; 4
    4d82:	90 e0       	ldi	r25, 0x00	; 0
    4d84:	8e d3       	rcall	.+1820   	; 0x54a2 <malloc>
    4d86:	ec 01       	movw	r28, r24
    4d88:	89 2b       	or	r24, r25
    4d8a:	61 f1       	breq	.+88     	; 0x4de4 <twiCreate+0x80>
    4d8c:	a8 82       	st	Y, r10
    4d8e:	81 e0       	ldi	r24, 0x01	; 1
    4d90:	b8 12       	cpse	r11, r24
    4d92:	12 c0       	rjmp	.+36     	; 0x4db8 <twiCreate+0x54>
    4d94:	c7 01       	movw	r24, r14
    4d96:	b6 01       	movw	r22, r12
    4d98:	20 ea       	ldi	r18, 0xA0	; 160
    4d9a:	36 e8       	ldi	r19, 0x86	; 134
    4d9c:	41 e0       	ldi	r20, 0x01	; 1
    4d9e:	50 e0       	ldi	r21, 0x00	; 0
    4da0:	56 d3       	rcall	.+1708   	; 0x544e <__udivmodsi4>
    4da2:	da 01       	movw	r26, r20
    4da4:	c9 01       	movw	r24, r18
    4da6:	40 97       	sbiw	r24, 0x10	; 16
    4da8:	a1 09       	sbc	r26, r1
    4daa:	b1 09       	sbc	r27, r1
    4dac:	b6 95       	lsr	r27
    4dae:	a7 95       	ror	r26
    4db0:	97 95       	ror	r25
    4db2:	87 95       	ror	r24
    4db4:	89 83       	std	Y+1, r24	; 0x01
    4db6:	11 c0       	rjmp	.+34     	; 0x4dda <twiCreate+0x76>
    4db8:	c7 01       	movw	r24, r14
    4dba:	b6 01       	movw	r22, r12
    4dbc:	20 e8       	ldi	r18, 0x80	; 128
    4dbe:	3a e1       	ldi	r19, 0x1A	; 26
    4dc0:	46 e0       	ldi	r20, 0x06	; 6
    4dc2:	50 e0       	ldi	r21, 0x00	; 0
    4dc4:	44 d3       	rcall	.+1672   	; 0x544e <__udivmodsi4>
    4dc6:	da 01       	movw	r26, r20
    4dc8:	c9 01       	movw	r24, r18
    4dca:	40 97       	sbiw	r24, 0x10	; 16
    4dcc:	a1 09       	sbc	r26, r1
    4dce:	b1 09       	sbc	r27, r1
    4dd0:	b6 95       	lsr	r27
    4dd2:	a7 95       	ror	r26
    4dd4:	97 95       	ror	r25
    4dd6:	87 95       	ror	r24
    4dd8:	89 83       	std	Y+1, r24	; 0x01
    4dda:	1b 83       	std	Y+3, r17	; 0x03
    4ddc:	0a 83       	std	Y+2, r16	; 0x02
    4dde:	8c 2f       	mov	r24, r28
    4de0:	9d 2f       	mov	r25, r29
    4de2:	02 c0       	rjmp	.+4      	; 0x4de8 <twiCreate+0x84>
    4de4:	80 e0       	ldi	r24, 0x00	; 0
    4de6:	90 e0       	ldi	r25, 0x00	; 0
    4de8:	df 91       	pop	r29
    4dea:	cf 91       	pop	r28
    4dec:	1f 91       	pop	r17
    4dee:	0f 91       	pop	r16
    4df0:	ff 90       	pop	r15
    4df2:	ef 90       	pop	r14
    4df4:	df 90       	pop	r13
    4df6:	cf 90       	pop	r12
    4df8:	bf 90       	pop	r11
    4dfa:	af 90       	pop	r10
    4dfc:	08 95       	ret

00004dfe <twiIsBusy>:
    4dfe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4e02:	81 70       	andi	r24, 0x01	; 1
    4e04:	08 95       	ret

00004e06 <twiTransmit>:
    4e06:	ff 92       	push	r15
    4e08:	0f 93       	push	r16
    4e0a:	1f 93       	push	r17
    4e0c:	cf 93       	push	r28
    4e0e:	df 93       	push	r29
    4e10:	00 97       	sbiw	r24, 0x00	; 0
    4e12:	d1 f1       	breq	.+116    	; 0x4e88 <twiTransmit+0x82>
    4e14:	4a 30       	cpi	r20, 0x0A	; 10
    4e16:	d0 f5       	brcc	.+116    	; 0x4e8c <twiTransmit+0x86>
    4e18:	f4 2e       	mov	r15, r20
    4e1a:	8b 01       	movw	r16, r22
    4e1c:	ec 01       	movw	r28, r24
    4e1e:	ef df       	rcall	.-34     	; 0x4dfe <twiIsBusy>
    4e20:	81 11       	cpse	r24, r1
    4e22:	36 c0       	rjmp	.+108    	; 0x4e90 <twiTransmit+0x8a>
    4e24:	80 91 9a 13 	lds	r24, 0x139A	; 0x80139a <_twiCurrentHandler>
    4e28:	90 91 9b 13 	lds	r25, 0x139B	; 0x80139b <_twiCurrentHandler+0x1>
    4e2c:	c8 17       	cp	r28, r24
    4e2e:	d9 07       	cpc	r29, r25
    4e30:	41 f0       	breq	.+16     	; 0x4e42 <twiTransmit+0x3c>
    4e32:	87 df       	rcall	.-242    	; 0x4d42 <_initTwiInterface>
    4e34:	89 81       	ldd	r24, Y+1	; 0x01
    4e36:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4e3a:	d0 93 9b 13 	sts	0x139B, r29	; 0x80139b <_twiCurrentHandler+0x1>
    4e3e:	c0 93 9a 13 	sts	0x139A, r28	; 0x80139a <_twiCurrentHandler>
    4e42:	81 e0       	ldi	r24, 0x01	; 1
    4e44:	8f 0d       	add	r24, r15
    4e46:	80 93 9c 13 	sts	0x139C, r24	; 0x80139c <_twiMessageLen>
    4e4a:	88 81       	ld	r24, Y
    4e4c:	88 0f       	add	r24, r24
    4e4e:	80 93 9d 13 	sts	0x139D, r24	; 0x80139d <_twiMessageBuffer>
    4e52:	ff 20       	and	r15, r15
    4e54:	89 f0       	breq	.+34     	; 0x4e78 <twiTransmit+0x72>
    4e56:	f8 01       	movw	r30, r16
    4e58:	ae e9       	ldi	r26, 0x9E	; 158
    4e5a:	b3 e1       	ldi	r27, 0x13	; 19
    4e5c:	4f ef       	ldi	r20, 0xFF	; 255
    4e5e:	4f 0d       	add	r20, r15
    4e60:	64 2f       	mov	r22, r20
    4e62:	70 e0       	ldi	r23, 0x00	; 0
    4e64:	cb 01       	movw	r24, r22
    4e66:	01 96       	adiw	r24, 0x01	; 1
    4e68:	b8 01       	movw	r22, r16
    4e6a:	68 0f       	add	r22, r24
    4e6c:	79 1f       	adc	r23, r25
    4e6e:	81 91       	ld	r24, Z+
    4e70:	8d 93       	st	X+, r24
    4e72:	e6 17       	cp	r30, r22
    4e74:	f7 07       	cpc	r31, r23
    4e76:	d9 f7       	brne	.-10     	; 0x4e6e <twiTransmit+0x68>
    4e78:	88 ef       	ldi	r24, 0xF8	; 248
    4e7a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4e7e:	85 ea       	ldi	r24, 0xA5	; 165
    4e80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4e84:	84 e0       	ldi	r24, 0x04	; 4
    4e86:	05 c0       	rjmp	.+10     	; 0x4e92 <twiTransmit+0x8c>
    4e88:	86 e0       	ldi	r24, 0x06	; 6
    4e8a:	03 c0       	rjmp	.+6      	; 0x4e92 <twiTransmit+0x8c>
    4e8c:	87 e0       	ldi	r24, 0x07	; 7
    4e8e:	01 c0       	rjmp	.+2      	; 0x4e92 <twiTransmit+0x8c>
    4e90:	82 e0       	ldi	r24, 0x02	; 2
    4e92:	df 91       	pop	r29
    4e94:	cf 91       	pop	r28
    4e96:	1f 91       	pop	r17
    4e98:	0f 91       	pop	r16
    4e9a:	ff 90       	pop	r15
    4e9c:	08 95       	ret

00004e9e <twiReceive>:
    4e9e:	1f 93       	push	r17
    4ea0:	cf 93       	push	r28
    4ea2:	df 93       	push	r29
    4ea4:	00 97       	sbiw	r24, 0x00	; 0
    4ea6:	29 f1       	breq	.+74     	; 0x4ef2 <twiReceive+0x54>
    4ea8:	6b 30       	cpi	r22, 0x0B	; 11
    4eaa:	28 f5       	brcc	.+74     	; 0x4ef6 <twiReceive+0x58>
    4eac:	16 2f       	mov	r17, r22
    4eae:	ec 01       	movw	r28, r24
    4eb0:	a6 df       	rcall	.-180    	; 0x4dfe <twiIsBusy>
    4eb2:	81 11       	cpse	r24, r1
    4eb4:	22 c0       	rjmp	.+68     	; 0x4efa <twiReceive+0x5c>
    4eb6:	80 91 9a 13 	lds	r24, 0x139A	; 0x80139a <_twiCurrentHandler>
    4eba:	90 91 9b 13 	lds	r25, 0x139B	; 0x80139b <_twiCurrentHandler+0x1>
    4ebe:	c8 17       	cp	r28, r24
    4ec0:	d9 07       	cpc	r29, r25
    4ec2:	41 f0       	breq	.+16     	; 0x4ed4 <twiReceive+0x36>
    4ec4:	3e df       	rcall	.-388    	; 0x4d42 <_initTwiInterface>
    4ec6:	89 81       	ldd	r24, Y+1	; 0x01
    4ec8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4ecc:	d0 93 9b 13 	sts	0x139B, r29	; 0x80139b <_twiCurrentHandler+0x1>
    4ed0:	c0 93 9a 13 	sts	0x139A, r28	; 0x80139a <_twiCurrentHandler>
    4ed4:	10 93 9c 13 	sts	0x139C, r17	; 0x80139c <_twiMessageLen>
    4ed8:	88 81       	ld	r24, Y
    4eda:	88 0f       	add	r24, r24
    4edc:	81 60       	ori	r24, 0x01	; 1
    4ede:	80 93 9d 13 	sts	0x139D, r24	; 0x80139d <_twiMessageBuffer>
    4ee2:	88 ef       	ldi	r24, 0xF8	; 248
    4ee4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4ee8:	85 ea       	ldi	r24, 0xA5	; 165
    4eea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4eee:	85 e0       	ldi	r24, 0x05	; 5
    4ef0:	05 c0       	rjmp	.+10     	; 0x4efc <twiReceive+0x5e>
    4ef2:	86 e0       	ldi	r24, 0x06	; 6
    4ef4:	03 c0       	rjmp	.+6      	; 0x4efc <twiReceive+0x5e>
    4ef6:	87 e0       	ldi	r24, 0x07	; 7
    4ef8:	01 c0       	rjmp	.+2      	; 0x4efc <twiReceive+0x5e>
    4efa:	82 e0       	ldi	r24, 0x02	; 2
    4efc:	df 91       	pop	r29
    4efe:	cf 91       	pop	r28
    4f00:	1f 91       	pop	r17
    4f02:	08 95       	ret

00004f04 <__vector_39>:
    4f04:	1f 92       	push	r1
    4f06:	0f 92       	push	r0
    4f08:	0f b6       	in	r0, 0x3f	; 63
    4f0a:	0f 92       	push	r0
    4f0c:	11 24       	eor	r1, r1
    4f0e:	0b b6       	in	r0, 0x3b	; 59
    4f10:	0f 92       	push	r0
    4f12:	2f 93       	push	r18
    4f14:	3f 93       	push	r19
    4f16:	4f 93       	push	r20
    4f18:	5f 93       	push	r21
    4f1a:	6f 93       	push	r22
    4f1c:	7f 93       	push	r23
    4f1e:	8f 93       	push	r24
    4f20:	9f 93       	push	r25
    4f22:	af 93       	push	r26
    4f24:	bf 93       	push	r27
    4f26:	ef 93       	push	r30
    4f28:	ff 93       	push	r31
    4f2a:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4f2e:	8e 2f       	mov	r24, r30
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	fc 01       	movw	r30, r24
    4f34:	38 97       	sbiw	r30, 0x08	; 8
    4f36:	e1 35       	cpi	r30, 0x51	; 81
    4f38:	f1 05       	cpc	r31, r1
    4f3a:	08 f0       	brcs	.+2      	; 0x4f3e <__vector_39+0x3a>
    4f3c:	75 c0       	rjmp	.+234    	; 0x5028 <__vector_39+0x124>
    4f3e:	88 27       	eor	r24, r24
    4f40:	e4 58       	subi	r30, 0x84	; 132
    4f42:	ff 4f       	sbci	r31, 0xFF	; 255
    4f44:	8f 4f       	sbci	r24, 0xFF	; 255
    4f46:	a5 c2       	rjmp	.+1354   	; 0x5492 <__tablejump2__>
    4f48:	10 92 99 13 	sts	0x1399, r1	; 0x801399 <_index.1885>
    4f4c:	e0 91 99 13 	lds	r30, 0x1399	; 0x801399 <_index.1885>
    4f50:	80 91 9c 13 	lds	r24, 0x139C	; 0x80139c <_twiMessageLen>
    4f54:	e8 17       	cp	r30, r24
    4f56:	70 f4       	brcc	.+28     	; 0x4f74 <__vector_39+0x70>
    4f58:	81 e0       	ldi	r24, 0x01	; 1
    4f5a:	8e 0f       	add	r24, r30
    4f5c:	80 93 99 13 	sts	0x1399, r24	; 0x801399 <_index.1885>
    4f60:	f0 e0       	ldi	r31, 0x00	; 0
    4f62:	e3 56       	subi	r30, 0x63	; 99
    4f64:	fc 4e       	sbci	r31, 0xEC	; 236
    4f66:	80 81       	ld	r24, Z
    4f68:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4f6c:	85 e8       	ldi	r24, 0x85	; 133
    4f6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f72:	72 c0       	rjmp	.+228    	; 0x5058 <__vector_39+0x154>
    4f74:	84 e9       	ldi	r24, 0x94	; 148
    4f76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f7a:	80 91 9a 13 	lds	r24, 0x139A	; 0x80139a <_twiCurrentHandler>
    4f7e:	90 91 9b 13 	lds	r25, 0x139B	; 0x80139b <_twiCurrentHandler+0x1>
    4f82:	dc 01       	movw	r26, r24
    4f84:	12 96       	adiw	r26, 0x02	; 2
    4f86:	ed 91       	ld	r30, X+
    4f88:	fc 91       	ld	r31, X
    4f8a:	13 97       	sbiw	r26, 0x03	; 3
    4f8c:	30 97       	sbiw	r30, 0x00	; 0
    4f8e:	09 f4       	brne	.+2      	; 0x4f92 <__vector_39+0x8e>
    4f90:	63 c0       	rjmp	.+198    	; 0x5058 <__vector_39+0x154>
    4f92:	20 e0       	ldi	r18, 0x00	; 0
    4f94:	40 e0       	ldi	r20, 0x00	; 0
    4f96:	50 e0       	ldi	r21, 0x00	; 0
    4f98:	64 e0       	ldi	r22, 0x04	; 4
    4f9a:	19 95       	eicall
    4f9c:	5d c0       	rjmp	.+186    	; 0x5058 <__vector_39+0x154>
    4f9e:	e0 91 99 13 	lds	r30, 0x1399	; 0x801399 <_index.1885>
    4fa2:	81 e0       	ldi	r24, 0x01	; 1
    4fa4:	8e 0f       	add	r24, r30
    4fa6:	80 93 99 13 	sts	0x1399, r24	; 0x801399 <_index.1885>
    4faa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4fae:	f0 e0       	ldi	r31, 0x00	; 0
    4fb0:	e3 56       	subi	r30, 0x63	; 99
    4fb2:	fc 4e       	sbci	r31, 0xEC	; 236
    4fb4:	80 83       	st	Z, r24
    4fb6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4fba:	80 34       	cpi	r24, 0x40	; 64
    4fbc:	11 f4       	brne	.+4      	; 0x4fc2 <__vector_39+0xbe>
    4fbe:	10 92 99 13 	sts	0x1399, r1	; 0x801399 <_index.1885>
    4fc2:	20 91 99 13 	lds	r18, 0x1399	; 0x801399 <_index.1885>
    4fc6:	30 e0       	ldi	r19, 0x00	; 0
    4fc8:	80 91 9c 13 	lds	r24, 0x139C	; 0x80139c <_twiMessageLen>
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	01 97       	sbiw	r24, 0x01	; 1
    4fd0:	28 17       	cp	r18, r24
    4fd2:	39 07       	cpc	r19, r25
    4fd4:	24 f4       	brge	.+8      	; 0x4fde <__vector_39+0xda>
    4fd6:	85 ec       	ldi	r24, 0xC5	; 197
    4fd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4fdc:	3d c0       	rjmp	.+122    	; 0x5058 <__vector_39+0x154>
    4fde:	85 e8       	ldi	r24, 0x85	; 133
    4fe0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4fe4:	39 c0       	rjmp	.+114    	; 0x5058 <__vector_39+0x154>
    4fe6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4fea:	e0 91 99 13 	lds	r30, 0x1399	; 0x801399 <_index.1885>
    4fee:	f0 e0       	ldi	r31, 0x00	; 0
    4ff0:	e3 56       	subi	r30, 0x63	; 99
    4ff2:	fc 4e       	sbci	r31, 0xEC	; 236
    4ff4:	80 83       	st	Z, r24
    4ff6:	84 e9       	ldi	r24, 0x94	; 148
    4ff8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ffc:	80 91 9a 13 	lds	r24, 0x139A	; 0x80139a <_twiCurrentHandler>
    5000:	90 91 9b 13 	lds	r25, 0x139B	; 0x80139b <_twiCurrentHandler+0x1>
    5004:	dc 01       	movw	r26, r24
    5006:	12 96       	adiw	r26, 0x02	; 2
    5008:	ed 91       	ld	r30, X+
    500a:	fc 91       	ld	r31, X
    500c:	13 97       	sbiw	r26, 0x03	; 3
    500e:	30 97       	sbiw	r30, 0x00	; 0
    5010:	19 f1       	breq	.+70     	; 0x5058 <__vector_39+0x154>
    5012:	20 91 9c 13 	lds	r18, 0x139C	; 0x80139c <_twiMessageLen>
    5016:	4d e9       	ldi	r20, 0x9D	; 157
    5018:	53 e1       	ldi	r21, 0x13	; 19
    501a:	65 e0       	ldi	r22, 0x05	; 5
    501c:	19 95       	eicall
    501e:	1c c0       	rjmp	.+56     	; 0x5058 <__vector_39+0x154>
    5020:	85 ea       	ldi	r24, 0xA5	; 165
    5022:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5026:	18 c0       	rjmp	.+48     	; 0x5058 <__vector_39+0x154>
    5028:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    502c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5030:	84 e0       	ldi	r24, 0x04	; 4
    5032:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5036:	80 91 9a 13 	lds	r24, 0x139A	; 0x80139a <_twiCurrentHandler>
    503a:	90 91 9b 13 	lds	r25, 0x139B	; 0x80139b <_twiCurrentHandler+0x1>
    503e:	dc 01       	movw	r26, r24
    5040:	12 96       	adiw	r26, 0x02	; 2
    5042:	ed 91       	ld	r30, X+
    5044:	fc 91       	ld	r31, X
    5046:	13 97       	sbiw	r26, 0x03	; 3
    5048:	30 97       	sbiw	r30, 0x00	; 0
    504a:	31 f0       	breq	.+12     	; 0x5058 <__vector_39+0x154>
    504c:	20 e0       	ldi	r18, 0x00	; 0
    504e:	40 e0       	ldi	r20, 0x00	; 0
    5050:	50 e0       	ldi	r21, 0x00	; 0
    5052:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5056:	19 95       	eicall
    5058:	ff 91       	pop	r31
    505a:	ef 91       	pop	r30
    505c:	bf 91       	pop	r27
    505e:	af 91       	pop	r26
    5060:	9f 91       	pop	r25
    5062:	8f 91       	pop	r24
    5064:	7f 91       	pop	r23
    5066:	6f 91       	pop	r22
    5068:	5f 91       	pop	r21
    506a:	4f 91       	pop	r20
    506c:	3f 91       	pop	r19
    506e:	2f 91       	pop	r18
    5070:	0f 90       	pop	r0
    5072:	0b be       	out	0x3b, r0	; 59
    5074:	0f 90       	pop	r0
    5076:	0f be       	out	0x3f, r0	; 63
    5078:	0f 90       	pop	r0
    507a:	1f 90       	pop	r1
    507c:	18 95       	reti

0000507e <fifo_init>:
    507e:	fc 01       	movw	r30, r24
    5080:	41 11       	cpse	r20, r1
    5082:	01 c0       	rjmp	.+2      	; 0x5086 <fifo_init+0x8>
    5084:	2f d3       	rcall	.+1630   	; 0x56e4 <abort>
    5086:	84 2f       	mov	r24, r20
    5088:	90 e0       	ldi	r25, 0x00	; 0
    508a:	9c 01       	movw	r18, r24
    508c:	21 50       	subi	r18, 0x01	; 1
    508e:	31 09       	sbc	r19, r1
    5090:	82 23       	and	r24, r18
    5092:	93 23       	and	r25, r19
    5094:	89 2b       	or	r24, r25
    5096:	09 f0       	breq	.+2      	; 0x509a <fifo_init+0x1c>
    5098:	25 d3       	rcall	.+1610   	; 0x56e4 <abort>
    509a:	41 38       	cpi	r20, 0x81	; 129
    509c:	08 f0       	brcs	.+2      	; 0x50a0 <fifo_init+0x22>
    509e:	22 d3       	rcall	.+1604   	; 0x56e4 <abort>
    50a0:	12 82       	std	Z+2, r1	; 0x02
    50a2:	13 82       	std	Z+3, r1	; 0x03
    50a4:	44 83       	std	Z+4, r20	; 0x04
    50a6:	44 0f       	add	r20, r20
    50a8:	41 50       	subi	r20, 0x01	; 1
    50aa:	45 83       	std	Z+5, r20	; 0x05
    50ac:	71 83       	std	Z+1, r23	; 0x01
    50ae:	60 83       	st	Z, r22
    50b0:	80 e0       	ldi	r24, 0x00	; 0
    50b2:	90 e0       	ldi	r25, 0x00	; 0
    50b4:	08 95       	ret

000050b6 <__subsf3>:
    50b6:	50 58       	subi	r21, 0x80	; 128

000050b8 <__addsf3>:
    50b8:	bb 27       	eor	r27, r27
    50ba:	aa 27       	eor	r26, r26
    50bc:	0e d0       	rcall	.+28     	; 0x50da <__addsf3x>
    50be:	28 c1       	rjmp	.+592    	; 0x5310 <__fp_round>
    50c0:	19 d1       	rcall	.+562    	; 0x52f4 <__fp_pscA>
    50c2:	30 f0       	brcs	.+12     	; 0x50d0 <__addsf3+0x18>
    50c4:	1e d1       	rcall	.+572    	; 0x5302 <__fp_pscB>
    50c6:	20 f0       	brcs	.+8      	; 0x50d0 <__addsf3+0x18>
    50c8:	31 f4       	brne	.+12     	; 0x50d6 <__addsf3+0x1e>
    50ca:	9f 3f       	cpi	r25, 0xFF	; 255
    50cc:	11 f4       	brne	.+4      	; 0x50d2 <__addsf3+0x1a>
    50ce:	1e f4       	brtc	.+6      	; 0x50d6 <__addsf3+0x1e>
    50d0:	0e c1       	rjmp	.+540    	; 0x52ee <__fp_nan>
    50d2:	0e f4       	brtc	.+2      	; 0x50d6 <__addsf3+0x1e>
    50d4:	e0 95       	com	r30
    50d6:	e7 fb       	bst	r30, 7
    50d8:	04 c1       	rjmp	.+520    	; 0x52e2 <__fp_inf>

000050da <__addsf3x>:
    50da:	e9 2f       	mov	r30, r25
    50dc:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__fp_split3>
    50e0:	78 f3       	brcs	.-34     	; 0x50c0 <__addsf3+0x8>
    50e2:	ba 17       	cp	r27, r26
    50e4:	62 07       	cpc	r22, r18
    50e6:	73 07       	cpc	r23, r19
    50e8:	84 07       	cpc	r24, r20
    50ea:	95 07       	cpc	r25, r21
    50ec:	20 f0       	brcs	.+8      	; 0x50f6 <__addsf3x+0x1c>
    50ee:	79 f4       	brne	.+30     	; 0x510e <__addsf3x+0x34>
    50f0:	a6 f5       	brtc	.+104    	; 0x515a <__addsf3x+0x80>
    50f2:	0c 94 7f 1b 	jmp	0x36fe	; 0x36fe <__fp_zero>
    50f6:	0e f4       	brtc	.+2      	; 0x50fa <__addsf3x+0x20>
    50f8:	e0 95       	com	r30
    50fa:	0b 2e       	mov	r0, r27
    50fc:	ba 2f       	mov	r27, r26
    50fe:	a0 2d       	mov	r26, r0
    5100:	0b 01       	movw	r0, r22
    5102:	b9 01       	movw	r22, r18
    5104:	90 01       	movw	r18, r0
    5106:	0c 01       	movw	r0, r24
    5108:	ca 01       	movw	r24, r20
    510a:	a0 01       	movw	r20, r0
    510c:	11 24       	eor	r1, r1
    510e:	ff 27       	eor	r31, r31
    5110:	59 1b       	sub	r21, r25
    5112:	99 f0       	breq	.+38     	; 0x513a <__addsf3x+0x60>
    5114:	59 3f       	cpi	r21, 0xF9	; 249
    5116:	50 f4       	brcc	.+20     	; 0x512c <__addsf3x+0x52>
    5118:	50 3e       	cpi	r21, 0xE0	; 224
    511a:	68 f1       	brcs	.+90     	; 0x5176 <__addsf3x+0x9c>
    511c:	1a 16       	cp	r1, r26
    511e:	f0 40       	sbci	r31, 0x00	; 0
    5120:	a2 2f       	mov	r26, r18
    5122:	23 2f       	mov	r18, r19
    5124:	34 2f       	mov	r19, r20
    5126:	44 27       	eor	r20, r20
    5128:	58 5f       	subi	r21, 0xF8	; 248
    512a:	f3 cf       	rjmp	.-26     	; 0x5112 <__addsf3x+0x38>
    512c:	46 95       	lsr	r20
    512e:	37 95       	ror	r19
    5130:	27 95       	ror	r18
    5132:	a7 95       	ror	r26
    5134:	f0 40       	sbci	r31, 0x00	; 0
    5136:	53 95       	inc	r21
    5138:	c9 f7       	brne	.-14     	; 0x512c <__addsf3x+0x52>
    513a:	7e f4       	brtc	.+30     	; 0x515a <__addsf3x+0x80>
    513c:	1f 16       	cp	r1, r31
    513e:	ba 0b       	sbc	r27, r26
    5140:	62 0b       	sbc	r22, r18
    5142:	73 0b       	sbc	r23, r19
    5144:	84 0b       	sbc	r24, r20
    5146:	ba f0       	brmi	.+46     	; 0x5176 <__addsf3x+0x9c>
    5148:	91 50       	subi	r25, 0x01	; 1
    514a:	a1 f0       	breq	.+40     	; 0x5174 <__addsf3x+0x9a>
    514c:	ff 0f       	add	r31, r31
    514e:	bb 1f       	adc	r27, r27
    5150:	66 1f       	adc	r22, r22
    5152:	77 1f       	adc	r23, r23
    5154:	88 1f       	adc	r24, r24
    5156:	c2 f7       	brpl	.-16     	; 0x5148 <__addsf3x+0x6e>
    5158:	0e c0       	rjmp	.+28     	; 0x5176 <__addsf3x+0x9c>
    515a:	ba 0f       	add	r27, r26
    515c:	62 1f       	adc	r22, r18
    515e:	73 1f       	adc	r23, r19
    5160:	84 1f       	adc	r24, r20
    5162:	48 f4       	brcc	.+18     	; 0x5176 <__addsf3x+0x9c>
    5164:	87 95       	ror	r24
    5166:	77 95       	ror	r23
    5168:	67 95       	ror	r22
    516a:	b7 95       	ror	r27
    516c:	f7 95       	ror	r31
    516e:	9e 3f       	cpi	r25, 0xFE	; 254
    5170:	08 f0       	brcs	.+2      	; 0x5174 <__addsf3x+0x9a>
    5172:	b1 cf       	rjmp	.-158    	; 0x50d6 <__addsf3+0x1e>
    5174:	93 95       	inc	r25
    5176:	88 0f       	add	r24, r24
    5178:	08 f0       	brcs	.+2      	; 0x517c <__addsf3x+0xa2>
    517a:	99 27       	eor	r25, r25
    517c:	ee 0f       	add	r30, r30
    517e:	97 95       	ror	r25
    5180:	87 95       	ror	r24
    5182:	08 95       	ret

00005184 <__divsf3>:
    5184:	0d d0       	rcall	.+26     	; 0x51a0 <__divsf3x>
    5186:	c4 c0       	rjmp	.+392    	; 0x5310 <__fp_round>
    5188:	bc d0       	rcall	.+376    	; 0x5302 <__fp_pscB>
    518a:	48 f0       	brcs	.+18     	; 0x519e <__divsf3+0x1a>
    518c:	b3 d0       	rcall	.+358    	; 0x52f4 <__fp_pscA>
    518e:	38 f0       	brcs	.+14     	; 0x519e <__divsf3+0x1a>
    5190:	21 f4       	brne	.+8      	; 0x519a <__divsf3+0x16>
    5192:	5f 3f       	cpi	r21, 0xFF	; 255
    5194:	21 f0       	breq	.+8      	; 0x519e <__divsf3+0x1a>
    5196:	a5 c0       	rjmp	.+330    	; 0x52e2 <__fp_inf>
    5198:	51 11       	cpse	r21, r1
    519a:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__fp_szero>
    519e:	a7 c0       	rjmp	.+334    	; 0x52ee <__fp_nan>

000051a0 <__divsf3x>:
    51a0:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__fp_split3>
    51a4:	88 f3       	brcs	.-30     	; 0x5188 <__divsf3+0x4>

000051a6 <__divsf3_pse>:
    51a6:	99 23       	and	r25, r25
    51a8:	b9 f3       	breq	.-18     	; 0x5198 <__divsf3+0x14>
    51aa:	55 23       	and	r21, r21
    51ac:	a1 f3       	breq	.-24     	; 0x5196 <__divsf3+0x12>
    51ae:	95 1b       	sub	r25, r21
    51b0:	55 0b       	sbc	r21, r21
    51b2:	bb 27       	eor	r27, r27
    51b4:	aa 27       	eor	r26, r26
    51b6:	62 17       	cp	r22, r18
    51b8:	73 07       	cpc	r23, r19
    51ba:	84 07       	cpc	r24, r20
    51bc:	38 f0       	brcs	.+14     	; 0x51cc <__divsf3_pse+0x26>
    51be:	9f 5f       	subi	r25, 0xFF	; 255
    51c0:	5f 4f       	sbci	r21, 0xFF	; 255
    51c2:	22 0f       	add	r18, r18
    51c4:	33 1f       	adc	r19, r19
    51c6:	44 1f       	adc	r20, r20
    51c8:	aa 1f       	adc	r26, r26
    51ca:	a9 f3       	breq	.-22     	; 0x51b6 <__divsf3_pse+0x10>
    51cc:	34 d0       	rcall	.+104    	; 0x5236 <__divsf3_pse+0x90>
    51ce:	0e 2e       	mov	r0, r30
    51d0:	3a f0       	brmi	.+14     	; 0x51e0 <__divsf3_pse+0x3a>
    51d2:	e0 e8       	ldi	r30, 0x80	; 128
    51d4:	31 d0       	rcall	.+98     	; 0x5238 <__divsf3_pse+0x92>
    51d6:	91 50       	subi	r25, 0x01	; 1
    51d8:	50 40       	sbci	r21, 0x00	; 0
    51da:	e6 95       	lsr	r30
    51dc:	00 1c       	adc	r0, r0
    51de:	ca f7       	brpl	.-14     	; 0x51d2 <__divsf3_pse+0x2c>
    51e0:	2a d0       	rcall	.+84     	; 0x5236 <__divsf3_pse+0x90>
    51e2:	fe 2f       	mov	r31, r30
    51e4:	28 d0       	rcall	.+80     	; 0x5236 <__divsf3_pse+0x90>
    51e6:	66 0f       	add	r22, r22
    51e8:	77 1f       	adc	r23, r23
    51ea:	88 1f       	adc	r24, r24
    51ec:	bb 1f       	adc	r27, r27
    51ee:	26 17       	cp	r18, r22
    51f0:	37 07       	cpc	r19, r23
    51f2:	48 07       	cpc	r20, r24
    51f4:	ab 07       	cpc	r26, r27
    51f6:	b0 e8       	ldi	r27, 0x80	; 128
    51f8:	09 f0       	breq	.+2      	; 0x51fc <__divsf3_pse+0x56>
    51fa:	bb 0b       	sbc	r27, r27
    51fc:	80 2d       	mov	r24, r0
    51fe:	bf 01       	movw	r22, r30
    5200:	ff 27       	eor	r31, r31
    5202:	93 58       	subi	r25, 0x83	; 131
    5204:	5f 4f       	sbci	r21, 0xFF	; 255
    5206:	32 f0       	brmi	.+12     	; 0x5214 <__divsf3_pse+0x6e>
    5208:	9e 3f       	cpi	r25, 0xFE	; 254
    520a:	51 05       	cpc	r21, r1
    520c:	70 f0       	brcs	.+28     	; 0x522a <__divsf3_pse+0x84>
    520e:	69 c0       	rjmp	.+210    	; 0x52e2 <__fp_inf>
    5210:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__fp_szero>
    5214:	5f 3f       	cpi	r21, 0xFF	; 255
    5216:	e4 f3       	brlt	.-8      	; 0x5210 <__divsf3_pse+0x6a>
    5218:	98 3e       	cpi	r25, 0xE8	; 232
    521a:	d4 f3       	brlt	.-12     	; 0x5210 <__divsf3_pse+0x6a>
    521c:	86 95       	lsr	r24
    521e:	77 95       	ror	r23
    5220:	67 95       	ror	r22
    5222:	b7 95       	ror	r27
    5224:	f7 95       	ror	r31
    5226:	9f 5f       	subi	r25, 0xFF	; 255
    5228:	c9 f7       	brne	.-14     	; 0x521c <__divsf3_pse+0x76>
    522a:	88 0f       	add	r24, r24
    522c:	91 1d       	adc	r25, r1
    522e:	96 95       	lsr	r25
    5230:	87 95       	ror	r24
    5232:	97 f9       	bld	r25, 7
    5234:	08 95       	ret
    5236:	e1 e0       	ldi	r30, 0x01	; 1
    5238:	66 0f       	add	r22, r22
    523a:	77 1f       	adc	r23, r23
    523c:	88 1f       	adc	r24, r24
    523e:	bb 1f       	adc	r27, r27
    5240:	62 17       	cp	r22, r18
    5242:	73 07       	cpc	r23, r19
    5244:	84 07       	cpc	r24, r20
    5246:	ba 07       	cpc	r27, r26
    5248:	20 f0       	brcs	.+8      	; 0x5252 <__divsf3_pse+0xac>
    524a:	62 1b       	sub	r22, r18
    524c:	73 0b       	sbc	r23, r19
    524e:	84 0b       	sbc	r24, r20
    5250:	ba 0b       	sbc	r27, r26
    5252:	ee 1f       	adc	r30, r30
    5254:	88 f7       	brcc	.-30     	; 0x5238 <__divsf3_pse+0x92>
    5256:	e0 95       	com	r30
    5258:	08 95       	ret

0000525a <__fixsfsi>:
    525a:	0e 94 31 1b 	call	0x3662	; 0x3662 <__fixunssfsi>
    525e:	68 94       	set
    5260:	b1 11       	cpse	r27, r1
    5262:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__fp_szero>
    5266:	08 95       	ret

00005268 <__floatunsisf>:
    5268:	e8 94       	clt
    526a:	09 c0       	rjmp	.+18     	; 0x527e <__floatsisf+0x12>

0000526c <__floatsisf>:
    526c:	97 fb       	bst	r25, 7
    526e:	3e f4       	brtc	.+14     	; 0x527e <__floatsisf+0x12>
    5270:	90 95       	com	r25
    5272:	80 95       	com	r24
    5274:	70 95       	com	r23
    5276:	61 95       	neg	r22
    5278:	7f 4f       	sbci	r23, 0xFF	; 255
    527a:	8f 4f       	sbci	r24, 0xFF	; 255
    527c:	9f 4f       	sbci	r25, 0xFF	; 255
    527e:	99 23       	and	r25, r25
    5280:	a9 f0       	breq	.+42     	; 0x52ac <__floatsisf+0x40>
    5282:	f9 2f       	mov	r31, r25
    5284:	96 e9       	ldi	r25, 0x96	; 150
    5286:	bb 27       	eor	r27, r27
    5288:	93 95       	inc	r25
    528a:	f6 95       	lsr	r31
    528c:	87 95       	ror	r24
    528e:	77 95       	ror	r23
    5290:	67 95       	ror	r22
    5292:	b7 95       	ror	r27
    5294:	f1 11       	cpse	r31, r1
    5296:	f8 cf       	rjmp	.-16     	; 0x5288 <__floatsisf+0x1c>
    5298:	fa f4       	brpl	.+62     	; 0x52d8 <__floatsisf+0x6c>
    529a:	bb 0f       	add	r27, r27
    529c:	11 f4       	brne	.+4      	; 0x52a2 <__floatsisf+0x36>
    529e:	60 ff       	sbrs	r22, 0
    52a0:	1b c0       	rjmp	.+54     	; 0x52d8 <__floatsisf+0x6c>
    52a2:	6f 5f       	subi	r22, 0xFF	; 255
    52a4:	7f 4f       	sbci	r23, 0xFF	; 255
    52a6:	8f 4f       	sbci	r24, 0xFF	; 255
    52a8:	9f 4f       	sbci	r25, 0xFF	; 255
    52aa:	16 c0       	rjmp	.+44     	; 0x52d8 <__floatsisf+0x6c>
    52ac:	88 23       	and	r24, r24
    52ae:	11 f0       	breq	.+4      	; 0x52b4 <__floatsisf+0x48>
    52b0:	96 e9       	ldi	r25, 0x96	; 150
    52b2:	11 c0       	rjmp	.+34     	; 0x52d6 <__floatsisf+0x6a>
    52b4:	77 23       	and	r23, r23
    52b6:	21 f0       	breq	.+8      	; 0x52c0 <__floatsisf+0x54>
    52b8:	9e e8       	ldi	r25, 0x8E	; 142
    52ba:	87 2f       	mov	r24, r23
    52bc:	76 2f       	mov	r23, r22
    52be:	05 c0       	rjmp	.+10     	; 0x52ca <__floatsisf+0x5e>
    52c0:	66 23       	and	r22, r22
    52c2:	71 f0       	breq	.+28     	; 0x52e0 <__floatsisf+0x74>
    52c4:	96 e8       	ldi	r25, 0x86	; 134
    52c6:	86 2f       	mov	r24, r22
    52c8:	70 e0       	ldi	r23, 0x00	; 0
    52ca:	60 e0       	ldi	r22, 0x00	; 0
    52cc:	2a f0       	brmi	.+10     	; 0x52d8 <__floatsisf+0x6c>
    52ce:	9a 95       	dec	r25
    52d0:	66 0f       	add	r22, r22
    52d2:	77 1f       	adc	r23, r23
    52d4:	88 1f       	adc	r24, r24
    52d6:	da f7       	brpl	.-10     	; 0x52ce <__floatsisf+0x62>
    52d8:	88 0f       	add	r24, r24
    52da:	96 95       	lsr	r25
    52dc:	87 95       	ror	r24
    52de:	97 f9       	bld	r25, 7
    52e0:	08 95       	ret

000052e2 <__fp_inf>:
    52e2:	97 f9       	bld	r25, 7
    52e4:	9f 67       	ori	r25, 0x7F	; 127
    52e6:	80 e8       	ldi	r24, 0x80	; 128
    52e8:	70 e0       	ldi	r23, 0x00	; 0
    52ea:	60 e0       	ldi	r22, 0x00	; 0
    52ec:	08 95       	ret

000052ee <__fp_nan>:
    52ee:	9f ef       	ldi	r25, 0xFF	; 255
    52f0:	80 ec       	ldi	r24, 0xC0	; 192
    52f2:	08 95       	ret

000052f4 <__fp_pscA>:
    52f4:	00 24       	eor	r0, r0
    52f6:	0a 94       	dec	r0
    52f8:	16 16       	cp	r1, r22
    52fa:	17 06       	cpc	r1, r23
    52fc:	18 06       	cpc	r1, r24
    52fe:	09 06       	cpc	r0, r25
    5300:	08 95       	ret

00005302 <__fp_pscB>:
    5302:	00 24       	eor	r0, r0
    5304:	0a 94       	dec	r0
    5306:	12 16       	cp	r1, r18
    5308:	13 06       	cpc	r1, r19
    530a:	14 06       	cpc	r1, r20
    530c:	05 06       	cpc	r0, r21
    530e:	08 95       	ret

00005310 <__fp_round>:
    5310:	09 2e       	mov	r0, r25
    5312:	03 94       	inc	r0
    5314:	00 0c       	add	r0, r0
    5316:	11 f4       	brne	.+4      	; 0x531c <__fp_round+0xc>
    5318:	88 23       	and	r24, r24
    531a:	52 f0       	brmi	.+20     	; 0x5330 <__fp_round+0x20>
    531c:	bb 0f       	add	r27, r27
    531e:	40 f4       	brcc	.+16     	; 0x5330 <__fp_round+0x20>
    5320:	bf 2b       	or	r27, r31
    5322:	11 f4       	brne	.+4      	; 0x5328 <__fp_round+0x18>
    5324:	60 ff       	sbrs	r22, 0
    5326:	04 c0       	rjmp	.+8      	; 0x5330 <__fp_round+0x20>
    5328:	6f 5f       	subi	r22, 0xFF	; 255
    532a:	7f 4f       	sbci	r23, 0xFF	; 255
    532c:	8f 4f       	sbci	r24, 0xFF	; 255
    532e:	9f 4f       	sbci	r25, 0xFF	; 255
    5330:	08 95       	ret

00005332 <__gesf2>:
    5332:	69 d0       	rcall	.+210    	; 0x5406 <__fp_cmp>
    5334:	08 f4       	brcc	.+2      	; 0x5338 <__gesf2+0x6>
    5336:	8f ef       	ldi	r24, 0xFF	; 255
    5338:	08 95       	ret

0000533a <__mulsf3>:
    533a:	0c d0       	rcall	.+24     	; 0x5354 <__mulsf3x>
    533c:	e9 cf       	rjmp	.-46     	; 0x5310 <__fp_round>
    533e:	da df       	rcall	.-76     	; 0x52f4 <__fp_pscA>
    5340:	28 f0       	brcs	.+10     	; 0x534c <__mulsf3+0x12>
    5342:	df df       	rcall	.-66     	; 0x5302 <__fp_pscB>
    5344:	18 f0       	brcs	.+6      	; 0x534c <__mulsf3+0x12>
    5346:	95 23       	and	r25, r21
    5348:	09 f0       	breq	.+2      	; 0x534c <__mulsf3+0x12>
    534a:	cb cf       	rjmp	.-106    	; 0x52e2 <__fp_inf>
    534c:	d0 cf       	rjmp	.-96     	; 0x52ee <__fp_nan>
    534e:	11 24       	eor	r1, r1
    5350:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__fp_szero>

00005354 <__mulsf3x>:
    5354:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__fp_split3>
    5358:	90 f3       	brcs	.-28     	; 0x533e <__mulsf3+0x4>

0000535a <__mulsf3_pse>:
    535a:	95 9f       	mul	r25, r21
    535c:	c1 f3       	breq	.-16     	; 0x534e <__mulsf3+0x14>
    535e:	95 0f       	add	r25, r21
    5360:	50 e0       	ldi	r21, 0x00	; 0
    5362:	55 1f       	adc	r21, r21
    5364:	62 9f       	mul	r22, r18
    5366:	f0 01       	movw	r30, r0
    5368:	72 9f       	mul	r23, r18
    536a:	bb 27       	eor	r27, r27
    536c:	f0 0d       	add	r31, r0
    536e:	b1 1d       	adc	r27, r1
    5370:	63 9f       	mul	r22, r19
    5372:	aa 27       	eor	r26, r26
    5374:	f0 0d       	add	r31, r0
    5376:	b1 1d       	adc	r27, r1
    5378:	aa 1f       	adc	r26, r26
    537a:	64 9f       	mul	r22, r20
    537c:	66 27       	eor	r22, r22
    537e:	b0 0d       	add	r27, r0
    5380:	a1 1d       	adc	r26, r1
    5382:	66 1f       	adc	r22, r22
    5384:	82 9f       	mul	r24, r18
    5386:	22 27       	eor	r18, r18
    5388:	b0 0d       	add	r27, r0
    538a:	a1 1d       	adc	r26, r1
    538c:	62 1f       	adc	r22, r18
    538e:	73 9f       	mul	r23, r19
    5390:	b0 0d       	add	r27, r0
    5392:	a1 1d       	adc	r26, r1
    5394:	62 1f       	adc	r22, r18
    5396:	83 9f       	mul	r24, r19
    5398:	a0 0d       	add	r26, r0
    539a:	61 1d       	adc	r22, r1
    539c:	22 1f       	adc	r18, r18
    539e:	74 9f       	mul	r23, r20
    53a0:	33 27       	eor	r19, r19
    53a2:	a0 0d       	add	r26, r0
    53a4:	61 1d       	adc	r22, r1
    53a6:	23 1f       	adc	r18, r19
    53a8:	84 9f       	mul	r24, r20
    53aa:	60 0d       	add	r22, r0
    53ac:	21 1d       	adc	r18, r1
    53ae:	82 2f       	mov	r24, r18
    53b0:	76 2f       	mov	r23, r22
    53b2:	6a 2f       	mov	r22, r26
    53b4:	11 24       	eor	r1, r1
    53b6:	9f 57       	subi	r25, 0x7F	; 127
    53b8:	50 40       	sbci	r21, 0x00	; 0
    53ba:	92 f0       	brmi	.+36     	; 0x53e0 <__mulsf3_pse+0x86>
    53bc:	e9 f0       	breq	.+58     	; 0x53f8 <__mulsf3_pse+0x9e>
    53be:	88 23       	and	r24, r24
    53c0:	4a f0       	brmi	.+18     	; 0x53d4 <__mulsf3_pse+0x7a>
    53c2:	ee 0f       	add	r30, r30
    53c4:	ff 1f       	adc	r31, r31
    53c6:	bb 1f       	adc	r27, r27
    53c8:	66 1f       	adc	r22, r22
    53ca:	77 1f       	adc	r23, r23
    53cc:	88 1f       	adc	r24, r24
    53ce:	91 50       	subi	r25, 0x01	; 1
    53d0:	50 40       	sbci	r21, 0x00	; 0
    53d2:	a9 f7       	brne	.-22     	; 0x53be <__mulsf3_pse+0x64>
    53d4:	9e 3f       	cpi	r25, 0xFE	; 254
    53d6:	51 05       	cpc	r21, r1
    53d8:	78 f0       	brcs	.+30     	; 0x53f8 <__mulsf3_pse+0x9e>
    53da:	83 cf       	rjmp	.-250    	; 0x52e2 <__fp_inf>
    53dc:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__fp_szero>
    53e0:	5f 3f       	cpi	r21, 0xFF	; 255
    53e2:	e4 f3       	brlt	.-8      	; 0x53dc <__mulsf3_pse+0x82>
    53e4:	98 3e       	cpi	r25, 0xE8	; 232
    53e6:	d4 f3       	brlt	.-12     	; 0x53dc <__mulsf3_pse+0x82>
    53e8:	86 95       	lsr	r24
    53ea:	77 95       	ror	r23
    53ec:	67 95       	ror	r22
    53ee:	b7 95       	ror	r27
    53f0:	f7 95       	ror	r31
    53f2:	e7 95       	ror	r30
    53f4:	9f 5f       	subi	r25, 0xFF	; 255
    53f6:	c1 f7       	brne	.-16     	; 0x53e8 <__mulsf3_pse+0x8e>
    53f8:	fe 2b       	or	r31, r30
    53fa:	88 0f       	add	r24, r24
    53fc:	91 1d       	adc	r25, r1
    53fe:	96 95       	lsr	r25
    5400:	87 95       	ror	r24
    5402:	97 f9       	bld	r25, 7
    5404:	08 95       	ret

00005406 <__fp_cmp>:
    5406:	99 0f       	add	r25, r25
    5408:	00 08       	sbc	r0, r0
    540a:	55 0f       	add	r21, r21
    540c:	aa 0b       	sbc	r26, r26
    540e:	e0 e8       	ldi	r30, 0x80	; 128
    5410:	fe ef       	ldi	r31, 0xFE	; 254
    5412:	16 16       	cp	r1, r22
    5414:	17 06       	cpc	r1, r23
    5416:	e8 07       	cpc	r30, r24
    5418:	f9 07       	cpc	r31, r25
    541a:	c0 f0       	brcs	.+48     	; 0x544c <__fp_cmp+0x46>
    541c:	12 16       	cp	r1, r18
    541e:	13 06       	cpc	r1, r19
    5420:	e4 07       	cpc	r30, r20
    5422:	f5 07       	cpc	r31, r21
    5424:	98 f0       	brcs	.+38     	; 0x544c <__fp_cmp+0x46>
    5426:	62 1b       	sub	r22, r18
    5428:	73 0b       	sbc	r23, r19
    542a:	84 0b       	sbc	r24, r20
    542c:	95 0b       	sbc	r25, r21
    542e:	39 f4       	brne	.+14     	; 0x543e <__fp_cmp+0x38>
    5430:	0a 26       	eor	r0, r26
    5432:	61 f0       	breq	.+24     	; 0x544c <__fp_cmp+0x46>
    5434:	23 2b       	or	r18, r19
    5436:	24 2b       	or	r18, r20
    5438:	25 2b       	or	r18, r21
    543a:	21 f4       	brne	.+8      	; 0x5444 <__fp_cmp+0x3e>
    543c:	08 95       	ret
    543e:	0a 26       	eor	r0, r26
    5440:	09 f4       	brne	.+2      	; 0x5444 <__fp_cmp+0x3e>
    5442:	a1 40       	sbci	r26, 0x01	; 1
    5444:	a6 95       	lsr	r26
    5446:	8f ef       	ldi	r24, 0xFF	; 255
    5448:	81 1d       	adc	r24, r1
    544a:	81 1d       	adc	r24, r1
    544c:	08 95       	ret

0000544e <__udivmodsi4>:
    544e:	a1 e2       	ldi	r26, 0x21	; 33
    5450:	1a 2e       	mov	r1, r26
    5452:	aa 1b       	sub	r26, r26
    5454:	bb 1b       	sub	r27, r27
    5456:	fd 01       	movw	r30, r26
    5458:	0d c0       	rjmp	.+26     	; 0x5474 <__udivmodsi4_ep>

0000545a <__udivmodsi4_loop>:
    545a:	aa 1f       	adc	r26, r26
    545c:	bb 1f       	adc	r27, r27
    545e:	ee 1f       	adc	r30, r30
    5460:	ff 1f       	adc	r31, r31
    5462:	a2 17       	cp	r26, r18
    5464:	b3 07       	cpc	r27, r19
    5466:	e4 07       	cpc	r30, r20
    5468:	f5 07       	cpc	r31, r21
    546a:	20 f0       	brcs	.+8      	; 0x5474 <__udivmodsi4_ep>
    546c:	a2 1b       	sub	r26, r18
    546e:	b3 0b       	sbc	r27, r19
    5470:	e4 0b       	sbc	r30, r20
    5472:	f5 0b       	sbc	r31, r21

00005474 <__udivmodsi4_ep>:
    5474:	66 1f       	adc	r22, r22
    5476:	77 1f       	adc	r23, r23
    5478:	88 1f       	adc	r24, r24
    547a:	99 1f       	adc	r25, r25
    547c:	1a 94       	dec	r1
    547e:	69 f7       	brne	.-38     	; 0x545a <__udivmodsi4_loop>
    5480:	60 95       	com	r22
    5482:	70 95       	com	r23
    5484:	80 95       	com	r24
    5486:	90 95       	com	r25
    5488:	9b 01       	movw	r18, r22
    548a:	ac 01       	movw	r20, r24
    548c:	bd 01       	movw	r22, r26
    548e:	cf 01       	movw	r24, r30
    5490:	08 95       	ret

00005492 <__tablejump2__>:
    5492:	ee 0f       	add	r30, r30
    5494:	ff 1f       	adc	r31, r31
    5496:	88 1f       	adc	r24, r24
    5498:	8b bf       	out	0x3b, r24	; 59
    549a:	07 90       	elpm	r0, Z+
    549c:	f6 91       	elpm	r31, Z
    549e:	e0 2d       	mov	r30, r0
    54a0:	19 94       	eijmp

000054a2 <malloc>:
    54a2:	0f 93       	push	r16
    54a4:	1f 93       	push	r17
    54a6:	cf 93       	push	r28
    54a8:	df 93       	push	r29
    54aa:	82 30       	cpi	r24, 0x02	; 2
    54ac:	91 05       	cpc	r25, r1
    54ae:	10 f4       	brcc	.+4      	; 0x54b4 <malloc+0x12>
    54b0:	82 e0       	ldi	r24, 0x02	; 2
    54b2:	90 e0       	ldi	r25, 0x00	; 0
    54b4:	e0 91 be 13 	lds	r30, 0x13BE	; 0x8013be <__flp>
    54b8:	f0 91 bf 13 	lds	r31, 0x13BF	; 0x8013bf <__flp+0x1>
    54bc:	20 e0       	ldi	r18, 0x00	; 0
    54be:	30 e0       	ldi	r19, 0x00	; 0
    54c0:	a0 e0       	ldi	r26, 0x00	; 0
    54c2:	b0 e0       	ldi	r27, 0x00	; 0
    54c4:	30 97       	sbiw	r30, 0x00	; 0
    54c6:	19 f1       	breq	.+70     	; 0x550e <malloc+0x6c>
    54c8:	40 81       	ld	r20, Z
    54ca:	51 81       	ldd	r21, Z+1	; 0x01
    54cc:	02 81       	ldd	r16, Z+2	; 0x02
    54ce:	13 81       	ldd	r17, Z+3	; 0x03
    54d0:	48 17       	cp	r20, r24
    54d2:	59 07       	cpc	r21, r25
    54d4:	c8 f0       	brcs	.+50     	; 0x5508 <malloc+0x66>
    54d6:	84 17       	cp	r24, r20
    54d8:	95 07       	cpc	r25, r21
    54da:	69 f4       	brne	.+26     	; 0x54f6 <malloc+0x54>
    54dc:	10 97       	sbiw	r26, 0x00	; 0
    54de:	31 f0       	breq	.+12     	; 0x54ec <malloc+0x4a>
    54e0:	12 96       	adiw	r26, 0x02	; 2
    54e2:	0c 93       	st	X, r16
    54e4:	12 97       	sbiw	r26, 0x02	; 2
    54e6:	13 96       	adiw	r26, 0x03	; 3
    54e8:	1c 93       	st	X, r17
    54ea:	27 c0       	rjmp	.+78     	; 0x553a <malloc+0x98>
    54ec:	00 93 be 13 	sts	0x13BE, r16	; 0x8013be <__flp>
    54f0:	10 93 bf 13 	sts	0x13BF, r17	; 0x8013bf <__flp+0x1>
    54f4:	22 c0       	rjmp	.+68     	; 0x553a <malloc+0x98>
    54f6:	21 15       	cp	r18, r1
    54f8:	31 05       	cpc	r19, r1
    54fa:	19 f0       	breq	.+6      	; 0x5502 <malloc+0x60>
    54fc:	42 17       	cp	r20, r18
    54fe:	53 07       	cpc	r21, r19
    5500:	18 f4       	brcc	.+6      	; 0x5508 <malloc+0x66>
    5502:	9a 01       	movw	r18, r20
    5504:	bd 01       	movw	r22, r26
    5506:	ef 01       	movw	r28, r30
    5508:	df 01       	movw	r26, r30
    550a:	f8 01       	movw	r30, r16
    550c:	db cf       	rjmp	.-74     	; 0x54c4 <malloc+0x22>
    550e:	21 15       	cp	r18, r1
    5510:	31 05       	cpc	r19, r1
    5512:	f9 f0       	breq	.+62     	; 0x5552 <malloc+0xb0>
    5514:	28 1b       	sub	r18, r24
    5516:	39 0b       	sbc	r19, r25
    5518:	24 30       	cpi	r18, 0x04	; 4
    551a:	31 05       	cpc	r19, r1
    551c:	80 f4       	brcc	.+32     	; 0x553e <malloc+0x9c>
    551e:	8a 81       	ldd	r24, Y+2	; 0x02
    5520:	9b 81       	ldd	r25, Y+3	; 0x03
    5522:	61 15       	cp	r22, r1
    5524:	71 05       	cpc	r23, r1
    5526:	21 f0       	breq	.+8      	; 0x5530 <malloc+0x8e>
    5528:	fb 01       	movw	r30, r22
    552a:	93 83       	std	Z+3, r25	; 0x03
    552c:	82 83       	std	Z+2, r24	; 0x02
    552e:	04 c0       	rjmp	.+8      	; 0x5538 <malloc+0x96>
    5530:	90 93 bf 13 	sts	0x13BF, r25	; 0x8013bf <__flp+0x1>
    5534:	80 93 be 13 	sts	0x13BE, r24	; 0x8013be <__flp>
    5538:	fe 01       	movw	r30, r28
    553a:	32 96       	adiw	r30, 0x02	; 2
    553c:	44 c0       	rjmp	.+136    	; 0x55c6 <malloc+0x124>
    553e:	fe 01       	movw	r30, r28
    5540:	e2 0f       	add	r30, r18
    5542:	f3 1f       	adc	r31, r19
    5544:	81 93       	st	Z+, r24
    5546:	91 93       	st	Z+, r25
    5548:	22 50       	subi	r18, 0x02	; 2
    554a:	31 09       	sbc	r19, r1
    554c:	39 83       	std	Y+1, r19	; 0x01
    554e:	28 83       	st	Y, r18
    5550:	3a c0       	rjmp	.+116    	; 0x55c6 <malloc+0x124>
    5552:	20 91 bc 13 	lds	r18, 0x13BC	; 0x8013bc <__brkval>
    5556:	30 91 bd 13 	lds	r19, 0x13BD	; 0x8013bd <__brkval+0x1>
    555a:	23 2b       	or	r18, r19
    555c:	41 f4       	brne	.+16     	; 0x556e <malloc+0xcc>
    555e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5562:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5566:	30 93 bd 13 	sts	0x13BD, r19	; 0x8013bd <__brkval+0x1>
    556a:	20 93 bc 13 	sts	0x13BC, r18	; 0x8013bc <__brkval>
    556e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5572:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5576:	21 15       	cp	r18, r1
    5578:	31 05       	cpc	r19, r1
    557a:	41 f4       	brne	.+16     	; 0x558c <malloc+0xea>
    557c:	2d b7       	in	r18, 0x3d	; 61
    557e:	3e b7       	in	r19, 0x3e	; 62
    5580:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5584:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5588:	24 1b       	sub	r18, r20
    558a:	35 0b       	sbc	r19, r21
    558c:	e0 91 bc 13 	lds	r30, 0x13BC	; 0x8013bc <__brkval>
    5590:	f0 91 bd 13 	lds	r31, 0x13BD	; 0x8013bd <__brkval+0x1>
    5594:	e2 17       	cp	r30, r18
    5596:	f3 07       	cpc	r31, r19
    5598:	a0 f4       	brcc	.+40     	; 0x55c2 <malloc+0x120>
    559a:	2e 1b       	sub	r18, r30
    559c:	3f 0b       	sbc	r19, r31
    559e:	28 17       	cp	r18, r24
    55a0:	39 07       	cpc	r19, r25
    55a2:	78 f0       	brcs	.+30     	; 0x55c2 <malloc+0x120>
    55a4:	ac 01       	movw	r20, r24
    55a6:	4e 5f       	subi	r20, 0xFE	; 254
    55a8:	5f 4f       	sbci	r21, 0xFF	; 255
    55aa:	24 17       	cp	r18, r20
    55ac:	35 07       	cpc	r19, r21
    55ae:	48 f0       	brcs	.+18     	; 0x55c2 <malloc+0x120>
    55b0:	4e 0f       	add	r20, r30
    55b2:	5f 1f       	adc	r21, r31
    55b4:	50 93 bd 13 	sts	0x13BD, r21	; 0x8013bd <__brkval+0x1>
    55b8:	40 93 bc 13 	sts	0x13BC, r20	; 0x8013bc <__brkval>
    55bc:	81 93       	st	Z+, r24
    55be:	91 93       	st	Z+, r25
    55c0:	02 c0       	rjmp	.+4      	; 0x55c6 <malloc+0x124>
    55c2:	e0 e0       	ldi	r30, 0x00	; 0
    55c4:	f0 e0       	ldi	r31, 0x00	; 0
    55c6:	cf 01       	movw	r24, r30
    55c8:	df 91       	pop	r29
    55ca:	cf 91       	pop	r28
    55cc:	1f 91       	pop	r17
    55ce:	0f 91       	pop	r16
    55d0:	08 95       	ret

000055d2 <free>:
    55d2:	cf 93       	push	r28
    55d4:	df 93       	push	r29
    55d6:	00 97       	sbiw	r24, 0x00	; 0
    55d8:	09 f4       	brne	.+2      	; 0x55dc <free+0xa>
    55da:	81 c0       	rjmp	.+258    	; 0x56de <free+0x10c>
    55dc:	fc 01       	movw	r30, r24
    55de:	32 97       	sbiw	r30, 0x02	; 2
    55e0:	13 82       	std	Z+3, r1	; 0x03
    55e2:	12 82       	std	Z+2, r1	; 0x02
    55e4:	a0 91 be 13 	lds	r26, 0x13BE	; 0x8013be <__flp>
    55e8:	b0 91 bf 13 	lds	r27, 0x13BF	; 0x8013bf <__flp+0x1>
    55ec:	10 97       	sbiw	r26, 0x00	; 0
    55ee:	81 f4       	brne	.+32     	; 0x5610 <free+0x3e>
    55f0:	20 81       	ld	r18, Z
    55f2:	31 81       	ldd	r19, Z+1	; 0x01
    55f4:	82 0f       	add	r24, r18
    55f6:	93 1f       	adc	r25, r19
    55f8:	20 91 bc 13 	lds	r18, 0x13BC	; 0x8013bc <__brkval>
    55fc:	30 91 bd 13 	lds	r19, 0x13BD	; 0x8013bd <__brkval+0x1>
    5600:	28 17       	cp	r18, r24
    5602:	39 07       	cpc	r19, r25
    5604:	51 f5       	brne	.+84     	; 0x565a <free+0x88>
    5606:	f0 93 bd 13 	sts	0x13BD, r31	; 0x8013bd <__brkval+0x1>
    560a:	e0 93 bc 13 	sts	0x13BC, r30	; 0x8013bc <__brkval>
    560e:	67 c0       	rjmp	.+206    	; 0x56de <free+0x10c>
    5610:	ed 01       	movw	r28, r26
    5612:	20 e0       	ldi	r18, 0x00	; 0
    5614:	30 e0       	ldi	r19, 0x00	; 0
    5616:	ce 17       	cp	r28, r30
    5618:	df 07       	cpc	r29, r31
    561a:	40 f4       	brcc	.+16     	; 0x562c <free+0x5a>
    561c:	4a 81       	ldd	r20, Y+2	; 0x02
    561e:	5b 81       	ldd	r21, Y+3	; 0x03
    5620:	9e 01       	movw	r18, r28
    5622:	41 15       	cp	r20, r1
    5624:	51 05       	cpc	r21, r1
    5626:	f1 f0       	breq	.+60     	; 0x5664 <free+0x92>
    5628:	ea 01       	movw	r28, r20
    562a:	f5 cf       	rjmp	.-22     	; 0x5616 <free+0x44>
    562c:	d3 83       	std	Z+3, r29	; 0x03
    562e:	c2 83       	std	Z+2, r28	; 0x02
    5630:	40 81       	ld	r20, Z
    5632:	51 81       	ldd	r21, Z+1	; 0x01
    5634:	84 0f       	add	r24, r20
    5636:	95 1f       	adc	r25, r21
    5638:	c8 17       	cp	r28, r24
    563a:	d9 07       	cpc	r29, r25
    563c:	59 f4       	brne	.+22     	; 0x5654 <free+0x82>
    563e:	88 81       	ld	r24, Y
    5640:	99 81       	ldd	r25, Y+1	; 0x01
    5642:	84 0f       	add	r24, r20
    5644:	95 1f       	adc	r25, r21
    5646:	02 96       	adiw	r24, 0x02	; 2
    5648:	91 83       	std	Z+1, r25	; 0x01
    564a:	80 83       	st	Z, r24
    564c:	8a 81       	ldd	r24, Y+2	; 0x02
    564e:	9b 81       	ldd	r25, Y+3	; 0x03
    5650:	93 83       	std	Z+3, r25	; 0x03
    5652:	82 83       	std	Z+2, r24	; 0x02
    5654:	21 15       	cp	r18, r1
    5656:	31 05       	cpc	r19, r1
    5658:	29 f4       	brne	.+10     	; 0x5664 <free+0x92>
    565a:	f0 93 bf 13 	sts	0x13BF, r31	; 0x8013bf <__flp+0x1>
    565e:	e0 93 be 13 	sts	0x13BE, r30	; 0x8013be <__flp>
    5662:	3d c0       	rjmp	.+122    	; 0x56de <free+0x10c>
    5664:	e9 01       	movw	r28, r18
    5666:	fb 83       	std	Y+3, r31	; 0x03
    5668:	ea 83       	std	Y+2, r30	; 0x02
    566a:	49 91       	ld	r20, Y+
    566c:	59 91       	ld	r21, Y+
    566e:	c4 0f       	add	r28, r20
    5670:	d5 1f       	adc	r29, r21
    5672:	ec 17       	cp	r30, r28
    5674:	fd 07       	cpc	r31, r29
    5676:	61 f4       	brne	.+24     	; 0x5690 <free+0xbe>
    5678:	80 81       	ld	r24, Z
    567a:	91 81       	ldd	r25, Z+1	; 0x01
    567c:	84 0f       	add	r24, r20
    567e:	95 1f       	adc	r25, r21
    5680:	02 96       	adiw	r24, 0x02	; 2
    5682:	e9 01       	movw	r28, r18
    5684:	99 83       	std	Y+1, r25	; 0x01
    5686:	88 83       	st	Y, r24
    5688:	82 81       	ldd	r24, Z+2	; 0x02
    568a:	93 81       	ldd	r25, Z+3	; 0x03
    568c:	9b 83       	std	Y+3, r25	; 0x03
    568e:	8a 83       	std	Y+2, r24	; 0x02
    5690:	e0 e0       	ldi	r30, 0x00	; 0
    5692:	f0 e0       	ldi	r31, 0x00	; 0
    5694:	12 96       	adiw	r26, 0x02	; 2
    5696:	8d 91       	ld	r24, X+
    5698:	9c 91       	ld	r25, X
    569a:	13 97       	sbiw	r26, 0x03	; 3
    569c:	00 97       	sbiw	r24, 0x00	; 0
    569e:	19 f0       	breq	.+6      	; 0x56a6 <free+0xd4>
    56a0:	fd 01       	movw	r30, r26
    56a2:	dc 01       	movw	r26, r24
    56a4:	f7 cf       	rjmp	.-18     	; 0x5694 <free+0xc2>
    56a6:	8d 91       	ld	r24, X+
    56a8:	9c 91       	ld	r25, X
    56aa:	11 97       	sbiw	r26, 0x01	; 1
    56ac:	9d 01       	movw	r18, r26
    56ae:	2e 5f       	subi	r18, 0xFE	; 254
    56b0:	3f 4f       	sbci	r19, 0xFF	; 255
    56b2:	82 0f       	add	r24, r18
    56b4:	93 1f       	adc	r25, r19
    56b6:	20 91 bc 13 	lds	r18, 0x13BC	; 0x8013bc <__brkval>
    56ba:	30 91 bd 13 	lds	r19, 0x13BD	; 0x8013bd <__brkval+0x1>
    56be:	28 17       	cp	r18, r24
    56c0:	39 07       	cpc	r19, r25
    56c2:	69 f4       	brne	.+26     	; 0x56de <free+0x10c>
    56c4:	30 97       	sbiw	r30, 0x00	; 0
    56c6:	29 f4       	brne	.+10     	; 0x56d2 <free+0x100>
    56c8:	10 92 bf 13 	sts	0x13BF, r1	; 0x8013bf <__flp+0x1>
    56cc:	10 92 be 13 	sts	0x13BE, r1	; 0x8013be <__flp>
    56d0:	02 c0       	rjmp	.+4      	; 0x56d6 <free+0x104>
    56d2:	13 82       	std	Z+3, r1	; 0x03
    56d4:	12 82       	std	Z+2, r1	; 0x02
    56d6:	b0 93 bd 13 	sts	0x13BD, r27	; 0x8013bd <__brkval+0x1>
    56da:	a0 93 bc 13 	sts	0x13BC, r26	; 0x8013bc <__brkval>
    56de:	df 91       	pop	r29
    56e0:	cf 91       	pop	r28
    56e2:	08 95       	ret

000056e4 <abort>:
    56e4:	81 e0       	ldi	r24, 0x01	; 1
    56e6:	90 e0       	ldi	r25, 0x00	; 0
    56e8:	f8 94       	cli
    56ea:	6a c3       	rjmp	.+1748   	; 0x5dc0 <_exit>

000056ec <memcpy>:
    56ec:	fb 01       	movw	r30, r22
    56ee:	dc 01       	movw	r26, r24
    56f0:	02 c0       	rjmp	.+4      	; 0x56f6 <memcpy+0xa>
    56f2:	01 90       	ld	r0, Z+
    56f4:	0d 92       	st	X+, r0
    56f6:	41 50       	subi	r20, 0x01	; 1
    56f8:	50 40       	sbci	r21, 0x00	; 0
    56fa:	d8 f7       	brcc	.-10     	; 0x56f2 <memcpy+0x6>
    56fc:	08 95       	ret

000056fe <memset>:
    56fe:	dc 01       	movw	r26, r24
    5700:	01 c0       	rjmp	.+2      	; 0x5704 <memset+0x6>
    5702:	6d 93       	st	X+, r22
    5704:	41 50       	subi	r20, 0x01	; 1
    5706:	50 40       	sbci	r21, 0x00	; 0
    5708:	e0 f7       	brcc	.-8      	; 0x5702 <memset+0x4>
    570a:	08 95       	ret

0000570c <strcasestr>:
    570c:	fb 01       	movw	r30, r22
    570e:	51 91       	ld	r21, Z+
    5710:	55 23       	and	r21, r21
    5712:	b1 f0       	breq	.+44     	; 0x5740 <strcasestr+0x34>
    5714:	bf 01       	movw	r22, r30
    5716:	dc 01       	movw	r26, r24
    5718:	05 2e       	mov	r0, r21
    571a:	4d 91       	ld	r20, X+
    571c:	44 23       	and	r20, r20
    571e:	69 f0       	breq	.+26     	; 0x573a <strcasestr+0x2e>
    5720:	10 d0       	rcall	.+32     	; 0x5742 <strcasestr+0x36>
    5722:	d9 f7       	brne	.-10     	; 0x571a <strcasestr+0xe>
    5724:	cd 01       	movw	r24, r26
    5726:	01 90       	ld	r0, Z+
    5728:	00 20       	and	r0, r0
    572a:	49 f0       	breq	.+18     	; 0x573e <strcasestr+0x32>
    572c:	4d 91       	ld	r20, X+
    572e:	41 11       	cpse	r20, r1
    5730:	08 d0       	rcall	.+16     	; 0x5742 <strcasestr+0x36>
    5732:	c9 f3       	breq	.-14     	; 0x5726 <strcasestr+0x1a>
    5734:	fb 01       	movw	r30, r22
    5736:	41 11       	cpse	r20, r1
    5738:	ee cf       	rjmp	.-36     	; 0x5716 <strcasestr+0xa>
    573a:	81 e0       	ldi	r24, 0x01	; 1
    573c:	90 e0       	ldi	r25, 0x00	; 0
    573e:	01 97       	sbiw	r24, 0x01	; 1
    5740:	08 95       	ret
    5742:	40 25       	eor	r20, r0
    5744:	39 f0       	breq	.+14     	; 0x5754 <strcasestr+0x48>
    5746:	40 32       	cpi	r20, 0x20	; 32
    5748:	29 f4       	brne	.+10     	; 0x5754 <strcasestr+0x48>
    574a:	40 29       	or	r20, r0
    574c:	4b 57       	subi	r20, 0x7B	; 123
    574e:	46 5e       	subi	r20, 0xE6	; 230
    5750:	08 f0       	brcs	.+2      	; 0x5754 <strcasestr+0x48>
    5752:	18 94       	sez
    5754:	08 95       	ret

00005756 <strcat>:
    5756:	fb 01       	movw	r30, r22
    5758:	dc 01       	movw	r26, r24
    575a:	0d 90       	ld	r0, X+
    575c:	00 20       	and	r0, r0
    575e:	e9 f7       	brne	.-6      	; 0x575a <strcat+0x4>
    5760:	11 97       	sbiw	r26, 0x01	; 1
    5762:	01 90       	ld	r0, Z+
    5764:	0d 92       	st	X+, r0
    5766:	00 20       	and	r0, r0
    5768:	e1 f7       	brne	.-8      	; 0x5762 <strcat+0xc>
    576a:	08 95       	ret

0000576c <strcpy>:
    576c:	fb 01       	movw	r30, r22
    576e:	dc 01       	movw	r26, r24
    5770:	01 90       	ld	r0, Z+
    5772:	0d 92       	st	X+, r0
    5774:	00 20       	and	r0, r0
    5776:	e1 f7       	brne	.-8      	; 0x5770 <strcpy+0x4>
    5778:	08 95       	ret

0000577a <strncasecmp>:
    577a:	fb 01       	movw	r30, r22
    577c:	dc 01       	movw	r26, r24
    577e:	41 50       	subi	r20, 0x01	; 1
    5780:	50 40       	sbci	r21, 0x00	; 0
    5782:	88 f0       	brcs	.+34     	; 0x57a6 <strncasecmp+0x2c>
    5784:	8d 91       	ld	r24, X+
    5786:	81 34       	cpi	r24, 0x41	; 65
    5788:	1c f0       	brlt	.+6      	; 0x5790 <strncasecmp+0x16>
    578a:	8b 35       	cpi	r24, 0x5B	; 91
    578c:	0c f4       	brge	.+2      	; 0x5790 <strncasecmp+0x16>
    578e:	80 5e       	subi	r24, 0xE0	; 224
    5790:	61 91       	ld	r22, Z+
    5792:	61 34       	cpi	r22, 0x41	; 65
    5794:	1c f0       	brlt	.+6      	; 0x579c <strncasecmp+0x22>
    5796:	6b 35       	cpi	r22, 0x5B	; 91
    5798:	0c f4       	brge	.+2      	; 0x579c <strncasecmp+0x22>
    579a:	60 5e       	subi	r22, 0xE0	; 224
    579c:	86 1b       	sub	r24, r22
    579e:	61 11       	cpse	r22, r1
    57a0:	71 f3       	breq	.-36     	; 0x577e <strncasecmp+0x4>
    57a2:	99 0b       	sbc	r25, r25
    57a4:	08 95       	ret
    57a6:	88 1b       	sub	r24, r24
    57a8:	fc cf       	rjmp	.-8      	; 0x57a2 <strncasecmp+0x28>

000057aa <puts>:
    57aa:	0f 93       	push	r16
    57ac:	1f 93       	push	r17
    57ae:	cf 93       	push	r28
    57b0:	df 93       	push	r29
    57b2:	e0 91 c2 13 	lds	r30, 0x13C2	; 0x8013c2 <__iob+0x2>
    57b6:	f0 91 c3 13 	lds	r31, 0x13C3	; 0x8013c3 <__iob+0x3>
    57ba:	23 81       	ldd	r18, Z+3	; 0x03
    57bc:	21 ff       	sbrs	r18, 1
    57be:	1b c0       	rjmp	.+54     	; 0x57f6 <puts+0x4c>
    57c0:	8c 01       	movw	r16, r24
    57c2:	d0 e0       	ldi	r29, 0x00	; 0
    57c4:	c0 e0       	ldi	r28, 0x00	; 0
    57c6:	f8 01       	movw	r30, r16
    57c8:	81 91       	ld	r24, Z+
    57ca:	8f 01       	movw	r16, r30
    57cc:	60 91 c2 13 	lds	r22, 0x13C2	; 0x8013c2 <__iob+0x2>
    57d0:	70 91 c3 13 	lds	r23, 0x13C3	; 0x8013c3 <__iob+0x3>
    57d4:	db 01       	movw	r26, r22
    57d6:	18 96       	adiw	r26, 0x08	; 8
    57d8:	ed 91       	ld	r30, X+
    57da:	fc 91       	ld	r31, X
    57dc:	19 97       	sbiw	r26, 0x09	; 9
    57de:	88 23       	and	r24, r24
    57e0:	31 f0       	breq	.+12     	; 0x57ee <puts+0x44>
    57e2:	19 95       	eicall
    57e4:	89 2b       	or	r24, r25
    57e6:	79 f3       	breq	.-34     	; 0x57c6 <puts+0x1c>
    57e8:	df ef       	ldi	r29, 0xFF	; 255
    57ea:	cf ef       	ldi	r28, 0xFF	; 255
    57ec:	ec cf       	rjmp	.-40     	; 0x57c6 <puts+0x1c>
    57ee:	8a e0       	ldi	r24, 0x0A	; 10
    57f0:	19 95       	eicall
    57f2:	89 2b       	or	r24, r25
    57f4:	19 f0       	breq	.+6      	; 0x57fc <puts+0x52>
    57f6:	8f ef       	ldi	r24, 0xFF	; 255
    57f8:	9f ef       	ldi	r25, 0xFF	; 255
    57fa:	02 c0       	rjmp	.+4      	; 0x5800 <puts+0x56>
    57fc:	8d 2f       	mov	r24, r29
    57fe:	9c 2f       	mov	r25, r28
    5800:	df 91       	pop	r29
    5802:	cf 91       	pop	r28
    5804:	1f 91       	pop	r17
    5806:	0f 91       	pop	r16
    5808:	08 95       	ret

0000580a <sprintf>:
    580a:	0f 93       	push	r16
    580c:	1f 93       	push	r17
    580e:	cf 93       	push	r28
    5810:	df 93       	push	r29
    5812:	cd b7       	in	r28, 0x3d	; 61
    5814:	de b7       	in	r29, 0x3e	; 62
    5816:	2e 97       	sbiw	r28, 0x0e	; 14
    5818:	0f b6       	in	r0, 0x3f	; 63
    581a:	f8 94       	cli
    581c:	de bf       	out	0x3e, r29	; 62
    581e:	0f be       	out	0x3f, r0	; 63
    5820:	cd bf       	out	0x3d, r28	; 61
    5822:	0e 89       	ldd	r16, Y+22	; 0x16
    5824:	1f 89       	ldd	r17, Y+23	; 0x17
    5826:	86 e0       	ldi	r24, 0x06	; 6
    5828:	8c 83       	std	Y+4, r24	; 0x04
    582a:	1a 83       	std	Y+2, r17	; 0x02
    582c:	09 83       	std	Y+1, r16	; 0x01
    582e:	8f ef       	ldi	r24, 0xFF	; 255
    5830:	9f e7       	ldi	r25, 0x7F	; 127
    5832:	9e 83       	std	Y+6, r25	; 0x06
    5834:	8d 83       	std	Y+5, r24	; 0x05
    5836:	ae 01       	movw	r20, r28
    5838:	46 5e       	subi	r20, 0xE6	; 230
    583a:	5f 4f       	sbci	r21, 0xFF	; 255
    583c:	68 8d       	ldd	r22, Y+24	; 0x18
    583e:	79 8d       	ldd	r23, Y+25	; 0x19
    5840:	ce 01       	movw	r24, r28
    5842:	01 96       	adiw	r24, 0x01	; 1
    5844:	10 d0       	rcall	.+32     	; 0x5866 <vfprintf>
    5846:	ef 81       	ldd	r30, Y+7	; 0x07
    5848:	f8 85       	ldd	r31, Y+8	; 0x08
    584a:	e0 0f       	add	r30, r16
    584c:	f1 1f       	adc	r31, r17
    584e:	10 82       	st	Z, r1
    5850:	2e 96       	adiw	r28, 0x0e	; 14
    5852:	0f b6       	in	r0, 0x3f	; 63
    5854:	f8 94       	cli
    5856:	de bf       	out	0x3e, r29	; 62
    5858:	0f be       	out	0x3f, r0	; 63
    585a:	cd bf       	out	0x3d, r28	; 61
    585c:	df 91       	pop	r29
    585e:	cf 91       	pop	r28
    5860:	1f 91       	pop	r17
    5862:	0f 91       	pop	r16
    5864:	08 95       	ret

00005866 <vfprintf>:
    5866:	2f 92       	push	r2
    5868:	3f 92       	push	r3
    586a:	4f 92       	push	r4
    586c:	5f 92       	push	r5
    586e:	6f 92       	push	r6
    5870:	7f 92       	push	r7
    5872:	8f 92       	push	r8
    5874:	9f 92       	push	r9
    5876:	af 92       	push	r10
    5878:	bf 92       	push	r11
    587a:	cf 92       	push	r12
    587c:	df 92       	push	r13
    587e:	ef 92       	push	r14
    5880:	ff 92       	push	r15
    5882:	0f 93       	push	r16
    5884:	1f 93       	push	r17
    5886:	cf 93       	push	r28
    5888:	df 93       	push	r29
    588a:	cd b7       	in	r28, 0x3d	; 61
    588c:	de b7       	in	r29, 0x3e	; 62
    588e:	2b 97       	sbiw	r28, 0x0b	; 11
    5890:	0f b6       	in	r0, 0x3f	; 63
    5892:	f8 94       	cli
    5894:	de bf       	out	0x3e, r29	; 62
    5896:	0f be       	out	0x3f, r0	; 63
    5898:	cd bf       	out	0x3d, r28	; 61
    589a:	6c 01       	movw	r12, r24
    589c:	7b 01       	movw	r14, r22
    589e:	8a 01       	movw	r16, r20
    58a0:	fc 01       	movw	r30, r24
    58a2:	17 82       	std	Z+7, r1	; 0x07
    58a4:	16 82       	std	Z+6, r1	; 0x06
    58a6:	83 81       	ldd	r24, Z+3	; 0x03
    58a8:	81 ff       	sbrs	r24, 1
    58aa:	bf c1       	rjmp	.+894    	; 0x5c2a <vfprintf+0x3c4>
    58ac:	ce 01       	movw	r24, r28
    58ae:	01 96       	adiw	r24, 0x01	; 1
    58b0:	3c 01       	movw	r6, r24
    58b2:	f6 01       	movw	r30, r12
    58b4:	93 81       	ldd	r25, Z+3	; 0x03
    58b6:	f7 01       	movw	r30, r14
    58b8:	93 fd       	sbrc	r25, 3
    58ba:	85 91       	lpm	r24, Z+
    58bc:	93 ff       	sbrs	r25, 3
    58be:	81 91       	ld	r24, Z+
    58c0:	7f 01       	movw	r14, r30
    58c2:	88 23       	and	r24, r24
    58c4:	09 f4       	brne	.+2      	; 0x58c8 <vfprintf+0x62>
    58c6:	ad c1       	rjmp	.+858    	; 0x5c22 <vfprintf+0x3bc>
    58c8:	85 32       	cpi	r24, 0x25	; 37
    58ca:	39 f4       	brne	.+14     	; 0x58da <vfprintf+0x74>
    58cc:	93 fd       	sbrc	r25, 3
    58ce:	85 91       	lpm	r24, Z+
    58d0:	93 ff       	sbrs	r25, 3
    58d2:	81 91       	ld	r24, Z+
    58d4:	7f 01       	movw	r14, r30
    58d6:	85 32       	cpi	r24, 0x25	; 37
    58d8:	21 f4       	brne	.+8      	; 0x58e2 <vfprintf+0x7c>
    58da:	b6 01       	movw	r22, r12
    58dc:	90 e0       	ldi	r25, 0x00	; 0
    58de:	d6 d1       	rcall	.+940    	; 0x5c8c <fputc>
    58e0:	e8 cf       	rjmp	.-48     	; 0x58b2 <vfprintf+0x4c>
    58e2:	91 2c       	mov	r9, r1
    58e4:	21 2c       	mov	r2, r1
    58e6:	31 2c       	mov	r3, r1
    58e8:	ff e1       	ldi	r31, 0x1F	; 31
    58ea:	f3 15       	cp	r31, r3
    58ec:	d8 f0       	brcs	.+54     	; 0x5924 <vfprintf+0xbe>
    58ee:	8b 32       	cpi	r24, 0x2B	; 43
    58f0:	79 f0       	breq	.+30     	; 0x5910 <vfprintf+0xaa>
    58f2:	38 f4       	brcc	.+14     	; 0x5902 <vfprintf+0x9c>
    58f4:	80 32       	cpi	r24, 0x20	; 32
    58f6:	79 f0       	breq	.+30     	; 0x5916 <vfprintf+0xb0>
    58f8:	83 32       	cpi	r24, 0x23	; 35
    58fa:	a1 f4       	brne	.+40     	; 0x5924 <vfprintf+0xbe>
    58fc:	23 2d       	mov	r18, r3
    58fe:	20 61       	ori	r18, 0x10	; 16
    5900:	1d c0       	rjmp	.+58     	; 0x593c <vfprintf+0xd6>
    5902:	8d 32       	cpi	r24, 0x2D	; 45
    5904:	61 f0       	breq	.+24     	; 0x591e <vfprintf+0xb8>
    5906:	80 33       	cpi	r24, 0x30	; 48
    5908:	69 f4       	brne	.+26     	; 0x5924 <vfprintf+0xbe>
    590a:	23 2d       	mov	r18, r3
    590c:	21 60       	ori	r18, 0x01	; 1
    590e:	16 c0       	rjmp	.+44     	; 0x593c <vfprintf+0xd6>
    5910:	83 2d       	mov	r24, r3
    5912:	82 60       	ori	r24, 0x02	; 2
    5914:	38 2e       	mov	r3, r24
    5916:	e3 2d       	mov	r30, r3
    5918:	e4 60       	ori	r30, 0x04	; 4
    591a:	3e 2e       	mov	r3, r30
    591c:	2a c0       	rjmp	.+84     	; 0x5972 <vfprintf+0x10c>
    591e:	f3 2d       	mov	r31, r3
    5920:	f8 60       	ori	r31, 0x08	; 8
    5922:	1d c0       	rjmp	.+58     	; 0x595e <vfprintf+0xf8>
    5924:	37 fc       	sbrc	r3, 7
    5926:	2d c0       	rjmp	.+90     	; 0x5982 <vfprintf+0x11c>
    5928:	20 ed       	ldi	r18, 0xD0	; 208
    592a:	28 0f       	add	r18, r24
    592c:	2a 30       	cpi	r18, 0x0A	; 10
    592e:	40 f0       	brcs	.+16     	; 0x5940 <vfprintf+0xda>
    5930:	8e 32       	cpi	r24, 0x2E	; 46
    5932:	b9 f4       	brne	.+46     	; 0x5962 <vfprintf+0xfc>
    5934:	36 fc       	sbrc	r3, 6
    5936:	75 c1       	rjmp	.+746    	; 0x5c22 <vfprintf+0x3bc>
    5938:	23 2d       	mov	r18, r3
    593a:	20 64       	ori	r18, 0x40	; 64
    593c:	32 2e       	mov	r3, r18
    593e:	19 c0       	rjmp	.+50     	; 0x5972 <vfprintf+0x10c>
    5940:	36 fe       	sbrs	r3, 6
    5942:	06 c0       	rjmp	.+12     	; 0x5950 <vfprintf+0xea>
    5944:	8a e0       	ldi	r24, 0x0A	; 10
    5946:	98 9e       	mul	r9, r24
    5948:	20 0d       	add	r18, r0
    594a:	11 24       	eor	r1, r1
    594c:	92 2e       	mov	r9, r18
    594e:	11 c0       	rjmp	.+34     	; 0x5972 <vfprintf+0x10c>
    5950:	ea e0       	ldi	r30, 0x0A	; 10
    5952:	2e 9e       	mul	r2, r30
    5954:	20 0d       	add	r18, r0
    5956:	11 24       	eor	r1, r1
    5958:	22 2e       	mov	r2, r18
    595a:	f3 2d       	mov	r31, r3
    595c:	f0 62       	ori	r31, 0x20	; 32
    595e:	3f 2e       	mov	r3, r31
    5960:	08 c0       	rjmp	.+16     	; 0x5972 <vfprintf+0x10c>
    5962:	8c 36       	cpi	r24, 0x6C	; 108
    5964:	21 f4       	brne	.+8      	; 0x596e <vfprintf+0x108>
    5966:	83 2d       	mov	r24, r3
    5968:	80 68       	ori	r24, 0x80	; 128
    596a:	38 2e       	mov	r3, r24
    596c:	02 c0       	rjmp	.+4      	; 0x5972 <vfprintf+0x10c>
    596e:	88 36       	cpi	r24, 0x68	; 104
    5970:	41 f4       	brne	.+16     	; 0x5982 <vfprintf+0x11c>
    5972:	f7 01       	movw	r30, r14
    5974:	93 fd       	sbrc	r25, 3
    5976:	85 91       	lpm	r24, Z+
    5978:	93 ff       	sbrs	r25, 3
    597a:	81 91       	ld	r24, Z+
    597c:	7f 01       	movw	r14, r30
    597e:	81 11       	cpse	r24, r1
    5980:	b3 cf       	rjmp	.-154    	; 0x58e8 <vfprintf+0x82>
    5982:	98 2f       	mov	r25, r24
    5984:	9f 7d       	andi	r25, 0xDF	; 223
    5986:	95 54       	subi	r25, 0x45	; 69
    5988:	93 30       	cpi	r25, 0x03	; 3
    598a:	28 f4       	brcc	.+10     	; 0x5996 <vfprintf+0x130>
    598c:	0c 5f       	subi	r16, 0xFC	; 252
    598e:	1f 4f       	sbci	r17, 0xFF	; 255
    5990:	9f e3       	ldi	r25, 0x3F	; 63
    5992:	99 83       	std	Y+1, r25	; 0x01
    5994:	0d c0       	rjmp	.+26     	; 0x59b0 <vfprintf+0x14a>
    5996:	83 36       	cpi	r24, 0x63	; 99
    5998:	31 f0       	breq	.+12     	; 0x59a6 <vfprintf+0x140>
    599a:	83 37       	cpi	r24, 0x73	; 115
    599c:	71 f0       	breq	.+28     	; 0x59ba <vfprintf+0x154>
    599e:	83 35       	cpi	r24, 0x53	; 83
    59a0:	09 f0       	breq	.+2      	; 0x59a4 <vfprintf+0x13e>
    59a2:	55 c0       	rjmp	.+170    	; 0x5a4e <vfprintf+0x1e8>
    59a4:	20 c0       	rjmp	.+64     	; 0x59e6 <vfprintf+0x180>
    59a6:	f8 01       	movw	r30, r16
    59a8:	80 81       	ld	r24, Z
    59aa:	89 83       	std	Y+1, r24	; 0x01
    59ac:	0e 5f       	subi	r16, 0xFE	; 254
    59ae:	1f 4f       	sbci	r17, 0xFF	; 255
    59b0:	88 24       	eor	r8, r8
    59b2:	83 94       	inc	r8
    59b4:	91 2c       	mov	r9, r1
    59b6:	53 01       	movw	r10, r6
    59b8:	12 c0       	rjmp	.+36     	; 0x59de <vfprintf+0x178>
    59ba:	28 01       	movw	r4, r16
    59bc:	f2 e0       	ldi	r31, 0x02	; 2
    59be:	4f 0e       	add	r4, r31
    59c0:	51 1c       	adc	r5, r1
    59c2:	f8 01       	movw	r30, r16
    59c4:	a0 80       	ld	r10, Z
    59c6:	b1 80       	ldd	r11, Z+1	; 0x01
    59c8:	36 fe       	sbrs	r3, 6
    59ca:	03 c0       	rjmp	.+6      	; 0x59d2 <vfprintf+0x16c>
    59cc:	69 2d       	mov	r22, r9
    59ce:	70 e0       	ldi	r23, 0x00	; 0
    59d0:	02 c0       	rjmp	.+4      	; 0x59d6 <vfprintf+0x170>
    59d2:	6f ef       	ldi	r22, 0xFF	; 255
    59d4:	7f ef       	ldi	r23, 0xFF	; 255
    59d6:	c5 01       	movw	r24, r10
    59d8:	4e d1       	rcall	.+668    	; 0x5c76 <strnlen>
    59da:	4c 01       	movw	r8, r24
    59dc:	82 01       	movw	r16, r4
    59de:	f3 2d       	mov	r31, r3
    59e0:	ff 77       	andi	r31, 0x7F	; 127
    59e2:	3f 2e       	mov	r3, r31
    59e4:	15 c0       	rjmp	.+42     	; 0x5a10 <vfprintf+0x1aa>
    59e6:	28 01       	movw	r4, r16
    59e8:	22 e0       	ldi	r18, 0x02	; 2
    59ea:	42 0e       	add	r4, r18
    59ec:	51 1c       	adc	r5, r1
    59ee:	f8 01       	movw	r30, r16
    59f0:	a0 80       	ld	r10, Z
    59f2:	b1 80       	ldd	r11, Z+1	; 0x01
    59f4:	36 fe       	sbrs	r3, 6
    59f6:	03 c0       	rjmp	.+6      	; 0x59fe <vfprintf+0x198>
    59f8:	69 2d       	mov	r22, r9
    59fa:	70 e0       	ldi	r23, 0x00	; 0
    59fc:	02 c0       	rjmp	.+4      	; 0x5a02 <vfprintf+0x19c>
    59fe:	6f ef       	ldi	r22, 0xFF	; 255
    5a00:	7f ef       	ldi	r23, 0xFF	; 255
    5a02:	c5 01       	movw	r24, r10
    5a04:	2d d1       	rcall	.+602    	; 0x5c60 <strnlen_P>
    5a06:	4c 01       	movw	r8, r24
    5a08:	f3 2d       	mov	r31, r3
    5a0a:	f0 68       	ori	r31, 0x80	; 128
    5a0c:	3f 2e       	mov	r3, r31
    5a0e:	82 01       	movw	r16, r4
    5a10:	33 fc       	sbrc	r3, 3
    5a12:	19 c0       	rjmp	.+50     	; 0x5a46 <vfprintf+0x1e0>
    5a14:	82 2d       	mov	r24, r2
    5a16:	90 e0       	ldi	r25, 0x00	; 0
    5a18:	88 16       	cp	r8, r24
    5a1a:	99 06       	cpc	r9, r25
    5a1c:	a0 f4       	brcc	.+40     	; 0x5a46 <vfprintf+0x1e0>
    5a1e:	b6 01       	movw	r22, r12
    5a20:	80 e2       	ldi	r24, 0x20	; 32
    5a22:	90 e0       	ldi	r25, 0x00	; 0
    5a24:	33 d1       	rcall	.+614    	; 0x5c8c <fputc>
    5a26:	2a 94       	dec	r2
    5a28:	f5 cf       	rjmp	.-22     	; 0x5a14 <vfprintf+0x1ae>
    5a2a:	f5 01       	movw	r30, r10
    5a2c:	37 fc       	sbrc	r3, 7
    5a2e:	85 91       	lpm	r24, Z+
    5a30:	37 fe       	sbrs	r3, 7
    5a32:	81 91       	ld	r24, Z+
    5a34:	5f 01       	movw	r10, r30
    5a36:	b6 01       	movw	r22, r12
    5a38:	90 e0       	ldi	r25, 0x00	; 0
    5a3a:	28 d1       	rcall	.+592    	; 0x5c8c <fputc>
    5a3c:	21 10       	cpse	r2, r1
    5a3e:	2a 94       	dec	r2
    5a40:	21 e0       	ldi	r18, 0x01	; 1
    5a42:	82 1a       	sub	r8, r18
    5a44:	91 08       	sbc	r9, r1
    5a46:	81 14       	cp	r8, r1
    5a48:	91 04       	cpc	r9, r1
    5a4a:	79 f7       	brne	.-34     	; 0x5a2a <vfprintf+0x1c4>
    5a4c:	e1 c0       	rjmp	.+450    	; 0x5c10 <vfprintf+0x3aa>
    5a4e:	84 36       	cpi	r24, 0x64	; 100
    5a50:	11 f0       	breq	.+4      	; 0x5a56 <vfprintf+0x1f0>
    5a52:	89 36       	cpi	r24, 0x69	; 105
    5a54:	39 f5       	brne	.+78     	; 0x5aa4 <vfprintf+0x23e>
    5a56:	f8 01       	movw	r30, r16
    5a58:	37 fe       	sbrs	r3, 7
    5a5a:	07 c0       	rjmp	.+14     	; 0x5a6a <vfprintf+0x204>
    5a5c:	60 81       	ld	r22, Z
    5a5e:	71 81       	ldd	r23, Z+1	; 0x01
    5a60:	82 81       	ldd	r24, Z+2	; 0x02
    5a62:	93 81       	ldd	r25, Z+3	; 0x03
    5a64:	0c 5f       	subi	r16, 0xFC	; 252
    5a66:	1f 4f       	sbci	r17, 0xFF	; 255
    5a68:	08 c0       	rjmp	.+16     	; 0x5a7a <vfprintf+0x214>
    5a6a:	60 81       	ld	r22, Z
    5a6c:	71 81       	ldd	r23, Z+1	; 0x01
    5a6e:	07 2e       	mov	r0, r23
    5a70:	00 0c       	add	r0, r0
    5a72:	88 0b       	sbc	r24, r24
    5a74:	99 0b       	sbc	r25, r25
    5a76:	0e 5f       	subi	r16, 0xFE	; 254
    5a78:	1f 4f       	sbci	r17, 0xFF	; 255
    5a7a:	f3 2d       	mov	r31, r3
    5a7c:	ff 76       	andi	r31, 0x6F	; 111
    5a7e:	3f 2e       	mov	r3, r31
    5a80:	97 ff       	sbrs	r25, 7
    5a82:	09 c0       	rjmp	.+18     	; 0x5a96 <vfprintf+0x230>
    5a84:	90 95       	com	r25
    5a86:	80 95       	com	r24
    5a88:	70 95       	com	r23
    5a8a:	61 95       	neg	r22
    5a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    5a8e:	8f 4f       	sbci	r24, 0xFF	; 255
    5a90:	9f 4f       	sbci	r25, 0xFF	; 255
    5a92:	f0 68       	ori	r31, 0x80	; 128
    5a94:	3f 2e       	mov	r3, r31
    5a96:	2a e0       	ldi	r18, 0x0A	; 10
    5a98:	30 e0       	ldi	r19, 0x00	; 0
    5a9a:	a3 01       	movw	r20, r6
    5a9c:	33 d1       	rcall	.+614    	; 0x5d04 <__ultoa_invert>
    5a9e:	88 2e       	mov	r8, r24
    5aa0:	86 18       	sub	r8, r6
    5aa2:	44 c0       	rjmp	.+136    	; 0x5b2c <vfprintf+0x2c6>
    5aa4:	85 37       	cpi	r24, 0x75	; 117
    5aa6:	31 f4       	brne	.+12     	; 0x5ab4 <vfprintf+0x24e>
    5aa8:	23 2d       	mov	r18, r3
    5aaa:	2f 7e       	andi	r18, 0xEF	; 239
    5aac:	b2 2e       	mov	r11, r18
    5aae:	2a e0       	ldi	r18, 0x0A	; 10
    5ab0:	30 e0       	ldi	r19, 0x00	; 0
    5ab2:	25 c0       	rjmp	.+74     	; 0x5afe <vfprintf+0x298>
    5ab4:	93 2d       	mov	r25, r3
    5ab6:	99 7f       	andi	r25, 0xF9	; 249
    5ab8:	b9 2e       	mov	r11, r25
    5aba:	8f 36       	cpi	r24, 0x6F	; 111
    5abc:	c1 f0       	breq	.+48     	; 0x5aee <vfprintf+0x288>
    5abe:	18 f4       	brcc	.+6      	; 0x5ac6 <vfprintf+0x260>
    5ac0:	88 35       	cpi	r24, 0x58	; 88
    5ac2:	79 f0       	breq	.+30     	; 0x5ae2 <vfprintf+0x27c>
    5ac4:	ae c0       	rjmp	.+348    	; 0x5c22 <vfprintf+0x3bc>
    5ac6:	80 37       	cpi	r24, 0x70	; 112
    5ac8:	19 f0       	breq	.+6      	; 0x5ad0 <vfprintf+0x26a>
    5aca:	88 37       	cpi	r24, 0x78	; 120
    5acc:	21 f0       	breq	.+8      	; 0x5ad6 <vfprintf+0x270>
    5ace:	a9 c0       	rjmp	.+338    	; 0x5c22 <vfprintf+0x3bc>
    5ad0:	e9 2f       	mov	r30, r25
    5ad2:	e0 61       	ori	r30, 0x10	; 16
    5ad4:	be 2e       	mov	r11, r30
    5ad6:	b4 fe       	sbrs	r11, 4
    5ad8:	0d c0       	rjmp	.+26     	; 0x5af4 <vfprintf+0x28e>
    5ada:	fb 2d       	mov	r31, r11
    5adc:	f4 60       	ori	r31, 0x04	; 4
    5ade:	bf 2e       	mov	r11, r31
    5ae0:	09 c0       	rjmp	.+18     	; 0x5af4 <vfprintf+0x28e>
    5ae2:	34 fe       	sbrs	r3, 4
    5ae4:	0a c0       	rjmp	.+20     	; 0x5afa <vfprintf+0x294>
    5ae6:	29 2f       	mov	r18, r25
    5ae8:	26 60       	ori	r18, 0x06	; 6
    5aea:	b2 2e       	mov	r11, r18
    5aec:	06 c0       	rjmp	.+12     	; 0x5afa <vfprintf+0x294>
    5aee:	28 e0       	ldi	r18, 0x08	; 8
    5af0:	30 e0       	ldi	r19, 0x00	; 0
    5af2:	05 c0       	rjmp	.+10     	; 0x5afe <vfprintf+0x298>
    5af4:	20 e1       	ldi	r18, 0x10	; 16
    5af6:	30 e0       	ldi	r19, 0x00	; 0
    5af8:	02 c0       	rjmp	.+4      	; 0x5afe <vfprintf+0x298>
    5afa:	20 e1       	ldi	r18, 0x10	; 16
    5afc:	32 e0       	ldi	r19, 0x02	; 2
    5afe:	f8 01       	movw	r30, r16
    5b00:	b7 fe       	sbrs	r11, 7
    5b02:	07 c0       	rjmp	.+14     	; 0x5b12 <vfprintf+0x2ac>
    5b04:	60 81       	ld	r22, Z
    5b06:	71 81       	ldd	r23, Z+1	; 0x01
    5b08:	82 81       	ldd	r24, Z+2	; 0x02
    5b0a:	93 81       	ldd	r25, Z+3	; 0x03
    5b0c:	0c 5f       	subi	r16, 0xFC	; 252
    5b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    5b10:	06 c0       	rjmp	.+12     	; 0x5b1e <vfprintf+0x2b8>
    5b12:	60 81       	ld	r22, Z
    5b14:	71 81       	ldd	r23, Z+1	; 0x01
    5b16:	80 e0       	ldi	r24, 0x00	; 0
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	0e 5f       	subi	r16, 0xFE	; 254
    5b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    5b1e:	a3 01       	movw	r20, r6
    5b20:	f1 d0       	rcall	.+482    	; 0x5d04 <__ultoa_invert>
    5b22:	88 2e       	mov	r8, r24
    5b24:	86 18       	sub	r8, r6
    5b26:	fb 2d       	mov	r31, r11
    5b28:	ff 77       	andi	r31, 0x7F	; 127
    5b2a:	3f 2e       	mov	r3, r31
    5b2c:	36 fe       	sbrs	r3, 6
    5b2e:	0d c0       	rjmp	.+26     	; 0x5b4a <vfprintf+0x2e4>
    5b30:	23 2d       	mov	r18, r3
    5b32:	2e 7f       	andi	r18, 0xFE	; 254
    5b34:	a2 2e       	mov	r10, r18
    5b36:	89 14       	cp	r8, r9
    5b38:	58 f4       	brcc	.+22     	; 0x5b50 <vfprintf+0x2ea>
    5b3a:	34 fe       	sbrs	r3, 4
    5b3c:	0b c0       	rjmp	.+22     	; 0x5b54 <vfprintf+0x2ee>
    5b3e:	32 fc       	sbrc	r3, 2
    5b40:	09 c0       	rjmp	.+18     	; 0x5b54 <vfprintf+0x2ee>
    5b42:	83 2d       	mov	r24, r3
    5b44:	8e 7e       	andi	r24, 0xEE	; 238
    5b46:	a8 2e       	mov	r10, r24
    5b48:	05 c0       	rjmp	.+10     	; 0x5b54 <vfprintf+0x2ee>
    5b4a:	b8 2c       	mov	r11, r8
    5b4c:	a3 2c       	mov	r10, r3
    5b4e:	03 c0       	rjmp	.+6      	; 0x5b56 <vfprintf+0x2f0>
    5b50:	b8 2c       	mov	r11, r8
    5b52:	01 c0       	rjmp	.+2      	; 0x5b56 <vfprintf+0x2f0>
    5b54:	b9 2c       	mov	r11, r9
    5b56:	a4 fe       	sbrs	r10, 4
    5b58:	0f c0       	rjmp	.+30     	; 0x5b78 <vfprintf+0x312>
    5b5a:	fe 01       	movw	r30, r28
    5b5c:	e8 0d       	add	r30, r8
    5b5e:	f1 1d       	adc	r31, r1
    5b60:	80 81       	ld	r24, Z
    5b62:	80 33       	cpi	r24, 0x30	; 48
    5b64:	21 f4       	brne	.+8      	; 0x5b6e <vfprintf+0x308>
    5b66:	9a 2d       	mov	r25, r10
    5b68:	99 7e       	andi	r25, 0xE9	; 233
    5b6a:	a9 2e       	mov	r10, r25
    5b6c:	09 c0       	rjmp	.+18     	; 0x5b80 <vfprintf+0x31a>
    5b6e:	a2 fe       	sbrs	r10, 2
    5b70:	06 c0       	rjmp	.+12     	; 0x5b7e <vfprintf+0x318>
    5b72:	b3 94       	inc	r11
    5b74:	b3 94       	inc	r11
    5b76:	04 c0       	rjmp	.+8      	; 0x5b80 <vfprintf+0x31a>
    5b78:	8a 2d       	mov	r24, r10
    5b7a:	86 78       	andi	r24, 0x86	; 134
    5b7c:	09 f0       	breq	.+2      	; 0x5b80 <vfprintf+0x31a>
    5b7e:	b3 94       	inc	r11
    5b80:	a3 fc       	sbrc	r10, 3
    5b82:	10 c0       	rjmp	.+32     	; 0x5ba4 <vfprintf+0x33e>
    5b84:	a0 fe       	sbrs	r10, 0
    5b86:	06 c0       	rjmp	.+12     	; 0x5b94 <vfprintf+0x32e>
    5b88:	b2 14       	cp	r11, r2
    5b8a:	80 f4       	brcc	.+32     	; 0x5bac <vfprintf+0x346>
    5b8c:	28 0c       	add	r2, r8
    5b8e:	92 2c       	mov	r9, r2
    5b90:	9b 18       	sub	r9, r11
    5b92:	0d c0       	rjmp	.+26     	; 0x5bae <vfprintf+0x348>
    5b94:	b2 14       	cp	r11, r2
    5b96:	58 f4       	brcc	.+22     	; 0x5bae <vfprintf+0x348>
    5b98:	b6 01       	movw	r22, r12
    5b9a:	80 e2       	ldi	r24, 0x20	; 32
    5b9c:	90 e0       	ldi	r25, 0x00	; 0
    5b9e:	76 d0       	rcall	.+236    	; 0x5c8c <fputc>
    5ba0:	b3 94       	inc	r11
    5ba2:	f8 cf       	rjmp	.-16     	; 0x5b94 <vfprintf+0x32e>
    5ba4:	b2 14       	cp	r11, r2
    5ba6:	18 f4       	brcc	.+6      	; 0x5bae <vfprintf+0x348>
    5ba8:	2b 18       	sub	r2, r11
    5baa:	02 c0       	rjmp	.+4      	; 0x5bb0 <vfprintf+0x34a>
    5bac:	98 2c       	mov	r9, r8
    5bae:	21 2c       	mov	r2, r1
    5bb0:	a4 fe       	sbrs	r10, 4
    5bb2:	0f c0       	rjmp	.+30     	; 0x5bd2 <vfprintf+0x36c>
    5bb4:	b6 01       	movw	r22, r12
    5bb6:	80 e3       	ldi	r24, 0x30	; 48
    5bb8:	90 e0       	ldi	r25, 0x00	; 0
    5bba:	68 d0       	rcall	.+208    	; 0x5c8c <fputc>
    5bbc:	a2 fe       	sbrs	r10, 2
    5bbe:	16 c0       	rjmp	.+44     	; 0x5bec <vfprintf+0x386>
    5bc0:	a1 fc       	sbrc	r10, 1
    5bc2:	03 c0       	rjmp	.+6      	; 0x5bca <vfprintf+0x364>
    5bc4:	88 e7       	ldi	r24, 0x78	; 120
    5bc6:	90 e0       	ldi	r25, 0x00	; 0
    5bc8:	02 c0       	rjmp	.+4      	; 0x5bce <vfprintf+0x368>
    5bca:	88 e5       	ldi	r24, 0x58	; 88
    5bcc:	90 e0       	ldi	r25, 0x00	; 0
    5bce:	b6 01       	movw	r22, r12
    5bd0:	0c c0       	rjmp	.+24     	; 0x5bea <vfprintf+0x384>
    5bd2:	8a 2d       	mov	r24, r10
    5bd4:	86 78       	andi	r24, 0x86	; 134
    5bd6:	51 f0       	breq	.+20     	; 0x5bec <vfprintf+0x386>
    5bd8:	a1 fe       	sbrs	r10, 1
    5bda:	02 c0       	rjmp	.+4      	; 0x5be0 <vfprintf+0x37a>
    5bdc:	8b e2       	ldi	r24, 0x2B	; 43
    5bde:	01 c0       	rjmp	.+2      	; 0x5be2 <vfprintf+0x37c>
    5be0:	80 e2       	ldi	r24, 0x20	; 32
    5be2:	a7 fc       	sbrc	r10, 7
    5be4:	8d e2       	ldi	r24, 0x2D	; 45
    5be6:	b6 01       	movw	r22, r12
    5be8:	90 e0       	ldi	r25, 0x00	; 0
    5bea:	50 d0       	rcall	.+160    	; 0x5c8c <fputc>
    5bec:	89 14       	cp	r8, r9
    5bee:	30 f4       	brcc	.+12     	; 0x5bfc <vfprintf+0x396>
    5bf0:	b6 01       	movw	r22, r12
    5bf2:	80 e3       	ldi	r24, 0x30	; 48
    5bf4:	90 e0       	ldi	r25, 0x00	; 0
    5bf6:	4a d0       	rcall	.+148    	; 0x5c8c <fputc>
    5bf8:	9a 94       	dec	r9
    5bfa:	f8 cf       	rjmp	.-16     	; 0x5bec <vfprintf+0x386>
    5bfc:	8a 94       	dec	r8
    5bfe:	f3 01       	movw	r30, r6
    5c00:	e8 0d       	add	r30, r8
    5c02:	f1 1d       	adc	r31, r1
    5c04:	80 81       	ld	r24, Z
    5c06:	b6 01       	movw	r22, r12
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	40 d0       	rcall	.+128    	; 0x5c8c <fputc>
    5c0c:	81 10       	cpse	r8, r1
    5c0e:	f6 cf       	rjmp	.-20     	; 0x5bfc <vfprintf+0x396>
    5c10:	22 20       	and	r2, r2
    5c12:	09 f4       	brne	.+2      	; 0x5c16 <vfprintf+0x3b0>
    5c14:	4e ce       	rjmp	.-868    	; 0x58b2 <vfprintf+0x4c>
    5c16:	b6 01       	movw	r22, r12
    5c18:	80 e2       	ldi	r24, 0x20	; 32
    5c1a:	90 e0       	ldi	r25, 0x00	; 0
    5c1c:	37 d0       	rcall	.+110    	; 0x5c8c <fputc>
    5c1e:	2a 94       	dec	r2
    5c20:	f7 cf       	rjmp	.-18     	; 0x5c10 <vfprintf+0x3aa>
    5c22:	f6 01       	movw	r30, r12
    5c24:	86 81       	ldd	r24, Z+6	; 0x06
    5c26:	97 81       	ldd	r25, Z+7	; 0x07
    5c28:	02 c0       	rjmp	.+4      	; 0x5c2e <vfprintf+0x3c8>
    5c2a:	8f ef       	ldi	r24, 0xFF	; 255
    5c2c:	9f ef       	ldi	r25, 0xFF	; 255
    5c2e:	2b 96       	adiw	r28, 0x0b	; 11
    5c30:	0f b6       	in	r0, 0x3f	; 63
    5c32:	f8 94       	cli
    5c34:	de bf       	out	0x3e, r29	; 62
    5c36:	0f be       	out	0x3f, r0	; 63
    5c38:	cd bf       	out	0x3d, r28	; 61
    5c3a:	df 91       	pop	r29
    5c3c:	cf 91       	pop	r28
    5c3e:	1f 91       	pop	r17
    5c40:	0f 91       	pop	r16
    5c42:	ff 90       	pop	r15
    5c44:	ef 90       	pop	r14
    5c46:	df 90       	pop	r13
    5c48:	cf 90       	pop	r12
    5c4a:	bf 90       	pop	r11
    5c4c:	af 90       	pop	r10
    5c4e:	9f 90       	pop	r9
    5c50:	8f 90       	pop	r8
    5c52:	7f 90       	pop	r7
    5c54:	6f 90       	pop	r6
    5c56:	5f 90       	pop	r5
    5c58:	4f 90       	pop	r4
    5c5a:	3f 90       	pop	r3
    5c5c:	2f 90       	pop	r2
    5c5e:	08 95       	ret

00005c60 <strnlen_P>:
    5c60:	fc 01       	movw	r30, r24
    5c62:	05 90       	lpm	r0, Z+
    5c64:	61 50       	subi	r22, 0x01	; 1
    5c66:	70 40       	sbci	r23, 0x00	; 0
    5c68:	01 10       	cpse	r0, r1
    5c6a:	d8 f7       	brcc	.-10     	; 0x5c62 <strnlen_P+0x2>
    5c6c:	80 95       	com	r24
    5c6e:	90 95       	com	r25
    5c70:	8e 0f       	add	r24, r30
    5c72:	9f 1f       	adc	r25, r31
    5c74:	08 95       	ret

00005c76 <strnlen>:
    5c76:	fc 01       	movw	r30, r24
    5c78:	61 50       	subi	r22, 0x01	; 1
    5c7a:	70 40       	sbci	r23, 0x00	; 0
    5c7c:	01 90       	ld	r0, Z+
    5c7e:	01 10       	cpse	r0, r1
    5c80:	d8 f7       	brcc	.-10     	; 0x5c78 <strnlen+0x2>
    5c82:	80 95       	com	r24
    5c84:	90 95       	com	r25
    5c86:	8e 0f       	add	r24, r30
    5c88:	9f 1f       	adc	r25, r31
    5c8a:	08 95       	ret

00005c8c <fputc>:
    5c8c:	0f 93       	push	r16
    5c8e:	1f 93       	push	r17
    5c90:	cf 93       	push	r28
    5c92:	df 93       	push	r29
    5c94:	fb 01       	movw	r30, r22
    5c96:	23 81       	ldd	r18, Z+3	; 0x03
    5c98:	21 fd       	sbrc	r18, 1
    5c9a:	03 c0       	rjmp	.+6      	; 0x5ca2 <fputc+0x16>
    5c9c:	8f ef       	ldi	r24, 0xFF	; 255
    5c9e:	9f ef       	ldi	r25, 0xFF	; 255
    5ca0:	2c c0       	rjmp	.+88     	; 0x5cfa <fputc+0x6e>
    5ca2:	22 ff       	sbrs	r18, 2
    5ca4:	16 c0       	rjmp	.+44     	; 0x5cd2 <fputc+0x46>
    5ca6:	46 81       	ldd	r20, Z+6	; 0x06
    5ca8:	57 81       	ldd	r21, Z+7	; 0x07
    5caa:	24 81       	ldd	r18, Z+4	; 0x04
    5cac:	35 81       	ldd	r19, Z+5	; 0x05
    5cae:	42 17       	cp	r20, r18
    5cb0:	53 07       	cpc	r21, r19
    5cb2:	44 f4       	brge	.+16     	; 0x5cc4 <fputc+0x38>
    5cb4:	a0 81       	ld	r26, Z
    5cb6:	b1 81       	ldd	r27, Z+1	; 0x01
    5cb8:	9d 01       	movw	r18, r26
    5cba:	2f 5f       	subi	r18, 0xFF	; 255
    5cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    5cbe:	31 83       	std	Z+1, r19	; 0x01
    5cc0:	20 83       	st	Z, r18
    5cc2:	8c 93       	st	X, r24
    5cc4:	26 81       	ldd	r18, Z+6	; 0x06
    5cc6:	37 81       	ldd	r19, Z+7	; 0x07
    5cc8:	2f 5f       	subi	r18, 0xFF	; 255
    5cca:	3f 4f       	sbci	r19, 0xFF	; 255
    5ccc:	37 83       	std	Z+7, r19	; 0x07
    5cce:	26 83       	std	Z+6, r18	; 0x06
    5cd0:	14 c0       	rjmp	.+40     	; 0x5cfa <fputc+0x6e>
    5cd2:	8b 01       	movw	r16, r22
    5cd4:	ec 01       	movw	r28, r24
    5cd6:	fb 01       	movw	r30, r22
    5cd8:	00 84       	ldd	r0, Z+8	; 0x08
    5cda:	f1 85       	ldd	r31, Z+9	; 0x09
    5cdc:	e0 2d       	mov	r30, r0
    5cde:	19 95       	eicall
    5ce0:	89 2b       	or	r24, r25
    5ce2:	e1 f6       	brne	.-72     	; 0x5c9c <fputc+0x10>
    5ce4:	d8 01       	movw	r26, r16
    5ce6:	16 96       	adiw	r26, 0x06	; 6
    5ce8:	8d 91       	ld	r24, X+
    5cea:	9c 91       	ld	r25, X
    5cec:	17 97       	sbiw	r26, 0x07	; 7
    5cee:	01 96       	adiw	r24, 0x01	; 1
    5cf0:	17 96       	adiw	r26, 0x07	; 7
    5cf2:	9c 93       	st	X, r25
    5cf4:	8e 93       	st	-X, r24
    5cf6:	16 97       	sbiw	r26, 0x06	; 6
    5cf8:	ce 01       	movw	r24, r28
    5cfa:	df 91       	pop	r29
    5cfc:	cf 91       	pop	r28
    5cfe:	1f 91       	pop	r17
    5d00:	0f 91       	pop	r16
    5d02:	08 95       	ret

00005d04 <__ultoa_invert>:
    5d04:	fa 01       	movw	r30, r20
    5d06:	aa 27       	eor	r26, r26
    5d08:	28 30       	cpi	r18, 0x08	; 8
    5d0a:	51 f1       	breq	.+84     	; 0x5d60 <__ultoa_invert+0x5c>
    5d0c:	20 31       	cpi	r18, 0x10	; 16
    5d0e:	81 f1       	breq	.+96     	; 0x5d70 <__ultoa_invert+0x6c>
    5d10:	e8 94       	clt
    5d12:	6f 93       	push	r22
    5d14:	6e 7f       	andi	r22, 0xFE	; 254
    5d16:	6e 5f       	subi	r22, 0xFE	; 254
    5d18:	7f 4f       	sbci	r23, 0xFF	; 255
    5d1a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d1e:	af 4f       	sbci	r26, 0xFF	; 255
    5d20:	b1 e0       	ldi	r27, 0x01	; 1
    5d22:	3e d0       	rcall	.+124    	; 0x5da0 <__ultoa_invert+0x9c>
    5d24:	b4 e0       	ldi	r27, 0x04	; 4
    5d26:	3c d0       	rcall	.+120    	; 0x5da0 <__ultoa_invert+0x9c>
    5d28:	67 0f       	add	r22, r23
    5d2a:	78 1f       	adc	r23, r24
    5d2c:	89 1f       	adc	r24, r25
    5d2e:	9a 1f       	adc	r25, r26
    5d30:	a1 1d       	adc	r26, r1
    5d32:	68 0f       	add	r22, r24
    5d34:	79 1f       	adc	r23, r25
    5d36:	8a 1f       	adc	r24, r26
    5d38:	91 1d       	adc	r25, r1
    5d3a:	a1 1d       	adc	r26, r1
    5d3c:	6a 0f       	add	r22, r26
    5d3e:	71 1d       	adc	r23, r1
    5d40:	81 1d       	adc	r24, r1
    5d42:	91 1d       	adc	r25, r1
    5d44:	a1 1d       	adc	r26, r1
    5d46:	20 d0       	rcall	.+64     	; 0x5d88 <__ultoa_invert+0x84>
    5d48:	09 f4       	brne	.+2      	; 0x5d4c <__ultoa_invert+0x48>
    5d4a:	68 94       	set
    5d4c:	3f 91       	pop	r19
    5d4e:	2a e0       	ldi	r18, 0x0A	; 10
    5d50:	26 9f       	mul	r18, r22
    5d52:	11 24       	eor	r1, r1
    5d54:	30 19       	sub	r19, r0
    5d56:	30 5d       	subi	r19, 0xD0	; 208
    5d58:	31 93       	st	Z+, r19
    5d5a:	de f6       	brtc	.-74     	; 0x5d12 <__ultoa_invert+0xe>
    5d5c:	cf 01       	movw	r24, r30
    5d5e:	08 95       	ret
    5d60:	46 2f       	mov	r20, r22
    5d62:	47 70       	andi	r20, 0x07	; 7
    5d64:	40 5d       	subi	r20, 0xD0	; 208
    5d66:	41 93       	st	Z+, r20
    5d68:	b3 e0       	ldi	r27, 0x03	; 3
    5d6a:	0f d0       	rcall	.+30     	; 0x5d8a <__ultoa_invert+0x86>
    5d6c:	c9 f7       	brne	.-14     	; 0x5d60 <__ultoa_invert+0x5c>
    5d6e:	f6 cf       	rjmp	.-20     	; 0x5d5c <__ultoa_invert+0x58>
    5d70:	46 2f       	mov	r20, r22
    5d72:	4f 70       	andi	r20, 0x0F	; 15
    5d74:	40 5d       	subi	r20, 0xD0	; 208
    5d76:	4a 33       	cpi	r20, 0x3A	; 58
    5d78:	18 f0       	brcs	.+6      	; 0x5d80 <__ultoa_invert+0x7c>
    5d7a:	49 5d       	subi	r20, 0xD9	; 217
    5d7c:	31 fd       	sbrc	r19, 1
    5d7e:	40 52       	subi	r20, 0x20	; 32
    5d80:	41 93       	st	Z+, r20
    5d82:	02 d0       	rcall	.+4      	; 0x5d88 <__ultoa_invert+0x84>
    5d84:	a9 f7       	brne	.-22     	; 0x5d70 <__ultoa_invert+0x6c>
    5d86:	ea cf       	rjmp	.-44     	; 0x5d5c <__ultoa_invert+0x58>
    5d88:	b4 e0       	ldi	r27, 0x04	; 4
    5d8a:	a6 95       	lsr	r26
    5d8c:	97 95       	ror	r25
    5d8e:	87 95       	ror	r24
    5d90:	77 95       	ror	r23
    5d92:	67 95       	ror	r22
    5d94:	ba 95       	dec	r27
    5d96:	c9 f7       	brne	.-14     	; 0x5d8a <__ultoa_invert+0x86>
    5d98:	00 97       	sbiw	r24, 0x00	; 0
    5d9a:	61 05       	cpc	r22, r1
    5d9c:	71 05       	cpc	r23, r1
    5d9e:	08 95       	ret
    5da0:	9b 01       	movw	r18, r22
    5da2:	ac 01       	movw	r20, r24
    5da4:	0a 2e       	mov	r0, r26
    5da6:	06 94       	lsr	r0
    5da8:	57 95       	ror	r21
    5daa:	47 95       	ror	r20
    5dac:	37 95       	ror	r19
    5dae:	27 95       	ror	r18
    5db0:	ba 95       	dec	r27
    5db2:	c9 f7       	brne	.-14     	; 0x5da6 <__ultoa_invert+0xa2>
    5db4:	62 0f       	add	r22, r18
    5db6:	73 1f       	adc	r23, r19
    5db8:	84 1f       	adc	r24, r20
    5dba:	95 1f       	adc	r25, r21
    5dbc:	a0 1d       	adc	r26, r0
    5dbe:	08 95       	ret

00005dc0 <_exit>:
    5dc0:	f8 94       	cli

00005dc2 <__stop_program>:
    5dc2:	ff cf       	rjmp	.-2      	; 0x5dc2 <__stop_program>
