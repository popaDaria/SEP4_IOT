
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000660  00800200  000062e8  0000637c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000062e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c26  00800860  00800860  000069dc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000069dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006a38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000aa8  00000000  00000000  00006a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d87b  00000000  00000000  00007520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003569  00000000  00000000  00014d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000069ff  00000000  00000000  00018304  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002604  00000000  00000000  0001ed04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000458f  00000000  00000000  00021308  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bddc  00000000  00000000  00025897  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009f0  00000000  00000000  00031673  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	20 c4       	rjmp	.+2112   	; 0x872 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b8 23 	jmp	0x4770	; 0x4770 <__vector_25>
      68:	0c 94 0a 24 	jmp	0x4814	; 0x4814 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 4e 24 	jmp	0x489c	; 0x489c <__vector_36>
      94:	0c 94 a0 24 	jmp	0x4940	; 0x4940 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 01 2a 	jmp	0x5402	; 0x5402 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 e4 24 	jmp	0x49c8	; 0x49c8 <__vector_51>
      d0:	0c 94 36 25 	jmp	0x4a6c	; 0x4a6c <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <__vector_54>
      dc:	0c 94 cc 25 	jmp	0x4b98	; 0x4b98 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	01 19       	sub	r16, r1
      e6:	01 19       	sub	r16, r1
      e8:	01 19       	sub	r16, r1
      ea:	38 19       	sub	r19, r8
      ec:	40 19       	sub	r20, r0
      ee:	55 19       	sub	r21, r5
      f0:	01 19       	sub	r16, r1
      f2:	01 19       	sub	r16, r1
      f4:	38 19       	sub	r19, r8
      f6:	40 19       	sub	r20, r0
      f8:	23 2a       	or	r2, r19
      fa:	93 2a       	or	r9, r19
      fc:	93 2a       	or	r9, r19
      fe:	93 2a       	or	r9, r19
     100:	93 2a       	or	r9, r19
     102:	93 2a       	or	r9, r19
     104:	93 2a       	or	r9, r19
     106:	93 2a       	or	r9, r19
     108:	23 2a       	or	r2, r19
     10a:	93 2a       	or	r9, r19
     10c:	93 2a       	or	r9, r19
     10e:	93 2a       	or	r9, r19
     110:	93 2a       	or	r9, r19
     112:	93 2a       	or	r9, r19
     114:	93 2a       	or	r9, r19
     116:	93 2a       	or	r9, r19
     118:	25 2a       	or	r2, r21
     11a:	93 2a       	or	r9, r19
     11c:	93 2a       	or	r9, r19
     11e:	93 2a       	or	r9, r19
     120:	93 2a       	or	r9, r19
     122:	93 2a       	or	r9, r19
     124:	93 2a       	or	r9, r19
     126:	93 2a       	or	r9, r19
     128:	93 2a       	or	r9, r19
     12a:	93 2a       	or	r9, r19
     12c:	93 2a       	or	r9, r19
     12e:	93 2a       	or	r9, r19
     130:	93 2a       	or	r9, r19
     132:	93 2a       	or	r9, r19
     134:	93 2a       	or	r9, r19
     136:	93 2a       	or	r9, r19
     138:	25 2a       	or	r2, r21
     13a:	93 2a       	or	r9, r19
     13c:	93 2a       	or	r9, r19
     13e:	93 2a       	or	r9, r19
     140:	93 2a       	or	r9, r19
     142:	93 2a       	or	r9, r19
     144:	93 2a       	or	r9, r19
     146:	93 2a       	or	r9, r19
     148:	93 2a       	or	r9, r19
     14a:	93 2a       	or	r9, r19
     14c:	93 2a       	or	r9, r19
     14e:	93 2a       	or	r9, r19
     150:	93 2a       	or	r9, r19
     152:	93 2a       	or	r9, r19
     154:	93 2a       	or	r9, r19
     156:	93 2a       	or	r9, r19
     158:	8f 2a       	or	r8, r31
     15a:	93 2a       	or	r9, r19
     15c:	93 2a       	or	r9, r19
     15e:	93 2a       	or	r9, r19
     160:	93 2a       	or	r9, r19
     162:	93 2a       	or	r9, r19
     164:	93 2a       	or	r9, r19
     166:	93 2a       	or	r9, r19
     168:	5a 2a       	or	r5, r26
     16a:	93 2a       	or	r9, r19
     16c:	93 2a       	or	r9, r19
     16e:	93 2a       	or	r9, r19
     170:	93 2a       	or	r9, r19
     172:	93 2a       	or	r9, r19
     174:	93 2a       	or	r9, r19
     176:	93 2a       	or	r9, r19
     178:	93 2a       	or	r9, r19
     17a:	93 2a       	or	r9, r19
     17c:	93 2a       	or	r9, r19
     17e:	93 2a       	or	r9, r19
     180:	93 2a       	or	r9, r19
     182:	93 2a       	or	r9, r19
     184:	93 2a       	or	r9, r19
     186:	93 2a       	or	r9, r19
     188:	4e 2a       	or	r4, r30
     18a:	93 2a       	or	r9, r19
     18c:	93 2a       	or	r9, r19
     18e:	93 2a       	or	r9, r19
     190:	93 2a       	or	r9, r19
     192:	93 2a       	or	r9, r19
     194:	93 2a       	or	r9, r19
     196:	93 2a       	or	r9, r19
     198:	72 2a       	or	r7, r18

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <prvCheckTasksWaitingTermination>
     19e:	80 91 85 12 	lds	r24, 0x1285	; 0x801285 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	9f d2       	rcall	.+1342   	; 0x6e6 <vPortYield>
     1a8:	0e 94 7e 19 	call	0x32fc	; 0x32fc <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 73 18 	call	0x30e6	; 0x30e6 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 ca 18 	call	0x3194	; 0x3194 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e8 ee       	ldi	r30, 0xE8	; 232
     1e4:	f2 e6       	ldi	r31, 0x62	; 98
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a0 36       	cpi	r26, 0x60	; 96
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	24 e1       	ldi	r18, 0x14	; 20
     1f8:	a0 e6       	ldi	r26, 0x60	; 96
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a6 38       	cpi	r26, 0x86	; 134
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 0a 1c 	call	0x3814	; 0x3814 <main>
     20a:	0c 94 72 31 	jmp	0x62e4	; 0x62e4 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <co2Task>:
#include "mh_z19.h"

void co2Task(void *pvParameters){
	(void)pvParameters;
	while(1){
		vTaskDelay(pdMS_TO_TICKS(5000UL));
     210:	66 e3       	ldi	r22, 0x36	; 54
     212:	71 e0       	ldi	r23, 0x01	; 1
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 1d 10 	call	0x203a	; 0x203a <vTaskDelay>
		int statusCode = mh_z19_takeMeassuring();
     21c:	0e 94 44 22 	call	0x4488	; 0x4488 <mh_z19_takeMeassuring>
     220:	90 e0       	ldi	r25, 0x00	; 0
		if(statusCode!=MHZ19_OK){
     222:	00 97       	sbiw	r24, 0x00	; 0
     224:	a9 f3       	breq	.-22     	; 0x210 <co2Task>
			printf("CO2 measuring error %d\n",statusCode);
     226:	9f 93       	push	r25
     228:	8f 93       	push	r24
     22a:	8f e6       	ldi	r24, 0x6F	; 111
     22c:	92 e0       	ldi	r25, 0x02	; 2
     22e:	9f 93       	push	r25
     230:	8f 93       	push	r24
     232:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	e8 cf       	rjmp	.-48     	; 0x210 <co2Task>

00000240 <co2Callback>:
		}
	}
}
void co2Callback(uint16_t ppm){
     240:	0f 93       	push	r16
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	c8 2f       	mov	r28, r24
     248:	d9 2f       	mov	r29, r25
	xSemaphoreTake(hardware_semaphore,portMAX_DELAY);
     24a:	4f ef       	ldi	r20, 0xFF	; 255
     24c:	5f ef       	ldi	r21, 0xFF	; 255
     24e:	ba 01       	movw	r22, r20
     250:	80 91 7a 14 	lds	r24, 0x147A	; 0x80147a <hardware_semaphore>
     254:	90 91 7b 14 	lds	r25, 0x147B	; 0x80147b <hardware_semaphore+0x1>
     258:	d8 d5       	rcall	.+2992   	; 0xe0a <xQueueSemaphoreTake>
	entry_data.co2=ppm;
     25a:	ea e6       	ldi	r30, 0x6A	; 106
     25c:	f4 e1       	ldi	r31, 0x14	; 20
     25e:	c4 83       	std	Z+4, r28	; 0x04
     260:	d5 83       	std	Z+5, r29	; 0x05
	printf("CO2 VALUE : %d ", entry_data.co2);
     262:	df 93       	push	r29
     264:	cf 93       	push	r28
     266:	87 e8       	ldi	r24, 0x87	; 135
     268:	92 e0       	ldi	r25, 0x02	; 2
     26a:	9f 93       	push	r25
     26c:	8f 93       	push	r24
     26e:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>
	xSemaphoreGive(hardware_semaphore);
     272:	00 e0       	ldi	r16, 0x00	; 0
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	a9 01       	movw	r20, r18
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	80 91 7a 14 	lds	r24, 0x147A	; 0x80147a <hardware_semaphore>
     282:	90 91 7b 14 	lds	r25, 0x147B	; 0x80147b <hardware_semaphore+0x1>
     286:	47 d4       	rcall	.+2190   	; 0xb16 <xQueueGenericSend>
}
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	0f 91       	pop	r16
     296:	08 95       	ret

00000298 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     298:	ec e6       	ldi	r30, 0x6C	; 108
     29a:	f8 e0       	ldi	r31, 0x08	; 8
     29c:	a0 e7       	ldi	r26, 0x70	; 112
     29e:	b8 e0       	ldi	r27, 0x08	; 8
     2a0:	b1 83       	std	Z+1, r27	; 0x01
     2a2:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     2a4:	13 82       	std	Z+3, r1	; 0x03
     2a6:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     2a8:	e0 e3       	ldi	r30, 0x30	; 48
     2aa:	f2 e1       	ldi	r31, 0x12	; 18
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     2ac:	f0 93 6b 08 	sts	0x086B, r31	; 0x80086b <pxEnd+0x1>
     2b0:	e0 93 6a 08 	sts	0x086A, r30	; 0x80086a <pxEnd>
    pxEnd->xBlockSize = 0;
     2b4:	13 82       	std	Z+3, r1	; 0x03
     2b6:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     2b8:	11 82       	std	Z+1, r1	; 0x01
     2ba:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     2bc:	80 ec       	ldi	r24, 0xC0	; 192
     2be:	99 e0       	ldi	r25, 0x09	; 9
     2c0:	13 96       	adiw	r26, 0x03	; 3
     2c2:	9c 93       	st	X, r25
     2c4:	8e 93       	st	-X, r24
     2c6:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     2c8:	ed 93       	st	X+, r30
     2ca:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     2cc:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <xMinimumEverFreeBytesRemaining+0x1>
     2d0:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     2d4:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <xFreeBytesRemaining+0x1>
     2d8:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e8       	ldi	r25, 0x80	; 128
     2e0:	90 93 61 08 	sts	0x0861, r25	; 0x800861 <__data_end+0x1>
     2e4:	80 93 60 08 	sts	0x0860, r24	; 0x800860 <__data_end>
     2e8:	08 95       	ret

000002ea <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     2f0:	ac e6       	ldi	r26, 0x6C	; 108
     2f2:	b8 e0       	ldi	r27, 0x08	; 8
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <prvInsertBlockIntoFreeList+0xe>
     2f6:	df 01       	movw	r26, r30
     2f8:	ed 91       	ld	r30, X+
     2fa:	fc 91       	ld	r31, X
     2fc:	11 97       	sbiw	r26, 0x01	; 1
     2fe:	ec 17       	cp	r30, r28
     300:	fd 07       	cpc	r31, r29
     302:	c8 f3       	brcs	.-14     	; 0x2f6 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     304:	12 96       	adiw	r26, 0x02	; 2
     306:	8d 91       	ld	r24, X+
     308:	9c 91       	ld	r25, X
     30a:	13 97       	sbiw	r26, 0x03	; 3
     30c:	9d 01       	movw	r18, r26
     30e:	28 0f       	add	r18, r24
     310:	39 1f       	adc	r19, r25
     312:	c2 17       	cp	r28, r18
     314:	d3 07       	cpc	r29, r19
     316:	49 f4       	brne	.+18     	; 0x32a <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     318:	2a 81       	ldd	r18, Y+2	; 0x02
     31a:	3b 81       	ldd	r19, Y+3	; 0x03
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
     320:	13 96       	adiw	r26, 0x03	; 3
     322:	9c 93       	st	X, r25
     324:	8e 93       	st	-X, r24
     326:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     328:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     32a:	8a 81       	ldd	r24, Y+2	; 0x02
     32c:	9b 81       	ldd	r25, Y+3	; 0x03
     32e:	9e 01       	movw	r18, r28
     330:	28 0f       	add	r18, r24
     332:	39 1f       	adc	r19, r25
     334:	e2 17       	cp	r30, r18
     336:	f3 07       	cpc	r31, r19
     338:	c1 f4       	brne	.+48     	; 0x36a <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     33a:	20 91 6a 08 	lds	r18, 0x086A	; 0x80086a <pxEnd>
     33e:	30 91 6b 08 	lds	r19, 0x086B	; 0x80086b <pxEnd+0x1>
     342:	e2 17       	cp	r30, r18
     344:	f3 07       	cpc	r31, r19
     346:	71 f0       	breq	.+28     	; 0x364 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     348:	22 81       	ldd	r18, Z+2	; 0x02
     34a:	33 81       	ldd	r19, Z+3	; 0x03
     34c:	82 0f       	add	r24, r18
     34e:	93 1f       	adc	r25, r19
     350:	9b 83       	std	Y+3, r25	; 0x03
     352:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     354:	ed 91       	ld	r30, X+
     356:	fc 91       	ld	r31, X
     358:	11 97       	sbiw	r26, 0x01	; 1
     35a:	80 81       	ld	r24, Z
     35c:	91 81       	ldd	r25, Z+1	; 0x01
     35e:	99 83       	std	Y+1, r25	; 0x01
     360:	88 83       	st	Y, r24
     362:	05 c0       	rjmp	.+10     	; 0x36e <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     364:	39 83       	std	Y+1, r19	; 0x01
     366:	28 83       	st	Y, r18
     368:	02 c0       	rjmp	.+4      	; 0x36e <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     36a:	f9 83       	std	Y+1, r31	; 0x01
     36c:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     36e:	ca 17       	cp	r28, r26
     370:	db 07       	cpc	r29, r27
     372:	11 f0       	breq	.+4      	; 0x378 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     374:	cd 93       	st	X+, r28
     376:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     38c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     390:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <pxEnd>
     394:	90 91 6b 08 	lds	r25, 0x086B	; 0x80086b <pxEnd+0x1>
     398:	89 2b       	or	r24, r25
     39a:	09 f4       	brne	.+2      	; 0x39e <pvPortMalloc+0x20>
        {
            prvHeapInit();
     39c:	7d df       	rcall	.-262    	; 0x298 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     39e:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__data_end>
     3a2:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <__data_end+0x1>
     3a6:	80 23       	and	r24, r16
     3a8:	91 23       	and	r25, r17
     3aa:	89 2b       	or	r24, r25
     3ac:	09 f0       	breq	.+2      	; 0x3b0 <pvPortMalloc+0x32>
     3ae:	76 c0       	rjmp	.+236    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     3b0:	01 15       	cp	r16, r1
     3b2:	11 05       	cpc	r17, r1
     3b4:	49 f0       	breq	.+18     	; 0x3c8 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     3b6:	c8 01       	movw	r24, r16
     3b8:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     3ba:	08 17       	cp	r16, r24
     3bc:	19 07       	cpc	r17, r25
     3be:	18 f0       	brcs	.+6      	; 0x3c6 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     3c0:	00 e0       	ldi	r16, 0x00	; 0
     3c2:	10 e0       	ldi	r17, 0x00	; 0
     3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     3c6:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     3c8:	01 15       	cp	r16, r1
     3ca:	11 05       	cpc	r17, r1
     3cc:	09 f4       	brne	.+2      	; 0x3d0 <pvPortMalloc+0x52>
     3ce:	69 c0       	rjmp	.+210    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     3d0:	80 91 68 08 	lds	r24, 0x0868	; 0x800868 <xFreeBytesRemaining>
     3d4:	90 91 69 08 	lds	r25, 0x0869	; 0x800869 <xFreeBytesRemaining+0x1>
     3d8:	80 17       	cp	r24, r16
     3da:	91 07       	cpc	r25, r17
     3dc:	08 f4       	brcc	.+2      	; 0x3e0 <pvPortMalloc+0x62>
     3de:	64 c0       	rjmp	.+200    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     3e0:	c0 91 6c 08 	lds	r28, 0x086C	; 0x80086c <xStart>
     3e4:	d0 91 6d 08 	lds	r29, 0x086D	; 0x80086d <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     3e8:	ec e6       	ldi	r30, 0x6C	; 108
     3ea:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     3ee:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     3f0:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     3f2:	8a 81       	ldd	r24, Y+2	; 0x02
     3f4:	9b 81       	ldd	r25, Y+3	; 0x03
     3f6:	80 17       	cp	r24, r16
     3f8:	91 07       	cpc	r25, r17
     3fa:	20 f4       	brcc	.+8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3fc:	88 81       	ld	r24, Y
     3fe:	99 81       	ldd	r25, Y+1	; 0x01
     400:	00 97       	sbiw	r24, 0x00	; 0
     402:	a9 f7       	brne	.-22     	; 0x3ee <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     404:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <pxEnd>
     408:	90 91 6b 08 	lds	r25, 0x086B	; 0x80086b <pxEnd+0x1>
     40c:	c8 17       	cp	r28, r24
     40e:	d9 07       	cpc	r29, r25
     410:	09 f4       	brne	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	4d c0       	rjmp	.+154    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     414:	e0 80       	ld	r14, Z
     416:	f1 80       	ldd	r15, Z+1	; 0x01
     418:	84 e0       	ldi	r24, 0x04	; 4
     41a:	e8 0e       	add	r14, r24
     41c:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     41e:	88 81       	ld	r24, Y
     420:	99 81       	ldd	r25, Y+1	; 0x01
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     426:	2a 81       	ldd	r18, Y+2	; 0x02
     428:	3b 81       	ldd	r19, Y+3	; 0x03
     42a:	20 1b       	sub	r18, r16
     42c:	31 0b       	sbc	r19, r17
     42e:	29 30       	cpi	r18, 0x09	; 9
     430:	31 05       	cpc	r19, r1
     432:	48 f0       	brcs	.+18     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     434:	ce 01       	movw	r24, r28
     436:	80 0f       	add	r24, r16
     438:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     43a:	fc 01       	movw	r30, r24
     43c:	33 83       	std	Z+3, r19	; 0x03
     43e:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     440:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     442:	0a 83       	std	Y+2, r16	; 0x02
     444:	52 df       	rcall	.-348    	; 0x2ea <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     446:	2a 81       	ldd	r18, Y+2	; 0x02
     448:	3b 81       	ldd	r19, Y+3	; 0x03
     44a:	80 91 68 08 	lds	r24, 0x0868	; 0x800868 <xFreeBytesRemaining>
     44e:	90 91 69 08 	lds	r25, 0x0869	; 0x800869 <xFreeBytesRemaining+0x1>
     452:	82 1b       	sub	r24, r18
     454:	93 0b       	sbc	r25, r19
     456:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <xFreeBytesRemaining+0x1>
     45a:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     45e:	40 91 66 08 	lds	r20, 0x0866	; 0x800866 <xMinimumEverFreeBytesRemaining>
     462:	50 91 67 08 	lds	r21, 0x0867	; 0x800867 <xMinimumEverFreeBytesRemaining+0x1>
     466:	84 17       	cp	r24, r20
     468:	95 07       	cpc	r25, r21
     46a:	20 f4       	brcc	.+8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     46c:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <xMinimumEverFreeBytesRemaining+0x1>
     470:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     474:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__data_end>
     478:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <__data_end+0x1>
     47c:	28 2b       	or	r18, r24
     47e:	39 2b       	or	r19, r25
     480:	3b 83       	std	Y+3, r19	; 0x03
     482:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     484:	19 82       	std	Y+1, r1	; 0x01
     486:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     488:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <xNumberOfSuccessfulAllocations>
     48c:	90 91 65 08 	lds	r25, 0x0865	; 0x800865 <xNumberOfSuccessfulAllocations+0x1>
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	90 93 65 08 	sts	0x0865, r25	; 0x800865 <xNumberOfSuccessfulAllocations+0x1>
     496:	80 93 64 08 	sts	0x0864, r24	; 0x800864 <xNumberOfSuccessfulAllocations>
     49a:	0b c0       	rjmp	.+22     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     49c:	e1 2c       	mov	r14, r1
     49e:	f1 2c       	mov	r15, r1
     4a0:	08 c0       	rjmp	.+16     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4a2:	e1 2c       	mov	r14, r1
     4a4:	f1 2c       	mov	r15, r1
     4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4a8:	e1 2c       	mov	r14, r1
     4aa:	f1 2c       	mov	r15, r1
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4ae:	e1 2c       	mov	r14, r1
     4b0:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     4b2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     4b6:	e1 14       	cp	r14, r1
     4b8:	f1 04       	cpc	r15, r1
     4ba:	11 f4       	brne	.+4      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     4bc:	0e 94 8a 19 	call	0x3314	; 0x3314 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     4c0:	c7 01       	movw	r24, r14
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	08 95       	ret

000004d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     4d8:	00 97       	sbiw	r24, 0x00	; 0
     4da:	91 f1       	breq	.+100    	; 0x540 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     4dc:	ec 01       	movw	r28, r24
     4de:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     4e0:	4a 81       	ldd	r20, Y+2	; 0x02
     4e2:	5b 81       	ldd	r21, Y+3	; 0x03
     4e4:	20 91 60 08 	lds	r18, 0x0860	; 0x800860 <__data_end>
     4e8:	30 91 61 08 	lds	r19, 0x0861	; 0x800861 <__data_end+0x1>
     4ec:	ba 01       	movw	r22, r20
     4ee:	62 23       	and	r22, r18
     4f0:	73 23       	and	r23, r19
     4f2:	67 2b       	or	r22, r23
     4f4:	29 f1       	breq	.+74     	; 0x540 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     4f6:	68 81       	ld	r22, Y
     4f8:	79 81       	ldd	r23, Y+1	; 0x01
     4fa:	67 2b       	or	r22, r23
     4fc:	09 f5       	brne	.+66     	; 0x540 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     4fe:	20 95       	com	r18
     500:	30 95       	com	r19
     502:	24 23       	and	r18, r20
     504:	35 23       	and	r19, r21
     506:	3b 83       	std	Y+3, r19	; 0x03
     508:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     50a:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     50e:	8a 81       	ldd	r24, Y+2	; 0x02
     510:	9b 81       	ldd	r25, Y+3	; 0x03
     512:	20 91 68 08 	lds	r18, 0x0868	; 0x800868 <xFreeBytesRemaining>
     516:	30 91 69 08 	lds	r19, 0x0869	; 0x800869 <xFreeBytesRemaining+0x1>
     51a:	82 0f       	add	r24, r18
     51c:	93 1f       	adc	r25, r19
     51e:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <xFreeBytesRemaining+0x1>
     522:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     526:	ce 01       	movw	r24, r28
     528:	e0 de       	rcall	.-576    	; 0x2ea <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     52a:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <xNumberOfSuccessfulFrees>
     52e:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <xNumberOfSuccessfulFrees+0x1>
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	90 93 63 08 	sts	0x0863, r25	; 0x800863 <xNumberOfSuccessfulFrees+0x1>
     538:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     53c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	08 95       	ret

0000054a <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     54a:	fc 01       	movw	r30, r24
     54c:	03 96       	adiw	r24, 0x03	; 3
     54e:	92 83       	std	Z+2, r25	; 0x02
     550:	81 83       	std	Z+1, r24	; 0x01
     552:	4f ef       	ldi	r20, 0xFF	; 255
     554:	5f ef       	ldi	r21, 0xFF	; 255
     556:	ba 01       	movw	r22, r20
     558:	43 83       	std	Z+3, r20	; 0x03
     55a:	54 83       	std	Z+4, r21	; 0x04
     55c:	65 83       	std	Z+5, r22	; 0x05
     55e:	76 83       	std	Z+6, r23	; 0x06
     560:	90 87       	std	Z+8, r25	; 0x08
     562:	87 83       	std	Z+7, r24	; 0x07
     564:	92 87       	std	Z+10, r25	; 0x0a
     566:	81 87       	std	Z+9, r24	; 0x09
     568:	10 82       	st	Z, r1
     56a:	08 95       	ret

0000056c <vListInitialiseItem>:
     56c:	fc 01       	movw	r30, r24
     56e:	13 86       	std	Z+11, r1	; 0x0b
     570:	12 86       	std	Z+10, r1	; 0x0a
     572:	08 95       	ret

00000574 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     57e:	08 81       	ld	r16, Y
     580:	19 81       	ldd	r17, Y+1	; 0x01
     582:	2a 81       	ldd	r18, Y+2	; 0x02
     584:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     586:	0f 3f       	cpi	r16, 0xFF	; 255
     588:	4f ef       	ldi	r20, 0xFF	; 255
     58a:	14 07       	cpc	r17, r20
     58c:	24 07       	cpc	r18, r20
     58e:	34 07       	cpc	r19, r20
     590:	21 f4       	brne	.+8      	; 0x59a <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     592:	fc 01       	movw	r30, r24
     594:	a1 85       	ldd	r26, Z+9	; 0x09
     596:	b2 85       	ldd	r27, Z+10	; 0x0a
     598:	11 c0       	rjmp	.+34     	; 0x5bc <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     59a:	dc 01       	movw	r26, r24
     59c:	13 96       	adiw	r26, 0x03	; 3
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <vListInsert+0x2e>
     5a0:	df 01       	movw	r26, r30
     5a2:	14 96       	adiw	r26, 0x04	; 4
     5a4:	ed 91       	ld	r30, X+
     5a6:	fc 91       	ld	r31, X
     5a8:	15 97       	sbiw	r26, 0x05	; 5
     5aa:	40 81       	ld	r20, Z
     5ac:	51 81       	ldd	r21, Z+1	; 0x01
     5ae:	62 81       	ldd	r22, Z+2	; 0x02
     5b0:	73 81       	ldd	r23, Z+3	; 0x03
     5b2:	04 17       	cp	r16, r20
     5b4:	15 07       	cpc	r17, r21
     5b6:	26 07       	cpc	r18, r22
     5b8:	37 07       	cpc	r19, r23
     5ba:	90 f7       	brcc	.-28     	; 0x5a0 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     5bc:	14 96       	adiw	r26, 0x04	; 4
     5be:	ed 91       	ld	r30, X+
     5c0:	fc 91       	ld	r31, X
     5c2:	15 97       	sbiw	r26, 0x05	; 5
     5c4:	fd 83       	std	Y+5, r31	; 0x05
     5c6:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     5c8:	d7 83       	std	Z+7, r29	; 0x07
     5ca:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     5cc:	bf 83       	std	Y+7, r27	; 0x07
     5ce:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     5d0:	15 96       	adiw	r26, 0x05	; 5
     5d2:	dc 93       	st	X, r29
     5d4:	ce 93       	st	-X, r28
     5d6:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     5d8:	9b 87       	std	Y+11, r25	; 0x0b
     5da:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     5dc:	fc 01       	movw	r30, r24
     5de:	20 81       	ld	r18, Z
     5e0:	2f 5f       	subi	r18, 0xFF	; 255
     5e2:	20 83       	st	Z, r18
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	08 95       	ret

000005ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     5f4:	a2 85       	ldd	r26, Z+10	; 0x0a
     5f6:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5f8:	c4 81       	ldd	r28, Z+4	; 0x04
     5fa:	d5 81       	ldd	r29, Z+5	; 0x05
     5fc:	86 81       	ldd	r24, Z+6	; 0x06
     5fe:	97 81       	ldd	r25, Z+7	; 0x07
     600:	9f 83       	std	Y+7, r25	; 0x07
     602:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     604:	c6 81       	ldd	r28, Z+6	; 0x06
     606:	d7 81       	ldd	r29, Z+7	; 0x07
     608:	84 81       	ldd	r24, Z+4	; 0x04
     60a:	95 81       	ldd	r25, Z+5	; 0x05
     60c:	9d 83       	std	Y+5, r25	; 0x05
     60e:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     610:	11 96       	adiw	r26, 0x01	; 1
     612:	8d 91       	ld	r24, X+
     614:	9c 91       	ld	r25, X
     616:	12 97       	sbiw	r26, 0x02	; 2
     618:	e8 17       	cp	r30, r24
     61a:	f9 07       	cpc	r31, r25
     61c:	31 f4       	brne	.+12     	; 0x62a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     61e:	86 81       	ldd	r24, Z+6	; 0x06
     620:	97 81       	ldd	r25, Z+7	; 0x07
     622:	12 96       	adiw	r26, 0x02	; 2
     624:	9c 93       	st	X, r25
     626:	8e 93       	st	-X, r24
     628:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     62a:	13 86       	std	Z+11, r1	; 0x0b
     62c:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     62e:	8c 91       	ld	r24, X
     630:	81 50       	subi	r24, 0x01	; 1
     632:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     634:	8c 91       	ld	r24, X
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     63c:	a8 95       	wdr
     63e:	90 ec       	ldi	r25, 0xC0	; 192
     640:	88 e1       	ldi	r24, 0x18	; 24
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	a8 95       	wdr
     648:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     652:	08 95       	ret

00000654 <pxPortInitialiseStack>:
     654:	fc 01       	movw	r30, r24
     656:	60 83       	st	Z, r22
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	70 83       	st	Z, r23
     65c:	31 97       	sbiw	r30, 0x01	; 1
     65e:	10 82       	st	Z, r1
     660:	31 97       	sbiw	r30, 0x01	; 1
     662:	10 82       	st	Z, r1
     664:	31 97       	sbiw	r30, 0x01	; 1
     666:	20 e8       	ldi	r18, 0x80	; 128
     668:	20 83       	st	Z, r18
     66a:	31 97       	sbiw	r30, 0x01	; 1
     66c:	10 82       	st	Z, r1
     66e:	31 97       	sbiw	r30, 0x01	; 1
     670:	10 82       	st	Z, r1
     672:	31 97       	sbiw	r30, 0x01	; 1
     674:	10 82       	st	Z, r1
     676:	77 97       	sbiw	r30, 0x17	; 23
     678:	40 83       	st	Z, r20
     67a:	31 97       	sbiw	r30, 0x01	; 1
     67c:	50 83       	st	Z, r21
     67e:	86 97       	sbiw	r24, 0x26	; 38
     680:	08 95       	ret

00000682 <xPortStartScheduler>:
     682:	dc df       	rcall	.-72     	; 0x63c <prvSetupTimerInterrupt>
     684:	a0 91 f3 12 	lds	r26, 0x12F3	; 0x8012f3 <pxCurrentTCB>
     688:	b0 91 f4 12 	lds	r27, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
     68c:	cd 91       	ld	r28, X+
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	dd 91       	ld	r29, X+
     692:	de bf       	out	0x3e, r29	; 62
     694:	ff 91       	pop	r31
     696:	ef 91       	pop	r30
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	bf 91       	pop	r27
     69e:	af 91       	pop	r26
     6a0:	9f 91       	pop	r25
     6a2:	8f 91       	pop	r24
     6a4:	7f 91       	pop	r23
     6a6:	6f 91       	pop	r22
     6a8:	5f 91       	pop	r21
     6aa:	4f 91       	pop	r20
     6ac:	3f 91       	pop	r19
     6ae:	2f 91       	pop	r18
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	ff 90       	pop	r15
     6b6:	ef 90       	pop	r14
     6b8:	df 90       	pop	r13
     6ba:	cf 90       	pop	r12
     6bc:	bf 90       	pop	r11
     6be:	af 90       	pop	r10
     6c0:	9f 90       	pop	r9
     6c2:	8f 90       	pop	r8
     6c4:	7f 90       	pop	r7
     6c6:	6f 90       	pop	r6
     6c8:	5f 90       	pop	r5
     6ca:	4f 90       	pop	r4
     6cc:	3f 90       	pop	r3
     6ce:	2f 90       	pop	r2
     6d0:	1f 90       	pop	r1
     6d2:	0f 90       	pop	r0
     6d4:	0c be       	out	0x3c, r0	; 60
     6d6:	0f 90       	pop	r0
     6d8:	0b be       	out	0x3b, r0	; 59
     6da:	0f 90       	pop	r0
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	0f 90       	pop	r0
     6e0:	08 95       	ret
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	08 95       	ret

000006e6 <vPortYield>:
     6e6:	0f 92       	push	r0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	0f 92       	push	r0
     6ee:	0b b6       	in	r0, 0x3b	; 59
     6f0:	0f 92       	push	r0
     6f2:	0c b6       	in	r0, 0x3c	; 60
     6f4:	0f 92       	push	r0
     6f6:	1f 92       	push	r1
     6f8:	11 24       	eor	r1, r1
     6fa:	2f 92       	push	r2
     6fc:	3f 92       	push	r3
     6fe:	4f 92       	push	r4
     700:	5f 92       	push	r5
     702:	6f 92       	push	r6
     704:	7f 92       	push	r7
     706:	8f 92       	push	r8
     708:	9f 92       	push	r9
     70a:	af 92       	push	r10
     70c:	bf 92       	push	r11
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	2f 93       	push	r18
     71c:	3f 93       	push	r19
     71e:	4f 93       	push	r20
     720:	5f 93       	push	r21
     722:	6f 93       	push	r22
     724:	7f 93       	push	r23
     726:	8f 93       	push	r24
     728:	9f 93       	push	r25
     72a:	af 93       	push	r26
     72c:	bf 93       	push	r27
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	ef 93       	push	r30
     734:	ff 93       	push	r31
     736:	a0 91 f3 12 	lds	r26, 0x12F3	; 0x8012f3 <pxCurrentTCB>
     73a:	b0 91 f4 12 	lds	r27, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
     73e:	0d b6       	in	r0, 0x3d	; 61
     740:	0d 92       	st	X+, r0
     742:	0e b6       	in	r0, 0x3e	; 62
     744:	0d 92       	st	X+, r0
     746:	0e 94 38 10 	call	0x2070	; 0x2070 <vTaskSwitchContext>
     74a:	a0 91 f3 12 	lds	r26, 0x12F3	; 0x8012f3 <pxCurrentTCB>
     74e:	b0 91 f4 12 	lds	r27, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
     752:	cd 91       	ld	r28, X+
     754:	cd bf       	out	0x3d, r28	; 61
     756:	dd 91       	ld	r29, X+
     758:	de bf       	out	0x3e, r29	; 62
     75a:	ff 91       	pop	r31
     75c:	ef 91       	pop	r30
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	bf 91       	pop	r27
     764:	af 91       	pop	r26
     766:	9f 91       	pop	r25
     768:	8f 91       	pop	r24
     76a:	7f 91       	pop	r23
     76c:	6f 91       	pop	r22
     76e:	5f 91       	pop	r21
     770:	4f 91       	pop	r20
     772:	3f 91       	pop	r19
     774:	2f 91       	pop	r18
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
     782:	bf 90       	pop	r11
     784:	af 90       	pop	r10
     786:	9f 90       	pop	r9
     788:	8f 90       	pop	r8
     78a:	7f 90       	pop	r7
     78c:	6f 90       	pop	r6
     78e:	5f 90       	pop	r5
     790:	4f 90       	pop	r4
     792:	3f 90       	pop	r3
     794:	2f 90       	pop	r2
     796:	1f 90       	pop	r1
     798:	0f 90       	pop	r0
     79a:	0c be       	out	0x3c, r0	; 60
     79c:	0f 90       	pop	r0
     79e:	0b be       	out	0x3b, r0	; 59
     7a0:	0f 90       	pop	r0
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	0f 90       	pop	r0
     7a6:	08 95       	ret

000007a8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     7a8:	0f 92       	push	r0
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	0f 92       	push	r0
     7b0:	0b b6       	in	r0, 0x3b	; 59
     7b2:	0f 92       	push	r0
     7b4:	0c b6       	in	r0, 0x3c	; 60
     7b6:	0f 92       	push	r0
     7b8:	1f 92       	push	r1
     7ba:	11 24       	eor	r1, r1
     7bc:	2f 92       	push	r2
     7be:	3f 92       	push	r3
     7c0:	4f 92       	push	r4
     7c2:	5f 92       	push	r5
     7c4:	6f 92       	push	r6
     7c6:	7f 92       	push	r7
     7c8:	8f 92       	push	r8
     7ca:	9f 92       	push	r9
     7cc:	af 92       	push	r10
     7ce:	bf 92       	push	r11
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	2f 93       	push	r18
     7de:	3f 93       	push	r19
     7e0:	4f 93       	push	r20
     7e2:	5f 93       	push	r21
     7e4:	6f 93       	push	r22
     7e6:	7f 93       	push	r23
     7e8:	8f 93       	push	r24
     7ea:	9f 93       	push	r25
     7ec:	af 93       	push	r26
     7ee:	bf 93       	push	r27
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	ef 93       	push	r30
     7f6:	ff 93       	push	r31
     7f8:	a0 91 f3 12 	lds	r26, 0x12F3	; 0x8012f3 <pxCurrentTCB>
     7fc:	b0 91 f4 12 	lds	r27, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
     800:	0d b6       	in	r0, 0x3d	; 61
     802:	0d 92       	st	X+, r0
     804:	0e b6       	in	r0, 0x3e	; 62
     806:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     808:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     80a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <xTaskIncrementTick>
     80e:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     810:	0e 94 38 10 	call	0x2070	; 0x2070 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     814:	a0 91 f3 12 	lds	r26, 0x12F3	; 0x8012f3 <pxCurrentTCB>
     818:	b0 91 f4 12 	lds	r27, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
     81c:	cd 91       	ld	r28, X+
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	dd 91       	ld	r29, X+
     822:	de bf       	out	0x3e, r29	; 62
     824:	ff 91       	pop	r31
     826:	ef 91       	pop	r30
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	bf 91       	pop	r27
     82e:	af 91       	pop	r26
     830:	9f 91       	pop	r25
     832:	8f 91       	pop	r24
     834:	7f 91       	pop	r23
     836:	6f 91       	pop	r22
     838:	5f 91       	pop	r21
     83a:	4f 91       	pop	r20
     83c:	3f 91       	pop	r19
     83e:	2f 91       	pop	r18
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	cf 90       	pop	r12
     84c:	bf 90       	pop	r11
     84e:	af 90       	pop	r10
     850:	9f 90       	pop	r9
     852:	8f 90       	pop	r8
     854:	7f 90       	pop	r7
     856:	6f 90       	pop	r6
     858:	5f 90       	pop	r5
     85a:	4f 90       	pop	r4
     85c:	3f 90       	pop	r3
     85e:	2f 90       	pop	r2
     860:	1f 90       	pop	r1
     862:	0f 90       	pop	r0
     864:	0c be       	out	0x3c, r0	; 60
     866:	0f 90       	pop	r0
     868:	0b be       	out	0x3b, r0	; 59
     86a:	0f 90       	pop	r0
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     870:	08 95       	ret

00000872 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     872:	9a df       	rcall	.-204    	; 0x7a8 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     874:	18 95       	reti

00000876 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     876:	dc 01       	movw	r26, r24
     878:	53 96       	adiw	r26, 0x13	; 19
     87a:	2c 91       	ld	r18, X
     87c:	53 97       	sbiw	r26, 0x13	; 19
     87e:	22 23       	and	r18, r18
     880:	41 f0       	breq	.+16     	; 0x892 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     882:	5a 96       	adiw	r26, 0x1a	; 26
     884:	ed 91       	ld	r30, X+
     886:	fc 91       	ld	r31, X
     888:	5b 97       	sbiw	r26, 0x1b	; 27
     88a:	90 81       	ld	r25, Z
     88c:	8a e0       	ldi	r24, 0x0A	; 10
     88e:	89 1b       	sub	r24, r25
     890:	08 95       	ret
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	08 95       	ret

00000896 <prvIsQueueEmpty>:
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	0f 92       	push	r0
     89c:	fc 01       	movw	r30, r24
     89e:	86 8d       	ldd	r24, Z+30	; 0x1e
     8a0:	81 11       	cpse	r24, r1
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <prvIsQueueEmpty+0x12>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	01 c0       	rjmp	.+2      	; 0x8aa <prvIsQueueEmpty+0x14>
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	0f 90       	pop	r0
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	08 95       	ret

000008b0 <prvIsQueueFull>:
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	0f 92       	push	r0
     8b6:	fc 01       	movw	r30, r24
     8b8:	26 8d       	ldd	r18, Z+30	; 0x1e
     8ba:	87 8d       	ldd	r24, Z+31	; 0x1f
     8bc:	28 13       	cpse	r18, r24
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <prvIsQueueFull+0x14>
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <prvIsQueueFull+0x16>
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	0f 90       	pop	r0
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	08 95       	ret

000008cc <prvCopyDataToQueue>:
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	ec 01       	movw	r28, r24
     8d6:	04 2f       	mov	r16, r20
     8d8:	1e 8d       	ldd	r17, Y+30	; 0x1e
     8da:	48 a1       	ldd	r20, Y+32	; 0x20
     8dc:	41 11       	cpse	r20, r1
     8de:	0c c0       	rjmp	.+24     	; 0x8f8 <prvCopyDataToQueue+0x2c>
     8e0:	88 81       	ld	r24, Y
     8e2:	99 81       	ldd	r25, Y+1	; 0x01
     8e4:	89 2b       	or	r24, r25
     8e6:	09 f0       	breq	.+2      	; 0x8ea <prvCopyDataToQueue+0x1e>
     8e8:	42 c0       	rjmp	.+132    	; 0x96e <prvCopyDataToQueue+0xa2>
     8ea:	8c 81       	ldd	r24, Y+4	; 0x04
     8ec:	9d 81       	ldd	r25, Y+5	; 0x05
     8ee:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <xTaskPriorityDisinherit>
     8f2:	1d 82       	std	Y+5, r1	; 0x05
     8f4:	1c 82       	std	Y+4, r1	; 0x04
     8f6:	42 c0       	rjmp	.+132    	; 0x97c <prvCopyDataToQueue+0xb0>
     8f8:	01 11       	cpse	r16, r1
     8fa:	17 c0       	rjmp	.+46     	; 0x92a <prvCopyDataToQueue+0x5e>
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	8a 81       	ldd	r24, Y+2	; 0x02
     900:	9b 81       	ldd	r25, Y+3	; 0x03
     902:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <memcpy>
     906:	28 a1       	ldd	r18, Y+32	; 0x20
     908:	8a 81       	ldd	r24, Y+2	; 0x02
     90a:	9b 81       	ldd	r25, Y+3	; 0x03
     90c:	82 0f       	add	r24, r18
     90e:	91 1d       	adc	r25, r1
     910:	9b 83       	std	Y+3, r25	; 0x03
     912:	8a 83       	std	Y+2, r24	; 0x02
     914:	2c 81       	ldd	r18, Y+4	; 0x04
     916:	3d 81       	ldd	r19, Y+5	; 0x05
     918:	82 17       	cp	r24, r18
     91a:	93 07       	cpc	r25, r19
     91c:	50 f1       	brcs	.+84     	; 0x972 <prvCopyDataToQueue+0xa6>
     91e:	88 81       	ld	r24, Y
     920:	99 81       	ldd	r25, Y+1	; 0x01
     922:	9b 83       	std	Y+3, r25	; 0x03
     924:	8a 83       	std	Y+2, r24	; 0x02
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	29 c0       	rjmp	.+82     	; 0x97c <prvCopyDataToQueue+0xb0>
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	8e 81       	ldd	r24, Y+6	; 0x06
     92e:	9f 81       	ldd	r25, Y+7	; 0x07
     930:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <memcpy>
     934:	88 a1       	ldd	r24, Y+32	; 0x20
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	91 95       	neg	r25
     93a:	81 95       	neg	r24
     93c:	91 09       	sbc	r25, r1
     93e:	2e 81       	ldd	r18, Y+6	; 0x06
     940:	3f 81       	ldd	r19, Y+7	; 0x07
     942:	28 0f       	add	r18, r24
     944:	39 1f       	adc	r19, r25
     946:	3f 83       	std	Y+7, r19	; 0x07
     948:	2e 83       	std	Y+6, r18	; 0x06
     94a:	48 81       	ld	r20, Y
     94c:	59 81       	ldd	r21, Y+1	; 0x01
     94e:	24 17       	cp	r18, r20
     950:	35 07       	cpc	r19, r21
     952:	30 f4       	brcc	.+12     	; 0x960 <prvCopyDataToQueue+0x94>
     954:	2c 81       	ldd	r18, Y+4	; 0x04
     956:	3d 81       	ldd	r19, Y+5	; 0x05
     958:	82 0f       	add	r24, r18
     95a:	93 1f       	adc	r25, r19
     95c:	9f 83       	std	Y+7, r25	; 0x07
     95e:	8e 83       	std	Y+6, r24	; 0x06
     960:	02 30       	cpi	r16, 0x02	; 2
     962:	49 f4       	brne	.+18     	; 0x976 <prvCopyDataToQueue+0xaa>
     964:	11 23       	and	r17, r17
     966:	49 f0       	breq	.+18     	; 0x97a <prvCopyDataToQueue+0xae>
     968:	11 50       	subi	r17, 0x01	; 1
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	07 c0       	rjmp	.+14     	; 0x97c <prvCopyDataToQueue+0xb0>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	05 c0       	rjmp	.+10     	; 0x97c <prvCopyDataToQueue+0xb0>
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	03 c0       	rjmp	.+6      	; 0x97c <prvCopyDataToQueue+0xb0>
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	01 c0       	rjmp	.+2      	; 0x97c <prvCopyDataToQueue+0xb0>
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	1f 5f       	subi	r17, 0xFF	; 255
     97e:	1e 8f       	std	Y+30, r17	; 0x1e
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	08 95       	ret

0000098a <prvCopyDataFromQueue>:
     98a:	fc 01       	movw	r30, r24
     98c:	40 a1       	ldd	r20, Z+32	; 0x20
     98e:	44 23       	and	r20, r20
     990:	a9 f0       	breq	.+42     	; 0x9bc <prvCopyDataFromQueue+0x32>
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	26 81       	ldd	r18, Z+6	; 0x06
     996:	37 81       	ldd	r19, Z+7	; 0x07
     998:	24 0f       	add	r18, r20
     99a:	35 1f       	adc	r19, r21
     99c:	37 83       	std	Z+7, r19	; 0x07
     99e:	26 83       	std	Z+6, r18	; 0x06
     9a0:	84 81       	ldd	r24, Z+4	; 0x04
     9a2:	95 81       	ldd	r25, Z+5	; 0x05
     9a4:	28 17       	cp	r18, r24
     9a6:	39 07       	cpc	r19, r25
     9a8:	20 f0       	brcs	.+8      	; 0x9b2 <prvCopyDataFromQueue+0x28>
     9aa:	80 81       	ld	r24, Z
     9ac:	91 81       	ldd	r25, Z+1	; 0x01
     9ae:	97 83       	std	Z+7, r25	; 0x07
     9b0:	86 83       	std	Z+6, r24	; 0x06
     9b2:	cb 01       	movw	r24, r22
     9b4:	66 81       	ldd	r22, Z+6	; 0x06
     9b6:	77 81       	ldd	r23, Z+7	; 0x07
     9b8:	0c 94 f5 2d 	jmp	0x5bea	; 0x5bea <memcpy>
     9bc:	08 95       	ret

000009be <prvUnlockQueue>:
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	ec 01       	movw	r28, r24
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	0f 92       	push	r0
     9cc:	1a a1       	ldd	r17, Y+34	; 0x22
     9ce:	0b c0       	rjmp	.+22     	; 0x9e6 <prvUnlockQueue+0x28>
     9d0:	8b 89       	ldd	r24, Y+19	; 0x13
     9d2:	88 23       	and	r24, r24
     9d4:	51 f0       	breq	.+20     	; 0x9ea <prvUnlockQueue+0x2c>
     9d6:	ce 01       	movw	r24, r28
     9d8:	43 96       	adiw	r24, 0x13	; 19
     9da:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskRemoveFromEventList>
     9de:	81 11       	cpse	r24, r1
     9e0:	0e 94 32 12 	call	0x2464	; 0x2464 <vTaskMissedYield>
     9e4:	11 50       	subi	r17, 0x01	; 1
     9e6:	11 16       	cp	r1, r17
     9e8:	9c f3       	brlt	.-26     	; 0x9d0 <prvUnlockQueue+0x12>
     9ea:	8f ef       	ldi	r24, 0xFF	; 255
     9ec:	8a a3       	std	Y+34, r24	; 0x22
     9ee:	0f 90       	pop	r0
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	0f 92       	push	r0
     9f8:	19 a1       	ldd	r17, Y+33	; 0x21
     9fa:	0b c0       	rjmp	.+22     	; 0xa12 <prvUnlockQueue+0x54>
     9fc:	88 85       	ldd	r24, Y+8	; 0x08
     9fe:	88 23       	and	r24, r24
     a00:	51 f0       	breq	.+20     	; 0xa16 <prvUnlockQueue+0x58>
     a02:	ce 01       	movw	r24, r28
     a04:	08 96       	adiw	r24, 0x08	; 8
     a06:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskRemoveFromEventList>
     a0a:	81 11       	cpse	r24, r1
     a0c:	0e 94 32 12 	call	0x2464	; 0x2464 <vTaskMissedYield>
     a10:	11 50       	subi	r17, 0x01	; 1
     a12:	11 16       	cp	r1, r17
     a14:	9c f3       	brlt	.-26     	; 0x9fc <prvUnlockQueue+0x3e>
     a16:	8f ef       	ldi	r24, 0xFF	; 255
     a18:	89 a3       	std	Y+33, r24	; 0x21
     a1a:	0f 90       	pop	r0
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	08 95       	ret

00000a26 <xQueueGenericReset>:
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	ec 01       	movw	r28, r24
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	0f 92       	push	r0
     a32:	e8 81       	ld	r30, Y
     a34:	f9 81       	ldd	r31, Y+1	; 0x01
     a36:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a38:	28 a1       	ldd	r18, Y+32	; 0x20
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	82 9f       	mul	r24, r18
     a40:	a0 01       	movw	r20, r0
     a42:	83 9f       	mul	r24, r19
     a44:	50 0d       	add	r21, r0
     a46:	92 9f       	mul	r25, r18
     a48:	50 0d       	add	r21, r0
     a4a:	11 24       	eor	r1, r1
     a4c:	4e 0f       	add	r20, r30
     a4e:	5f 1f       	adc	r21, r31
     a50:	5d 83       	std	Y+5, r21	; 0x05
     a52:	4c 83       	std	Y+4, r20	; 0x04
     a54:	1e 8e       	std	Y+30, r1	; 0x1e
     a56:	fb 83       	std	Y+3, r31	; 0x03
     a58:	ea 83       	std	Y+2, r30	; 0x02
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	28 9f       	mul	r18, r24
     a5e:	a0 01       	movw	r20, r0
     a60:	29 9f       	mul	r18, r25
     a62:	50 0d       	add	r21, r0
     a64:	38 9f       	mul	r19, r24
     a66:	50 0d       	add	r21, r0
     a68:	11 24       	eor	r1, r1
     a6a:	cf 01       	movw	r24, r30
     a6c:	84 0f       	add	r24, r20
     a6e:	95 1f       	adc	r25, r21
     a70:	9f 83       	std	Y+7, r25	; 0x07
     a72:	8e 83       	std	Y+6, r24	; 0x06
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	89 a3       	std	Y+33, r24	; 0x21
     a78:	8a a3       	std	Y+34, r24	; 0x22
     a7a:	61 11       	cpse	r22, r1
     a7c:	0b c0       	rjmp	.+22     	; 0xa94 <xQueueGenericReset+0x6e>
     a7e:	88 85       	ldd	r24, Y+8	; 0x08
     a80:	88 23       	and	r24, r24
     a82:	71 f0       	breq	.+28     	; 0xaa0 <xQueueGenericReset+0x7a>
     a84:	ce 01       	movw	r24, r28
     a86:	08 96       	adiw	r24, 0x08	; 8
     a88:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskRemoveFromEventList>
     a8c:	88 23       	and	r24, r24
     a8e:	41 f0       	breq	.+16     	; 0xaa0 <xQueueGenericReset+0x7a>
     a90:	2a de       	rcall	.-940    	; 0x6e6 <vPortYield>
     a92:	06 c0       	rjmp	.+12     	; 0xaa0 <xQueueGenericReset+0x7a>
     a94:	ce 01       	movw	r24, r28
     a96:	08 96       	adiw	r24, 0x08	; 8
     a98:	58 dd       	rcall	.-1360   	; 0x54a <vListInitialise>
     a9a:	ce 01       	movw	r24, r28
     a9c:	43 96       	adiw	r24, 0x13	; 19
     a9e:	55 dd       	rcall	.-1366   	; 0x54a <vListInitialise>
     aa0:	0f 90       	pop	r0
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	08 95       	ret

00000aac <prvInitialiseNewQueue>:
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	f8 01       	movw	r30, r16
     ab2:	61 11       	cpse	r22, r1
     ab4:	03 c0       	rjmp	.+6      	; 0xabc <prvInitialiseNewQueue+0x10>
     ab6:	11 83       	std	Z+1, r17	; 0x01
     ab8:	00 83       	st	Z, r16
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <prvInitialiseNewQueue+0x14>
     abc:	51 83       	std	Z+1, r21	; 0x01
     abe:	40 83       	st	Z, r20
     ac0:	87 8f       	std	Z+31, r24	; 0x1f
     ac2:	60 a3       	std	Z+32, r22	; 0x20
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	cf 01       	movw	r24, r30
     ac8:	ae df       	rcall	.-164    	; 0xa26 <xQueueGenericReset>
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	08 95       	ret

00000ad0 <xQueueGenericCreate>:
     ad0:	df 92       	push	r13
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	f8 2e       	mov	r15, r24
     ae0:	e6 2e       	mov	r14, r22
     ae2:	d4 2e       	mov	r13, r20
     ae4:	86 9f       	mul	r24, r22
     ae6:	c0 01       	movw	r24, r0
     ae8:	11 24       	eor	r1, r1
     aea:	83 96       	adiw	r24, 0x23	; 35
     aec:	48 dc       	rcall	.-1904   	; 0x37e <pvPortMalloc>
     aee:	ec 01       	movw	r28, r24
     af0:	00 97       	sbiw	r24, 0x00	; 0
     af2:	41 f0       	breq	.+16     	; 0xb04 <xQueueGenericCreate+0x34>
     af4:	8c 01       	movw	r16, r24
     af6:	2d 2d       	mov	r18, r13
     af8:	ac 01       	movw	r20, r24
     afa:	4d 5d       	subi	r20, 0xDD	; 221
     afc:	5f 4f       	sbci	r21, 0xFF	; 255
     afe:	6e 2d       	mov	r22, r14
     b00:	8f 2d       	mov	r24, r15
     b02:	d4 df       	rcall	.-88     	; 0xaac <prvInitialiseNewQueue>
     b04:	ce 01       	movw	r24, r28
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	ff 90       	pop	r15
     b10:	ef 90       	pop	r14
     b12:	df 90       	pop	r13
     b14:	08 95       	ret

00000b16 <xQueueGenericSend>:
     b16:	cf 92       	push	r12
     b18:	df 92       	push	r13
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	29 97       	sbiw	r28, 0x09	; 9
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	de bf       	out	0x3e, r29	; 62
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	cd bf       	out	0x3d, r28	; 61
     b36:	7c 01       	movw	r14, r24
     b38:	6b 01       	movw	r12, r22
     b3a:	2e 83       	std	Y+6, r18	; 0x06
     b3c:	3f 83       	std	Y+7, r19	; 0x07
     b3e:	48 87       	std	Y+8, r20	; 0x08
     b40:	59 87       	std	Y+9, r21	; 0x09
     b42:	10 e0       	ldi	r17, 0x00	; 0
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	0f 92       	push	r0
     b4a:	f7 01       	movw	r30, r14
     b4c:	96 8d       	ldd	r25, Z+30	; 0x1e
     b4e:	87 8d       	ldd	r24, Z+31	; 0x1f
     b50:	98 17       	cp	r25, r24
     b52:	10 f0       	brcs	.+4      	; 0xb58 <xQueueGenericSend+0x42>
     b54:	02 30       	cpi	r16, 0x02	; 2
     b56:	b1 f4       	brne	.+44     	; 0xb84 <xQueueGenericSend+0x6e>
     b58:	40 2f       	mov	r20, r16
     b5a:	b6 01       	movw	r22, r12
     b5c:	c7 01       	movw	r24, r14
     b5e:	b6 de       	rcall	.-660    	; 0x8cc <prvCopyDataToQueue>
     b60:	f7 01       	movw	r30, r14
     b62:	93 89       	ldd	r25, Z+19	; 0x13
     b64:	99 23       	and	r25, r25
     b66:	41 f0       	breq	.+16     	; 0xb78 <xQueueGenericSend+0x62>
     b68:	c7 01       	movw	r24, r14
     b6a:	43 96       	adiw	r24, 0x13	; 19
     b6c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskRemoveFromEventList>
     b70:	88 23       	and	r24, r24
     b72:	21 f0       	breq	.+8      	; 0xb7c <xQueueGenericSend+0x66>
     b74:	b8 dd       	rcall	.-1168   	; 0x6e6 <vPortYield>
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <xQueueGenericSend+0x66>
     b78:	81 11       	cpse	r24, r1
     b7a:	b5 dd       	rcall	.-1174   	; 0x6e6 <vPortYield>
     b7c:	0f 90       	pop	r0
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	4c c0       	rjmp	.+152    	; 0xc1c <xQueueGenericSend+0x106>
     b84:	8e 81       	ldd	r24, Y+6	; 0x06
     b86:	9f 81       	ldd	r25, Y+7	; 0x07
     b88:	a8 85       	ldd	r26, Y+8	; 0x08
     b8a:	b9 85       	ldd	r27, Y+9	; 0x09
     b8c:	89 2b       	or	r24, r25
     b8e:	8a 2b       	or	r24, r26
     b90:	8b 2b       	or	r24, r27
     b92:	21 f4       	brne	.+8      	; 0xb9c <xQueueGenericSend+0x86>
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	40 c0       	rjmp	.+128    	; 0xc1c <xQueueGenericSend+0x106>
     b9c:	11 11       	cpse	r17, r1
     b9e:	05 c0       	rjmp	.+10     	; 0xbaa <xQueueGenericSend+0x94>
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	0e 94 bb 11 	call	0x2376	; 0x2376 <vTaskInternalSetTimeOutState>
     ba8:	11 e0       	ldi	r17, 0x01	; 1
     baa:	0f 90       	pop	r0
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	c4 d7       	rcall	.+3976   	; 0x1b38 <vTaskSuspendAll>
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	0f 92       	push	r0
     bb6:	f7 01       	movw	r30, r14
     bb8:	81 a1       	ldd	r24, Z+33	; 0x21
     bba:	8f 3f       	cpi	r24, 0xFF	; 255
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <xQueueGenericSend+0xaa>
     bbe:	11 a2       	std	Z+33, r1	; 0x21
     bc0:	f7 01       	movw	r30, r14
     bc2:	82 a1       	ldd	r24, Z+34	; 0x22
     bc4:	8f 3f       	cpi	r24, 0xFF	; 255
     bc6:	09 f4       	brne	.+2      	; 0xbca <xQueueGenericSend+0xb4>
     bc8:	12 a2       	std	Z+34, r1	; 0x22
     bca:	0f 90       	pop	r0
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	be 01       	movw	r22, r28
     bd0:	6a 5f       	subi	r22, 0xFA	; 250
     bd2:	7f 4f       	sbci	r23, 0xFF	; 255
     bd4:	ce 01       	movw	r24, r28
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	0e 94 cc 11 	call	0x2398	; 0x2398 <xTaskCheckForTimeOut>
     bdc:	81 11       	cpse	r24, r1
     bde:	19 c0       	rjmp	.+50     	; 0xc12 <xQueueGenericSend+0xfc>
     be0:	c7 01       	movw	r24, r14
     be2:	66 de       	rcall	.-820    	; 0x8b0 <prvIsQueueFull>
     be4:	88 23       	and	r24, r24
     be6:	81 f0       	breq	.+32     	; 0xc08 <xQueueGenericSend+0xf2>
     be8:	4e 81       	ldd	r20, Y+6	; 0x06
     bea:	5f 81       	ldd	r21, Y+7	; 0x07
     bec:	68 85       	ldd	r22, Y+8	; 0x08
     bee:	79 85       	ldd	r23, Y+9	; 0x09
     bf0:	c7 01       	movw	r24, r14
     bf2:	08 96       	adiw	r24, 0x08	; 8
     bf4:	0e 94 9d 10 	call	0x213a	; 0x213a <vTaskPlaceOnEventList>
     bf8:	c7 01       	movw	r24, r14
     bfa:	e1 de       	rcall	.-574    	; 0x9be <prvUnlockQueue>
     bfc:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <xTaskResumeAll>
     c00:	81 11       	cpse	r24, r1
     c02:	a0 cf       	rjmp	.-192    	; 0xb44 <xQueueGenericSend+0x2e>
     c04:	70 dd       	rcall	.-1312   	; 0x6e6 <vPortYield>
     c06:	9e cf       	rjmp	.-196    	; 0xb44 <xQueueGenericSend+0x2e>
     c08:	c7 01       	movw	r24, r14
     c0a:	d9 de       	rcall	.-590    	; 0x9be <prvUnlockQueue>
     c0c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <xTaskResumeAll>
     c10:	99 cf       	rjmp	.-206    	; 0xb44 <xQueueGenericSend+0x2e>
     c12:	c7 01       	movw	r24, r14
     c14:	d4 de       	rcall	.-600    	; 0x9be <prvUnlockQueue>
     c16:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <xTaskResumeAll>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	29 96       	adiw	r28, 0x09	; 9
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	de bf       	out	0x3e, r29	; 62
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	cd bf       	out	0x3d, r28	; 61
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	df 90       	pop	r13
     c36:	cf 90       	pop	r12
     c38:	08 95       	ret

00000c3a <prvInitialiseMutex>:
     c3a:	0f 93       	push	r16
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	69 f0       	breq	.+26     	; 0xc5a <prvInitialiseMutex+0x20>
     c40:	fc 01       	movw	r30, r24
     c42:	15 82       	std	Z+5, r1	; 0x05
     c44:	14 82       	std	Z+4, r1	; 0x04
     c46:	11 82       	std	Z+1, r1	; 0x01
     c48:	10 82       	st	Z, r1
     c4a:	16 82       	std	Z+6, r1	; 0x06
     c4c:	00 e0       	ldi	r16, 0x00	; 0
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	a9 01       	movw	r20, r18
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	5e df       	rcall	.-324    	; 0xb16 <xQueueGenericSend>
     c5a:	0f 91       	pop	r16
     c5c:	08 95       	ret

00000c5e <xQueueCreateMutex>:
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	48 2f       	mov	r20, r24
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	33 df       	rcall	.-410    	; 0xad0 <xQueueGenericCreate>
     c6a:	ec 01       	movw	r28, r24
     c6c:	e6 df       	rcall	.-52     	; 0xc3a <prvInitialiseMutex>
     c6e:	ce 01       	movw	r24, r28
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret

00000c76 <xQueueGenericSendFromISR>:
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	8a 01       	movw	r16, r20
     c84:	fc 01       	movw	r30, r24
     c86:	56 8d       	ldd	r21, Z+30	; 0x1e
     c88:	37 8d       	ldd	r19, Z+31	; 0x1f
     c8a:	53 17       	cp	r21, r19
     c8c:	10 f0       	brcs	.+4      	; 0xc92 <xQueueGenericSendFromISR+0x1c>
     c8e:	22 30       	cpi	r18, 0x02	; 2
     c90:	f9 f4       	brne	.+62     	; 0xcd0 <xQueueGenericSendFromISR+0x5a>
     c92:	42 2f       	mov	r20, r18
     c94:	78 01       	movw	r14, r16
     c96:	ec 01       	movw	r28, r24
     c98:	1a a1       	ldd	r17, Y+34	; 0x22
     c9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c9c:	ce 01       	movw	r24, r28
     c9e:	16 de       	rcall	.-980    	; 0x8cc <prvCopyDataToQueue>
     ca0:	1f 3f       	cpi	r17, 0xFF	; 255
     ca2:	81 f4       	brne	.+32     	; 0xcc4 <xQueueGenericSendFromISR+0x4e>
     ca4:	8b 89       	ldd	r24, Y+19	; 0x13
     ca6:	88 23       	and	r24, r24
     ca8:	a9 f0       	breq	.+42     	; 0xcd4 <xQueueGenericSendFromISR+0x5e>
     caa:	ce 01       	movw	r24, r28
     cac:	43 96       	adiw	r24, 0x13	; 19
     cae:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskRemoveFromEventList>
     cb2:	88 23       	and	r24, r24
     cb4:	89 f0       	breq	.+34     	; 0xcd8 <xQueueGenericSendFromISR+0x62>
     cb6:	e1 14       	cp	r14, r1
     cb8:	f1 04       	cpc	r15, r1
     cba:	81 f0       	breq	.+32     	; 0xcdc <xQueueGenericSendFromISR+0x66>
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	f7 01       	movw	r30, r14
     cc0:	80 83       	st	Z, r24
     cc2:	0d c0       	rjmp	.+26     	; 0xcde <xQueueGenericSendFromISR+0x68>
     cc4:	ff 24       	eor	r15, r15
     cc6:	f3 94       	inc	r15
     cc8:	f1 0e       	add	r15, r17
     cca:	fa a2       	std	Y+34, r15	; 0x22
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	07 c0       	rjmp	.+14     	; 0xcde <xQueueGenericSendFromISR+0x68>
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	05 c0       	rjmp	.+10     	; 0xcde <xQueueGenericSendFromISR+0x68>
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	03 c0       	rjmp	.+6      	; 0xcde <xQueueGenericSendFromISR+0x68>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	01 c0       	rjmp	.+2      	; 0xcde <xQueueGenericSendFromISR+0x68>
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	08 95       	ret

00000cec <xQueueReceive>:
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	29 97       	sbiw	r28, 0x09	; 9
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	8c 01       	movw	r16, r24
     d0e:	6b 01       	movw	r12, r22
     d10:	2e 83       	std	Y+6, r18	; 0x06
     d12:	3f 83       	std	Y+7, r19	; 0x07
     d14:	48 87       	std	Y+8, r20	; 0x08
     d16:	59 87       	std	Y+9, r21	; 0x09
     d18:	e1 2c       	mov	r14, r1
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	0f 92       	push	r0
     d20:	f8 01       	movw	r30, r16
     d22:	f6 8c       	ldd	r15, Z+30	; 0x1e
     d24:	ff 20       	and	r15, r15
     d26:	99 f0       	breq	.+38     	; 0xd4e <xQueueReceive+0x62>
     d28:	b6 01       	movw	r22, r12
     d2a:	c8 01       	movw	r24, r16
     d2c:	2e de       	rcall	.-932    	; 0x98a <prvCopyDataFromQueue>
     d2e:	fa 94       	dec	r15
     d30:	f8 01       	movw	r30, r16
     d32:	f6 8e       	std	Z+30, r15	; 0x1e
     d34:	80 85       	ldd	r24, Z+8	; 0x08
     d36:	88 23       	and	r24, r24
     d38:	31 f0       	breq	.+12     	; 0xd46 <xQueueReceive+0x5a>
     d3a:	c8 01       	movw	r24, r16
     d3c:	08 96       	adiw	r24, 0x08	; 8
     d3e:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskRemoveFromEventList>
     d42:	81 11       	cpse	r24, r1
     d44:	d0 dc       	rcall	.-1632   	; 0x6e6 <vPortYield>
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	4f c0       	rjmp	.+158    	; 0xdec <xQueueReceive+0x100>
     d4e:	8e 81       	ldd	r24, Y+6	; 0x06
     d50:	9f 81       	ldd	r25, Y+7	; 0x07
     d52:	a8 85       	ldd	r26, Y+8	; 0x08
     d54:	b9 85       	ldd	r27, Y+9	; 0x09
     d56:	89 2b       	or	r24, r25
     d58:	8a 2b       	or	r24, r26
     d5a:	8b 2b       	or	r24, r27
     d5c:	21 f4       	brne	.+8      	; 0xd66 <xQueueReceive+0x7a>
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	43 c0       	rjmp	.+134    	; 0xdec <xQueueReceive+0x100>
     d66:	e1 10       	cpse	r14, r1
     d68:	06 c0       	rjmp	.+12     	; 0xd76 <xQueueReceive+0x8a>
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	0e 94 bb 11 	call	0x2376	; 0x2376 <vTaskInternalSetTimeOutState>
     d72:	ee 24       	eor	r14, r14
     d74:	e3 94       	inc	r14
     d76:	0f 90       	pop	r0
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	de d6       	rcall	.+3516   	; 0x1b38 <vTaskSuspendAll>
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	0f 92       	push	r0
     d82:	f8 01       	movw	r30, r16
     d84:	81 a1       	ldd	r24, Z+33	; 0x21
     d86:	8f 3f       	cpi	r24, 0xFF	; 255
     d88:	09 f4       	brne	.+2      	; 0xd8c <xQueueReceive+0xa0>
     d8a:	11 a2       	std	Z+33, r1	; 0x21
     d8c:	f8 01       	movw	r30, r16
     d8e:	82 a1       	ldd	r24, Z+34	; 0x22
     d90:	8f 3f       	cpi	r24, 0xFF	; 255
     d92:	09 f4       	brne	.+2      	; 0xd96 <xQueueReceive+0xaa>
     d94:	12 a2       	std	Z+34, r1	; 0x22
     d96:	0f 90       	pop	r0
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	be 01       	movw	r22, r28
     d9c:	6a 5f       	subi	r22, 0xFA	; 250
     d9e:	7f 4f       	sbci	r23, 0xFF	; 255
     da0:	ce 01       	movw	r24, r28
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	0e 94 cc 11 	call	0x2398	; 0x2398 <xTaskCheckForTimeOut>
     da8:	81 11       	cpse	r24, r1
     daa:	17 c0       	rjmp	.+46     	; 0xdda <xQueueReceive+0xee>
     dac:	c8 01       	movw	r24, r16
     dae:	73 dd       	rcall	.-1306   	; 0x896 <prvIsQueueEmpty>
     db0:	88 23       	and	r24, r24
     db2:	79 f0       	breq	.+30     	; 0xdd2 <xQueueReceive+0xe6>
     db4:	4e 81       	ldd	r20, Y+6	; 0x06
     db6:	5f 81       	ldd	r21, Y+7	; 0x07
     db8:	68 85       	ldd	r22, Y+8	; 0x08
     dba:	79 85       	ldd	r23, Y+9	; 0x09
     dbc:	c8 01       	movw	r24, r16
     dbe:	43 96       	adiw	r24, 0x13	; 19
     dc0:	0e 94 9d 10 	call	0x213a	; 0x213a <vTaskPlaceOnEventList>
     dc4:	c8 01       	movw	r24, r16
     dc6:	fb dd       	rcall	.-1034   	; 0x9be <prvUnlockQueue>
     dc8:	f7 d7       	rcall	.+4078   	; 0x1db8 <xTaskResumeAll>
     dca:	81 11       	cpse	r24, r1
     dcc:	a6 cf       	rjmp	.-180    	; 0xd1a <xQueueReceive+0x2e>
     dce:	8b dc       	rcall	.-1770   	; 0x6e6 <vPortYield>
     dd0:	a4 cf       	rjmp	.-184    	; 0xd1a <xQueueReceive+0x2e>
     dd2:	c8 01       	movw	r24, r16
     dd4:	f4 dd       	rcall	.-1048   	; 0x9be <prvUnlockQueue>
     dd6:	f0 d7       	rcall	.+4064   	; 0x1db8 <xTaskResumeAll>
     dd8:	a0 cf       	rjmp	.-192    	; 0xd1a <xQueueReceive+0x2e>
     dda:	c8 01       	movw	r24, r16
     ddc:	f0 dd       	rcall	.-1056   	; 0x9be <prvUnlockQueue>
     dde:	ec d7       	rcall	.+4056   	; 0x1db8 <xTaskResumeAll>
     de0:	c8 01       	movw	r24, r16
     de2:	59 dd       	rcall	.-1358   	; 0x896 <prvIsQueueEmpty>
     de4:	88 23       	and	r24, r24
     de6:	09 f4       	brne	.+2      	; 0xdea <xQueueReceive+0xfe>
     de8:	98 cf       	rjmp	.-208    	; 0xd1a <xQueueReceive+0x2e>
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	29 96       	adiw	r28, 0x09	; 9
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	cf 90       	pop	r12
     e08:	08 95       	ret

00000e0a <xQueueSemaphoreTake>:
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	29 97       	sbiw	r28, 0x09	; 9
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	8c 01       	movw	r16, r24
     e28:	4e 83       	std	Y+6, r20	; 0x06
     e2a:	5f 83       	std	Y+7, r21	; 0x07
     e2c:	68 87       	std	Y+8, r22	; 0x08
     e2e:	79 87       	std	Y+9, r23	; 0x09
     e30:	e1 2c       	mov	r14, r1
     e32:	f1 2c       	mov	r15, r1
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	0f 92       	push	r0
     e3a:	f8 01       	movw	r30, r16
     e3c:	86 8d       	ldd	r24, Z+30	; 0x1e
     e3e:	88 23       	and	r24, r24
     e40:	c9 f0       	breq	.+50     	; 0xe74 <xQueueSemaphoreTake+0x6a>
     e42:	81 50       	subi	r24, 0x01	; 1
     e44:	86 8f       	std	Z+30, r24	; 0x1e
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	89 2b       	or	r24, r25
     e4c:	29 f4       	brne	.+10     	; 0xe58 <xQueueSemaphoreTake+0x4e>
     e4e:	0e 94 92 13 	call	0x2724	; 0x2724 <pvTaskIncrementMutexHeldCount>
     e52:	f8 01       	movw	r30, r16
     e54:	95 83       	std	Z+5, r25	; 0x05
     e56:	84 83       	std	Z+4, r24	; 0x04
     e58:	f8 01       	movw	r30, r16
     e5a:	80 85       	ldd	r24, Z+8	; 0x08
     e5c:	88 23       	and	r24, r24
     e5e:	31 f0       	breq	.+12     	; 0xe6c <xQueueSemaphoreTake+0x62>
     e60:	c8 01       	movw	r24, r16
     e62:	08 96       	adiw	r24, 0x08	; 8
     e64:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskRemoveFromEventList>
     e68:	81 11       	cpse	r24, r1
     e6a:	3d dc       	rcall	.-1926   	; 0x6e6 <vPortYield>
     e6c:	0f 90       	pop	r0
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	6f c0       	rjmp	.+222    	; 0xf52 <xQueueSemaphoreTake+0x148>
     e74:	8e 81       	ldd	r24, Y+6	; 0x06
     e76:	9f 81       	ldd	r25, Y+7	; 0x07
     e78:	a8 85       	ldd	r26, Y+8	; 0x08
     e7a:	b9 85       	ldd	r27, Y+9	; 0x09
     e7c:	89 2b       	or	r24, r25
     e7e:	8a 2b       	or	r24, r26
     e80:	8b 2b       	or	r24, r27
     e82:	21 f4       	brne	.+8      	; 0xe8c <xQueueSemaphoreTake+0x82>
     e84:	0f 90       	pop	r0
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	63 c0       	rjmp	.+198    	; 0xf52 <xQueueSemaphoreTake+0x148>
     e8c:	f1 10       	cpse	r15, r1
     e8e:	06 c0       	rjmp	.+12     	; 0xe9c <xQueueSemaphoreTake+0x92>
     e90:	ce 01       	movw	r24, r28
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	0e 94 bb 11 	call	0x2376	; 0x2376 <vTaskInternalSetTimeOutState>
     e98:	ff 24       	eor	r15, r15
     e9a:	f3 94       	inc	r15
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	4b d6       	rcall	.+3222   	; 0x1b38 <vTaskSuspendAll>
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	0f 92       	push	r0
     ea8:	f8 01       	movw	r30, r16
     eaa:	81 a1       	ldd	r24, Z+33	; 0x21
     eac:	8f 3f       	cpi	r24, 0xFF	; 255
     eae:	09 f4       	brne	.+2      	; 0xeb2 <xQueueSemaphoreTake+0xa8>
     eb0:	11 a2       	std	Z+33, r1	; 0x21
     eb2:	f8 01       	movw	r30, r16
     eb4:	82 a1       	ldd	r24, Z+34	; 0x22
     eb6:	8f 3f       	cpi	r24, 0xFF	; 255
     eb8:	09 f4       	brne	.+2      	; 0xebc <xQueueSemaphoreTake+0xb2>
     eba:	12 a2       	std	Z+34, r1	; 0x22
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	be 01       	movw	r22, r28
     ec2:	6a 5f       	subi	r22, 0xFA	; 250
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	ce 01       	movw	r24, r28
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	0e 94 cc 11 	call	0x2398	; 0x2398 <xTaskCheckForTimeOut>
     ece:	81 11       	cpse	r24, r1
     ed0:	26 c0       	rjmp	.+76     	; 0xf1e <xQueueSemaphoreTake+0x114>
     ed2:	c8 01       	movw	r24, r16
     ed4:	e0 dc       	rcall	.-1600   	; 0x896 <prvIsQueueEmpty>
     ed6:	88 23       	and	r24, r24
     ed8:	f1 f0       	breq	.+60     	; 0xf16 <xQueueSemaphoreTake+0x10c>
     eda:	f8 01       	movw	r30, r16
     edc:	80 81       	ld	r24, Z
     ede:	91 81       	ldd	r25, Z+1	; 0x01
     ee0:	89 2b       	or	r24, r25
     ee2:	51 f4       	brne	.+20     	; 0xef8 <xQueueSemaphoreTake+0xee>
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	0f 92       	push	r0
     eea:	84 81       	ldd	r24, Z+4	; 0x04
     eec:	95 81       	ldd	r25, Z+5	; 0x05
     eee:	0e 94 49 12 	call	0x2492	; 0x2492 <xTaskPriorityInherit>
     ef2:	e8 2e       	mov	r14, r24
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	4e 81       	ldd	r20, Y+6	; 0x06
     efa:	5f 81       	ldd	r21, Y+7	; 0x07
     efc:	68 85       	ldd	r22, Y+8	; 0x08
     efe:	79 85       	ldd	r23, Y+9	; 0x09
     f00:	c8 01       	movw	r24, r16
     f02:	43 96       	adiw	r24, 0x13	; 19
     f04:	0e 94 9d 10 	call	0x213a	; 0x213a <vTaskPlaceOnEventList>
     f08:	c8 01       	movw	r24, r16
     f0a:	59 dd       	rcall	.-1358   	; 0x9be <prvUnlockQueue>
     f0c:	55 d7       	rcall	.+3754   	; 0x1db8 <xTaskResumeAll>
     f0e:	81 11       	cpse	r24, r1
     f10:	91 cf       	rjmp	.-222    	; 0xe34 <xQueueSemaphoreTake+0x2a>
     f12:	e9 db       	rcall	.-2094   	; 0x6e6 <vPortYield>
     f14:	8f cf       	rjmp	.-226    	; 0xe34 <xQueueSemaphoreTake+0x2a>
     f16:	c8 01       	movw	r24, r16
     f18:	52 dd       	rcall	.-1372   	; 0x9be <prvUnlockQueue>
     f1a:	4e d7       	rcall	.+3740   	; 0x1db8 <xTaskResumeAll>
     f1c:	8b cf       	rjmp	.-234    	; 0xe34 <xQueueSemaphoreTake+0x2a>
     f1e:	c8 01       	movw	r24, r16
     f20:	4e dd       	rcall	.-1380   	; 0x9be <prvUnlockQueue>
     f22:	4a d7       	rcall	.+3732   	; 0x1db8 <xTaskResumeAll>
     f24:	c8 01       	movw	r24, r16
     f26:	b7 dc       	rcall	.-1682   	; 0x896 <prvIsQueueEmpty>
     f28:	88 23       	and	r24, r24
     f2a:	09 f4       	brne	.+2      	; 0xf2e <xQueueSemaphoreTake+0x124>
     f2c:	83 cf       	rjmp	.-250    	; 0xe34 <xQueueSemaphoreTake+0x2a>
     f2e:	ee 20       	and	r14, r14
     f30:	79 f0       	breq	.+30     	; 0xf50 <xQueueSemaphoreTake+0x146>
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	0f 92       	push	r0
     f38:	c8 01       	movw	r24, r16
     f3a:	9d dc       	rcall	.-1734   	; 0x876 <prvGetDisinheritPriorityAfterTimeout>
     f3c:	68 2f       	mov	r22, r24
     f3e:	f8 01       	movw	r30, r16
     f40:	84 81       	ldd	r24, Z+4	; 0x04
     f42:	95 81       	ldd	r25, Z+5	; 0x05
     f44:	0e 94 2b 13 	call	0x2656	; 0x2656 <vTaskPriorityDisinheritAfterTimeout>
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <xQueueSemaphoreTake+0x148>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	29 96       	adiw	r28, 0x09	; 9
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	08 95       	ret

00000f6c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	0f 92       	push	r0
     f78:	89 a1       	ldd	r24, Y+33	; 0x21
     f7a:	8f 3f       	cpi	r24, 0xFF	; 255
     f7c:	09 f4       	brne	.+2      	; 0xf80 <vQueueWaitForMessageRestricted+0x14>
     f7e:	19 a2       	std	Y+33, r1	; 0x21
     f80:	8a a1       	ldd	r24, Y+34	; 0x22
     f82:	8f 3f       	cpi	r24, 0xFF	; 255
     f84:	09 f4       	brne	.+2      	; 0xf88 <vQueueWaitForMessageRestricted+0x1c>
     f86:	1a a2       	std	Y+34, r1	; 0x22
     f88:	0f 90       	pop	r0
     f8a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     f8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f8e:	81 11       	cpse	r24, r1
     f90:	04 c0       	rjmp	.+8      	; 0xf9a <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     f92:	ce 01       	movw	r24, r28
     f94:	43 96       	adiw	r24, 0x13	; 19
     f96:	0e 94 b4 10 	call	0x2168	; 0x2168 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     f9a:	ce 01       	movw	r24, r28
     f9c:	10 dd       	rcall	.-1504   	; 0x9be <prvUnlockQueue>
    }
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	08 95       	ret

00000fa4 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     fa4:	fc 01       	movw	r30, r24
     fa6:	44 81       	ldd	r20, Z+4	; 0x04
     fa8:	55 81       	ldd	r21, Z+5	; 0x05
     faa:	22 81       	ldd	r18, Z+2	; 0x02
     fac:	33 81       	ldd	r19, Z+3	; 0x03
     fae:	24 0f       	add	r18, r20
     fb0:	35 1f       	adc	r19, r21
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	b9 01       	movw	r22, r18
     fb8:	68 1b       	sub	r22, r24
     fba:	79 0b       	sbc	r23, r25
     fbc:	cb 01       	movw	r24, r22
     fbe:	64 17       	cp	r22, r20
     fc0:	75 07       	cpc	r23, r21
     fc2:	10 f0       	brcs	.+4      	; 0xfc8 <prvBytesInBuffer+0x24>
     fc4:	84 1b       	sub	r24, r20
     fc6:	95 0b       	sbc	r25, r21
     fc8:	08 95       	ret

00000fca <prvInitialiseNewStreamBuffer>:
     fca:	0f 93       	push	r16
     fcc:	fc 01       	movw	r30, r24
     fce:	8f e0       	ldi	r24, 0x0F	; 15
     fd0:	df 01       	movw	r26, r30
     fd2:	1d 92       	st	X+, r1
     fd4:	8a 95       	dec	r24
     fd6:	e9 f7       	brne	.-6      	; 0xfd2 <prvInitialiseNewStreamBuffer+0x8>
     fd8:	75 87       	std	Z+13, r23	; 0x0d
     fda:	64 87       	std	Z+12, r22	; 0x0c
     fdc:	55 83       	std	Z+5, r21	; 0x05
     fde:	44 83       	std	Z+4, r20	; 0x04
     fe0:	37 83       	std	Z+7, r19	; 0x07
     fe2:	26 83       	std	Z+6, r18	; 0x06
     fe4:	06 87       	std	Z+14, r16	; 0x0e
     fe6:	0f 91       	pop	r16
     fe8:	08 95       	ret

00000fea <prvWriteBytesToBuffer>:
     fea:	af 92       	push	r10
     fec:	bf 92       	push	r11
     fee:	cf 92       	push	r12
     ff0:	df 92       	push	r13
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	6c 01       	movw	r12, r24
    1000:	5b 01       	movw	r10, r22
    1002:	7a 01       	movw	r14, r20
    1004:	fc 01       	movw	r30, r24
    1006:	c2 81       	ldd	r28, Z+2	; 0x02
    1008:	d3 81       	ldd	r29, Z+3	; 0x03
    100a:	04 81       	ldd	r16, Z+4	; 0x04
    100c:	15 81       	ldd	r17, Z+5	; 0x05
    100e:	0c 1b       	sub	r16, r28
    1010:	1d 0b       	sbc	r17, r29
    1012:	40 17       	cp	r20, r16
    1014:	51 07       	cpc	r21, r17
    1016:	08 f4       	brcc	.+2      	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    1018:	8a 01       	movw	r16, r20
    101a:	f6 01       	movw	r30, r12
    101c:	84 85       	ldd	r24, Z+12	; 0x0c
    101e:	95 85       	ldd	r25, Z+13	; 0x0d
    1020:	a8 01       	movw	r20, r16
    1022:	b5 01       	movw	r22, r10
    1024:	8c 0f       	add	r24, r28
    1026:	9d 1f       	adc	r25, r29
    1028:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <memcpy>
    102c:	0e 15       	cp	r16, r14
    102e:	1f 05       	cpc	r17, r15
    1030:	58 f4       	brcc	.+22     	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    1032:	a7 01       	movw	r20, r14
    1034:	40 1b       	sub	r20, r16
    1036:	51 0b       	sbc	r21, r17
    1038:	b5 01       	movw	r22, r10
    103a:	60 0f       	add	r22, r16
    103c:	71 1f       	adc	r23, r17
    103e:	f6 01       	movw	r30, r12
    1040:	84 85       	ldd	r24, Z+12	; 0x0c
    1042:	95 85       	ldd	r25, Z+13	; 0x0d
    1044:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <memcpy>
    1048:	ce 01       	movw	r24, r28
    104a:	8e 0d       	add	r24, r14
    104c:	9f 1d       	adc	r25, r15
    104e:	f6 01       	movw	r30, r12
    1050:	24 81       	ldd	r18, Z+4	; 0x04
    1052:	35 81       	ldd	r19, Z+5	; 0x05
    1054:	82 17       	cp	r24, r18
    1056:	93 07       	cpc	r25, r19
    1058:	10 f0       	brcs	.+4      	; 0x105e <__EEPROM_REGION_LENGTH__+0x5e>
    105a:	82 1b       	sub	r24, r18
    105c:	93 0b       	sbc	r25, r19
    105e:	f6 01       	movw	r30, r12
    1060:	93 83       	std	Z+3, r25	; 0x03
    1062:	82 83       	std	Z+2, r24	; 0x02
    1064:	c7 01       	movw	r24, r14
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	bf 90       	pop	r11
    1078:	af 90       	pop	r10
    107a:	08 95       	ret

0000107c <prvWriteMessageToBuffer>:
    107c:	cf 92       	push	r12
    107e:	df 92       	push	r13
    1080:	ef 92       	push	r14
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	1f 92       	push	r1
    108e:	1f 92       	push	r1
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	7c 01       	movw	r14, r24
    1096:	6b 01       	movw	r12, r22
    1098:	5a 83       	std	Y+2, r21	; 0x02
    109a:	49 83       	std	Y+1, r20	; 0x01
    109c:	21 15       	cp	r18, r1
    109e:	31 05       	cpc	r19, r1
    10a0:	c1 f0       	breq	.+48     	; 0x10d2 <prvWriteMessageToBuffer+0x56>
    10a2:	fc 01       	movw	r30, r24
    10a4:	86 85       	ldd	r24, Z+14	; 0x0e
    10a6:	80 fd       	sbrc	r24, 0
    10a8:	08 c0       	rjmp	.+16     	; 0x10ba <prvWriteMessageToBuffer+0x3e>
    10aa:	42 17       	cp	r20, r18
    10ac:	53 07       	cpc	r21, r19
    10ae:	08 f4       	brcc	.+2      	; 0x10b2 <prvWriteMessageToBuffer+0x36>
    10b0:	9a 01       	movw	r18, r20
    10b2:	3a 83       	std	Y+2, r19	; 0x02
    10b4:	29 83       	std	Y+1, r18	; 0x01
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	0f c0       	rjmp	.+30     	; 0x10d8 <prvWriteMessageToBuffer+0x5c>
    10ba:	20 17       	cp	r18, r16
    10bc:	31 07       	cpc	r19, r17
    10be:	58 f0       	brcs	.+22     	; 0x10d6 <prvWriteMessageToBuffer+0x5a>
    10c0:	42 e0       	ldi	r20, 0x02	; 2
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	be 01       	movw	r22, r28
    10c6:	6f 5f       	subi	r22, 0xFF	; 255
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	c7 01       	movw	r24, r14
    10cc:	8e df       	rcall	.-228    	; 0xfea <prvWriteBytesToBuffer>
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	03 c0       	rjmp	.+6      	; 0x10d8 <prvWriteMessageToBuffer+0x5c>
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <prvWriteMessageToBuffer+0x5c>
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	88 23       	and	r24, r24
    10da:	31 f0       	breq	.+12     	; 0x10e8 <prvWriteMessageToBuffer+0x6c>
    10dc:	49 81       	ldd	r20, Y+1	; 0x01
    10de:	5a 81       	ldd	r21, Y+2	; 0x02
    10e0:	b6 01       	movw	r22, r12
    10e2:	c7 01       	movw	r24, r14
    10e4:	82 df       	rcall	.-252    	; 0xfea <prvWriteBytesToBuffer>
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <prvWriteMessageToBuffer+0x70>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	ff 90       	pop	r15
    10fa:	ef 90       	pop	r14
    10fc:	df 90       	pop	r13
    10fe:	cf 90       	pop	r12
    1100:	08 95       	ret

00001102 <prvReadBytesFromBuffer>:
    1102:	af 92       	push	r10
    1104:	bf 92       	push	r11
    1106:	cf 92       	push	r12
    1108:	df 92       	push	r13
    110a:	ef 92       	push	r14
    110c:	ff 92       	push	r15
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	7c 01       	movw	r14, r24
    1118:	5b 01       	movw	r10, r22
    111a:	e9 01       	movw	r28, r18
    111c:	42 17       	cp	r20, r18
    111e:	53 07       	cpc	r21, r19
    1120:	08 f4       	brcc	.+2      	; 0x1124 <prvReadBytesFromBuffer+0x22>
    1122:	ea 01       	movw	r28, r20
    1124:	20 97       	sbiw	r28, 0x00	; 0
    1126:	81 f1       	breq	.+96     	; 0x1188 <prvReadBytesFromBuffer+0x86>
    1128:	f7 01       	movw	r30, r14
    112a:	00 81       	ld	r16, Z
    112c:	11 81       	ldd	r17, Z+1	; 0x01
    112e:	84 81       	ldd	r24, Z+4	; 0x04
    1130:	95 81       	ldd	r25, Z+5	; 0x05
    1132:	80 1b       	sub	r24, r16
    1134:	91 0b       	sbc	r25, r17
    1136:	6e 01       	movw	r12, r28
    1138:	8c 17       	cp	r24, r28
    113a:	9d 07       	cpc	r25, r29
    113c:	08 f4       	brcc	.+2      	; 0x1140 <prvReadBytesFromBuffer+0x3e>
    113e:	6c 01       	movw	r12, r24
    1140:	f7 01       	movw	r30, r14
    1142:	64 85       	ldd	r22, Z+12	; 0x0c
    1144:	75 85       	ldd	r23, Z+13	; 0x0d
    1146:	60 0f       	add	r22, r16
    1148:	71 1f       	adc	r23, r17
    114a:	a6 01       	movw	r20, r12
    114c:	c5 01       	movw	r24, r10
    114e:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <memcpy>
    1152:	cc 16       	cp	r12, r28
    1154:	dd 06       	cpc	r13, r29
    1156:	58 f4       	brcc	.+22     	; 0x116e <prvReadBytesFromBuffer+0x6c>
    1158:	ae 01       	movw	r20, r28
    115a:	4c 19       	sub	r20, r12
    115c:	5d 09       	sbc	r21, r13
    115e:	f7 01       	movw	r30, r14
    1160:	64 85       	ldd	r22, Z+12	; 0x0c
    1162:	75 85       	ldd	r23, Z+13	; 0x0d
    1164:	c5 01       	movw	r24, r10
    1166:	8c 0d       	add	r24, r12
    1168:	9d 1d       	adc	r25, r13
    116a:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <memcpy>
    116e:	0c 0f       	add	r16, r28
    1170:	1d 1f       	adc	r17, r29
    1172:	f7 01       	movw	r30, r14
    1174:	84 81       	ldd	r24, Z+4	; 0x04
    1176:	95 81       	ldd	r25, Z+5	; 0x05
    1178:	08 17       	cp	r16, r24
    117a:	19 07       	cpc	r17, r25
    117c:	10 f0       	brcs	.+4      	; 0x1182 <prvReadBytesFromBuffer+0x80>
    117e:	08 1b       	sub	r16, r24
    1180:	19 0b       	sbc	r17, r25
    1182:	f7 01       	movw	r30, r14
    1184:	11 83       	std	Z+1, r17	; 0x01
    1186:	00 83       	st	Z, r16
    1188:	ce 01       	movw	r24, r28
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	ff 90       	pop	r15
    1194:	ef 90       	pop	r14
    1196:	df 90       	pop	r13
    1198:	cf 90       	pop	r12
    119a:	bf 90       	pop	r11
    119c:	af 90       	pop	r10
    119e:	08 95       	ret

000011a0 <prvReadMessageFromBuffer>:
    11a0:	6f 92       	push	r6
    11a2:	7f 92       	push	r7
    11a4:	8f 92       	push	r8
    11a6:	9f 92       	push	r9
    11a8:	af 92       	push	r10
    11aa:	bf 92       	push	r11
    11ac:	cf 92       	push	r12
    11ae:	df 92       	push	r13
    11b0:	ef 92       	push	r14
    11b2:	ff 92       	push	r15
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	1f 92       	push	r1
    11be:	1f 92       	push	r1
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	6c 01       	movw	r12, r24
    11c6:	4b 01       	movw	r8, r22
    11c8:	5a 01       	movw	r10, r20
    11ca:	79 01       	movw	r14, r18
    11cc:	01 15       	cp	r16, r1
    11ce:	11 05       	cpc	r17, r1
    11d0:	b1 f0       	breq	.+44     	; 0x11fe <prvReadMessageFromBuffer+0x5e>
    11d2:	fc 01       	movw	r30, r24
    11d4:	60 80       	ld	r6, Z
    11d6:	71 80       	ldd	r7, Z+1	; 0x01
    11d8:	a8 01       	movw	r20, r16
    11da:	be 01       	movw	r22, r28
    11dc:	6f 5f       	subi	r22, 0xFF	; 255
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	90 df       	rcall	.-224    	; 0x1102 <prvReadBytesFromBuffer>
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	e0 1a       	sub	r14, r16
    11e8:	f1 0a       	sbc	r15, r17
    11ea:	a8 16       	cp	r10, r24
    11ec:	b9 06       	cpc	r11, r25
    11ee:	30 f4       	brcc	.+12     	; 0x11fc <prvReadMessageFromBuffer+0x5c>
    11f0:	f6 01       	movw	r30, r12
    11f2:	71 82       	std	Z+1, r7	; 0x01
    11f4:	60 82       	st	Z, r6
    11f6:	a1 2c       	mov	r10, r1
    11f8:	b1 2c       	mov	r11, r1
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <prvReadMessageFromBuffer+0x5e>
    11fc:	5c 01       	movw	r10, r24
    11fe:	97 01       	movw	r18, r14
    1200:	a5 01       	movw	r20, r10
    1202:	b4 01       	movw	r22, r8
    1204:	c6 01       	movw	r24, r12
    1206:	7d df       	rcall	.-262    	; 0x1102 <prvReadBytesFromBuffer>
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	df 90       	pop	r13
    121a:	cf 90       	pop	r12
    121c:	bf 90       	pop	r11
    121e:	af 90       	pop	r10
    1220:	9f 90       	pop	r9
    1222:	8f 90       	pop	r8
    1224:	7f 90       	pop	r7
    1226:	6f 90       	pop	r6
    1228:	08 95       	ret

0000122a <xStreamBufferGenericCreate>:
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	ec 01       	movw	r28, r24
    123a:	6b 01       	movw	r12, r22
    123c:	41 30       	cpi	r20, 0x01	; 1
    123e:	11 f4       	brne	.+4      	; 0x1244 <xStreamBufferGenericCreate+0x1a>
    1240:	01 e0       	ldi	r16, 0x01	; 1
    1242:	01 c0       	rjmp	.+2      	; 0x1246 <xStreamBufferGenericCreate+0x1c>
    1244:	00 e0       	ldi	r16, 0x00	; 0
    1246:	c1 14       	cp	r12, r1
    1248:	d1 04       	cpc	r13, r1
    124a:	19 f4       	brne	.+6      	; 0x1252 <xStreamBufferGenericCreate+0x28>
    124c:	cc 24       	eor	r12, r12
    124e:	c3 94       	inc	r12
    1250:	d1 2c       	mov	r13, r1
    1252:	ce 01       	movw	r24, r28
    1254:	40 96       	adiw	r24, 0x10	; 16
    1256:	c8 17       	cp	r28, r24
    1258:	d9 07       	cpc	r29, r25
    125a:	20 f4       	brcc	.+8      	; 0x1264 <xStreamBufferGenericCreate+0x3a>
    125c:	21 96       	adiw	r28, 0x01	; 1
    125e:	8f d8       	rcall	.-3810   	; 0x37e <pvPortMalloc>
    1260:	7c 01       	movw	r14, r24
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <xStreamBufferGenericCreate+0x3e>
    1264:	e1 2c       	mov	r14, r1
    1266:	f1 2c       	mov	r15, r1
    1268:	e1 14       	cp	r14, r1
    126a:	f1 04       	cpc	r15, r1
    126c:	39 f0       	breq	.+14     	; 0x127c <xStreamBufferGenericCreate+0x52>
    126e:	96 01       	movw	r18, r12
    1270:	ae 01       	movw	r20, r28
    1272:	b7 01       	movw	r22, r14
    1274:	61 5f       	subi	r22, 0xF1	; 241
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	c7 01       	movw	r24, r14
    127a:	a7 de       	rcall	.-690    	; 0xfca <prvInitialiseNewStreamBuffer>
    127c:	c7 01       	movw	r24, r14
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	08 95       	ret

0000128e <xStreamBufferReset>:
    128e:	0f 93       	push	r16
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	0f 92       	push	r0
    1296:	fc 01       	movw	r30, r24
    1298:	20 85       	ldd	r18, Z+8	; 0x08
    129a:	31 85       	ldd	r19, Z+9	; 0x09
    129c:	23 2b       	or	r18, r19
    129e:	71 f4       	brne	.+28     	; 0x12bc <xStreamBufferReset+0x2e>
    12a0:	22 85       	ldd	r18, Z+10	; 0x0a
    12a2:	33 85       	ldd	r19, Z+11	; 0x0b
    12a4:	23 2b       	or	r18, r19
    12a6:	61 f4       	brne	.+24     	; 0x12c0 <xStreamBufferReset+0x32>
    12a8:	26 81       	ldd	r18, Z+6	; 0x06
    12aa:	37 81       	ldd	r19, Z+7	; 0x07
    12ac:	44 81       	ldd	r20, Z+4	; 0x04
    12ae:	55 81       	ldd	r21, Z+5	; 0x05
    12b0:	64 85       	ldd	r22, Z+12	; 0x0c
    12b2:	75 85       	ldd	r23, Z+13	; 0x0d
    12b4:	06 85       	ldd	r16, Z+14	; 0x0e
    12b6:	89 de       	rcall	.-750    	; 0xfca <prvInitialiseNewStreamBuffer>
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	03 c0       	rjmp	.+6      	; 0x12c2 <xStreamBufferReset+0x34>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	01 c0       	rjmp	.+2      	; 0x12c2 <xStreamBufferReset+0x34>
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 91       	pop	r16
    12c8:	08 95       	ret

000012ca <xStreamBufferSpacesAvailable>:
    12ca:	fc 01       	movw	r30, r24
    12cc:	24 81       	ldd	r18, Z+4	; 0x04
    12ce:	35 81       	ldd	r19, Z+5	; 0x05
    12d0:	80 81       	ld	r24, Z
    12d2:	91 81       	ldd	r25, Z+1	; 0x01
    12d4:	82 0f       	add	r24, r18
    12d6:	93 1f       	adc	r25, r19
    12d8:	42 81       	ldd	r20, Z+2	; 0x02
    12da:	53 81       	ldd	r21, Z+3	; 0x03
    12dc:	84 1b       	sub	r24, r20
    12de:	95 0b       	sbc	r25, r21
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	82 17       	cp	r24, r18
    12e4:	93 07       	cpc	r25, r19
    12e6:	10 f0       	brcs	.+4      	; 0x12ec <xStreamBufferSpacesAvailable+0x22>
    12e8:	82 1b       	sub	r24, r18
    12ea:	93 0b       	sbc	r25, r19
    12ec:	08 95       	ret

000012ee <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    12ee:	2f 92       	push	r2
    12f0:	3f 92       	push	r3
    12f2:	4f 92       	push	r4
    12f4:	5f 92       	push	r5
    12f6:	6f 92       	push	r6
    12f8:	7f 92       	push	r7
    12fa:	8f 92       	push	r8
    12fc:	9f 92       	push	r9
    12fe:	af 92       	push	r10
    1300:	bf 92       	push	r11
    1302:	cf 92       	push	r12
    1304:	df 92       	push	r13
    1306:	ef 92       	push	r14
    1308:	ff 92       	push	r15
    130a:	0f 93       	push	r16
    130c:	1f 93       	push	r17
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	2b 97       	sbiw	r28, 0x0b	; 11
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	4c 01       	movw	r8, r24
    1324:	7b 87       	std	Y+11, r23	; 0x0b
    1326:	6a 87       	std	Y+10, r22	; 0x0a
    1328:	1a 01       	movw	r2, r20
    132a:	0e 83       	std	Y+6, r16	; 0x06
    132c:	1f 83       	std	Y+7, r17	; 0x07
    132e:	28 87       	std	Y+8, r18	; 0x08
    1330:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1332:	fc 01       	movw	r30, r24
    1334:	84 81       	ldd	r24, Z+4	; 0x04
    1336:	95 81       	ldd	r25, Z+5	; 0x05
    1338:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    133a:	26 85       	ldd	r18, Z+14	; 0x0e
    133c:	20 ff       	sbrs	r18, 0
    133e:	0c c0       	rjmp	.+24     	; 0x1358 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1340:	2a 01       	movw	r4, r20
    1342:	f2 e0       	ldi	r31, 0x02	; 2
    1344:	4f 0e       	add	r4, r31
    1346:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1348:	84 15       	cp	r24, r4
    134a:	95 05       	cpc	r25, r5
    134c:	58 f4       	brcc	.+22     	; 0x1364 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    134e:	1e 82       	std	Y+6, r1	; 0x06
    1350:	1f 82       	std	Y+7, r1	; 0x07
    1352:	18 86       	std	Y+8, r1	; 0x08
    1354:	19 86       	std	Y+9, r1	; 0x09
    1356:	06 c0       	rjmp	.+12     	; 0x1364 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1358:	84 17       	cp	r24, r20
    135a:	95 07       	cpc	r25, r21
    135c:	10 f0       	brcs	.+4      	; 0x1362 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    135e:	2a 01       	movw	r4, r20
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1362:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1364:	8e 81       	ldd	r24, Y+6	; 0x06
    1366:	9f 81       	ldd	r25, Y+7	; 0x07
    1368:	a8 85       	ldd	r26, Y+8	; 0x08
    136a:	b9 85       	ldd	r27, Y+9	; 0x09
    136c:	89 2b       	or	r24, r25
    136e:	8a 2b       	or	r24, r26
    1370:	8b 2b       	or	r24, r27
    1372:	09 f4       	brne	.+2      	; 0x1376 <xStreamBufferSend+0x88>
    1374:	36 c0       	rjmp	.+108    	; 0x13e2 <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1376:	ce 01       	movw	r24, r28
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	e7 d7       	rcall	.+4046   	; 0x234a <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1382:	c4 01       	movw	r24, r8
    1384:	a2 df       	rcall	.-188    	; 0x12ca <xStreamBufferSpacesAvailable>
    1386:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1388:	84 15       	cp	r24, r4
    138a:	95 05       	cpc	r25, r5
    138c:	38 f5       	brcc	.+78     	; 0x13dc <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1398:	0e 94 36 12 	call	0x246c	; 0x246c <xTaskGetCurrentTaskHandle>
    139c:	f4 01       	movw	r30, r8
    139e:	93 87       	std	Z+11, r25	; 0x0b
    13a0:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    13a2:	0f 90       	pop	r0
    13a4:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    13a6:	ae 80       	ldd	r10, Y+6	; 0x06
    13a8:	bf 80       	ldd	r11, Y+7	; 0x07
    13aa:	c8 84       	ldd	r12, Y+8	; 0x08
    13ac:	d9 84       	ldd	r13, Y+9	; 0x09
    13ae:	e1 2c       	mov	r14, r1
    13b0:	f1 2c       	mov	r15, r1
    13b2:	00 e0       	ldi	r16, 0x00	; 0
    13b4:	10 e0       	ldi	r17, 0x00	; 0
    13b6:	98 01       	movw	r18, r16
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	ba 01       	movw	r22, r20
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	0e 94 a4 13 	call	0x2748	; 0x2748 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    13c4:	f4 01       	movw	r30, r8
    13c6:	13 86       	std	Z+11, r1	; 0x0b
    13c8:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    13ca:	be 01       	movw	r22, r28
    13cc:	6a 5f       	subi	r22, 0xFA	; 250
    13ce:	7f 4f       	sbci	r23, 0xFF	; 255
    13d0:	ce 01       	movw	r24, r28
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	e1 d7       	rcall	.+4034   	; 0x2398 <xTaskCheckForTimeOut>
    13d6:	88 23       	and	r24, r24
    13d8:	89 f2       	breq	.-94     	; 0x137c <xStreamBufferSend+0x8e>
    13da:	05 c0       	rjmp	.+10     	; 0x13e6 <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    13dc:	0f 90       	pop	r0
    13de:	0f be       	out	0x3f, r0	; 63
                    break;
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    13e2:	61 2c       	mov	r6, r1
    13e4:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    13e6:	61 14       	cp	r6, r1
    13e8:	71 04       	cpc	r7, r1
    13ea:	19 f4       	brne	.+6      	; 0x13f2 <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    13ec:	c4 01       	movw	r24, r8
    13ee:	6d df       	rcall	.-294    	; 0x12ca <xStreamBufferSpacesAvailable>
    13f0:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    13f2:	82 01       	movw	r16, r4
    13f4:	93 01       	movw	r18, r6
    13f6:	a1 01       	movw	r20, r2
    13f8:	6a 85       	ldd	r22, Y+10	; 0x0a
    13fa:	7b 85       	ldd	r23, Y+11	; 0x0b
    13fc:	c4 01       	movw	r24, r8
    13fe:	3e de       	rcall	.-900    	; 0x107c <prvWriteMessageToBuffer>
    1400:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1402:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1404:	e9 f0       	breq	.+58     	; 0x1440 <xStreamBufferSend+0x152>
    1406:	c4 01       	movw	r24, r8
    1408:	cd dd       	rcall	.-1126   	; 0xfa4 <prvBytesInBuffer>
    140a:	f4 01       	movw	r30, r8
    140c:	26 81       	ldd	r18, Z+6	; 0x06
    140e:	37 81       	ldd	r19, Z+7	; 0x07
    1410:	82 17       	cp	r24, r18
    1412:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1414:	a8 f0       	brcs	.+42     	; 0x1440 <xStreamBufferSend+0x152>
    1416:	90 d3       	rcall	.+1824   	; 0x1b38 <vTaskSuspendAll>
    1418:	f4 01       	movw	r30, r8
    141a:	80 85       	ldd	r24, Z+8	; 0x08
    141c:	91 85       	ldd	r25, Z+9	; 0x09
    141e:	89 2b       	or	r24, r25
    1420:	71 f0       	breq	.+28     	; 0x143e <xStreamBufferSend+0x150>
    1422:	80 85       	ldd	r24, Z+8	; 0x08
    1424:	91 85       	ldd	r25, Z+9	; 0x09
    1426:	e1 2c       	mov	r14, r1
    1428:	f1 2c       	mov	r15, r1
    142a:	00 e0       	ldi	r16, 0x00	; 0
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	a9 01       	movw	r20, r18
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	0e 94 4b 14 	call	0x2896	; 0x2896 <xTaskGenericNotify>
    1438:	f4 01       	movw	r30, r8
    143a:	11 86       	std	Z+9, r1	; 0x09
    143c:	10 86       	std	Z+8, r1	; 0x08
    143e:	bc d4       	rcall	.+2424   	; 0x1db8 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1440:	c6 01       	movw	r24, r12
    1442:	2b 96       	adiw	r28, 0x0b	; 11
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	ff 90       	pop	r15
    1458:	ef 90       	pop	r14
    145a:	df 90       	pop	r13
    145c:	cf 90       	pop	r12
    145e:	bf 90       	pop	r11
    1460:	af 90       	pop	r10
    1462:	9f 90       	pop	r9
    1464:	8f 90       	pop	r8
    1466:	7f 90       	pop	r7
    1468:	6f 90       	pop	r6
    146a:	5f 90       	pop	r5
    146c:	4f 90       	pop	r4
    146e:	3f 90       	pop	r3
    1470:	2f 90       	pop	r2
    1472:	08 95       	ret

00001474 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1474:	af 92       	push	r10
    1476:	bf 92       	push	r11
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	ec 01       	movw	r28, r24
    148a:	7b 01       	movw	r14, r22
    148c:	5a 01       	movw	r10, r20
    148e:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1490:	8e 85       	ldd	r24, Y+14	; 0x0e
    1492:	80 ff       	sbrs	r24, 0
    1494:	04 c0       	rjmp	.+8      	; 0x149e <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1496:	8a 01       	movw	r16, r20
    1498:	0e 5f       	subi	r16, 0xFE	; 254
    149a:	1f 4f       	sbci	r17, 0xFF	; 255
    149c:	01 c0       	rjmp	.+2      	; 0x14a0 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    149e:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    14a0:	ce 01       	movw	r24, r28
    14a2:	13 df       	rcall	.-474    	; 0x12ca <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    14a4:	9c 01       	movw	r18, r24
    14a6:	a5 01       	movw	r20, r10
    14a8:	b7 01       	movw	r22, r14
    14aa:	ce 01       	movw	r24, r28
    14ac:	e7 dd       	rcall	.-1074   	; 0x107c <prvWriteMessageToBuffer>
    14ae:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    14b0:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    14b2:	c1 f0       	breq	.+48     	; 0x14e4 <xStreamBufferSendFromISR+0x70>
    14b4:	ce 01       	movw	r24, r28
    14b6:	76 dd       	rcall	.-1300   	; 0xfa4 <prvBytesInBuffer>
    14b8:	2e 81       	ldd	r18, Y+6	; 0x06
    14ba:	3f 81       	ldd	r19, Y+7	; 0x07
    14bc:	82 17       	cp	r24, r18
    14be:	93 07       	cpc	r25, r19
    14c0:	88 f0       	brcs	.+34     	; 0x14e4 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    14c2:	88 85       	ldd	r24, Y+8	; 0x08
    14c4:	99 85       	ldd	r25, Y+9	; 0x09
    14c6:	89 2b       	or	r24, r25
    14c8:	69 f0       	breq	.+26     	; 0x14e4 <xStreamBufferSendFromISR+0x70>
    14ca:	88 85       	ldd	r24, Y+8	; 0x08
    14cc:	99 85       	ldd	r25, Y+9	; 0x09
    14ce:	e1 2c       	mov	r14, r1
    14d0:	f1 2c       	mov	r15, r1
    14d2:	00 e0       	ldi	r16, 0x00	; 0
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	a9 01       	movw	r20, r18
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	0e 94 42 15 	call	0x2a84	; 0x2a84 <xTaskGenericNotifyFromISR>
    14e0:	19 86       	std	Y+9, r1	; 0x09
    14e2:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    14e4:	c5 01       	movw	r24, r10
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	ff 90       	pop	r15
    14f0:	ef 90       	pop	r14
    14f2:	df 90       	pop	r13
    14f4:	cf 90       	pop	r12
    14f6:	bf 90       	pop	r11
    14f8:	af 90       	pop	r10
    14fa:	08 95       	ret

000014fc <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    14fc:	4f 92       	push	r4
    14fe:	5f 92       	push	r5
    1500:	6f 92       	push	r6
    1502:	7f 92       	push	r7
    1504:	8f 92       	push	r8
    1506:	9f 92       	push	r9
    1508:	af 92       	push	r10
    150a:	bf 92       	push	r11
    150c:	cf 92       	push	r12
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	ec 01       	movw	r28, r24
    151e:	2b 01       	movw	r4, r22
    1520:	3a 01       	movw	r6, r20
    1522:	58 01       	movw	r10, r16
    1524:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1526:	8e 85       	ldd	r24, Y+14	; 0x0e
    1528:	80 ff       	sbrs	r24, 0
    152a:	05 c0       	rjmp	.+10     	; 0x1536 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    152c:	68 94       	set
    152e:	88 24       	eor	r8, r8
    1530:	81 f8       	bld	r8, 1
    1532:	91 2c       	mov	r9, r1
    1534:	02 c0       	rjmp	.+4      	; 0x153a <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1536:	81 2c       	mov	r8, r1
    1538:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    153a:	a1 14       	cp	r10, r1
    153c:	b1 04       	cpc	r11, r1
    153e:	c1 04       	cpc	r12, r1
    1540:	d1 04       	cpc	r13, r1
    1542:	39 f1       	breq	.+78     	; 0x1592 <xStreamBufferReceive+0x96>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    154a:	ce 01       	movw	r24, r28
    154c:	2b dd       	rcall	.-1450   	; 0xfa4 <prvBytesInBuffer>
    154e:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1550:	88 16       	cp	r8, r24
    1552:	99 06       	cpc	r9, r25
    1554:	40 f0       	brcs	.+16     	; 0x1566 <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1560:	85 d7       	rcall	.+3850   	; 0x246c <xTaskGetCurrentTaskHandle>
    1562:	99 87       	std	Y+9, r25	; 0x09
    1564:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1566:	0f 90       	pop	r0
    1568:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    156a:	8e 14       	cp	r8, r14
    156c:	9f 04       	cpc	r9, r15
    156e:	a0 f0       	brcs	.+40     	; 0x1598 <xStreamBufferReceive+0x9c>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1570:	e1 2c       	mov	r14, r1
    1572:	f1 2c       	mov	r15, r1
    1574:	00 e0       	ldi	r16, 0x00	; 0
    1576:	10 e0       	ldi	r17, 0x00	; 0
    1578:	98 01       	movw	r18, r16
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	ba 01       	movw	r22, r20
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	0e 94 a4 13 	call	0x2748	; 0x2748 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1586:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1588:	18 86       	std	Y+8, r1	; 0x08
    158a:	ce 01       	movw	r24, r28
    158c:	0b dd       	rcall	.-1514   	; 0xfa4 <prvBytesInBuffer>
    158e:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1590:	03 c0       	rjmp	.+6      	; 0x1598 <xStreamBufferReceive+0x9c>
    1592:	ce 01       	movw	r24, r28
    1594:	07 dd       	rcall	.-1522   	; 0xfa4 <prvBytesInBuffer>
    1596:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1598:	8e 14       	cp	r8, r14
    159a:	9f 04       	cpc	r9, r15
    159c:	e8 f4       	brcc	.+58     	; 0x15d8 <xStreamBufferReceive+0xdc>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    159e:	84 01       	movw	r16, r8
    15a0:	97 01       	movw	r18, r14
    15a2:	a3 01       	movw	r20, r6
    15a4:	b2 01       	movw	r22, r4
    15a6:	ce 01       	movw	r24, r28
    15a8:	fb dd       	rcall	.-1034   	; 0x11a0 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    15aa:	6c 01       	movw	r12, r24
    15ac:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    15ae:	b1 f0       	breq	.+44     	; 0x15dc <xStreamBufferReceive+0xe0>
    15b0:	c3 d2       	rcall	.+1414   	; 0x1b38 <vTaskSuspendAll>
    15b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    15b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    15b6:	89 2b       	or	r24, r25
    15b8:	69 f0       	breq	.+26     	; 0x15d4 <xStreamBufferReceive+0xd8>
    15ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    15bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    15be:	e1 2c       	mov	r14, r1
    15c0:	f1 2c       	mov	r15, r1
    15c2:	00 e0       	ldi	r16, 0x00	; 0
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	a9 01       	movw	r20, r18
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	0e 94 4b 14 	call	0x2896	; 0x2896 <xTaskGenericNotify>
    15d0:	1b 86       	std	Y+11, r1	; 0x0b
    15d2:	1a 86       	std	Y+10, r1	; 0x0a
    15d4:	f1 d3       	rcall	.+2018   	; 0x1db8 <xTaskResumeAll>
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <xStreamBufferReceive+0xe0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    15d8:	c1 2c       	mov	r12, r1
    15da:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    15dc:	c6 01       	movw	r24, r12
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	ff 90       	pop	r15
    15e8:	ef 90       	pop	r14
    15ea:	df 90       	pop	r13
    15ec:	cf 90       	pop	r12
    15ee:	bf 90       	pop	r11
    15f0:	af 90       	pop	r10
    15f2:	9f 90       	pop	r9
    15f4:	8f 90       	pop	r8
    15f6:	7f 90       	pop	r7
    15f8:	6f 90       	pop	r6
    15fa:	5f 90       	pop	r5
    15fc:	4f 90       	pop	r4
    15fe:	08 95       	ret

00001600 <prvResetNextTaskUnblockTime>:
    1600:	e0 91 6d 12 	lds	r30, 0x126D	; 0x80126d <pxDelayedTaskList>
    1604:	f0 91 6e 12 	lds	r31, 0x126E	; 0x80126e <pxDelayedTaskList+0x1>
    1608:	80 81       	ld	r24, Z
    160a:	81 11       	cpse	r24, r1
    160c:	0c c0       	rjmp	.+24     	; 0x1626 <prvResetNextTaskUnblockTime+0x26>
    160e:	8f ef       	ldi	r24, 0xFF	; 255
    1610:	9f ef       	ldi	r25, 0xFF	; 255
    1612:	dc 01       	movw	r26, r24
    1614:	80 93 37 12 	sts	0x1237, r24	; 0x801237 <xNextTaskUnblockTime>
    1618:	90 93 38 12 	sts	0x1238, r25	; 0x801238 <xNextTaskUnblockTime+0x1>
    161c:	a0 93 39 12 	sts	0x1239, r26	; 0x801239 <xNextTaskUnblockTime+0x2>
    1620:	b0 93 3a 12 	sts	0x123A, r27	; 0x80123a <xNextTaskUnblockTime+0x3>
    1624:	08 95       	ret
    1626:	e0 91 6d 12 	lds	r30, 0x126D	; 0x80126d <pxDelayedTaskList>
    162a:	f0 91 6e 12 	lds	r31, 0x126E	; 0x80126e <pxDelayedTaskList+0x1>
    162e:	07 80       	ldd	r0, Z+7	; 0x07
    1630:	f0 85       	ldd	r31, Z+8	; 0x08
    1632:	e0 2d       	mov	r30, r0
    1634:	80 81       	ld	r24, Z
    1636:	91 81       	ldd	r25, Z+1	; 0x01
    1638:	a2 81       	ldd	r26, Z+2	; 0x02
    163a:	b3 81       	ldd	r27, Z+3	; 0x03
    163c:	80 93 37 12 	sts	0x1237, r24	; 0x801237 <xNextTaskUnblockTime>
    1640:	90 93 38 12 	sts	0x1238, r25	; 0x801238 <xNextTaskUnblockTime+0x1>
    1644:	a0 93 39 12 	sts	0x1239, r26	; 0x801239 <xNextTaskUnblockTime+0x2>
    1648:	b0 93 3a 12 	sts	0x123A, r27	; 0x80123a <xNextTaskUnblockTime+0x3>
    164c:	08 95       	ret

0000164e <prvDeleteTCB>:
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	ec 01       	movw	r28, r24
    1654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1658:	0e 94 68 02 	call	0x4d0	; 0x4d0 <vPortFree>
    165c:	ce 01       	movw	r24, r28
    165e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <vPortFree>
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	08 95       	ret

00001668 <prvInitialiseNewTask>:
    1668:	4f 92       	push	r4
    166a:	5f 92       	push	r5
    166c:	6f 92       	push	r6
    166e:	7f 92       	push	r7
    1670:	8f 92       	push	r8
    1672:	9f 92       	push	r9
    1674:	af 92       	push	r10
    1676:	bf 92       	push	r11
    1678:	cf 92       	push	r12
    167a:	df 92       	push	r13
    167c:	ef 92       	push	r14
    167e:	ff 92       	push	r15
    1680:	0f 93       	push	r16
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	2c 01       	movw	r4, r24
    1688:	5b 01       	movw	r10, r22
    168a:	4a 01       	movw	r8, r20
    168c:	39 01       	movw	r6, r18
    168e:	e6 01       	movw	r28, r12
    1690:	65 ea       	ldi	r22, 0xA5	; 165
    1692:	70 e0       	ldi	r23, 0x00	; 0
    1694:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1696:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1698:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <memset>
    169c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    169e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16a0:	21 e0       	ldi	r18, 0x01	; 1
    16a2:	82 1a       	sub	r8, r18
    16a4:	91 08       	sbc	r9, r1
    16a6:	88 0e       	add	r8, r24
    16a8:	99 1e       	adc	r9, r25
    16aa:	a1 14       	cp	r10, r1
    16ac:	b1 04       	cpc	r11, r1
    16ae:	89 f4       	brne	.+34     	; 0x16d2 <prvInitialiseNewTask+0x6a>
    16b0:	15 c0       	rjmp	.+42     	; 0x16dc <prvInitialiseNewTask+0x74>
    16b2:	82 2f       	mov	r24, r18
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	f5 01       	movw	r30, r10
    16b8:	e8 0f       	add	r30, r24
    16ba:	f9 1f       	adc	r31, r25
    16bc:	30 81       	ld	r19, Z
    16be:	de 01       	movw	r26, r28
    16c0:	a8 0f       	add	r26, r24
    16c2:	b9 1f       	adc	r27, r25
    16c4:	5d 96       	adiw	r26, 0x1d	; 29
    16c6:	3c 93       	st	X, r19
    16c8:	80 81       	ld	r24, Z
    16ca:	88 23       	and	r24, r24
    16cc:	29 f0       	breq	.+10     	; 0x16d8 <prvInitialiseNewTask+0x70>
    16ce:	2f 5f       	subi	r18, 0xFF	; 255
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <prvInitialiseNewTask+0x6c>
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	20 31       	cpi	r18, 0x10	; 16
    16d6:	68 f3       	brcs	.-38     	; 0x16b2 <prvInitialiseNewTask+0x4a>
    16d8:	1c a6       	std	Y+44, r1	; 0x2c
    16da:	01 c0       	rjmp	.+2      	; 0x16de <prvInitialiseNewTask+0x76>
    16dc:	1d 8e       	std	Y+29, r1	; 0x1d
    16de:	0a 30       	cpi	r16, 0x0A	; 10
    16e0:	08 f0       	brcs	.+2      	; 0x16e4 <prvInitialiseNewTask+0x7c>
    16e2:	09 e0       	ldi	r16, 0x09	; 9
    16e4:	0a 8f       	std	Y+26, r16	; 0x1a
    16e6:	0d a7       	std	Y+45, r16	; 0x2d
    16e8:	1e a6       	std	Y+46, r1	; 0x2e
    16ea:	ce 01       	movw	r24, r28
    16ec:	02 96       	adiw	r24, 0x02	; 2
    16ee:	0e 94 b6 02 	call	0x56c	; 0x56c <vListInitialiseItem>
    16f2:	ce 01       	movw	r24, r28
    16f4:	0e 96       	adiw	r24, 0x0e	; 14
    16f6:	0e 94 b6 02 	call	0x56c	; 0x56c <vListInitialiseItem>
    16fa:	db 87       	std	Y+11, r29	; 0x0b
    16fc:	ca 87       	std	Y+10, r28	; 0x0a
    16fe:	8a e0       	ldi	r24, 0x0A	; 10
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a0 e0       	ldi	r26, 0x00	; 0
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	80 1b       	sub	r24, r16
    1708:	91 09       	sbc	r25, r1
    170a:	a1 09       	sbc	r26, r1
    170c:	b1 09       	sbc	r27, r1
    170e:	8e 87       	std	Y+14, r24	; 0x0e
    1710:	9f 87       	std	Y+15, r25	; 0x0f
    1712:	a8 8b       	std	Y+16, r26	; 0x10
    1714:	b9 8b       	std	Y+17, r27	; 0x11
    1716:	df 8b       	std	Y+23, r29	; 0x17
    1718:	ce 8b       	std	Y+22, r28	; 0x16
    171a:	84 e0       	ldi	r24, 0x04	; 4
    171c:	fe 01       	movw	r30, r28
    171e:	bf 96       	adiw	r30, 0x2f	; 47
    1720:	df 01       	movw	r26, r30
    1722:	1d 92       	st	X+, r1
    1724:	8a 95       	dec	r24
    1726:	e9 f7       	brne	.-6      	; 0x1722 <prvInitialiseNewTask+0xba>
    1728:	1b aa       	std	Y+51, r1	; 0x33
    172a:	a3 01       	movw	r20, r6
    172c:	b2 01       	movw	r22, r4
    172e:	c4 01       	movw	r24, r8
    1730:	0e 94 2a 03 	call	0x654	; 0x654 <pxPortInitialiseStack>
    1734:	99 83       	std	Y+1, r25	; 0x01
    1736:	88 83       	st	Y, r24
    1738:	e1 14       	cp	r14, r1
    173a:	f1 04       	cpc	r15, r1
    173c:	19 f0       	breq	.+6      	; 0x1744 <prvInitialiseNewTask+0xdc>
    173e:	f7 01       	movw	r30, r14
    1740:	d1 83       	std	Z+1, r29	; 0x01
    1742:	c0 83       	st	Z, r28
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	df 90       	pop	r13
    1750:	cf 90       	pop	r12
    1752:	bf 90       	pop	r11
    1754:	af 90       	pop	r10
    1756:	9f 90       	pop	r9
    1758:	8f 90       	pop	r8
    175a:	7f 90       	pop	r7
    175c:	6f 90       	pop	r6
    175e:	5f 90       	pop	r5
    1760:	4f 90       	pop	r4
    1762:	08 95       	ret

00001764 <prvInitialiseTaskLists>:
    1764:	cf 93       	push	r28
    1766:	c0 e0       	ldi	r28, 0x00	; 0
    1768:	09 c0       	rjmp	.+18     	; 0x177c <prvInitialiseTaskLists+0x18>
    176a:	2b e0       	ldi	r18, 0x0B	; 11
    176c:	c2 9f       	mul	r28, r18
    176e:	c0 01       	movw	r24, r0
    1770:	11 24       	eor	r1, r1
    1772:	8b 57       	subi	r24, 0x7B	; 123
    1774:	9d 4e       	sbci	r25, 0xED	; 237
    1776:	0e 94 a5 02 	call	0x54a	; 0x54a <vListInitialise>
    177a:	cf 5f       	subi	r28, 0xFF	; 255
    177c:	ca 30       	cpi	r28, 0x0A	; 10
    177e:	a8 f3       	brcs	.-22     	; 0x176a <prvInitialiseTaskLists+0x6>
    1780:	8a e7       	ldi	r24, 0x7A	; 122
    1782:	92 e1       	ldi	r25, 0x12	; 18
    1784:	0e 94 a5 02 	call	0x54a	; 0x54a <vListInitialise>
    1788:	8f e6       	ldi	r24, 0x6F	; 111
    178a:	92 e1       	ldi	r25, 0x12	; 18
    178c:	0e 94 a5 02 	call	0x54a	; 0x54a <vListInitialise>
    1790:	80 e6       	ldi	r24, 0x60	; 96
    1792:	92 e1       	ldi	r25, 0x12	; 18
    1794:	0e 94 a5 02 	call	0x54a	; 0x54a <vListInitialise>
    1798:	85 e5       	ldi	r24, 0x55	; 85
    179a:	92 e1       	ldi	r25, 0x12	; 18
    179c:	0e 94 a5 02 	call	0x54a	; 0x54a <vListInitialise>
    17a0:	89 e4       	ldi	r24, 0x49	; 73
    17a2:	92 e1       	ldi	r25, 0x12	; 18
    17a4:	0e 94 a5 02 	call	0x54a	; 0x54a <vListInitialise>
    17a8:	8a e7       	ldi	r24, 0x7A	; 122
    17aa:	92 e1       	ldi	r25, 0x12	; 18
    17ac:	90 93 6e 12 	sts	0x126E, r25	; 0x80126e <pxDelayedTaskList+0x1>
    17b0:	80 93 6d 12 	sts	0x126D, r24	; 0x80126d <pxDelayedTaskList>
    17b4:	8f e6       	ldi	r24, 0x6F	; 111
    17b6:	92 e1       	ldi	r25, 0x12	; 18
    17b8:	90 93 6c 12 	sts	0x126C, r25	; 0x80126c <pxOverflowDelayedTaskList+0x1>
    17bc:	80 93 6b 12 	sts	0x126B, r24	; 0x80126b <pxOverflowDelayedTaskList>
    17c0:	cf 91       	pop	r28
    17c2:	08 95       	ret

000017c4 <prvAddNewTaskToReadyList>:
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	ec 01       	movw	r28, r24
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	0f 92       	push	r0
    17d0:	80 91 48 12 	lds	r24, 0x1248	; 0x801248 <uxCurrentNumberOfTasks>
    17d4:	8f 5f       	subi	r24, 0xFF	; 255
    17d6:	80 93 48 12 	sts	0x1248, r24	; 0x801248 <uxCurrentNumberOfTasks>
    17da:	80 91 f3 12 	lds	r24, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    17de:	90 91 f4 12 	lds	r25, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    17e2:	89 2b       	or	r24, r25
    17e4:	51 f4       	brne	.+20     	; 0x17fa <prvAddNewTaskToReadyList+0x36>
    17e6:	d0 93 f4 12 	sts	0x12F4, r29	; 0x8012f4 <pxCurrentTCB+0x1>
    17ea:	c0 93 f3 12 	sts	0x12F3, r28	; 0x8012f3 <pxCurrentTCB>
    17ee:	80 91 48 12 	lds	r24, 0x1248	; 0x801248 <uxCurrentNumberOfTasks>
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	91 f4       	brne	.+36     	; 0x181a <prvAddNewTaskToReadyList+0x56>
    17f6:	b6 df       	rcall	.-148    	; 0x1764 <prvInitialiseTaskLists>
    17f8:	10 c0       	rjmp	.+32     	; 0x181a <prvAddNewTaskToReadyList+0x56>
    17fa:	80 91 42 12 	lds	r24, 0x1242	; 0x801242 <xSchedulerRunning>
    17fe:	81 11       	cpse	r24, r1
    1800:	0c c0       	rjmp	.+24     	; 0x181a <prvAddNewTaskToReadyList+0x56>
    1802:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    1806:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    180a:	92 8d       	ldd	r25, Z+26	; 0x1a
    180c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    180e:	89 17       	cp	r24, r25
    1810:	20 f0       	brcs	.+8      	; 0x181a <prvAddNewTaskToReadyList+0x56>
    1812:	d0 93 f4 12 	sts	0x12F4, r29	; 0x8012f4 <pxCurrentTCB+0x1>
    1816:	c0 93 f3 12 	sts	0x12F3, r28	; 0x8012f3 <pxCurrentTCB>
    181a:	80 91 3b 12 	lds	r24, 0x123B	; 0x80123b <uxTaskNumber>
    181e:	8f 5f       	subi	r24, 0xFF	; 255
    1820:	80 93 3b 12 	sts	0x123B, r24	; 0x80123b <uxTaskNumber>
    1824:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1826:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <uxTopReadyPriority>
    182a:	8e 17       	cp	r24, r30
    182c:	10 f4       	brcc	.+4      	; 0x1832 <prvAddNewTaskToReadyList+0x6e>
    182e:	e0 93 43 12 	sts	0x1243, r30	; 0x801243 <uxTopReadyPriority>
    1832:	8b e0       	ldi	r24, 0x0B	; 11
    1834:	8e 9f       	mul	r24, r30
    1836:	f0 01       	movw	r30, r0
    1838:	11 24       	eor	r1, r1
    183a:	eb 57       	subi	r30, 0x7B	; 123
    183c:	fd 4e       	sbci	r31, 0xED	; 237
    183e:	01 80       	ldd	r0, Z+1	; 0x01
    1840:	f2 81       	ldd	r31, Z+2	; 0x02
    1842:	e0 2d       	mov	r30, r0
    1844:	ff 83       	std	Y+7, r31	; 0x07
    1846:	ee 83       	std	Y+6, r30	; 0x06
    1848:	26 81       	ldd	r18, Z+6	; 0x06
    184a:	37 81       	ldd	r19, Z+7	; 0x07
    184c:	39 87       	std	Y+9, r19	; 0x09
    184e:	28 87       	std	Y+8, r18	; 0x08
    1850:	a6 81       	ldd	r26, Z+6	; 0x06
    1852:	b7 81       	ldd	r27, Z+7	; 0x07
    1854:	9e 01       	movw	r18, r28
    1856:	2e 5f       	subi	r18, 0xFE	; 254
    1858:	3f 4f       	sbci	r19, 0xFF	; 255
    185a:	15 96       	adiw	r26, 0x05	; 5
    185c:	3c 93       	st	X, r19
    185e:	2e 93       	st	-X, r18
    1860:	14 97       	sbiw	r26, 0x04	; 4
    1862:	37 83       	std	Z+7, r19	; 0x07
    1864:	26 83       	std	Z+6, r18	; 0x06
    1866:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1868:	8e 9f       	mul	r24, r30
    186a:	f0 01       	movw	r30, r0
    186c:	11 24       	eor	r1, r1
    186e:	eb 57       	subi	r30, 0x7B	; 123
    1870:	fd 4e       	sbci	r31, 0xED	; 237
    1872:	fd 87       	std	Y+13, r31	; 0x0d
    1874:	ec 87       	std	Y+12, r30	; 0x0c
    1876:	80 81       	ld	r24, Z
    1878:	8f 5f       	subi	r24, 0xFF	; 255
    187a:	80 83       	st	Z, r24
    187c:	0f 90       	pop	r0
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	80 91 42 12 	lds	r24, 0x1242	; 0x801242 <xSchedulerRunning>
    1884:	88 23       	and	r24, r24
    1886:	51 f0       	breq	.+20     	; 0x189c <prvAddNewTaskToReadyList+0xd8>
    1888:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    188c:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    1890:	92 8d       	ldd	r25, Z+26	; 0x1a
    1892:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1894:	98 17       	cp	r25, r24
    1896:	10 f4       	brcc	.+4      	; 0x189c <prvAddNewTaskToReadyList+0xd8>
    1898:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	08 95       	ret

000018a2 <prvCheckTasksWaitingTermination>:
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	1b c0       	rjmp	.+54     	; 0x18de <prvCheckTasksWaitingTermination+0x3c>
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	0f 92       	push	r0
    18ae:	e0 91 5c 12 	lds	r30, 0x125C	; 0x80125c <xTasksWaitingTermination+0x7>
    18b2:	f0 91 5d 12 	lds	r31, 0x125D	; 0x80125d <xTasksWaitingTermination+0x8>
    18b6:	c0 85       	ldd	r28, Z+8	; 0x08
    18b8:	d1 85       	ldd	r29, Z+9	; 0x09
    18ba:	ce 01       	movw	r24, r28
    18bc:	02 96       	adiw	r24, 0x02	; 2
    18be:	0e 94 f7 02 	call	0x5ee	; 0x5ee <uxListRemove>
    18c2:	80 91 48 12 	lds	r24, 0x1248	; 0x801248 <uxCurrentNumberOfTasks>
    18c6:	81 50       	subi	r24, 0x01	; 1
    18c8:	80 93 48 12 	sts	0x1248, r24	; 0x801248 <uxCurrentNumberOfTasks>
    18cc:	80 91 54 12 	lds	r24, 0x1254	; 0x801254 <uxDeletedTasksWaitingCleanUp>
    18d0:	81 50       	subi	r24, 0x01	; 1
    18d2:	80 93 54 12 	sts	0x1254, r24	; 0x801254 <uxDeletedTasksWaitingCleanUp>
    18d6:	0f 90       	pop	r0
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	ce 01       	movw	r24, r28
    18dc:	b8 de       	rcall	.-656    	; 0x164e <prvDeleteTCB>
    18de:	80 91 54 12 	lds	r24, 0x1254	; 0x801254 <uxDeletedTasksWaitingCleanUp>
    18e2:	81 11       	cpse	r24, r1
    18e4:	e1 cf       	rjmp	.-62     	; 0x18a8 <prvCheckTasksWaitingTermination+0x6>
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	08 95       	ret

000018ec <prvAddCurrentTaskToDelayedList>:
    18ec:	8f 92       	push	r8
    18ee:	9f 92       	push	r9
    18f0:	af 92       	push	r10
    18f2:	bf 92       	push	r11
    18f4:	cf 92       	push	r12
    18f6:	df 92       	push	r13
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	6b 01       	movw	r12, r22
    1902:	7c 01       	movw	r14, r24
    1904:	c4 2f       	mov	r28, r20
    1906:	80 90 44 12 	lds	r8, 0x1244	; 0x801244 <xTickCount>
    190a:	90 90 45 12 	lds	r9, 0x1245	; 0x801245 <xTickCount+0x1>
    190e:	a0 90 46 12 	lds	r10, 0x1246	; 0x801246 <xTickCount+0x2>
    1912:	b0 90 47 12 	lds	r11, 0x1247	; 0x801247 <xTickCount+0x3>
    1916:	80 91 f3 12 	lds	r24, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    191a:	90 91 f4 12 	lds	r25, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    191e:	02 96       	adiw	r24, 0x02	; 2
    1920:	0e 94 f7 02 	call	0x5ee	; 0x5ee <uxListRemove>
    1924:	8f ef       	ldi	r24, 0xFF	; 255
    1926:	c8 16       	cp	r12, r24
    1928:	d8 06       	cpc	r13, r24
    192a:	e8 06       	cpc	r14, r24
    192c:	f8 06       	cpc	r15, r24
    192e:	b1 f5       	brne	.+108    	; 0x199c <prvAddCurrentTaskToDelayedList+0xb0>
    1930:	cc 23       	and	r28, r28
    1932:	a1 f1       	breq	.+104    	; 0x199c <prvAddCurrentTaskToDelayedList+0xb0>
    1934:	e9 e4       	ldi	r30, 0x49	; 73
    1936:	f2 e1       	ldi	r31, 0x12	; 18
    1938:	a1 81       	ldd	r26, Z+1	; 0x01
    193a:	b2 81       	ldd	r27, Z+2	; 0x02
    193c:	c0 91 f3 12 	lds	r28, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    1940:	d0 91 f4 12 	lds	r29, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    1944:	bf 83       	std	Y+7, r27	; 0x07
    1946:	ae 83       	std	Y+6, r26	; 0x06
    1948:	c0 91 f3 12 	lds	r28, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    194c:	d0 91 f4 12 	lds	r29, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    1950:	16 96       	adiw	r26, 0x06	; 6
    1952:	8d 91       	ld	r24, X+
    1954:	9c 91       	ld	r25, X
    1956:	17 97       	sbiw	r26, 0x07	; 7
    1958:	99 87       	std	Y+9, r25	; 0x09
    195a:	88 87       	std	Y+8, r24	; 0x08
    195c:	16 96       	adiw	r26, 0x06	; 6
    195e:	cd 91       	ld	r28, X+
    1960:	dc 91       	ld	r29, X
    1962:	17 97       	sbiw	r26, 0x07	; 7
    1964:	80 91 f3 12 	lds	r24, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    1968:	90 91 f4 12 	lds	r25, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    196c:	02 96       	adiw	r24, 0x02	; 2
    196e:	9d 83       	std	Y+5, r25	; 0x05
    1970:	8c 83       	std	Y+4, r24	; 0x04
    1972:	80 91 f3 12 	lds	r24, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    1976:	90 91 f4 12 	lds	r25, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    197a:	02 96       	adiw	r24, 0x02	; 2
    197c:	17 96       	adiw	r26, 0x07	; 7
    197e:	9c 93       	st	X, r25
    1980:	8e 93       	st	-X, r24
    1982:	16 97       	sbiw	r26, 0x06	; 6
    1984:	a0 91 f3 12 	lds	r26, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    1988:	b0 91 f4 12 	lds	r27, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    198c:	1d 96       	adiw	r26, 0x0d	; 13
    198e:	fc 93       	st	X, r31
    1990:	ee 93       	st	-X, r30
    1992:	1c 97       	sbiw	r26, 0x0c	; 12
    1994:	80 81       	ld	r24, Z
    1996:	8f 5f       	subi	r24, 0xFF	; 255
    1998:	80 83       	st	Z, r24
    199a:	3f c0       	rjmp	.+126    	; 0x1a1a <prvAddCurrentTaskToDelayedList+0x12e>
    199c:	c8 0c       	add	r12, r8
    199e:	d9 1c       	adc	r13, r9
    19a0:	ea 1c       	adc	r14, r10
    19a2:	fb 1c       	adc	r15, r11
    19a4:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    19a8:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    19ac:	c2 82       	std	Z+2, r12	; 0x02
    19ae:	d3 82       	std	Z+3, r13	; 0x03
    19b0:	e4 82       	std	Z+4, r14	; 0x04
    19b2:	f5 82       	std	Z+5, r15	; 0x05
    19b4:	c8 14       	cp	r12, r8
    19b6:	d9 04       	cpc	r13, r9
    19b8:	ea 04       	cpc	r14, r10
    19ba:	fb 04       	cpc	r15, r11
    19bc:	68 f4       	brcc	.+26     	; 0x19d8 <prvAddCurrentTaskToDelayedList+0xec>
    19be:	60 91 f3 12 	lds	r22, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    19c2:	70 91 f4 12 	lds	r23, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    19c6:	80 91 6b 12 	lds	r24, 0x126B	; 0x80126b <pxOverflowDelayedTaskList>
    19ca:	90 91 6c 12 	lds	r25, 0x126C	; 0x80126c <pxOverflowDelayedTaskList+0x1>
    19ce:	6e 5f       	subi	r22, 0xFE	; 254
    19d0:	7f 4f       	sbci	r23, 0xFF	; 255
    19d2:	0e 94 ba 02 	call	0x574	; 0x574 <vListInsert>
    19d6:	21 c0       	rjmp	.+66     	; 0x1a1a <prvAddCurrentTaskToDelayedList+0x12e>
    19d8:	60 91 f3 12 	lds	r22, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    19dc:	70 91 f4 12 	lds	r23, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    19e0:	80 91 6d 12 	lds	r24, 0x126D	; 0x80126d <pxDelayedTaskList>
    19e4:	90 91 6e 12 	lds	r25, 0x126E	; 0x80126e <pxDelayedTaskList+0x1>
    19e8:	6e 5f       	subi	r22, 0xFE	; 254
    19ea:	7f 4f       	sbci	r23, 0xFF	; 255
    19ec:	0e 94 ba 02 	call	0x574	; 0x574 <vListInsert>
    19f0:	80 91 37 12 	lds	r24, 0x1237	; 0x801237 <xNextTaskUnblockTime>
    19f4:	90 91 38 12 	lds	r25, 0x1238	; 0x801238 <xNextTaskUnblockTime+0x1>
    19f8:	a0 91 39 12 	lds	r26, 0x1239	; 0x801239 <xNextTaskUnblockTime+0x2>
    19fc:	b0 91 3a 12 	lds	r27, 0x123A	; 0x80123a <xNextTaskUnblockTime+0x3>
    1a00:	c8 16       	cp	r12, r24
    1a02:	d9 06       	cpc	r13, r25
    1a04:	ea 06       	cpc	r14, r26
    1a06:	fb 06       	cpc	r15, r27
    1a08:	40 f4       	brcc	.+16     	; 0x1a1a <prvAddCurrentTaskToDelayedList+0x12e>
    1a0a:	c0 92 37 12 	sts	0x1237, r12	; 0x801237 <xNextTaskUnblockTime>
    1a0e:	d0 92 38 12 	sts	0x1238, r13	; 0x801238 <xNextTaskUnblockTime+0x1>
    1a12:	e0 92 39 12 	sts	0x1239, r14	; 0x801239 <xNextTaskUnblockTime+0x2>
    1a16:	f0 92 3a 12 	sts	0x123A, r15	; 0x80123a <xNextTaskUnblockTime+0x3>
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	ff 90       	pop	r15
    1a20:	ef 90       	pop	r14
    1a22:	df 90       	pop	r13
    1a24:	cf 90       	pop	r12
    1a26:	bf 90       	pop	r11
    1a28:	af 90       	pop	r10
    1a2a:	9f 90       	pop	r9
    1a2c:	8f 90       	pop	r8
    1a2e:	08 95       	ret

00001a30 <xTaskCreate>:
    1a30:	2f 92       	push	r2
    1a32:	3f 92       	push	r3
    1a34:	4f 92       	push	r4
    1a36:	5f 92       	push	r5
    1a38:	6f 92       	push	r6
    1a3a:	7f 92       	push	r7
    1a3c:	8f 92       	push	r8
    1a3e:	9f 92       	push	r9
    1a40:	af 92       	push	r10
    1a42:	bf 92       	push	r11
    1a44:	cf 92       	push	r12
    1a46:	df 92       	push	r13
    1a48:	ef 92       	push	r14
    1a4a:	ff 92       	push	r15
    1a4c:	0f 93       	push	r16
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	3c 01       	movw	r6, r24
    1a54:	1b 01       	movw	r2, r22
    1a56:	4a 01       	movw	r8, r20
    1a58:	29 01       	movw	r4, r18
    1a5a:	ca 01       	movw	r24, r20
    1a5c:	0e 94 bf 01 	call	0x37e	; 0x37e <pvPortMalloc>
    1a60:	6c 01       	movw	r12, r24
    1a62:	89 2b       	or	r24, r25
    1a64:	71 f0       	breq	.+28     	; 0x1a82 <xTaskCreate+0x52>
    1a66:	84 e3       	ldi	r24, 0x34	; 52
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	0e 94 bf 01 	call	0x37e	; 0x37e <pvPortMalloc>
    1a6e:	ec 01       	movw	r28, r24
    1a70:	89 2b       	or	r24, r25
    1a72:	19 f0       	breq	.+6      	; 0x1a7a <xTaskCreate+0x4a>
    1a74:	dc 8e       	std	Y+28, r13	; 0x1c
    1a76:	cb 8e       	std	Y+27, r12	; 0x1b
    1a78:	06 c0       	rjmp	.+12     	; 0x1a86 <xTaskCreate+0x56>
    1a7a:	c6 01       	movw	r24, r12
    1a7c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <vPortFree>
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <xTaskCreate+0x56>
    1a82:	c0 e0       	ldi	r28, 0x00	; 0
    1a84:	d0 e0       	ldi	r29, 0x00	; 0
    1a86:	20 97       	sbiw	r28, 0x00	; 0
    1a88:	61 f0       	breq	.+24     	; 0x1aa2 <xTaskCreate+0x72>
    1a8a:	a1 2c       	mov	r10, r1
    1a8c:	b1 2c       	mov	r11, r1
    1a8e:	6e 01       	movw	r12, r28
    1a90:	92 01       	movw	r18, r4
    1a92:	a4 01       	movw	r20, r8
    1a94:	b1 01       	movw	r22, r2
    1a96:	c3 01       	movw	r24, r6
    1a98:	e7 dd       	rcall	.-1074   	; 0x1668 <prvInitialiseNewTask>
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	93 de       	rcall	.-730    	; 0x17c4 <prvAddNewTaskToReadyList>
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	01 c0       	rjmp	.+2      	; 0x1aa4 <xTaskCreate+0x74>
    1aa2:	8f ef       	ldi	r24, 0xFF	; 255
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	0f 91       	pop	r16
    1aaa:	ff 90       	pop	r15
    1aac:	ef 90       	pop	r14
    1aae:	df 90       	pop	r13
    1ab0:	cf 90       	pop	r12
    1ab2:	bf 90       	pop	r11
    1ab4:	af 90       	pop	r10
    1ab6:	9f 90       	pop	r9
    1ab8:	8f 90       	pop	r8
    1aba:	7f 90       	pop	r7
    1abc:	6f 90       	pop	r6
    1abe:	5f 90       	pop	r5
    1ac0:	4f 90       	pop	r4
    1ac2:	3f 90       	pop	r3
    1ac4:	2f 90       	pop	r2
    1ac6:	08 95       	ret

00001ac8 <vTaskStartScheduler>:
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	0f 2e       	mov	r0, r31
    1ad0:	f5 e3       	ldi	r31, 0x35	; 53
    1ad2:	ef 2e       	mov	r14, r31
    1ad4:	f2 e1       	ldi	r31, 0x12	; 18
    1ad6:	ff 2e       	mov	r15, r31
    1ad8:	f0 2d       	mov	r31, r0
    1ada:	00 e0       	ldi	r16, 0x00	; 0
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 ec       	ldi	r20, 0xC0	; 192
    1ae2:	50 e0       	ldi	r21, 0x00	; 0
    1ae4:	67 e9       	ldi	r22, 0x97	; 151
    1ae6:	72 e0       	ldi	r23, 0x02	; 2
    1ae8:	8d ec       	ldi	r24, 0xCD	; 205
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a1 df       	rcall	.-190    	; 0x1a30 <xTaskCreate>
    1aee:	81 30       	cpi	r24, 0x01	; 1
    1af0:	11 f4       	brne	.+4      	; 0x1af6 <vTaskStartScheduler+0x2e>
    1af2:	0e 94 08 17 	call	0x2e10	; 0x2e10 <xTimerCreateTimerTask>
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	c9 f4       	brne	.+50     	; 0x1b2c <vTaskStartScheduler+0x64>
    1afa:	f8 94       	cli
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	9f ef       	ldi	r25, 0xFF	; 255
    1b00:	dc 01       	movw	r26, r24
    1b02:	80 93 37 12 	sts	0x1237, r24	; 0x801237 <xNextTaskUnblockTime>
    1b06:	90 93 38 12 	sts	0x1238, r25	; 0x801238 <xNextTaskUnblockTime+0x1>
    1b0a:	a0 93 39 12 	sts	0x1239, r26	; 0x801239 <xNextTaskUnblockTime+0x2>
    1b0e:	b0 93 3a 12 	sts	0x123A, r27	; 0x80123a <xNextTaskUnblockTime+0x3>
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	80 93 42 12 	sts	0x1242, r24	; 0x801242 <xSchedulerRunning>
    1b18:	10 92 44 12 	sts	0x1244, r1	; 0x801244 <xTickCount>
    1b1c:	10 92 45 12 	sts	0x1245, r1	; 0x801245 <xTickCount+0x1>
    1b20:	10 92 46 12 	sts	0x1246, r1	; 0x801246 <xTickCount+0x2>
    1b24:	10 92 47 12 	sts	0x1247, r1	; 0x801247 <xTickCount+0x3>
    1b28:	0e 94 41 03 	call	0x682	; 0x682 <xPortStartScheduler>
    1b2c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1b30:	0f 91       	pop	r16
    1b32:	ff 90       	pop	r15
    1b34:	ef 90       	pop	r14
    1b36:	08 95       	ret

00001b38 <vTaskSuspendAll>:
    1b38:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <uxSchedulerSuspended>
    1b3c:	8f 5f       	subi	r24, 0xFF	; 255
    1b3e:	80 93 34 12 	sts	0x1234, r24	; 0x801234 <uxSchedulerSuspended>
    1b42:	08 95       	ret

00001b44 <xTaskGetTickCount>:
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	0f 92       	push	r0
    1b4a:	60 91 44 12 	lds	r22, 0x1244	; 0x801244 <xTickCount>
    1b4e:	70 91 45 12 	lds	r23, 0x1245	; 0x801245 <xTickCount+0x1>
    1b52:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <xTickCount+0x2>
    1b56:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <xTickCount+0x3>
    1b5a:	0f 90       	pop	r0
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	08 95       	ret

00001b60 <xTaskIncrementTick>:
    1b60:	cf 92       	push	r12
    1b62:	df 92       	push	r13
    1b64:	ef 92       	push	r14
    1b66:	ff 92       	push	r15
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <uxSchedulerSuspended>
    1b70:	81 11       	cpse	r24, r1
    1b72:	05 c1       	rjmp	.+522    	; 0x1d7e <xTaskIncrementTick+0x21e>
    1b74:	c0 90 44 12 	lds	r12, 0x1244	; 0x801244 <xTickCount>
    1b78:	d0 90 45 12 	lds	r13, 0x1245	; 0x801245 <xTickCount+0x1>
    1b7c:	e0 90 46 12 	lds	r14, 0x1246	; 0x801246 <xTickCount+0x2>
    1b80:	f0 90 47 12 	lds	r15, 0x1247	; 0x801247 <xTickCount+0x3>
    1b84:	8f ef       	ldi	r24, 0xFF	; 255
    1b86:	c8 1a       	sub	r12, r24
    1b88:	d8 0a       	sbc	r13, r24
    1b8a:	e8 0a       	sbc	r14, r24
    1b8c:	f8 0a       	sbc	r15, r24
    1b8e:	c0 92 44 12 	sts	0x1244, r12	; 0x801244 <xTickCount>
    1b92:	d0 92 45 12 	sts	0x1245, r13	; 0x801245 <xTickCount+0x1>
    1b96:	e0 92 46 12 	sts	0x1246, r14	; 0x801246 <xTickCount+0x2>
    1b9a:	f0 92 47 12 	sts	0x1247, r15	; 0x801247 <xTickCount+0x3>
    1b9e:	c1 14       	cp	r12, r1
    1ba0:	d1 04       	cpc	r13, r1
    1ba2:	e1 04       	cpc	r14, r1
    1ba4:	f1 04       	cpc	r15, r1
    1ba6:	b1 f4       	brne	.+44     	; 0x1bd4 <xTaskIncrementTick+0x74>
    1ba8:	80 91 6d 12 	lds	r24, 0x126D	; 0x80126d <pxDelayedTaskList>
    1bac:	90 91 6e 12 	lds	r25, 0x126E	; 0x80126e <pxDelayedTaskList+0x1>
    1bb0:	20 91 6b 12 	lds	r18, 0x126B	; 0x80126b <pxOverflowDelayedTaskList>
    1bb4:	30 91 6c 12 	lds	r19, 0x126C	; 0x80126c <pxOverflowDelayedTaskList+0x1>
    1bb8:	30 93 6e 12 	sts	0x126E, r19	; 0x80126e <pxDelayedTaskList+0x1>
    1bbc:	20 93 6d 12 	sts	0x126D, r18	; 0x80126d <pxDelayedTaskList>
    1bc0:	90 93 6c 12 	sts	0x126C, r25	; 0x80126c <pxOverflowDelayedTaskList+0x1>
    1bc4:	80 93 6b 12 	sts	0x126B, r24	; 0x80126b <pxOverflowDelayedTaskList>
    1bc8:	80 91 3c 12 	lds	r24, 0x123C	; 0x80123c <xNumOfOverflows>
    1bcc:	8f 5f       	subi	r24, 0xFF	; 255
    1bce:	80 93 3c 12 	sts	0x123C, r24	; 0x80123c <xNumOfOverflows>
    1bd2:	16 dd       	rcall	.-1492   	; 0x1600 <prvResetNextTaskUnblockTime>
    1bd4:	80 91 37 12 	lds	r24, 0x1237	; 0x801237 <xNextTaskUnblockTime>
    1bd8:	90 91 38 12 	lds	r25, 0x1238	; 0x801238 <xNextTaskUnblockTime+0x1>
    1bdc:	a0 91 39 12 	lds	r26, 0x1239	; 0x801239 <xNextTaskUnblockTime+0x2>
    1be0:	b0 91 3a 12 	lds	r27, 0x123A	; 0x80123a <xNextTaskUnblockTime+0x3>
    1be4:	c8 16       	cp	r12, r24
    1be6:	d9 06       	cpc	r13, r25
    1be8:	ea 06       	cpc	r14, r26
    1bea:	fb 06       	cpc	r15, r27
    1bec:	20 f4       	brcc	.+8      	; 0x1bf6 <xTaskIncrementTick+0x96>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	b2 c0       	rjmp	.+356    	; 0x1d56 <xTaskIncrementTick+0x1f6>
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	01 c0       	rjmp	.+2      	; 0x1bf8 <xTaskIncrementTick+0x98>
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	e0 91 6d 12 	lds	r30, 0x126D	; 0x80126d <pxDelayedTaskList>
    1bfc:	f0 91 6e 12 	lds	r31, 0x126E	; 0x80126e <pxDelayedTaskList+0x1>
    1c00:	90 81       	ld	r25, Z
    1c02:	91 11       	cpse	r25, r1
    1c04:	0c c0       	rjmp	.+24     	; 0x1c1e <xTaskIncrementTick+0xbe>
    1c06:	4f ef       	ldi	r20, 0xFF	; 255
    1c08:	5f ef       	ldi	r21, 0xFF	; 255
    1c0a:	ba 01       	movw	r22, r20
    1c0c:	40 93 37 12 	sts	0x1237, r20	; 0x801237 <xNextTaskUnblockTime>
    1c10:	50 93 38 12 	sts	0x1238, r21	; 0x801238 <xNextTaskUnblockTime+0x1>
    1c14:	60 93 39 12 	sts	0x1239, r22	; 0x801239 <xNextTaskUnblockTime+0x2>
    1c18:	70 93 3a 12 	sts	0x123A, r23	; 0x80123a <xNextTaskUnblockTime+0x3>
    1c1c:	9c c0       	rjmp	.+312    	; 0x1d56 <xTaskIncrementTick+0x1f6>
    1c1e:	e0 91 6d 12 	lds	r30, 0x126D	; 0x80126d <pxDelayedTaskList>
    1c22:	f0 91 6e 12 	lds	r31, 0x126E	; 0x80126e <pxDelayedTaskList+0x1>
    1c26:	07 80       	ldd	r0, Z+7	; 0x07
    1c28:	f0 85       	ldd	r31, Z+8	; 0x08
    1c2a:	e0 2d       	mov	r30, r0
    1c2c:	00 84       	ldd	r0, Z+8	; 0x08
    1c2e:	f1 85       	ldd	r31, Z+9	; 0x09
    1c30:	e0 2d       	mov	r30, r0
    1c32:	42 81       	ldd	r20, Z+2	; 0x02
    1c34:	53 81       	ldd	r21, Z+3	; 0x03
    1c36:	64 81       	ldd	r22, Z+4	; 0x04
    1c38:	75 81       	ldd	r23, Z+5	; 0x05
    1c3a:	c4 16       	cp	r12, r20
    1c3c:	d5 06       	cpc	r13, r21
    1c3e:	e6 06       	cpc	r14, r22
    1c40:	f7 06       	cpc	r15, r23
    1c42:	48 f4       	brcc	.+18     	; 0x1c56 <xTaskIncrementTick+0xf6>
    1c44:	40 93 37 12 	sts	0x1237, r20	; 0x801237 <xNextTaskUnblockTime>
    1c48:	50 93 38 12 	sts	0x1238, r21	; 0x801238 <xNextTaskUnblockTime+0x1>
    1c4c:	60 93 39 12 	sts	0x1239, r22	; 0x801239 <xNextTaskUnblockTime+0x2>
    1c50:	70 93 3a 12 	sts	0x123A, r23	; 0x80123a <xNextTaskUnblockTime+0x3>
    1c54:	80 c0       	rjmp	.+256    	; 0x1d56 <xTaskIncrementTick+0x1f6>
    1c56:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c58:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c5a:	c6 81       	ldd	r28, Z+6	; 0x06
    1c5c:	d7 81       	ldd	r29, Z+7	; 0x07
    1c5e:	20 85       	ldd	r18, Z+8	; 0x08
    1c60:	31 85       	ldd	r19, Z+9	; 0x09
    1c62:	3f 83       	std	Y+7, r19	; 0x07
    1c64:	2e 83       	std	Y+6, r18	; 0x06
    1c66:	c0 85       	ldd	r28, Z+8	; 0x08
    1c68:	d1 85       	ldd	r29, Z+9	; 0x09
    1c6a:	26 81       	ldd	r18, Z+6	; 0x06
    1c6c:	37 81       	ldd	r19, Z+7	; 0x07
    1c6e:	3d 83       	std	Y+5, r19	; 0x05
    1c70:	2c 83       	std	Y+4, r18	; 0x04
    1c72:	11 96       	adiw	r26, 0x01	; 1
    1c74:	4d 91       	ld	r20, X+
    1c76:	5c 91       	ld	r21, X
    1c78:	12 97       	sbiw	r26, 0x02	; 2
    1c7a:	9f 01       	movw	r18, r30
    1c7c:	2e 5f       	subi	r18, 0xFE	; 254
    1c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c80:	42 17       	cp	r20, r18
    1c82:	53 07       	cpc	r21, r19
    1c84:	31 f4       	brne	.+12     	; 0x1c92 <xTaskIncrementTick+0x132>
    1c86:	40 85       	ldd	r20, Z+8	; 0x08
    1c88:	51 85       	ldd	r21, Z+9	; 0x09
    1c8a:	12 96       	adiw	r26, 0x02	; 2
    1c8c:	5c 93       	st	X, r21
    1c8e:	4e 93       	st	-X, r20
    1c90:	11 97       	sbiw	r26, 0x01	; 1
    1c92:	15 86       	std	Z+13, r1	; 0x0d
    1c94:	14 86       	std	Z+12, r1	; 0x0c
    1c96:	9c 91       	ld	r25, X
    1c98:	91 50       	subi	r25, 0x01	; 1
    1c9a:	9c 93       	st	X, r25
    1c9c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1c9e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ca0:	10 97       	sbiw	r26, 0x00	; 0
    1ca2:	09 f1       	breq	.+66     	; 0x1ce6 <xTaskIncrementTick+0x186>
    1ca4:	c2 89       	ldd	r28, Z+18	; 0x12
    1ca6:	d3 89       	ldd	r29, Z+19	; 0x13
    1ca8:	44 89       	ldd	r20, Z+20	; 0x14
    1caa:	55 89       	ldd	r21, Z+21	; 0x15
    1cac:	5f 83       	std	Y+7, r21	; 0x07
    1cae:	4e 83       	std	Y+6, r20	; 0x06
    1cb0:	c4 89       	ldd	r28, Z+20	; 0x14
    1cb2:	d5 89       	ldd	r29, Z+21	; 0x15
    1cb4:	42 89       	ldd	r20, Z+18	; 0x12
    1cb6:	53 89       	ldd	r21, Z+19	; 0x13
    1cb8:	5d 83       	std	Y+5, r21	; 0x05
    1cba:	4c 83       	std	Y+4, r20	; 0x04
    1cbc:	11 96       	adiw	r26, 0x01	; 1
    1cbe:	6d 91       	ld	r22, X+
    1cc0:	7c 91       	ld	r23, X
    1cc2:	12 97       	sbiw	r26, 0x02	; 2
    1cc4:	af 01       	movw	r20, r30
    1cc6:	42 5f       	subi	r20, 0xF2	; 242
    1cc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cca:	64 17       	cp	r22, r20
    1ccc:	75 07       	cpc	r23, r21
    1cce:	31 f4       	brne	.+12     	; 0x1cdc <xTaskIncrementTick+0x17c>
    1cd0:	44 89       	ldd	r20, Z+20	; 0x14
    1cd2:	55 89       	ldd	r21, Z+21	; 0x15
    1cd4:	12 96       	adiw	r26, 0x02	; 2
    1cd6:	5c 93       	st	X, r21
    1cd8:	4e 93       	st	-X, r20
    1cda:	11 97       	sbiw	r26, 0x01	; 1
    1cdc:	11 8e       	std	Z+25, r1	; 0x19
    1cde:	10 8e       	std	Z+24, r1	; 0x18
    1ce0:	9c 91       	ld	r25, X
    1ce2:	91 50       	subi	r25, 0x01	; 1
    1ce4:	9c 93       	st	X, r25
    1ce6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ce8:	90 91 43 12 	lds	r25, 0x1243	; 0x801243 <uxTopReadyPriority>
    1cec:	9a 17       	cp	r25, r26
    1cee:	10 f4       	brcc	.+4      	; 0x1cf4 <xTaskIncrementTick+0x194>
    1cf0:	a0 93 43 12 	sts	0x1243, r26	; 0x801243 <uxTopReadyPriority>
    1cf4:	9b e0       	ldi	r25, 0x0B	; 11
    1cf6:	9a 9f       	mul	r25, r26
    1cf8:	d0 01       	movw	r26, r0
    1cfa:	11 24       	eor	r1, r1
    1cfc:	ab 57       	subi	r26, 0x7B	; 123
    1cfe:	bd 4e       	sbci	r27, 0xED	; 237
    1d00:	11 96       	adiw	r26, 0x01	; 1
    1d02:	0d 90       	ld	r0, X+
    1d04:	bc 91       	ld	r27, X
    1d06:	a0 2d       	mov	r26, r0
    1d08:	b7 83       	std	Z+7, r27	; 0x07
    1d0a:	a6 83       	std	Z+6, r26	; 0x06
    1d0c:	16 96       	adiw	r26, 0x06	; 6
    1d0e:	4d 91       	ld	r20, X+
    1d10:	5c 91       	ld	r21, X
    1d12:	17 97       	sbiw	r26, 0x07	; 7
    1d14:	51 87       	std	Z+9, r21	; 0x09
    1d16:	40 87       	std	Z+8, r20	; 0x08
    1d18:	16 96       	adiw	r26, 0x06	; 6
    1d1a:	cd 91       	ld	r28, X+
    1d1c:	dc 91       	ld	r29, X
    1d1e:	17 97       	sbiw	r26, 0x07	; 7
    1d20:	3d 83       	std	Y+5, r19	; 0x05
    1d22:	2c 83       	std	Y+4, r18	; 0x04
    1d24:	17 96       	adiw	r26, 0x07	; 7
    1d26:	3c 93       	st	X, r19
    1d28:	2e 93       	st	-X, r18
    1d2a:	16 97       	sbiw	r26, 0x06	; 6
    1d2c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d2e:	9a 9f       	mul	r25, r26
    1d30:	d0 01       	movw	r26, r0
    1d32:	11 24       	eor	r1, r1
    1d34:	ab 57       	subi	r26, 0x7B	; 123
    1d36:	bd 4e       	sbci	r27, 0xED	; 237
    1d38:	b5 87       	std	Z+13, r27	; 0x0d
    1d3a:	a4 87       	std	Z+12, r26	; 0x0c
    1d3c:	9c 91       	ld	r25, X
    1d3e:	9f 5f       	subi	r25, 0xFF	; 255
    1d40:	9c 93       	st	X, r25
    1d42:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d44:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    1d48:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    1d4c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d4e:	29 17       	cp	r18, r25
    1d50:	08 f0       	brcs	.+2      	; 0x1d54 <xTaskIncrementTick+0x1f4>
    1d52:	4f cf       	rjmp	.-354    	; 0x1bf2 <xTaskIncrementTick+0x92>
    1d54:	51 cf       	rjmp	.-350    	; 0x1bf8 <xTaskIncrementTick+0x98>
    1d56:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    1d5a:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    1d5e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1d60:	9b e0       	ldi	r25, 0x0B	; 11
    1d62:	e9 9f       	mul	r30, r25
    1d64:	f0 01       	movw	r30, r0
    1d66:	11 24       	eor	r1, r1
    1d68:	eb 57       	subi	r30, 0x7B	; 123
    1d6a:	fd 4e       	sbci	r31, 0xED	; 237
    1d6c:	90 81       	ld	r25, Z
    1d6e:	92 30       	cpi	r25, 0x02	; 2
    1d70:	08 f0       	brcs	.+2      	; 0x1d74 <xTaskIncrementTick+0x214>
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 91 3d 12 	lds	r25, 0x123D	; 0x80123d <xYieldPending>
    1d78:	91 11       	cpse	r25, r1
    1d7a:	16 c0       	rjmp	.+44     	; 0x1da8 <xTaskIncrementTick+0x248>
    1d7c:	16 c0       	rjmp	.+44     	; 0x1daa <xTaskIncrementTick+0x24a>
    1d7e:	80 91 3e 12 	lds	r24, 0x123E	; 0x80123e <xPendedTicks>
    1d82:	90 91 3f 12 	lds	r25, 0x123F	; 0x80123f <xPendedTicks+0x1>
    1d86:	a0 91 40 12 	lds	r26, 0x1240	; 0x801240 <xPendedTicks+0x2>
    1d8a:	b0 91 41 12 	lds	r27, 0x1241	; 0x801241 <xPendedTicks+0x3>
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	a1 1d       	adc	r26, r1
    1d92:	b1 1d       	adc	r27, r1
    1d94:	80 93 3e 12 	sts	0x123E, r24	; 0x80123e <xPendedTicks>
    1d98:	90 93 3f 12 	sts	0x123F, r25	; 0x80123f <xPendedTicks+0x1>
    1d9c:	a0 93 40 12 	sts	0x1240, r26	; 0x801240 <xPendedTicks+0x2>
    1da0:	b0 93 41 12 	sts	0x1241, r27	; 0x801241 <xPendedTicks+0x3>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	01 c0       	rjmp	.+2      	; 0x1daa <xTaskIncrementTick+0x24a>
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	ff 90       	pop	r15
    1db0:	ef 90       	pop	r14
    1db2:	df 90       	pop	r13
    1db4:	cf 90       	pop	r12
    1db6:	08 95       	ret

00001db8 <xTaskResumeAll>:
    1db8:	cf 92       	push	r12
    1dba:	df 92       	push	r13
    1dbc:	ef 92       	push	r14
    1dbe:	ff 92       	push	r15
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	0f 92       	push	r0
    1dca:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <uxSchedulerSuspended>
    1dce:	81 50       	subi	r24, 0x01	; 1
    1dd0:	80 93 34 12 	sts	0x1234, r24	; 0x801234 <uxSchedulerSuspended>
    1dd4:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <uxSchedulerSuspended>
    1dd8:	81 11       	cpse	r24, r1
    1dda:	be c0       	rjmp	.+380    	; 0x1f58 <xTaskResumeAll+0x1a0>
    1ddc:	80 91 48 12 	lds	r24, 0x1248	; 0x801248 <uxCurrentNumberOfTasks>
    1de0:	81 11       	cpse	r24, r1
    1de2:	88 c0       	rjmp	.+272    	; 0x1ef4 <xTaskResumeAll+0x13c>
    1de4:	bc c0       	rjmp	.+376    	; 0x1f5e <xTaskResumeAll+0x1a6>
    1de6:	e0 91 67 12 	lds	r30, 0x1267	; 0x801267 <xPendingReadyList+0x7>
    1dea:	f0 91 68 12 	lds	r31, 0x1268	; 0x801268 <xPendingReadyList+0x8>
    1dee:	00 84       	ldd	r0, Z+8	; 0x08
    1df0:	f1 85       	ldd	r31, Z+9	; 0x09
    1df2:	e0 2d       	mov	r30, r0
    1df4:	a0 8d       	ldd	r26, Z+24	; 0x18
    1df6:	b1 8d       	ldd	r27, Z+25	; 0x19
    1df8:	c2 89       	ldd	r28, Z+18	; 0x12
    1dfa:	d3 89       	ldd	r29, Z+19	; 0x13
    1dfc:	84 89       	ldd	r24, Z+20	; 0x14
    1dfe:	95 89       	ldd	r25, Z+21	; 0x15
    1e00:	9f 83       	std	Y+7, r25	; 0x07
    1e02:	8e 83       	std	Y+6, r24	; 0x06
    1e04:	c4 89       	ldd	r28, Z+20	; 0x14
    1e06:	d5 89       	ldd	r29, Z+21	; 0x15
    1e08:	82 89       	ldd	r24, Z+18	; 0x12
    1e0a:	93 89       	ldd	r25, Z+19	; 0x13
    1e0c:	9d 83       	std	Y+5, r25	; 0x05
    1e0e:	8c 83       	std	Y+4, r24	; 0x04
    1e10:	11 96       	adiw	r26, 0x01	; 1
    1e12:	2d 91       	ld	r18, X+
    1e14:	3c 91       	ld	r19, X
    1e16:	12 97       	sbiw	r26, 0x02	; 2
    1e18:	cf 01       	movw	r24, r30
    1e1a:	0e 96       	adiw	r24, 0x0e	; 14
    1e1c:	28 17       	cp	r18, r24
    1e1e:	39 07       	cpc	r19, r25
    1e20:	31 f4       	brne	.+12     	; 0x1e2e <xTaskResumeAll+0x76>
    1e22:	84 89       	ldd	r24, Z+20	; 0x14
    1e24:	95 89       	ldd	r25, Z+21	; 0x15
    1e26:	12 96       	adiw	r26, 0x02	; 2
    1e28:	9c 93       	st	X, r25
    1e2a:	8e 93       	st	-X, r24
    1e2c:	11 97       	sbiw	r26, 0x01	; 1
    1e2e:	11 8e       	std	Z+25, r1	; 0x19
    1e30:	10 8e       	std	Z+24, r1	; 0x18
    1e32:	8c 91       	ld	r24, X
    1e34:	81 50       	subi	r24, 0x01	; 1
    1e36:	8c 93       	st	X, r24
    1e38:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e3a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e3c:	c6 81       	ldd	r28, Z+6	; 0x06
    1e3e:	d7 81       	ldd	r29, Z+7	; 0x07
    1e40:	80 85       	ldd	r24, Z+8	; 0x08
    1e42:	91 85       	ldd	r25, Z+9	; 0x09
    1e44:	9f 83       	std	Y+7, r25	; 0x07
    1e46:	8e 83       	std	Y+6, r24	; 0x06
    1e48:	c0 85       	ldd	r28, Z+8	; 0x08
    1e4a:	d1 85       	ldd	r29, Z+9	; 0x09
    1e4c:	86 81       	ldd	r24, Z+6	; 0x06
    1e4e:	97 81       	ldd	r25, Z+7	; 0x07
    1e50:	9d 83       	std	Y+5, r25	; 0x05
    1e52:	8c 83       	std	Y+4, r24	; 0x04
    1e54:	11 96       	adiw	r26, 0x01	; 1
    1e56:	8d 91       	ld	r24, X+
    1e58:	9c 91       	ld	r25, X
    1e5a:	12 97       	sbiw	r26, 0x02	; 2
    1e5c:	9f 01       	movw	r18, r30
    1e5e:	2e 5f       	subi	r18, 0xFE	; 254
    1e60:	3f 4f       	sbci	r19, 0xFF	; 255
    1e62:	82 17       	cp	r24, r18
    1e64:	93 07       	cpc	r25, r19
    1e66:	31 f4       	brne	.+12     	; 0x1e74 <xTaskResumeAll+0xbc>
    1e68:	80 85       	ldd	r24, Z+8	; 0x08
    1e6a:	91 85       	ldd	r25, Z+9	; 0x09
    1e6c:	12 96       	adiw	r26, 0x02	; 2
    1e6e:	9c 93       	st	X, r25
    1e70:	8e 93       	st	-X, r24
    1e72:	11 97       	sbiw	r26, 0x01	; 1
    1e74:	15 86       	std	Z+13, r1	; 0x0d
    1e76:	14 86       	std	Z+12, r1	; 0x0c
    1e78:	8c 91       	ld	r24, X
    1e7a:	81 50       	subi	r24, 0x01	; 1
    1e7c:	8c 93       	st	X, r24
    1e7e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e80:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <uxTopReadyPriority>
    1e84:	8a 17       	cp	r24, r26
    1e86:	10 f4       	brcc	.+4      	; 0x1e8c <xTaskResumeAll+0xd4>
    1e88:	a0 93 43 12 	sts	0x1243, r26	; 0x801243 <uxTopReadyPriority>
    1e8c:	8b e0       	ldi	r24, 0x0B	; 11
    1e8e:	8a 9f       	mul	r24, r26
    1e90:	d0 01       	movw	r26, r0
    1e92:	11 24       	eor	r1, r1
    1e94:	ab 57       	subi	r26, 0x7B	; 123
    1e96:	bd 4e       	sbci	r27, 0xED	; 237
    1e98:	11 96       	adiw	r26, 0x01	; 1
    1e9a:	0d 90       	ld	r0, X+
    1e9c:	bc 91       	ld	r27, X
    1e9e:	a0 2d       	mov	r26, r0
    1ea0:	b7 83       	std	Z+7, r27	; 0x07
    1ea2:	a6 83       	std	Z+6, r26	; 0x06
    1ea4:	16 96       	adiw	r26, 0x06	; 6
    1ea6:	4d 91       	ld	r20, X+
    1ea8:	5c 91       	ld	r21, X
    1eaa:	17 97       	sbiw	r26, 0x07	; 7
    1eac:	51 87       	std	Z+9, r21	; 0x09
    1eae:	40 87       	std	Z+8, r20	; 0x08
    1eb0:	16 96       	adiw	r26, 0x06	; 6
    1eb2:	cd 91       	ld	r28, X+
    1eb4:	dc 91       	ld	r29, X
    1eb6:	17 97       	sbiw	r26, 0x07	; 7
    1eb8:	3d 83       	std	Y+5, r19	; 0x05
    1eba:	2c 83       	std	Y+4, r18	; 0x04
    1ebc:	17 96       	adiw	r26, 0x07	; 7
    1ebe:	3c 93       	st	X, r19
    1ec0:	2e 93       	st	-X, r18
    1ec2:	16 97       	sbiw	r26, 0x06	; 6
    1ec4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ec6:	8a 9f       	mul	r24, r26
    1ec8:	d0 01       	movw	r26, r0
    1eca:	11 24       	eor	r1, r1
    1ecc:	ab 57       	subi	r26, 0x7B	; 123
    1ece:	bd 4e       	sbci	r27, 0xED	; 237
    1ed0:	b5 87       	std	Z+13, r27	; 0x0d
    1ed2:	a4 87       	std	Z+12, r26	; 0x0c
    1ed4:	8c 91       	ld	r24, X
    1ed6:	8f 5f       	subi	r24, 0xFF	; 255
    1ed8:	8c 93       	st	X, r24
    1eda:	92 8d       	ldd	r25, Z+26	; 0x1a
    1edc:	a0 91 f3 12 	lds	r26, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    1ee0:	b0 91 f4 12 	lds	r27, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    1ee4:	5a 96       	adiw	r26, 0x1a	; 26
    1ee6:	8c 91       	ld	r24, X
    1ee8:	98 17       	cp	r25, r24
    1eea:	30 f0       	brcs	.+12     	; 0x1ef8 <xTaskResumeAll+0x140>
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	80 93 3d 12 	sts	0x123D, r24	; 0x80123d <xYieldPending>
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <xTaskResumeAll+0x140>
    1ef4:	e0 e0       	ldi	r30, 0x00	; 0
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 91 60 12 	lds	r24, 0x1260	; 0x801260 <xPendingReadyList>
    1efc:	81 11       	cpse	r24, r1
    1efe:	73 cf       	rjmp	.-282    	; 0x1de6 <xTaskResumeAll+0x2e>
    1f00:	ef 2b       	or	r30, r31
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <xTaskResumeAll+0x14e>
    1f04:	7d db       	rcall	.-2310   	; 0x1600 <prvResetNextTaskUnblockTime>
    1f06:	c0 90 3e 12 	lds	r12, 0x123E	; 0x80123e <xPendedTicks>
    1f0a:	d0 90 3f 12 	lds	r13, 0x123F	; 0x80123f <xPendedTicks+0x1>
    1f0e:	e0 90 40 12 	lds	r14, 0x1240	; 0x801240 <xPendedTicks+0x2>
    1f12:	f0 90 41 12 	lds	r15, 0x1241	; 0x801241 <xPendedTicks+0x3>
    1f16:	c1 14       	cp	r12, r1
    1f18:	d1 04       	cpc	r13, r1
    1f1a:	e1 04       	cpc	r14, r1
    1f1c:	f1 04       	cpc	r15, r1
    1f1e:	a1 f0       	breq	.+40     	; 0x1f48 <xTaskResumeAll+0x190>
    1f20:	1f de       	rcall	.-962    	; 0x1b60 <xTaskIncrementTick>
    1f22:	88 23       	and	r24, r24
    1f24:	19 f0       	breq	.+6      	; 0x1f2c <xTaskResumeAll+0x174>
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	80 93 3d 12 	sts	0x123D, r24	; 0x80123d <xYieldPending>
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	c8 1a       	sub	r12, r24
    1f30:	d1 08       	sbc	r13, r1
    1f32:	e1 08       	sbc	r14, r1
    1f34:	f1 08       	sbc	r15, r1
    1f36:	a1 f7       	brne	.-24     	; 0x1f20 <xTaskResumeAll+0x168>
    1f38:	10 92 3e 12 	sts	0x123E, r1	; 0x80123e <xPendedTicks>
    1f3c:	10 92 3f 12 	sts	0x123F, r1	; 0x80123f <xPendedTicks+0x1>
    1f40:	10 92 40 12 	sts	0x1240, r1	; 0x801240 <xPendedTicks+0x2>
    1f44:	10 92 41 12 	sts	0x1241, r1	; 0x801241 <xPendedTicks+0x3>
    1f48:	80 91 3d 12 	lds	r24, 0x123D	; 0x80123d <xYieldPending>
    1f4c:	88 23       	and	r24, r24
    1f4e:	31 f0       	breq	.+12     	; 0x1f5c <xTaskResumeAll+0x1a4>
    1f50:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	03 c0       	rjmp	.+6      	; 0x1f5e <xTaskResumeAll+0x1a6>
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	01 c0       	rjmp	.+2      	; 0x1f5e <xTaskResumeAll+0x1a6>
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	0f 90       	pop	r0
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	ff 90       	pop	r15
    1f68:	ef 90       	pop	r14
    1f6a:	df 90       	pop	r13
    1f6c:	cf 90       	pop	r12
    1f6e:	08 95       	ret

00001f70 <xTaskDelayUntil>:
    1f70:	8f 92       	push	r8
    1f72:	9f 92       	push	r9
    1f74:	af 92       	push	r10
    1f76:	bf 92       	push	r11
    1f78:	cf 92       	push	r12
    1f7a:	df 92       	push	r13
    1f7c:	ef 92       	push	r14
    1f7e:	ff 92       	push	r15
    1f80:	1f 93       	push	r17
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	ec 01       	movw	r28, r24
    1f88:	6a 01       	movw	r12, r20
    1f8a:	7b 01       	movw	r14, r22
    1f8c:	d5 dd       	rcall	.-1110   	; 0x1b38 <vTaskSuspendAll>
    1f8e:	80 90 44 12 	lds	r8, 0x1244	; 0x801244 <xTickCount>
    1f92:	90 90 45 12 	lds	r9, 0x1245	; 0x801245 <xTickCount+0x1>
    1f96:	a0 90 46 12 	lds	r10, 0x1246	; 0x801246 <xTickCount+0x2>
    1f9a:	b0 90 47 12 	lds	r11, 0x1247	; 0x801247 <xTickCount+0x3>
    1f9e:	88 81       	ld	r24, Y
    1fa0:	99 81       	ldd	r25, Y+1	; 0x01
    1fa2:	aa 81       	ldd	r26, Y+2	; 0x02
    1fa4:	bb 81       	ldd	r27, Y+3	; 0x03
    1fa6:	ac 01       	movw	r20, r24
    1fa8:	bd 01       	movw	r22, r26
    1faa:	4c 0d       	add	r20, r12
    1fac:	5d 1d       	adc	r21, r13
    1fae:	6e 1d       	adc	r22, r14
    1fb0:	7f 1d       	adc	r23, r15
    1fb2:	88 16       	cp	r8, r24
    1fb4:	99 06       	cpc	r9, r25
    1fb6:	aa 06       	cpc	r10, r26
    1fb8:	bb 06       	cpc	r11, r27
    1fba:	60 f4       	brcc	.+24     	; 0x1fd4 <xTaskDelayUntil+0x64>
    1fbc:	48 17       	cp	r20, r24
    1fbe:	59 07       	cpc	r21, r25
    1fc0:	6a 07       	cpc	r22, r26
    1fc2:	7b 07       	cpc	r23, r27
    1fc4:	98 f4       	brcc	.+38     	; 0x1fec <xTaskDelayUntil+0x7c>
    1fc6:	84 16       	cp	r8, r20
    1fc8:	95 06       	cpc	r9, r21
    1fca:	a6 06       	cpc	r10, r22
    1fcc:	b7 06       	cpc	r11, r23
    1fce:	80 f0       	brcs	.+32     	; 0x1ff0 <xTaskDelayUntil+0x80>
    1fd0:	10 e0       	ldi	r17, 0x00	; 0
    1fd2:	13 c0       	rjmp	.+38     	; 0x1ffa <xTaskDelayUntil+0x8a>
    1fd4:	48 17       	cp	r20, r24
    1fd6:	59 07       	cpc	r21, r25
    1fd8:	6a 07       	cpc	r22, r26
    1fda:	7b 07       	cpc	r23, r27
    1fdc:	58 f0       	brcs	.+22     	; 0x1ff4 <xTaskDelayUntil+0x84>
    1fde:	84 16       	cp	r8, r20
    1fe0:	95 06       	cpc	r9, r21
    1fe2:	a6 06       	cpc	r10, r22
    1fe4:	b7 06       	cpc	r11, r23
    1fe6:	40 f0       	brcs	.+16     	; 0x1ff8 <xTaskDelayUntil+0x88>
    1fe8:	10 e0       	ldi	r17, 0x00	; 0
    1fea:	07 c0       	rjmp	.+14     	; 0x1ffa <xTaskDelayUntil+0x8a>
    1fec:	10 e0       	ldi	r17, 0x00	; 0
    1fee:	05 c0       	rjmp	.+10     	; 0x1ffa <xTaskDelayUntil+0x8a>
    1ff0:	11 e0       	ldi	r17, 0x01	; 1
    1ff2:	03 c0       	rjmp	.+6      	; 0x1ffa <xTaskDelayUntil+0x8a>
    1ff4:	11 e0       	ldi	r17, 0x01	; 1
    1ff6:	01 c0       	rjmp	.+2      	; 0x1ffa <xTaskDelayUntil+0x8a>
    1ff8:	11 e0       	ldi	r17, 0x01	; 1
    1ffa:	48 83       	st	Y, r20
    1ffc:	59 83       	std	Y+1, r21	; 0x01
    1ffe:	6a 83       	std	Y+2, r22	; 0x02
    2000:	7b 83       	std	Y+3, r23	; 0x03
    2002:	11 23       	and	r17, r17
    2004:	41 f0       	breq	.+16     	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
    2006:	cb 01       	movw	r24, r22
    2008:	ba 01       	movw	r22, r20
    200a:	68 19       	sub	r22, r8
    200c:	79 09       	sbc	r23, r9
    200e:	8a 09       	sbc	r24, r10
    2010:	9b 09       	sbc	r25, r11
    2012:	40 e0       	ldi	r20, 0x00	; 0
    2014:	6b dc       	rcall	.-1834   	; 0x18ec <prvAddCurrentTaskToDelayedList>
    2016:	d0 de       	rcall	.-608    	; 0x1db8 <xTaskResumeAll>
    2018:	81 11       	cpse	r24, r1
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <__DATA_REGION_LENGTH__+0x20>
    201c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
    2020:	81 2f       	mov	r24, r17
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	1f 91       	pop	r17
    2028:	ff 90       	pop	r15
    202a:	ef 90       	pop	r14
    202c:	df 90       	pop	r13
    202e:	cf 90       	pop	r12
    2030:	bf 90       	pop	r11
    2032:	af 90       	pop	r10
    2034:	9f 90       	pop	r9
    2036:	8f 90       	pop	r8
    2038:	08 95       	ret

0000203a <vTaskDelay>:
    203a:	cf 92       	push	r12
    203c:	df 92       	push	r13
    203e:	ef 92       	push	r14
    2040:	ff 92       	push	r15
    2042:	6b 01       	movw	r12, r22
    2044:	7c 01       	movw	r14, r24
    2046:	67 2b       	or	r22, r23
    2048:	68 2b       	or	r22, r24
    204a:	69 2b       	or	r22, r25
    204c:	39 f0       	breq	.+14     	; 0x205c <vTaskDelay+0x22>
    204e:	74 dd       	rcall	.-1304   	; 0x1b38 <vTaskSuspendAll>
    2050:	40 e0       	ldi	r20, 0x00	; 0
    2052:	c7 01       	movw	r24, r14
    2054:	b6 01       	movw	r22, r12
    2056:	4a dc       	rcall	.-1900   	; 0x18ec <prvAddCurrentTaskToDelayedList>
    2058:	af de       	rcall	.-674    	; 0x1db8 <xTaskResumeAll>
    205a:	01 c0       	rjmp	.+2      	; 0x205e <vTaskDelay+0x24>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	81 11       	cpse	r24, r1
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <vTaskDelay+0x2c>
    2062:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
    2066:	ff 90       	pop	r15
    2068:	ef 90       	pop	r14
    206a:	df 90       	pop	r13
    206c:	cf 90       	pop	r12
    206e:	08 95       	ret

00002070 <vTaskSwitchContext>:
    2070:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <uxSchedulerSuspended>
    2074:	88 23       	and	r24, r24
    2076:	21 f0       	breq	.+8      	; 0x2080 <vTaskSwitchContext+0x10>
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	80 93 3d 12 	sts	0x123D, r24	; 0x80123d <xYieldPending>
    207e:	08 95       	ret
    2080:	10 92 3d 12 	sts	0x123D, r1	; 0x80123d <xYieldPending>
    2084:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    2088:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    208c:	20 81       	ld	r18, Z
    208e:	31 81       	ldd	r19, Z+1	; 0x01
    2090:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    2094:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    2098:	83 8d       	ldd	r24, Z+27	; 0x1b
    209a:	94 8d       	ldd	r25, Z+28	; 0x1c
    209c:	82 17       	cp	r24, r18
    209e:	93 07       	cpc	r25, r19
    20a0:	60 f0       	brcs	.+24     	; 0x20ba <vTaskSwitchContext+0x4a>
    20a2:	60 91 f3 12 	lds	r22, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    20a6:	70 91 f4 12 	lds	r23, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    20aa:	63 5e       	subi	r22, 0xE3	; 227
    20ac:	7f 4f       	sbci	r23, 0xFF	; 255
    20ae:	80 91 f3 12 	lds	r24, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    20b2:	90 91 f4 12 	lds	r25, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    20b6:	0e 94 96 19 	call	0x332c	; 0x332c <vApplicationStackOverflowHook>
    20ba:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <uxTopReadyPriority>
    20be:	01 c0       	rjmp	.+2      	; 0x20c2 <vTaskSwitchContext+0x52>
    20c0:	81 50       	subi	r24, 0x01	; 1
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	9b e0       	ldi	r25, 0x0B	; 11
    20c8:	92 9f       	mul	r25, r18
    20ca:	f0 01       	movw	r30, r0
    20cc:	93 9f       	mul	r25, r19
    20ce:	f0 0d       	add	r31, r0
    20d0:	11 24       	eor	r1, r1
    20d2:	eb 57       	subi	r30, 0x7B	; 123
    20d4:	fd 4e       	sbci	r31, 0xED	; 237
    20d6:	90 81       	ld	r25, Z
    20d8:	99 23       	and	r25, r25
    20da:	91 f3       	breq	.-28     	; 0x20c0 <vTaskSwitchContext+0x50>
    20dc:	9b e0       	ldi	r25, 0x0B	; 11
    20de:	92 9f       	mul	r25, r18
    20e0:	a0 01       	movw	r20, r0
    20e2:	93 9f       	mul	r25, r19
    20e4:	50 0d       	add	r21, r0
    20e6:	11 24       	eor	r1, r1
    20e8:	df 01       	movw	r26, r30
    20ea:	01 80       	ldd	r0, Z+1	; 0x01
    20ec:	f2 81       	ldd	r31, Z+2	; 0x02
    20ee:	e0 2d       	mov	r30, r0
    20f0:	04 80       	ldd	r0, Z+4	; 0x04
    20f2:	f5 81       	ldd	r31, Z+5	; 0x05
    20f4:	e0 2d       	mov	r30, r0
    20f6:	12 96       	adiw	r26, 0x02	; 2
    20f8:	fc 93       	st	X, r31
    20fa:	ee 93       	st	-X, r30
    20fc:	11 97       	sbiw	r26, 0x01	; 1
    20fe:	48 57       	subi	r20, 0x78	; 120
    2100:	5d 4e       	sbci	r21, 0xED	; 237
    2102:	e4 17       	cp	r30, r20
    2104:	f5 07       	cpc	r31, r21
    2106:	29 f4       	brne	.+10     	; 0x2112 <vTaskSwitchContext+0xa2>
    2108:	44 81       	ldd	r20, Z+4	; 0x04
    210a:	55 81       	ldd	r21, Z+5	; 0x05
    210c:	fd 01       	movw	r30, r26
    210e:	52 83       	std	Z+2, r21	; 0x02
    2110:	41 83       	std	Z+1, r20	; 0x01
    2112:	9b e0       	ldi	r25, 0x0B	; 11
    2114:	92 9f       	mul	r25, r18
    2116:	f0 01       	movw	r30, r0
    2118:	93 9f       	mul	r25, r19
    211a:	f0 0d       	add	r31, r0
    211c:	11 24       	eor	r1, r1
    211e:	eb 57       	subi	r30, 0x7B	; 123
    2120:	fd 4e       	sbci	r31, 0xED	; 237
    2122:	01 80       	ldd	r0, Z+1	; 0x01
    2124:	f2 81       	ldd	r31, Z+2	; 0x02
    2126:	e0 2d       	mov	r30, r0
    2128:	20 85       	ldd	r18, Z+8	; 0x08
    212a:	31 85       	ldd	r19, Z+9	; 0x09
    212c:	30 93 f4 12 	sts	0x12F4, r19	; 0x8012f4 <pxCurrentTCB+0x1>
    2130:	20 93 f3 12 	sts	0x12F3, r18	; 0x8012f3 <pxCurrentTCB>
    2134:	80 93 43 12 	sts	0x1243, r24	; 0x801243 <uxTopReadyPriority>
    2138:	08 95       	ret

0000213a <vTaskPlaceOnEventList>:
    213a:	cf 92       	push	r12
    213c:	df 92       	push	r13
    213e:	ef 92       	push	r14
    2140:	ff 92       	push	r15
    2142:	6a 01       	movw	r12, r20
    2144:	7b 01       	movw	r14, r22
    2146:	60 91 f3 12 	lds	r22, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    214a:	70 91 f4 12 	lds	r23, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    214e:	62 5f       	subi	r22, 0xF2	; 242
    2150:	7f 4f       	sbci	r23, 0xFF	; 255
    2152:	0e 94 ba 02 	call	0x574	; 0x574 <vListInsert>
    2156:	41 e0       	ldi	r20, 0x01	; 1
    2158:	c7 01       	movw	r24, r14
    215a:	b6 01       	movw	r22, r12
    215c:	c7 db       	rcall	.-2162   	; 0x18ec <prvAddCurrentTaskToDelayedList>
    215e:	ff 90       	pop	r15
    2160:	ef 90       	pop	r14
    2162:	df 90       	pop	r13
    2164:	cf 90       	pop	r12
    2166:	08 95       	ret

00002168 <vTaskPlaceOnEventListRestricted>:
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	fc 01       	movw	r30, r24
    216e:	cb 01       	movw	r24, r22
    2170:	ba 01       	movw	r22, r20
    2172:	a1 81       	ldd	r26, Z+1	; 0x01
    2174:	b2 81       	ldd	r27, Z+2	; 0x02
    2176:	c0 91 f3 12 	lds	r28, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    217a:	d0 91 f4 12 	lds	r29, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    217e:	bb 8b       	std	Y+19, r27	; 0x13
    2180:	aa 8b       	std	Y+18, r26	; 0x12
    2182:	c0 91 f3 12 	lds	r28, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    2186:	d0 91 f4 12 	lds	r29, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    218a:	16 96       	adiw	r26, 0x06	; 6
    218c:	4d 91       	ld	r20, X+
    218e:	5c 91       	ld	r21, X
    2190:	17 97       	sbiw	r26, 0x07	; 7
    2192:	5d 8b       	std	Y+21, r21	; 0x15
    2194:	4c 8b       	std	Y+20, r20	; 0x14
    2196:	16 96       	adiw	r26, 0x06	; 6
    2198:	cd 91       	ld	r28, X+
    219a:	dc 91       	ld	r29, X
    219c:	17 97       	sbiw	r26, 0x07	; 7
    219e:	40 91 f3 12 	lds	r20, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    21a2:	50 91 f4 12 	lds	r21, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    21a6:	42 5f       	subi	r20, 0xF2	; 242
    21a8:	5f 4f       	sbci	r21, 0xFF	; 255
    21aa:	5d 83       	std	Y+5, r21	; 0x05
    21ac:	4c 83       	std	Y+4, r20	; 0x04
    21ae:	40 91 f3 12 	lds	r20, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    21b2:	50 91 f4 12 	lds	r21, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    21b6:	42 5f       	subi	r20, 0xF2	; 242
    21b8:	5f 4f       	sbci	r21, 0xFF	; 255
    21ba:	17 96       	adiw	r26, 0x07	; 7
    21bc:	5c 93       	st	X, r21
    21be:	4e 93       	st	-X, r20
    21c0:	16 97       	sbiw	r26, 0x06	; 6
    21c2:	a0 91 f3 12 	lds	r26, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    21c6:	b0 91 f4 12 	lds	r27, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    21ca:	59 96       	adiw	r26, 0x19	; 25
    21cc:	fc 93       	st	X, r31
    21ce:	ee 93       	st	-X, r30
    21d0:	58 97       	sbiw	r26, 0x18	; 24
    21d2:	30 81       	ld	r19, Z
    21d4:	3f 5f       	subi	r19, 0xFF	; 255
    21d6:	30 83       	st	Z, r19
    21d8:	22 23       	and	r18, r18
    21da:	19 f0       	breq	.+6      	; 0x21e2 <vTaskPlaceOnEventListRestricted+0x7a>
    21dc:	6f ef       	ldi	r22, 0xFF	; 255
    21de:	7f ef       	ldi	r23, 0xFF	; 255
    21e0:	cb 01       	movw	r24, r22
    21e2:	42 2f       	mov	r20, r18
    21e4:	83 db       	rcall	.-2298   	; 0x18ec <prvAddCurrentTaskToDelayedList>
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	08 95       	ret

000021ec <xTaskRemoveFromEventList>:
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	dc 01       	movw	r26, r24
    21f2:	17 96       	adiw	r26, 0x07	; 7
    21f4:	ed 91       	ld	r30, X+
    21f6:	fc 91       	ld	r31, X
    21f8:	18 97       	sbiw	r26, 0x08	; 8
    21fa:	00 84       	ldd	r0, Z+8	; 0x08
    21fc:	f1 85       	ldd	r31, Z+9	; 0x09
    21fe:	e0 2d       	mov	r30, r0
    2200:	a0 8d       	ldd	r26, Z+24	; 0x18
    2202:	b1 8d       	ldd	r27, Z+25	; 0x19
    2204:	c2 89       	ldd	r28, Z+18	; 0x12
    2206:	d3 89       	ldd	r29, Z+19	; 0x13
    2208:	84 89       	ldd	r24, Z+20	; 0x14
    220a:	95 89       	ldd	r25, Z+21	; 0x15
    220c:	9f 83       	std	Y+7, r25	; 0x07
    220e:	8e 83       	std	Y+6, r24	; 0x06
    2210:	c4 89       	ldd	r28, Z+20	; 0x14
    2212:	d5 89       	ldd	r29, Z+21	; 0x15
    2214:	82 89       	ldd	r24, Z+18	; 0x12
    2216:	93 89       	ldd	r25, Z+19	; 0x13
    2218:	9d 83       	std	Y+5, r25	; 0x05
    221a:	8c 83       	std	Y+4, r24	; 0x04
    221c:	11 96       	adiw	r26, 0x01	; 1
    221e:	8d 91       	ld	r24, X+
    2220:	9c 91       	ld	r25, X
    2222:	12 97       	sbiw	r26, 0x02	; 2
    2224:	9f 01       	movw	r18, r30
    2226:	22 5f       	subi	r18, 0xF2	; 242
    2228:	3f 4f       	sbci	r19, 0xFF	; 255
    222a:	82 17       	cp	r24, r18
    222c:	93 07       	cpc	r25, r19
    222e:	31 f4       	brne	.+12     	; 0x223c <__stack+0x3d>
    2230:	84 89       	ldd	r24, Z+20	; 0x14
    2232:	95 89       	ldd	r25, Z+21	; 0x15
    2234:	12 96       	adiw	r26, 0x02	; 2
    2236:	9c 93       	st	X, r25
    2238:	8e 93       	st	-X, r24
    223a:	11 97       	sbiw	r26, 0x01	; 1
    223c:	11 8e       	std	Z+25, r1	; 0x19
    223e:	10 8e       	std	Z+24, r1	; 0x18
    2240:	8c 91       	ld	r24, X
    2242:	81 50       	subi	r24, 0x01	; 1
    2244:	8c 93       	st	X, r24
    2246:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <uxSchedulerSuspended>
    224a:	81 11       	cpse	r24, r1
    224c:	52 c0       	rjmp	.+164    	; 0x22f2 <__stack+0xf3>
    224e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2250:	b5 85       	ldd	r27, Z+13	; 0x0d
    2252:	c6 81       	ldd	r28, Z+6	; 0x06
    2254:	d7 81       	ldd	r29, Z+7	; 0x07
    2256:	80 85       	ldd	r24, Z+8	; 0x08
    2258:	91 85       	ldd	r25, Z+9	; 0x09
    225a:	9f 83       	std	Y+7, r25	; 0x07
    225c:	8e 83       	std	Y+6, r24	; 0x06
    225e:	c0 85       	ldd	r28, Z+8	; 0x08
    2260:	d1 85       	ldd	r29, Z+9	; 0x09
    2262:	86 81       	ldd	r24, Z+6	; 0x06
    2264:	97 81       	ldd	r25, Z+7	; 0x07
    2266:	9d 83       	std	Y+5, r25	; 0x05
    2268:	8c 83       	std	Y+4, r24	; 0x04
    226a:	11 96       	adiw	r26, 0x01	; 1
    226c:	8d 91       	ld	r24, X+
    226e:	9c 91       	ld	r25, X
    2270:	12 97       	sbiw	r26, 0x02	; 2
    2272:	9f 01       	movw	r18, r30
    2274:	2e 5f       	subi	r18, 0xFE	; 254
    2276:	3f 4f       	sbci	r19, 0xFF	; 255
    2278:	82 17       	cp	r24, r18
    227a:	93 07       	cpc	r25, r19
    227c:	31 f4       	brne	.+12     	; 0x228a <__stack+0x8b>
    227e:	80 85       	ldd	r24, Z+8	; 0x08
    2280:	91 85       	ldd	r25, Z+9	; 0x09
    2282:	12 96       	adiw	r26, 0x02	; 2
    2284:	9c 93       	st	X, r25
    2286:	8e 93       	st	-X, r24
    2288:	11 97       	sbiw	r26, 0x01	; 1
    228a:	15 86       	std	Z+13, r1	; 0x0d
    228c:	14 86       	std	Z+12, r1	; 0x0c
    228e:	8c 91       	ld	r24, X
    2290:	81 50       	subi	r24, 0x01	; 1
    2292:	8c 93       	st	X, r24
    2294:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2296:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <uxTopReadyPriority>
    229a:	8a 17       	cp	r24, r26
    229c:	10 f4       	brcc	.+4      	; 0x22a2 <__stack+0xa3>
    229e:	a0 93 43 12 	sts	0x1243, r26	; 0x801243 <uxTopReadyPriority>
    22a2:	8b e0       	ldi	r24, 0x0B	; 11
    22a4:	8a 9f       	mul	r24, r26
    22a6:	d0 01       	movw	r26, r0
    22a8:	11 24       	eor	r1, r1
    22aa:	ab 57       	subi	r26, 0x7B	; 123
    22ac:	bd 4e       	sbci	r27, 0xED	; 237
    22ae:	11 96       	adiw	r26, 0x01	; 1
    22b0:	0d 90       	ld	r0, X+
    22b2:	bc 91       	ld	r27, X
    22b4:	a0 2d       	mov	r26, r0
    22b6:	b7 83       	std	Z+7, r27	; 0x07
    22b8:	a6 83       	std	Z+6, r26	; 0x06
    22ba:	16 96       	adiw	r26, 0x06	; 6
    22bc:	4d 91       	ld	r20, X+
    22be:	5c 91       	ld	r21, X
    22c0:	17 97       	sbiw	r26, 0x07	; 7
    22c2:	51 87       	std	Z+9, r21	; 0x09
    22c4:	40 87       	std	Z+8, r20	; 0x08
    22c6:	16 96       	adiw	r26, 0x06	; 6
    22c8:	cd 91       	ld	r28, X+
    22ca:	dc 91       	ld	r29, X
    22cc:	17 97       	sbiw	r26, 0x07	; 7
    22ce:	3d 83       	std	Y+5, r19	; 0x05
    22d0:	2c 83       	std	Y+4, r18	; 0x04
    22d2:	17 96       	adiw	r26, 0x07	; 7
    22d4:	3c 93       	st	X, r19
    22d6:	2e 93       	st	-X, r18
    22d8:	16 97       	sbiw	r26, 0x06	; 6
    22da:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22dc:	8a 9f       	mul	r24, r26
    22de:	d0 01       	movw	r26, r0
    22e0:	11 24       	eor	r1, r1
    22e2:	ab 57       	subi	r26, 0x7B	; 123
    22e4:	bd 4e       	sbci	r27, 0xED	; 237
    22e6:	b5 87       	std	Z+13, r27	; 0x0d
    22e8:	a4 87       	std	Z+12, r26	; 0x0c
    22ea:	8c 91       	ld	r24, X
    22ec:	8f 5f       	subi	r24, 0xFF	; 255
    22ee:	8c 93       	st	X, r24
    22f0:	1c c0       	rjmp	.+56     	; 0x232a <__stack+0x12b>
    22f2:	40 e6       	ldi	r20, 0x60	; 96
    22f4:	52 e1       	ldi	r21, 0x12	; 18
    22f6:	da 01       	movw	r26, r20
    22f8:	11 96       	adiw	r26, 0x01	; 1
    22fa:	cd 91       	ld	r28, X+
    22fc:	dc 91       	ld	r29, X
    22fe:	12 97       	sbiw	r26, 0x02	; 2
    2300:	d3 8b       	std	Z+19, r29	; 0x13
    2302:	c2 8b       	std	Z+18, r28	; 0x12
    2304:	8e 81       	ldd	r24, Y+6	; 0x06
    2306:	9f 81       	ldd	r25, Y+7	; 0x07
    2308:	95 8b       	std	Z+21, r25	; 0x15
    230a:	84 8b       	std	Z+20, r24	; 0x14
    230c:	8e 81       	ldd	r24, Y+6	; 0x06
    230e:	9f 81       	ldd	r25, Y+7	; 0x07
    2310:	dc 01       	movw	r26, r24
    2312:	15 96       	adiw	r26, 0x05	; 5
    2314:	3c 93       	st	X, r19
    2316:	2e 93       	st	-X, r18
    2318:	14 97       	sbiw	r26, 0x04	; 4
    231a:	3f 83       	std	Y+7, r19	; 0x07
    231c:	2e 83       	std	Y+6, r18	; 0x06
    231e:	51 8f       	std	Z+25, r21	; 0x19
    2320:	40 8f       	std	Z+24, r20	; 0x18
    2322:	da 01       	movw	r26, r20
    2324:	8c 91       	ld	r24, X
    2326:	8f 5f       	subi	r24, 0xFF	; 255
    2328:	8c 93       	st	X, r24
    232a:	92 8d       	ldd	r25, Z+26	; 0x1a
    232c:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    2330:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    2334:	82 8d       	ldd	r24, Z+26	; 0x1a
    2336:	89 17       	cp	r24, r25
    2338:	20 f4       	brcc	.+8      	; 0x2342 <__stack+0x143>
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	80 93 3d 12 	sts	0x123D, r24	; 0x80123d <xYieldPending>
    2340:	01 c0       	rjmp	.+2      	; 0x2344 <__stack+0x145>
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	08 95       	ret

0000234a <vTaskSetTimeOutState>:
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	0f 92       	push	r0
    2350:	20 91 3c 12 	lds	r18, 0x123C	; 0x80123c <xNumOfOverflows>
    2354:	fc 01       	movw	r30, r24
    2356:	20 83       	st	Z, r18
    2358:	40 91 44 12 	lds	r20, 0x1244	; 0x801244 <xTickCount>
    235c:	50 91 45 12 	lds	r21, 0x1245	; 0x801245 <xTickCount+0x1>
    2360:	60 91 46 12 	lds	r22, 0x1246	; 0x801246 <xTickCount+0x2>
    2364:	70 91 47 12 	lds	r23, 0x1247	; 0x801247 <xTickCount+0x3>
    2368:	41 83       	std	Z+1, r20	; 0x01
    236a:	52 83       	std	Z+2, r21	; 0x02
    236c:	63 83       	std	Z+3, r22	; 0x03
    236e:	74 83       	std	Z+4, r23	; 0x04
    2370:	0f 90       	pop	r0
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	08 95       	ret

00002376 <vTaskInternalSetTimeOutState>:
    2376:	20 91 3c 12 	lds	r18, 0x123C	; 0x80123c <xNumOfOverflows>
    237a:	fc 01       	movw	r30, r24
    237c:	20 83       	st	Z, r18
    237e:	40 91 44 12 	lds	r20, 0x1244	; 0x801244 <xTickCount>
    2382:	50 91 45 12 	lds	r21, 0x1245	; 0x801245 <xTickCount+0x1>
    2386:	60 91 46 12 	lds	r22, 0x1246	; 0x801246 <xTickCount+0x2>
    238a:	70 91 47 12 	lds	r23, 0x1247	; 0x801247 <xTickCount+0x3>
    238e:	41 83       	std	Z+1, r20	; 0x01
    2390:	52 83       	std	Z+2, r21	; 0x02
    2392:	63 83       	std	Z+3, r22	; 0x03
    2394:	74 83       	std	Z+4, r23	; 0x04
    2396:	08 95       	ret

00002398 <xTaskCheckForTimeOut>:
    2398:	8f 92       	push	r8
    239a:	9f 92       	push	r9
    239c:	af 92       	push	r10
    239e:	bf 92       	push	r11
    23a0:	cf 92       	push	r12
    23a2:	df 92       	push	r13
    23a4:	ef 92       	push	r14
    23a6:	ff 92       	push	r15
    23a8:	0f 93       	push	r16
    23aa:	1f 93       	push	r17
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	fb 01       	movw	r30, r22
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	0f 92       	push	r0
    23b8:	c0 90 44 12 	lds	r12, 0x1244	; 0x801244 <xTickCount>
    23bc:	d0 90 45 12 	lds	r13, 0x1245	; 0x801245 <xTickCount+0x1>
    23c0:	e0 90 46 12 	lds	r14, 0x1246	; 0x801246 <xTickCount+0x2>
    23c4:	f0 90 47 12 	lds	r15, 0x1247	; 0x801247 <xTickCount+0x3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	11 96       	adiw	r26, 0x01	; 1
    23cc:	0d 91       	ld	r16, X+
    23ce:	1d 91       	ld	r17, X+
    23d0:	2d 91       	ld	r18, X+
    23d2:	3c 91       	ld	r19, X
    23d4:	14 97       	sbiw	r26, 0x04	; 4
    23d6:	46 01       	movw	r8, r12
    23d8:	57 01       	movw	r10, r14
    23da:	80 1a       	sub	r8, r16
    23dc:	91 0a       	sbc	r9, r17
    23de:	a2 0a       	sbc	r10, r18
    23e0:	b3 0a       	sbc	r11, r19
    23e2:	40 81       	ld	r20, Z
    23e4:	51 81       	ldd	r21, Z+1	; 0x01
    23e6:	62 81       	ldd	r22, Z+2	; 0x02
    23e8:	73 81       	ldd	r23, Z+3	; 0x03
    23ea:	4f 3f       	cpi	r20, 0xFF	; 255
    23ec:	bf ef       	ldi	r27, 0xFF	; 255
    23ee:	5b 07       	cpc	r21, r27
    23f0:	6b 07       	cpc	r22, r27
    23f2:	7b 07       	cpc	r23, r27
    23f4:	39 f1       	breq	.+78     	; 0x2444 <xTaskCheckForTimeOut+0xac>
    23f6:	ec 01       	movw	r28, r24
    23f8:	b8 81       	ld	r27, Y
    23fa:	a0 91 3c 12 	lds	r26, 0x123C	; 0x80123c <xNumOfOverflows>
    23fe:	ba 17       	cp	r27, r26
    2400:	59 f0       	breq	.+22     	; 0x2418 <xTaskCheckForTimeOut+0x80>
    2402:	c0 16       	cp	r12, r16
    2404:	d1 06       	cpc	r13, r17
    2406:	e2 06       	cpc	r14, r18
    2408:	f3 06       	cpc	r15, r19
    240a:	30 f0       	brcs	.+12     	; 0x2418 <xTaskCheckForTimeOut+0x80>
    240c:	10 82       	st	Z, r1
    240e:	11 82       	std	Z+1, r1	; 0x01
    2410:	12 82       	std	Z+2, r1	; 0x02
    2412:	13 82       	std	Z+3, r1	; 0x03
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	17 c0       	rjmp	.+46     	; 0x2446 <xTaskCheckForTimeOut+0xae>
    2418:	84 16       	cp	r8, r20
    241a:	95 06       	cpc	r9, r21
    241c:	a6 06       	cpc	r10, r22
    241e:	b7 06       	cpc	r11, r23
    2420:	58 f4       	brcc	.+22     	; 0x2438 <xTaskCheckForTimeOut+0xa0>
    2422:	48 19       	sub	r20, r8
    2424:	59 09       	sbc	r21, r9
    2426:	6a 09       	sbc	r22, r10
    2428:	7b 09       	sbc	r23, r11
    242a:	40 83       	st	Z, r20
    242c:	51 83       	std	Z+1, r21	; 0x01
    242e:	62 83       	std	Z+2, r22	; 0x02
    2430:	73 83       	std	Z+3, r23	; 0x03
    2432:	a1 df       	rcall	.-190    	; 0x2376 <vTaskInternalSetTimeOutState>
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	07 c0       	rjmp	.+14     	; 0x2446 <xTaskCheckForTimeOut+0xae>
    2438:	10 82       	st	Z, r1
    243a:	11 82       	std	Z+1, r1	; 0x01
    243c:	12 82       	std	Z+2, r1	; 0x02
    243e:	13 82       	std	Z+3, r1	; 0x03
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	01 c0       	rjmp	.+2      	; 0x2446 <xTaskCheckForTimeOut+0xae>
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	0f 90       	pop	r0
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	df 91       	pop	r29
    244c:	cf 91       	pop	r28
    244e:	1f 91       	pop	r17
    2450:	0f 91       	pop	r16
    2452:	ff 90       	pop	r15
    2454:	ef 90       	pop	r14
    2456:	df 90       	pop	r13
    2458:	cf 90       	pop	r12
    245a:	bf 90       	pop	r11
    245c:	af 90       	pop	r10
    245e:	9f 90       	pop	r9
    2460:	8f 90       	pop	r8
    2462:	08 95       	ret

00002464 <vTaskMissedYield>:
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	80 93 3d 12 	sts	0x123D, r24	; 0x80123d <xYieldPending>
    246a:	08 95       	ret

0000246c <xTaskGetCurrentTaskHandle>:
    246c:	80 91 f3 12 	lds	r24, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    2470:	90 91 f4 12 	lds	r25, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    2474:	08 95       	ret

00002476 <xTaskGetSchedulerState>:
    2476:	80 91 42 12 	lds	r24, 0x1242	; 0x801242 <xSchedulerRunning>
    247a:	88 23       	and	r24, r24
    247c:	31 f0       	breq	.+12     	; 0x248a <xTaskGetSchedulerState+0x14>
    247e:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <uxSchedulerSuspended>
    2482:	81 11       	cpse	r24, r1
    2484:	04 c0       	rjmp	.+8      	; 0x248e <xTaskGetSchedulerState+0x18>
    2486:	82 e0       	ldi	r24, 0x02	; 2
    2488:	08 95       	ret
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	08 95       	ret
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	08 95       	ret

00002492 <xTaskPriorityInherit>:
    2492:	0f 93       	push	r16
    2494:	1f 93       	push	r17
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	fc 01       	movw	r30, r24
    249c:	89 2b       	or	r24, r25
    249e:	09 f4       	brne	.+2      	; 0x24a2 <xTaskPriorityInherit+0x10>
    24a0:	77 c0       	rjmp	.+238    	; 0x2590 <xTaskPriorityInherit+0xfe>
    24a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    24a4:	a0 91 f3 12 	lds	r26, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    24a8:	b0 91 f4 12 	lds	r27, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    24ac:	5a 96       	adiw	r26, 0x1a	; 26
    24ae:	9c 91       	ld	r25, X
    24b0:	89 17       	cp	r24, r25
    24b2:	08 f0       	brcs	.+2      	; 0x24b6 <xTaskPriorityInherit+0x24>
    24b4:	63 c0       	rjmp	.+198    	; 0x257c <xTaskPriorityInherit+0xea>
    24b6:	46 85       	ldd	r20, Z+14	; 0x0e
    24b8:	57 85       	ldd	r21, Z+15	; 0x0f
    24ba:	60 89       	ldd	r22, Z+16	; 0x10
    24bc:	71 89       	ldd	r23, Z+17	; 0x11
    24be:	77 23       	and	r23, r23
    24c0:	94 f0       	brlt	.+36     	; 0x24e6 <xTaskPriorityInherit+0x54>
    24c2:	a0 91 f3 12 	lds	r26, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    24c6:	b0 91 f4 12 	lds	r27, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    24ca:	5a 96       	adiw	r26, 0x1a	; 26
    24cc:	9c 91       	ld	r25, X
    24ce:	4a e0       	ldi	r20, 0x0A	; 10
    24d0:	50 e0       	ldi	r21, 0x00	; 0
    24d2:	60 e0       	ldi	r22, 0x00	; 0
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	49 1b       	sub	r20, r25
    24d8:	51 09       	sbc	r21, r1
    24da:	61 09       	sbc	r22, r1
    24dc:	71 09       	sbc	r23, r1
    24de:	46 87       	std	Z+14, r20	; 0x0e
    24e0:	57 87       	std	Z+15, r21	; 0x0f
    24e2:	60 8b       	std	Z+16, r22	; 0x10
    24e4:	71 8b       	std	Z+17, r23	; 0x11
    24e6:	24 85       	ldd	r18, Z+12	; 0x0c
    24e8:	35 85       	ldd	r19, Z+13	; 0x0d
    24ea:	4b e0       	ldi	r20, 0x0B	; 11
    24ec:	84 9f       	mul	r24, r20
    24ee:	c0 01       	movw	r24, r0
    24f0:	11 24       	eor	r1, r1
    24f2:	8b 57       	subi	r24, 0x7B	; 123
    24f4:	9d 4e       	sbci	r25, 0xED	; 237
    24f6:	28 17       	cp	r18, r24
    24f8:	39 07       	cpc	r19, r25
    24fa:	b9 f5       	brne	.+110    	; 0x256a <xTaskPriorityInherit+0xd8>
    24fc:	ef 01       	movw	r28, r30
    24fe:	8f 01       	movw	r16, r30
    2500:	0e 5f       	subi	r16, 0xFE	; 254
    2502:	1f 4f       	sbci	r17, 0xFF	; 255
    2504:	c8 01       	movw	r24, r16
    2506:	0e 94 f7 02 	call	0x5ee	; 0x5ee <uxListRemove>
    250a:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    250e:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    2512:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2514:	ea 8f       	std	Y+26, r30	; 0x1a
    2516:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <uxTopReadyPriority>
    251a:	8e 17       	cp	r24, r30
    251c:	10 f4       	brcc	.+4      	; 0x2522 <xTaskPriorityInherit+0x90>
    251e:	e0 93 43 12 	sts	0x1243, r30	; 0x801243 <uxTopReadyPriority>
    2522:	8b e0       	ldi	r24, 0x0B	; 11
    2524:	8e 9f       	mul	r24, r30
    2526:	f0 01       	movw	r30, r0
    2528:	11 24       	eor	r1, r1
    252a:	eb 57       	subi	r30, 0x7B	; 123
    252c:	fd 4e       	sbci	r31, 0xED	; 237
    252e:	01 80       	ldd	r0, Z+1	; 0x01
    2530:	f2 81       	ldd	r31, Z+2	; 0x02
    2532:	e0 2d       	mov	r30, r0
    2534:	ff 83       	std	Y+7, r31	; 0x07
    2536:	ee 83       	std	Y+6, r30	; 0x06
    2538:	26 81       	ldd	r18, Z+6	; 0x06
    253a:	37 81       	ldd	r19, Z+7	; 0x07
    253c:	39 87       	std	Y+9, r19	; 0x09
    253e:	28 87       	std	Y+8, r18	; 0x08
    2540:	a6 81       	ldd	r26, Z+6	; 0x06
    2542:	b7 81       	ldd	r27, Z+7	; 0x07
    2544:	15 96       	adiw	r26, 0x05	; 5
    2546:	1c 93       	st	X, r17
    2548:	0e 93       	st	-X, r16
    254a:	14 97       	sbiw	r26, 0x04	; 4
    254c:	17 83       	std	Z+7, r17	; 0x07
    254e:	06 83       	std	Z+6, r16	; 0x06
    2550:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2552:	8e 9f       	mul	r24, r30
    2554:	f0 01       	movw	r30, r0
    2556:	11 24       	eor	r1, r1
    2558:	eb 57       	subi	r30, 0x7B	; 123
    255a:	fd 4e       	sbci	r31, 0xED	; 237
    255c:	fd 87       	std	Y+13, r31	; 0x0d
    255e:	ec 87       	std	Y+12, r30	; 0x0c
    2560:	80 81       	ld	r24, Z
    2562:	8f 5f       	subi	r24, 0xFF	; 255
    2564:	80 83       	st	Z, r24
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	16 c0       	rjmp	.+44     	; 0x2596 <xTaskPriorityInherit+0x104>
    256a:	a0 91 f3 12 	lds	r26, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    256e:	b0 91 f4 12 	lds	r27, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    2572:	5a 96       	adiw	r26, 0x1a	; 26
    2574:	8c 91       	ld	r24, X
    2576:	82 8f       	std	Z+26, r24	; 0x1a
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	0d c0       	rjmp	.+26     	; 0x2596 <xTaskPriorityInherit+0x104>
    257c:	95 a5       	ldd	r25, Z+45	; 0x2d
    257e:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    2582:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    2586:	82 8d       	ldd	r24, Z+26	; 0x1a
    2588:	98 17       	cp	r25, r24
    258a:	20 f0       	brcs	.+8      	; 0x2594 <xTaskPriorityInherit+0x102>
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	03 c0       	rjmp	.+6      	; 0x2596 <xTaskPriorityInherit+0x104>
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	01 c0       	rjmp	.+2      	; 0x2596 <xTaskPriorityInherit+0x104>
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	1f 91       	pop	r17
    259c:	0f 91       	pop	r16
    259e:	08 95       	ret

000025a0 <xTaskPriorityDisinherit>:
    25a0:	0f 93       	push	r16
    25a2:	1f 93       	push	r17
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
    25a8:	fc 01       	movw	r30, r24
    25aa:	89 2b       	or	r24, r25
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <xTaskPriorityDisinherit+0x10>
    25ae:	49 c0       	rjmp	.+146    	; 0x2642 <xTaskPriorityDisinherit+0xa2>
    25b0:	86 a5       	ldd	r24, Z+46	; 0x2e
    25b2:	81 50       	subi	r24, 0x01	; 1
    25b4:	86 a7       	std	Z+46, r24	; 0x2e
    25b6:	22 8d       	ldd	r18, Z+26	; 0x1a
    25b8:	95 a5       	ldd	r25, Z+45	; 0x2d
    25ba:	29 17       	cp	r18, r25
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <xTaskPriorityDisinherit+0x20>
    25be:	43 c0       	rjmp	.+134    	; 0x2646 <xTaskPriorityDisinherit+0xa6>
    25c0:	81 11       	cpse	r24, r1
    25c2:	43 c0       	rjmp	.+134    	; 0x264a <xTaskPriorityDisinherit+0xaa>
    25c4:	ef 01       	movw	r28, r30
    25c6:	8f 01       	movw	r16, r30
    25c8:	0e 5f       	subi	r16, 0xFE	; 254
    25ca:	1f 4f       	sbci	r17, 0xFF	; 255
    25cc:	c8 01       	movw	r24, r16
    25ce:	0e 94 f7 02 	call	0x5ee	; 0x5ee <uxListRemove>
    25d2:	ed a5       	ldd	r30, Y+45	; 0x2d
    25d4:	ea 8f       	std	Y+26, r30	; 0x1a
    25d6:	8a e0       	ldi	r24, 0x0A	; 10
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 e0       	ldi	r26, 0x00	; 0
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	8e 1b       	sub	r24, r30
    25e0:	91 09       	sbc	r25, r1
    25e2:	a1 09       	sbc	r26, r1
    25e4:	b1 09       	sbc	r27, r1
    25e6:	8e 87       	std	Y+14, r24	; 0x0e
    25e8:	9f 87       	std	Y+15, r25	; 0x0f
    25ea:	a8 8b       	std	Y+16, r26	; 0x10
    25ec:	b9 8b       	std	Y+17, r27	; 0x11
    25ee:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <uxTopReadyPriority>
    25f2:	8e 17       	cp	r24, r30
    25f4:	10 f4       	brcc	.+4      	; 0x25fa <xTaskPriorityDisinherit+0x5a>
    25f6:	e0 93 43 12 	sts	0x1243, r30	; 0x801243 <uxTopReadyPriority>
    25fa:	8b e0       	ldi	r24, 0x0B	; 11
    25fc:	8e 9f       	mul	r24, r30
    25fe:	f0 01       	movw	r30, r0
    2600:	11 24       	eor	r1, r1
    2602:	eb 57       	subi	r30, 0x7B	; 123
    2604:	fd 4e       	sbci	r31, 0xED	; 237
    2606:	01 80       	ldd	r0, Z+1	; 0x01
    2608:	f2 81       	ldd	r31, Z+2	; 0x02
    260a:	e0 2d       	mov	r30, r0
    260c:	ff 83       	std	Y+7, r31	; 0x07
    260e:	ee 83       	std	Y+6, r30	; 0x06
    2610:	26 81       	ldd	r18, Z+6	; 0x06
    2612:	37 81       	ldd	r19, Z+7	; 0x07
    2614:	39 87       	std	Y+9, r19	; 0x09
    2616:	28 87       	std	Y+8, r18	; 0x08
    2618:	a6 81       	ldd	r26, Z+6	; 0x06
    261a:	b7 81       	ldd	r27, Z+7	; 0x07
    261c:	15 96       	adiw	r26, 0x05	; 5
    261e:	1c 93       	st	X, r17
    2620:	0e 93       	st	-X, r16
    2622:	14 97       	sbiw	r26, 0x04	; 4
    2624:	17 83       	std	Z+7, r17	; 0x07
    2626:	06 83       	std	Z+6, r16	; 0x06
    2628:	ea 8d       	ldd	r30, Y+26	; 0x1a
    262a:	8e 9f       	mul	r24, r30
    262c:	f0 01       	movw	r30, r0
    262e:	11 24       	eor	r1, r1
    2630:	eb 57       	subi	r30, 0x7B	; 123
    2632:	fd 4e       	sbci	r31, 0xED	; 237
    2634:	fd 87       	std	Y+13, r31	; 0x0d
    2636:	ec 87       	std	Y+12, r30	; 0x0c
    2638:	80 81       	ld	r24, Z
    263a:	8f 5f       	subi	r24, 0xFF	; 255
    263c:	80 83       	st	Z, r24
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	05 c0       	rjmp	.+10     	; 0x264c <xTaskPriorityDisinherit+0xac>
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	03 c0       	rjmp	.+6      	; 0x264c <xTaskPriorityDisinherit+0xac>
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	01 c0       	rjmp	.+2      	; 0x264c <xTaskPriorityDisinherit+0xac>
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	1f 91       	pop	r17
    2652:	0f 91       	pop	r16
    2654:	08 95       	ret

00002656 <vTaskPriorityDisinheritAfterTimeout>:
    2656:	0f 93       	push	r16
    2658:	1f 93       	push	r17
    265a:	cf 93       	push	r28
    265c:	df 93       	push	r29
    265e:	fc 01       	movw	r30, r24
    2660:	89 2b       	or	r24, r25
    2662:	09 f4       	brne	.+2      	; 0x2666 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2664:	5a c0       	rjmp	.+180    	; 0x271a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2666:	85 a5       	ldd	r24, Z+45	; 0x2d
    2668:	86 17       	cp	r24, r22
    266a:	08 f4       	brcc	.+2      	; 0x266e <vTaskPriorityDisinheritAfterTimeout+0x18>
    266c:	86 2f       	mov	r24, r22
    266e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2670:	89 17       	cp	r24, r25
    2672:	09 f4       	brne	.+2      	; 0x2676 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2674:	52 c0       	rjmp	.+164    	; 0x271a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2676:	26 a5       	ldd	r18, Z+46	; 0x2e
    2678:	21 30       	cpi	r18, 0x01	; 1
    267a:	09 f0       	breq	.+2      	; 0x267e <vTaskPriorityDisinheritAfterTimeout+0x28>
    267c:	4e c0       	rjmp	.+156    	; 0x271a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    267e:	82 8f       	std	Z+26, r24	; 0x1a
    2680:	46 85       	ldd	r20, Z+14	; 0x0e
    2682:	57 85       	ldd	r21, Z+15	; 0x0f
    2684:	60 89       	ldd	r22, Z+16	; 0x10
    2686:	71 89       	ldd	r23, Z+17	; 0x11
    2688:	77 23       	and	r23, r23
    268a:	64 f0       	brlt	.+24     	; 0x26a4 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    268c:	4a e0       	ldi	r20, 0x0A	; 10
    268e:	50 e0       	ldi	r21, 0x00	; 0
    2690:	60 e0       	ldi	r22, 0x00	; 0
    2692:	70 e0       	ldi	r23, 0x00	; 0
    2694:	48 1b       	sub	r20, r24
    2696:	51 09       	sbc	r21, r1
    2698:	61 09       	sbc	r22, r1
    269a:	71 09       	sbc	r23, r1
    269c:	46 87       	std	Z+14, r20	; 0x0e
    269e:	57 87       	std	Z+15, r21	; 0x0f
    26a0:	60 8b       	std	Z+16, r22	; 0x10
    26a2:	71 8b       	std	Z+17, r23	; 0x11
    26a4:	24 85       	ldd	r18, Z+12	; 0x0c
    26a6:	35 85       	ldd	r19, Z+13	; 0x0d
    26a8:	4b e0       	ldi	r20, 0x0B	; 11
    26aa:	94 9f       	mul	r25, r20
    26ac:	c0 01       	movw	r24, r0
    26ae:	11 24       	eor	r1, r1
    26b0:	8b 57       	subi	r24, 0x7B	; 123
    26b2:	9d 4e       	sbci	r25, 0xED	; 237
    26b4:	28 17       	cp	r18, r24
    26b6:	39 07       	cpc	r19, r25
    26b8:	81 f5       	brne	.+96     	; 0x271a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    26ba:	ef 01       	movw	r28, r30
    26bc:	8f 01       	movw	r16, r30
    26be:	0e 5f       	subi	r16, 0xFE	; 254
    26c0:	1f 4f       	sbci	r17, 0xFF	; 255
    26c2:	c8 01       	movw	r24, r16
    26c4:	0e 94 f7 02 	call	0x5ee	; 0x5ee <uxListRemove>
    26c8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    26ca:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <uxTopReadyPriority>
    26ce:	8e 17       	cp	r24, r30
    26d0:	10 f4       	brcc	.+4      	; 0x26d6 <vTaskPriorityDisinheritAfterTimeout+0x80>
    26d2:	e0 93 43 12 	sts	0x1243, r30	; 0x801243 <uxTopReadyPriority>
    26d6:	8b e0       	ldi	r24, 0x0B	; 11
    26d8:	8e 9f       	mul	r24, r30
    26da:	f0 01       	movw	r30, r0
    26dc:	11 24       	eor	r1, r1
    26de:	eb 57       	subi	r30, 0x7B	; 123
    26e0:	fd 4e       	sbci	r31, 0xED	; 237
    26e2:	01 80       	ldd	r0, Z+1	; 0x01
    26e4:	f2 81       	ldd	r31, Z+2	; 0x02
    26e6:	e0 2d       	mov	r30, r0
    26e8:	ff 83       	std	Y+7, r31	; 0x07
    26ea:	ee 83       	std	Y+6, r30	; 0x06
    26ec:	26 81       	ldd	r18, Z+6	; 0x06
    26ee:	37 81       	ldd	r19, Z+7	; 0x07
    26f0:	39 87       	std	Y+9, r19	; 0x09
    26f2:	28 87       	std	Y+8, r18	; 0x08
    26f4:	a6 81       	ldd	r26, Z+6	; 0x06
    26f6:	b7 81       	ldd	r27, Z+7	; 0x07
    26f8:	15 96       	adiw	r26, 0x05	; 5
    26fa:	1c 93       	st	X, r17
    26fc:	0e 93       	st	-X, r16
    26fe:	14 97       	sbiw	r26, 0x04	; 4
    2700:	17 83       	std	Z+7, r17	; 0x07
    2702:	06 83       	std	Z+6, r16	; 0x06
    2704:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2706:	8e 9f       	mul	r24, r30
    2708:	f0 01       	movw	r30, r0
    270a:	11 24       	eor	r1, r1
    270c:	eb 57       	subi	r30, 0x7B	; 123
    270e:	fd 4e       	sbci	r31, 0xED	; 237
    2710:	fd 87       	std	Y+13, r31	; 0x0d
    2712:	ec 87       	std	Y+12, r30	; 0x0c
    2714:	80 81       	ld	r24, Z
    2716:	8f 5f       	subi	r24, 0xFF	; 255
    2718:	80 83       	st	Z, r24
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	1f 91       	pop	r17
    2720:	0f 91       	pop	r16
    2722:	08 95       	ret

00002724 <pvTaskIncrementMutexHeldCount>:
    2724:	80 91 f3 12 	lds	r24, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    2728:	90 91 f4 12 	lds	r25, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    272c:	89 2b       	or	r24, r25
    272e:	39 f0       	breq	.+14     	; 0x273e <pvTaskIncrementMutexHeldCount+0x1a>
    2730:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    2734:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    2738:	86 a5       	ldd	r24, Z+46	; 0x2e
    273a:	8f 5f       	subi	r24, 0xFF	; 255
    273c:	86 a7       	std	Z+46, r24	; 0x2e
    273e:	80 91 f3 12 	lds	r24, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    2742:	90 91 f4 12 	lds	r25, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    2746:	08 95       	ret

00002748 <xTaskGenericNotifyWait>:
    2748:	4f 92       	push	r4
    274a:	5f 92       	push	r5
    274c:	6f 92       	push	r6
    274e:	7f 92       	push	r7
    2750:	af 92       	push	r10
    2752:	bf 92       	push	r11
    2754:	cf 92       	push	r12
    2756:	df 92       	push	r13
    2758:	ef 92       	push	r14
    275a:	ff 92       	push	r15
    275c:	0f 93       	push	r16
    275e:	1f 93       	push	r17
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
    2764:	28 01       	movw	r4, r16
    2766:	39 01       	movw	r6, r18
    2768:	0f b6       	in	r0, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	0f 92       	push	r0
    276e:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    2772:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    2776:	c8 2f       	mov	r28, r24
    2778:	d0 e0       	ldi	r29, 0x00	; 0
    277a:	ec 0f       	add	r30, r28
    277c:	fd 1f       	adc	r31, r29
    277e:	83 a9       	ldd	r24, Z+51	; 0x33
    2780:	82 30       	cpi	r24, 0x02	; 2
    2782:	71 f1       	breq	.+92     	; 0x27e0 <xTaskGenericNotifyWait+0x98>
    2784:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    2788:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    278c:	ce 01       	movw	r24, r28
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	e8 0f       	add	r30, r24
    2798:	f9 1f       	adc	r31, r25
    279a:	87 a5       	ldd	r24, Z+47	; 0x2f
    279c:	90 a9       	ldd	r25, Z+48	; 0x30
    279e:	a1 a9       	ldd	r26, Z+49	; 0x31
    27a0:	b2 a9       	ldd	r27, Z+50	; 0x32
    27a2:	40 95       	com	r20
    27a4:	50 95       	com	r21
    27a6:	60 95       	com	r22
    27a8:	70 95       	com	r23
    27aa:	48 23       	and	r20, r24
    27ac:	59 23       	and	r21, r25
    27ae:	6a 23       	and	r22, r26
    27b0:	7b 23       	and	r23, r27
    27b2:	47 a7       	std	Z+47, r20	; 0x2f
    27b4:	50 ab       	std	Z+48, r21	; 0x30
    27b6:	61 ab       	std	Z+49, r22	; 0x31
    27b8:	72 ab       	std	Z+50, r23	; 0x32
    27ba:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    27be:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    27c2:	ec 0f       	add	r30, r28
    27c4:	fd 1f       	adc	r31, r29
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	83 ab       	std	Z+51, r24	; 0x33
    27ca:	a1 14       	cp	r10, r1
    27cc:	b1 04       	cpc	r11, r1
    27ce:	c1 04       	cpc	r12, r1
    27d0:	d1 04       	cpc	r13, r1
    27d2:	31 f0       	breq	.+12     	; 0x27e0 <xTaskGenericNotifyWait+0x98>
    27d4:	41 e0       	ldi	r20, 0x01	; 1
    27d6:	c6 01       	movw	r24, r12
    27d8:	b5 01       	movw	r22, r10
    27da:	88 d8       	rcall	.-3824   	; 0x18ec <prvAddCurrentTaskToDelayedList>
    27dc:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
    27e0:	0f 90       	pop	r0
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	0f b6       	in	r0, 0x3f	; 63
    27e6:	f8 94       	cli
    27e8:	0f 92       	push	r0
    27ea:	e1 14       	cp	r14, r1
    27ec:	f1 04       	cpc	r15, r1
    27ee:	a1 f0       	breq	.+40     	; 0x2818 <xTaskGenericNotifyWait+0xd0>
    27f0:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    27f4:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    27f8:	ce 01       	movw	r24, r28
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	88 0f       	add	r24, r24
    2800:	99 1f       	adc	r25, r25
    2802:	e8 0f       	add	r30, r24
    2804:	f9 1f       	adc	r31, r25
    2806:	87 a5       	ldd	r24, Z+47	; 0x2f
    2808:	90 a9       	ldd	r25, Z+48	; 0x30
    280a:	a1 a9       	ldd	r26, Z+49	; 0x31
    280c:	b2 a9       	ldd	r27, Z+50	; 0x32
    280e:	f7 01       	movw	r30, r14
    2810:	80 83       	st	Z, r24
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	a2 83       	std	Z+2, r26	; 0x02
    2816:	b3 83       	std	Z+3, r27	; 0x03
    2818:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    281c:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    2820:	ec 0f       	add	r30, r28
    2822:	fd 1f       	adc	r31, r29
    2824:	83 a9       	ldd	r24, Z+51	; 0x33
    2826:	82 30       	cpi	r24, 0x02	; 2
    2828:	e9 f4       	brne	.+58     	; 0x2864 <xTaskGenericNotifyWait+0x11c>
    282a:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    282e:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    2832:	ce 01       	movw	r24, r28
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	e8 0f       	add	r30, r24
    283e:	f9 1f       	adc	r31, r25
    2840:	87 a5       	ldd	r24, Z+47	; 0x2f
    2842:	90 a9       	ldd	r25, Z+48	; 0x30
    2844:	a1 a9       	ldd	r26, Z+49	; 0x31
    2846:	b2 a9       	ldd	r27, Z+50	; 0x32
    2848:	40 94       	com	r4
    284a:	50 94       	com	r5
    284c:	60 94       	com	r6
    284e:	70 94       	com	r7
    2850:	48 22       	and	r4, r24
    2852:	59 22       	and	r5, r25
    2854:	6a 22       	and	r6, r26
    2856:	7b 22       	and	r7, r27
    2858:	47 a6       	std	Z+47, r4	; 0x2f
    285a:	50 aa       	std	Z+48, r5	; 0x30
    285c:	61 aa       	std	Z+49, r6	; 0x31
    285e:	72 aa       	std	Z+50, r7	; 0x32
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	01 c0       	rjmp	.+2      	; 0x2866 <xTaskGenericNotifyWait+0x11e>
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	20 91 f3 12 	lds	r18, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    286a:	30 91 f4 12 	lds	r19, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    286e:	c2 0f       	add	r28, r18
    2870:	d3 1f       	adc	r29, r19
    2872:	1b aa       	std	Y+51, r1	; 0x33
    2874:	0f 90       	pop	r0
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	1f 91       	pop	r17
    287e:	0f 91       	pop	r16
    2880:	ff 90       	pop	r15
    2882:	ef 90       	pop	r14
    2884:	df 90       	pop	r13
    2886:	cf 90       	pop	r12
    2888:	bf 90       	pop	r11
    288a:	af 90       	pop	r10
    288c:	7f 90       	pop	r7
    288e:	6f 90       	pop	r6
    2890:	5f 90       	pop	r5
    2892:	4f 90       	pop	r4
    2894:	08 95       	ret

00002896 <xTaskGenericNotify>:
    2896:	8f 92       	push	r8
    2898:	9f 92       	push	r9
    289a:	af 92       	push	r10
    289c:	bf 92       	push	r11
    289e:	ef 92       	push	r14
    28a0:	ff 92       	push	r15
    28a2:	0f 93       	push	r16
    28a4:	cf 93       	push	r28
    28a6:	df 93       	push	r29
    28a8:	dc 01       	movw	r26, r24
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	0f 92       	push	r0
    28b0:	e1 14       	cp	r14, r1
    28b2:	f1 04       	cpc	r15, r1
    28b4:	89 f0       	breq	.+34     	; 0x28d8 <xTaskGenericNotify+0x42>
    28b6:	e6 2f       	mov	r30, r22
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	ee 0f       	add	r30, r30
    28bc:	ff 1f       	adc	r31, r31
    28be:	ee 0f       	add	r30, r30
    28c0:	ff 1f       	adc	r31, r31
    28c2:	e8 0f       	add	r30, r24
    28c4:	f9 1f       	adc	r31, r25
    28c6:	87 a4       	ldd	r8, Z+47	; 0x2f
    28c8:	90 a8       	ldd	r9, Z+48	; 0x30
    28ca:	a1 a8       	ldd	r10, Z+49	; 0x31
    28cc:	b2 a8       	ldd	r11, Z+50	; 0x32
    28ce:	f7 01       	movw	r30, r14
    28d0:	80 82       	st	Z, r8
    28d2:	91 82       	std	Z+1, r9	; 0x01
    28d4:	a2 82       	std	Z+2, r10	; 0x02
    28d6:	b3 82       	std	Z+3, r11	; 0x03
    28d8:	70 e0       	ldi	r23, 0x00	; 0
    28da:	fd 01       	movw	r30, r26
    28dc:	e6 0f       	add	r30, r22
    28de:	f7 1f       	adc	r31, r23
    28e0:	83 a9       	ldd	r24, Z+51	; 0x33
    28e2:	92 e0       	ldi	r25, 0x02	; 2
    28e4:	93 ab       	std	Z+51, r25	; 0x33
    28e6:	02 30       	cpi	r16, 0x02	; 2
    28e8:	01 f1       	breq	.+64     	; 0x292a <xTaskGenericNotify+0x94>
    28ea:	18 f4       	brcc	.+6      	; 0x28f2 <xTaskGenericNotify+0x5c>
    28ec:	01 30       	cpi	r16, 0x01	; 1
    28ee:	31 f0       	breq	.+12     	; 0x28fc <xTaskGenericNotify+0x66>
    28f0:	4d c0       	rjmp	.+154    	; 0x298c <xTaskGenericNotify+0xf6>
    28f2:	03 30       	cpi	r16, 0x03	; 3
    28f4:	79 f1       	breq	.+94     	; 0x2954 <xTaskGenericNotify+0xbe>
    28f6:	04 30       	cpi	r16, 0x04	; 4
    28f8:	d1 f1       	breq	.+116    	; 0x296e <xTaskGenericNotify+0xd8>
    28fa:	48 c0       	rjmp	.+144    	; 0x298c <xTaskGenericNotify+0xf6>
    28fc:	66 0f       	add	r22, r22
    28fe:	77 1f       	adc	r23, r23
    2900:	66 0f       	add	r22, r22
    2902:	77 1f       	adc	r23, r23
    2904:	fd 01       	movw	r30, r26
    2906:	e6 0f       	add	r30, r22
    2908:	f7 1f       	adc	r31, r23
    290a:	87 a4       	ldd	r8, Z+47	; 0x2f
    290c:	90 a8       	ldd	r9, Z+48	; 0x30
    290e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2910:	b2 a8       	ldd	r11, Z+50	; 0x32
    2912:	ba 01       	movw	r22, r20
    2914:	a9 01       	movw	r20, r18
    2916:	48 29       	or	r20, r8
    2918:	59 29       	or	r21, r9
    291a:	6a 29       	or	r22, r10
    291c:	7b 29       	or	r23, r11
    291e:	47 a7       	std	Z+47, r20	; 0x2f
    2920:	50 ab       	std	Z+48, r21	; 0x30
    2922:	61 ab       	std	Z+49, r22	; 0x31
    2924:	72 ab       	std	Z+50, r23	; 0x32
    2926:	01 e0       	ldi	r16, 0x01	; 1
    2928:	34 c0       	rjmp	.+104    	; 0x2992 <xTaskGenericNotify+0xfc>
    292a:	66 0f       	add	r22, r22
    292c:	77 1f       	adc	r23, r23
    292e:	66 0f       	add	r22, r22
    2930:	77 1f       	adc	r23, r23
    2932:	fd 01       	movw	r30, r26
    2934:	e6 0f       	add	r30, r22
    2936:	f7 1f       	adc	r31, r23
    2938:	47 a5       	ldd	r20, Z+47	; 0x2f
    293a:	50 a9       	ldd	r21, Z+48	; 0x30
    293c:	61 a9       	ldd	r22, Z+49	; 0x31
    293e:	72 a9       	ldd	r23, Z+50	; 0x32
    2940:	4f 5f       	subi	r20, 0xFF	; 255
    2942:	5f 4f       	sbci	r21, 0xFF	; 255
    2944:	6f 4f       	sbci	r22, 0xFF	; 255
    2946:	7f 4f       	sbci	r23, 0xFF	; 255
    2948:	47 a7       	std	Z+47, r20	; 0x2f
    294a:	50 ab       	std	Z+48, r21	; 0x30
    294c:	61 ab       	std	Z+49, r22	; 0x31
    294e:	72 ab       	std	Z+50, r23	; 0x32
    2950:	01 e0       	ldi	r16, 0x01	; 1
    2952:	1f c0       	rjmp	.+62     	; 0x2992 <xTaskGenericNotify+0xfc>
    2954:	66 0f       	add	r22, r22
    2956:	77 1f       	adc	r23, r23
    2958:	66 0f       	add	r22, r22
    295a:	77 1f       	adc	r23, r23
    295c:	fd 01       	movw	r30, r26
    295e:	e6 0f       	add	r30, r22
    2960:	f7 1f       	adc	r31, r23
    2962:	27 a7       	std	Z+47, r18	; 0x2f
    2964:	30 ab       	std	Z+48, r19	; 0x30
    2966:	41 ab       	std	Z+49, r20	; 0x31
    2968:	52 ab       	std	Z+50, r21	; 0x32
    296a:	01 e0       	ldi	r16, 0x01	; 1
    296c:	12 c0       	rjmp	.+36     	; 0x2992 <xTaskGenericNotify+0xfc>
    296e:	82 30       	cpi	r24, 0x02	; 2
    2970:	79 f0       	breq	.+30     	; 0x2990 <xTaskGenericNotify+0xfa>
    2972:	66 0f       	add	r22, r22
    2974:	77 1f       	adc	r23, r23
    2976:	66 0f       	add	r22, r22
    2978:	77 1f       	adc	r23, r23
    297a:	fd 01       	movw	r30, r26
    297c:	e6 0f       	add	r30, r22
    297e:	f7 1f       	adc	r31, r23
    2980:	27 a7       	std	Z+47, r18	; 0x2f
    2982:	30 ab       	std	Z+48, r19	; 0x30
    2984:	41 ab       	std	Z+49, r20	; 0x31
    2986:	52 ab       	std	Z+50, r21	; 0x32
    2988:	01 e0       	ldi	r16, 0x01	; 1
    298a:	03 c0       	rjmp	.+6      	; 0x2992 <xTaskGenericNotify+0xfc>
    298c:	01 e0       	ldi	r16, 0x01	; 1
    298e:	01 c0       	rjmp	.+2      	; 0x2992 <xTaskGenericNotify+0xfc>
    2990:	00 e0       	ldi	r16, 0x00	; 0
    2992:	81 30       	cpi	r24, 0x01	; 1
    2994:	09 f0       	breq	.+2      	; 0x2998 <xTaskGenericNotify+0x102>
    2996:	69 c0       	rjmp	.+210    	; 0x2a6a <xTaskGenericNotify+0x1d4>
    2998:	1c 96       	adiw	r26, 0x0c	; 12
    299a:	ed 91       	ld	r30, X+
    299c:	fc 91       	ld	r31, X
    299e:	1d 97       	sbiw	r26, 0x0d	; 13
    29a0:	16 96       	adiw	r26, 0x06	; 6
    29a2:	cd 91       	ld	r28, X+
    29a4:	dc 91       	ld	r29, X
    29a6:	17 97       	sbiw	r26, 0x07	; 7
    29a8:	18 96       	adiw	r26, 0x08	; 8
    29aa:	8d 91       	ld	r24, X+
    29ac:	9c 91       	ld	r25, X
    29ae:	19 97       	sbiw	r26, 0x09	; 9
    29b0:	9f 83       	std	Y+7, r25	; 0x07
    29b2:	8e 83       	std	Y+6, r24	; 0x06
    29b4:	18 96       	adiw	r26, 0x08	; 8
    29b6:	cd 91       	ld	r28, X+
    29b8:	dc 91       	ld	r29, X
    29ba:	19 97       	sbiw	r26, 0x09	; 9
    29bc:	16 96       	adiw	r26, 0x06	; 6
    29be:	8d 91       	ld	r24, X+
    29c0:	9c 91       	ld	r25, X
    29c2:	17 97       	sbiw	r26, 0x07	; 7
    29c4:	9d 83       	std	Y+5, r25	; 0x05
    29c6:	8c 83       	std	Y+4, r24	; 0x04
    29c8:	81 81       	ldd	r24, Z+1	; 0x01
    29ca:	92 81       	ldd	r25, Z+2	; 0x02
    29cc:	9d 01       	movw	r18, r26
    29ce:	2e 5f       	subi	r18, 0xFE	; 254
    29d0:	3f 4f       	sbci	r19, 0xFF	; 255
    29d2:	82 17       	cp	r24, r18
    29d4:	93 07       	cpc	r25, r19
    29d6:	31 f4       	brne	.+12     	; 0x29e4 <xTaskGenericNotify+0x14e>
    29d8:	18 96       	adiw	r26, 0x08	; 8
    29da:	8d 91       	ld	r24, X+
    29dc:	9c 91       	ld	r25, X
    29de:	19 97       	sbiw	r26, 0x09	; 9
    29e0:	92 83       	std	Z+2, r25	; 0x02
    29e2:	81 83       	std	Z+1, r24	; 0x01
    29e4:	1d 96       	adiw	r26, 0x0d	; 13
    29e6:	1c 92       	st	X, r1
    29e8:	1e 92       	st	-X, r1
    29ea:	1c 97       	sbiw	r26, 0x0c	; 12
    29ec:	80 81       	ld	r24, Z
    29ee:	81 50       	subi	r24, 0x01	; 1
    29f0:	80 83       	st	Z, r24
    29f2:	5a 96       	adiw	r26, 0x1a	; 26
    29f4:	ec 91       	ld	r30, X
    29f6:	5a 97       	sbiw	r26, 0x1a	; 26
    29f8:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <uxTopReadyPriority>
    29fc:	8e 17       	cp	r24, r30
    29fe:	10 f4       	brcc	.+4      	; 0x2a04 <xTaskGenericNotify+0x16e>
    2a00:	e0 93 43 12 	sts	0x1243, r30	; 0x801243 <uxTopReadyPriority>
    2a04:	8b e0       	ldi	r24, 0x0B	; 11
    2a06:	8e 9f       	mul	r24, r30
    2a08:	f0 01       	movw	r30, r0
    2a0a:	11 24       	eor	r1, r1
    2a0c:	eb 57       	subi	r30, 0x7B	; 123
    2a0e:	fd 4e       	sbci	r31, 0xED	; 237
    2a10:	01 80       	ldd	r0, Z+1	; 0x01
    2a12:	f2 81       	ldd	r31, Z+2	; 0x02
    2a14:	e0 2d       	mov	r30, r0
    2a16:	17 96       	adiw	r26, 0x07	; 7
    2a18:	fc 93       	st	X, r31
    2a1a:	ee 93       	st	-X, r30
    2a1c:	16 97       	sbiw	r26, 0x06	; 6
    2a1e:	46 81       	ldd	r20, Z+6	; 0x06
    2a20:	57 81       	ldd	r21, Z+7	; 0x07
    2a22:	19 96       	adiw	r26, 0x09	; 9
    2a24:	5c 93       	st	X, r21
    2a26:	4e 93       	st	-X, r20
    2a28:	18 97       	sbiw	r26, 0x08	; 8
    2a2a:	c6 81       	ldd	r28, Z+6	; 0x06
    2a2c:	d7 81       	ldd	r29, Z+7	; 0x07
    2a2e:	3d 83       	std	Y+5, r19	; 0x05
    2a30:	2c 83       	std	Y+4, r18	; 0x04
    2a32:	37 83       	std	Z+7, r19	; 0x07
    2a34:	26 83       	std	Z+6, r18	; 0x06
    2a36:	5a 96       	adiw	r26, 0x1a	; 26
    2a38:	ec 91       	ld	r30, X
    2a3a:	5a 97       	sbiw	r26, 0x1a	; 26
    2a3c:	8e 9f       	mul	r24, r30
    2a3e:	f0 01       	movw	r30, r0
    2a40:	11 24       	eor	r1, r1
    2a42:	eb 57       	subi	r30, 0x7B	; 123
    2a44:	fd 4e       	sbci	r31, 0xED	; 237
    2a46:	1d 96       	adiw	r26, 0x0d	; 13
    2a48:	fc 93       	st	X, r31
    2a4a:	ee 93       	st	-X, r30
    2a4c:	1c 97       	sbiw	r26, 0x0c	; 12
    2a4e:	80 81       	ld	r24, Z
    2a50:	8f 5f       	subi	r24, 0xFF	; 255
    2a52:	80 83       	st	Z, r24
    2a54:	5a 96       	adiw	r26, 0x1a	; 26
    2a56:	9c 91       	ld	r25, X
    2a58:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    2a5c:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    2a60:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a62:	89 17       	cp	r24, r25
    2a64:	10 f4       	brcc	.+4      	; 0x2a6a <xTaskGenericNotify+0x1d4>
    2a66:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
    2a6a:	0f 90       	pop	r0
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	80 2f       	mov	r24, r16
    2a70:	df 91       	pop	r29
    2a72:	cf 91       	pop	r28
    2a74:	0f 91       	pop	r16
    2a76:	ff 90       	pop	r15
    2a78:	ef 90       	pop	r14
    2a7a:	bf 90       	pop	r11
    2a7c:	af 90       	pop	r10
    2a7e:	9f 90       	pop	r9
    2a80:	8f 90       	pop	r8
    2a82:	08 95       	ret

00002a84 <xTaskGenericNotifyFromISR>:
    2a84:	8f 92       	push	r8
    2a86:	9f 92       	push	r9
    2a88:	af 92       	push	r10
    2a8a:	bf 92       	push	r11
    2a8c:	cf 92       	push	r12
    2a8e:	df 92       	push	r13
    2a90:	ef 92       	push	r14
    2a92:	ff 92       	push	r15
    2a94:	0f 93       	push	r16
    2a96:	cf 93       	push	r28
    2a98:	df 93       	push	r29
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	e1 14       	cp	r14, r1
    2a9e:	f1 04       	cpc	r15, r1
    2aa0:	89 f0       	breq	.+34     	; 0x2ac4 <xTaskGenericNotifyFromISR+0x40>
    2aa2:	e6 2f       	mov	r30, r22
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	ee 0f       	add	r30, r30
    2aa8:	ff 1f       	adc	r31, r31
    2aaa:	ee 0f       	add	r30, r30
    2aac:	ff 1f       	adc	r31, r31
    2aae:	e8 0f       	add	r30, r24
    2ab0:	f9 1f       	adc	r31, r25
    2ab2:	87 a4       	ldd	r8, Z+47	; 0x2f
    2ab4:	90 a8       	ldd	r9, Z+48	; 0x30
    2ab6:	a1 a8       	ldd	r10, Z+49	; 0x31
    2ab8:	b2 a8       	ldd	r11, Z+50	; 0x32
    2aba:	f7 01       	movw	r30, r14
    2abc:	80 82       	st	Z, r8
    2abe:	91 82       	std	Z+1, r9	; 0x01
    2ac0:	a2 82       	std	Z+2, r10	; 0x02
    2ac2:	b3 82       	std	Z+3, r11	; 0x03
    2ac4:	70 e0       	ldi	r23, 0x00	; 0
    2ac6:	fd 01       	movw	r30, r26
    2ac8:	e6 0f       	add	r30, r22
    2aca:	f7 1f       	adc	r31, r23
    2acc:	93 a9       	ldd	r25, Z+51	; 0x33
    2ace:	82 e0       	ldi	r24, 0x02	; 2
    2ad0:	83 ab       	std	Z+51, r24	; 0x33
    2ad2:	02 30       	cpi	r16, 0x02	; 2
    2ad4:	01 f1       	breq	.+64     	; 0x2b16 <xTaskGenericNotifyFromISR+0x92>
    2ad6:	18 f4       	brcc	.+6      	; 0x2ade <xTaskGenericNotifyFromISR+0x5a>
    2ad8:	01 30       	cpi	r16, 0x01	; 1
    2ada:	31 f0       	breq	.+12     	; 0x2ae8 <xTaskGenericNotifyFromISR+0x64>
    2adc:	4d c0       	rjmp	.+154    	; 0x2b78 <xTaskGenericNotifyFromISR+0xf4>
    2ade:	03 30       	cpi	r16, 0x03	; 3
    2ae0:	79 f1       	breq	.+94     	; 0x2b40 <xTaskGenericNotifyFromISR+0xbc>
    2ae2:	04 30       	cpi	r16, 0x04	; 4
    2ae4:	d1 f1       	breq	.+116    	; 0x2b5a <xTaskGenericNotifyFromISR+0xd6>
    2ae6:	48 c0       	rjmp	.+144    	; 0x2b78 <xTaskGenericNotifyFromISR+0xf4>
    2ae8:	66 0f       	add	r22, r22
    2aea:	77 1f       	adc	r23, r23
    2aec:	66 0f       	add	r22, r22
    2aee:	77 1f       	adc	r23, r23
    2af0:	fd 01       	movw	r30, r26
    2af2:	e6 0f       	add	r30, r22
    2af4:	f7 1f       	adc	r31, r23
    2af6:	87 a4       	ldd	r8, Z+47	; 0x2f
    2af8:	90 a8       	ldd	r9, Z+48	; 0x30
    2afa:	a1 a8       	ldd	r10, Z+49	; 0x31
    2afc:	b2 a8       	ldd	r11, Z+50	; 0x32
    2afe:	ba 01       	movw	r22, r20
    2b00:	a9 01       	movw	r20, r18
    2b02:	48 29       	or	r20, r8
    2b04:	59 29       	or	r21, r9
    2b06:	6a 29       	or	r22, r10
    2b08:	7b 29       	or	r23, r11
    2b0a:	47 a7       	std	Z+47, r20	; 0x2f
    2b0c:	50 ab       	std	Z+48, r21	; 0x30
    2b0e:	61 ab       	std	Z+49, r22	; 0x31
    2b10:	72 ab       	std	Z+50, r23	; 0x32
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	34 c0       	rjmp	.+104    	; 0x2b7e <xTaskGenericNotifyFromISR+0xfa>
    2b16:	66 0f       	add	r22, r22
    2b18:	77 1f       	adc	r23, r23
    2b1a:	66 0f       	add	r22, r22
    2b1c:	77 1f       	adc	r23, r23
    2b1e:	fd 01       	movw	r30, r26
    2b20:	e6 0f       	add	r30, r22
    2b22:	f7 1f       	adc	r31, r23
    2b24:	47 a5       	ldd	r20, Z+47	; 0x2f
    2b26:	50 a9       	ldd	r21, Z+48	; 0x30
    2b28:	61 a9       	ldd	r22, Z+49	; 0x31
    2b2a:	72 a9       	ldd	r23, Z+50	; 0x32
    2b2c:	4f 5f       	subi	r20, 0xFF	; 255
    2b2e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b30:	6f 4f       	sbci	r22, 0xFF	; 255
    2b32:	7f 4f       	sbci	r23, 0xFF	; 255
    2b34:	47 a7       	std	Z+47, r20	; 0x2f
    2b36:	50 ab       	std	Z+48, r21	; 0x30
    2b38:	61 ab       	std	Z+49, r22	; 0x31
    2b3a:	72 ab       	std	Z+50, r23	; 0x32
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	1f c0       	rjmp	.+62     	; 0x2b7e <xTaskGenericNotifyFromISR+0xfa>
    2b40:	66 0f       	add	r22, r22
    2b42:	77 1f       	adc	r23, r23
    2b44:	66 0f       	add	r22, r22
    2b46:	77 1f       	adc	r23, r23
    2b48:	fd 01       	movw	r30, r26
    2b4a:	e6 0f       	add	r30, r22
    2b4c:	f7 1f       	adc	r31, r23
    2b4e:	27 a7       	std	Z+47, r18	; 0x2f
    2b50:	30 ab       	std	Z+48, r19	; 0x30
    2b52:	41 ab       	std	Z+49, r20	; 0x31
    2b54:	52 ab       	std	Z+50, r21	; 0x32
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	12 c0       	rjmp	.+36     	; 0x2b7e <xTaskGenericNotifyFromISR+0xfa>
    2b5a:	92 30       	cpi	r25, 0x02	; 2
    2b5c:	79 f0       	breq	.+30     	; 0x2b7c <xTaskGenericNotifyFromISR+0xf8>
    2b5e:	66 0f       	add	r22, r22
    2b60:	77 1f       	adc	r23, r23
    2b62:	66 0f       	add	r22, r22
    2b64:	77 1f       	adc	r23, r23
    2b66:	fd 01       	movw	r30, r26
    2b68:	e6 0f       	add	r30, r22
    2b6a:	f7 1f       	adc	r31, r23
    2b6c:	27 a7       	std	Z+47, r18	; 0x2f
    2b6e:	30 ab       	std	Z+48, r19	; 0x30
    2b70:	41 ab       	std	Z+49, r20	; 0x31
    2b72:	52 ab       	std	Z+50, r21	; 0x32
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	03 c0       	rjmp	.+6      	; 0x2b7e <xTaskGenericNotifyFromISR+0xfa>
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	01 c0       	rjmp	.+2      	; 0x2b7e <xTaskGenericNotifyFromISR+0xfa>
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	91 30       	cpi	r25, 0x01	; 1
    2b80:	09 f0       	breq	.+2      	; 0x2b84 <xTaskGenericNotifyFromISR+0x100>
    2b82:	96 c0       	rjmp	.+300    	; 0x2cb0 <xTaskGenericNotifyFromISR+0x22c>
    2b84:	90 91 34 12 	lds	r25, 0x1234	; 0x801234 <uxSchedulerSuspended>
    2b88:	91 11       	cpse	r25, r1
    2b8a:	5f c0       	rjmp	.+190    	; 0x2c4a <xTaskGenericNotifyFromISR+0x1c6>
    2b8c:	1c 96       	adiw	r26, 0x0c	; 12
    2b8e:	ed 91       	ld	r30, X+
    2b90:	fc 91       	ld	r31, X
    2b92:	1d 97       	sbiw	r26, 0x0d	; 13
    2b94:	16 96       	adiw	r26, 0x06	; 6
    2b96:	cd 91       	ld	r28, X+
    2b98:	dc 91       	ld	r29, X
    2b9a:	17 97       	sbiw	r26, 0x07	; 7
    2b9c:	18 96       	adiw	r26, 0x08	; 8
    2b9e:	2d 91       	ld	r18, X+
    2ba0:	3c 91       	ld	r19, X
    2ba2:	19 97       	sbiw	r26, 0x09	; 9
    2ba4:	3f 83       	std	Y+7, r19	; 0x07
    2ba6:	2e 83       	std	Y+6, r18	; 0x06
    2ba8:	18 96       	adiw	r26, 0x08	; 8
    2baa:	cd 91       	ld	r28, X+
    2bac:	dc 91       	ld	r29, X
    2bae:	19 97       	sbiw	r26, 0x09	; 9
    2bb0:	16 96       	adiw	r26, 0x06	; 6
    2bb2:	2d 91       	ld	r18, X+
    2bb4:	3c 91       	ld	r19, X
    2bb6:	17 97       	sbiw	r26, 0x07	; 7
    2bb8:	3d 83       	std	Y+5, r19	; 0x05
    2bba:	2c 83       	std	Y+4, r18	; 0x04
    2bbc:	41 81       	ldd	r20, Z+1	; 0x01
    2bbe:	52 81       	ldd	r21, Z+2	; 0x02
    2bc0:	9d 01       	movw	r18, r26
    2bc2:	2e 5f       	subi	r18, 0xFE	; 254
    2bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc6:	42 17       	cp	r20, r18
    2bc8:	53 07       	cpc	r21, r19
    2bca:	31 f4       	brne	.+12     	; 0x2bd8 <xTaskGenericNotifyFromISR+0x154>
    2bcc:	18 96       	adiw	r26, 0x08	; 8
    2bce:	4d 91       	ld	r20, X+
    2bd0:	5c 91       	ld	r21, X
    2bd2:	19 97       	sbiw	r26, 0x09	; 9
    2bd4:	52 83       	std	Z+2, r21	; 0x02
    2bd6:	41 83       	std	Z+1, r20	; 0x01
    2bd8:	1d 96       	adiw	r26, 0x0d	; 13
    2bda:	1c 92       	st	X, r1
    2bdc:	1e 92       	st	-X, r1
    2bde:	1c 97       	sbiw	r26, 0x0c	; 12
    2be0:	90 81       	ld	r25, Z
    2be2:	91 50       	subi	r25, 0x01	; 1
    2be4:	90 83       	st	Z, r25
    2be6:	5a 96       	adiw	r26, 0x1a	; 26
    2be8:	ec 91       	ld	r30, X
    2bea:	5a 97       	sbiw	r26, 0x1a	; 26
    2bec:	90 91 43 12 	lds	r25, 0x1243	; 0x801243 <uxTopReadyPriority>
    2bf0:	9e 17       	cp	r25, r30
    2bf2:	10 f4       	brcc	.+4      	; 0x2bf8 <xTaskGenericNotifyFromISR+0x174>
    2bf4:	e0 93 43 12 	sts	0x1243, r30	; 0x801243 <uxTopReadyPriority>
    2bf8:	9b e0       	ldi	r25, 0x0B	; 11
    2bfa:	9e 9f       	mul	r25, r30
    2bfc:	f0 01       	movw	r30, r0
    2bfe:	11 24       	eor	r1, r1
    2c00:	eb 57       	subi	r30, 0x7B	; 123
    2c02:	fd 4e       	sbci	r31, 0xED	; 237
    2c04:	01 80       	ldd	r0, Z+1	; 0x01
    2c06:	f2 81       	ldd	r31, Z+2	; 0x02
    2c08:	e0 2d       	mov	r30, r0
    2c0a:	17 96       	adiw	r26, 0x07	; 7
    2c0c:	fc 93       	st	X, r31
    2c0e:	ee 93       	st	-X, r30
    2c10:	16 97       	sbiw	r26, 0x06	; 6
    2c12:	46 81       	ldd	r20, Z+6	; 0x06
    2c14:	57 81       	ldd	r21, Z+7	; 0x07
    2c16:	19 96       	adiw	r26, 0x09	; 9
    2c18:	5c 93       	st	X, r21
    2c1a:	4e 93       	st	-X, r20
    2c1c:	18 97       	sbiw	r26, 0x08	; 8
    2c1e:	c6 81       	ldd	r28, Z+6	; 0x06
    2c20:	d7 81       	ldd	r29, Z+7	; 0x07
    2c22:	3d 83       	std	Y+5, r19	; 0x05
    2c24:	2c 83       	std	Y+4, r18	; 0x04
    2c26:	37 83       	std	Z+7, r19	; 0x07
    2c28:	26 83       	std	Z+6, r18	; 0x06
    2c2a:	5a 96       	adiw	r26, 0x1a	; 26
    2c2c:	ec 91       	ld	r30, X
    2c2e:	5a 97       	sbiw	r26, 0x1a	; 26
    2c30:	9e 9f       	mul	r25, r30
    2c32:	f0 01       	movw	r30, r0
    2c34:	11 24       	eor	r1, r1
    2c36:	eb 57       	subi	r30, 0x7B	; 123
    2c38:	fd 4e       	sbci	r31, 0xED	; 237
    2c3a:	1d 96       	adiw	r26, 0x0d	; 13
    2c3c:	fc 93       	st	X, r31
    2c3e:	ee 93       	st	-X, r30
    2c40:	1c 97       	sbiw	r26, 0x0c	; 12
    2c42:	90 81       	ld	r25, Z
    2c44:	9f 5f       	subi	r25, 0xFF	; 255
    2c46:	90 83       	st	Z, r25
    2c48:	21 c0       	rjmp	.+66     	; 0x2c8c <xTaskGenericNotifyFromISR+0x208>
    2c4a:	60 e6       	ldi	r22, 0x60	; 96
    2c4c:	72 e1       	ldi	r23, 0x12	; 18
    2c4e:	fb 01       	movw	r30, r22
    2c50:	c1 81       	ldd	r28, Z+1	; 0x01
    2c52:	d2 81       	ldd	r29, Z+2	; 0x02
    2c54:	53 96       	adiw	r26, 0x13	; 19
    2c56:	dc 93       	st	X, r29
    2c58:	ce 93       	st	-X, r28
    2c5a:	52 97       	sbiw	r26, 0x12	; 18
    2c5c:	2e 81       	ldd	r18, Y+6	; 0x06
    2c5e:	3f 81       	ldd	r19, Y+7	; 0x07
    2c60:	55 96       	adiw	r26, 0x15	; 21
    2c62:	3c 93       	st	X, r19
    2c64:	2e 93       	st	-X, r18
    2c66:	54 97       	sbiw	r26, 0x14	; 20
    2c68:	4e 81       	ldd	r20, Y+6	; 0x06
    2c6a:	5f 81       	ldd	r21, Y+7	; 0x07
    2c6c:	9d 01       	movw	r18, r26
    2c6e:	22 5f       	subi	r18, 0xF2	; 242
    2c70:	3f 4f       	sbci	r19, 0xFF	; 255
    2c72:	fa 01       	movw	r30, r20
    2c74:	35 83       	std	Z+5, r19	; 0x05
    2c76:	24 83       	std	Z+4, r18	; 0x04
    2c78:	3f 83       	std	Y+7, r19	; 0x07
    2c7a:	2e 83       	std	Y+6, r18	; 0x06
    2c7c:	59 96       	adiw	r26, 0x19	; 25
    2c7e:	7c 93       	st	X, r23
    2c80:	6e 93       	st	-X, r22
    2c82:	58 97       	sbiw	r26, 0x18	; 24
    2c84:	fb 01       	movw	r30, r22
    2c86:	90 81       	ld	r25, Z
    2c88:	9f 5f       	subi	r25, 0xFF	; 255
    2c8a:	90 83       	st	Z, r25
    2c8c:	5a 96       	adiw	r26, 0x1a	; 26
    2c8e:	2c 91       	ld	r18, X
    2c90:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    2c94:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>
    2c98:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c9a:	92 17       	cp	r25, r18
    2c9c:	48 f4       	brcc	.+18     	; 0x2cb0 <xTaskGenericNotifyFromISR+0x22c>
    2c9e:	c1 14       	cp	r12, r1
    2ca0:	d1 04       	cpc	r13, r1
    2ca2:	19 f0       	breq	.+6      	; 0x2caa <xTaskGenericNotifyFromISR+0x226>
    2ca4:	91 e0       	ldi	r25, 0x01	; 1
    2ca6:	f6 01       	movw	r30, r12
    2ca8:	90 83       	st	Z, r25
    2caa:	91 e0       	ldi	r25, 0x01	; 1
    2cac:	90 93 3d 12 	sts	0x123D, r25	; 0x80123d <xYieldPending>
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	0f 91       	pop	r16
    2cb6:	ff 90       	pop	r15
    2cb8:	ef 90       	pop	r14
    2cba:	df 90       	pop	r13
    2cbc:	cf 90       	pop	r12
    2cbe:	bf 90       	pop	r11
    2cc0:	af 90       	pop	r10
    2cc2:	9f 90       	pop	r9
    2cc4:	8f 90       	pop	r8
    2cc6:	08 95       	ret

00002cc8 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	21 f4       	brne	.+8      	; 0x2cd4 <xTaskGenericNotifyStateClear+0xc>
    2ccc:	80 91 f3 12 	lds	r24, 0x12F3	; 0x8012f3 <pxCurrentTCB>
    2cd0:	90 91 f4 12 	lds	r25, 0x12F4	; 0x8012f4 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	f8 94       	cli
    2cd8:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2cda:	70 e0       	ldi	r23, 0x00	; 0
    2cdc:	fc 01       	movw	r30, r24
    2cde:	e6 0f       	add	r30, r22
    2ce0:	f7 1f       	adc	r31, r23
    2ce2:	23 a9       	ldd	r18, Z+51	; 0x33
    2ce4:	22 30       	cpi	r18, 0x02	; 2
    2ce6:	31 f4       	brne	.+12     	; 0x2cf4 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2ce8:	fc 01       	movw	r30, r24
    2cea:	e6 0f       	add	r30, r22
    2cec:	f7 1f       	adc	r31, r23
    2cee:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	01 c0       	rjmp	.+2      	; 0x2cf6 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2cf6:	0f 90       	pop	r0
    2cf8:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2cfa:	08 95       	ret

00002cfc <prvGetNextExpireTime>:
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	e0 91 ff 12 	lds	r30, 0x12FF	; 0x8012ff <pxCurrentTimerList>
    2d02:	f0 91 00 13 	lds	r31, 0x1300	; 0x801300 <pxCurrentTimerList+0x1>
    2d06:	80 81       	ld	r24, Z
    2d08:	91 e0       	ldi	r25, 0x01	; 1
    2d0a:	81 11       	cpse	r24, r1
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	9c 93       	st	X, r25
    2d10:	91 11       	cpse	r25, r1
    2d12:	08 c0       	rjmp	.+16     	; 0x2d24 <prvGetNextExpireTime+0x28>
    2d14:	07 80       	ldd	r0, Z+7	; 0x07
    2d16:	f0 85       	ldd	r31, Z+8	; 0x08
    2d18:	e0 2d       	mov	r30, r0
    2d1a:	60 81       	ld	r22, Z
    2d1c:	71 81       	ldd	r23, Z+1	; 0x01
    2d1e:	82 81       	ldd	r24, Z+2	; 0x02
    2d20:	93 81       	ldd	r25, Z+3	; 0x03
    2d22:	08 95       	ret
    2d24:	60 e0       	ldi	r22, 0x00	; 0
    2d26:	70 e0       	ldi	r23, 0x00	; 0
    2d28:	cb 01       	movw	r24, r22
    2d2a:	08 95       	ret

00002d2c <prvInsertTimerInActiveList>:
    2d2c:	cf 92       	push	r12
    2d2e:	df 92       	push	r13
    2d30:	ef 92       	push	r14
    2d32:	ff 92       	push	r15
    2d34:	0f 93       	push	r16
    2d36:	1f 93       	push	r17
    2d38:	fc 01       	movw	r30, r24
    2d3a:	42 83       	std	Z+2, r20	; 0x02
    2d3c:	53 83       	std	Z+3, r21	; 0x03
    2d3e:	64 83       	std	Z+4, r22	; 0x04
    2d40:	75 83       	std	Z+5, r23	; 0x05
    2d42:	93 87       	std	Z+11, r25	; 0x0b
    2d44:	82 87       	std	Z+10, r24	; 0x0a
    2d46:	04 17       	cp	r16, r20
    2d48:	15 07       	cpc	r17, r21
    2d4a:	26 07       	cpc	r18, r22
    2d4c:	37 07       	cpc	r19, r23
    2d4e:	c0 f0       	brcs	.+48     	; 0x2d80 <prvInsertTimerInActiveList+0x54>
    2d50:	0c 19       	sub	r16, r12
    2d52:	1d 09       	sbc	r17, r13
    2d54:	2e 09       	sbc	r18, r14
    2d56:	3f 09       	sbc	r19, r15
    2d58:	86 85       	ldd	r24, Z+14	; 0x0e
    2d5a:	97 85       	ldd	r25, Z+15	; 0x0f
    2d5c:	a0 89       	ldd	r26, Z+16	; 0x10
    2d5e:	b1 89       	ldd	r27, Z+17	; 0x11
    2d60:	08 17       	cp	r16, r24
    2d62:	19 07       	cpc	r17, r25
    2d64:	2a 07       	cpc	r18, r26
    2d66:	3b 07       	cpc	r19, r27
    2d68:	00 f5       	brcc	.+64     	; 0x2daa <prvInsertTimerInActiveList+0x7e>
    2d6a:	bf 01       	movw	r22, r30
    2d6c:	6e 5f       	subi	r22, 0xFE	; 254
    2d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d70:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <pxOverflowTimerList>
    2d74:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <pxOverflowTimerList+0x1>
    2d78:	0e 94 ba 02 	call	0x574	; 0x574 <vListInsert>
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
    2d7e:	18 c0       	rjmp	.+48     	; 0x2db0 <prvInsertTimerInActiveList+0x84>
    2d80:	0c 15       	cp	r16, r12
    2d82:	1d 05       	cpc	r17, r13
    2d84:	2e 05       	cpc	r18, r14
    2d86:	3f 05       	cpc	r19, r15
    2d88:	28 f4       	brcc	.+10     	; 0x2d94 <prvInsertTimerInActiveList+0x68>
    2d8a:	4c 15       	cp	r20, r12
    2d8c:	5d 05       	cpc	r21, r13
    2d8e:	6e 05       	cpc	r22, r14
    2d90:	7f 05       	cpc	r23, r15
    2d92:	68 f4       	brcc	.+26     	; 0x2dae <prvInsertTimerInActiveList+0x82>
    2d94:	bf 01       	movw	r22, r30
    2d96:	6e 5f       	subi	r22, 0xFE	; 254
    2d98:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9a:	80 91 ff 12 	lds	r24, 0x12FF	; 0x8012ff <pxCurrentTimerList>
    2d9e:	90 91 00 13 	lds	r25, 0x1300	; 0x801300 <pxCurrentTimerList+0x1>
    2da2:	0e 94 ba 02 	call	0x574	; 0x574 <vListInsert>
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	03 c0       	rjmp	.+6      	; 0x2db0 <prvInsertTimerInActiveList+0x84>
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	01 c0       	rjmp	.+2      	; 0x2db0 <prvInsertTimerInActiveList+0x84>
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	1f 91       	pop	r17
    2db2:	0f 91       	pop	r16
    2db4:	ff 90       	pop	r15
    2db6:	ef 90       	pop	r14
    2db8:	df 90       	pop	r13
    2dba:	cf 90       	pop	r12
    2dbc:	08 95       	ret

00002dbe <prvCheckForValidListAndQueue>:
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	f8 94       	cli
    2dc2:	0f 92       	push	r0
    2dc4:	80 91 fb 12 	lds	r24, 0x12FB	; 0x8012fb <xTimerQueue>
    2dc8:	90 91 fc 12 	lds	r25, 0x12FC	; 0x8012fc <xTimerQueue+0x1>
    2dcc:	89 2b       	or	r24, r25
    2dce:	e9 f4       	brne	.+58     	; 0x2e0a <prvCheckForValidListAndQueue+0x4c>
    2dd0:	8c e0       	ldi	r24, 0x0C	; 12
    2dd2:	93 e1       	ldi	r25, 0x13	; 19
    2dd4:	0e 94 a5 02 	call	0x54a	; 0x54a <vListInitialise>
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	93 e1       	ldi	r25, 0x13	; 19
    2ddc:	0e 94 a5 02 	call	0x54a	; 0x54a <vListInitialise>
    2de0:	8c e0       	ldi	r24, 0x0C	; 12
    2de2:	93 e1       	ldi	r25, 0x13	; 19
    2de4:	90 93 00 13 	sts	0x1300, r25	; 0x801300 <pxCurrentTimerList+0x1>
    2de8:	80 93 ff 12 	sts	0x12FF, r24	; 0x8012ff <pxCurrentTimerList>
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	93 e1       	ldi	r25, 0x13	; 19
    2df0:	90 93 fe 12 	sts	0x12FE, r25	; 0x8012fe <pxOverflowTimerList+0x1>
    2df4:	80 93 fd 12 	sts	0x12FD, r24	; 0x8012fd <pxOverflowTimerList>
    2df8:	40 e0       	ldi	r20, 0x00	; 0
    2dfa:	67 e0       	ldi	r22, 0x07	; 7
    2dfc:	8a e0       	ldi	r24, 0x0A	; 10
    2dfe:	0e 94 68 05 	call	0xad0	; 0xad0 <xQueueGenericCreate>
    2e02:	90 93 fc 12 	sts	0x12FC, r25	; 0x8012fc <xTimerQueue+0x1>
    2e06:	80 93 fb 12 	sts	0x12FB, r24	; 0x8012fb <xTimerQueue>
    2e0a:	0f 90       	pop	r0
    2e0c:	0f be       	out	0x3f, r0	; 63
    2e0e:	08 95       	ret

00002e10 <xTimerCreateTimerTask>:
    2e10:	ef 92       	push	r14
    2e12:	ff 92       	push	r15
    2e14:	0f 93       	push	r16
    2e16:	d3 df       	rcall	.-90     	; 0x2dbe <prvCheckForValidListAndQueue>
    2e18:	80 91 fb 12 	lds	r24, 0x12FB	; 0x8012fb <xTimerQueue>
    2e1c:	90 91 fc 12 	lds	r25, 0x12FC	; 0x8012fc <xTimerQueue+0x1>
    2e20:	89 2b       	or	r24, r25
    2e22:	91 f0       	breq	.+36     	; 0x2e48 <xTimerCreateTimerTask+0x38>
    2e24:	0f 2e       	mov	r0, r31
    2e26:	f9 ef       	ldi	r31, 0xF9	; 249
    2e28:	ef 2e       	mov	r14, r31
    2e2a:	f2 e1       	ldi	r31, 0x12	; 18
    2e2c:	ff 2e       	mov	r15, r31
    2e2e:	f0 2d       	mov	r31, r0
    2e30:	03 e0       	ldi	r16, 0x03	; 3
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	40 ec       	ldi	r20, 0xC0	; 192
    2e38:	50 e0       	ldi	r21, 0x00	; 0
    2e3a:	6c e9       	ldi	r22, 0x9C	; 156
    2e3c:	72 e0       	ldi	r23, 0x02	; 2
    2e3e:	87 ed       	ldi	r24, 0xD7	; 215
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <xTaskCreate>
    2e46:	01 c0       	rjmp	.+2      	; 0x2e4a <xTimerCreateTimerTask+0x3a>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	0f 91       	pop	r16
    2e4c:	ff 90       	pop	r15
    2e4e:	ef 90       	pop	r14
    2e50:	08 95       	ret

00002e52 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2e52:	8f 92       	push	r8
    2e54:	9f 92       	push	r9
    2e56:	af 92       	push	r10
    2e58:	bf 92       	push	r11
    2e5a:	cf 92       	push	r12
    2e5c:	df 92       	push	r13
    2e5e:	ef 92       	push	r14
    2e60:	ff 92       	push	r15
    2e62:	0f 93       	push	r16
    2e64:	1f 93       	push	r17
    2e66:	cf 93       	push	r28
    2e68:	df 93       	push	r29
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
    2e6e:	27 97       	sbiw	r28, 0x07	; 7
    2e70:	0f b6       	in	r0, 0x3f	; 63
    2e72:	f8 94       	cli
    2e74:	de bf       	out	0x3e, r29	; 62
    2e76:	0f be       	out	0x3f, r0	; 63
    2e78:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2e7a:	e0 91 fb 12 	lds	r30, 0x12FB	; 0x8012fb <xTimerQueue>
    2e7e:	f0 91 fc 12 	lds	r31, 0x12FC	; 0x8012fc <xTimerQueue+0x1>
    2e82:	30 97       	sbiw	r30, 0x00	; 0
    2e84:	81 f1       	breq	.+96     	; 0x2ee6 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2e86:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2e88:	2a 83       	std	Y+2, r18	; 0x02
    2e8a:	3b 83       	std	Y+3, r19	; 0x03
    2e8c:	4c 83       	std	Y+4, r20	; 0x04
    2e8e:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2e90:	9f 83       	std	Y+7, r25	; 0x07
    2e92:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2e94:	66 30       	cpi	r22, 0x06	; 6
    2e96:	f4 f4       	brge	.+60     	; 0x2ed4 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2e98:	ee da       	rcall	.-2596   	; 0x2476 <xTaskGetSchedulerState>
    2e9a:	82 30       	cpi	r24, 0x02	; 2
    2e9c:	69 f4       	brne	.+26     	; 0x2eb8 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2e9e:	00 e0       	ldi	r16, 0x00	; 0
    2ea0:	a7 01       	movw	r20, r14
    2ea2:	96 01       	movw	r18, r12
    2ea4:	be 01       	movw	r22, r28
    2ea6:	6f 5f       	subi	r22, 0xFF	; 255
    2ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eaa:	80 91 fb 12 	lds	r24, 0x12FB	; 0x8012fb <xTimerQueue>
    2eae:	90 91 fc 12 	lds	r25, 0x12FC	; 0x8012fc <xTimerQueue+0x1>
    2eb2:	0e 94 8b 05 	call	0xb16	; 0xb16 <xQueueGenericSend>
    2eb6:	18 c0       	rjmp	.+48     	; 0x2ee8 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2eb8:	00 e0       	ldi	r16, 0x00	; 0
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	a9 01       	movw	r20, r18
    2ec0:	be 01       	movw	r22, r28
    2ec2:	6f 5f       	subi	r22, 0xFF	; 255
    2ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec6:	80 91 fb 12 	lds	r24, 0x12FB	; 0x8012fb <xTimerQueue>
    2eca:	90 91 fc 12 	lds	r25, 0x12FC	; 0x8012fc <xTimerQueue+0x1>
    2ece:	0e 94 8b 05 	call	0xb16	; 0xb16 <xQueueGenericSend>
    2ed2:	0a c0       	rjmp	.+20     	; 0x2ee8 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	a8 01       	movw	r20, r16
    2ed8:	be 01       	movw	r22, r28
    2eda:	6f 5f       	subi	r22, 0xFF	; 255
    2edc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ede:	cf 01       	movw	r24, r30
    2ee0:	0e 94 3b 06 	call	0xc76	; 0xc76 <xQueueGenericSendFromISR>
    2ee4:	01 c0       	rjmp	.+2      	; 0x2ee8 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2ee8:	27 96       	adiw	r28, 0x07	; 7
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	f8 94       	cli
    2eee:	de bf       	out	0x3e, r29	; 62
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	cd bf       	out	0x3d, r28	; 61
    2ef4:	df 91       	pop	r29
    2ef6:	cf 91       	pop	r28
    2ef8:	1f 91       	pop	r17
    2efa:	0f 91       	pop	r16
    2efc:	ff 90       	pop	r15
    2efe:	ef 90       	pop	r14
    2f00:	df 90       	pop	r13
    2f02:	cf 90       	pop	r12
    2f04:	bf 90       	pop	r11
    2f06:	af 90       	pop	r10
    2f08:	9f 90       	pop	r9
    2f0a:	8f 90       	pop	r8
    2f0c:	08 95       	ret

00002f0e <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2f0e:	8f 92       	push	r8
    2f10:	9f 92       	push	r9
    2f12:	af 92       	push	r10
    2f14:	bf 92       	push	r11
    2f16:	cf 92       	push	r12
    2f18:	df 92       	push	r13
    2f1a:	ef 92       	push	r14
    2f1c:	ff 92       	push	r15
    2f1e:	0f 93       	push	r16
    2f20:	1f 93       	push	r17
    2f22:	cf 93       	push	r28
    2f24:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2f26:	3b c0       	rjmp	.+118    	; 0x2f9e <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2f28:	07 80       	ldd	r0, Z+7	; 0x07
    2f2a:	f0 85       	ldd	r31, Z+8	; 0x08
    2f2c:	e0 2d       	mov	r30, r0
    2f2e:	80 80       	ld	r8, Z
    2f30:	91 80       	ldd	r9, Z+1	; 0x01
    2f32:	a2 80       	ldd	r10, Z+2	; 0x02
    2f34:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2f36:	c0 85       	ldd	r28, Z+8	; 0x08
    2f38:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2f3a:	8e 01       	movw	r16, r28
    2f3c:	0e 5f       	subi	r16, 0xFE	; 254
    2f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f40:	c8 01       	movw	r24, r16
    2f42:	0e 94 f7 02 	call	0x5ee	; 0x5ee <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2f46:	ec 89       	ldd	r30, Y+20	; 0x14
    2f48:	fd 89       	ldd	r31, Y+21	; 0x15
    2f4a:	ce 01       	movw	r24, r28
    2f4c:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2f4e:	8e 89       	ldd	r24, Y+22	; 0x16
    2f50:	82 ff       	sbrs	r24, 2
    2f52:	25 c0       	rjmp	.+74     	; 0x2f9e <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2f54:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f56:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f58:	a8 89       	ldd	r26, Y+16	; 0x10
    2f5a:	b9 89       	ldd	r27, Y+17	; 0x11
    2f5c:	88 0d       	add	r24, r8
    2f5e:	99 1d       	adc	r25, r9
    2f60:	aa 1d       	adc	r26, r10
    2f62:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2f64:	88 16       	cp	r8, r24
    2f66:	99 06       	cpc	r9, r25
    2f68:	aa 06       	cpc	r10, r26
    2f6a:	bb 06       	cpc	r11, r27
    2f6c:	70 f4       	brcc	.+28     	; 0x2f8a <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2f6e:	8a 83       	std	Y+2, r24	; 0x02
    2f70:	9b 83       	std	Y+3, r25	; 0x03
    2f72:	ac 83       	std	Y+4, r26	; 0x04
    2f74:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2f76:	db 87       	std	Y+11, r29	; 0x0b
    2f78:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2f7a:	b8 01       	movw	r22, r16
    2f7c:	80 91 ff 12 	lds	r24, 0x12FF	; 0x8012ff <pxCurrentTimerList>
    2f80:	90 91 00 13 	lds	r25, 0x1300	; 0x801300 <pxCurrentTimerList+0x1>
    2f84:	0e 94 ba 02 	call	0x574	; 0x574 <vListInsert>
    2f88:	0a c0       	rjmp	.+20     	; 0x2f9e <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2f8a:	c1 2c       	mov	r12, r1
    2f8c:	d1 2c       	mov	r13, r1
    2f8e:	76 01       	movw	r14, r12
    2f90:	00 e0       	ldi	r16, 0x00	; 0
    2f92:	10 e0       	ldi	r17, 0x00	; 0
    2f94:	a5 01       	movw	r20, r10
    2f96:	94 01       	movw	r18, r8
    2f98:	60 e0       	ldi	r22, 0x00	; 0
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	5a df       	rcall	.-332    	; 0x2e52 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2f9e:	e0 91 ff 12 	lds	r30, 0x12FF	; 0x8012ff <pxCurrentTimerList>
    2fa2:	f0 91 00 13 	lds	r31, 0x1300	; 0x801300 <pxCurrentTimerList+0x1>
    2fa6:	80 81       	ld	r24, Z
    2fa8:	81 11       	cpse	r24, r1
    2faa:	be cf       	rjmp	.-132    	; 0x2f28 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2fac:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <pxOverflowTimerList>
    2fb0:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <pxOverflowTimerList+0x1>
    2fb4:	90 93 00 13 	sts	0x1300, r25	; 0x801300 <pxCurrentTimerList+0x1>
    2fb8:	80 93 ff 12 	sts	0x12FF, r24	; 0x8012ff <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2fbc:	f0 93 fe 12 	sts	0x12FE, r31	; 0x8012fe <pxOverflowTimerList+0x1>
    2fc0:	e0 93 fd 12 	sts	0x12FD, r30	; 0x8012fd <pxOverflowTimerList>
    }
    2fc4:	df 91       	pop	r29
    2fc6:	cf 91       	pop	r28
    2fc8:	1f 91       	pop	r17
    2fca:	0f 91       	pop	r16
    2fcc:	ff 90       	pop	r15
    2fce:	ef 90       	pop	r14
    2fd0:	df 90       	pop	r13
    2fd2:	cf 90       	pop	r12
    2fd4:	bf 90       	pop	r11
    2fd6:	af 90       	pop	r10
    2fd8:	9f 90       	pop	r9
    2fda:	8f 90       	pop	r8
    2fdc:	08 95       	ret

00002fde <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2fde:	cf 92       	push	r12
    2fe0:	df 92       	push	r13
    2fe2:	ef 92       	push	r14
    2fe4:	ff 92       	push	r15
    2fe6:	cf 93       	push	r28
    2fe8:	df 93       	push	r29
    2fea:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2fec:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <xTaskGetTickCount>
    2ff0:	6b 01       	movw	r12, r22
    2ff2:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2ff4:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <xLastTime.2436>
    2ff8:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <xLastTime.2436+0x1>
    2ffc:	a0 91 f7 12 	lds	r26, 0x12F7	; 0x8012f7 <xLastTime.2436+0x2>
    3000:	b0 91 f8 12 	lds	r27, 0x12F8	; 0x8012f8 <xLastTime.2436+0x3>
    3004:	c8 16       	cp	r12, r24
    3006:	d9 06       	cpc	r13, r25
    3008:	ea 06       	cpc	r14, r26
    300a:	fb 06       	cpc	r15, r27
    300c:	20 f4       	brcc	.+8      	; 0x3016 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    300e:	7f df       	rcall	.-258    	; 0x2f0e <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	88 83       	st	Y, r24
    3014:	01 c0       	rjmp	.+2      	; 0x3018 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3016:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3018:	c0 92 f5 12 	sts	0x12F5, r12	; 0x8012f5 <xLastTime.2436>
    301c:	d0 92 f6 12 	sts	0x12F6, r13	; 0x8012f6 <xLastTime.2436+0x1>
    3020:	e0 92 f7 12 	sts	0x12F7, r14	; 0x8012f7 <xLastTime.2436+0x2>
    3024:	f0 92 f8 12 	sts	0x12F8, r15	; 0x8012f8 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3028:	c7 01       	movw	r24, r14
    302a:	b6 01       	movw	r22, r12
    302c:	df 91       	pop	r29
    302e:	cf 91       	pop	r28
    3030:	ff 90       	pop	r15
    3032:	ef 90       	pop	r14
    3034:	df 90       	pop	r13
    3036:	cf 90       	pop	r12
    3038:	08 95       	ret

0000303a <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    303a:	4f 92       	push	r4
    303c:	5f 92       	push	r5
    303e:	6f 92       	push	r6
    3040:	7f 92       	push	r7
    3042:	8f 92       	push	r8
    3044:	9f 92       	push	r9
    3046:	af 92       	push	r10
    3048:	bf 92       	push	r11
    304a:	cf 92       	push	r12
    304c:	df 92       	push	r13
    304e:	ef 92       	push	r14
    3050:	ff 92       	push	r15
    3052:	0f 93       	push	r16
    3054:	1f 93       	push	r17
    3056:	cf 93       	push	r28
    3058:	df 93       	push	r29
    305a:	4b 01       	movw	r8, r22
    305c:	5c 01       	movw	r10, r24
    305e:	29 01       	movw	r4, r18
    3060:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3062:	e0 91 ff 12 	lds	r30, 0x12FF	; 0x8012ff <pxCurrentTimerList>
    3066:	f0 91 00 13 	lds	r31, 0x1300	; 0x801300 <pxCurrentTimerList+0x1>
    306a:	07 80       	ldd	r0, Z+7	; 0x07
    306c:	f0 85       	ldd	r31, Z+8	; 0x08
    306e:	e0 2d       	mov	r30, r0
    3070:	c0 85       	ldd	r28, Z+8	; 0x08
    3072:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3074:	ce 01       	movw	r24, r28
    3076:	02 96       	adiw	r24, 0x02	; 2
    3078:	0e 94 f7 02 	call	0x5ee	; 0x5ee <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    307c:	8e 89       	ldd	r24, Y+22	; 0x16
    307e:	82 ff       	sbrs	r24, 2
    3080:	1b c0       	rjmp	.+54     	; 0x30b8 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3082:	4e 85       	ldd	r20, Y+14	; 0x0e
    3084:	5f 85       	ldd	r21, Y+15	; 0x0f
    3086:	68 89       	ldd	r22, Y+16	; 0x10
    3088:	79 89       	ldd	r23, Y+17	; 0x11
    308a:	48 0d       	add	r20, r8
    308c:	59 1d       	adc	r21, r9
    308e:	6a 1d       	adc	r22, r10
    3090:	7b 1d       	adc	r23, r11
    3092:	75 01       	movw	r14, r10
    3094:	64 01       	movw	r12, r8
    3096:	93 01       	movw	r18, r6
    3098:	82 01       	movw	r16, r4
    309a:	ce 01       	movw	r24, r28
    309c:	47 de       	rcall	.-882    	; 0x2d2c <prvInsertTimerInActiveList>
    309e:	88 23       	and	r24, r24
    30a0:	69 f0       	breq	.+26     	; 0x30bc <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    30a2:	c1 2c       	mov	r12, r1
    30a4:	d1 2c       	mov	r13, r1
    30a6:	76 01       	movw	r14, r12
    30a8:	00 e0       	ldi	r16, 0x00	; 0
    30aa:	10 e0       	ldi	r17, 0x00	; 0
    30ac:	a5 01       	movw	r20, r10
    30ae:	94 01       	movw	r18, r8
    30b0:	60 e0       	ldi	r22, 0x00	; 0
    30b2:	ce 01       	movw	r24, r28
    30b4:	ce de       	rcall	.-612    	; 0x2e52 <xTimerGenericCommand>
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    30b8:	8e 7f       	andi	r24, 0xFE	; 254
    30ba:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    30bc:	ec 89       	ldd	r30, Y+20	; 0x14
    30be:	fd 89       	ldd	r31, Y+21	; 0x15
    30c0:	ce 01       	movw	r24, r28
    30c2:	19 95       	eicall
    }
    30c4:	df 91       	pop	r29
    30c6:	cf 91       	pop	r28
    30c8:	1f 91       	pop	r17
    30ca:	0f 91       	pop	r16
    30cc:	ff 90       	pop	r15
    30ce:	ef 90       	pop	r14
    30d0:	df 90       	pop	r13
    30d2:	cf 90       	pop	r12
    30d4:	bf 90       	pop	r11
    30d6:	af 90       	pop	r10
    30d8:	9f 90       	pop	r9
    30da:	8f 90       	pop	r8
    30dc:	7f 90       	pop	r7
    30de:	6f 90       	pop	r6
    30e0:	5f 90       	pop	r5
    30e2:	4f 90       	pop	r4
    30e4:	08 95       	ret

000030e6 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    30e6:	8f 92       	push	r8
    30e8:	9f 92       	push	r9
    30ea:	af 92       	push	r10
    30ec:	bf 92       	push	r11
    30ee:	cf 92       	push	r12
    30f0:	df 92       	push	r13
    30f2:	ef 92       	push	r14
    30f4:	ff 92       	push	r15
    30f6:	1f 93       	push	r17
    30f8:	cf 93       	push	r28
    30fa:	df 93       	push	r29
    30fc:	1f 92       	push	r1
    30fe:	cd b7       	in	r28, 0x3d	; 61
    3100:	de b7       	in	r29, 0x3e	; 62
    3102:	6b 01       	movw	r12, r22
    3104:	7c 01       	movw	r14, r24
    3106:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3108:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    310c:	ce 01       	movw	r24, r28
    310e:	01 96       	adiw	r24, 0x01	; 1
    3110:	66 df       	rcall	.-308    	; 0x2fde <prvSampleTimeNow>
    3112:	4b 01       	movw	r8, r22
    3114:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	81 11       	cpse	r24, r1
    311a:	2d c0       	rjmp	.+90     	; 0x3176 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    311c:	11 11       	cpse	r17, r1
    311e:	0d c0       	rjmp	.+26     	; 0x313a <prvProcessTimerOrBlockTask+0x54>
    3120:	8c 14       	cp	r8, r12
    3122:	9d 04       	cpc	r9, r13
    3124:	ae 04       	cpc	r10, r14
    3126:	bf 04       	cpc	r11, r15
    3128:	40 f0       	brcs	.+16     	; 0x313a <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    312a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    312e:	a5 01       	movw	r20, r10
    3130:	94 01       	movw	r18, r8
    3132:	c7 01       	movw	r24, r14
    3134:	b6 01       	movw	r22, r12
    3136:	81 df       	rcall	.-254    	; 0x303a <prvProcessExpiredTimer>
    3138:	20 c0       	rjmp	.+64     	; 0x317a <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    313a:	11 23       	and	r17, r17
    313c:	41 f0       	breq	.+16     	; 0x314e <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    313e:	e0 91 fd 12 	lds	r30, 0x12FD	; 0x8012fd <pxOverflowTimerList>
    3142:	f0 91 fe 12 	lds	r31, 0x12FE	; 0x8012fe <pxOverflowTimerList+0x1>
    3146:	80 81       	ld	r24, Z
    3148:	11 e0       	ldi	r17, 0x01	; 1
    314a:	81 11       	cpse	r24, r1
    314c:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    314e:	b7 01       	movw	r22, r14
    3150:	a6 01       	movw	r20, r12
    3152:	48 19       	sub	r20, r8
    3154:	59 09       	sbc	r21, r9
    3156:	6a 09       	sbc	r22, r10
    3158:	7b 09       	sbc	r23, r11
    315a:	21 2f       	mov	r18, r17
    315c:	80 91 fb 12 	lds	r24, 0x12FB	; 0x8012fb <xTimerQueue>
    3160:	90 91 fc 12 	lds	r25, 0x12FC	; 0x8012fc <xTimerQueue+0x1>
    3164:	0e 94 b6 07 	call	0xf6c	; 0xf6c <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3168:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <xTaskResumeAll>
    316c:	81 11       	cpse	r24, r1
    316e:	05 c0       	rjmp	.+10     	; 0x317a <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3170:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
    3174:	02 c0       	rjmp	.+4      	; 0x317a <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3176:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <xTaskResumeAll>
            }
        }
    }
    317a:	0f 90       	pop	r0
    317c:	df 91       	pop	r29
    317e:	cf 91       	pop	r28
    3180:	1f 91       	pop	r17
    3182:	ff 90       	pop	r15
    3184:	ef 90       	pop	r14
    3186:	df 90       	pop	r13
    3188:	cf 90       	pop	r12
    318a:	bf 90       	pop	r11
    318c:	af 90       	pop	r10
    318e:	9f 90       	pop	r9
    3190:	8f 90       	pop	r8
    3192:	08 95       	ret

00003194 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3194:	af 92       	push	r10
    3196:	bf 92       	push	r11
    3198:	cf 92       	push	r12
    319a:	df 92       	push	r13
    319c:	ef 92       	push	r14
    319e:	ff 92       	push	r15
    31a0:	0f 93       	push	r16
    31a2:	1f 93       	push	r17
    31a4:	cf 93       	push	r28
    31a6:	df 93       	push	r29
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
    31ac:	28 97       	sbiw	r28, 0x08	; 8
    31ae:	0f b6       	in	r0, 0x3f	; 63
    31b0:	f8 94       	cli
    31b2:	de bf       	out	0x3e, r29	; 62
    31b4:	0f be       	out	0x3f, r0	; 63
    31b6:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    31b8:	82 c0       	rjmp	.+260    	; 0x32be <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    31ba:	89 81       	ldd	r24, Y+1	; 0x01
    31bc:	88 23       	and	r24, r24
    31be:	0c f4       	brge	.+2      	; 0x31c2 <prvProcessReceivedCommands+0x2e>
    31c0:	7e c0       	rjmp	.+252    	; 0x32be <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    31c2:	ae 80       	ldd	r10, Y+6	; 0x06
    31c4:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    31c6:	d5 01       	movw	r26, r10
    31c8:	1c 96       	adiw	r26, 0x0c	; 12
    31ca:	8d 91       	ld	r24, X+
    31cc:	9c 91       	ld	r25, X
    31ce:	1d 97       	sbiw	r26, 0x0d	; 13
    31d0:	89 2b       	or	r24, r25
    31d2:	21 f0       	breq	.+8      	; 0x31dc <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    31d4:	c5 01       	movw	r24, r10
    31d6:	02 96       	adiw	r24, 0x02	; 2
    31d8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    31dc:	ce 01       	movw	r24, r28
    31de:	08 96       	adiw	r24, 0x08	; 8
    31e0:	fe de       	rcall	.-516    	; 0x2fde <prvSampleTimeNow>
    31e2:	8b 01       	movw	r16, r22
    31e4:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    31e6:	e9 81       	ldd	r30, Y+1	; 0x01
    31e8:	0e 2e       	mov	r0, r30
    31ea:	00 0c       	add	r0, r0
    31ec:	ff 0b       	sbc	r31, r31
    31ee:	ea 30       	cpi	r30, 0x0A	; 10
    31f0:	f1 05       	cpc	r31, r1
    31f2:	08 f0       	brcs	.+2      	; 0x31f6 <prvProcessReceivedCommands+0x62>
    31f4:	64 c0       	rjmp	.+200    	; 0x32be <prvProcessReceivedCommands+0x12a>
    31f6:	88 27       	eor	r24, r24
    31f8:	ee 58       	subi	r30, 0x8E	; 142
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	8f 4f       	sbci	r24, 0xFF	; 255
    31fe:	0c 94 c8 2c 	jmp	0x5990	; 0x5990 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3202:	f5 01       	movw	r30, r10
    3204:	86 89       	ldd	r24, Z+22	; 0x16
    3206:	81 60       	ori	r24, 0x01	; 1
    3208:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    320a:	ca 80       	ldd	r12, Y+2	; 0x02
    320c:	db 80       	ldd	r13, Y+3	; 0x03
    320e:	ec 80       	ldd	r14, Y+4	; 0x04
    3210:	fd 80       	ldd	r15, Y+5	; 0x05
    3212:	46 85       	ldd	r20, Z+14	; 0x0e
    3214:	57 85       	ldd	r21, Z+15	; 0x0f
    3216:	60 89       	ldd	r22, Z+16	; 0x10
    3218:	71 89       	ldd	r23, Z+17	; 0x11
    321a:	4c 0d       	add	r20, r12
    321c:	5d 1d       	adc	r21, r13
    321e:	6e 1d       	adc	r22, r14
    3220:	7f 1d       	adc	r23, r15
    3222:	c5 01       	movw	r24, r10
    3224:	83 dd       	rcall	.-1274   	; 0x2d2c <prvInsertTimerInActiveList>
    3226:	88 23       	and	r24, r24
    3228:	09 f4       	brne	.+2      	; 0x322c <prvProcessReceivedCommands+0x98>
    322a:	49 c0       	rjmp	.+146    	; 0x32be <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    322c:	d5 01       	movw	r26, r10
    322e:	54 96       	adiw	r26, 0x14	; 20
    3230:	ed 91       	ld	r30, X+
    3232:	fc 91       	ld	r31, X
    3234:	55 97       	sbiw	r26, 0x15	; 21
    3236:	c5 01       	movw	r24, r10
    3238:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    323a:	f5 01       	movw	r30, r10
    323c:	86 89       	ldd	r24, Z+22	; 0x16
    323e:	82 ff       	sbrs	r24, 2
    3240:	3e c0       	rjmp	.+124    	; 0x32be <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3242:	4a 81       	ldd	r20, Y+2	; 0x02
    3244:	5b 81       	ldd	r21, Y+3	; 0x03
    3246:	6c 81       	ldd	r22, Y+4	; 0x04
    3248:	7d 81       	ldd	r23, Y+5	; 0x05
    324a:	86 85       	ldd	r24, Z+14	; 0x0e
    324c:	97 85       	ldd	r25, Z+15	; 0x0f
    324e:	a0 89       	ldd	r26, Z+16	; 0x10
    3250:	b1 89       	ldd	r27, Z+17	; 0x11
    3252:	9a 01       	movw	r18, r20
    3254:	ab 01       	movw	r20, r22
    3256:	28 0f       	add	r18, r24
    3258:	39 1f       	adc	r19, r25
    325a:	4a 1f       	adc	r20, r26
    325c:	5b 1f       	adc	r21, r27
    325e:	c1 2c       	mov	r12, r1
    3260:	d1 2c       	mov	r13, r1
    3262:	76 01       	movw	r14, r12
    3264:	00 e0       	ldi	r16, 0x00	; 0
    3266:	10 e0       	ldi	r17, 0x00	; 0
    3268:	60 e0       	ldi	r22, 0x00	; 0
    326a:	c5 01       	movw	r24, r10
    326c:	f2 dd       	rcall	.-1052   	; 0x2e52 <xTimerGenericCommand>
    326e:	27 c0       	rjmp	.+78     	; 0x32be <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3270:	d5 01       	movw	r26, r10
    3272:	56 96       	adiw	r26, 0x16	; 22
    3274:	8c 91       	ld	r24, X
    3276:	56 97       	sbiw	r26, 0x16	; 22
    3278:	8e 7f       	andi	r24, 0xFE	; 254
    327a:	56 96       	adiw	r26, 0x16	; 22
    327c:	8c 93       	st	X, r24
                        break;
    327e:	1f c0       	rjmp	.+62     	; 0x32be <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3280:	f5 01       	movw	r30, r10
    3282:	86 89       	ldd	r24, Z+22	; 0x16
    3284:	81 60       	ori	r24, 0x01	; 1
    3286:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3288:	4a 81       	ldd	r20, Y+2	; 0x02
    328a:	5b 81       	ldd	r21, Y+3	; 0x03
    328c:	6c 81       	ldd	r22, Y+4	; 0x04
    328e:	7d 81       	ldd	r23, Y+5	; 0x05
    3290:	46 87       	std	Z+14, r20	; 0x0e
    3292:	57 87       	std	Z+15, r21	; 0x0f
    3294:	60 8b       	std	Z+16, r22	; 0x10
    3296:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3298:	40 0f       	add	r20, r16
    329a:	51 1f       	adc	r21, r17
    329c:	62 1f       	adc	r22, r18
    329e:	73 1f       	adc	r23, r19
    32a0:	68 01       	movw	r12, r16
    32a2:	79 01       	movw	r14, r18
    32a4:	c5 01       	movw	r24, r10
    32a6:	42 dd       	rcall	.-1404   	; 0x2d2c <prvInsertTimerInActiveList>
                        break;
    32a8:	0a c0       	rjmp	.+20     	; 0x32be <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    32aa:	f5 01       	movw	r30, r10
    32ac:	86 89       	ldd	r24, Z+22	; 0x16
    32ae:	81 fd       	sbrc	r24, 1
    32b0:	04 c0       	rjmp	.+8      	; 0x32ba <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    32b2:	c5 01       	movw	r24, r10
    32b4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <vPortFree>
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    32ba:	8e 7f       	andi	r24, 0xFE	; 254
    32bc:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	a9 01       	movw	r20, r18
    32c4:	be 01       	movw	r22, r28
    32c6:	6f 5f       	subi	r22, 0xFF	; 255
    32c8:	7f 4f       	sbci	r23, 0xFF	; 255
    32ca:	80 91 fb 12 	lds	r24, 0x12FB	; 0x8012fb <xTimerQueue>
    32ce:	90 91 fc 12 	lds	r25, 0x12FC	; 0x8012fc <xTimerQueue+0x1>
    32d2:	0e 94 76 06 	call	0xcec	; 0xcec <xQueueReceive>
    32d6:	81 11       	cpse	r24, r1
    32d8:	70 cf       	rjmp	.-288    	; 0x31ba <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    32da:	28 96       	adiw	r28, 0x08	; 8
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	f8 94       	cli
    32e0:	de bf       	out	0x3e, r29	; 62
    32e2:	0f be       	out	0x3f, r0	; 63
    32e4:	cd bf       	out	0x3d, r28	; 61
    32e6:	df 91       	pop	r29
    32e8:	cf 91       	pop	r28
    32ea:	1f 91       	pop	r17
    32ec:	0f 91       	pop	r16
    32ee:	ff 90       	pop	r15
    32f0:	ef 90       	pop	r14
    32f2:	df 90       	pop	r13
    32f4:	cf 90       	pop	r12
    32f6:	bf 90       	pop	r11
    32f8:	af 90       	pop	r10
    32fa:	08 95       	ret

000032fc <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    32fc:	08 95       	ret

000032fe <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    32fe:	84 b1       	in	r24, 0x04	; 4
    3300:	80 68       	ori	r24, 0x80	; 128
    3302:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3304:	85 b1       	in	r24, 0x05	; 5
    3306:	80 68       	ori	r24, 0x80	; 128
    3308:	85 b9       	out	0x05, r24	; 5
    330a:	08 95       	ret

0000330c <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    330c:	83 b1       	in	r24, 0x03	; 3
    330e:	80 68       	ori	r24, 0x80	; 128
    3310:	83 b9       	out	0x03, r24	; 3
    3312:	08 95       	ret

00003314 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3314:	f4 df       	rcall	.-24     	; 0x32fe <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3316:	2f ef       	ldi	r18, 0xFF	; 255
    3318:	80 e7       	ldi	r24, 0x70	; 112
    331a:	92 e0       	ldi	r25, 0x02	; 2
    331c:	21 50       	subi	r18, 0x01	; 1
    331e:	80 40       	sbci	r24, 0x00	; 0
    3320:	90 40       	sbci	r25, 0x00	; 0
    3322:	e1 f7       	brne	.-8      	; 0x331c <vApplicationMallocFailedHook+0x8>
    3324:	00 c0       	rjmp	.+0      	; 0x3326 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3326:	00 00       	nop
    3328:	f1 df       	rcall	.-30     	; 0x330c <prvBlinkMainLed>
    332a:	f5 cf       	rjmp	.-22     	; 0x3316 <vApplicationMallocFailedHook+0x2>

0000332c <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    332c:	e8 df       	rcall	.-48     	; 0x32fe <prvSetMainLedOn>
    332e:	2f ef       	ldi	r18, 0xFF	; 255
    3330:	87 ea       	ldi	r24, 0xA7	; 167
    3332:	91 e6       	ldi	r25, 0x61	; 97
    3334:	21 50       	subi	r18, 0x01	; 1
    3336:	80 40       	sbci	r24, 0x00	; 0
    3338:	90 40       	sbci	r25, 0x00	; 0
    333a:	e1 f7       	brne	.-8      	; 0x3334 <vApplicationStackOverflowHook+0x8>
    333c:	00 c0       	rjmp	.+0      	; 0x333e <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    333e:	00 00       	nop
    3340:	e5 df       	rcall	.-54     	; 0x330c <prvBlinkMainLed>
    3342:	f5 cf       	rjmp	.-22     	; 0x332e <vApplicationStackOverflowHook+0x2>

00003344 <tempAndHumidityTask>:

void tempAndHumidityTask(void* pvParameters){
	(void) pvParameters;
	
	while(1){
		vTaskDelay(pdMS_TO_TICKS(2000UL)); //every 2 sec
    3344:	6c e7       	ldi	r22, 0x7C	; 124
    3346:	70 e0       	ldi	r23, 0x00	; 0
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	0e 94 1d 10 	call	0x203a	; 0x203a <vTaskDelay>
		
		int returnCode = hih8120_wakeup();
    3350:	40 d3       	rcall	.+1664   	; 0x39d2 <hih8120_wakeup>
    3352:	28 2f       	mov	r18, r24
    3354:	30 e0       	ldi	r19, 0x00	; 0
		if(HIH8120_OK != returnCode && returnCode!= HIH8120_TWI_BUSY){
    3356:	21 15       	cp	r18, r1
    3358:	31 05       	cpc	r19, r1
    335a:	79 f0       	breq	.+30     	; 0x337a <tempAndHumidityTask+0x36>
    335c:	23 30       	cpi	r18, 0x03	; 3
    335e:	31 05       	cpc	r19, r1
    3360:	61 f0       	breq	.+24     	; 0x337a <tempAndHumidityTask+0x36>
			printf("HIH8120 wakeup error %d \n",returnCode);
    3362:	1f 92       	push	r1
    3364:	8f 93       	push	r24
    3366:	84 ea       	ldi	r24, 0xA4	; 164
    3368:	92 e0       	ldi	r25, 0x02	; 2
    336a:	9f 93       	push	r25
    336c:	8f 93       	push	r24
    336e:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
		}
		
		vTaskDelay(pdMS_TO_TICKS(100UL));
    337a:	66 e0       	ldi	r22, 0x06	; 6
    337c:	70 e0       	ldi	r23, 0x00	; 0
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	0e 94 1d 10 	call	0x203a	; 0x203a <vTaskDelay>
		
		returnCode = hih8120_measure();
    3386:	3a d3       	rcall	.+1652   	; 0x39fc <hih8120_measure>
    3388:	28 2f       	mov	r18, r24
    338a:	30 e0       	ldi	r19, 0x00	; 0
		if(HIH8120_OK!=returnCode && returnCode!= HIH8120_TWI_BUSY){
    338c:	21 15       	cp	r18, r1
    338e:	31 05       	cpc	r19, r1
    3390:	79 f0       	breq	.+30     	; 0x33b0 <tempAndHumidityTask+0x6c>
    3392:	23 30       	cpi	r18, 0x03	; 3
    3394:	31 05       	cpc	r19, r1
    3396:	61 f0       	breq	.+24     	; 0x33b0 <tempAndHumidityTask+0x6c>
			printf("HIH8120 measure error %d \n",returnCode);
    3398:	1f 92       	push	r1
    339a:	8f 93       	push	r24
    339c:	8e eb       	ldi	r24, 0xBE	; 190
    339e:	92 e0       	ldi	r25, 0x02	; 2
    33a0:	9f 93       	push	r25
    33a2:	8f 93       	push	r24
    33a4:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>
    33a8:	0f 90       	pop	r0
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
		}
		
		vTaskDelay(pdMS_TO_TICKS(100UL));
    33b0:	66 e0       	ldi	r22, 0x06	; 6
    33b2:	70 e0       	ldi	r23, 0x00	; 0
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	0e 94 1d 10 	call	0x203a	; 0x203a <vTaskDelay>
		
		xSemaphoreTake(hardware_semaphore, portMAX_DELAY);
    33bc:	4f ef       	ldi	r20, 0xFF	; 255
    33be:	5f ef       	ldi	r21, 0xFF	; 255
    33c0:	ba 01       	movw	r22, r20
    33c2:	80 91 7a 14 	lds	r24, 0x147A	; 0x80147a <hardware_semaphore>
    33c6:	90 91 7b 14 	lds	r25, 0x147B	; 0x80147b <hardware_semaphore+0x1>
    33ca:	0e 94 05 07 	call	0xe0a	; 0xe0a <xQueueSemaphoreTake>
		
		entry_data.humidity=hih8120_getHumidityPercent_x10();
    33ce:	3c d3       	rcall	.+1656   	; 0x3a48 <hih8120_getHumidityPercent_x10>
    33d0:	ca e6       	ldi	r28, 0x6A	; 106
    33d2:	d4 e1       	ldi	r29, 0x14	; 20
    33d4:	9b 83       	std	Y+3, r25	; 0x03
		entry_data.temperature=hih8120_getTemperature_x10();
    33d6:	8a 83       	std	Y+2, r24	; 0x02
    33d8:	5c d3       	rcall	.+1720   	; 0x3a92 <hih8120_getTemperature_x10>
    33da:	88 83       	st	Y, r24
    33dc:	99 83       	std	Y+1, r25	; 0x01
		
		printf("Humidity= %d and Temperature= %d \n",entry_data.humidity,entry_data.temperature);
    33de:	9f 93       	push	r25
    33e0:	8f 93       	push	r24
    33e2:	8b 81       	ldd	r24, Y+3	; 0x03
    33e4:	8f 93       	push	r24
    33e6:	8a 81       	ldd	r24, Y+2	; 0x02
    33e8:	8f 93       	push	r24
    33ea:	89 ed       	ldi	r24, 0xD9	; 217
    33ec:	92 e0       	ldi	r25, 0x02	; 2
    33ee:	9f 93       	push	r25
    33f0:	8f 93       	push	r24
    33f2:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>
		xSemaphoreGive(hardware_semaphore);
    33f6:	00 e0       	ldi	r16, 0x00	; 0
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	a9 01       	movw	r20, r18
    33fe:	60 e0       	ldi	r22, 0x00	; 0
    3400:	70 e0       	ldi	r23, 0x00	; 0
    3402:	80 91 7a 14 	lds	r24, 0x147A	; 0x80147a <hardware_semaphore>
    3406:	90 91 7b 14 	lds	r25, 0x147B	; 0x80147b <hardware_semaphore+0x1>
    340a:	0e 94 8b 05 	call	0xb16	; 0xb16 <xQueueGenericSend>
	}
    340e:	0f 90       	pop	r0
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	0f 90       	pop	r0
    3418:	0f 90       	pop	r0
    341a:	94 cf       	rjmp	.-216    	; 0x3344 <tempAndHumidityTask>

0000341c <lightTask>:

void lightTask(void* pvParameters) {
	(void)pvParameters;

	while (1) {
		vTaskDelay(pdMS_TO_TICKS(7000UL));
    341c:	62 eb       	ldi	r22, 0xB2	; 178
    341e:	71 e0       	ldi	r23, 0x01	; 1
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	0e 94 1d 10 	call	0x203a	; 0x203a <vTaskDelay>
		int statusCode = tsl2591_fetchData();
    3428:	0e 94 35 28 	call	0x506a	; 0x506a <tsl2591_fetchData>
    342c:	90 e0       	ldi	r25, 0x00	; 0
		if (statusCode != TSL2591_OK) {
    342e:	00 97       	sbiw	r24, 0x00	; 0
    3430:	a9 f3       	breq	.-22     	; 0x341c <lightTask>
			printf("Light data error: %d\n", statusCode);
    3432:	9f 93       	push	r25
    3434:	8f 93       	push	r24
    3436:	8c ef       	ldi	r24, 0xFC	; 252
    3438:	92 e0       	ldi	r25, 0x02	; 2
    343a:	9f 93       	push	r25
    343c:	8f 93       	push	r24
    343e:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>
    3442:	0f 90       	pop	r0
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	e8 cf       	rjmp	.-48     	; 0x341c <lightTask>

0000344c <lightCallback>:
	}

}


void lightCallback(tsl2591_returnCode_t rc) {
    344c:	0f 93       	push	r16
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	00 d0       	rcall	.+0      	; 0x3454 <lightCallback+0x8>
    3454:	1f 92       	push	r1
    3456:	cd b7       	in	r28, 0x3d	; 61
    3458:	de b7       	in	r29, 0x3e	; 62
	float lux;
	xSemaphoreTake(hardware_semaphore, portMAX_DELAY);
    345a:	4f ef       	ldi	r20, 0xFF	; 255
    345c:	5f ef       	ldi	r21, 0xFF	; 255
    345e:	ba 01       	movw	r22, r20
    3460:	80 91 7a 14 	lds	r24, 0x147A	; 0x80147a <hardware_semaphore>
    3464:	90 91 7b 14 	lds	r25, 0x147B	; 0x80147b <hardware_semaphore+0x1>
    3468:	0e 94 05 07 	call	0xe0a	; 0xe0a <xQueueSemaphoreTake>
	
	if (TSL2591_OK == (rc = tsl2591_getLux(&lux)))
    346c:	ce 01       	movw	r24, r28
    346e:	01 96       	adiw	r24, 0x01	; 1
    3470:	0e 94 47 28 	call	0x508e	; 0x508e <tsl2591_getLux>
    3474:	81 11       	cpse	r24, r1
    3476:	1b c0       	rjmp	.+54     	; 0x34ae <lightCallback+0x62>
	{
		printf("Lux: %d\n", (uint16_t)lux);
    3478:	69 81       	ldd	r22, Y+1	; 0x01
    347a:	7a 81       	ldd	r23, Y+2	; 0x02
    347c:	8b 81       	ldd	r24, Y+3	; 0x03
    347e:	9c 81       	ldd	r25, Y+4	; 0x04
    3480:	0e d2       	rcall	.+1052   	; 0x389e <__fixunssfsi>
    3482:	7f 93       	push	r23
    3484:	6f 93       	push	r22
    3486:	82 e1       	ldi	r24, 0x12	; 18
    3488:	93 e0       	ldi	r25, 0x03	; 3
    348a:	9f 93       	push	r25
    348c:	8f 93       	push	r24
    348e:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>
		entry_data.light = (uint16_t)lux;
    3492:	69 81       	ldd	r22, Y+1	; 0x01
    3494:	7a 81       	ldd	r23, Y+2	; 0x02
    3496:	8b 81       	ldd	r24, Y+3	; 0x03
    3498:	9c 81       	ldd	r25, Y+4	; 0x04
    349a:	01 d2       	rcall	.+1026   	; 0x389e <__fixunssfsi>
    349c:	70 93 71 14 	sts	0x1471, r23	; 0x801471 <entry_data+0x7>
    34a0:	60 93 70 14 	sts	0x1470, r22	; 0x801470 <entry_data+0x6>
    34a4:	0f 90       	pop	r0
    34a6:	0f 90       	pop	r0
    34a8:	0f 90       	pop	r0
    34aa:	0f 90       	pop	r0
    34ac:	06 c0       	rjmp	.+12     	; 0x34ba <lightCallback+0x6e>
	}
	else if (TSL2591_OVERFLOW == rc)
    34ae:	83 30       	cpi	r24, 0x03	; 3
    34b0:	21 f4       	brne	.+8      	; 0x34ba <lightCallback+0x6e>
	{
		printf("Lux overflow\n");
    34b2:	8b e1       	ldi	r24, 0x1B	; 27
    34b4:	93 e0       	ldi	r25, 0x03	; 3
    34b6:	0e 94 67 2e 	call	0x5cce	; 0x5cce <puts>
	}
	xSemaphoreGive(hardware_semaphore);
    34ba:	00 e0       	ldi	r16, 0x00	; 0
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	a9 01       	movw	r20, r18
    34c2:	60 e0       	ldi	r22, 0x00	; 0
    34c4:	70 e0       	ldi	r23, 0x00	; 0
    34c6:	80 91 7a 14 	lds	r24, 0x147A	; 0x80147a <hardware_semaphore>
    34ca:	90 91 7b 14 	lds	r25, 0x147B	; 0x80147b <hardware_semaphore+0x1>
    34ce:	0e 94 8b 05 	call	0xb16	; 0xb16 <xQueueGenericSend>
    34d2:	0f 90       	pop	r0
    34d4:	0f 90       	pop	r0
    34d6:	0f 90       	pop	r0
    34d8:	0f 90       	pop	r0
    34da:	df 91       	pop	r29
    34dc:	cf 91       	pop	r28
    34de:	0f 91       	pop	r16
    34e0:	08 95       	ret

000034e2 <_lora_setup>:
}*/

static lora_driver_payload_t _uplink_payload;

static void _lora_setup(void)
{
    34e2:	0f 93       	push	r16
    34e4:	1f 93       	push	r17
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
    34ee:	64 97       	sbiw	r28, 0x14	; 20
    34f0:	0f b6       	in	r0, 0x3f	; 63
    34f2:	f8 94       	cli
    34f4:	de bf       	out	0x3e, r29	; 62
    34f6:	0f be       	out	0x3f, r0	; 63
    34f8:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	0e 94 83 27 	call	0x4f06	; 0x4f06 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3500:	40 d4       	rcall	.+2176   	; 0x3d82 <lora_driver_rn2483FactoryReset>
    3502:	bc d6       	rcall	.+3448   	; 0x427c <lora_driver_mapReturnCodeToText>
    3504:	9f 93       	push	r25
    3506:	8f 93       	push	r24
    3508:	88 e2       	ldi	r24, 0x28	; 40
    350a:	93 e0       	ldi	r25, 0x03	; 3
    350c:	9f 93       	push	r25
    350e:	8f 93       	push	r24
    3510:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3514:	b4 d5       	rcall	.+2920   	; 0x407e <lora_driver_configureToEu868>
    3516:	b2 d6       	rcall	.+3428   	; 0x427c <lora_driver_mapReturnCodeToText>
    3518:	9f 93       	push	r25
    351a:	8f 93       	push	r24
    351c:	8b e3       	ldi	r24, 0x3B	; 59
    351e:	93 e0       	ldi	r25, 0x03	; 3
    3520:	9f 93       	push	r25
    3522:	8f 93       	push	r24
    3524:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>
    3528:	8e 01       	movw	r16, r28
    352a:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    352c:	1f 4f       	sbci	r17, 0xFF	; 255
    352e:	c8 01       	movw	r24, r16
    3530:	3a d4       	rcall	.+2164   	; 0x3da6 <lora_driver_getRn2483Hweui>
    3532:	a4 d6       	rcall	.+3400   	; 0x427c <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3534:	1f 93       	push	r17
    3536:	0f 93       	push	r16
    3538:	9f 93       	push	r25
    353a:	8f 93       	push	r24
    353c:	84 e5       	ldi	r24, 0x54	; 84
    353e:	93 e0       	ldi	r25, 0x03	; 3
    3540:	9f 93       	push	r25
    3542:	8f 93       	push	r24
    3544:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3548:	c8 01       	movw	r24, r16
    354a:	49 d4       	rcall	.+2194   	; 0x3dde <lora_driver_setDeviceIdentifier>
    354c:	97 d6       	rcall	.+3374   	; 0x427c <lora_driver_mapReturnCodeToText>
    354e:	9f 93       	push	r25
    3550:	8f 93       	push	r24
    3552:	1f 93       	push	r17
    3554:	0f 93       	push	r16
    3556:	88 e6       	ldi	r24, 0x68	; 104
    3558:	93 e0       	ldi	r25, 0x03	; 3
    355a:	9f 93       	push	r25
    355c:	8f 93       	push	r24
    355e:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3562:	a8 01       	movw	r20, r16
    3564:	6d e7       	ldi	r22, 0x7D	; 125
    3566:	73 e0       	ldi	r23, 0x03	; 3
    3568:	8e e9       	ldi	r24, 0x9E	; 158
    356a:	93 e0       	ldi	r25, 0x03	; 3
    356c:	66 d6       	rcall	.+3276   	; 0x423a <lora_driver_setOtaaIdentity>
    356e:	86 d6       	rcall	.+3340   	; 0x427c <lora_driver_mapReturnCodeToText>
    3570:	9f 93       	push	r25
    3572:	8f 93       	push	r24
    3574:	1f 93       	push	r17
    3576:	0f 93       	push	r16
    3578:	8d e7       	ldi	r24, 0x7D	; 125
    357a:	93 e0       	ldi	r25, 0x03	; 3
    357c:	9f 93       	push	r25
    357e:	8f 93       	push	r24
    3580:	8e e9       	ldi	r24, 0x9E	; 158
    3582:	93 e0       	ldi	r25, 0x03	; 3
    3584:	9f 93       	push	r25
    3586:	8f 93       	push	r24
    3588:	8f ea       	ldi	r24, 0xAF	; 175
    358a:	93 e0       	ldi	r25, 0x03	; 3
    358c:	9f 93       	push	r25
    358e:	8f 93       	push	r24
    3590:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3594:	57 d4       	rcall	.+2222   	; 0x3e44 <lora_driver_saveMac>
    3596:	72 d6       	rcall	.+3300   	; 0x427c <lora_driver_mapReturnCodeToText>
    3598:	9f 93       	push	r25
    359a:	8f 93       	push	r24
    359c:	85 ee       	ldi	r24, 0xE5	; 229
    359e:	93 e0       	ldi	r25, 0x03	; 3
    35a0:	9f 93       	push	r25
    35a2:	8f 93       	push	r24
    35a4:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    35a8:	0f b6       	in	r0, 0x3f	; 63
    35aa:	f8 94       	cli
    35ac:	de bf       	out	0x3e, r29	; 62
    35ae:	0f be       	out	0x3f, r0	; 63
    35b0:	cd bf       	out	0x3d, r28	; 61
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	41 d5       	rcall	.+2690   	; 0x4038 <lora_driver_setAdaptiveDataRate>
    35b6:	62 d6       	rcall	.+3268   	; 0x427c <lora_driver_mapReturnCodeToText>
    35b8:	9f 93       	push	r25
    35ba:	8f 93       	push	r24
    35bc:	84 ef       	ldi	r24, 0xF4	; 244
    35be:	93 e0       	ldi	r25, 0x03	; 3
    35c0:	9f 93       	push	r25
    35c2:	8f 93       	push	r24
    35c4:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    35c8:	84 ef       	ldi	r24, 0xF4	; 244
    35ca:	91 e0       	ldi	r25, 0x01	; 1
    35cc:	40 d5       	rcall	.+2688   	; 0x404e <lora_driver_setReceiveDelay>
    35ce:	56 d6       	rcall	.+3244   	; 0x427c <lora_driver_mapReturnCodeToText>
    35d0:	9f 93       	push	r25
    35d2:	8f 93       	push	r24
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	8f 93       	push	r24
    35d8:	84 ef       	ldi	r24, 0xF4	; 244
    35da:	8f 93       	push	r24
    35dc:	85 e1       	ldi	r24, 0x15	; 21
    35de:	94 e0       	ldi	r25, 0x04	; 4
    35e0:	9f 93       	push	r25
    35e2:	8f 93       	push	r24
    35e4:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	f8 94       	cli
    35ec:	de bf       	out	0x3e, r29	; 62
    35ee:	0f be       	out	0x3f, r0	; 63
    35f0:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    35f2:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	2c d4       	rcall	.+2136   	; 0x3e50 <lora_driver_join>
    35f8:	08 2f       	mov	r16, r24
    35fa:	40 d6       	rcall	.+3200   	; 0x427c <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    35fc:	9f 93       	push	r25
    35fe:	8f 93       	push	r24
    3600:	1f 92       	push	r1
    3602:	1f 93       	push	r17
    3604:	85 e3       	ldi	r24, 0x35	; 53
    3606:	94 e0       	ldi	r25, 0x04	; 4
    3608:	9f 93       	push	r25
    360a:	8f 93       	push	r24
    360c:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>
    3610:	0f 90       	pop	r0
    3612:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3614:	0f 90       	pop	r0
    3616:	0f 90       	pop	r0
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	08 30       	cpi	r16, 0x08	; 8
    361e:	41 f0       	breq	.+16     	; 0x3630 <_lora_setup+0x14e>
    3620:	66 e3       	ldi	r22, 0x36	; 54
    3622:	71 e0       	ldi	r23, 0x01	; 1
		{
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	0e 94 1d 10 	call	0x203a	; 0x203a <vTaskDelay>
    362c:	11 50       	subi	r17, 0x01	; 1
    362e:	11 f7       	brne	.-60     	; 0x35f4 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3630:	08 30       	cpi	r16, 0x08	; 8
    3632:	29 f4       	brne	.+10     	; 0x363e <_lora_setup+0x15c>

	if (rc == LORA_ACCEPTED)
    3634:	85 e5       	ldi	r24, 0x55	; 85
    3636:	94 e0       	ldi	r25, 0x04	; 4
	{
		// Connected to LoRaWAN :-)
		puts("Connection succeeded \n");
    3638:	0e 94 67 2e 	call	0x5cce	; 0x5cce <puts>
    363c:	07 c0       	rjmp	.+14     	; 0x364c <_lora_setup+0x16a>
    363e:	8c e6       	ldi	r24, 0x6C	; 108
		while (1)
		{
			taskYIELD();
		}
	}
}
    3640:	94 e0       	ldi	r25, 0x04	; 4
		// Connected to LoRaWAN :-)
		puts("Connection succeeded \n");
	}
	else
	{
		puts("Connection failed \n");
    3642:	0e 94 67 2e 	call	0x5cce	; 0x5cce <puts>
    3646:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
		while (1)
		{
			taskYIELD();
    364a:	fd cf       	rjmp	.-6      	; 0x3646 <_lora_setup+0x164>
    364c:	64 96       	adiw	r28, 0x14	; 20
    364e:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3650:	f8 94       	cli
    3652:	de bf       	out	0x3e, r29	; 62
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	cd bf       	out	0x3d, r28	; 61
    3658:	df 91       	pop	r29
    365a:	cf 91       	pop	r28
    365c:	1f 91       	pop	r17
    365e:	0f 91       	pop	r16
    3660:	08 95       	ret

00003662 <lora_handler_task>:
    3662:	cf 93       	push	r28
    3664:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    3666:	00 d0       	rcall	.+0      	; 0x3668 <lora_handler_task+0x6>
    3668:	1f 92       	push	r1
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	7a d3       	rcall	.+1780   	; 0x3d66 <lora_driver_resetRn2483>
	vTaskDelay(2);
    3672:	62 e0       	ldi	r22, 0x02	; 2
    3674:	70 e0       	ldi	r23, 0x00	; 0
    3676:	80 e0       	ldi	r24, 0x00	; 0
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	0e 94 1d 10 	call	0x203a	; 0x203a <vTaskDelay>
	lora_driver_resetRn2483(0);
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	72 d3       	rcall	.+1764   	; 0x3d66 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3682:	66 e9       	ldi	r22, 0x96	; 150
    3684:	70 e0       	ldi	r23, 0x00	; 0
    3686:	80 e0       	ldi	r24, 0x00	; 0
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	0e 94 1d 10 	call	0x203a	; 0x203a <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    368e:	24 d3       	rcall	.+1608   	; 0x3cd8 <lora_driver_flushBuffers>

	_lora_setup();
    3690:	28 df       	rcall	.-432    	; 0x34e2 <_lora_setup>
    3692:	e7 e1       	ldi	r30, 0x17	; 23

	_uplink_payload.len = 8;
    3694:	f3 e1       	ldi	r31, 0x13	; 19
    3696:	88 e0       	ldi	r24, 0x08	; 8
    3698:	81 83       	std	Z+1, r24	; 0x01
    369a:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    369c:	80 83       	st	Z, r24
    369e:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(120000UL); // Upload message every 2 minutes
	xLastWakeTime = xTaskGetTickCount();
    36a2:	69 83       	std	Y+1, r22	; 0x01
    36a4:	7a 83       	std	Y+2, r23	; 0x02
    36a6:	8b 83       	std	Y+3, r24	; 0x03
    36a8:	9c 83       	std	Y+4, r25	; 0x04
    36aa:	40 e1       	ldi	r20, 0x10	; 16
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    36ac:	5d e1       	ldi	r21, 0x1D	; 29
    36ae:	60 e0       	ldi	r22, 0x00	; 0
    36b0:	70 e0       	ldi	r23, 0x00	; 0
    36b2:	ce 01       	movw	r24, r28
    36b4:	01 96       	adiw	r24, 0x01	; 1
    36b6:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <xTaskDelayUntil>
    36ba:	4f ef       	ldi	r20, 0xFF	; 255

		xSemaphoreTake(hardware_semaphore,portMAX_DELAY);
    36bc:	5f ef       	ldi	r21, 0xFF	; 255
    36be:	ba 01       	movw	r22, r20
    36c0:	80 91 7a 14 	lds	r24, 0x147A	; 0x80147a <hardware_semaphore>
    36c4:	90 91 7b 14 	lds	r25, 0x147B	; 0x80147b <hardware_semaphore+0x1>
    36c8:	0e 94 05 07 	call	0xe0a	; 0xe0a <xQueueSemaphoreTake>
    36cc:	aa e6       	ldi	r26, 0x6A	; 106
		
		_uplink_payload.bytes[0] = entry_data.humidity >> 8;
    36ce:	b4 e1       	ldi	r27, 0x14	; 20
    36d0:	12 96       	adiw	r26, 0x02	; 2
    36d2:	8c 91       	ld	r24, X
    36d4:	12 97       	sbiw	r26, 0x02	; 2
    36d6:	13 96       	adiw	r26, 0x03	; 3
    36d8:	9c 91       	ld	r25, X
    36da:	13 97       	sbiw	r26, 0x03	; 3
    36dc:	e7 e1       	ldi	r30, 0x17	; 23
    36de:	f3 e1       	ldi	r31, 0x13	; 19
    36e0:	92 83       	std	Z+2, r25	; 0x02
    36e2:	83 83       	std	Z+3, r24	; 0x03
		_uplink_payload.bytes[1] = entry_data.humidity & 0xFF;
    36e4:	8c 91       	ld	r24, X
		_uplink_payload.bytes[2] = entry_data.temperature >> 8;
    36e6:	11 96       	adiw	r26, 0x01	; 1
    36e8:	9c 91       	ld	r25, X
    36ea:	11 97       	sbiw	r26, 0x01	; 1
    36ec:	94 83       	std	Z+4, r25	; 0x04
    36ee:	85 83       	std	Z+5, r24	; 0x05
		_uplink_payload.bytes[3] = entry_data.temperature & 0xFF;
    36f0:	14 96       	adiw	r26, 0x04	; 4
		_uplink_payload.bytes[4] = entry_data.co2 >> 8;
    36f2:	8c 91       	ld	r24, X
    36f4:	14 97       	sbiw	r26, 0x04	; 4
    36f6:	15 96       	adiw	r26, 0x05	; 5
    36f8:	9c 91       	ld	r25, X
    36fa:	15 97       	sbiw	r26, 0x05	; 5
    36fc:	96 83       	std	Z+6, r25	; 0x06
    36fe:	87 83       	std	Z+7, r24	; 0x07
		_uplink_payload.bytes[5] = entry_data.co2 & 0xFF;
    3700:	16 96       	adiw	r26, 0x06	; 6
		_uplink_payload.bytes[6] = entry_data.light >> 8;
    3702:	8c 91       	ld	r24, X
    3704:	16 97       	sbiw	r26, 0x06	; 6
    3706:	17 96       	adiw	r26, 0x07	; 7
    3708:	9c 91       	ld	r25, X
    370a:	90 87       	std	Z+8, r25	; 0x08
		_uplink_payload.bytes[7] = entry_data.light & 0xFF;

		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    370c:	81 87       	std	Z+9, r24	; 0x09
    370e:	bf 01       	movw	r22, r30
    3710:	80 e0       	ldi	r24, 0x00	; 0
    3712:	c7 d3       	rcall	.+1934   	; 0x3ea2 <lora_driver_sendUploadMessage>
    3714:	b3 d5       	rcall	.+2918   	; 0x427c <lora_driver_mapReturnCodeToText>
    3716:	9f 93       	push	r25
    3718:	8f 93       	push	r24
    371a:	80 e8       	ldi	r24, 0x80	; 128
    371c:	94 e0       	ldi	r25, 0x04	; 4
    371e:	9f 93       	push	r25
    3720:	8f 93       	push	r24
    3722:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>
    3726:	00 e0       	ldi	r16, 0x00	; 0
		
		xSemaphoreGive(hardware_semaphore);
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	a9 01       	movw	r20, r18
    372e:	60 e0       	ldi	r22, 0x00	; 0
    3730:	70 e0       	ldi	r23, 0x00	; 0
    3732:	80 91 7a 14 	lds	r24, 0x147A	; 0x80147a <hardware_semaphore>
    3736:	90 91 7b 14 	lds	r25, 0x147B	; 0x80147b <hardware_semaphore+0x1>
    373a:	0e 94 8b 05 	call	0xb16	; 0xb16 <xQueueGenericSend>
    373e:	0f 90       	pop	r0
    3740:	0f 90       	pop	r0
    3742:	0f 90       	pop	r0
    3744:	0f 90       	pop	r0
    3746:	b1 cf       	rjmp	.-158    	; 0x36aa <lora_handler_task+0x48>

00003748 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3748:	81 b1       	in	r24, 0x01	; 1
    374a:	81 68       	ori	r24, 0x81	; 129
    374c:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <stdio_initialise>
	
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3754:	85 e0       	ldi	r24, 0x05	; 5
    3756:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <status_leds_initialise>

	downlink_buffer = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    375a:	41 e0       	ldi	r20, 0x01	; 1
    375c:	60 e0       	ldi	r22, 0x00	; 0
    375e:	70 e0       	ldi	r23, 0x00	; 0
    3760:	8c e2       	ldi	r24, 0x2C	; 44
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	0e 94 15 09 	call	0x122a	; 0x122a <xStreamBufferGenericCreate>
    3768:	90 93 69 14 	sts	0x1469, r25	; 0x801469 <downlink_buffer+0x1>
    376c:	80 93 68 14 	sts	0x1468, r24	; 0x801468 <downlink_buffer>
	lora_driver_initialise(ser_USART1, downlink_buffer);
    3770:	bc 01       	movw	r22, r24
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	b8 d2       	rcall	.+1392   	; 0x3ce6 <lora_driver_initialise>
	//lora_handler_initialise(3);
	
	entry_data.co2 =0;
    3776:	ea e6       	ldi	r30, 0x6A	; 106
    3778:	f4 e1       	ldi	r31, 0x14	; 20
    377a:	15 82       	std	Z+5, r1	; 0x05
    377c:	14 82       	std	Z+4, r1	; 0x04
	entry_data.humidity=0;
    377e:	13 82       	std	Z+3, r1	; 0x03
    3780:	12 82       	std	Z+2, r1	; 0x02
	entry_data.light=0;
    3782:	17 82       	std	Z+7, r1	; 0x07
    3784:	16 82       	std	Z+6, r1	; 0x06
	entry_data.temperature=0;
    3786:	11 82       	std	Z+1, r1	; 0x01
	
	//temp&hum
	int returnCode = hih8120_initialise();
    3788:	10 82       	st	Z, r1
    378a:	0b d1       	rcall	.+534    	; 0x39a2 <hih8120_initialise>
	if(HIH8120_OK!=returnCode){
    378c:	88 23       	and	r24, r24
    378e:	69 f0       	breq	.+26     	; 0x37aa <initialiseSystem+0x62>
		printf("HIH8120 initialize error %d \n",returnCode);
    3790:	1f 92       	push	r1
    3792:	8f 93       	push	r24
    3794:	85 e9       	ldi	r24, 0x95	; 149
    3796:	94 e0       	ldi	r25, 0x04	; 4
    3798:	9f 93       	push	r25
    379a:	8f 93       	push	r24
    379c:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>
    37a0:	0f 90       	pop	r0
    37a2:	0f 90       	pop	r0
    37a4:	0f 90       	pop	r0
    37a6:	0f 90       	pop	r0
    37a8:	04 c0       	rjmp	.+8      	; 0x37b2 <initialiseSystem+0x6a>
		}else{
		puts("Humidity and Temperature driver initialized");
    37aa:	83 eb       	ldi	r24, 0xB3	; 179
    37ac:	94 e0       	ldi	r25, 0x04	; 4
    37ae:	0e 94 67 2e 	call	0x5cce	; 0x5cce <puts>
	}
	
	//co2
	mh_z19_initialise(ser_USART3);
    37b2:	83 e0       	ldi	r24, 0x03	; 3
	mh_z19_injectCallBack(co2Callback);
    37b4:	3f d6       	rcall	.+3198   	; 0x4434 <mh_z19_initialise>
    37b6:	80 e2       	ldi	r24, 0x20	; 32
    37b8:	91 e0       	ldi	r25, 0x01	; 1
    37ba:	61 d6       	rcall	.+3266   	; 0x447e <mh_z19_injectCallBack>
	puts("Co2 driver started \n");
    37bc:	8f ed       	ldi	r24, 0xDF	; 223
    37be:	94 e0       	ldi	r25, 0x04	; 4
    37c0:	0e 94 67 2e 	call	0x5cce	; 0x5cce <puts>
	
	//light 
	returnCode = tsl2591_initialise(lightCallback);
    37c4:	86 e2       	ldi	r24, 0x26	; 38
    37c6:	9a e1       	ldi	r25, 0x1A	; 26
    37c8:	0e 94 05 28 	call	0x500a	; 0x500a <tsl2591_initialise>

	if (returnCode != TSL2591_OK) {
    37cc:	88 23       	and	r24, r24
    37ce:	69 f0       	breq	.+26     	; 0x37ea <initialiseSystem+0xa2>
		printf("TSL2591 initialize error %d \n", returnCode);
    37d0:	1f 92       	push	r1
    37d2:	8f 93       	push	r24
    37d4:	84 ef       	ldi	r24, 0xF4	; 244
    37d6:	94 e0       	ldi	r25, 0x04	; 4
    37d8:	9f 93       	push	r25
    37da:	8f 93       	push	r24
    37dc:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>
    37e0:	0f 90       	pop	r0
    37e2:	0f 90       	pop	r0
    37e4:	0f 90       	pop	r0
    37e6:	0f 90       	pop	r0
    37e8:	04 c0       	rjmp	.+8      	; 0x37f2 <initialiseSystem+0xaa>
	}
	else {
		puts("Light driver initialized");
    37ea:	82 e1       	ldi	r24, 0x12	; 18
    37ec:	95 e0       	ldi	r25, 0x05	; 5
    37ee:	0e 94 67 2e 	call	0x5cce	; 0x5cce <puts>
	}

	//enable light sensor
	returnCode = tsl2591_enable();
    37f2:	0e 94 20 28 	call	0x5040	; 0x5040 <tsl2591_enable>
	if (returnCode != TSL2591_OK) {
    37f6:	88 23       	and	r24, r24
    37f8:	61 f0       	breq	.+24     	; 0x3812 <initialiseSystem+0xca>
		printf("Failed to enable light sensor %d\n", returnCode);
    37fa:	1f 92       	push	r1
    37fc:	8f 93       	push	r24
    37fe:	8b e2       	ldi	r24, 0x2B	; 43
    3800:	95 e0       	ldi	r25, 0x05	; 5
    3802:	9f 93       	push	r25
    3804:	8f 93       	push	r24
    3806:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <printf>
    380a:	0f 90       	pop	r0
    380c:	0f 90       	pop	r0
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	08 95       	ret

00003814 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3814:	99 df       	rcall	.-206    	; 0x3748 <initialiseSystem>
	
	
	xTaskCreate(lora_handler_task,  "Lora task",  configMINIMAL_STACK_SIZE+200, NULL, 3 , NULL );
    3816:	e1 2c       	mov	r14, r1
    3818:	f1 2c       	mov	r15, r1
    381a:	03 e0       	ldi	r16, 0x03	; 3
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	48 e8       	ldi	r20, 0x88	; 136
    3822:	51 e0       	ldi	r21, 0x01	; 1
    3824:	6d e4       	ldi	r22, 0x4D	; 77
    3826:	75 e0       	ldi	r23, 0x05	; 5
    3828:	81 e3       	ldi	r24, 0x31	; 49
    382a:	9b e1       	ldi	r25, 0x1B	; 27
    382c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <xTaskCreate>
	xTaskCreate(tempAndHumidityTask, "temp&hum task", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
    3830:	02 e0       	ldi	r16, 0x02	; 2
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	40 ec       	ldi	r20, 0xC0	; 192
    3838:	50 e0       	ldi	r21, 0x00	; 0
    383a:	67 e5       	ldi	r22, 0x57	; 87
    383c:	75 e0       	ldi	r23, 0x05	; 5
    383e:	82 ea       	ldi	r24, 0xA2	; 162
    3840:	99 e1       	ldi	r25, 0x19	; 25
    3842:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <xTaskCreate>
	xTaskCreate(co2Task, "co2 task", configMINIMAL_STACK_SIZE, NULL,2,NULL);
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	40 ec       	ldi	r20, 0xC0	; 192
    384c:	50 e0       	ldi	r21, 0x00	; 0
    384e:	65 e6       	ldi	r22, 0x65	; 101
    3850:	75 e0       	ldi	r23, 0x05	; 5
    3852:	88 e0       	ldi	r24, 0x08	; 8
    3854:	91 e0       	ldi	r25, 0x01	; 1
    3856:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <xTaskCreate>
	xTaskCreate(lightTask,"light task",configMINIMAL_STACK_SIZE,NULL,2,NULL);
    385a:	20 e0       	ldi	r18, 0x00	; 0
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	40 ec       	ldi	r20, 0xC0	; 192
    3860:	50 e0       	ldi	r21, 0x00	; 0
    3862:	6e e6       	ldi	r22, 0x6E	; 110
    3864:	75 e0       	ldi	r23, 0x05	; 5
    3866:	8e e0       	ldi	r24, 0x0E	; 14
    3868:	9a e1       	ldi	r25, 0x1A	; 26
    386a:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <xTaskCreate>
	
	hardware_semaphore = xSemaphoreCreateMutex();
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xQueueCreateMutex>
    3874:	90 93 7b 14 	sts	0x147B, r25	; 0x80147b <hardware_semaphore+0x1>
    3878:	80 93 7a 14 	sts	0x147A, r24	; 0x80147a <hardware_semaphore>
	if((hardware_semaphore)!=NULL){
    387c:	00 97       	sbiw	r24, 0x00	; 0
    387e:	41 f0       	breq	.+16     	; 0x3890 <main+0x7c>
		xSemaphoreGive((hardware_semaphore));
    3880:	00 e0       	ldi	r16, 0x00	; 0
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	a9 01       	movw	r20, r18
    3888:	60 e0       	ldi	r22, 0x00	; 0
    388a:	70 e0       	ldi	r23, 0x00	; 0
    388c:	0e 94 8b 05 	call	0xb16	; 0xb16 <xQueueGenericSend>
	}
	
	printf("Program Started!!\n");
    3890:	89 e7       	ldi	r24, 0x79	; 121
    3892:	95 e0       	ldi	r25, 0x05	; 5
    3894:	0e 94 67 2e 	call	0x5cce	; 0x5cce <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3898:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <vTaskStartScheduler>
    389c:	ff cf       	rjmp	.-2      	; 0x389c <main+0x88>

0000389e <__fixunssfsi>:
    389e:	33 d0       	rcall	.+102    	; 0x3906 <__fp_splitA>
    38a0:	88 f0       	brcs	.+34     	; 0x38c4 <__fixunssfsi+0x26>
    38a2:	9f 57       	subi	r25, 0x7F	; 127
    38a4:	90 f0       	brcs	.+36     	; 0x38ca <__fixunssfsi+0x2c>
    38a6:	b9 2f       	mov	r27, r25
    38a8:	99 27       	eor	r25, r25
    38aa:	b7 51       	subi	r27, 0x17	; 23
    38ac:	a0 f0       	brcs	.+40     	; 0x38d6 <__fixunssfsi+0x38>
    38ae:	d1 f0       	breq	.+52     	; 0x38e4 <__fixunssfsi+0x46>
    38b0:	66 0f       	add	r22, r22
    38b2:	77 1f       	adc	r23, r23
    38b4:	88 1f       	adc	r24, r24
    38b6:	99 1f       	adc	r25, r25
    38b8:	1a f0       	brmi	.+6      	; 0x38c0 <__fixunssfsi+0x22>
    38ba:	ba 95       	dec	r27
    38bc:	c9 f7       	brne	.-14     	; 0x38b0 <__fixunssfsi+0x12>
    38be:	12 c0       	rjmp	.+36     	; 0x38e4 <__fixunssfsi+0x46>
    38c0:	b1 30       	cpi	r27, 0x01	; 1
    38c2:	81 f0       	breq	.+32     	; 0x38e4 <__fixunssfsi+0x46>
    38c4:	3a d0       	rcall	.+116    	; 0x393a <__fp_zero>
    38c6:	b1 e0       	ldi	r27, 0x01	; 1
    38c8:	08 95       	ret
    38ca:	37 c0       	rjmp	.+110    	; 0x393a <__fp_zero>
    38cc:	67 2f       	mov	r22, r23
    38ce:	78 2f       	mov	r23, r24
    38d0:	88 27       	eor	r24, r24
    38d2:	b8 5f       	subi	r27, 0xF8	; 248
    38d4:	39 f0       	breq	.+14     	; 0x38e4 <__fixunssfsi+0x46>
    38d6:	b9 3f       	cpi	r27, 0xF9	; 249
    38d8:	cc f3       	brlt	.-14     	; 0x38cc <__fixunssfsi+0x2e>
    38da:	86 95       	lsr	r24
    38dc:	77 95       	ror	r23
    38de:	67 95       	ror	r22
    38e0:	b3 95       	inc	r27
    38e2:	d9 f7       	brne	.-10     	; 0x38da <__fixunssfsi+0x3c>
    38e4:	3e f4       	brtc	.+14     	; 0x38f4 <__fixunssfsi+0x56>
    38e6:	90 95       	com	r25
    38e8:	80 95       	com	r24
    38ea:	70 95       	com	r23
    38ec:	61 95       	neg	r22
    38ee:	7f 4f       	sbci	r23, 0xFF	; 255
    38f0:	8f 4f       	sbci	r24, 0xFF	; 255
    38f2:	9f 4f       	sbci	r25, 0xFF	; 255
    38f4:	08 95       	ret

000038f6 <__fp_split3>:
    38f6:	57 fd       	sbrc	r21, 7
    38f8:	90 58       	subi	r25, 0x80	; 128
    38fa:	44 0f       	add	r20, r20
    38fc:	55 1f       	adc	r21, r21
    38fe:	59 f0       	breq	.+22     	; 0x3916 <__fp_splitA+0x10>
    3900:	5f 3f       	cpi	r21, 0xFF	; 255
    3902:	71 f0       	breq	.+28     	; 0x3920 <__fp_splitA+0x1a>
    3904:	47 95       	ror	r20

00003906 <__fp_splitA>:
    3906:	88 0f       	add	r24, r24
    3908:	97 fb       	bst	r25, 7
    390a:	99 1f       	adc	r25, r25
    390c:	61 f0       	breq	.+24     	; 0x3926 <__fp_splitA+0x20>
    390e:	9f 3f       	cpi	r25, 0xFF	; 255
    3910:	79 f0       	breq	.+30     	; 0x3930 <__fp_splitA+0x2a>
    3912:	87 95       	ror	r24
    3914:	08 95       	ret
    3916:	12 16       	cp	r1, r18
    3918:	13 06       	cpc	r1, r19
    391a:	14 06       	cpc	r1, r20
    391c:	55 1f       	adc	r21, r21
    391e:	f2 cf       	rjmp	.-28     	; 0x3904 <__fp_split3+0xe>
    3920:	46 95       	lsr	r20
    3922:	f1 df       	rcall	.-30     	; 0x3906 <__fp_splitA>
    3924:	08 c0       	rjmp	.+16     	; 0x3936 <__fp_splitA+0x30>
    3926:	16 16       	cp	r1, r22
    3928:	17 06       	cpc	r1, r23
    392a:	18 06       	cpc	r1, r24
    392c:	99 1f       	adc	r25, r25
    392e:	f1 cf       	rjmp	.-30     	; 0x3912 <__fp_splitA+0xc>
    3930:	86 95       	lsr	r24
    3932:	71 05       	cpc	r23, r1
    3934:	61 05       	cpc	r22, r1
    3936:	08 94       	sec
    3938:	08 95       	ret

0000393a <__fp_zero>:
    393a:	e8 94       	clt

0000393c <__fp_szero>:
    393c:	bb 27       	eor	r27, r27
    393e:	66 27       	eor	r22, r22
    3940:	77 27       	eor	r23, r23
    3942:	cb 01       	movw	r24, r22
    3944:	97 f9       	bld	r25, 7
    3946:	08 95       	ret

00003948 <_hihTwiCallback>:
    3948:	65 30       	cpi	r22, 0x05	; 5
    394a:	f1 f4       	brne	.+60     	; 0x3988 <_hihTwiCallback+0x40>
    394c:	fa 01       	movw	r30, r20
    394e:	80 81       	ld	r24, Z
    3950:	8f 73       	andi	r24, 0x3F	; 63
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	98 2f       	mov	r25, r24
    3956:	88 27       	eor	r24, r24
    3958:	21 81       	ldd	r18, Z+1	; 0x01
    395a:	82 2b       	or	r24, r18
    395c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3960:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3964:	82 81       	ldd	r24, Z+2	; 0x02
    3966:	f0 e4       	ldi	r31, 0x40	; 64
    3968:	8f 9f       	mul	r24, r31
    396a:	c0 01       	movw	r24, r0
    396c:	11 24       	eor	r1, r1
    396e:	fa 01       	movw	r30, r20
    3970:	23 81       	ldd	r18, Z+3	; 0x03
    3972:	26 95       	lsr	r18
    3974:	26 95       	lsr	r18
    3976:	82 2b       	or	r24, r18
    3978:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    397c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	80 93 2d 13 	sts	0x132D, r24	; 0x80132d <_measuringIsReady>
    3986:	08 95       	ret
    3988:	64 30       	cpi	r22, 0x04	; 4
    398a:	51 f0       	breq	.+20     	; 0x39a0 <_hihTwiCallback+0x58>
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	90 e4       	ldi	r25, 0x40	; 64
    3990:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3994:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3998:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    399c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    39a0:	08 95       	ret

000039a2 <hih8120_initialise>:
    39a2:	0f 93       	push	r16
    39a4:	1f 93       	push	r17
    39a6:	04 ea       	ldi	r16, 0xA4	; 164
    39a8:	1c e1       	ldi	r17, 0x1C	; 28
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	34 e2       	ldi	r19, 0x24	; 36
    39ae:	44 ef       	ldi	r20, 0xF4	; 244
    39b0:	50 e0       	ldi	r21, 0x00	; 0
    39b2:	60 e0       	ldi	r22, 0x00	; 0
    39b4:	87 e2       	ldi	r24, 0x27	; 39
    39b6:	0e 94 31 29 	call	0x5262	; 0x5262 <twiCreate>
    39ba:	90 93 2f 13 	sts	0x132F, r25	; 0x80132f <_hih8120Handler+0x1>
    39be:	80 93 2e 13 	sts	0x132E, r24	; 0x80132e <_hih8120Handler>
    39c2:	21 e0       	ldi	r18, 0x01	; 1
    39c4:	89 2b       	or	r24, r25
    39c6:	09 f0       	breq	.+2      	; 0x39ca <hih8120_initialise+0x28>
    39c8:	20 e0       	ldi	r18, 0x00	; 0
    39ca:	82 2f       	mov	r24, r18
    39cc:	1f 91       	pop	r17
    39ce:	0f 91       	pop	r16
    39d0:	08 95       	ret

000039d2 <hih8120_wakeup>:
    39d2:	80 91 2e 13 	lds	r24, 0x132E	; 0x80132e <_hih8120Handler>
    39d6:	90 91 2f 13 	lds	r25, 0x132F	; 0x80132f <_hih8120Handler+0x1>
    39da:	00 97       	sbiw	r24, 0x00	; 0
    39dc:	59 f0       	breq	.+22     	; 0x39f4 <hih8120_wakeup+0x22>
    39de:	40 e0       	ldi	r20, 0x00	; 0
    39e0:	60 e0       	ldi	r22, 0x00	; 0
    39e2:	70 e0       	ldi	r23, 0x00	; 0
    39e4:	0e 94 82 29 	call	0x5304	; 0x5304 <twiTransmit>
    39e8:	84 30       	cpi	r24, 0x04	; 4
    39ea:	31 f4       	brne	.+12     	; 0x39f8 <hih8120_wakeup+0x26>
    39ec:	10 92 2d 13 	sts	0x132D, r1	; 0x80132d <_measuringIsReady>
    39f0:	80 e0       	ldi	r24, 0x00	; 0
    39f2:	08 95       	ret
    39f4:	82 e0       	ldi	r24, 0x02	; 2
    39f6:	08 95       	ret
    39f8:	83 e0       	ldi	r24, 0x03	; 3
    39fa:	08 95       	ret

000039fc <hih8120_measure>:
    39fc:	80 91 2e 13 	lds	r24, 0x132E	; 0x80132e <_hih8120Handler>
    3a00:	90 91 2f 13 	lds	r25, 0x132F	; 0x80132f <_hih8120Handler+0x1>
    3a04:	00 97       	sbiw	r24, 0x00	; 0
    3a06:	39 f0       	breq	.+14     	; 0x3a16 <hih8120_measure+0x1a>
    3a08:	64 e0       	ldi	r22, 0x04	; 4
    3a0a:	0e 94 ce 29 	call	0x539c	; 0x539c <twiReceive>
    3a0e:	85 30       	cpi	r24, 0x05	; 5
    3a10:	21 f0       	breq	.+8      	; 0x3a1a <hih8120_measure+0x1e>
    3a12:	83 e0       	ldi	r24, 0x03	; 3
    3a14:	08 95       	ret
    3a16:	82 e0       	ldi	r24, 0x02	; 2
    3a18:	08 95       	ret
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	08 95       	ret

00003a1e <hih8120_getHumidity>:
    3a1e:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3a22:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__floatunsisf>
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	48 ec       	ldi	r20, 0xC8	; 200
    3a34:	52 e4       	ldi	r21, 0x42	; 66
    3a36:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__mulsf3>
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	38 ef       	ldi	r19, 0xF8	; 248
    3a3e:	4f e7       	ldi	r20, 0x7F	; 127
    3a40:	56 e4       	ldi	r21, 0x46	; 70
    3a42:	0c 94 41 2b 	jmp	0x5682	; 0x5682 <__divsf3>
    3a46:	08 95       	ret

00003a48 <hih8120_getHumidityPercent_x10>:
    3a48:	ea df       	rcall	.-44     	; 0x3a1e <hih8120_getHumidity>
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	40 e2       	ldi	r20, 0x20	; 32
    3a50:	51 e4       	ldi	r21, 0x41	; 65
    3a52:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__mulsf3>
    3a56:	23 df       	rcall	.-442    	; 0x389e <__fixunssfsi>
    3a58:	cb 01       	movw	r24, r22
    3a5a:	08 95       	ret

00003a5c <hih8120_getTemperature>:
    3a5c:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3a60:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3a64:	80 e0       	ldi	r24, 0x00	; 0
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__floatunsisf>
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	45 e2       	ldi	r20, 0x25	; 37
    3a72:	53 e4       	ldi	r21, 0x43	; 67
    3a74:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__mulsf3>
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	38 ef       	ldi	r19, 0xF8	; 248
    3a7c:	4f e7       	ldi	r20, 0x7F	; 127
    3a7e:	56 e4       	ldi	r21, 0x46	; 70
    3a80:	0e 94 41 2b 	call	0x5682	; 0x5682 <__divsf3>
    3a84:	20 e0       	ldi	r18, 0x00	; 0
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	40 e2       	ldi	r20, 0x20	; 32
    3a8a:	52 e4       	ldi	r21, 0x42	; 66
    3a8c:	0c 94 da 2a 	jmp	0x55b4	; 0x55b4 <__subsf3>
    3a90:	08 95       	ret

00003a92 <hih8120_getTemperature_x10>:
    3a92:	e4 df       	rcall	.-56     	; 0x3a5c <hih8120_getTemperature>
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	40 e2       	ldi	r20, 0x20	; 32
    3a9a:	51 e4       	ldi	r21, 0x41	; 65
    3a9c:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__mulsf3>
    3aa0:	0e 94 ac 2b 	call	0x5758	; 0x5758 <__fixsfsi>
    3aa4:	cb 01       	movw	r24, r22
    3aa6:	08 95       	ret

00003aa8 <_serialCallBack>:
    3aa8:	0f 93       	push	r16
    3aaa:	1f 93       	push	r17
    3aac:	cf 93       	push	r28
    3aae:	df 93       	push	r29
    3ab0:	1f 92       	push	r1
    3ab2:	1f 92       	push	r1
    3ab4:	cd b7       	in	r28, 0x3d	; 61
    3ab6:	de b7       	in	r29, 0x3e	; 62
    3ab8:	8c 01       	movw	r16, r24
    3aba:	19 82       	std	Y+1, r1	; 0x01
    3abc:	2d c0       	rjmp	.+90     	; 0x3b18 <_serialCallBack+0x70>
    3abe:	e0 91 67 13 	lds	r30, 0x1367	; 0x801367 <rec_buf_inp.2878>
    3ac2:	ec 32       	cpi	r30, 0x2C	; 44
    3ac4:	50 f4       	brcc	.+20     	; 0x3ada <_serialCallBack+0x32>
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	8e 0f       	add	r24, r30
    3aca:	80 93 67 13 	sts	0x1367, r24	; 0x801367 <rec_buf_inp.2878>
    3ace:	f0 e0       	ldi	r31, 0x00	; 0
    3ad0:	e7 56       	subi	r30, 0x67	; 103
    3ad2:	fc 4e       	sbci	r31, 0xEC	; 236
    3ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad6:	80 83       	st	Z, r24
    3ad8:	02 c0       	rjmp	.+4      	; 0x3ade <_serialCallBack+0x36>
    3ada:	10 92 67 13 	sts	0x1367, r1	; 0x801367 <rec_buf_inp.2878>
    3ade:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae0:	8a 30       	cpi	r24, 0x0A	; 10
    3ae2:	d1 f4       	brne	.+52     	; 0x3b18 <_serialCallBack+0x70>
    3ae4:	40 91 67 13 	lds	r20, 0x1367	; 0x801367 <rec_buf_inp.2878>
    3ae8:	50 e0       	ldi	r21, 0x00	; 0
    3aea:	fa 01       	movw	r30, r20
    3aec:	e9 56       	subi	r30, 0x69	; 105
    3aee:	fc 4e       	sbci	r31, 0xEC	; 236
    3af0:	10 82       	st	Z, r1
    3af2:	41 50       	subi	r20, 0x01	; 1
    3af4:	51 09       	sbc	r21, r1
    3af6:	9e 01       	movw	r18, r28
    3af8:	2f 5f       	subi	r18, 0xFF	; 255
    3afa:	3f 4f       	sbci	r19, 0xFF	; 255
    3afc:	69 e9       	ldi	r22, 0x99	; 153
    3afe:	73 e1       	ldi	r23, 0x13	; 19
    3b00:	80 91 6a 13 	lds	r24, 0x136A	; 0x80136a <_serialReplyBufferHandle>
    3b04:	90 91 6b 13 	lds	r25, 0x136B	; 0x80136b <_serialReplyBufferHandle+0x1>
    3b08:	0e 94 3a 0a 	call	0x1474	; 0x1474 <xStreamBufferSendFromISR>
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	81 11       	cpse	r24, r1
    3b10:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
    3b14:	10 92 67 13 	sts	0x1367, r1	; 0x801367 <rec_buf_inp.2878>
    3b18:	be 01       	movw	r22, r28
    3b1a:	6e 5f       	subi	r22, 0xFE	; 254
    3b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b1e:	c8 01       	movw	r24, r16
    3b20:	07 d6       	rcall	.+3086   	; 0x4730 <serial_getByte>
    3b22:	88 23       	and	r24, r24
    3b24:	61 f2       	breq	.-104    	; 0x3abe <_serialCallBack+0x16>
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	df 91       	pop	r29
    3b2c:	cf 91       	pop	r28
    3b2e:	1f 91       	pop	r17
    3b30:	0f 91       	pop	r16
    3b32:	08 95       	ret

00003b34 <_uploadMessage>:
    3b34:	0f 93       	push	r16
    3b36:	1f 93       	push	r17
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	8c 01       	movw	r16, r24
    3b3e:	eb 01       	movw	r28, r22
    3b40:	80 91 6a 13 	lds	r24, 0x136A	; 0x80136a <_serialReplyBufferHandle>
    3b44:	90 91 6b 13 	lds	r25, 0x136B	; 0x80136b <_serialReplyBufferHandle+0x1>
    3b48:	0e 94 47 09 	call	0x128e	; 0x128e <xStreamBufferReset>
    3b4c:	b8 01       	movw	r22, r16
    3b4e:	80 e3       	ldi	r24, 0x30	; 48
    3b50:	93 e1       	ldi	r25, 0x13	; 19
    3b52:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <strcpy>
    3b56:	20 97       	sbiw	r28, 0x00	; 0
    3b58:	79 f0       	breq	.+30     	; 0x3b78 <_uploadMessage+0x44>
    3b5a:	e0 e3       	ldi	r30, 0x30	; 48
    3b5c:	f3 e1       	ldi	r31, 0x13	; 19
    3b5e:	01 90       	ld	r0, Z+
    3b60:	00 20       	and	r0, r0
    3b62:	e9 f7       	brne	.-6      	; 0x3b5e <_uploadMessage+0x2a>
    3b64:	31 97       	sbiw	r30, 0x01	; 1
    3b66:	80 e2       	ldi	r24, 0x20	; 32
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	91 83       	std	Z+1, r25	; 0x01
    3b6c:	80 83       	st	Z, r24
    3b6e:	be 01       	movw	r22, r28
    3b70:	80 e3       	ldi	r24, 0x30	; 48
    3b72:	93 e1       	ldi	r25, 0x13	; 19
    3b74:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <strcat>
    3b78:	e0 e3       	ldi	r30, 0x30	; 48
    3b7a:	f3 e1       	ldi	r31, 0x13	; 19
    3b7c:	df 01       	movw	r26, r30
    3b7e:	0d 90       	ld	r0, X+
    3b80:	00 20       	and	r0, r0
    3b82:	e9 f7       	brne	.-6      	; 0x3b7e <_uploadMessage+0x4a>
    3b84:	11 97       	sbiw	r26, 0x01	; 1
    3b86:	8d e0       	ldi	r24, 0x0D	; 13
    3b88:	9a e0       	ldi	r25, 0x0A	; 10
    3b8a:	11 96       	adiw	r26, 0x01	; 1
    3b8c:	9c 93       	st	X, r25
    3b8e:	8e 93       	st	-X, r24
    3b90:	12 96       	adiw	r26, 0x02	; 2
    3b92:	1c 92       	st	X, r1
    3b94:	01 90       	ld	r0, Z+
    3b96:	00 20       	and	r0, r0
    3b98:	e9 f7       	brne	.-6      	; 0x3b94 <_uploadMessage+0x60>
    3b9a:	31 97       	sbiw	r30, 0x01	; 1
    3b9c:	e0 53       	subi	r30, 0x30	; 48
    3b9e:	f3 41       	sbci	r31, 0x13	; 19
    3ba0:	ae 2f       	mov	r26, r30
    3ba2:	80 e3       	ldi	r24, 0x30	; 48
    3ba4:	93 e1       	ldi	r25, 0x13	; 19
    3ba6:	ac 01       	movw	r20, r24
    3ba8:	6a 2f       	mov	r22, r26
    3baa:	80 91 6c 13 	lds	r24, 0x136C	; 0x80136c <_rn2483_serial>
    3bae:	90 91 6d 13 	lds	r25, 0x136D	; 0x80136d <_rn2483_serial+0x1>
    3bb2:	69 d5       	rcall	.+2770   	; 0x4686 <serial_sendBytes>
    3bb4:	81 11       	cpse	r24, r1
    3bb6:	11 c0       	rjmp	.+34     	; 0x3bda <_uploadMessage+0xa6>
    3bb8:	08 e2       	ldi	r16, 0x28	; 40
    3bba:	15 e0       	ldi	r17, 0x05	; 5
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	4d e2       	ldi	r20, 0x2D	; 45
    3bc2:	50 e0       	ldi	r21, 0x00	; 0
    3bc4:	63 ef       	ldi	r22, 0xF3	; 243
    3bc6:	73 e1       	ldi	r23, 0x13	; 19
    3bc8:	80 91 6a 13 	lds	r24, 0x136A	; 0x80136a <_serialReplyBufferHandle>
    3bcc:	90 91 6b 13 	lds	r25, 0x136B	; 0x80136b <_serialReplyBufferHandle+0x1>
    3bd0:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xStreamBufferReceive>
    3bd4:	83 ef       	ldi	r24, 0xF3	; 243
    3bd6:	93 e1       	ldi	r25, 0x13	; 19
    3bd8:	02 c0       	rjmp	.+4      	; 0x3bde <_uploadMessage+0xaa>
    3bda:	80 e0       	ldi	r24, 0x00	; 0
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	df 91       	pop	r29
    3be0:	cf 91       	pop	r28
    3be2:	1f 91       	pop	r17
    3be4:	0f 91       	pop	r16
    3be6:	08 95       	ret

00003be8 <_reply2ReturnCode>:
    3be8:	2f 92       	push	r2
    3bea:	3f 92       	push	r3
    3bec:	4f 92       	push	r4
    3bee:	5f 92       	push	r5
    3bf0:	6f 92       	push	r6
    3bf2:	7f 92       	push	r7
    3bf4:	8f 92       	push	r8
    3bf6:	9f 92       	push	r9
    3bf8:	af 92       	push	r10
    3bfa:	bf 92       	push	r11
    3bfc:	cf 92       	push	r12
    3bfe:	df 92       	push	r13
    3c00:	ef 92       	push	r14
    3c02:	ff 92       	push	r15
    3c04:	0f 93       	push	r16
    3c06:	1f 93       	push	r17
    3c08:	cf 93       	push	r28
    3c0a:	df 93       	push	r29
    3c0c:	5c 01       	movw	r10, r24
    3c0e:	fc 01       	movw	r30, r24
    3c10:	01 90       	ld	r0, Z+
    3c12:	00 20       	and	r0, r0
    3c14:	e9 f7       	brne	.-6      	; 0x3c10 <_reply2ReturnCode+0x28>
    3c16:	31 97       	sbiw	r30, 0x01	; 1
    3c18:	6f 01       	movw	r12, r30
    3c1a:	c8 1a       	sub	r12, r24
    3c1c:	d9 0a       	sbc	r13, r25
    3c1e:	5c 2c       	mov	r5, r12
    3c20:	0f 2e       	mov	r0, r31
    3c22:	f4 e2       	ldi	r31, 0x24	; 36
    3c24:	8f 2e       	mov	r8, r31
    3c26:	f8 e0       	ldi	r31, 0x08	; 8
    3c28:	9f 2e       	mov	r9, r31
    3c2a:	f0 2d       	mov	r31, r0
    3c2c:	e1 2c       	mov	r14, r1
    3c2e:	f1 2c       	mov	r15, r1
    3c30:	4c 2c       	mov	r4, r12
    3c32:	37 01       	movw	r6, r14
    3c34:	f4 01       	movw	r30, r8
    3c36:	01 81       	ldd	r16, Z+1	; 0x01
    3c38:	12 81       	ldd	r17, Z+2	; 0x02
    3c3a:	e8 01       	movw	r28, r16
    3c3c:	09 90       	ld	r0, Y+
    3c3e:	00 20       	and	r0, r0
    3c40:	e9 f7       	brne	.-6      	; 0x3c3c <_reply2ReturnCode+0x54>
    3c42:	21 97       	sbiw	r28, 0x01	; 1
    3c44:	c0 1b       	sub	r28, r16
    3c46:	d1 0b       	sbc	r29, r17
    3c48:	3c 2e       	mov	r3, r28
    3c4a:	f9 e0       	ldi	r31, 0x09	; 9
    3c4c:	cf 16       	cp	r12, r31
    3c4e:	d1 04       	cpc	r13, r1
    3c50:	58 f0       	brcs	.+22     	; 0x3c68 <_reply2ReturnCode+0x80>
    3c52:	f4 01       	movw	r30, r8
    3c54:	20 80       	ld	r2, Z
    3c56:	fe e0       	ldi	r31, 0x0E	; 14
    3c58:	2f 12       	cpse	r2, r31
    3c5a:	06 c0       	rjmp	.+12     	; 0x3c68 <_reply2ReturnCode+0x80>
    3c5c:	b8 01       	movw	r22, r16
    3c5e:	c5 01       	movw	r24, r10
    3c60:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <strcasestr>
    3c64:	89 2b       	or	r24, r25
    3c66:	09 f5       	brne	.+66     	; 0x3caa <_reply2ReturnCode+0xc2>
    3c68:	44 2d       	mov	r20, r4
    3c6a:	35 14       	cp	r3, r5
    3c6c:	08 f4       	brcc	.+2      	; 0x3c70 <_reply2ReturnCode+0x88>
    3c6e:	4c 2f       	mov	r20, r28
    3c70:	50 e0       	ldi	r21, 0x00	; 0
    3c72:	b8 01       	movw	r22, r16
    3c74:	c5 01       	movw	r24, r10
    3c76:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <strncasecmp>
    3c7a:	89 2b       	or	r24, r25
    3c7c:	49 f4       	brne	.+18     	; 0x3c90 <_reply2ReturnCode+0xa8>
    3c7e:	f3 01       	movw	r30, r6
    3c80:	ee 0f       	add	r30, r30
    3c82:	ff 1f       	adc	r31, r31
    3c84:	e6 0d       	add	r30, r6
    3c86:	f7 1d       	adc	r31, r7
    3c88:	ec 5d       	subi	r30, 0xDC	; 220
    3c8a:	f7 4f       	sbci	r31, 0xF7	; 247
    3c8c:	20 80       	ld	r2, Z
    3c8e:	0d c0       	rjmp	.+26     	; 0x3caa <_reply2ReturnCode+0xc2>
    3c90:	8f ef       	ldi	r24, 0xFF	; 255
    3c92:	e8 1a       	sub	r14, r24
    3c94:	f8 0a       	sbc	r15, r24
    3c96:	e3 e0       	ldi	r30, 0x03	; 3
    3c98:	8e 0e       	add	r8, r30
    3c9a:	91 1c       	adc	r9, r1
    3c9c:	f1 e1       	ldi	r31, 0x11	; 17
    3c9e:	ef 16       	cp	r14, r31
    3ca0:	f1 04       	cpc	r15, r1
    3ca2:	39 f6       	brne	.-114    	; 0x3c32 <_reply2ReturnCode+0x4a>
    3ca4:	68 94       	set
    3ca6:	22 24       	eor	r2, r2
    3ca8:	24 f8       	bld	r2, 4
    3caa:	82 2d       	mov	r24, r2
    3cac:	df 91       	pop	r29
    3cae:	cf 91       	pop	r28
    3cb0:	1f 91       	pop	r17
    3cb2:	0f 91       	pop	r16
    3cb4:	ff 90       	pop	r15
    3cb6:	ef 90       	pop	r14
    3cb8:	df 90       	pop	r13
    3cba:	cf 90       	pop	r12
    3cbc:	bf 90       	pop	r11
    3cbe:	af 90       	pop	r10
    3cc0:	9f 90       	pop	r9
    3cc2:	8f 90       	pop	r8
    3cc4:	7f 90       	pop	r7
    3cc6:	6f 90       	pop	r6
    3cc8:	5f 90       	pop	r5
    3cca:	4f 90       	pop	r4
    3ccc:	3f 90       	pop	r3
    3cce:	2f 90       	pop	r2
    3cd0:	08 95       	ret

00003cd2 <_uploadMessageRc>:
    3cd2:	30 df       	rcall	.-416    	; 0x3b34 <_uploadMessage>
    3cd4:	89 cf       	rjmp	.-238    	; 0x3be8 <_reply2ReturnCode>
    3cd6:	08 95       	ret

00003cd8 <lora_driver_flushBuffers>:
    3cd8:	80 91 6a 13 	lds	r24, 0x136A	; 0x80136a <_serialReplyBufferHandle>
    3cdc:	90 91 6b 13 	lds	r25, 0x136B	; 0x80136b <_serialReplyBufferHandle+0x1>
    3ce0:	0c 94 47 09 	jmp	0x128e	; 0x128e <xStreamBufferReset>
    3ce4:	08 95       	ret

00003ce6 <lora_driver_initialise>:
    3ce6:	8f 92       	push	r8
    3ce8:	9f 92       	push	r9
    3cea:	af 92       	push	r10
    3cec:	cf 92       	push	r12
    3cee:	ef 92       	push	r14
    3cf0:	0f 93       	push	r16
    3cf2:	1f 93       	push	r17
    3cf4:	cf 93       	push	r28
    3cf6:	c8 2f       	mov	r28, r24
    3cf8:	8b 01       	movw	r16, r22
    3cfa:	41 e0       	ldi	r20, 0x01	; 1
    3cfc:	60 e0       	ldi	r22, 0x00	; 0
    3cfe:	70 e0       	ldi	r23, 0x00	; 0
    3d00:	88 ec       	ldi	r24, 0xC8	; 200
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	0e 94 15 09 	call	0x122a	; 0x122a <xStreamBufferGenericCreate>
    3d08:	90 93 6b 13 	sts	0x136B, r25	; 0x80136b <_serialReplyBufferHandle+0x1>
    3d0c:	80 93 6a 13 	sts	0x136A, r24	; 0x80136a <_serialReplyBufferHandle>
    3d10:	10 93 69 13 	sts	0x1369, r17	; 0x801369 <_downlinkMessageBuffer+0x1>
    3d14:	00 93 68 13 	sts	0x1368, r16	; 0x801368 <_downlinkMessageBuffer>
    3d18:	0f 2e       	mov	r0, r31
    3d1a:	f4 e5       	ldi	r31, 0x54	; 84
    3d1c:	8f 2e       	mov	r8, r31
    3d1e:	fd e1       	ldi	r31, 0x1D	; 29
    3d20:	9f 2e       	mov	r9, r31
    3d22:	f0 2d       	mov	r31, r0
    3d24:	68 94       	set
    3d26:	aa 24       	eor	r10, r10
    3d28:	a6 f8       	bld	r10, 6
    3d2a:	68 94       	set
    3d2c:	cc 24       	eor	r12, r12
    3d2e:	c6 f8       	bld	r12, 6
    3d30:	e1 2c       	mov	r14, r1
    3d32:	00 e0       	ldi	r16, 0x00	; 0
    3d34:	23 e0       	ldi	r18, 0x03	; 3
    3d36:	40 e0       	ldi	r20, 0x00	; 0
    3d38:	51 ee       	ldi	r21, 0xE1	; 225
    3d3a:	60 e0       	ldi	r22, 0x00	; 0
    3d3c:	70 e0       	ldi	r23, 0x00	; 0
    3d3e:	8c 2f       	mov	r24, r28
    3d40:	d2 d3       	rcall	.+1956   	; 0x44e6 <serial_create>
    3d42:	90 93 6d 13 	sts	0x136D, r25	; 0x80136d <_rn2483_serial+0x1>
    3d46:	80 93 6c 13 	sts	0x136C, r24	; 0x80136c <_rn2483_serial>
    3d4a:	e7 e0       	ldi	r30, 0x07	; 7
    3d4c:	f1 e0       	ldi	r31, 0x01	; 1
    3d4e:	80 81       	ld	r24, Z
    3d50:	80 61       	ori	r24, 0x10	; 16
    3d52:	80 83       	st	Z, r24
    3d54:	cf 91       	pop	r28
    3d56:	1f 91       	pop	r17
    3d58:	0f 91       	pop	r16
    3d5a:	ef 90       	pop	r14
    3d5c:	cf 90       	pop	r12
    3d5e:	af 90       	pop	r10
    3d60:	9f 90       	pop	r9
    3d62:	8f 90       	pop	r8
    3d64:	08 95       	ret

00003d66 <lora_driver_resetRn2483>:
    3d66:	88 23       	and	r24, r24
    3d68:	31 f0       	breq	.+12     	; 0x3d76 <lora_driver_resetRn2483+0x10>
    3d6a:	e8 e0       	ldi	r30, 0x08	; 8
    3d6c:	f1 e0       	ldi	r31, 0x01	; 1
    3d6e:	80 81       	ld	r24, Z
    3d70:	8f 7e       	andi	r24, 0xEF	; 239
    3d72:	80 83       	st	Z, r24
    3d74:	08 95       	ret
    3d76:	e8 e0       	ldi	r30, 0x08	; 8
    3d78:	f1 e0       	ldi	r31, 0x01	; 1
    3d7a:	80 81       	ld	r24, Z
    3d7c:	80 61       	ori	r24, 0x10	; 16
    3d7e:	80 83       	st	Z, r24
    3d80:	08 95       	ret

00003d82 <lora_driver_rn2483FactoryReset>:
    3d82:	60 e0       	ldi	r22, 0x00	; 0
    3d84:	70 e0       	ldi	r23, 0x00	; 0
    3d86:	8a ea       	ldi	r24, 0xAA	; 170
    3d88:	95 e0       	ldi	r25, 0x05	; 5
    3d8a:	d4 de       	rcall	.-600    	; 0x3b34 <_uploadMessage>
    3d8c:	e3 ef       	ldi	r30, 0xF3	; 243
    3d8e:	f3 e1       	ldi	r31, 0x13	; 19
    3d90:	01 90       	ld	r0, Z+
    3d92:	00 20       	and	r0, r0
    3d94:	e9 f7       	brne	.-6      	; 0x3d90 <lora_driver_rn2483FactoryReset+0xe>
    3d96:	31 97       	sbiw	r30, 0x01	; 1
    3d98:	e3 5f       	subi	r30, 0xF3	; 243
    3d9a:	f3 41       	sbci	r31, 0x13	; 19
    3d9c:	81 e0       	ldi	r24, 0x01	; 1
    3d9e:	75 97       	sbiw	r30, 0x15	; 21
    3da0:	08 f0       	brcs	.+2      	; 0x3da4 <lora_driver_rn2483FactoryReset+0x22>
    3da2:	80 e0       	ldi	r24, 0x00	; 0
    3da4:	08 95       	ret

00003da6 <lora_driver_getRn2483Hweui>:
    3da6:	cf 93       	push	r28
    3da8:	df 93       	push	r29
    3daa:	ec 01       	movw	r28, r24
    3dac:	60 e0       	ldi	r22, 0x00	; 0
    3dae:	70 e0       	ldi	r23, 0x00	; 0
    3db0:	8b eb       	ldi	r24, 0xBB	; 187
    3db2:	95 e0       	ldi	r25, 0x05	; 5
    3db4:	bf de       	rcall	.-642    	; 0x3b34 <_uploadMessage>
    3db6:	e3 ef       	ldi	r30, 0xF3	; 243
    3db8:	f3 e1       	ldi	r31, 0x13	; 19
    3dba:	01 90       	ld	r0, Z+
    3dbc:	00 20       	and	r0, r0
    3dbe:	e9 f7       	brne	.-6      	; 0x3dba <lora_driver_getRn2483Hweui+0x14>
    3dc0:	e4 50       	subi	r30, 0x04	; 4
    3dc2:	f4 41       	sbci	r31, 0x14	; 20
    3dc4:	39 f4       	brne	.+14     	; 0x3dd4 <lora_driver_getRn2483Hweui+0x2e>
    3dc6:	63 ef       	ldi	r22, 0xF3	; 243
    3dc8:	73 e1       	ldi	r23, 0x13	; 19
    3dca:	ce 01       	movw	r24, r28
    3dcc:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <strcpy>
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	02 c0       	rjmp	.+4      	; 0x3dd8 <lora_driver_getRn2483Hweui+0x32>
    3dd4:	18 82       	st	Y, r1
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	df 91       	pop	r29
    3dda:	cf 91       	pop	r28
    3ddc:	08 95       	ret

00003dde <lora_driver_setDeviceIdentifier>:
    3dde:	fc 01       	movw	r30, r24
    3de0:	01 90       	ld	r0, Z+
    3de2:	00 20       	and	r0, r0
    3de4:	e9 f7       	brne	.-6      	; 0x3de0 <lora_driver_setDeviceIdentifier+0x2>
    3de6:	9f 01       	movw	r18, r30
    3de8:	21 51       	subi	r18, 0x11	; 17
    3dea:	31 09       	sbc	r19, r1
    3dec:	28 17       	cp	r18, r24
    3dee:	39 07       	cpc	r19, r25
    3df0:	29 f4       	brne	.+10     	; 0x3dfc <lora_driver_setDeviceIdentifier+0x1e>
    3df2:	bc 01       	movw	r22, r24
    3df4:	89 ee       	ldi	r24, 0xE9	; 233
    3df6:	95 e0       	ldi	r25, 0x05	; 5
    3df8:	6c cf       	rjmp	.-296    	; 0x3cd2 <_uploadMessageRc>
    3dfa:	08 95       	ret
    3dfc:	89 e0       	ldi	r24, 0x09	; 9
    3dfe:	08 95       	ret

00003e00 <lora_driver_setApplicationIdentifier>:
    3e00:	fc 01       	movw	r30, r24
    3e02:	01 90       	ld	r0, Z+
    3e04:	00 20       	and	r0, r0
    3e06:	e9 f7       	brne	.-6      	; 0x3e02 <lora_driver_setApplicationIdentifier+0x2>
    3e08:	9f 01       	movw	r18, r30
    3e0a:	21 51       	subi	r18, 0x11	; 17
    3e0c:	31 09       	sbc	r19, r1
    3e0e:	28 17       	cp	r18, r24
    3e10:	39 07       	cpc	r19, r25
    3e12:	29 f4       	brne	.+10     	; 0x3e1e <lora_driver_setApplicationIdentifier+0x1e>
    3e14:	bc 01       	movw	r22, r24
    3e16:	88 ef       	ldi	r24, 0xF8	; 248
    3e18:	95 e0       	ldi	r25, 0x05	; 5
    3e1a:	5b cf       	rjmp	.-330    	; 0x3cd2 <_uploadMessageRc>
    3e1c:	08 95       	ret
    3e1e:	89 e0       	ldi	r24, 0x09	; 9
    3e20:	08 95       	ret

00003e22 <lora_driver_setApplicationKey>:
    3e22:	fc 01       	movw	r30, r24
    3e24:	01 90       	ld	r0, Z+
    3e26:	00 20       	and	r0, r0
    3e28:	e9 f7       	brne	.-6      	; 0x3e24 <lora_driver_setApplicationKey+0x2>
    3e2a:	9f 01       	movw	r18, r30
    3e2c:	21 52       	subi	r18, 0x21	; 33
    3e2e:	31 09       	sbc	r19, r1
    3e30:	28 17       	cp	r18, r24
    3e32:	39 07       	cpc	r19, r25
    3e34:	29 f4       	brne	.+10     	; 0x3e40 <lora_driver_setApplicationKey+0x1e>
    3e36:	bc 01       	movw	r22, r24
    3e38:	87 e0       	ldi	r24, 0x07	; 7
    3e3a:	96 e0       	ldi	r25, 0x06	; 6
    3e3c:	4a cf       	rjmp	.-364    	; 0x3cd2 <_uploadMessageRc>
    3e3e:	08 95       	ret
    3e40:	89 e0       	ldi	r24, 0x09	; 9
    3e42:	08 95       	ret

00003e44 <lora_driver_saveMac>:
    3e44:	60 e0       	ldi	r22, 0x00	; 0
    3e46:	70 e0       	ldi	r23, 0x00	; 0
    3e48:	86 e4       	ldi	r24, 0x46	; 70
    3e4a:	96 e0       	ldi	r25, 0x06	; 6
    3e4c:	42 cf       	rjmp	.-380    	; 0x3cd2 <_uploadMessageRc>
    3e4e:	08 95       	ret

00003e50 <lora_driver_join>:
    3e50:	0f 93       	push	r16
    3e52:	1f 93       	push	r17
    3e54:	e8 2f       	mov	r30, r24
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	ee 0f       	add	r30, r30
    3e5a:	ff 1f       	adc	r31, r31
    3e5c:	e0 5e       	subi	r30, 0xE0	; 224
    3e5e:	f7 4f       	sbci	r31, 0xF7	; 247
    3e60:	60 81       	ld	r22, Z
    3e62:	71 81       	ldd	r23, Z+1	; 0x01
    3e64:	8f e4       	ldi	r24, 0x4F	; 79
    3e66:	96 e0       	ldi	r25, 0x06	; 6
    3e68:	34 df       	rcall	.-408    	; 0x3cd2 <_uploadMessageRc>
    3e6a:	81 11       	cpse	r24, r1
    3e6c:	14 c0       	rjmp	.+40     	; 0x3e96 <lora_driver_join+0x46>
    3e6e:	08 e2       	ldi	r16, 0x28	; 40
    3e70:	15 e0       	ldi	r17, 0x05	; 5
    3e72:	20 e0       	ldi	r18, 0x00	; 0
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	4d e2       	ldi	r20, 0x2D	; 45
    3e78:	50 e0       	ldi	r21, 0x00	; 0
    3e7a:	63 ef       	ldi	r22, 0xF3	; 243
    3e7c:	73 e1       	ldi	r23, 0x13	; 19
    3e7e:	80 91 6a 13 	lds	r24, 0x136A	; 0x80136a <_serialReplyBufferHandle>
    3e82:	90 91 6b 13 	lds	r25, 0x136B	; 0x80136b <_serialReplyBufferHandle+0x1>
    3e86:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xStreamBufferReceive>
    3e8a:	88 23       	and	r24, r24
    3e8c:	21 f0       	breq	.+8      	; 0x3e96 <lora_driver_join+0x46>
    3e8e:	83 ef       	ldi	r24, 0xF3	; 243
    3e90:	93 e1       	ldi	r25, 0x13	; 19
    3e92:	aa de       	rcall	.-684    	; 0x3be8 <_reply2ReturnCode>
    3e94:	03 c0       	rjmp	.+6      	; 0x3e9c <lora_driver_join+0x4c>
    3e96:	83 ef       	ldi	r24, 0xF3	; 243
    3e98:	93 e1       	ldi	r25, 0x13	; 19
    3e9a:	a6 de       	rcall	.-692    	; 0x3be8 <_reply2ReturnCode>
    3e9c:	1f 91       	pop	r17
    3e9e:	0f 91       	pop	r16
    3ea0:	08 95       	ret

00003ea2 <lora_driver_sendUploadMessage>:
    3ea2:	0f 93       	push	r16
    3ea4:	1f 93       	push	r17
    3ea6:	cf 93       	push	r28
    3ea8:	df 93       	push	r29
    3eaa:	1f 92       	push	r1
    3eac:	cd b7       	in	r28, 0x3d	; 61
    3eae:	de b7       	in	r29, 0x3e	; 62
    3eb0:	db 01       	movw	r26, r22
    3eb2:	11 96       	adiw	r26, 0x01	; 1
    3eb4:	9c 91       	ld	r25, X
    3eb6:	11 97       	sbiw	r26, 0x01	; 1
    3eb8:	95 31       	cpi	r25, 0x15	; 21
    3eba:	08 f0       	brcs	.+2      	; 0x3ebe <lora_driver_sendUploadMessage+0x1c>
    3ebc:	b4 c0       	rjmp	.+360    	; 0x4026 <lora_driver_sendUploadMessage+0x184>
    3ebe:	99 23       	and	r25, r25
    3ec0:	81 f1       	breq	.+96     	; 0x3f22 <lora_driver_sendUploadMessage+0x80>
    3ec2:	60 e0       	ldi	r22, 0x00	; 0
    3ec4:	70 e0       	ldi	r23, 0x00	; 0
    3ec6:	27 2f       	mov	r18, r23
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	46 2f       	mov	r20, r22
    3ecc:	50 e0       	ldi	r21, 0x00	; 0
    3ece:	fd 01       	movw	r30, r26
    3ed0:	e4 0f       	add	r30, r20
    3ed2:	f5 1f       	adc	r31, r21
    3ed4:	92 81       	ldd	r25, Z+2	; 0x02
    3ed6:	92 95       	swap	r25
    3ed8:	9f 70       	andi	r25, 0x0F	; 15
    3eda:	9a 30       	cpi	r25, 0x0A	; 10
    3edc:	10 f0       	brcs	.+4      	; 0x3ee2 <lora_driver_sendUploadMessage+0x40>
    3ede:	99 5c       	subi	r25, 0xC9	; 201
    3ee0:	01 c0       	rjmp	.+2      	; 0x3ee4 <lora_driver_sendUploadMessage+0x42>
    3ee2:	90 5d       	subi	r25, 0xD0	; 208
    3ee4:	f9 01       	movw	r30, r18
    3ee6:	ec 57       	subi	r30, 0x7C	; 124
    3ee8:	fc 4e       	sbci	r31, 0xEC	; 236
    3eea:	90 83       	st	Z, r25
    3eec:	2f 5f       	subi	r18, 0xFF	; 255
    3eee:	3f 4f       	sbci	r19, 0xFF	; 255
    3ef0:	fd 01       	movw	r30, r26
    3ef2:	e4 0f       	add	r30, r20
    3ef4:	f5 1f       	adc	r31, r21
    3ef6:	92 81       	ldd	r25, Z+2	; 0x02
    3ef8:	9f 70       	andi	r25, 0x0F	; 15
    3efa:	49 2f       	mov	r20, r25
    3efc:	50 e0       	ldi	r21, 0x00	; 0
    3efe:	4a 30       	cpi	r20, 0x0A	; 10
    3f00:	51 05       	cpc	r21, r1
    3f02:	14 f0       	brlt	.+4      	; 0x3f08 <lora_driver_sendUploadMessage+0x66>
    3f04:	99 5c       	subi	r25, 0xC9	; 201
    3f06:	01 c0       	rjmp	.+2      	; 0x3f0a <lora_driver_sendUploadMessage+0x68>
    3f08:	90 5d       	subi	r25, 0xD0	; 208
    3f0a:	f9 01       	movw	r30, r18
    3f0c:	ec 57       	subi	r30, 0x7C	; 124
    3f0e:	fc 4e       	sbci	r31, 0xEC	; 236
    3f10:	90 83       	st	Z, r25
    3f12:	7e 5f       	subi	r23, 0xFE	; 254
    3f14:	6f 5f       	subi	r22, 0xFF	; 255
    3f16:	11 96       	adiw	r26, 0x01	; 1
    3f18:	9c 91       	ld	r25, X
    3f1a:	11 97       	sbiw	r26, 0x01	; 1
    3f1c:	69 17       	cp	r22, r25
    3f1e:	98 f2       	brcs	.-90     	; 0x3ec6 <lora_driver_sendUploadMessage+0x24>
    3f20:	01 c0       	rjmp	.+2      	; 0x3f24 <lora_driver_sendUploadMessage+0x82>
    3f22:	70 e0       	ldi	r23, 0x00	; 0
    3f24:	e7 2f       	mov	r30, r23
    3f26:	f0 e0       	ldi	r31, 0x00	; 0
    3f28:	ec 57       	subi	r30, 0x7C	; 124
    3f2a:	fc 4e       	sbci	r31, 0xEC	; 236
    3f2c:	10 82       	st	Z, r1
    3f2e:	4c 91       	ld	r20, X
    3f30:	81 11       	cpse	r24, r1
    3f32:	03 c0       	rjmp	.+6      	; 0x3f3a <lora_driver_sendUploadMessage+0x98>
    3f34:	88 e5       	ldi	r24, 0x58	; 88
    3f36:	96 e0       	ldi	r25, 0x06	; 6
    3f38:	02 c0       	rjmp	.+4      	; 0x3f3e <lora_driver_sendUploadMessage+0x9c>
    3f3a:	8a e5       	ldi	r24, 0x5A	; 90
    3f3c:	96 e0       	ldi	r25, 0x06	; 6
    3f3e:	24 e8       	ldi	r18, 0x84	; 132
    3f40:	33 e1       	ldi	r19, 0x13	; 19
    3f42:	3f 93       	push	r19
    3f44:	2f 93       	push	r18
    3f46:	1f 92       	push	r1
    3f48:	4f 93       	push	r20
    3f4a:	9f 93       	push	r25
    3f4c:	8f 93       	push	r24
    3f4e:	8e e5       	ldi	r24, 0x5E	; 94
    3f50:	96 e0       	ldi	r25, 0x06	; 6
    3f52:	9f 93       	push	r25
    3f54:	8f 93       	push	r24
    3f56:	86 ec       	ldi	r24, 0xC6	; 198
    3f58:	93 e1       	ldi	r25, 0x13	; 19
    3f5a:	9f 93       	push	r25
    3f5c:	8f 93       	push	r24
    3f5e:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <sprintf>
    3f62:	60 e0       	ldi	r22, 0x00	; 0
    3f64:	70 e0       	ldi	r23, 0x00	; 0
    3f66:	86 ec       	ldi	r24, 0xC6	; 198
    3f68:	93 e1       	ldi	r25, 0x13	; 19
    3f6a:	b3 de       	rcall	.-666    	; 0x3cd2 <_uploadMessageRc>
    3f6c:	0f b6       	in	r0, 0x3f	; 63
    3f6e:	f8 94       	cli
    3f70:	de bf       	out	0x3e, r29	; 62
    3f72:	0f be       	out	0x3f, r0	; 63
    3f74:	cd bf       	out	0x3d, r28	; 61
    3f76:	81 11       	cpse	r24, r1
    3f78:	59 c0       	rjmp	.+178    	; 0x402c <lora_driver_sendUploadMessage+0x18a>
    3f7a:	08 e2       	ldi	r16, 0x28	; 40
    3f7c:	15 e0       	ldi	r17, 0x05	; 5
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	4d e2       	ldi	r20, 0x2D	; 45
    3f84:	50 e0       	ldi	r21, 0x00	; 0
    3f86:	63 ef       	ldi	r22, 0xF3	; 243
    3f88:	73 e1       	ldi	r23, 0x13	; 19
    3f8a:	80 91 6a 13 	lds	r24, 0x136A	; 0x80136a <_serialReplyBufferHandle>
    3f8e:	90 91 6b 13 	lds	r25, 0x136B	; 0x80136b <_serialReplyBufferHandle+0x1>
    3f92:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xStreamBufferReceive>
    3f96:	88 23       	and	r24, r24
    3f98:	09 f4       	brne	.+2      	; 0x3f9c <lora_driver_sendUploadMessage+0xfa>
    3f9a:	47 c0       	rjmp	.+142    	; 0x402a <lora_driver_sendUploadMessage+0x188>
    3f9c:	83 ef       	ldi	r24, 0xF3	; 243
    3f9e:	93 e1       	ldi	r25, 0x13	; 19
    3fa0:	23 de       	rcall	.-954    	; 0x3be8 <_reply2ReturnCode>
    3fa2:	8e 30       	cpi	r24, 0x0E	; 14
    3fa4:	09 f0       	breq	.+2      	; 0x3fa8 <lora_driver_sendUploadMessage+0x106>
    3fa6:	42 c0       	rjmp	.+132    	; 0x402c <lora_driver_sendUploadMessage+0x18a>
    3fa8:	87 e0       	ldi	r24, 0x07	; 7
    3faa:	89 83       	std	Y+1, r24	; 0x01
    3fac:	80 91 68 13 	lds	r24, 0x1368	; 0x801368 <_downlinkMessageBuffer>
    3fb0:	90 91 69 13 	lds	r25, 0x1369	; 0x801369 <_downlinkMessageBuffer+0x1>
    3fb4:	89 2b       	or	r24, r25
    3fb6:	a9 f1       	breq	.+106    	; 0x4022 <lora_driver_sendUploadMessage+0x180>
    3fb8:	be 01       	movw	r22, r28
    3fba:	6f 5f       	subi	r22, 0xFF	; 255
    3fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    3fbe:	83 ef       	ldi	r24, 0xF3	; 243
    3fc0:	93 e1       	ldi	r25, 0x13	; 19
    3fc2:	68 d1       	rcall	.+720    	; 0x4294 <decode_port_no>
    3fc4:	80 93 6e 13 	sts	0x136E, r24	; 0x80136e <_downlinkPayload>
    3fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    3fca:	f0 e0       	ldi	r31, 0x00	; 0
    3fcc:	ed 50       	subi	r30, 0x0D	; 13
    3fce:	fc 4e       	sbci	r31, 0xEC	; 236
    3fd0:	df 01       	movw	r26, r30
    3fd2:	0d 90       	ld	r0, X+
    3fd4:	00 20       	and	r0, r0
    3fd6:	e9 f7       	brne	.-6      	; 0x3fd2 <lora_driver_sendUploadMessage+0x130>
    3fd8:	11 97       	sbiw	r26, 0x01	; 1
    3fda:	ae 1b       	sub	r26, r30
    3fdc:	bf 0b       	sbc	r27, r31
    3fde:	aa 23       	and	r26, r26
    3fe0:	91 f0       	breq	.+36     	; 0x4006 <lora_driver_sendUploadMessage+0x164>
    3fe2:	bb 27       	eor	r27, r27
    3fe4:	cd 01       	movw	r24, r26
    3fe6:	01 97       	sbiw	r24, 0x01	; 1
    3fe8:	9c 01       	movw	r18, r24
    3fea:	12 f4       	brpl	.+4      	; 0x3ff0 <lora_driver_sendUploadMessage+0x14e>
    3fec:	2f 5f       	subi	r18, 0xFF	; 255
    3fee:	3f 4f       	sbci	r19, 0xFF	; 255
    3ff0:	35 95       	asr	r19
    3ff2:	27 95       	ror	r18
    3ff4:	20 93 6f 13 	sts	0x136F, r18	; 0x80136f <_downlinkPayload+0x1>
    3ff8:	af 01       	movw	r20, r30
    3ffa:	4f 5f       	subi	r20, 0xFF	; 255
    3ffc:	5f 4f       	sbci	r21, 0xFF	; 255
    3ffe:	64 e1       	ldi	r22, 0x14	; 20
    4000:	80 e7       	ldi	r24, 0x70	; 112
    4002:	93 e1       	ldi	r25, 0x13	; 19
    4004:	73 d1       	rcall	.+742    	; 0x42ec <decode_hexadecimal_string_bytes>
    4006:	01 e0       	ldi	r16, 0x01	; 1
    4008:	10 e0       	ldi	r17, 0x00	; 0
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	46 e1       	ldi	r20, 0x16	; 22
    4010:	50 e0       	ldi	r21, 0x00	; 0
    4012:	6e e6       	ldi	r22, 0x6E	; 110
    4014:	73 e1       	ldi	r23, 0x13	; 19
    4016:	80 91 68 13 	lds	r24, 0x1368	; 0x801368 <_downlinkMessageBuffer>
    401a:	90 91 69 13 	lds	r25, 0x1369	; 0x801369 <_downlinkMessageBuffer+0x1>
    401e:	0e 94 77 09 	call	0x12ee	; 0x12ee <xStreamBufferSend>
    4022:	8e e0       	ldi	r24, 0x0E	; 14
    4024:	03 c0       	rjmp	.+6      	; 0x402c <lora_driver_sendUploadMessage+0x18a>
    4026:	84 e1       	ldi	r24, 0x14	; 20
    4028:	01 c0       	rjmp	.+2      	; 0x402c <lora_driver_sendUploadMessage+0x18a>
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	0f 90       	pop	r0
    402e:	df 91       	pop	r29
    4030:	cf 91       	pop	r28
    4032:	1f 91       	pop	r17
    4034:	0f 91       	pop	r16
    4036:	08 95       	ret

00004038 <lora_driver_setAdaptiveDataRate>:
    4038:	81 30       	cpi	r24, 0x01	; 1
    403a:	19 f0       	breq	.+6      	; 0x4042 <lora_driver_setAdaptiveDataRate+0xa>
    403c:	6e e6       	ldi	r22, 0x6E	; 110
    403e:	76 e0       	ldi	r23, 0x06	; 6
    4040:	02 c0       	rjmp	.+4      	; 0x4046 <lora_driver_setAdaptiveDataRate+0xe>
    4042:	67 e4       	ldi	r22, 0x47	; 71
    4044:	77 e0       	ldi	r23, 0x07	; 7
    4046:	82 e7       	ldi	r24, 0x72	; 114
    4048:	96 e0       	ldi	r25, 0x06	; 6
    404a:	43 ce       	rjmp	.-890    	; 0x3cd2 <_uploadMessageRc>
    404c:	08 95       	ret

0000404e <lora_driver_setReceiveDelay>:
    404e:	9f 93       	push	r25
    4050:	8f 93       	push	r24
    4052:	83 ea       	ldi	r24, 0xA3	; 163
    4054:	96 e0       	ldi	r25, 0x06	; 6
    4056:	9f 93       	push	r25
    4058:	8f 93       	push	r24
    405a:	86 ec       	ldi	r24, 0xC6	; 198
    405c:	93 e1       	ldi	r25, 0x13	; 19
    405e:	9f 93       	push	r25
    4060:	8f 93       	push	r24
    4062:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <sprintf>
    4066:	60 e0       	ldi	r22, 0x00	; 0
    4068:	70 e0       	ldi	r23, 0x00	; 0
    406a:	86 ec       	ldi	r24, 0xC6	; 198
    406c:	93 e1       	ldi	r25, 0x13	; 19
    406e:	31 de       	rcall	.-926    	; 0x3cd2 <_uploadMessageRc>
    4070:	0f 90       	pop	r0
    4072:	0f 90       	pop	r0
    4074:	0f 90       	pop	r0
    4076:	0f 90       	pop	r0
    4078:	0f 90       	pop	r0
    407a:	0f 90       	pop	r0
    407c:	08 95       	ret

0000407e <lora_driver_configureToEu868>:
    407e:	2f 92       	push	r2
    4080:	3f 92       	push	r3
    4082:	4f 92       	push	r4
    4084:	5f 92       	push	r5
    4086:	6f 92       	push	r6
    4088:	7f 92       	push	r7
    408a:	8f 92       	push	r8
    408c:	9f 92       	push	r9
    408e:	af 92       	push	r10
    4090:	bf 92       	push	r11
    4092:	cf 92       	push	r12
    4094:	df 92       	push	r13
    4096:	ef 92       	push	r14
    4098:	ff 92       	push	r15
    409a:	0f 93       	push	r16
    409c:	1f 93       	push	r17
    409e:	cf 93       	push	r28
    40a0:	df 93       	push	r29
    40a2:	cd b7       	in	r28, 0x3d	; 61
    40a4:	de b7       	in	r29, 0x3e	; 62
    40a6:	a0 97       	sbiw	r28, 0x20	; 32
    40a8:	0f b6       	in	r0, 0x3f	; 63
    40aa:	f8 94       	cli
    40ac:	de bf       	out	0x3e, r29	; 62
    40ae:	0f be       	out	0x3f, r0	; 63
    40b0:	cd bf       	out	0x3d, r28	; 61
    40b2:	60 ed       	ldi	r22, 0xD0	; 208
    40b4:	76 e0       	ldi	r23, 0x06	; 6
    40b6:	8c ed       	ldi	r24, 0xDC	; 220
    40b8:	96 e0       	ldi	r25, 0x06	; 6
    40ba:	3c dd       	rcall	.-1416   	; 0x3b34 <_uploadMessage>
    40bc:	95 dd       	rcall	.-1238   	; 0x3be8 <_reply2ReturnCode>
    40be:	81 11       	cpse	r24, r1
    40c0:	a3 c0       	rjmp	.+326    	; 0x4208 <lora_driver_configureToEu868+0x18a>
    40c2:	80 e2       	ldi	r24, 0x20	; 32
    40c4:	e2 e2       	ldi	r30, 0x22	; 34
    40c6:	f2 e0       	ldi	r31, 0x02	; 2
    40c8:	de 01       	movw	r26, r28
    40ca:	11 96       	adiw	r26, 0x01	; 1
    40cc:	01 90       	ld	r0, Z+
    40ce:	0d 92       	st	X+, r0
    40d0:	8a 95       	dec	r24
    40d2:	e1 f7       	brne	.-8      	; 0x40cc <lora_driver_configureToEu868+0x4e>
    40d4:	9e 01       	movw	r18, r28
    40d6:	2f 5f       	subi	r18, 0xFF	; 255
    40d8:	3f 4f       	sbci	r19, 0xFF	; 255
    40da:	69 01       	movw	r12, r18
    40dc:	e1 2c       	mov	r14, r1
    40de:	f1 2c       	mov	r15, r1
    40e0:	0f 2e       	mov	r0, r31
    40e2:	f8 ee       	ldi	r31, 0xE8	; 232
    40e4:	af 2e       	mov	r10, r31
    40e6:	f6 e0       	ldi	r31, 0x06	; 6
    40e8:	bf 2e       	mov	r11, r31
    40ea:	f0 2d       	mov	r31, r0
    40ec:	06 ec       	ldi	r16, 0xC6	; 198
    40ee:	13 e1       	ldi	r17, 0x13	; 19
    40f0:	0f 2e       	mov	r0, r31
    40f2:	f1 e0       	ldi	r31, 0x01	; 1
    40f4:	4f 2e       	mov	r4, r31
    40f6:	f7 e0       	ldi	r31, 0x07	; 7
    40f8:	5f 2e       	mov	r5, r31
    40fa:	f0 2d       	mov	r31, r0
    40fc:	0f 2e       	mov	r0, r31
    40fe:	f8 e1       	ldi	r31, 0x18	; 24
    4100:	8f 2e       	mov	r8, r31
    4102:	f7 e0       	ldi	r31, 0x07	; 7
    4104:	9f 2e       	mov	r9, r31
    4106:	f0 2d       	mov	r31, r0
    4108:	0f 2e       	mov	r0, r31
    410a:	f2 e3       	ldi	r31, 0x32	; 50
    410c:	6f 2e       	mov	r6, r31
    410e:	f7 e0       	ldi	r31, 0x07	; 7
    4110:	7f 2e       	mov	r7, r31
    4112:	f0 2d       	mov	r31, r0
    4114:	3e 2c       	mov	r3, r14
    4116:	2f 2c       	mov	r2, r15
    4118:	ff 92       	push	r15
    411a:	ef 92       	push	r14
    411c:	bf 92       	push	r11
    411e:	af 92       	push	r10
    4120:	1f 93       	push	r17
    4122:	0f 93       	push	r16
    4124:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <sprintf>
    4128:	60 e0       	ldi	r22, 0x00	; 0
    412a:	70 e0       	ldi	r23, 0x00	; 0
    412c:	c8 01       	movw	r24, r16
    412e:	02 dd       	rcall	.-1532   	; 0x3b34 <_uploadMessage>
    4130:	5b dd       	rcall	.-1354   	; 0x3be8 <_reply2ReturnCode>
    4132:	0f 90       	pop	r0
    4134:	0f 90       	pop	r0
    4136:	0f 90       	pop	r0
    4138:	0f 90       	pop	r0
    413a:	0f 90       	pop	r0
    413c:	0f 90       	pop	r0
    413e:	81 11       	cpse	r24, r1
    4140:	63 c0       	rjmp	.+198    	; 0x4208 <lora_driver_configureToEu868+0x18a>
    4142:	32 e0       	ldi	r19, 0x02	; 2
    4144:	3e 15       	cp	r19, r14
    4146:	e8 f4       	brcc	.+58     	; 0x4182 <lora_driver_configureToEu868+0x104>
    4148:	f6 01       	movw	r30, r12
    414a:	83 81       	ldd	r24, Z+3	; 0x03
    414c:	8f 93       	push	r24
    414e:	82 81       	ldd	r24, Z+2	; 0x02
    4150:	8f 93       	push	r24
    4152:	81 81       	ldd	r24, Z+1	; 0x01
    4154:	8f 93       	push	r24
    4156:	80 81       	ld	r24, Z
    4158:	8f 93       	push	r24
    415a:	ff 92       	push	r15
    415c:	ef 92       	push	r14
    415e:	5f 92       	push	r5
    4160:	4f 92       	push	r4
    4162:	1f 93       	push	r17
    4164:	0f 93       	push	r16
    4166:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <sprintf>
    416a:	60 e0       	ldi	r22, 0x00	; 0
    416c:	70 e0       	ldi	r23, 0x00	; 0
    416e:	c8 01       	movw	r24, r16
    4170:	e1 dc       	rcall	.-1598   	; 0x3b34 <_uploadMessage>
    4172:	3a dd       	rcall	.-1420   	; 0x3be8 <_reply2ReturnCode>
    4174:	0f b6       	in	r0, 0x3f	; 63
    4176:	f8 94       	cli
    4178:	de bf       	out	0x3e, r29	; 62
    417a:	0f be       	out	0x3f, r0	; 63
    417c:	cd bf       	out	0x3d, r28	; 61
    417e:	81 11       	cpse	r24, r1
    4180:	43 c0       	rjmp	.+134    	; 0x4208 <lora_driver_configureToEu868+0x18a>
    4182:	2f 92       	push	r2
    4184:	3f 92       	push	r3
    4186:	9f 92       	push	r9
    4188:	8f 92       	push	r8
    418a:	1f 93       	push	r17
    418c:	0f 93       	push	r16
    418e:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <sprintf>
    4192:	60 e0       	ldi	r22, 0x00	; 0
    4194:	70 e0       	ldi	r23, 0x00	; 0
    4196:	c8 01       	movw	r24, r16
    4198:	cd dc       	rcall	.-1638   	; 0x3b34 <_uploadMessage>
    419a:	26 dd       	rcall	.-1460   	; 0x3be8 <_reply2ReturnCode>
    419c:	0f 90       	pop	r0
    419e:	0f 90       	pop	r0
    41a0:	0f 90       	pop	r0
    41a2:	0f 90       	pop	r0
    41a4:	0f 90       	pop	r0
    41a6:	0f 90       	pop	r0
    41a8:	81 11       	cpse	r24, r1
    41aa:	2e c0       	rjmp	.+92     	; 0x4208 <lora_driver_configureToEu868+0x18a>
    41ac:	2f 92       	push	r2
    41ae:	3f 92       	push	r3
    41b0:	7f 92       	push	r7
    41b2:	6f 92       	push	r6
    41b4:	1f 93       	push	r17
    41b6:	0f 93       	push	r16
    41b8:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <sprintf>
    41bc:	60 e0       	ldi	r22, 0x00	; 0
    41be:	70 e0       	ldi	r23, 0x00	; 0
    41c0:	c8 01       	movw	r24, r16
    41c2:	b8 dc       	rcall	.-1680   	; 0x3b34 <_uploadMessage>
    41c4:	11 dd       	rcall	.-1502   	; 0x3be8 <_reply2ReturnCode>
    41c6:	0f 90       	pop	r0
    41c8:	0f 90       	pop	r0
    41ca:	0f 90       	pop	r0
    41cc:	0f 90       	pop	r0
    41ce:	0f 90       	pop	r0
    41d0:	0f 90       	pop	r0
    41d2:	81 11       	cpse	r24, r1
    41d4:	19 c0       	rjmp	.+50     	; 0x4208 <lora_driver_configureToEu868+0x18a>
    41d6:	3f ef       	ldi	r19, 0xFF	; 255
    41d8:	e3 1a       	sub	r14, r19
    41da:	f3 0a       	sbc	r15, r19
    41dc:	84 e0       	ldi	r24, 0x04	; 4
    41de:	c8 0e       	add	r12, r24
    41e0:	d1 1c       	adc	r13, r1
    41e2:	98 e0       	ldi	r25, 0x08	; 8
    41e4:	e9 16       	cp	r14, r25
    41e6:	f1 04       	cpc	r15, r1
    41e8:	09 f0       	breq	.+2      	; 0x41ec <lora_driver_configureToEu868+0x16e>
    41ea:	94 cf       	rjmp	.-216    	; 0x4114 <lora_driver_configureToEu868+0x96>
    41ec:	60 e0       	ldi	r22, 0x00	; 0
    41ee:	70 e0       	ldi	r23, 0x00	; 0
    41f0:	8a e4       	ldi	r24, 0x4A	; 74
    41f2:	97 e0       	ldi	r25, 0x07	; 7
    41f4:	9f dc       	rcall	.-1730   	; 0x3b34 <_uploadMessage>
    41f6:	f8 dc       	rcall	.-1552   	; 0x3be8 <_reply2ReturnCode>
    41f8:	81 11       	cpse	r24, r1
    41fa:	06 c0       	rjmp	.+12     	; 0x4208 <lora_driver_configureToEu868+0x18a>
    41fc:	60 e0       	ldi	r22, 0x00	; 0
    41fe:	70 e0       	ldi	r23, 0x00	; 0
    4200:	8b e5       	ldi	r24, 0x5B	; 91
    4202:	97 e0       	ldi	r25, 0x07	; 7
    4204:	97 dc       	rcall	.-1746   	; 0x3b34 <_uploadMessage>
    4206:	f0 dc       	rcall	.-1568   	; 0x3be8 <_reply2ReturnCode>
    4208:	a0 96       	adiw	r28, 0x20	; 32
    420a:	0f b6       	in	r0, 0x3f	; 63
    420c:	f8 94       	cli
    420e:	de bf       	out	0x3e, r29	; 62
    4210:	0f be       	out	0x3f, r0	; 63
    4212:	cd bf       	out	0x3d, r28	; 61
    4214:	df 91       	pop	r29
    4216:	cf 91       	pop	r28
    4218:	1f 91       	pop	r17
    421a:	0f 91       	pop	r16
    421c:	ff 90       	pop	r15
    421e:	ef 90       	pop	r14
    4220:	df 90       	pop	r13
    4222:	cf 90       	pop	r12
    4224:	bf 90       	pop	r11
    4226:	af 90       	pop	r10
    4228:	9f 90       	pop	r9
    422a:	8f 90       	pop	r8
    422c:	7f 90       	pop	r7
    422e:	6f 90       	pop	r6
    4230:	5f 90       	pop	r5
    4232:	4f 90       	pop	r4
    4234:	3f 90       	pop	r3
    4236:	2f 90       	pop	r2
    4238:	08 95       	ret

0000423a <lora_driver_setOtaaIdentity>:
    423a:	ef 92       	push	r14
    423c:	ff 92       	push	r15
    423e:	0f 93       	push	r16
    4240:	1f 93       	push	r17
    4242:	cf 93       	push	r28
    4244:	df 93       	push	r29
    4246:	ec 01       	movw	r28, r24
    4248:	8b 01       	movw	r16, r22
    424a:	7a 01       	movw	r14, r20
    424c:	81 e0       	ldi	r24, 0x01	; 1
    424e:	f4 de       	rcall	.-536    	; 0x4038 <lora_driver_setAdaptiveDataRate>
    4250:	81 11       	cpse	r24, r1
    4252:	0d c0       	rjmp	.+26     	; 0x426e <lora_driver_setOtaaIdentity+0x34>
    4254:	ce 01       	movw	r24, r28
    4256:	d4 dd       	rcall	.-1112   	; 0x3e00 <lora_driver_setApplicationIdentifier>
    4258:	81 11       	cpse	r24, r1
    425a:	09 c0       	rjmp	.+18     	; 0x426e <lora_driver_setOtaaIdentity+0x34>
    425c:	c8 01       	movw	r24, r16
    425e:	e1 dd       	rcall	.-1086   	; 0x3e22 <lora_driver_setApplicationKey>
    4260:	81 11       	cpse	r24, r1
    4262:	05 c0       	rjmp	.+10     	; 0x426e <lora_driver_setOtaaIdentity+0x34>
    4264:	c7 01       	movw	r24, r14
    4266:	bb dd       	rcall	.-1162   	; 0x3dde <lora_driver_setDeviceIdentifier>
    4268:	81 11       	cpse	r24, r1
    426a:	01 c0       	rjmp	.+2      	; 0x426e <lora_driver_setOtaaIdentity+0x34>
    426c:	eb dd       	rcall	.-1066   	; 0x3e44 <lora_driver_saveMac>
    426e:	df 91       	pop	r29
    4270:	cf 91       	pop	r28
    4272:	1f 91       	pop	r17
    4274:	0f 91       	pop	r16
    4276:	ff 90       	pop	r15
    4278:	ef 90       	pop	r14
    427a:	08 95       	ret

0000427c <lora_driver_mapReturnCodeToText>:
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	fc 01       	movw	r30, r24
    4280:	ee 0f       	add	r30, r30
    4282:	ff 1f       	adc	r31, r31
    4284:	8e 0f       	add	r24, r30
    4286:	9f 1f       	adc	r25, r31
    4288:	fc 01       	movw	r30, r24
    428a:	ec 5d       	subi	r30, 0xDC	; 220
    428c:	f7 4f       	sbci	r31, 0xF7	; 247
    428e:	81 81       	ldd	r24, Z+1	; 0x01
    4290:	92 81       	ldd	r25, Z+2	; 0x02
    4292:	08 95       	ret

00004294 <decode_port_no>:
    4294:	dc 01       	movw	r26, r24
    4296:	00 97       	sbiw	r24, 0x00	; 0
    4298:	29 f1       	breq	.+74     	; 0x42e4 <decode_port_no+0x50>
    429a:	fb 01       	movw	r30, r22
    429c:	20 81       	ld	r18, Z
    429e:	fc 01       	movw	r30, r24
    42a0:	01 90       	ld	r0, Z+
    42a2:	00 20       	and	r0, r0
    42a4:	e9 f7       	brne	.-6      	; 0x42a0 <decode_port_no+0xc>
    42a6:	31 97       	sbiw	r30, 0x01	; 1
    42a8:	e8 1b       	sub	r30, r24
    42aa:	f9 0b       	sbc	r31, r25
    42ac:	82 2f       	mov	r24, r18
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	e8 17       	cp	r30, r24
    42b2:	f9 07       	cpc	r31, r25
    42b4:	c8 f0       	brcs	.+50     	; 0x42e8 <decode_port_no+0x54>
    42b6:	80 e0       	ldi	r24, 0x00	; 0
    42b8:	08 c0       	rjmp	.+16     	; 0x42ca <decode_port_no+0x36>
    42ba:	88 0f       	add	r24, r24
    42bc:	38 2f       	mov	r19, r24
    42be:	33 0f       	add	r19, r19
    42c0:	33 0f       	add	r19, r19
    42c2:	83 0f       	add	r24, r19
    42c4:	80 53       	subi	r24, 0x30	; 48
    42c6:	89 0f       	add	r24, r25
    42c8:	2f 5f       	subi	r18, 0xFF	; 255
    42ca:	fd 01       	movw	r30, r26
    42cc:	e2 0f       	add	r30, r18
    42ce:	f1 1d       	adc	r31, r1
    42d0:	90 81       	ld	r25, Z
    42d2:	30 ed       	ldi	r19, 0xD0	; 208
    42d4:	39 0f       	add	r19, r25
    42d6:	3a 30       	cpi	r19, 0x0A	; 10
    42d8:	10 f4       	brcc	.+4      	; 0x42de <decode_port_no+0x4a>
    42da:	91 11       	cpse	r25, r1
    42dc:	ee cf       	rjmp	.-36     	; 0x42ba <decode_port_no+0x26>
    42de:	fb 01       	movw	r30, r22
    42e0:	20 83       	st	Z, r18
    42e2:	08 95       	ret
    42e4:	80 e0       	ldi	r24, 0x00	; 0
    42e6:	08 95       	ret
    42e8:	80 e0       	ldi	r24, 0x00	; 0
    42ea:	08 95       	ret

000042ec <decode_hexadecimal_string_bytes>:
    42ec:	0f 93       	push	r16
    42ee:	1f 93       	push	r17
    42f0:	cf 93       	push	r28
    42f2:	df 93       	push	r29
    42f4:	dc 01       	movw	r26, r24
    42f6:	ea 01       	movw	r28, r20
    42f8:	20 97       	sbiw	r28, 0x00	; 0
    42fa:	e1 f1       	breq	.+120    	; 0x4374 <decode_hexadecimal_string_bytes+0x88>
    42fc:	fa 01       	movw	r30, r20
    42fe:	01 90       	ld	r0, Z+
    4300:	00 20       	and	r0, r0
    4302:	e9 f7       	brne	.-6      	; 0x42fe <decode_hexadecimal_string_bytes+0x12>
    4304:	31 97       	sbiw	r30, 0x01	; 1
    4306:	e4 1b       	sub	r30, r20
    4308:	f5 0b       	sbc	r31, r21
    430a:	32 97       	sbiw	r30, 0x02	; 2
    430c:	10 f5       	brcc	.+68     	; 0x4352 <decode_hexadecimal_string_bytes+0x66>
    430e:	32 c0       	rjmp	.+100    	; 0x4374 <decode_hexadecimal_string_bytes+0x88>
    4310:	8d 01       	movw	r16, r26
    4312:	04 0f       	add	r16, r20
    4314:	15 1f       	adc	r17, r21
    4316:	30 e0       	ldi	r19, 0x00	; 0
    4318:	ae 01       	movw	r20, r28
    431a:	42 0f       	add	r20, r18
    431c:	53 1f       	adc	r21, r19
    431e:	fa 01       	movw	r30, r20
    4320:	90 81       	ld	r25, Z
    4322:	91 34       	cpi	r25, 0x41	; 65
    4324:	28 f0       	brcs	.+10     	; 0x4330 <decode_hexadecimal_string_bytes+0x44>
    4326:	97 53       	subi	r25, 0x37	; 55
    4328:	59 2f       	mov	r21, r25
    432a:	52 95       	swap	r21
    432c:	50 7f       	andi	r21, 0xF0	; 240
    432e:	03 c0       	rjmp	.+6      	; 0x4336 <decode_hexadecimal_string_bytes+0x4a>
    4330:	59 2f       	mov	r21, r25
    4332:	52 95       	swap	r21
    4334:	50 7f       	andi	r21, 0xF0	; 240
    4336:	2c 0f       	add	r18, r28
    4338:	3d 1f       	adc	r19, r29
    433a:	f9 01       	movw	r30, r18
    433c:	91 81       	ldd	r25, Z+1	; 0x01
    433e:	91 34       	cpi	r25, 0x41	; 65
    4340:	10 f0       	brcs	.+4      	; 0x4346 <decode_hexadecimal_string_bytes+0x5a>
    4342:	97 53       	subi	r25, 0x37	; 55
    4344:	01 c0       	rjmp	.+2      	; 0x4348 <decode_hexadecimal_string_bytes+0x5c>
    4346:	90 53       	subi	r25, 0x30	; 48
    4348:	95 0f       	add	r25, r21
    434a:	f8 01       	movw	r30, r16
    434c:	90 83       	st	Z, r25
    434e:	8f 5f       	subi	r24, 0xFF	; 255
    4350:	01 c0       	rjmp	.+2      	; 0x4354 <decode_hexadecimal_string_bytes+0x68>
    4352:	80 e0       	ldi	r24, 0x00	; 0
    4354:	28 2f       	mov	r18, r24
    4356:	22 0f       	add	r18, r18
    4358:	48 2f       	mov	r20, r24
    435a:	50 e0       	ldi	r21, 0x00	; 0
    435c:	fe 01       	movw	r30, r28
    435e:	01 90       	ld	r0, Z+
    4360:	00 20       	and	r0, r0
    4362:	e9 f7       	brne	.-6      	; 0x435e <decode_hexadecimal_string_bytes+0x72>
    4364:	31 97       	sbiw	r30, 0x01	; 1
    4366:	ec 1b       	sub	r30, r28
    4368:	fd 0b       	sbc	r31, r29
    436a:	4e 17       	cp	r20, r30
    436c:	5f 07       	cpc	r21, r31
    436e:	10 f4       	brcc	.+4      	; 0x4374 <decode_hexadecimal_string_bytes+0x88>
    4370:	86 13       	cpse	r24, r22
    4372:	ce cf       	rjmp	.-100    	; 0x4310 <decode_hexadecimal_string_bytes+0x24>
    4374:	df 91       	pop	r29
    4376:	cf 91       	pop	r28
    4378:	1f 91       	pop	r17
    437a:	0f 91       	pop	r16
    437c:	08 95       	ret

0000437e <_serialCallBack>:
    437e:	80 91 23 14 	lds	r24, 0x1423	; 0x801423 <crc_sum.1945>
    4382:	86 0f       	add	r24, r22
    4384:	80 93 23 14 	sts	0x1423, r24	; 0x801423 <crc_sum.1945>
    4388:	90 91 26 14 	lds	r25, 0x1426	; 0x801426 <_mh_state>
    438c:	91 30       	cpi	r25, 0x01	; 1
    438e:	79 f0       	breq	.+30     	; 0x43ae <_serialCallBack+0x30>
    4390:	28 f0       	brcs	.+10     	; 0x439c <_serialCallBack+0x1e>
    4392:	92 30       	cpi	r25, 0x02	; 2
    4394:	a9 f0       	breq	.+42     	; 0x43c0 <_serialCallBack+0x42>
    4396:	93 30       	cpi	r25, 0x03	; 3
    4398:	19 f1       	breq	.+70     	; 0x43e0 <_serialCallBack+0x62>
    439a:	08 95       	ret
    439c:	6f 3f       	cpi	r22, 0xFF	; 255
    439e:	09 f0       	breq	.+2      	; 0x43a2 <_serialCallBack+0x24>
    43a0:	48 c0       	rjmp	.+144    	; 0x4432 <_serialCallBack+0xb4>
    43a2:	10 92 23 14 	sts	0x1423, r1	; 0x801423 <crc_sum.1945>
    43a6:	81 e0       	ldi	r24, 0x01	; 1
    43a8:	80 93 26 14 	sts	0x1426, r24	; 0x801426 <_mh_state>
    43ac:	08 95       	ret
    43ae:	66 38       	cpi	r22, 0x86	; 134
    43b0:	09 f0       	breq	.+2      	; 0x43b4 <_serialCallBack+0x36>
    43b2:	3f c0       	rjmp	.+126    	; 0x4432 <_serialCallBack+0xb4>
    43b4:	10 92 22 14 	sts	0x1422, r1	; 0x801422 <inDex.1943>
    43b8:	82 e0       	ldi	r24, 0x02	; 2
    43ba:	80 93 26 14 	sts	0x1426, r24	; 0x801426 <_mh_state>
    43be:	08 95       	ret
    43c0:	e0 91 22 14 	lds	r30, 0x1422	; 0x801422 <inDex.1943>
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	8e 0f       	add	r24, r30
    43c8:	80 93 22 14 	sts	0x1422, r24	; 0x801422 <inDex.1943>
    43cc:	f0 e0       	ldi	r31, 0x00	; 0
    43ce:	e0 5e       	subi	r30, 0xE0	; 224
    43d0:	fb 4e       	sbci	r31, 0xEB	; 235
    43d2:	60 83       	st	Z, r22
    43d4:	82 30       	cpi	r24, 0x02	; 2
    43d6:	69 f5       	brne	.+90     	; 0x4432 <_serialCallBack+0xb4>
    43d8:	83 e0       	ldi	r24, 0x03	; 3
    43da:	80 93 26 14 	sts	0x1426, r24	; 0x801426 <_mh_state>
    43de:	08 95       	ret
    43e0:	90 91 22 14 	lds	r25, 0x1422	; 0x801422 <inDex.1943>
    43e4:	21 e0       	ldi	r18, 0x01	; 1
    43e6:	29 0f       	add	r18, r25
    43e8:	20 93 22 14 	sts	0x1422, r18	; 0x801422 <inDex.1943>
    43ec:	96 30       	cpi	r25, 0x06	; 6
    43ee:	09 f5       	brne	.+66     	; 0x4432 <_serialCallBack+0xb4>
    43f0:	81 11       	cpse	r24, r1
    43f2:	0e c0       	rjmp	.+28     	; 0x4410 <_serialCallBack+0x92>
    43f4:	e0 e2       	ldi	r30, 0x20	; 32
    43f6:	f4 e1       	ldi	r31, 0x14	; 20
    43f8:	80 81       	ld	r24, Z
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	98 2f       	mov	r25, r24
    43fe:	88 27       	eor	r24, r24
    4400:	21 81       	ldd	r18, Z+1	; 0x01
    4402:	82 0f       	add	r24, r18
    4404:	91 1d       	adc	r25, r1
    4406:	90 93 28 14 	sts	0x1428, r25	; 0x801428 <_ppm+0x1>
    440a:	80 93 27 14 	sts	0x1427, r24	; 0x801427 <_ppm>
    440e:	04 c0       	rjmp	.+8      	; 0x4418 <_serialCallBack+0x9a>
    4410:	10 92 28 14 	sts	0x1428, r1	; 0x801428 <_ppm+0x1>
    4414:	10 92 27 14 	sts	0x1427, r1	; 0x801427 <_ppm>
    4418:	10 92 26 14 	sts	0x1426, r1	; 0x801426 <_mh_state>
    441c:	e0 91 24 14 	lds	r30, 0x1424	; 0x801424 <_appCallBack>
    4420:	f0 91 25 14 	lds	r31, 0x1425	; 0x801425 <_appCallBack+0x1>
    4424:	30 97       	sbiw	r30, 0x00	; 0
    4426:	29 f0       	breq	.+10     	; 0x4432 <_serialCallBack+0xb4>
    4428:	80 91 27 14 	lds	r24, 0x1427	; 0x801427 <_ppm>
    442c:	90 91 28 14 	lds	r25, 0x1428	; 0x801428 <_ppm+0x1>
    4430:	19 95       	eicall
    4432:	08 95       	ret

00004434 <mh_z19_initialise>:
    4434:	8f 92       	push	r8
    4436:	9f 92       	push	r9
    4438:	af 92       	push	r10
    443a:	cf 92       	push	r12
    443c:	ef 92       	push	r14
    443e:	0f 93       	push	r16
    4440:	0f 2e       	mov	r0, r31
    4442:	ff eb       	ldi	r31, 0xBF	; 191
    4444:	8f 2e       	mov	r8, r31
    4446:	f1 e2       	ldi	r31, 0x21	; 33
    4448:	9f 2e       	mov	r9, r31
    444a:	f0 2d       	mov	r31, r0
    444c:	68 94       	set
    444e:	aa 24       	eor	r10, r10
    4450:	a4 f8       	bld	r10, 4
    4452:	68 94       	set
    4454:	cc 24       	eor	r12, r12
    4456:	c4 f8       	bld	r12, 4
    4458:	e1 2c       	mov	r14, r1
    445a:	00 e0       	ldi	r16, 0x00	; 0
    445c:	23 e0       	ldi	r18, 0x03	; 3
    445e:	40 e8       	ldi	r20, 0x80	; 128
    4460:	55 e2       	ldi	r21, 0x25	; 37
    4462:	60 e0       	ldi	r22, 0x00	; 0
    4464:	70 e0       	ldi	r23, 0x00	; 0
    4466:	3f d0       	rcall	.+126    	; 0x44e6 <serial_create>
    4468:	90 93 2a 14 	sts	0x142A, r25	; 0x80142a <_serial+0x1>
    446c:	80 93 29 14 	sts	0x1429, r24	; 0x801429 <_serial>
    4470:	0f 91       	pop	r16
    4472:	ef 90       	pop	r14
    4474:	cf 90       	pop	r12
    4476:	af 90       	pop	r10
    4478:	9f 90       	pop	r9
    447a:	8f 90       	pop	r8
    447c:	08 95       	ret

0000447e <mh_z19_injectCallBack>:
    447e:	90 93 25 14 	sts	0x1425, r25	; 0x801425 <_appCallBack+0x1>
    4482:	80 93 24 14 	sts	0x1424, r24	; 0x801424 <_appCallBack>
    4486:	08 95       	ret

00004488 <mh_z19_takeMeassuring>:
    4488:	cf 93       	push	r28
    448a:	df 93       	push	r29
    448c:	cd b7       	in	r28, 0x3d	; 61
    448e:	de b7       	in	r29, 0x3e	; 62
    4490:	29 97       	sbiw	r28, 0x09	; 9
    4492:	0f b6       	in	r0, 0x3f	; 63
    4494:	f8 94       	cli
    4496:	de bf       	out	0x3e, r29	; 62
    4498:	0f be       	out	0x3f, r0	; 63
    449a:	cd bf       	out	0x3d, r28	; 61
    449c:	89 e0       	ldi	r24, 0x09	; 9
    449e:	e2 e4       	ldi	r30, 0x42	; 66
    44a0:	f2 e0       	ldi	r31, 0x02	; 2
    44a2:	9e 01       	movw	r18, r28
    44a4:	2f 5f       	subi	r18, 0xFF	; 255
    44a6:	3f 4f       	sbci	r19, 0xFF	; 255
    44a8:	d9 01       	movw	r26, r18
    44aa:	01 90       	ld	r0, Z+
    44ac:	0d 92       	st	X+, r0
    44ae:	8a 95       	dec	r24
    44b0:	e1 f7       	brne	.-8      	; 0x44aa <mh_z19_takeMeassuring+0x22>
    44b2:	10 92 28 14 	sts	0x1428, r1	; 0x801428 <_ppm+0x1>
    44b6:	10 92 27 14 	sts	0x1427, r1	; 0x801427 <_ppm>
    44ba:	80 91 29 14 	lds	r24, 0x1429	; 0x801429 <_serial>
    44be:	90 91 2a 14 	lds	r25, 0x142A	; 0x80142a <_serial+0x1>
    44c2:	00 97       	sbiw	r24, 0x00	; 0
    44c4:	31 f0       	breq	.+12     	; 0x44d2 <mh_z19_takeMeassuring+0x4a>
    44c6:	42 2f       	mov	r20, r18
    44c8:	53 2f       	mov	r21, r19
    44ca:	69 e0       	ldi	r22, 0x09	; 9
    44cc:	dc d0       	rcall	.+440    	; 0x4686 <serial_sendBytes>
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	01 c0       	rjmp	.+2      	; 0x44d4 <mh_z19_takeMeassuring+0x4c>
    44d2:	82 e0       	ldi	r24, 0x02	; 2
    44d4:	29 96       	adiw	r28, 0x09	; 9
    44d6:	0f b6       	in	r0, 0x3f	; 63
    44d8:	f8 94       	cli
    44da:	de bf       	out	0x3e, r29	; 62
    44dc:	0f be       	out	0x3f, r0	; 63
    44de:	cd bf       	out	0x3d, r28	; 61
    44e0:	df 91       	pop	r29
    44e2:	cf 91       	pop	r28
    44e4:	08 95       	ret

000044e6 <serial_create>:
    44e6:	2f 92       	push	r2
    44e8:	3f 92       	push	r3
    44ea:	4f 92       	push	r4
    44ec:	5f 92       	push	r5
    44ee:	6f 92       	push	r6
    44f0:	7f 92       	push	r7
    44f2:	8f 92       	push	r8
    44f4:	9f 92       	push	r9
    44f6:	af 92       	push	r10
    44f8:	cf 92       	push	r12
    44fa:	ef 92       	push	r14
    44fc:	ff 92       	push	r15
    44fe:	0f 93       	push	r16
    4500:	1f 93       	push	r17
    4502:	cf 93       	push	r28
    4504:	df 93       	push	r29
    4506:	cd b7       	in	r28, 0x3d	; 61
    4508:	de b7       	in	r29, 0x3e	; 62
    450a:	f8 2e       	mov	r15, r24
    450c:	2a 01       	movw	r4, r20
    450e:	3b 01       	movw	r6, r22
    4510:	88 e0       	ldi	r24, 0x08	; 8
    4512:	90 e0       	ldi	r25, 0x00	; 0
    4514:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <malloc>
    4518:	8c 01       	movw	r16, r24
    451a:	8f 2d       	mov	r24, r15
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	fc 01       	movw	r30, r24
    4520:	ee 0f       	add	r30, r30
    4522:	ff 1f       	adc	r31, r31
    4524:	e5 5d       	subi	r30, 0xD5	; 213
    4526:	fb 4e       	sbci	r31, 0xEB	; 235
    4528:	11 83       	std	Z+1, r17	; 0x01
    452a:	00 83       	st	Z, r16
    452c:	01 15       	cp	r16, r1
    452e:	11 05       	cpc	r17, r1
    4530:	09 f4       	brne	.+2      	; 0x4534 <serial_create+0x4e>
    4532:	6c c0       	rjmp	.+216    	; 0x460c <serial_create+0x126>
    4534:	88 0f       	add	r24, r24
    4536:	99 1f       	adc	r25, r25
    4538:	fc 01       	movw	r30, r24
    453a:	e5 5f       	subi	r30, 0xF5	; 245
    453c:	fd 4f       	sbci	r31, 0xFD	; 253
    453e:	80 81       	ld	r24, Z
    4540:	91 81       	ldd	r25, Z+1	; 0x01
    4542:	d8 01       	movw	r26, r16
    4544:	8d 93       	st	X+, r24
    4546:	9c 93       	st	X, r25
    4548:	8c 2d       	mov	r24, r12
    454a:	90 e0       	ldi	r25, 0x00	; 0
    454c:	88 0f       	add	r24, r24
    454e:	99 1f       	adc	r25, r25
    4550:	88 0f       	add	r24, r24
    4552:	99 1f       	adc	r25, r25
    4554:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <malloc>
    4558:	1c 01       	movw	r2, r24
    455a:	86 e0       	ldi	r24, 0x06	; 6
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <malloc>
    4562:	7c 01       	movw	r14, r24
    4564:	4c 2d       	mov	r20, r12
    4566:	b1 01       	movw	r22, r2
    4568:	0e 94 be 2a 	call	0x557c	; 0x557c <fifo_init>
    456c:	f8 01       	movw	r30, r16
    456e:	f5 82       	std	Z+5, r15	; 0x05
    4570:	e4 82       	std	Z+4, r14	; 0x04
    4572:	8a 2d       	mov	r24, r10
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	88 0f       	add	r24, r24
    4578:	99 1f       	adc	r25, r25
    457a:	88 0f       	add	r24, r24
    457c:	99 1f       	adc	r25, r25
    457e:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <malloc>
    4582:	1c 01       	movw	r2, r24
    4584:	86 e0       	ldi	r24, 0x06	; 6
    4586:	90 e0       	ldi	r25, 0x00	; 0
    4588:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <malloc>
    458c:	7c 01       	movw	r14, r24
    458e:	4a 2d       	mov	r20, r10
    4590:	b1 01       	movw	r22, r2
    4592:	f4 d7       	rcall	.+4072   	; 0x557c <fifo_init>
    4594:	d8 01       	movw	r26, r16
    4596:	13 96       	adiw	r26, 0x03	; 3
    4598:	fc 92       	st	X, r15
    459a:	ee 92       	st	-X, r14
    459c:	12 97       	sbiw	r26, 0x02	; 2
    459e:	17 96       	adiw	r26, 0x07	; 7
    45a0:	9c 92       	st	X, r9
    45a2:	8e 92       	st	-X, r8
    45a4:	16 97       	sbiw	r26, 0x06	; 6
    45a6:	ff b6       	in	r15, 0x3f	; 63
    45a8:	f8 94       	cli
    45aa:	ed 91       	ld	r30, X+
    45ac:	fc 91       	ld	r31, X
    45ae:	11 97       	sbiw	r26, 0x01	; 1
    45b0:	36 97       	sbiw	r30, 0x06	; 6
    45b2:	80 81       	ld	r24, Z
    45b4:	82 60       	ori	r24, 0x02	; 2
    45b6:	80 83       	st	Z, r24
    45b8:	8d 90       	ld	r8, X+
    45ba:	9c 90       	ld	r9, X
    45bc:	c3 01       	movw	r24, r6
    45be:	b2 01       	movw	r22, r4
    45c0:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__floatunsisf>
    45c4:	20 e0       	ldi	r18, 0x00	; 0
    45c6:	30 e0       	ldi	r19, 0x00	; 0
    45c8:	40 e0       	ldi	r20, 0x00	; 0
    45ca:	51 e4       	ldi	r21, 0x41	; 65
    45cc:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__mulsf3>
    45d0:	9b 01       	movw	r18, r22
    45d2:	ac 01       	movw	r20, r24
    45d4:	60 e0       	ldi	r22, 0x00	; 0
    45d6:	74 e2       	ldi	r23, 0x24	; 36
    45d8:	84 e7       	ldi	r24, 0x74	; 116
    45da:	9b e4       	ldi	r25, 0x4B	; 75
    45dc:	0e 94 41 2b 	call	0x5682	; 0x5682 <__divsf3>
    45e0:	20 e0       	ldi	r18, 0x00	; 0
    45e2:	30 e0       	ldi	r19, 0x00	; 0
    45e4:	40 e8       	ldi	r20, 0x80	; 128
    45e6:	5f e3       	ldi	r21, 0x3F	; 63
    45e8:	e5 d7       	rcall	.+4042   	; 0x55b4 <__subsf3>
    45ea:	59 d9       	rcall	.-3406   	; 0x389e <__fixunssfsi>
    45ec:	f4 01       	movw	r30, r8
    45ee:	32 97       	sbiw	r30, 0x02	; 2
    45f0:	60 83       	st	Z, r22
    45f2:	d8 01       	movw	r26, r16
    45f4:	ed 91       	ld	r30, X+
    45f6:	fc 91       	ld	r31, X
    45f8:	11 97       	sbiw	r26, 0x01	; 1
    45fa:	35 97       	sbiw	r30, 0x05	; 5
    45fc:	88 e9       	ldi	r24, 0x98	; 152
    45fe:	80 83       	st	Z, r24
    4600:	ed 91       	ld	r30, X+
    4602:	fc 91       	ld	r31, X
    4604:	34 97       	sbiw	r30, 0x04	; 4
    4606:	86 e0       	ldi	r24, 0x06	; 6
    4608:	80 83       	st	Z, r24
    460a:	ff be       	out	0x3f, r15	; 63
    460c:	c8 01       	movw	r24, r16
    460e:	df 91       	pop	r29
    4610:	cf 91       	pop	r28
    4612:	1f 91       	pop	r17
    4614:	0f 91       	pop	r16
    4616:	ff 90       	pop	r15
    4618:	ef 90       	pop	r14
    461a:	cf 90       	pop	r12
    461c:	af 90       	pop	r10
    461e:	9f 90       	pop	r9
    4620:	8f 90       	pop	r8
    4622:	7f 90       	pop	r7
    4624:	6f 90       	pop	r6
    4626:	5f 90       	pop	r5
    4628:	4f 90       	pop	r4
    462a:	3f 90       	pop	r3
    462c:	2f 90       	pop	r2
    462e:	08 95       	ret

00004630 <serial_sendByte>:
    4630:	cf 93       	push	r28
    4632:	df 93       	push	r29
    4634:	dc 01       	movw	r26, r24
    4636:	89 2b       	or	r24, r25
    4638:	01 f1       	breq	.+64     	; 0x467a <serial_sendByte+0x4a>
    463a:	12 96       	adiw	r26, 0x02	; 2
    463c:	ed 91       	ld	r30, X+
    463e:	fc 91       	ld	r31, X
    4640:	13 97       	sbiw	r26, 0x03	; 3
    4642:	93 81       	ldd	r25, Z+3	; 0x03
    4644:	82 81       	ldd	r24, Z+2	; 0x02
    4646:	25 81       	ldd	r18, Z+5	; 0x05
    4648:	98 1b       	sub	r25, r24
    464a:	92 23       	and	r25, r18
    464c:	84 81       	ldd	r24, Z+4	; 0x04
    464e:	98 17       	cp	r25, r24
    4650:	b1 f0       	breq	.+44     	; 0x467e <serial_sendByte+0x4e>
    4652:	83 81       	ldd	r24, Z+3	; 0x03
    4654:	26 95       	lsr	r18
    4656:	28 23       	and	r18, r24
    4658:	c0 81       	ld	r28, Z
    465a:	d1 81       	ldd	r29, Z+1	; 0x01
    465c:	c2 0f       	add	r28, r18
    465e:	d1 1d       	adc	r29, r1
    4660:	68 83       	st	Y, r22
    4662:	8f 5f       	subi	r24, 0xFF	; 255
    4664:	95 81       	ldd	r25, Z+5	; 0x05
    4666:	89 23       	and	r24, r25
    4668:	83 83       	std	Z+3, r24	; 0x03
    466a:	ed 91       	ld	r30, X+
    466c:	fc 91       	ld	r31, X
    466e:	35 97       	sbiw	r30, 0x05	; 5
    4670:	80 81       	ld	r24, Z
    4672:	80 62       	ori	r24, 0x20	; 32
    4674:	80 83       	st	Z, r24
    4676:	80 e0       	ldi	r24, 0x00	; 0
    4678:	03 c0       	rjmp	.+6      	; 0x4680 <serial_sendByte+0x50>
    467a:	81 e0       	ldi	r24, 0x01	; 1
    467c:	01 c0       	rjmp	.+2      	; 0x4680 <serial_sendByte+0x50>
    467e:	82 e0       	ldi	r24, 0x02	; 2
    4680:	df 91       	pop	r29
    4682:	cf 91       	pop	r28
    4684:	08 95       	ret

00004686 <serial_sendBytes>:
    4686:	ef 92       	push	r14
    4688:	ff 92       	push	r15
    468a:	0f 93       	push	r16
    468c:	1f 93       	push	r17
    468e:	cf 93       	push	r28
    4690:	df 93       	push	r29
    4692:	7c 01       	movw	r14, r24
    4694:	00 97       	sbiw	r24, 0x00	; 0
    4696:	09 f4       	brne	.+2      	; 0x469a <serial_sendBytes+0x14>
    4698:	41 c0       	rjmp	.+130    	; 0x471c <serial_sendBytes+0x96>
    469a:	dc 01       	movw	r26, r24
    469c:	12 96       	adiw	r26, 0x02	; 2
    469e:	ed 91       	ld	r30, X+
    46a0:	fc 91       	ld	r31, X
    46a2:	13 97       	sbiw	r26, 0x03	; 3
    46a4:	93 81       	ldd	r25, Z+3	; 0x03
    46a6:	82 81       	ldd	r24, Z+2	; 0x02
    46a8:	98 1b       	sub	r25, r24
    46aa:	85 81       	ldd	r24, Z+5	; 0x05
    46ac:	98 23       	and	r25, r24
    46ae:	84 81       	ldd	r24, Z+4	; 0x04
    46b0:	89 1b       	sub	r24, r25
    46b2:	86 17       	cp	r24, r22
    46b4:	a8 f1       	brcs	.+106    	; 0x4720 <serial_sendBytes+0x9a>
    46b6:	66 23       	and	r22, r22
    46b8:	41 f1       	breq	.+80     	; 0x470a <serial_sendBytes+0x84>
    46ba:	84 2f       	mov	r24, r20
    46bc:	95 2f       	mov	r25, r21
    46be:	dc 01       	movw	r26, r24
    46c0:	61 50       	subi	r22, 0x01	; 1
    46c2:	46 2f       	mov	r20, r22
    46c4:	50 e0       	ldi	r21, 0x00	; 0
    46c6:	4f 5f       	subi	r20, 0xFF	; 255
    46c8:	5f 4f       	sbci	r21, 0xFF	; 255
    46ca:	48 0f       	add	r20, r24
    46cc:	59 1f       	adc	r21, r25
    46ce:	e7 01       	movw	r28, r14
    46d0:	ea 81       	ldd	r30, Y+2	; 0x02
    46d2:	fb 81       	ldd	r31, Y+3	; 0x03
    46d4:	93 81       	ldd	r25, Z+3	; 0x03
    46d6:	82 81       	ldd	r24, Z+2	; 0x02
    46d8:	25 81       	ldd	r18, Z+5	; 0x05
    46da:	98 1b       	sub	r25, r24
    46dc:	92 23       	and	r25, r18
    46de:	84 81       	ldd	r24, Z+4	; 0x04
    46e0:	98 17       	cp	r25, r24
    46e2:	79 f0       	breq	.+30     	; 0x4702 <serial_sendBytes+0x7c>
    46e4:	8c 91       	ld	r24, X
    46e6:	93 81       	ldd	r25, Z+3	; 0x03
    46e8:	26 95       	lsr	r18
    46ea:	29 23       	and	r18, r25
    46ec:	60 81       	ld	r22, Z
    46ee:	71 81       	ldd	r23, Z+1	; 0x01
    46f0:	8b 01       	movw	r16, r22
    46f2:	02 0f       	add	r16, r18
    46f4:	11 1d       	adc	r17, r1
    46f6:	e8 01       	movw	r28, r16
    46f8:	88 83       	st	Y, r24
    46fa:	9f 5f       	subi	r25, 0xFF	; 255
    46fc:	85 81       	ldd	r24, Z+5	; 0x05
    46fe:	98 23       	and	r25, r24
    4700:	93 83       	std	Z+3, r25	; 0x03
    4702:	11 96       	adiw	r26, 0x01	; 1
    4704:	a4 17       	cp	r26, r20
    4706:	b5 07       	cpc	r27, r21
    4708:	11 f7       	brne	.-60     	; 0x46ce <serial_sendBytes+0x48>
    470a:	d7 01       	movw	r26, r14
    470c:	ed 91       	ld	r30, X+
    470e:	fc 91       	ld	r31, X
    4710:	35 97       	sbiw	r30, 0x05	; 5
    4712:	80 81       	ld	r24, Z
    4714:	80 62       	ori	r24, 0x20	; 32
    4716:	80 83       	st	Z, r24
    4718:	80 e0       	ldi	r24, 0x00	; 0
    471a:	03 c0       	rjmp	.+6      	; 0x4722 <serial_sendBytes+0x9c>
    471c:	81 e0       	ldi	r24, 0x01	; 1
    471e:	01 c0       	rjmp	.+2      	; 0x4722 <serial_sendBytes+0x9c>
    4720:	82 e0       	ldi	r24, 0x02	; 2
    4722:	df 91       	pop	r29
    4724:	cf 91       	pop	r28
    4726:	1f 91       	pop	r17
    4728:	0f 91       	pop	r16
    472a:	ff 90       	pop	r15
    472c:	ef 90       	pop	r14
    472e:	08 95       	ret

00004730 <serial_getByte>:
    4730:	00 97       	sbiw	r24, 0x00	; 0
    4732:	d1 f0       	breq	.+52     	; 0x4768 <serial_getByte+0x38>
    4734:	dc 01       	movw	r26, r24
    4736:	14 96       	adiw	r26, 0x04	; 4
    4738:	ed 91       	ld	r30, X+
    473a:	fc 91       	ld	r31, X
    473c:	15 97       	sbiw	r26, 0x05	; 5
    473e:	93 81       	ldd	r25, Z+3	; 0x03
    4740:	82 81       	ldd	r24, Z+2	; 0x02
    4742:	98 17       	cp	r25, r24
    4744:	99 f0       	breq	.+38     	; 0x476c <serial_getByte+0x3c>
    4746:	92 81       	ldd	r25, Z+2	; 0x02
    4748:	85 81       	ldd	r24, Z+5	; 0x05
    474a:	86 95       	lsr	r24
    474c:	89 23       	and	r24, r25
    474e:	a0 81       	ld	r26, Z
    4750:	b1 81       	ldd	r27, Z+1	; 0x01
    4752:	a8 0f       	add	r26, r24
    4754:	b1 1d       	adc	r27, r1
    4756:	8c 91       	ld	r24, X
    4758:	db 01       	movw	r26, r22
    475a:	8c 93       	st	X, r24
    475c:	9f 5f       	subi	r25, 0xFF	; 255
    475e:	85 81       	ldd	r24, Z+5	; 0x05
    4760:	98 23       	and	r25, r24
    4762:	92 83       	std	Z+2, r25	; 0x02
    4764:	80 e0       	ldi	r24, 0x00	; 0
    4766:	08 95       	ret
    4768:	81 e0       	ldi	r24, 0x01	; 1
    476a:	08 95       	ret
    476c:	83 e0       	ldi	r24, 0x03	; 3
    476e:	08 95       	ret

00004770 <__vector_25>:
    4770:	1f 92       	push	r1
    4772:	0f 92       	push	r0
    4774:	0f b6       	in	r0, 0x3f	; 63
    4776:	0f 92       	push	r0
    4778:	11 24       	eor	r1, r1
    477a:	0b b6       	in	r0, 0x3b	; 59
    477c:	0f 92       	push	r0
    477e:	2f 93       	push	r18
    4780:	3f 93       	push	r19
    4782:	4f 93       	push	r20
    4784:	5f 93       	push	r21
    4786:	6f 93       	push	r22
    4788:	7f 93       	push	r23
    478a:	8f 93       	push	r24
    478c:	9f 93       	push	r25
    478e:	af 93       	push	r26
    4790:	bf 93       	push	r27
    4792:	cf 93       	push	r28
    4794:	df 93       	push	r29
    4796:	ef 93       	push	r30
    4798:	ff 93       	push	r31
    479a:	a0 91 2b 14 	lds	r26, 0x142B	; 0x80142b <_ser_handle>
    479e:	b0 91 2c 14 	lds	r27, 0x142C	; 0x80142c <_ser_handle+0x1>
    47a2:	10 97       	sbiw	r26, 0x00	; 0
    47a4:	11 f1       	breq	.+68     	; 0x47ea <__vector_25+0x7a>
    47a6:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    47aa:	14 96       	adiw	r26, 0x04	; 4
    47ac:	ed 91       	ld	r30, X+
    47ae:	fc 91       	ld	r31, X
    47b0:	15 97       	sbiw	r26, 0x05	; 5
    47b2:	93 81       	ldd	r25, Z+3	; 0x03
    47b4:	82 81       	ldd	r24, Z+2	; 0x02
    47b6:	25 81       	ldd	r18, Z+5	; 0x05
    47b8:	98 1b       	sub	r25, r24
    47ba:	92 23       	and	r25, r18
    47bc:	84 81       	ldd	r24, Z+4	; 0x04
    47be:	98 17       	cp	r25, r24
    47c0:	61 f0       	breq	.+24     	; 0x47da <__vector_25+0x6a>
    47c2:	83 81       	ldd	r24, Z+3	; 0x03
    47c4:	26 95       	lsr	r18
    47c6:	28 23       	and	r18, r24
    47c8:	c0 81       	ld	r28, Z
    47ca:	d1 81       	ldd	r29, Z+1	; 0x01
    47cc:	c2 0f       	add	r28, r18
    47ce:	d1 1d       	adc	r29, r1
    47d0:	68 83       	st	Y, r22
    47d2:	8f 5f       	subi	r24, 0xFF	; 255
    47d4:	95 81       	ldd	r25, Z+5	; 0x05
    47d6:	89 23       	and	r24, r25
    47d8:	83 83       	std	Z+3, r24	; 0x03
    47da:	16 96       	adiw	r26, 0x06	; 6
    47dc:	ed 91       	ld	r30, X+
    47de:	fc 91       	ld	r31, X
    47e0:	17 97       	sbiw	r26, 0x07	; 7
    47e2:	30 97       	sbiw	r30, 0x00	; 0
    47e4:	11 f0       	breq	.+4      	; 0x47ea <__vector_25+0x7a>
    47e6:	cd 01       	movw	r24, r26
    47e8:	19 95       	eicall
    47ea:	ff 91       	pop	r31
    47ec:	ef 91       	pop	r30
    47ee:	df 91       	pop	r29
    47f0:	cf 91       	pop	r28
    47f2:	bf 91       	pop	r27
    47f4:	af 91       	pop	r26
    47f6:	9f 91       	pop	r25
    47f8:	8f 91       	pop	r24
    47fa:	7f 91       	pop	r23
    47fc:	6f 91       	pop	r22
    47fe:	5f 91       	pop	r21
    4800:	4f 91       	pop	r20
    4802:	3f 91       	pop	r19
    4804:	2f 91       	pop	r18
    4806:	0f 90       	pop	r0
    4808:	0b be       	out	0x3b, r0	; 59
    480a:	0f 90       	pop	r0
    480c:	0f be       	out	0x3f, r0	; 63
    480e:	0f 90       	pop	r0
    4810:	1f 90       	pop	r1
    4812:	18 95       	reti

00004814 <__vector_26>:
    4814:	1f 92       	push	r1
    4816:	0f 92       	push	r0
    4818:	0f b6       	in	r0, 0x3f	; 63
    481a:	0f 92       	push	r0
    481c:	11 24       	eor	r1, r1
    481e:	0b b6       	in	r0, 0x3b	; 59
    4820:	0f 92       	push	r0
    4822:	2f 93       	push	r18
    4824:	8f 93       	push	r24
    4826:	9f 93       	push	r25
    4828:	af 93       	push	r26
    482a:	bf 93       	push	r27
    482c:	ef 93       	push	r30
    482e:	ff 93       	push	r31
    4830:	e0 91 2b 14 	lds	r30, 0x142B	; 0x80142b <_ser_handle>
    4834:	f0 91 2c 14 	lds	r31, 0x142C	; 0x80142c <_ser_handle+0x1>
    4838:	30 97       	sbiw	r30, 0x00	; 0
    483a:	b9 f0       	breq	.+46     	; 0x486a <__vector_26+0x56>
    483c:	02 80       	ldd	r0, Z+2	; 0x02
    483e:	f3 81       	ldd	r31, Z+3	; 0x03
    4840:	e0 2d       	mov	r30, r0
    4842:	93 81       	ldd	r25, Z+3	; 0x03
    4844:	82 81       	ldd	r24, Z+2	; 0x02
    4846:	98 17       	cp	r25, r24
    4848:	b1 f0       	breq	.+44     	; 0x4876 <__vector_26+0x62>
    484a:	92 81       	ldd	r25, Z+2	; 0x02
    484c:	85 81       	ldd	r24, Z+5	; 0x05
    484e:	28 2f       	mov	r18, r24
    4850:	26 95       	lsr	r18
    4852:	29 23       	and	r18, r25
    4854:	a0 81       	ld	r26, Z
    4856:	b1 81       	ldd	r27, Z+1	; 0x01
    4858:	a2 0f       	add	r26, r18
    485a:	b1 1d       	adc	r27, r1
    485c:	2c 91       	ld	r18, X
    485e:	9f 5f       	subi	r25, 0xFF	; 255
    4860:	89 23       	and	r24, r25
    4862:	82 83       	std	Z+2, r24	; 0x02
    4864:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4868:	0b c0       	rjmp	.+22     	; 0x4880 <__vector_26+0x6c>
    486a:	e1 ec       	ldi	r30, 0xC1	; 193
    486c:	f0 e0       	ldi	r31, 0x00	; 0
    486e:	80 81       	ld	r24, Z
    4870:	8f 7d       	andi	r24, 0xDF	; 223
    4872:	80 83       	st	Z, r24
    4874:	05 c0       	rjmp	.+10     	; 0x4880 <__vector_26+0x6c>
    4876:	e1 ec       	ldi	r30, 0xC1	; 193
    4878:	f0 e0       	ldi	r31, 0x00	; 0
    487a:	80 81       	ld	r24, Z
    487c:	8f 7d       	andi	r24, 0xDF	; 223
    487e:	80 83       	st	Z, r24
    4880:	ff 91       	pop	r31
    4882:	ef 91       	pop	r30
    4884:	bf 91       	pop	r27
    4886:	af 91       	pop	r26
    4888:	9f 91       	pop	r25
    488a:	8f 91       	pop	r24
    488c:	2f 91       	pop	r18
    488e:	0f 90       	pop	r0
    4890:	0b be       	out	0x3b, r0	; 59
    4892:	0f 90       	pop	r0
    4894:	0f be       	out	0x3f, r0	; 63
    4896:	0f 90       	pop	r0
    4898:	1f 90       	pop	r1
    489a:	18 95       	reti

0000489c <__vector_36>:
    489c:	1f 92       	push	r1
    489e:	0f 92       	push	r0
    48a0:	0f b6       	in	r0, 0x3f	; 63
    48a2:	0f 92       	push	r0
    48a4:	11 24       	eor	r1, r1
    48a6:	0b b6       	in	r0, 0x3b	; 59
    48a8:	0f 92       	push	r0
    48aa:	2f 93       	push	r18
    48ac:	3f 93       	push	r19
    48ae:	4f 93       	push	r20
    48b0:	5f 93       	push	r21
    48b2:	6f 93       	push	r22
    48b4:	7f 93       	push	r23
    48b6:	8f 93       	push	r24
    48b8:	9f 93       	push	r25
    48ba:	af 93       	push	r26
    48bc:	bf 93       	push	r27
    48be:	cf 93       	push	r28
    48c0:	df 93       	push	r29
    48c2:	ef 93       	push	r30
    48c4:	ff 93       	push	r31
    48c6:	a0 91 2d 14 	lds	r26, 0x142D	; 0x80142d <_ser_handle+0x2>
    48ca:	b0 91 2e 14 	lds	r27, 0x142E	; 0x80142e <_ser_handle+0x3>
    48ce:	10 97       	sbiw	r26, 0x00	; 0
    48d0:	11 f1       	breq	.+68     	; 0x4916 <__vector_36+0x7a>
    48d2:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    48d6:	14 96       	adiw	r26, 0x04	; 4
    48d8:	ed 91       	ld	r30, X+
    48da:	fc 91       	ld	r31, X
    48dc:	15 97       	sbiw	r26, 0x05	; 5
    48de:	93 81       	ldd	r25, Z+3	; 0x03
    48e0:	82 81       	ldd	r24, Z+2	; 0x02
    48e2:	25 81       	ldd	r18, Z+5	; 0x05
    48e4:	98 1b       	sub	r25, r24
    48e6:	92 23       	and	r25, r18
    48e8:	84 81       	ldd	r24, Z+4	; 0x04
    48ea:	98 17       	cp	r25, r24
    48ec:	61 f0       	breq	.+24     	; 0x4906 <__vector_36+0x6a>
    48ee:	83 81       	ldd	r24, Z+3	; 0x03
    48f0:	26 95       	lsr	r18
    48f2:	28 23       	and	r18, r24
    48f4:	c0 81       	ld	r28, Z
    48f6:	d1 81       	ldd	r29, Z+1	; 0x01
    48f8:	c2 0f       	add	r28, r18
    48fa:	d1 1d       	adc	r29, r1
    48fc:	68 83       	st	Y, r22
    48fe:	8f 5f       	subi	r24, 0xFF	; 255
    4900:	95 81       	ldd	r25, Z+5	; 0x05
    4902:	89 23       	and	r24, r25
    4904:	83 83       	std	Z+3, r24	; 0x03
    4906:	16 96       	adiw	r26, 0x06	; 6
    4908:	ed 91       	ld	r30, X+
    490a:	fc 91       	ld	r31, X
    490c:	17 97       	sbiw	r26, 0x07	; 7
    490e:	30 97       	sbiw	r30, 0x00	; 0
    4910:	11 f0       	breq	.+4      	; 0x4916 <__vector_36+0x7a>
    4912:	cd 01       	movw	r24, r26
    4914:	19 95       	eicall
    4916:	ff 91       	pop	r31
    4918:	ef 91       	pop	r30
    491a:	df 91       	pop	r29
    491c:	cf 91       	pop	r28
    491e:	bf 91       	pop	r27
    4920:	af 91       	pop	r26
    4922:	9f 91       	pop	r25
    4924:	8f 91       	pop	r24
    4926:	7f 91       	pop	r23
    4928:	6f 91       	pop	r22
    492a:	5f 91       	pop	r21
    492c:	4f 91       	pop	r20
    492e:	3f 91       	pop	r19
    4930:	2f 91       	pop	r18
    4932:	0f 90       	pop	r0
    4934:	0b be       	out	0x3b, r0	; 59
    4936:	0f 90       	pop	r0
    4938:	0f be       	out	0x3f, r0	; 63
    493a:	0f 90       	pop	r0
    493c:	1f 90       	pop	r1
    493e:	18 95       	reti

00004940 <__vector_37>:
    4940:	1f 92       	push	r1
    4942:	0f 92       	push	r0
    4944:	0f b6       	in	r0, 0x3f	; 63
    4946:	0f 92       	push	r0
    4948:	11 24       	eor	r1, r1
    494a:	0b b6       	in	r0, 0x3b	; 59
    494c:	0f 92       	push	r0
    494e:	2f 93       	push	r18
    4950:	8f 93       	push	r24
    4952:	9f 93       	push	r25
    4954:	af 93       	push	r26
    4956:	bf 93       	push	r27
    4958:	ef 93       	push	r30
    495a:	ff 93       	push	r31
    495c:	e0 91 2d 14 	lds	r30, 0x142D	; 0x80142d <_ser_handle+0x2>
    4960:	f0 91 2e 14 	lds	r31, 0x142E	; 0x80142e <_ser_handle+0x3>
    4964:	30 97       	sbiw	r30, 0x00	; 0
    4966:	b9 f0       	breq	.+46     	; 0x4996 <__vector_37+0x56>
    4968:	02 80       	ldd	r0, Z+2	; 0x02
    496a:	f3 81       	ldd	r31, Z+3	; 0x03
    496c:	e0 2d       	mov	r30, r0
    496e:	93 81       	ldd	r25, Z+3	; 0x03
    4970:	82 81       	ldd	r24, Z+2	; 0x02
    4972:	98 17       	cp	r25, r24
    4974:	b1 f0       	breq	.+44     	; 0x49a2 <__vector_37+0x62>
    4976:	92 81       	ldd	r25, Z+2	; 0x02
    4978:	85 81       	ldd	r24, Z+5	; 0x05
    497a:	28 2f       	mov	r18, r24
    497c:	26 95       	lsr	r18
    497e:	29 23       	and	r18, r25
    4980:	a0 81       	ld	r26, Z
    4982:	b1 81       	ldd	r27, Z+1	; 0x01
    4984:	a2 0f       	add	r26, r18
    4986:	b1 1d       	adc	r27, r1
    4988:	2c 91       	ld	r18, X
    498a:	9f 5f       	subi	r25, 0xFF	; 255
    498c:	89 23       	and	r24, r25
    498e:	82 83       	std	Z+2, r24	; 0x02
    4990:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4994:	0b c0       	rjmp	.+22     	; 0x49ac <__vector_37+0x6c>
    4996:	e9 ec       	ldi	r30, 0xC9	; 201
    4998:	f0 e0       	ldi	r31, 0x00	; 0
    499a:	80 81       	ld	r24, Z
    499c:	8f 7d       	andi	r24, 0xDF	; 223
    499e:	80 83       	st	Z, r24
    49a0:	05 c0       	rjmp	.+10     	; 0x49ac <__vector_37+0x6c>
    49a2:	e9 ec       	ldi	r30, 0xC9	; 201
    49a4:	f0 e0       	ldi	r31, 0x00	; 0
    49a6:	80 81       	ld	r24, Z
    49a8:	8f 7d       	andi	r24, 0xDF	; 223
    49aa:	80 83       	st	Z, r24
    49ac:	ff 91       	pop	r31
    49ae:	ef 91       	pop	r30
    49b0:	bf 91       	pop	r27
    49b2:	af 91       	pop	r26
    49b4:	9f 91       	pop	r25
    49b6:	8f 91       	pop	r24
    49b8:	2f 91       	pop	r18
    49ba:	0f 90       	pop	r0
    49bc:	0b be       	out	0x3b, r0	; 59
    49be:	0f 90       	pop	r0
    49c0:	0f be       	out	0x3f, r0	; 63
    49c2:	0f 90       	pop	r0
    49c4:	1f 90       	pop	r1
    49c6:	18 95       	reti

000049c8 <__vector_51>:
    49c8:	1f 92       	push	r1
    49ca:	0f 92       	push	r0
    49cc:	0f b6       	in	r0, 0x3f	; 63
    49ce:	0f 92       	push	r0
    49d0:	11 24       	eor	r1, r1
    49d2:	0b b6       	in	r0, 0x3b	; 59
    49d4:	0f 92       	push	r0
    49d6:	2f 93       	push	r18
    49d8:	3f 93       	push	r19
    49da:	4f 93       	push	r20
    49dc:	5f 93       	push	r21
    49de:	6f 93       	push	r22
    49e0:	7f 93       	push	r23
    49e2:	8f 93       	push	r24
    49e4:	9f 93       	push	r25
    49e6:	af 93       	push	r26
    49e8:	bf 93       	push	r27
    49ea:	cf 93       	push	r28
    49ec:	df 93       	push	r29
    49ee:	ef 93       	push	r30
    49f0:	ff 93       	push	r31
    49f2:	a0 91 2f 14 	lds	r26, 0x142F	; 0x80142f <_ser_handle+0x4>
    49f6:	b0 91 30 14 	lds	r27, 0x1430	; 0x801430 <_ser_handle+0x5>
    49fa:	10 97       	sbiw	r26, 0x00	; 0
    49fc:	11 f1       	breq	.+68     	; 0x4a42 <__vector_51+0x7a>
    49fe:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4a02:	14 96       	adiw	r26, 0x04	; 4
    4a04:	ed 91       	ld	r30, X+
    4a06:	fc 91       	ld	r31, X
    4a08:	15 97       	sbiw	r26, 0x05	; 5
    4a0a:	93 81       	ldd	r25, Z+3	; 0x03
    4a0c:	82 81       	ldd	r24, Z+2	; 0x02
    4a0e:	25 81       	ldd	r18, Z+5	; 0x05
    4a10:	98 1b       	sub	r25, r24
    4a12:	92 23       	and	r25, r18
    4a14:	84 81       	ldd	r24, Z+4	; 0x04
    4a16:	98 17       	cp	r25, r24
    4a18:	61 f0       	breq	.+24     	; 0x4a32 <__vector_51+0x6a>
    4a1a:	83 81       	ldd	r24, Z+3	; 0x03
    4a1c:	26 95       	lsr	r18
    4a1e:	28 23       	and	r18, r24
    4a20:	c0 81       	ld	r28, Z
    4a22:	d1 81       	ldd	r29, Z+1	; 0x01
    4a24:	c2 0f       	add	r28, r18
    4a26:	d1 1d       	adc	r29, r1
    4a28:	68 83       	st	Y, r22
    4a2a:	8f 5f       	subi	r24, 0xFF	; 255
    4a2c:	95 81       	ldd	r25, Z+5	; 0x05
    4a2e:	89 23       	and	r24, r25
    4a30:	83 83       	std	Z+3, r24	; 0x03
    4a32:	16 96       	adiw	r26, 0x06	; 6
    4a34:	ed 91       	ld	r30, X+
    4a36:	fc 91       	ld	r31, X
    4a38:	17 97       	sbiw	r26, 0x07	; 7
    4a3a:	30 97       	sbiw	r30, 0x00	; 0
    4a3c:	11 f0       	breq	.+4      	; 0x4a42 <__vector_51+0x7a>
    4a3e:	cd 01       	movw	r24, r26
    4a40:	19 95       	eicall
    4a42:	ff 91       	pop	r31
    4a44:	ef 91       	pop	r30
    4a46:	df 91       	pop	r29
    4a48:	cf 91       	pop	r28
    4a4a:	bf 91       	pop	r27
    4a4c:	af 91       	pop	r26
    4a4e:	9f 91       	pop	r25
    4a50:	8f 91       	pop	r24
    4a52:	7f 91       	pop	r23
    4a54:	6f 91       	pop	r22
    4a56:	5f 91       	pop	r21
    4a58:	4f 91       	pop	r20
    4a5a:	3f 91       	pop	r19
    4a5c:	2f 91       	pop	r18
    4a5e:	0f 90       	pop	r0
    4a60:	0b be       	out	0x3b, r0	; 59
    4a62:	0f 90       	pop	r0
    4a64:	0f be       	out	0x3f, r0	; 63
    4a66:	0f 90       	pop	r0
    4a68:	1f 90       	pop	r1
    4a6a:	18 95       	reti

00004a6c <__vector_52>:
    4a6c:	1f 92       	push	r1
    4a6e:	0f 92       	push	r0
    4a70:	0f b6       	in	r0, 0x3f	; 63
    4a72:	0f 92       	push	r0
    4a74:	11 24       	eor	r1, r1
    4a76:	0b b6       	in	r0, 0x3b	; 59
    4a78:	0f 92       	push	r0
    4a7a:	2f 93       	push	r18
    4a7c:	8f 93       	push	r24
    4a7e:	9f 93       	push	r25
    4a80:	af 93       	push	r26
    4a82:	bf 93       	push	r27
    4a84:	ef 93       	push	r30
    4a86:	ff 93       	push	r31
    4a88:	e0 91 2f 14 	lds	r30, 0x142F	; 0x80142f <_ser_handle+0x4>
    4a8c:	f0 91 30 14 	lds	r31, 0x1430	; 0x801430 <_ser_handle+0x5>
    4a90:	30 97       	sbiw	r30, 0x00	; 0
    4a92:	b9 f0       	breq	.+46     	; 0x4ac2 <__vector_52+0x56>
    4a94:	02 80       	ldd	r0, Z+2	; 0x02
    4a96:	f3 81       	ldd	r31, Z+3	; 0x03
    4a98:	e0 2d       	mov	r30, r0
    4a9a:	93 81       	ldd	r25, Z+3	; 0x03
    4a9c:	82 81       	ldd	r24, Z+2	; 0x02
    4a9e:	98 17       	cp	r25, r24
    4aa0:	b1 f0       	breq	.+44     	; 0x4ace <__vector_52+0x62>
    4aa2:	92 81       	ldd	r25, Z+2	; 0x02
    4aa4:	85 81       	ldd	r24, Z+5	; 0x05
    4aa6:	28 2f       	mov	r18, r24
    4aa8:	26 95       	lsr	r18
    4aaa:	29 23       	and	r18, r25
    4aac:	a0 81       	ld	r26, Z
    4aae:	b1 81       	ldd	r27, Z+1	; 0x01
    4ab0:	a2 0f       	add	r26, r18
    4ab2:	b1 1d       	adc	r27, r1
    4ab4:	2c 91       	ld	r18, X
    4ab6:	9f 5f       	subi	r25, 0xFF	; 255
    4ab8:	89 23       	and	r24, r25
    4aba:	82 83       	std	Z+2, r24	; 0x02
    4abc:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4ac0:	0b c0       	rjmp	.+22     	; 0x4ad8 <__vector_52+0x6c>
    4ac2:	e1 ed       	ldi	r30, 0xD1	; 209
    4ac4:	f0 e0       	ldi	r31, 0x00	; 0
    4ac6:	80 81       	ld	r24, Z
    4ac8:	8f 7d       	andi	r24, 0xDF	; 223
    4aca:	80 83       	st	Z, r24
    4acc:	05 c0       	rjmp	.+10     	; 0x4ad8 <__vector_52+0x6c>
    4ace:	e1 ed       	ldi	r30, 0xD1	; 209
    4ad0:	f0 e0       	ldi	r31, 0x00	; 0
    4ad2:	80 81       	ld	r24, Z
    4ad4:	8f 7d       	andi	r24, 0xDF	; 223
    4ad6:	80 83       	st	Z, r24
    4ad8:	ff 91       	pop	r31
    4ada:	ef 91       	pop	r30
    4adc:	bf 91       	pop	r27
    4ade:	af 91       	pop	r26
    4ae0:	9f 91       	pop	r25
    4ae2:	8f 91       	pop	r24
    4ae4:	2f 91       	pop	r18
    4ae6:	0f 90       	pop	r0
    4ae8:	0b be       	out	0x3b, r0	; 59
    4aea:	0f 90       	pop	r0
    4aec:	0f be       	out	0x3f, r0	; 63
    4aee:	0f 90       	pop	r0
    4af0:	1f 90       	pop	r1
    4af2:	18 95       	reti

00004af4 <__vector_54>:
    4af4:	1f 92       	push	r1
    4af6:	0f 92       	push	r0
    4af8:	0f b6       	in	r0, 0x3f	; 63
    4afa:	0f 92       	push	r0
    4afc:	11 24       	eor	r1, r1
    4afe:	0b b6       	in	r0, 0x3b	; 59
    4b00:	0f 92       	push	r0
    4b02:	2f 93       	push	r18
    4b04:	3f 93       	push	r19
    4b06:	4f 93       	push	r20
    4b08:	5f 93       	push	r21
    4b0a:	6f 93       	push	r22
    4b0c:	7f 93       	push	r23
    4b0e:	8f 93       	push	r24
    4b10:	9f 93       	push	r25
    4b12:	af 93       	push	r26
    4b14:	bf 93       	push	r27
    4b16:	cf 93       	push	r28
    4b18:	df 93       	push	r29
    4b1a:	ef 93       	push	r30
    4b1c:	ff 93       	push	r31
    4b1e:	a0 91 31 14 	lds	r26, 0x1431	; 0x801431 <_ser_handle+0x6>
    4b22:	b0 91 32 14 	lds	r27, 0x1432	; 0x801432 <_ser_handle+0x7>
    4b26:	10 97       	sbiw	r26, 0x00	; 0
    4b28:	11 f1       	breq	.+68     	; 0x4b6e <__vector_54+0x7a>
    4b2a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4b2e:	14 96       	adiw	r26, 0x04	; 4
    4b30:	ed 91       	ld	r30, X+
    4b32:	fc 91       	ld	r31, X
    4b34:	15 97       	sbiw	r26, 0x05	; 5
    4b36:	93 81       	ldd	r25, Z+3	; 0x03
    4b38:	82 81       	ldd	r24, Z+2	; 0x02
    4b3a:	25 81       	ldd	r18, Z+5	; 0x05
    4b3c:	98 1b       	sub	r25, r24
    4b3e:	92 23       	and	r25, r18
    4b40:	84 81       	ldd	r24, Z+4	; 0x04
    4b42:	98 17       	cp	r25, r24
    4b44:	61 f0       	breq	.+24     	; 0x4b5e <__vector_54+0x6a>
    4b46:	83 81       	ldd	r24, Z+3	; 0x03
    4b48:	26 95       	lsr	r18
    4b4a:	28 23       	and	r18, r24
    4b4c:	c0 81       	ld	r28, Z
    4b4e:	d1 81       	ldd	r29, Z+1	; 0x01
    4b50:	c2 0f       	add	r28, r18
    4b52:	d1 1d       	adc	r29, r1
    4b54:	68 83       	st	Y, r22
    4b56:	8f 5f       	subi	r24, 0xFF	; 255
    4b58:	95 81       	ldd	r25, Z+5	; 0x05
    4b5a:	89 23       	and	r24, r25
    4b5c:	83 83       	std	Z+3, r24	; 0x03
    4b5e:	16 96       	adiw	r26, 0x06	; 6
    4b60:	ed 91       	ld	r30, X+
    4b62:	fc 91       	ld	r31, X
    4b64:	17 97       	sbiw	r26, 0x07	; 7
    4b66:	30 97       	sbiw	r30, 0x00	; 0
    4b68:	11 f0       	breq	.+4      	; 0x4b6e <__vector_54+0x7a>
    4b6a:	cd 01       	movw	r24, r26
    4b6c:	19 95       	eicall
    4b6e:	ff 91       	pop	r31
    4b70:	ef 91       	pop	r30
    4b72:	df 91       	pop	r29
    4b74:	cf 91       	pop	r28
    4b76:	bf 91       	pop	r27
    4b78:	af 91       	pop	r26
    4b7a:	9f 91       	pop	r25
    4b7c:	8f 91       	pop	r24
    4b7e:	7f 91       	pop	r23
    4b80:	6f 91       	pop	r22
    4b82:	5f 91       	pop	r21
    4b84:	4f 91       	pop	r20
    4b86:	3f 91       	pop	r19
    4b88:	2f 91       	pop	r18
    4b8a:	0f 90       	pop	r0
    4b8c:	0b be       	out	0x3b, r0	; 59
    4b8e:	0f 90       	pop	r0
    4b90:	0f be       	out	0x3f, r0	; 63
    4b92:	0f 90       	pop	r0
    4b94:	1f 90       	pop	r1
    4b96:	18 95       	reti

00004b98 <__vector_55>:
    4b98:	1f 92       	push	r1
    4b9a:	0f 92       	push	r0
    4b9c:	0f b6       	in	r0, 0x3f	; 63
    4b9e:	0f 92       	push	r0
    4ba0:	11 24       	eor	r1, r1
    4ba2:	0b b6       	in	r0, 0x3b	; 59
    4ba4:	0f 92       	push	r0
    4ba6:	2f 93       	push	r18
    4ba8:	8f 93       	push	r24
    4baa:	9f 93       	push	r25
    4bac:	af 93       	push	r26
    4bae:	bf 93       	push	r27
    4bb0:	ef 93       	push	r30
    4bb2:	ff 93       	push	r31
    4bb4:	e0 91 31 14 	lds	r30, 0x1431	; 0x801431 <_ser_handle+0x6>
    4bb8:	f0 91 32 14 	lds	r31, 0x1432	; 0x801432 <_ser_handle+0x7>
    4bbc:	30 97       	sbiw	r30, 0x00	; 0
    4bbe:	b9 f0       	breq	.+46     	; 0x4bee <__vector_55+0x56>
    4bc0:	02 80       	ldd	r0, Z+2	; 0x02
    4bc2:	f3 81       	ldd	r31, Z+3	; 0x03
    4bc4:	e0 2d       	mov	r30, r0
    4bc6:	93 81       	ldd	r25, Z+3	; 0x03
    4bc8:	82 81       	ldd	r24, Z+2	; 0x02
    4bca:	98 17       	cp	r25, r24
    4bcc:	b1 f0       	breq	.+44     	; 0x4bfa <__vector_55+0x62>
    4bce:	92 81       	ldd	r25, Z+2	; 0x02
    4bd0:	85 81       	ldd	r24, Z+5	; 0x05
    4bd2:	28 2f       	mov	r18, r24
    4bd4:	26 95       	lsr	r18
    4bd6:	29 23       	and	r18, r25
    4bd8:	a0 81       	ld	r26, Z
    4bda:	b1 81       	ldd	r27, Z+1	; 0x01
    4bdc:	a2 0f       	add	r26, r18
    4bde:	b1 1d       	adc	r27, r1
    4be0:	2c 91       	ld	r18, X
    4be2:	9f 5f       	subi	r25, 0xFF	; 255
    4be4:	89 23       	and	r24, r25
    4be6:	82 83       	std	Z+2, r24	; 0x02
    4be8:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4bec:	0b c0       	rjmp	.+22     	; 0x4c04 <__vector_55+0x6c>
    4bee:	e1 e3       	ldi	r30, 0x31	; 49
    4bf0:	f1 e0       	ldi	r31, 0x01	; 1
    4bf2:	80 81       	ld	r24, Z
    4bf4:	8f 7d       	andi	r24, 0xDF	; 223
    4bf6:	80 83       	st	Z, r24
    4bf8:	05 c0       	rjmp	.+10     	; 0x4c04 <__vector_55+0x6c>
    4bfa:	e1 e3       	ldi	r30, 0x31	; 49
    4bfc:	f1 e0       	ldi	r31, 0x01	; 1
    4bfe:	80 81       	ld	r24, Z
    4c00:	8f 7d       	andi	r24, 0xDF	; 223
    4c02:	80 83       	st	Z, r24
    4c04:	ff 91       	pop	r31
    4c06:	ef 91       	pop	r30
    4c08:	bf 91       	pop	r27
    4c0a:	af 91       	pop	r26
    4c0c:	9f 91       	pop	r25
    4c0e:	8f 91       	pop	r24
    4c10:	2f 91       	pop	r18
    4c12:	0f 90       	pop	r0
    4c14:	0b be       	out	0x3b, r0	; 59
    4c16:	0f 90       	pop	r0
    4c18:	0f be       	out	0x3f, r0	; 63
    4c1a:	0f 90       	pop	r0
    4c1c:	1f 90       	pop	r1
    4c1e:	18 95       	reti

00004c20 <usart_getchar>:
    4c20:	cf 93       	push	r28
    4c22:	df 93       	push	r29
    4c24:	1f 92       	push	r1
    4c26:	cd b7       	in	r28, 0x3d	; 61
    4c28:	de b7       	in	r29, 0x3e	; 62
    4c2a:	be 01       	movw	r22, r28
    4c2c:	6f 5f       	subi	r22, 0xFF	; 255
    4c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c30:	80 91 33 14 	lds	r24, 0x1433	; 0x801433 <_com_serial_instance>
    4c34:	90 91 34 14 	lds	r25, 0x1434	; 0x801434 <_com_serial_instance+0x1>
    4c38:	7b dd       	rcall	.-1290   	; 0x4730 <serial_getByte>
    4c3a:	81 11       	cpse	r24, r1
    4c3c:	f6 cf       	rjmp	.-20     	; 0x4c2a <usart_getchar+0xa>
    4c3e:	89 81       	ldd	r24, Y+1	; 0x01
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	0f 90       	pop	r0
    4c44:	df 91       	pop	r29
    4c46:	cf 91       	pop	r28
    4c48:	08 95       	ret

00004c4a <usart_putchar>:
    4c4a:	68 2f       	mov	r22, r24
    4c4c:	80 91 33 14 	lds	r24, 0x1433	; 0x801433 <_com_serial_instance>
    4c50:	90 91 34 14 	lds	r25, 0x1434	; 0x801434 <_com_serial_instance+0x1>
    4c54:	ed dc       	rcall	.-1574   	; 0x4630 <serial_sendByte>
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	08 95       	ret

00004c5c <stdio_initialise>:
    4c5c:	8f 92       	push	r8
    4c5e:	9f 92       	push	r9
    4c60:	af 92       	push	r10
    4c62:	cf 92       	push	r12
    4c64:	ef 92       	push	r14
    4c66:	0f 93       	push	r16
    4c68:	81 2c       	mov	r8, r1
    4c6a:	91 2c       	mov	r9, r1
    4c6c:	68 94       	set
    4c6e:	aa 24       	eor	r10, r10
    4c70:	a7 f8       	bld	r10, 7
    4c72:	68 94       	set
    4c74:	cc 24       	eor	r12, r12
    4c76:	c7 f8       	bld	r12, 7
    4c78:	e1 2c       	mov	r14, r1
    4c7a:	00 e0       	ldi	r16, 0x00	; 0
    4c7c:	23 e0       	ldi	r18, 0x03	; 3
    4c7e:	40 e0       	ldi	r20, 0x00	; 0
    4c80:	51 ee       	ldi	r21, 0xE1	; 225
    4c82:	60 e0       	ldi	r22, 0x00	; 0
    4c84:	70 e0       	ldi	r23, 0x00	; 0
    4c86:	2f dc       	rcall	.-1954   	; 0x44e6 <serial_create>
    4c88:	90 93 34 14 	sts	0x1434, r25	; 0x801434 <_com_serial_instance+0x1>
    4c8c:	80 93 33 14 	sts	0x1433, r24	; 0x801433 <_com_serial_instance>
    4c90:	e0 e8       	ldi	r30, 0x80	; 128
    4c92:	f4 e1       	ldi	r31, 0x14	; 20
    4c94:	83 e1       	ldi	r24, 0x13	; 19
    4c96:	92 e0       	ldi	r25, 0x02	; 2
    4c98:	91 83       	std	Z+1, r25	; 0x01
    4c9a:	80 83       	st	Z, r24
    4c9c:	93 83       	std	Z+3, r25	; 0x03
    4c9e:	82 83       	std	Z+2, r24	; 0x02
    4ca0:	0f 91       	pop	r16
    4ca2:	ef 90       	pop	r14
    4ca4:	cf 90       	pop	r12
    4ca6:	af 90       	pop	r10
    4ca8:	9f 90       	pop	r9
    4caa:	8f 90       	pop	r8
    4cac:	08 95       	ret

00004cae <_turn_off>:
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	fc 01       	movw	r30, r24
    4cb2:	ee 0f       	add	r30, r30
    4cb4:	ff 1f       	adc	r31, r31
    4cb6:	e8 0f       	add	r30, r24
    4cb8:	f9 1f       	adc	r31, r25
    4cba:	ee 0f       	add	r30, r30
    4cbc:	ff 1f       	adc	r31, r31
    4cbe:	eb 5c       	subi	r30, 0xCB	; 203
    4cc0:	fb 4e       	sbci	r31, 0xEB	; 235
    4cc2:	23 81       	ldd	r18, Z+3	; 0x03
    4cc4:	21 11       	cpse	r18, r1
    4cc6:	1f c0       	rjmp	.+62     	; 0x4d06 <_turn_off+0x58>
    4cc8:	9c 01       	movw	r18, r24
    4cca:	22 0f       	add	r18, r18
    4ccc:	33 1f       	adc	r19, r19
    4cce:	f9 01       	movw	r30, r18
    4cd0:	e8 0f       	add	r30, r24
    4cd2:	f9 1f       	adc	r31, r25
    4cd4:	ee 0f       	add	r30, r30
    4cd6:	ff 1f       	adc	r31, r31
    4cd8:	eb 5c       	subi	r30, 0xCB	; 203
    4cda:	fb 4e       	sbci	r31, 0xEB	; 235
    4cdc:	a0 81       	ld	r26, Z
    4cde:	b1 81       	ldd	r27, Z+1	; 0x01
    4ce0:	4c 91       	ld	r20, X
    4ce2:	f9 01       	movw	r30, r18
    4ce4:	e8 0f       	add	r30, r24
    4ce6:	f9 1f       	adc	r31, r25
    4ce8:	ee 0f       	add	r30, r30
    4cea:	ff 1f       	adc	r31, r31
    4cec:	eb 5c       	subi	r30, 0xCB	; 203
    4cee:	fb 4e       	sbci	r31, 0xEB	; 235
    4cf0:	81 e0       	ldi	r24, 0x01	; 1
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	02 80       	ldd	r0, Z+2	; 0x02
    4cf6:	02 c0       	rjmp	.+4      	; 0x4cfc <_turn_off+0x4e>
    4cf8:	88 0f       	add	r24, r24
    4cfa:	99 1f       	adc	r25, r25
    4cfc:	0a 94       	dec	r0
    4cfe:	e2 f7       	brpl	.-8      	; 0x4cf8 <_turn_off+0x4a>
    4d00:	84 2b       	or	r24, r20
    4d02:	8c 93       	st	X, r24
    4d04:	08 95       	ret
    4d06:	fc 01       	movw	r30, r24
    4d08:	ee 0f       	add	r30, r30
    4d0a:	ff 1f       	adc	r31, r31
    4d0c:	df 01       	movw	r26, r30
    4d0e:	a8 0f       	add	r26, r24
    4d10:	b9 1f       	adc	r27, r25
    4d12:	aa 0f       	add	r26, r26
    4d14:	bb 1f       	adc	r27, r27
    4d16:	ab 5c       	subi	r26, 0xCB	; 203
    4d18:	bb 4e       	sbci	r27, 0xEB	; 235
    4d1a:	0d 90       	ld	r0, X+
    4d1c:	bc 91       	ld	r27, X
    4d1e:	a0 2d       	mov	r26, r0
    4d20:	2c 91       	ld	r18, X
    4d22:	e8 0f       	add	r30, r24
    4d24:	f9 1f       	adc	r31, r25
    4d26:	ee 0f       	add	r30, r30
    4d28:	ff 1f       	adc	r31, r31
    4d2a:	eb 5c       	subi	r30, 0xCB	; 203
    4d2c:	fb 4e       	sbci	r31, 0xEB	; 235
    4d2e:	81 e0       	ldi	r24, 0x01	; 1
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	02 80       	ldd	r0, Z+2	; 0x02
    4d34:	02 c0       	rjmp	.+4      	; 0x4d3a <_turn_off+0x8c>
    4d36:	88 0f       	add	r24, r24
    4d38:	99 1f       	adc	r25, r25
    4d3a:	0a 94       	dec	r0
    4d3c:	e2 f7       	brpl	.-8      	; 0x4d36 <_turn_off+0x88>
    4d3e:	80 95       	com	r24
    4d40:	82 23       	and	r24, r18
    4d42:	8c 93       	st	X, r24
    4d44:	08 95       	ret

00004d46 <_turn_on>:
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	fc 01       	movw	r30, r24
    4d4a:	ee 0f       	add	r30, r30
    4d4c:	ff 1f       	adc	r31, r31
    4d4e:	e8 0f       	add	r30, r24
    4d50:	f9 1f       	adc	r31, r25
    4d52:	ee 0f       	add	r30, r30
    4d54:	ff 1f       	adc	r31, r31
    4d56:	eb 5c       	subi	r30, 0xCB	; 203
    4d58:	fb 4e       	sbci	r31, 0xEB	; 235
    4d5a:	23 81       	ldd	r18, Z+3	; 0x03
    4d5c:	21 11       	cpse	r18, r1
    4d5e:	20 c0       	rjmp	.+64     	; 0x4da0 <_turn_on+0x5a>
    4d60:	9c 01       	movw	r18, r24
    4d62:	22 0f       	add	r18, r18
    4d64:	33 1f       	adc	r19, r19
    4d66:	f9 01       	movw	r30, r18
    4d68:	e8 0f       	add	r30, r24
    4d6a:	f9 1f       	adc	r31, r25
    4d6c:	ee 0f       	add	r30, r30
    4d6e:	ff 1f       	adc	r31, r31
    4d70:	eb 5c       	subi	r30, 0xCB	; 203
    4d72:	fb 4e       	sbci	r31, 0xEB	; 235
    4d74:	a0 81       	ld	r26, Z
    4d76:	b1 81       	ldd	r27, Z+1	; 0x01
    4d78:	4c 91       	ld	r20, X
    4d7a:	f9 01       	movw	r30, r18
    4d7c:	e8 0f       	add	r30, r24
    4d7e:	f9 1f       	adc	r31, r25
    4d80:	ee 0f       	add	r30, r30
    4d82:	ff 1f       	adc	r31, r31
    4d84:	eb 5c       	subi	r30, 0xCB	; 203
    4d86:	fb 4e       	sbci	r31, 0xEB	; 235
    4d88:	81 e0       	ldi	r24, 0x01	; 1
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	02 80       	ldd	r0, Z+2	; 0x02
    4d8e:	02 c0       	rjmp	.+4      	; 0x4d94 <_turn_on+0x4e>
    4d90:	88 0f       	add	r24, r24
    4d92:	99 1f       	adc	r25, r25
    4d94:	0a 94       	dec	r0
    4d96:	e2 f7       	brpl	.-8      	; 0x4d90 <_turn_on+0x4a>
    4d98:	80 95       	com	r24
    4d9a:	84 23       	and	r24, r20
    4d9c:	8c 93       	st	X, r24
    4d9e:	08 95       	ret
    4da0:	fc 01       	movw	r30, r24
    4da2:	ee 0f       	add	r30, r30
    4da4:	ff 1f       	adc	r31, r31
    4da6:	df 01       	movw	r26, r30
    4da8:	a8 0f       	add	r26, r24
    4daa:	b9 1f       	adc	r27, r25
    4dac:	aa 0f       	add	r26, r26
    4dae:	bb 1f       	adc	r27, r27
    4db0:	ab 5c       	subi	r26, 0xCB	; 203
    4db2:	bb 4e       	sbci	r27, 0xEB	; 235
    4db4:	0d 90       	ld	r0, X+
    4db6:	bc 91       	ld	r27, X
    4db8:	a0 2d       	mov	r26, r0
    4dba:	2c 91       	ld	r18, X
    4dbc:	e8 0f       	add	r30, r24
    4dbe:	f9 1f       	adc	r31, r25
    4dc0:	ee 0f       	add	r30, r30
    4dc2:	ff 1f       	adc	r31, r31
    4dc4:	eb 5c       	subi	r30, 0xCB	; 203
    4dc6:	fb 4e       	sbci	r31, 0xEB	; 235
    4dc8:	81 e0       	ldi	r24, 0x01	; 1
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	02 80       	ldd	r0, Z+2	; 0x02
    4dce:	02 c0       	rjmp	.+4      	; 0x4dd4 <_turn_on+0x8e>
    4dd0:	88 0f       	add	r24, r24
    4dd2:	99 1f       	adc	r25, r25
    4dd4:	0a 94       	dec	r0
    4dd6:	e2 f7       	brpl	.-8      	; 0x4dd0 <_turn_on+0x8a>
    4dd8:	82 2b       	or	r24, r18
    4dda:	8c 93       	st	X, r24
    4ddc:	08 95       	ret

00004dde <_hal_led_task>:
    4dde:	cc 24       	eor	r12, r12
    4de0:	c3 94       	inc	r12
    4de2:	d1 2c       	mov	r13, r1
    4de4:	68 94       	set
    4de6:	bb 24       	eor	r11, r11
    4de8:	b2 f8       	bld	r11, 2
    4dea:	c5 e3       	ldi	r28, 0x35	; 53
    4dec:	d4 e1       	ldi	r29, 0x14	; 20
    4dee:	10 e0       	ldi	r17, 0x00	; 0
    4df0:	8c 81       	ldd	r24, Y+4	; 0x04
    4df2:	81 30       	cpi	r24, 0x01	; 1
    4df4:	81 f0       	breq	.+32     	; 0x4e16 <_hal_led_task+0x38>
    4df6:	18 f1       	brcs	.+70     	; 0x4e3e <_hal_led_task+0x60>
    4df8:	82 30       	cpi	r24, 0x02	; 2
    4dfa:	61 f5       	brne	.+88     	; 0x4e54 <_hal_led_task+0x76>
    4dfc:	e8 81       	ld	r30, Y
    4dfe:	f9 81       	ldd	r31, Y+1	; 0x01
    4e00:	20 81       	ld	r18, Z
    4e02:	c6 01       	movw	r24, r12
    4e04:	0a 80       	ldd	r0, Y+2	; 0x02
    4e06:	02 c0       	rjmp	.+4      	; 0x4e0c <_hal_led_task+0x2e>
    4e08:	88 0f       	add	r24, r24
    4e0a:	99 1f       	adc	r25, r25
    4e0c:	0a 94       	dec	r0
    4e0e:	e2 f7       	brpl	.-8      	; 0x4e08 <_hal_led_task+0x2a>
    4e10:	82 27       	eor	r24, r18
    4e12:	80 83       	st	Z, r24
    4e14:	1f c0       	rjmp	.+62     	; 0x4e54 <_hal_led_task+0x76>
    4e16:	8d 81       	ldd	r24, Y+5	; 0x05
    4e18:	8f 5f       	subi	r24, 0xFF	; 255
    4e1a:	8a 30       	cpi	r24, 0x0A	; 10
    4e1c:	10 f4       	brcc	.+4      	; 0x4e22 <_hal_led_task+0x44>
    4e1e:	8d 83       	std	Y+5, r24	; 0x05
    4e20:	19 c0       	rjmp	.+50     	; 0x4e54 <_hal_led_task+0x76>
    4e22:	1d 82       	std	Y+5, r1	; 0x05
    4e24:	e8 81       	ld	r30, Y
    4e26:	f9 81       	ldd	r31, Y+1	; 0x01
    4e28:	20 81       	ld	r18, Z
    4e2a:	c6 01       	movw	r24, r12
    4e2c:	0a 80       	ldd	r0, Y+2	; 0x02
    4e2e:	02 c0       	rjmp	.+4      	; 0x4e34 <_hal_led_task+0x56>
    4e30:	88 0f       	add	r24, r24
    4e32:	99 1f       	adc	r25, r25
    4e34:	0a 94       	dec	r0
    4e36:	e2 f7       	brpl	.-8      	; 0x4e30 <_hal_led_task+0x52>
    4e38:	82 27       	eor	r24, r18
    4e3a:	80 83       	st	Z, r24
    4e3c:	0b c0       	rjmp	.+22     	; 0x4e54 <_hal_led_task+0x76>
    4e3e:	0d 81       	ldd	r16, Y+5	; 0x05
    4e40:	00 23       	and	r16, r16
    4e42:	29 f0       	breq	.+10     	; 0x4e4e <_hal_led_task+0x70>
    4e44:	81 2f       	mov	r24, r17
    4e46:	7f df       	rcall	.-258    	; 0x4d46 <_turn_on>
    4e48:	01 50       	subi	r16, 0x01	; 1
    4e4a:	0d 83       	std	Y+5, r16	; 0x05
    4e4c:	03 c0       	rjmp	.+6      	; 0x4e54 <_hal_led_task+0x76>
    4e4e:	bc 82       	std	Y+4, r11	; 0x04
    4e50:	81 2f       	mov	r24, r17
    4e52:	2d df       	rcall	.-422    	; 0x4cae <_turn_off>
    4e54:	1f 5f       	subi	r17, 0xFF	; 255
    4e56:	26 96       	adiw	r28, 0x06	; 6
    4e58:	14 30       	cpi	r17, 0x04	; 4
    4e5a:	51 f6       	brne	.-108    	; 0x4df0 <_hal_led_task+0x12>
    4e5c:	65 e0       	ldi	r22, 0x05	; 5
    4e5e:	70 e0       	ldi	r23, 0x00	; 0
    4e60:	80 e0       	ldi	r24, 0x00	; 0
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	0e 94 1d 10 	call	0x203a	; 0x203a <vTaskDelay>
    4e68:	c0 cf       	rjmp	.-128    	; 0x4dea <_hal_led_task+0xc>

00004e6a <status_leds_initialise>:
    4e6a:	ef 92       	push	r14
    4e6c:	ff 92       	push	r15
    4e6e:	0f 93       	push	r16
    4e70:	1f 93       	push	r17
    4e72:	cf 93       	push	r28
    4e74:	df 93       	push	r29
    4e76:	08 2f       	mov	r16, r24
    4e78:	80 e4       	ldi	r24, 0x40	; 64
    4e7a:	87 b9       	out	0x07, r24	; 7
    4e7c:	c5 e3       	ldi	r28, 0x35	; 53
    4e7e:	d4 e1       	ldi	r29, 0x14	; 20
    4e80:	0f 2e       	mov	r0, r31
    4e82:	f8 e2       	ldi	r31, 0x28	; 40
    4e84:	ef 2e       	mov	r14, r31
    4e86:	f1 2c       	mov	r15, r1
    4e88:	f0 2d       	mov	r31, r0
    4e8a:	f9 82       	std	Y+1, r15	; 0x01
    4e8c:	e8 82       	st	Y, r14
    4e8e:	86 e0       	ldi	r24, 0x06	; 6
    4e90:	8a 83       	std	Y+2, r24	; 0x02
    4e92:	1b 82       	std	Y+3, r1	; 0x03
    4e94:	14 e0       	ldi	r17, 0x04	; 4
    4e96:	1c 83       	std	Y+4, r17	; 0x04
    4e98:	80 e0       	ldi	r24, 0x00	; 0
    4e9a:	09 df       	rcall	.-494    	; 0x4cae <_turn_off>
    4e9c:	80 e8       	ldi	r24, 0x80	; 128
    4e9e:	87 b9       	out	0x07, r24	; 7
    4ea0:	ff 82       	std	Y+7, r15	; 0x07
    4ea2:	ee 82       	std	Y+6, r14	; 0x06
    4ea4:	87 e0       	ldi	r24, 0x07	; 7
    4ea6:	88 87       	std	Y+8, r24	; 0x08
    4ea8:	19 86       	std	Y+9, r1	; 0x09
    4eaa:	1a 87       	std	Y+10, r17	; 0x0a
    4eac:	81 e0       	ldi	r24, 0x01	; 1
    4eae:	ff de       	rcall	.-514    	; 0x4cae <_turn_off>
    4eb0:	80 e2       	ldi	r24, 0x20	; 32
    4eb2:	83 bb       	out	0x13, r24	; 19
    4eb4:	84 e3       	ldi	r24, 0x34	; 52
    4eb6:	90 e0       	ldi	r25, 0x00	; 0
    4eb8:	9d 87       	std	Y+13, r25	; 0x0d
    4eba:	8c 87       	std	Y+12, r24	; 0x0c
    4ebc:	85 e0       	ldi	r24, 0x05	; 5
    4ebe:	8e 87       	std	Y+14, r24	; 0x0e
    4ec0:	1f 86       	std	Y+15, r1	; 0x0f
    4ec2:	18 8b       	std	Y+16, r17	; 0x10
    4ec4:	82 e0       	ldi	r24, 0x02	; 2
    4ec6:	f3 de       	rcall	.-538    	; 0x4cae <_turn_off>
    4ec8:	80 e1       	ldi	r24, 0x10	; 16
    4eca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    4ece:	82 e0       	ldi	r24, 0x02	; 2
    4ed0:	91 e0       	ldi	r25, 0x01	; 1
    4ed2:	9b 8b       	std	Y+19, r25	; 0x13
    4ed4:	8a 8b       	std	Y+18, r24	; 0x12
    4ed6:	1c 8b       	std	Y+20, r17	; 0x14
    4ed8:	1d 8a       	std	Y+21, r1	; 0x15
    4eda:	1e 8b       	std	Y+22, r17	; 0x16
    4edc:	83 e0       	ldi	r24, 0x03	; 3
    4ede:	e7 de       	rcall	.-562    	; 0x4cae <_turn_off>
    4ee0:	e1 2c       	mov	r14, r1
    4ee2:	f1 2c       	mov	r15, r1
    4ee4:	20 e0       	ldi	r18, 0x00	; 0
    4ee6:	30 e0       	ldi	r19, 0x00	; 0
    4ee8:	40 ec       	ldi	r20, 0xC0	; 192
    4eea:	50 e0       	ldi	r21, 0x00	; 0
    4eec:	67 e5       	ldi	r22, 0x57	; 87
    4eee:	78 e0       	ldi	r23, 0x08	; 8
    4ef0:	8f ee       	ldi	r24, 0xEF	; 239
    4ef2:	96 e2       	ldi	r25, 0x26	; 38
    4ef4:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <xTaskCreate>
    4ef8:	df 91       	pop	r29
    4efa:	cf 91       	pop	r28
    4efc:	1f 91       	pop	r17
    4efe:	0f 91       	pop	r16
    4f00:	ff 90       	pop	r15
    4f02:	ef 90       	pop	r14
    4f04:	08 95       	ret

00004f06 <status_leds_slowBlink>:
    4f06:	cf 93       	push	r28
    4f08:	df 93       	push	r29
    4f0a:	90 e0       	ldi	r25, 0x00	; 0
    4f0c:	fc 01       	movw	r30, r24
    4f0e:	ee 0f       	add	r30, r30
    4f10:	ff 1f       	adc	r31, r31
    4f12:	df 01       	movw	r26, r30
    4f14:	a8 0f       	add	r26, r24
    4f16:	b9 1f       	adc	r27, r25
    4f18:	aa 0f       	add	r26, r26
    4f1a:	bb 1f       	adc	r27, r27
    4f1c:	ab 5c       	subi	r26, 0xCB	; 203
    4f1e:	bb 4e       	sbci	r27, 0xEB	; 235
    4f20:	cd 91       	ld	r28, X+
    4f22:	dc 91       	ld	r29, X
    4f24:	11 97       	sbiw	r26, 0x01	; 1
    4f26:	48 81       	ld	r20, Y
    4f28:	21 e0       	ldi	r18, 0x01	; 1
    4f2a:	30 e0       	ldi	r19, 0x00	; 0
    4f2c:	12 96       	adiw	r26, 0x02	; 2
    4f2e:	0c 90       	ld	r0, X
    4f30:	12 97       	sbiw	r26, 0x02	; 2
    4f32:	02 c0       	rjmp	.+4      	; 0x4f38 <status_leds_slowBlink+0x32>
    4f34:	22 0f       	add	r18, r18
    4f36:	33 1f       	adc	r19, r19
    4f38:	0a 94       	dec	r0
    4f3a:	e2 f7       	brpl	.-8      	; 0x4f34 <status_leds_slowBlink+0x2e>
    4f3c:	24 27       	eor	r18, r20
    4f3e:	28 83       	st	Y, r18
    4f40:	fd 01       	movw	r30, r26
    4f42:	81 e0       	ldi	r24, 0x01	; 1
    4f44:	84 83       	std	Z+4, r24	; 0x04
    4f46:	df 91       	pop	r29
    4f48:	cf 91       	pop	r28
    4f4a:	08 95       	ret

00004f4c <_callBack>:
    4f4c:	e0 91 55 14 	lds	r30, 0x1455	; 0x801455 <_callBackFunction>
    4f50:	f0 91 56 14 	lds	r31, 0x1456	; 0x801456 <_callBackFunction+0x1>
    4f54:	30 97       	sbiw	r30, 0x00	; 0
    4f56:	09 f0       	breq	.+2      	; 0x4f5a <_callBack+0xe>
    4f58:	19 95       	eicall
    4f5a:	08 95       	ret

00004f5c <_tsl2591TwiCallback>:
    4f5c:	64 50       	subi	r22, 0x04	; 4
    4f5e:	62 30       	cpi	r22, 0x02	; 2
    4f60:	08 f0       	brcs	.+2      	; 0x4f64 <_tsl2591TwiCallback+0x8>
    4f62:	3b c0       	rjmp	.+118    	; 0x4fda <_tsl2591TwiCallback+0x7e>
    4f64:	20 91 54 14 	lds	r18, 0x1454	; 0x801454 <_nextState>
    4f68:	22 30       	cpi	r18, 0x02	; 2
    4f6a:	79 f0       	breq	.+30     	; 0x4f8a <_tsl2591TwiCallback+0x2e>
    4f6c:	18 f4       	brcc	.+6      	; 0x4f74 <_tsl2591TwiCallback+0x18>
    4f6e:	21 30       	cpi	r18, 0x01	; 1
    4f70:	31 f0       	breq	.+12     	; 0x4f7e <_tsl2591TwiCallback+0x22>
    4f72:	30 c0       	rjmp	.+96     	; 0x4fd4 <_tsl2591TwiCallback+0x78>
    4f74:	23 30       	cpi	r18, 0x03	; 3
    4f76:	81 f0       	breq	.+32     	; 0x4f98 <_tsl2591TwiCallback+0x3c>
    4f78:	24 30       	cpi	r18, 0x04	; 4
    4f7a:	a1 f0       	breq	.+40     	; 0x4fa4 <_tsl2591TwiCallback+0x48>
    4f7c:	2b c0       	rjmp	.+86     	; 0x4fd4 <_tsl2591TwiCallback+0x78>
    4f7e:	22 e0       	ldi	r18, 0x02	; 2
    4f80:	20 93 54 14 	sts	0x1454, r18	; 0x801454 <_nextState>
    4f84:	61 e0       	ldi	r22, 0x01	; 1
    4f86:	0a c2       	rjmp	.+1044   	; 0x539c <twiReceive>
    4f88:	08 95       	ret
    4f8a:	fa 01       	movw	r30, r20
    4f8c:	80 81       	ld	r24, Z
    4f8e:	80 93 51 14 	sts	0x1451, r24	; 0x801451 <_deviceId>
    4f92:	82 e0       	ldi	r24, 0x02	; 2
    4f94:	db cf       	rjmp	.-74     	; 0x4f4c <_callBack>
    4f96:	08 95       	ret
    4f98:	24 e0       	ldi	r18, 0x04	; 4
    4f9a:	20 93 54 14 	sts	0x1454, r18	; 0x801454 <_nextState>
    4f9e:	64 e0       	ldi	r22, 0x04	; 4
    4fa0:	fd c1       	rjmp	.+1018   	; 0x539c <twiReceive>
    4fa2:	08 95       	ret
    4fa4:	fa 01       	movw	r30, r20
    4fa6:	81 81       	ldd	r24, Z+1	; 0x01
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	98 2f       	mov	r25, r24
    4fac:	88 27       	eor	r24, r24
    4fae:	20 81       	ld	r18, Z
    4fb0:	82 2b       	or	r24, r18
    4fb2:	90 93 50 14 	sts	0x1450, r25	; 0x801450 <_fullSpectrumRaw+0x1>
    4fb6:	80 93 4f 14 	sts	0x144F, r24	; 0x80144f <_fullSpectrumRaw>
    4fba:	83 81       	ldd	r24, Z+3	; 0x03
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	98 2f       	mov	r25, r24
    4fc0:	88 27       	eor	r24, r24
    4fc2:	22 81       	ldd	r18, Z+2	; 0x02
    4fc4:	82 2b       	or	r24, r18
    4fc6:	90 93 4e 14 	sts	0x144E, r25	; 0x80144e <_infraredRaw+0x1>
    4fca:	80 93 4d 14 	sts	0x144D, r24	; 0x80144d <_infraredRaw>
    4fce:	81 e0       	ldi	r24, 0x01	; 1
    4fd0:	bd cf       	rjmp	.-134    	; 0x4f4c <_callBack>
    4fd2:	08 95       	ret
    4fd4:	80 e0       	ldi	r24, 0x00	; 0
    4fd6:	ba cf       	rjmp	.-140    	; 0x4f4c <_callBack>
    4fd8:	08 95       	ret
    4fda:	10 92 54 14 	sts	0x1454, r1	; 0x801454 <_nextState>
    4fde:	86 e0       	ldi	r24, 0x06	; 6
    4fe0:	b5 cf       	rjmp	.-150    	; 0x4f4c <_callBack>
    4fe2:	08 95       	ret

00004fe4 <_twiTransmit>:
    4fe4:	20 91 57 14 	lds	r18, 0x1457	; 0x801457 <_twiHandler>
    4fe8:	30 91 58 14 	lds	r19, 0x1458	; 0x801458 <_twiHandler+0x1>
    4fec:	21 15       	cp	r18, r1
    4fee:	31 05       	cpc	r19, r1
    4ff0:	41 f0       	breq	.+16     	; 0x5002 <_twiTransmit+0x1e>
    4ff2:	46 2f       	mov	r20, r22
    4ff4:	bc 01       	movw	r22, r24
    4ff6:	c9 01       	movw	r24, r18
    4ff8:	85 d1       	rcall	.+778    	; 0x5304 <twiTransmit>
    4ffa:	82 30       	cpi	r24, 0x02	; 2
    4ffc:	21 f0       	breq	.+8      	; 0x5006 <_twiTransmit+0x22>
    4ffe:	80 e0       	ldi	r24, 0x00	; 0
    5000:	08 95       	ret
    5002:	87 e0       	ldi	r24, 0x07	; 7
    5004:	08 95       	ret
    5006:	85 e0       	ldi	r24, 0x05	; 5
    5008:	08 95       	ret

0000500a <tsl2591_initialise>:
    500a:	0f 93       	push	r16
    500c:	1f 93       	push	r17
    500e:	90 93 56 14 	sts	0x1456, r25	; 0x801456 <_callBackFunction+0x1>
    5012:	80 93 55 14 	sts	0x1455, r24	; 0x801455 <_callBackFunction>
    5016:	0e ea       	ldi	r16, 0xAE	; 174
    5018:	17 e2       	ldi	r17, 0x27	; 39
    501a:	20 e0       	ldi	r18, 0x00	; 0
    501c:	34 e2       	ldi	r19, 0x24	; 36
    501e:	44 ef       	ldi	r20, 0xF4	; 244
    5020:	50 e0       	ldi	r21, 0x00	; 0
    5022:	60 e0       	ldi	r22, 0x00	; 0
    5024:	89 e2       	ldi	r24, 0x29	; 41
    5026:	1d d1       	rcall	.+570    	; 0x5262 <twiCreate>
    5028:	90 93 58 14 	sts	0x1458, r25	; 0x801458 <_twiHandler+0x1>
    502c:	80 93 57 14 	sts	0x1457, r24	; 0x801457 <_twiHandler>
    5030:	89 2b       	or	r24, r25
    5032:	11 f0       	breq	.+4      	; 0x5038 <tsl2591_initialise+0x2e>
    5034:	80 e0       	ldi	r24, 0x00	; 0
    5036:	01 c0       	rjmp	.+2      	; 0x503a <tsl2591_initialise+0x30>
    5038:	88 e0       	ldi	r24, 0x08	; 8
    503a:	1f 91       	pop	r17
    503c:	0f 91       	pop	r16
    503e:	08 95       	ret

00005040 <tsl2591_enable>:
    5040:	cf 93       	push	r28
    5042:	df 93       	push	r29
    5044:	1f 92       	push	r1
    5046:	1f 92       	push	r1
    5048:	cd b7       	in	r28, 0x3d	; 61
    504a:	de b7       	in	r29, 0x3e	; 62
    504c:	80 ea       	ldi	r24, 0xA0	; 160
    504e:	89 83       	std	Y+1, r24	; 0x01
    5050:	83 e0       	ldi	r24, 0x03	; 3
    5052:	8a 83       	std	Y+2, r24	; 0x02
    5054:	10 92 54 14 	sts	0x1454, r1	; 0x801454 <_nextState>
    5058:	62 e0       	ldi	r22, 0x02	; 2
    505a:	ce 01       	movw	r24, r28
    505c:	01 96       	adiw	r24, 0x01	; 1
    505e:	c2 df       	rcall	.-124    	; 0x4fe4 <_twiTransmit>
    5060:	0f 90       	pop	r0
    5062:	0f 90       	pop	r0
    5064:	df 91       	pop	r29
    5066:	cf 91       	pop	r28
    5068:	08 95       	ret

0000506a <tsl2591_fetchData>:
    506a:	cf 93       	push	r28
    506c:	df 93       	push	r29
    506e:	1f 92       	push	r1
    5070:	cd b7       	in	r28, 0x3d	; 61
    5072:	de b7       	in	r29, 0x3e	; 62
    5074:	84 eb       	ldi	r24, 0xB4	; 180
    5076:	89 83       	std	Y+1, r24	; 0x01
    5078:	83 e0       	ldi	r24, 0x03	; 3
    507a:	80 93 54 14 	sts	0x1454, r24	; 0x801454 <_nextState>
    507e:	61 e0       	ldi	r22, 0x01	; 1
    5080:	ce 01       	movw	r24, r28
    5082:	01 96       	adiw	r24, 0x01	; 1
    5084:	af df       	rcall	.-162    	; 0x4fe4 <_twiTransmit>
    5086:	0f 90       	pop	r0
    5088:	df 91       	pop	r29
    508a:	cf 91       	pop	r28
    508c:	08 95       	ret

0000508e <tsl2591_getLux>:
    508e:	2f 92       	push	r2
    5090:	3f 92       	push	r3
    5092:	4f 92       	push	r4
    5094:	5f 92       	push	r5
    5096:	6f 92       	push	r6
    5098:	7f 92       	push	r7
    509a:	8f 92       	push	r8
    509c:	9f 92       	push	r9
    509e:	af 92       	push	r10
    50a0:	bf 92       	push	r11
    50a2:	cf 92       	push	r12
    50a4:	df 92       	push	r13
    50a6:	ef 92       	push	r14
    50a8:	ff 92       	push	r15
    50aa:	0f 93       	push	r16
    50ac:	1f 93       	push	r17
    50ae:	cf 93       	push	r28
    50b0:	df 93       	push	r29
    50b2:	c0 91 4d 14 	lds	r28, 0x144D	; 0x80144d <_infraredRaw>
    50b6:	d0 91 4e 14 	lds	r29, 0x144E	; 0x80144e <_infraredRaw+0x1>
    50ba:	cf 3f       	cpi	r28, 0xFF	; 255
    50bc:	2f ef       	ldi	r18, 0xFF	; 255
    50be:	d2 07       	cpc	r29, r18
    50c0:	41 f0       	breq	.+16     	; 0x50d2 <tsl2591_getLux+0x44>
    50c2:	60 91 4f 14 	lds	r22, 0x144F	; 0x80144f <_fullSpectrumRaw>
    50c6:	70 91 50 14 	lds	r23, 0x1450	; 0x801450 <_fullSpectrumRaw+0x1>
    50ca:	6f 3f       	cpi	r22, 0xFF	; 255
    50cc:	ef ef       	ldi	r30, 0xFF	; 255
    50ce:	7e 07       	cpc	r23, r30
    50d0:	59 f4       	brne	.+22     	; 0x50e8 <tsl2591_getLux+0x5a>
    50d2:	4f ef       	ldi	r20, 0xFF	; 255
    50d4:	5f ef       	ldi	r21, 0xFF	; 255
    50d6:	6f e7       	ldi	r22, 0x7F	; 127
    50d8:	7f e7       	ldi	r23, 0x7F	; 127
    50da:	fc 01       	movw	r30, r24
    50dc:	40 83       	st	Z, r20
    50de:	51 83       	std	Z+1, r21	; 0x01
    50e0:	62 83       	std	Z+2, r22	; 0x02
    50e2:	73 83       	std	Z+3, r23	; 0x03
    50e4:	83 e0       	ldi	r24, 0x03	; 3
    50e6:	99 c0       	rjmp	.+306    	; 0x521a <tsl2591_getLux+0x18c>
    50e8:	1c 01       	movw	r2, r24
    50ea:	80 e0       	ldi	r24, 0x00	; 0
    50ec:	90 e0       	ldi	r25, 0x00	; 0
    50ee:	3b d3       	rcall	.+1654   	; 0x5766 <__floatunsisf>
    50f0:	2b 01       	movw	r4, r22
    50f2:	3c 01       	movw	r6, r24
    50f4:	be 01       	movw	r22, r28
    50f6:	80 e0       	ldi	r24, 0x00	; 0
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	35 d3       	rcall	.+1642   	; 0x5766 <__floatunsisf>
    50fc:	4b 01       	movw	r8, r22
    50fe:	5c 01       	movw	r10, r24
    5100:	80 91 52 14 	lds	r24, 0x1452	; 0x801452 <_currentIntegrationTime>
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	01 96       	adiw	r24, 0x01	; 1
    5108:	24 e6       	ldi	r18, 0x64	; 100
    510a:	28 9f       	mul	r18, r24
    510c:	b0 01       	movw	r22, r0
    510e:	29 9f       	mul	r18, r25
    5110:	70 0d       	add	r23, r0
    5112:	11 24       	eor	r1, r1
    5114:	80 91 53 14 	lds	r24, 0x1453	; 0x801453 <_currentGain>
    5118:	80 32       	cpi	r24, 0x20	; 32
    511a:	69 f0       	breq	.+26     	; 0x5136 <tsl2591_getLux+0xa8>
    511c:	80 33       	cpi	r24, 0x30	; 48
    511e:	a1 f0       	breq	.+40     	; 0x5148 <tsl2591_getLux+0xba>
    5120:	80 31       	cpi	r24, 0x10	; 16
    5122:	e1 f4       	brne	.+56     	; 0x515c <tsl2591_getLux+0xce>
    5124:	0f 2e       	mov	r0, r31
    5126:	c1 2c       	mov	r12, r1
    5128:	d1 2c       	mov	r13, r1
    512a:	f8 ec       	ldi	r31, 0xC8	; 200
    512c:	ef 2e       	mov	r14, r31
    512e:	f1 e4       	ldi	r31, 0x41	; 65
    5130:	ff 2e       	mov	r15, r31
    5132:	f0 2d       	mov	r31, r0
    5134:	1b c0       	rjmp	.+54     	; 0x516c <tsl2591_getLux+0xde>
    5136:	0f 2e       	mov	r0, r31
    5138:	c1 2c       	mov	r12, r1
    513a:	d1 2c       	mov	r13, r1
    513c:	f6 ed       	ldi	r31, 0xD6	; 214
    513e:	ef 2e       	mov	r14, r31
    5140:	f3 e4       	ldi	r31, 0x43	; 67
    5142:	ff 2e       	mov	r15, r31
    5144:	f0 2d       	mov	r31, r0
    5146:	12 c0       	rjmp	.+36     	; 0x516c <tsl2591_getLux+0xde>
    5148:	0f 2e       	mov	r0, r31
    514a:	c1 2c       	mov	r12, r1
    514c:	f0 e5       	ldi	r31, 0x50	; 80
    514e:	df 2e       	mov	r13, r31
    5150:	fa e1       	ldi	r31, 0x1A	; 26
    5152:	ef 2e       	mov	r14, r31
    5154:	f6 e4       	ldi	r31, 0x46	; 70
    5156:	ff 2e       	mov	r15, r31
    5158:	f0 2d       	mov	r31, r0
    515a:	08 c0       	rjmp	.+16     	; 0x516c <tsl2591_getLux+0xde>
    515c:	0f 2e       	mov	r0, r31
    515e:	c1 2c       	mov	r12, r1
    5160:	d1 2c       	mov	r13, r1
    5162:	f0 e8       	ldi	r31, 0x80	; 128
    5164:	ef 2e       	mov	r14, r31
    5166:	ff e3       	ldi	r31, 0x3F	; 63
    5168:	ff 2e       	mov	r15, r31
    516a:	f0 2d       	mov	r31, r0
    516c:	07 2e       	mov	r0, r23
    516e:	00 0c       	add	r0, r0
    5170:	88 0b       	sbc	r24, r24
    5172:	99 0b       	sbc	r25, r25
    5174:	fa d2       	rcall	.+1524   	; 0x576a <__floatsisf>
    5176:	a7 01       	movw	r20, r14
    5178:	96 01       	movw	r18, r12
    517a:	5e d3       	rcall	.+1724   	; 0x5838 <__mulsf3>
    517c:	20 e0       	ldi	r18, 0x00	; 0
    517e:	30 e0       	ldi	r19, 0x00	; 0
    5180:	4c ec       	ldi	r20, 0xCC	; 204
    5182:	53 e4       	ldi	r21, 0x43	; 67
    5184:	7e d2       	rcall	.+1276   	; 0x5682 <__divsf3>
    5186:	6b 01       	movw	r12, r22
    5188:	7c 01       	movw	r14, r24
    518a:	25 e8       	ldi	r18, 0x85	; 133
    518c:	3b ee       	ldi	r19, 0xEB	; 235
    518e:	41 ed       	ldi	r20, 0xD1	; 209
    5190:	5f e3       	ldi	r21, 0x3F	; 63
    5192:	c5 01       	movw	r24, r10
    5194:	b4 01       	movw	r22, r8
    5196:	50 d3       	rcall	.+1696   	; 0x5838 <__mulsf3>
    5198:	9b 01       	movw	r18, r22
    519a:	ac 01       	movw	r20, r24
    519c:	c3 01       	movw	r24, r6
    519e:	b2 01       	movw	r22, r4
    51a0:	09 d2       	rcall	.+1042   	; 0x55b4 <__subsf3>
    51a2:	a7 01       	movw	r20, r14
    51a4:	96 01       	movw	r18, r12
    51a6:	6d d2       	rcall	.+1242   	; 0x5682 <__divsf3>
    51a8:	16 2f       	mov	r17, r22
    51aa:	d7 2f       	mov	r29, r23
    51ac:	c8 2f       	mov	r28, r24
    51ae:	09 2f       	mov	r16, r25
    51b0:	2d e3       	ldi	r18, 0x3D	; 61
    51b2:	3a e0       	ldi	r19, 0x0A	; 10
    51b4:	47 e1       	ldi	r20, 0x17	; 23
    51b6:	5f e3       	ldi	r21, 0x3F	; 63
    51b8:	c3 01       	movw	r24, r6
    51ba:	b2 01       	movw	r22, r4
    51bc:	3d d3       	rcall	.+1658   	; 0x5838 <__mulsf3>
    51be:	2b 01       	movw	r4, r22
    51c0:	3c 01       	movw	r6, r24
    51c2:	26 ef       	ldi	r18, 0xF6	; 246
    51c4:	38 e2       	ldi	r19, 0x28	; 40
    51c6:	4c e5       	ldi	r20, 0x5C	; 92
    51c8:	5f e3       	ldi	r21, 0x3F	; 63
    51ca:	c5 01       	movw	r24, r10
    51cc:	b4 01       	movw	r22, r8
    51ce:	34 d3       	rcall	.+1640   	; 0x5838 <__mulsf3>
    51d0:	9b 01       	movw	r18, r22
    51d2:	ac 01       	movw	r20, r24
    51d4:	c3 01       	movw	r24, r6
    51d6:	b2 01       	movw	r22, r4
    51d8:	ed d1       	rcall	.+986    	; 0x55b4 <__subsf3>
    51da:	a7 01       	movw	r20, r14
    51dc:	96 01       	movw	r18, r12
    51de:	51 d2       	rcall	.+1186   	; 0x5682 <__divsf3>
    51e0:	c6 2e       	mov	r12, r22
    51e2:	d7 2e       	mov	r13, r23
    51e4:	e8 2e       	mov	r14, r24
    51e6:	f9 2e       	mov	r15, r25
    51e8:	26 2f       	mov	r18, r22
    51ea:	37 2f       	mov	r19, r23
    51ec:	48 2f       	mov	r20, r24
    51ee:	59 2f       	mov	r21, r25
    51f0:	61 2f       	mov	r22, r17
    51f2:	7d 2f       	mov	r23, r29
    51f4:	8c 2f       	mov	r24, r28
    51f6:	90 2f       	mov	r25, r16
    51f8:	1b d3       	rcall	.+1590   	; 0x5830 <__gesf2>
    51fa:	18 16       	cp	r1, r24
    51fc:	24 f0       	brlt	.+8      	; 0x5206 <tsl2591_getLux+0x178>
    51fe:	1c 2d       	mov	r17, r12
    5200:	dd 2d       	mov	r29, r13
    5202:	ce 2d       	mov	r28, r14
    5204:	0f 2d       	mov	r16, r15
    5206:	41 2f       	mov	r20, r17
    5208:	5d 2f       	mov	r21, r29
    520a:	6c 2f       	mov	r22, r28
    520c:	70 2f       	mov	r23, r16
    520e:	f1 01       	movw	r30, r2
    5210:	40 83       	st	Z, r20
    5212:	51 83       	std	Z+1, r21	; 0x01
    5214:	62 83       	std	Z+2, r22	; 0x02
    5216:	73 83       	std	Z+3, r23	; 0x03
    5218:	80 e0       	ldi	r24, 0x00	; 0
    521a:	df 91       	pop	r29
    521c:	cf 91       	pop	r28
    521e:	1f 91       	pop	r17
    5220:	0f 91       	pop	r16
    5222:	ff 90       	pop	r15
    5224:	ef 90       	pop	r14
    5226:	df 90       	pop	r13
    5228:	cf 90       	pop	r12
    522a:	bf 90       	pop	r11
    522c:	af 90       	pop	r10
    522e:	9f 90       	pop	r9
    5230:	8f 90       	pop	r8
    5232:	7f 90       	pop	r7
    5234:	6f 90       	pop	r6
    5236:	5f 90       	pop	r5
    5238:	4f 90       	pop	r4
    523a:	3f 90       	pop	r3
    523c:	2f 90       	pop	r2
    523e:	08 95       	ret

00005240 <_initTwiInterface>:
    5240:	80 91 67 14 	lds	r24, 0x1467	; 0x801467 <_twiIsInitiated>
    5244:	81 11       	cpse	r24, r1
    5246:	0c c0       	rjmp	.+24     	; 0x5260 <_initTwiInterface+0x20>
    5248:	8c e0       	ldi	r24, 0x0C	; 12
    524a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    524e:	8f ef       	ldi	r24, 0xFF	; 255
    5250:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5254:	84 e0       	ldi	r24, 0x04	; 4
    5256:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    525a:	81 e0       	ldi	r24, 0x01	; 1
    525c:	80 93 67 14 	sts	0x1467, r24	; 0x801467 <_twiIsInitiated>
    5260:	08 95       	ret

00005262 <twiCreate>:
    5262:	af 92       	push	r10
    5264:	bf 92       	push	r11
    5266:	cf 92       	push	r12
    5268:	df 92       	push	r13
    526a:	ef 92       	push	r14
    526c:	ff 92       	push	r15
    526e:	0f 93       	push	r16
    5270:	1f 93       	push	r17
    5272:	cf 93       	push	r28
    5274:	df 93       	push	r29
    5276:	a8 2e       	mov	r10, r24
    5278:	b6 2e       	mov	r11, r22
    527a:	69 01       	movw	r12, r18
    527c:	7a 01       	movw	r14, r20
    527e:	84 e0       	ldi	r24, 0x04	; 4
    5280:	90 e0       	ldi	r25, 0x00	; 0
    5282:	8e d3       	rcall	.+1820   	; 0x59a0 <malloc>
    5284:	ec 01       	movw	r28, r24
    5286:	89 2b       	or	r24, r25
    5288:	61 f1       	breq	.+88     	; 0x52e2 <twiCreate+0x80>
    528a:	a8 82       	st	Y, r10
    528c:	81 e0       	ldi	r24, 0x01	; 1
    528e:	b8 12       	cpse	r11, r24
    5290:	12 c0       	rjmp	.+36     	; 0x52b6 <twiCreate+0x54>
    5292:	c7 01       	movw	r24, r14
    5294:	b6 01       	movw	r22, r12
    5296:	20 ea       	ldi	r18, 0xA0	; 160
    5298:	36 e8       	ldi	r19, 0x86	; 134
    529a:	41 e0       	ldi	r20, 0x01	; 1
    529c:	50 e0       	ldi	r21, 0x00	; 0
    529e:	56 d3       	rcall	.+1708   	; 0x594c <__udivmodsi4>
    52a0:	da 01       	movw	r26, r20
    52a2:	c9 01       	movw	r24, r18
    52a4:	40 97       	sbiw	r24, 0x10	; 16
    52a6:	a1 09       	sbc	r26, r1
    52a8:	b1 09       	sbc	r27, r1
    52aa:	b6 95       	lsr	r27
    52ac:	a7 95       	ror	r26
    52ae:	97 95       	ror	r25
    52b0:	87 95       	ror	r24
    52b2:	89 83       	std	Y+1, r24	; 0x01
    52b4:	11 c0       	rjmp	.+34     	; 0x52d8 <twiCreate+0x76>
    52b6:	c7 01       	movw	r24, r14
    52b8:	b6 01       	movw	r22, r12
    52ba:	20 e8       	ldi	r18, 0x80	; 128
    52bc:	3a e1       	ldi	r19, 0x1A	; 26
    52be:	46 e0       	ldi	r20, 0x06	; 6
    52c0:	50 e0       	ldi	r21, 0x00	; 0
    52c2:	44 d3       	rcall	.+1672   	; 0x594c <__udivmodsi4>
    52c4:	da 01       	movw	r26, r20
    52c6:	c9 01       	movw	r24, r18
    52c8:	40 97       	sbiw	r24, 0x10	; 16
    52ca:	a1 09       	sbc	r26, r1
    52cc:	b1 09       	sbc	r27, r1
    52ce:	b6 95       	lsr	r27
    52d0:	a7 95       	ror	r26
    52d2:	97 95       	ror	r25
    52d4:	87 95       	ror	r24
    52d6:	89 83       	std	Y+1, r24	; 0x01
    52d8:	1b 83       	std	Y+3, r17	; 0x03
    52da:	0a 83       	std	Y+2, r16	; 0x02
    52dc:	8c 2f       	mov	r24, r28
    52de:	9d 2f       	mov	r25, r29
    52e0:	02 c0       	rjmp	.+4      	; 0x52e6 <twiCreate+0x84>
    52e2:	80 e0       	ldi	r24, 0x00	; 0
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	df 91       	pop	r29
    52e8:	cf 91       	pop	r28
    52ea:	1f 91       	pop	r17
    52ec:	0f 91       	pop	r16
    52ee:	ff 90       	pop	r15
    52f0:	ef 90       	pop	r14
    52f2:	df 90       	pop	r13
    52f4:	cf 90       	pop	r12
    52f6:	bf 90       	pop	r11
    52f8:	af 90       	pop	r10
    52fa:	08 95       	ret

000052fc <twiIsBusy>:
    52fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5300:	81 70       	andi	r24, 0x01	; 1
    5302:	08 95       	ret

00005304 <twiTransmit>:
    5304:	ff 92       	push	r15
    5306:	0f 93       	push	r16
    5308:	1f 93       	push	r17
    530a:	cf 93       	push	r28
    530c:	df 93       	push	r29
    530e:	00 97       	sbiw	r24, 0x00	; 0
    5310:	d1 f1       	breq	.+116    	; 0x5386 <twiTransmit+0x82>
    5312:	4a 30       	cpi	r20, 0x0A	; 10
    5314:	d0 f5       	brcc	.+116    	; 0x538a <twiTransmit+0x86>
    5316:	f4 2e       	mov	r15, r20
    5318:	8b 01       	movw	r16, r22
    531a:	ec 01       	movw	r28, r24
    531c:	ef df       	rcall	.-34     	; 0x52fc <twiIsBusy>
    531e:	81 11       	cpse	r24, r1
    5320:	36 c0       	rjmp	.+108    	; 0x538e <twiTransmit+0x8a>
    5322:	80 91 5a 14 	lds	r24, 0x145A	; 0x80145a <_twiCurrentHandler>
    5326:	90 91 5b 14 	lds	r25, 0x145B	; 0x80145b <_twiCurrentHandler+0x1>
    532a:	c8 17       	cp	r28, r24
    532c:	d9 07       	cpc	r29, r25
    532e:	41 f0       	breq	.+16     	; 0x5340 <twiTransmit+0x3c>
    5330:	87 df       	rcall	.-242    	; 0x5240 <_initTwiInterface>
    5332:	89 81       	ldd	r24, Y+1	; 0x01
    5334:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5338:	d0 93 5b 14 	sts	0x145B, r29	; 0x80145b <_twiCurrentHandler+0x1>
    533c:	c0 93 5a 14 	sts	0x145A, r28	; 0x80145a <_twiCurrentHandler>
    5340:	81 e0       	ldi	r24, 0x01	; 1
    5342:	8f 0d       	add	r24, r15
    5344:	80 93 5c 14 	sts	0x145C, r24	; 0x80145c <_twiMessageLen>
    5348:	88 81       	ld	r24, Y
    534a:	88 0f       	add	r24, r24
    534c:	80 93 5d 14 	sts	0x145D, r24	; 0x80145d <_twiMessageBuffer>
    5350:	ff 20       	and	r15, r15
    5352:	89 f0       	breq	.+34     	; 0x5376 <twiTransmit+0x72>
    5354:	f8 01       	movw	r30, r16
    5356:	ae e5       	ldi	r26, 0x5E	; 94
    5358:	b4 e1       	ldi	r27, 0x14	; 20
    535a:	4f ef       	ldi	r20, 0xFF	; 255
    535c:	4f 0d       	add	r20, r15
    535e:	64 2f       	mov	r22, r20
    5360:	70 e0       	ldi	r23, 0x00	; 0
    5362:	cb 01       	movw	r24, r22
    5364:	01 96       	adiw	r24, 0x01	; 1
    5366:	b8 01       	movw	r22, r16
    5368:	68 0f       	add	r22, r24
    536a:	79 1f       	adc	r23, r25
    536c:	81 91       	ld	r24, Z+
    536e:	8d 93       	st	X+, r24
    5370:	e6 17       	cp	r30, r22
    5372:	f7 07       	cpc	r31, r23
    5374:	d9 f7       	brne	.-10     	; 0x536c <twiTransmit+0x68>
    5376:	88 ef       	ldi	r24, 0xF8	; 248
    5378:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    537c:	85 ea       	ldi	r24, 0xA5	; 165
    537e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5382:	84 e0       	ldi	r24, 0x04	; 4
    5384:	05 c0       	rjmp	.+10     	; 0x5390 <twiTransmit+0x8c>
    5386:	86 e0       	ldi	r24, 0x06	; 6
    5388:	03 c0       	rjmp	.+6      	; 0x5390 <twiTransmit+0x8c>
    538a:	87 e0       	ldi	r24, 0x07	; 7
    538c:	01 c0       	rjmp	.+2      	; 0x5390 <twiTransmit+0x8c>
    538e:	82 e0       	ldi	r24, 0x02	; 2
    5390:	df 91       	pop	r29
    5392:	cf 91       	pop	r28
    5394:	1f 91       	pop	r17
    5396:	0f 91       	pop	r16
    5398:	ff 90       	pop	r15
    539a:	08 95       	ret

0000539c <twiReceive>:
    539c:	1f 93       	push	r17
    539e:	cf 93       	push	r28
    53a0:	df 93       	push	r29
    53a2:	00 97       	sbiw	r24, 0x00	; 0
    53a4:	29 f1       	breq	.+74     	; 0x53f0 <twiReceive+0x54>
    53a6:	6b 30       	cpi	r22, 0x0B	; 11
    53a8:	28 f5       	brcc	.+74     	; 0x53f4 <twiReceive+0x58>
    53aa:	16 2f       	mov	r17, r22
    53ac:	ec 01       	movw	r28, r24
    53ae:	a6 df       	rcall	.-180    	; 0x52fc <twiIsBusy>
    53b0:	81 11       	cpse	r24, r1
    53b2:	22 c0       	rjmp	.+68     	; 0x53f8 <twiReceive+0x5c>
    53b4:	80 91 5a 14 	lds	r24, 0x145A	; 0x80145a <_twiCurrentHandler>
    53b8:	90 91 5b 14 	lds	r25, 0x145B	; 0x80145b <_twiCurrentHandler+0x1>
    53bc:	c8 17       	cp	r28, r24
    53be:	d9 07       	cpc	r29, r25
    53c0:	41 f0       	breq	.+16     	; 0x53d2 <twiReceive+0x36>
    53c2:	3e df       	rcall	.-388    	; 0x5240 <_initTwiInterface>
    53c4:	89 81       	ldd	r24, Y+1	; 0x01
    53c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    53ca:	d0 93 5b 14 	sts	0x145B, r29	; 0x80145b <_twiCurrentHandler+0x1>
    53ce:	c0 93 5a 14 	sts	0x145A, r28	; 0x80145a <_twiCurrentHandler>
    53d2:	10 93 5c 14 	sts	0x145C, r17	; 0x80145c <_twiMessageLen>
    53d6:	88 81       	ld	r24, Y
    53d8:	88 0f       	add	r24, r24
    53da:	81 60       	ori	r24, 0x01	; 1
    53dc:	80 93 5d 14 	sts	0x145D, r24	; 0x80145d <_twiMessageBuffer>
    53e0:	88 ef       	ldi	r24, 0xF8	; 248
    53e2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    53e6:	85 ea       	ldi	r24, 0xA5	; 165
    53e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53ec:	85 e0       	ldi	r24, 0x05	; 5
    53ee:	05 c0       	rjmp	.+10     	; 0x53fa <twiReceive+0x5e>
    53f0:	86 e0       	ldi	r24, 0x06	; 6
    53f2:	03 c0       	rjmp	.+6      	; 0x53fa <twiReceive+0x5e>
    53f4:	87 e0       	ldi	r24, 0x07	; 7
    53f6:	01 c0       	rjmp	.+2      	; 0x53fa <twiReceive+0x5e>
    53f8:	82 e0       	ldi	r24, 0x02	; 2
    53fa:	df 91       	pop	r29
    53fc:	cf 91       	pop	r28
    53fe:	1f 91       	pop	r17
    5400:	08 95       	ret

00005402 <__vector_39>:
    5402:	1f 92       	push	r1
    5404:	0f 92       	push	r0
    5406:	0f b6       	in	r0, 0x3f	; 63
    5408:	0f 92       	push	r0
    540a:	11 24       	eor	r1, r1
    540c:	0b b6       	in	r0, 0x3b	; 59
    540e:	0f 92       	push	r0
    5410:	2f 93       	push	r18
    5412:	3f 93       	push	r19
    5414:	4f 93       	push	r20
    5416:	5f 93       	push	r21
    5418:	6f 93       	push	r22
    541a:	7f 93       	push	r23
    541c:	8f 93       	push	r24
    541e:	9f 93       	push	r25
    5420:	af 93       	push	r26
    5422:	bf 93       	push	r27
    5424:	ef 93       	push	r30
    5426:	ff 93       	push	r31
    5428:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    542c:	8e 2f       	mov	r24, r30
    542e:	90 e0       	ldi	r25, 0x00	; 0
    5430:	fc 01       	movw	r30, r24
    5432:	38 97       	sbiw	r30, 0x08	; 8
    5434:	e1 35       	cpi	r30, 0x51	; 81
    5436:	f1 05       	cpc	r31, r1
    5438:	08 f0       	brcs	.+2      	; 0x543c <__vector_39+0x3a>
    543a:	75 c0       	rjmp	.+234    	; 0x5526 <__vector_39+0x124>
    543c:	88 27       	eor	r24, r24
    543e:	e4 58       	subi	r30, 0x84	; 132
    5440:	ff 4f       	sbci	r31, 0xFF	; 255
    5442:	8f 4f       	sbci	r24, 0xFF	; 255
    5444:	a5 c2       	rjmp	.+1354   	; 0x5990 <__tablejump2__>
    5446:	10 92 59 14 	sts	0x1459, r1	; 0x801459 <_index.1885>
    544a:	e0 91 59 14 	lds	r30, 0x1459	; 0x801459 <_index.1885>
    544e:	80 91 5c 14 	lds	r24, 0x145C	; 0x80145c <_twiMessageLen>
    5452:	e8 17       	cp	r30, r24
    5454:	70 f4       	brcc	.+28     	; 0x5472 <__vector_39+0x70>
    5456:	81 e0       	ldi	r24, 0x01	; 1
    5458:	8e 0f       	add	r24, r30
    545a:	80 93 59 14 	sts	0x1459, r24	; 0x801459 <_index.1885>
    545e:	f0 e0       	ldi	r31, 0x00	; 0
    5460:	e3 5a       	subi	r30, 0xA3	; 163
    5462:	fb 4e       	sbci	r31, 0xEB	; 235
    5464:	80 81       	ld	r24, Z
    5466:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    546a:	85 e8       	ldi	r24, 0x85	; 133
    546c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5470:	72 c0       	rjmp	.+228    	; 0x5556 <__vector_39+0x154>
    5472:	84 e9       	ldi	r24, 0x94	; 148
    5474:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5478:	80 91 5a 14 	lds	r24, 0x145A	; 0x80145a <_twiCurrentHandler>
    547c:	90 91 5b 14 	lds	r25, 0x145B	; 0x80145b <_twiCurrentHandler+0x1>
    5480:	dc 01       	movw	r26, r24
    5482:	12 96       	adiw	r26, 0x02	; 2
    5484:	ed 91       	ld	r30, X+
    5486:	fc 91       	ld	r31, X
    5488:	13 97       	sbiw	r26, 0x03	; 3
    548a:	30 97       	sbiw	r30, 0x00	; 0
    548c:	09 f4       	brne	.+2      	; 0x5490 <__vector_39+0x8e>
    548e:	63 c0       	rjmp	.+198    	; 0x5556 <__vector_39+0x154>
    5490:	20 e0       	ldi	r18, 0x00	; 0
    5492:	40 e0       	ldi	r20, 0x00	; 0
    5494:	50 e0       	ldi	r21, 0x00	; 0
    5496:	64 e0       	ldi	r22, 0x04	; 4
    5498:	19 95       	eicall
    549a:	5d c0       	rjmp	.+186    	; 0x5556 <__vector_39+0x154>
    549c:	e0 91 59 14 	lds	r30, 0x1459	; 0x801459 <_index.1885>
    54a0:	81 e0       	ldi	r24, 0x01	; 1
    54a2:	8e 0f       	add	r24, r30
    54a4:	80 93 59 14 	sts	0x1459, r24	; 0x801459 <_index.1885>
    54a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    54ac:	f0 e0       	ldi	r31, 0x00	; 0
    54ae:	e3 5a       	subi	r30, 0xA3	; 163
    54b0:	fb 4e       	sbci	r31, 0xEB	; 235
    54b2:	80 83       	st	Z, r24
    54b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    54b8:	80 34       	cpi	r24, 0x40	; 64
    54ba:	11 f4       	brne	.+4      	; 0x54c0 <__vector_39+0xbe>
    54bc:	10 92 59 14 	sts	0x1459, r1	; 0x801459 <_index.1885>
    54c0:	20 91 59 14 	lds	r18, 0x1459	; 0x801459 <_index.1885>
    54c4:	30 e0       	ldi	r19, 0x00	; 0
    54c6:	80 91 5c 14 	lds	r24, 0x145C	; 0x80145c <_twiMessageLen>
    54ca:	90 e0       	ldi	r25, 0x00	; 0
    54cc:	01 97       	sbiw	r24, 0x01	; 1
    54ce:	28 17       	cp	r18, r24
    54d0:	39 07       	cpc	r19, r25
    54d2:	24 f4       	brge	.+8      	; 0x54dc <__vector_39+0xda>
    54d4:	85 ec       	ldi	r24, 0xC5	; 197
    54d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54da:	3d c0       	rjmp	.+122    	; 0x5556 <__vector_39+0x154>
    54dc:	85 e8       	ldi	r24, 0x85	; 133
    54de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54e2:	39 c0       	rjmp	.+114    	; 0x5556 <__vector_39+0x154>
    54e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    54e8:	e0 91 59 14 	lds	r30, 0x1459	; 0x801459 <_index.1885>
    54ec:	f0 e0       	ldi	r31, 0x00	; 0
    54ee:	e3 5a       	subi	r30, 0xA3	; 163
    54f0:	fb 4e       	sbci	r31, 0xEB	; 235
    54f2:	80 83       	st	Z, r24
    54f4:	84 e9       	ldi	r24, 0x94	; 148
    54f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54fa:	80 91 5a 14 	lds	r24, 0x145A	; 0x80145a <_twiCurrentHandler>
    54fe:	90 91 5b 14 	lds	r25, 0x145B	; 0x80145b <_twiCurrentHandler+0x1>
    5502:	dc 01       	movw	r26, r24
    5504:	12 96       	adiw	r26, 0x02	; 2
    5506:	ed 91       	ld	r30, X+
    5508:	fc 91       	ld	r31, X
    550a:	13 97       	sbiw	r26, 0x03	; 3
    550c:	30 97       	sbiw	r30, 0x00	; 0
    550e:	19 f1       	breq	.+70     	; 0x5556 <__vector_39+0x154>
    5510:	20 91 5c 14 	lds	r18, 0x145C	; 0x80145c <_twiMessageLen>
    5514:	4d e5       	ldi	r20, 0x5D	; 93
    5516:	54 e1       	ldi	r21, 0x14	; 20
    5518:	65 e0       	ldi	r22, 0x05	; 5
    551a:	19 95       	eicall
    551c:	1c c0       	rjmp	.+56     	; 0x5556 <__vector_39+0x154>
    551e:	85 ea       	ldi	r24, 0xA5	; 165
    5520:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5524:	18 c0       	rjmp	.+48     	; 0x5556 <__vector_39+0x154>
    5526:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    552a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    552e:	84 e0       	ldi	r24, 0x04	; 4
    5530:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5534:	80 91 5a 14 	lds	r24, 0x145A	; 0x80145a <_twiCurrentHandler>
    5538:	90 91 5b 14 	lds	r25, 0x145B	; 0x80145b <_twiCurrentHandler+0x1>
    553c:	dc 01       	movw	r26, r24
    553e:	12 96       	adiw	r26, 0x02	; 2
    5540:	ed 91       	ld	r30, X+
    5542:	fc 91       	ld	r31, X
    5544:	13 97       	sbiw	r26, 0x03	; 3
    5546:	30 97       	sbiw	r30, 0x00	; 0
    5548:	31 f0       	breq	.+12     	; 0x5556 <__vector_39+0x154>
    554a:	20 e0       	ldi	r18, 0x00	; 0
    554c:	40 e0       	ldi	r20, 0x00	; 0
    554e:	50 e0       	ldi	r21, 0x00	; 0
    5550:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5554:	19 95       	eicall
    5556:	ff 91       	pop	r31
    5558:	ef 91       	pop	r30
    555a:	bf 91       	pop	r27
    555c:	af 91       	pop	r26
    555e:	9f 91       	pop	r25
    5560:	8f 91       	pop	r24
    5562:	7f 91       	pop	r23
    5564:	6f 91       	pop	r22
    5566:	5f 91       	pop	r21
    5568:	4f 91       	pop	r20
    556a:	3f 91       	pop	r19
    556c:	2f 91       	pop	r18
    556e:	0f 90       	pop	r0
    5570:	0b be       	out	0x3b, r0	; 59
    5572:	0f 90       	pop	r0
    5574:	0f be       	out	0x3f, r0	; 63
    5576:	0f 90       	pop	r0
    5578:	1f 90       	pop	r1
    557a:	18 95       	reti

0000557c <fifo_init>:
    557c:	fc 01       	movw	r30, r24
    557e:	41 11       	cpse	r20, r1
    5580:	01 c0       	rjmp	.+2      	; 0x5584 <fifo_init+0x8>
    5582:	2f d3       	rcall	.+1630   	; 0x5be2 <abort>
    5584:	84 2f       	mov	r24, r20
    5586:	90 e0       	ldi	r25, 0x00	; 0
    5588:	9c 01       	movw	r18, r24
    558a:	21 50       	subi	r18, 0x01	; 1
    558c:	31 09       	sbc	r19, r1
    558e:	82 23       	and	r24, r18
    5590:	93 23       	and	r25, r19
    5592:	89 2b       	or	r24, r25
    5594:	09 f0       	breq	.+2      	; 0x5598 <fifo_init+0x1c>
    5596:	25 d3       	rcall	.+1610   	; 0x5be2 <abort>
    5598:	41 38       	cpi	r20, 0x81	; 129
    559a:	08 f0       	brcs	.+2      	; 0x559e <fifo_init+0x22>
    559c:	22 d3       	rcall	.+1604   	; 0x5be2 <abort>
    559e:	12 82       	std	Z+2, r1	; 0x02
    55a0:	13 82       	std	Z+3, r1	; 0x03
    55a2:	44 83       	std	Z+4, r20	; 0x04
    55a4:	44 0f       	add	r20, r20
    55a6:	41 50       	subi	r20, 0x01	; 1
    55a8:	45 83       	std	Z+5, r20	; 0x05
    55aa:	71 83       	std	Z+1, r23	; 0x01
    55ac:	60 83       	st	Z, r22
    55ae:	80 e0       	ldi	r24, 0x00	; 0
    55b0:	90 e0       	ldi	r25, 0x00	; 0
    55b2:	08 95       	ret

000055b4 <__subsf3>:
    55b4:	50 58       	subi	r21, 0x80	; 128

000055b6 <__addsf3>:
    55b6:	bb 27       	eor	r27, r27
    55b8:	aa 27       	eor	r26, r26
    55ba:	0e d0       	rcall	.+28     	; 0x55d8 <__addsf3x>
    55bc:	28 c1       	rjmp	.+592    	; 0x580e <__fp_round>
    55be:	19 d1       	rcall	.+562    	; 0x57f2 <__fp_pscA>
    55c0:	30 f0       	brcs	.+12     	; 0x55ce <__addsf3+0x18>
    55c2:	1e d1       	rcall	.+572    	; 0x5800 <__fp_pscB>
    55c4:	20 f0       	brcs	.+8      	; 0x55ce <__addsf3+0x18>
    55c6:	31 f4       	brne	.+12     	; 0x55d4 <__addsf3+0x1e>
    55c8:	9f 3f       	cpi	r25, 0xFF	; 255
    55ca:	11 f4       	brne	.+4      	; 0x55d0 <__addsf3+0x1a>
    55cc:	1e f4       	brtc	.+6      	; 0x55d4 <__addsf3+0x1e>
    55ce:	0e c1       	rjmp	.+540    	; 0x57ec <__fp_nan>
    55d0:	0e f4       	brtc	.+2      	; 0x55d4 <__addsf3+0x1e>
    55d2:	e0 95       	com	r30
    55d4:	e7 fb       	bst	r30, 7
    55d6:	04 c1       	rjmp	.+520    	; 0x57e0 <__fp_inf>

000055d8 <__addsf3x>:
    55d8:	e9 2f       	mov	r30, r25
    55da:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__fp_split3>
    55de:	78 f3       	brcs	.-34     	; 0x55be <__addsf3+0x8>
    55e0:	ba 17       	cp	r27, r26
    55e2:	62 07       	cpc	r22, r18
    55e4:	73 07       	cpc	r23, r19
    55e6:	84 07       	cpc	r24, r20
    55e8:	95 07       	cpc	r25, r21
    55ea:	20 f0       	brcs	.+8      	; 0x55f4 <__addsf3x+0x1c>
    55ec:	79 f4       	brne	.+30     	; 0x560c <__addsf3x+0x34>
    55ee:	a6 f5       	brtc	.+104    	; 0x5658 <__addsf3x+0x80>
    55f0:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__fp_zero>
    55f4:	0e f4       	brtc	.+2      	; 0x55f8 <__addsf3x+0x20>
    55f6:	e0 95       	com	r30
    55f8:	0b 2e       	mov	r0, r27
    55fa:	ba 2f       	mov	r27, r26
    55fc:	a0 2d       	mov	r26, r0
    55fe:	0b 01       	movw	r0, r22
    5600:	b9 01       	movw	r22, r18
    5602:	90 01       	movw	r18, r0
    5604:	0c 01       	movw	r0, r24
    5606:	ca 01       	movw	r24, r20
    5608:	a0 01       	movw	r20, r0
    560a:	11 24       	eor	r1, r1
    560c:	ff 27       	eor	r31, r31
    560e:	59 1b       	sub	r21, r25
    5610:	99 f0       	breq	.+38     	; 0x5638 <__addsf3x+0x60>
    5612:	59 3f       	cpi	r21, 0xF9	; 249
    5614:	50 f4       	brcc	.+20     	; 0x562a <__addsf3x+0x52>
    5616:	50 3e       	cpi	r21, 0xE0	; 224
    5618:	68 f1       	brcs	.+90     	; 0x5674 <__addsf3x+0x9c>
    561a:	1a 16       	cp	r1, r26
    561c:	f0 40       	sbci	r31, 0x00	; 0
    561e:	a2 2f       	mov	r26, r18
    5620:	23 2f       	mov	r18, r19
    5622:	34 2f       	mov	r19, r20
    5624:	44 27       	eor	r20, r20
    5626:	58 5f       	subi	r21, 0xF8	; 248
    5628:	f3 cf       	rjmp	.-26     	; 0x5610 <__addsf3x+0x38>
    562a:	46 95       	lsr	r20
    562c:	37 95       	ror	r19
    562e:	27 95       	ror	r18
    5630:	a7 95       	ror	r26
    5632:	f0 40       	sbci	r31, 0x00	; 0
    5634:	53 95       	inc	r21
    5636:	c9 f7       	brne	.-14     	; 0x562a <__addsf3x+0x52>
    5638:	7e f4       	brtc	.+30     	; 0x5658 <__addsf3x+0x80>
    563a:	1f 16       	cp	r1, r31
    563c:	ba 0b       	sbc	r27, r26
    563e:	62 0b       	sbc	r22, r18
    5640:	73 0b       	sbc	r23, r19
    5642:	84 0b       	sbc	r24, r20
    5644:	ba f0       	brmi	.+46     	; 0x5674 <__addsf3x+0x9c>
    5646:	91 50       	subi	r25, 0x01	; 1
    5648:	a1 f0       	breq	.+40     	; 0x5672 <__addsf3x+0x9a>
    564a:	ff 0f       	add	r31, r31
    564c:	bb 1f       	adc	r27, r27
    564e:	66 1f       	adc	r22, r22
    5650:	77 1f       	adc	r23, r23
    5652:	88 1f       	adc	r24, r24
    5654:	c2 f7       	brpl	.-16     	; 0x5646 <__addsf3x+0x6e>
    5656:	0e c0       	rjmp	.+28     	; 0x5674 <__addsf3x+0x9c>
    5658:	ba 0f       	add	r27, r26
    565a:	62 1f       	adc	r22, r18
    565c:	73 1f       	adc	r23, r19
    565e:	84 1f       	adc	r24, r20
    5660:	48 f4       	brcc	.+18     	; 0x5674 <__addsf3x+0x9c>
    5662:	87 95       	ror	r24
    5664:	77 95       	ror	r23
    5666:	67 95       	ror	r22
    5668:	b7 95       	ror	r27
    566a:	f7 95       	ror	r31
    566c:	9e 3f       	cpi	r25, 0xFE	; 254
    566e:	08 f0       	brcs	.+2      	; 0x5672 <__addsf3x+0x9a>
    5670:	b1 cf       	rjmp	.-158    	; 0x55d4 <__addsf3+0x1e>
    5672:	93 95       	inc	r25
    5674:	88 0f       	add	r24, r24
    5676:	08 f0       	brcs	.+2      	; 0x567a <__addsf3x+0xa2>
    5678:	99 27       	eor	r25, r25
    567a:	ee 0f       	add	r30, r30
    567c:	97 95       	ror	r25
    567e:	87 95       	ror	r24
    5680:	08 95       	ret

00005682 <__divsf3>:
    5682:	0d d0       	rcall	.+26     	; 0x569e <__divsf3x>
    5684:	c4 c0       	rjmp	.+392    	; 0x580e <__fp_round>
    5686:	bc d0       	rcall	.+376    	; 0x5800 <__fp_pscB>
    5688:	48 f0       	brcs	.+18     	; 0x569c <__divsf3+0x1a>
    568a:	b3 d0       	rcall	.+358    	; 0x57f2 <__fp_pscA>
    568c:	38 f0       	brcs	.+14     	; 0x569c <__divsf3+0x1a>
    568e:	21 f4       	brne	.+8      	; 0x5698 <__divsf3+0x16>
    5690:	5f 3f       	cpi	r21, 0xFF	; 255
    5692:	21 f0       	breq	.+8      	; 0x569c <__divsf3+0x1a>
    5694:	a5 c0       	rjmp	.+330    	; 0x57e0 <__fp_inf>
    5696:	51 11       	cpse	r21, r1
    5698:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <__fp_szero>
    569c:	a7 c0       	rjmp	.+334    	; 0x57ec <__fp_nan>

0000569e <__divsf3x>:
    569e:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__fp_split3>
    56a2:	88 f3       	brcs	.-30     	; 0x5686 <__divsf3+0x4>

000056a4 <__divsf3_pse>:
    56a4:	99 23       	and	r25, r25
    56a6:	b9 f3       	breq	.-18     	; 0x5696 <__divsf3+0x14>
    56a8:	55 23       	and	r21, r21
    56aa:	a1 f3       	breq	.-24     	; 0x5694 <__divsf3+0x12>
    56ac:	95 1b       	sub	r25, r21
    56ae:	55 0b       	sbc	r21, r21
    56b0:	bb 27       	eor	r27, r27
    56b2:	aa 27       	eor	r26, r26
    56b4:	62 17       	cp	r22, r18
    56b6:	73 07       	cpc	r23, r19
    56b8:	84 07       	cpc	r24, r20
    56ba:	38 f0       	brcs	.+14     	; 0x56ca <__divsf3_pse+0x26>
    56bc:	9f 5f       	subi	r25, 0xFF	; 255
    56be:	5f 4f       	sbci	r21, 0xFF	; 255
    56c0:	22 0f       	add	r18, r18
    56c2:	33 1f       	adc	r19, r19
    56c4:	44 1f       	adc	r20, r20
    56c6:	aa 1f       	adc	r26, r26
    56c8:	a9 f3       	breq	.-22     	; 0x56b4 <__divsf3_pse+0x10>
    56ca:	34 d0       	rcall	.+104    	; 0x5734 <__divsf3_pse+0x90>
    56cc:	0e 2e       	mov	r0, r30
    56ce:	3a f0       	brmi	.+14     	; 0x56de <__divsf3_pse+0x3a>
    56d0:	e0 e8       	ldi	r30, 0x80	; 128
    56d2:	31 d0       	rcall	.+98     	; 0x5736 <__divsf3_pse+0x92>
    56d4:	91 50       	subi	r25, 0x01	; 1
    56d6:	50 40       	sbci	r21, 0x00	; 0
    56d8:	e6 95       	lsr	r30
    56da:	00 1c       	adc	r0, r0
    56dc:	ca f7       	brpl	.-14     	; 0x56d0 <__divsf3_pse+0x2c>
    56de:	2a d0       	rcall	.+84     	; 0x5734 <__divsf3_pse+0x90>
    56e0:	fe 2f       	mov	r31, r30
    56e2:	28 d0       	rcall	.+80     	; 0x5734 <__divsf3_pse+0x90>
    56e4:	66 0f       	add	r22, r22
    56e6:	77 1f       	adc	r23, r23
    56e8:	88 1f       	adc	r24, r24
    56ea:	bb 1f       	adc	r27, r27
    56ec:	26 17       	cp	r18, r22
    56ee:	37 07       	cpc	r19, r23
    56f0:	48 07       	cpc	r20, r24
    56f2:	ab 07       	cpc	r26, r27
    56f4:	b0 e8       	ldi	r27, 0x80	; 128
    56f6:	09 f0       	breq	.+2      	; 0x56fa <__divsf3_pse+0x56>
    56f8:	bb 0b       	sbc	r27, r27
    56fa:	80 2d       	mov	r24, r0
    56fc:	bf 01       	movw	r22, r30
    56fe:	ff 27       	eor	r31, r31
    5700:	93 58       	subi	r25, 0x83	; 131
    5702:	5f 4f       	sbci	r21, 0xFF	; 255
    5704:	32 f0       	brmi	.+12     	; 0x5712 <__divsf3_pse+0x6e>
    5706:	9e 3f       	cpi	r25, 0xFE	; 254
    5708:	51 05       	cpc	r21, r1
    570a:	70 f0       	brcs	.+28     	; 0x5728 <__divsf3_pse+0x84>
    570c:	69 c0       	rjmp	.+210    	; 0x57e0 <__fp_inf>
    570e:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <__fp_szero>
    5712:	5f 3f       	cpi	r21, 0xFF	; 255
    5714:	e4 f3       	brlt	.-8      	; 0x570e <__divsf3_pse+0x6a>
    5716:	98 3e       	cpi	r25, 0xE8	; 232
    5718:	d4 f3       	brlt	.-12     	; 0x570e <__divsf3_pse+0x6a>
    571a:	86 95       	lsr	r24
    571c:	77 95       	ror	r23
    571e:	67 95       	ror	r22
    5720:	b7 95       	ror	r27
    5722:	f7 95       	ror	r31
    5724:	9f 5f       	subi	r25, 0xFF	; 255
    5726:	c9 f7       	brne	.-14     	; 0x571a <__divsf3_pse+0x76>
    5728:	88 0f       	add	r24, r24
    572a:	91 1d       	adc	r25, r1
    572c:	96 95       	lsr	r25
    572e:	87 95       	ror	r24
    5730:	97 f9       	bld	r25, 7
    5732:	08 95       	ret
    5734:	e1 e0       	ldi	r30, 0x01	; 1
    5736:	66 0f       	add	r22, r22
    5738:	77 1f       	adc	r23, r23
    573a:	88 1f       	adc	r24, r24
    573c:	bb 1f       	adc	r27, r27
    573e:	62 17       	cp	r22, r18
    5740:	73 07       	cpc	r23, r19
    5742:	84 07       	cpc	r24, r20
    5744:	ba 07       	cpc	r27, r26
    5746:	20 f0       	brcs	.+8      	; 0x5750 <__divsf3_pse+0xac>
    5748:	62 1b       	sub	r22, r18
    574a:	73 0b       	sbc	r23, r19
    574c:	84 0b       	sbc	r24, r20
    574e:	ba 0b       	sbc	r27, r26
    5750:	ee 1f       	adc	r30, r30
    5752:	88 f7       	brcc	.-30     	; 0x5736 <__divsf3_pse+0x92>
    5754:	e0 95       	com	r30
    5756:	08 95       	ret

00005758 <__fixsfsi>:
    5758:	0e 94 4f 1c 	call	0x389e	; 0x389e <__fixunssfsi>
    575c:	68 94       	set
    575e:	b1 11       	cpse	r27, r1
    5760:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <__fp_szero>
    5764:	08 95       	ret

00005766 <__floatunsisf>:
    5766:	e8 94       	clt
    5768:	09 c0       	rjmp	.+18     	; 0x577c <__floatsisf+0x12>

0000576a <__floatsisf>:
    576a:	97 fb       	bst	r25, 7
    576c:	3e f4       	brtc	.+14     	; 0x577c <__floatsisf+0x12>
    576e:	90 95       	com	r25
    5770:	80 95       	com	r24
    5772:	70 95       	com	r23
    5774:	61 95       	neg	r22
    5776:	7f 4f       	sbci	r23, 0xFF	; 255
    5778:	8f 4f       	sbci	r24, 0xFF	; 255
    577a:	9f 4f       	sbci	r25, 0xFF	; 255
    577c:	99 23       	and	r25, r25
    577e:	a9 f0       	breq	.+42     	; 0x57aa <__floatsisf+0x40>
    5780:	f9 2f       	mov	r31, r25
    5782:	96 e9       	ldi	r25, 0x96	; 150
    5784:	bb 27       	eor	r27, r27
    5786:	93 95       	inc	r25
    5788:	f6 95       	lsr	r31
    578a:	87 95       	ror	r24
    578c:	77 95       	ror	r23
    578e:	67 95       	ror	r22
    5790:	b7 95       	ror	r27
    5792:	f1 11       	cpse	r31, r1
    5794:	f8 cf       	rjmp	.-16     	; 0x5786 <__floatsisf+0x1c>
    5796:	fa f4       	brpl	.+62     	; 0x57d6 <__floatsisf+0x6c>
    5798:	bb 0f       	add	r27, r27
    579a:	11 f4       	brne	.+4      	; 0x57a0 <__floatsisf+0x36>
    579c:	60 ff       	sbrs	r22, 0
    579e:	1b c0       	rjmp	.+54     	; 0x57d6 <__floatsisf+0x6c>
    57a0:	6f 5f       	subi	r22, 0xFF	; 255
    57a2:	7f 4f       	sbci	r23, 0xFF	; 255
    57a4:	8f 4f       	sbci	r24, 0xFF	; 255
    57a6:	9f 4f       	sbci	r25, 0xFF	; 255
    57a8:	16 c0       	rjmp	.+44     	; 0x57d6 <__floatsisf+0x6c>
    57aa:	88 23       	and	r24, r24
    57ac:	11 f0       	breq	.+4      	; 0x57b2 <__floatsisf+0x48>
    57ae:	96 e9       	ldi	r25, 0x96	; 150
    57b0:	11 c0       	rjmp	.+34     	; 0x57d4 <__floatsisf+0x6a>
    57b2:	77 23       	and	r23, r23
    57b4:	21 f0       	breq	.+8      	; 0x57be <__floatsisf+0x54>
    57b6:	9e e8       	ldi	r25, 0x8E	; 142
    57b8:	87 2f       	mov	r24, r23
    57ba:	76 2f       	mov	r23, r22
    57bc:	05 c0       	rjmp	.+10     	; 0x57c8 <__floatsisf+0x5e>
    57be:	66 23       	and	r22, r22
    57c0:	71 f0       	breq	.+28     	; 0x57de <__floatsisf+0x74>
    57c2:	96 e8       	ldi	r25, 0x86	; 134
    57c4:	86 2f       	mov	r24, r22
    57c6:	70 e0       	ldi	r23, 0x00	; 0
    57c8:	60 e0       	ldi	r22, 0x00	; 0
    57ca:	2a f0       	brmi	.+10     	; 0x57d6 <__floatsisf+0x6c>
    57cc:	9a 95       	dec	r25
    57ce:	66 0f       	add	r22, r22
    57d0:	77 1f       	adc	r23, r23
    57d2:	88 1f       	adc	r24, r24
    57d4:	da f7       	brpl	.-10     	; 0x57cc <__floatsisf+0x62>
    57d6:	88 0f       	add	r24, r24
    57d8:	96 95       	lsr	r25
    57da:	87 95       	ror	r24
    57dc:	97 f9       	bld	r25, 7
    57de:	08 95       	ret

000057e0 <__fp_inf>:
    57e0:	97 f9       	bld	r25, 7
    57e2:	9f 67       	ori	r25, 0x7F	; 127
    57e4:	80 e8       	ldi	r24, 0x80	; 128
    57e6:	70 e0       	ldi	r23, 0x00	; 0
    57e8:	60 e0       	ldi	r22, 0x00	; 0
    57ea:	08 95       	ret

000057ec <__fp_nan>:
    57ec:	9f ef       	ldi	r25, 0xFF	; 255
    57ee:	80 ec       	ldi	r24, 0xC0	; 192
    57f0:	08 95       	ret

000057f2 <__fp_pscA>:
    57f2:	00 24       	eor	r0, r0
    57f4:	0a 94       	dec	r0
    57f6:	16 16       	cp	r1, r22
    57f8:	17 06       	cpc	r1, r23
    57fa:	18 06       	cpc	r1, r24
    57fc:	09 06       	cpc	r0, r25
    57fe:	08 95       	ret

00005800 <__fp_pscB>:
    5800:	00 24       	eor	r0, r0
    5802:	0a 94       	dec	r0
    5804:	12 16       	cp	r1, r18
    5806:	13 06       	cpc	r1, r19
    5808:	14 06       	cpc	r1, r20
    580a:	05 06       	cpc	r0, r21
    580c:	08 95       	ret

0000580e <__fp_round>:
    580e:	09 2e       	mov	r0, r25
    5810:	03 94       	inc	r0
    5812:	00 0c       	add	r0, r0
    5814:	11 f4       	brne	.+4      	; 0x581a <__fp_round+0xc>
    5816:	88 23       	and	r24, r24
    5818:	52 f0       	brmi	.+20     	; 0x582e <__fp_round+0x20>
    581a:	bb 0f       	add	r27, r27
    581c:	40 f4       	brcc	.+16     	; 0x582e <__fp_round+0x20>
    581e:	bf 2b       	or	r27, r31
    5820:	11 f4       	brne	.+4      	; 0x5826 <__fp_round+0x18>
    5822:	60 ff       	sbrs	r22, 0
    5824:	04 c0       	rjmp	.+8      	; 0x582e <__fp_round+0x20>
    5826:	6f 5f       	subi	r22, 0xFF	; 255
    5828:	7f 4f       	sbci	r23, 0xFF	; 255
    582a:	8f 4f       	sbci	r24, 0xFF	; 255
    582c:	9f 4f       	sbci	r25, 0xFF	; 255
    582e:	08 95       	ret

00005830 <__gesf2>:
    5830:	69 d0       	rcall	.+210    	; 0x5904 <__fp_cmp>
    5832:	08 f4       	brcc	.+2      	; 0x5836 <__gesf2+0x6>
    5834:	8f ef       	ldi	r24, 0xFF	; 255
    5836:	08 95       	ret

00005838 <__mulsf3>:
    5838:	0c d0       	rcall	.+24     	; 0x5852 <__mulsf3x>
    583a:	e9 cf       	rjmp	.-46     	; 0x580e <__fp_round>
    583c:	da df       	rcall	.-76     	; 0x57f2 <__fp_pscA>
    583e:	28 f0       	brcs	.+10     	; 0x584a <__mulsf3+0x12>
    5840:	df df       	rcall	.-66     	; 0x5800 <__fp_pscB>
    5842:	18 f0       	brcs	.+6      	; 0x584a <__mulsf3+0x12>
    5844:	95 23       	and	r25, r21
    5846:	09 f0       	breq	.+2      	; 0x584a <__mulsf3+0x12>
    5848:	cb cf       	rjmp	.-106    	; 0x57e0 <__fp_inf>
    584a:	d0 cf       	rjmp	.-96     	; 0x57ec <__fp_nan>
    584c:	11 24       	eor	r1, r1
    584e:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <__fp_szero>

00005852 <__mulsf3x>:
    5852:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__fp_split3>
    5856:	90 f3       	brcs	.-28     	; 0x583c <__mulsf3+0x4>

00005858 <__mulsf3_pse>:
    5858:	95 9f       	mul	r25, r21
    585a:	c1 f3       	breq	.-16     	; 0x584c <__mulsf3+0x14>
    585c:	95 0f       	add	r25, r21
    585e:	50 e0       	ldi	r21, 0x00	; 0
    5860:	55 1f       	adc	r21, r21
    5862:	62 9f       	mul	r22, r18
    5864:	f0 01       	movw	r30, r0
    5866:	72 9f       	mul	r23, r18
    5868:	bb 27       	eor	r27, r27
    586a:	f0 0d       	add	r31, r0
    586c:	b1 1d       	adc	r27, r1
    586e:	63 9f       	mul	r22, r19
    5870:	aa 27       	eor	r26, r26
    5872:	f0 0d       	add	r31, r0
    5874:	b1 1d       	adc	r27, r1
    5876:	aa 1f       	adc	r26, r26
    5878:	64 9f       	mul	r22, r20
    587a:	66 27       	eor	r22, r22
    587c:	b0 0d       	add	r27, r0
    587e:	a1 1d       	adc	r26, r1
    5880:	66 1f       	adc	r22, r22
    5882:	82 9f       	mul	r24, r18
    5884:	22 27       	eor	r18, r18
    5886:	b0 0d       	add	r27, r0
    5888:	a1 1d       	adc	r26, r1
    588a:	62 1f       	adc	r22, r18
    588c:	73 9f       	mul	r23, r19
    588e:	b0 0d       	add	r27, r0
    5890:	a1 1d       	adc	r26, r1
    5892:	62 1f       	adc	r22, r18
    5894:	83 9f       	mul	r24, r19
    5896:	a0 0d       	add	r26, r0
    5898:	61 1d       	adc	r22, r1
    589a:	22 1f       	adc	r18, r18
    589c:	74 9f       	mul	r23, r20
    589e:	33 27       	eor	r19, r19
    58a0:	a0 0d       	add	r26, r0
    58a2:	61 1d       	adc	r22, r1
    58a4:	23 1f       	adc	r18, r19
    58a6:	84 9f       	mul	r24, r20
    58a8:	60 0d       	add	r22, r0
    58aa:	21 1d       	adc	r18, r1
    58ac:	82 2f       	mov	r24, r18
    58ae:	76 2f       	mov	r23, r22
    58b0:	6a 2f       	mov	r22, r26
    58b2:	11 24       	eor	r1, r1
    58b4:	9f 57       	subi	r25, 0x7F	; 127
    58b6:	50 40       	sbci	r21, 0x00	; 0
    58b8:	92 f0       	brmi	.+36     	; 0x58de <__mulsf3_pse+0x86>
    58ba:	e9 f0       	breq	.+58     	; 0x58f6 <__mulsf3_pse+0x9e>
    58bc:	88 23       	and	r24, r24
    58be:	4a f0       	brmi	.+18     	; 0x58d2 <__mulsf3_pse+0x7a>
    58c0:	ee 0f       	add	r30, r30
    58c2:	ff 1f       	adc	r31, r31
    58c4:	bb 1f       	adc	r27, r27
    58c6:	66 1f       	adc	r22, r22
    58c8:	77 1f       	adc	r23, r23
    58ca:	88 1f       	adc	r24, r24
    58cc:	91 50       	subi	r25, 0x01	; 1
    58ce:	50 40       	sbci	r21, 0x00	; 0
    58d0:	a9 f7       	brne	.-22     	; 0x58bc <__mulsf3_pse+0x64>
    58d2:	9e 3f       	cpi	r25, 0xFE	; 254
    58d4:	51 05       	cpc	r21, r1
    58d6:	78 f0       	brcs	.+30     	; 0x58f6 <__mulsf3_pse+0x9e>
    58d8:	83 cf       	rjmp	.-250    	; 0x57e0 <__fp_inf>
    58da:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <__fp_szero>
    58de:	5f 3f       	cpi	r21, 0xFF	; 255
    58e0:	e4 f3       	brlt	.-8      	; 0x58da <__mulsf3_pse+0x82>
    58e2:	98 3e       	cpi	r25, 0xE8	; 232
    58e4:	d4 f3       	brlt	.-12     	; 0x58da <__mulsf3_pse+0x82>
    58e6:	86 95       	lsr	r24
    58e8:	77 95       	ror	r23
    58ea:	67 95       	ror	r22
    58ec:	b7 95       	ror	r27
    58ee:	f7 95       	ror	r31
    58f0:	e7 95       	ror	r30
    58f2:	9f 5f       	subi	r25, 0xFF	; 255
    58f4:	c1 f7       	brne	.-16     	; 0x58e6 <__mulsf3_pse+0x8e>
    58f6:	fe 2b       	or	r31, r30
    58f8:	88 0f       	add	r24, r24
    58fa:	91 1d       	adc	r25, r1
    58fc:	96 95       	lsr	r25
    58fe:	87 95       	ror	r24
    5900:	97 f9       	bld	r25, 7
    5902:	08 95       	ret

00005904 <__fp_cmp>:
    5904:	99 0f       	add	r25, r25
    5906:	00 08       	sbc	r0, r0
    5908:	55 0f       	add	r21, r21
    590a:	aa 0b       	sbc	r26, r26
    590c:	e0 e8       	ldi	r30, 0x80	; 128
    590e:	fe ef       	ldi	r31, 0xFE	; 254
    5910:	16 16       	cp	r1, r22
    5912:	17 06       	cpc	r1, r23
    5914:	e8 07       	cpc	r30, r24
    5916:	f9 07       	cpc	r31, r25
    5918:	c0 f0       	brcs	.+48     	; 0x594a <__fp_cmp+0x46>
    591a:	12 16       	cp	r1, r18
    591c:	13 06       	cpc	r1, r19
    591e:	e4 07       	cpc	r30, r20
    5920:	f5 07       	cpc	r31, r21
    5922:	98 f0       	brcs	.+38     	; 0x594a <__fp_cmp+0x46>
    5924:	62 1b       	sub	r22, r18
    5926:	73 0b       	sbc	r23, r19
    5928:	84 0b       	sbc	r24, r20
    592a:	95 0b       	sbc	r25, r21
    592c:	39 f4       	brne	.+14     	; 0x593c <__fp_cmp+0x38>
    592e:	0a 26       	eor	r0, r26
    5930:	61 f0       	breq	.+24     	; 0x594a <__fp_cmp+0x46>
    5932:	23 2b       	or	r18, r19
    5934:	24 2b       	or	r18, r20
    5936:	25 2b       	or	r18, r21
    5938:	21 f4       	brne	.+8      	; 0x5942 <__fp_cmp+0x3e>
    593a:	08 95       	ret
    593c:	0a 26       	eor	r0, r26
    593e:	09 f4       	brne	.+2      	; 0x5942 <__fp_cmp+0x3e>
    5940:	a1 40       	sbci	r26, 0x01	; 1
    5942:	a6 95       	lsr	r26
    5944:	8f ef       	ldi	r24, 0xFF	; 255
    5946:	81 1d       	adc	r24, r1
    5948:	81 1d       	adc	r24, r1
    594a:	08 95       	ret

0000594c <__udivmodsi4>:
    594c:	a1 e2       	ldi	r26, 0x21	; 33
    594e:	1a 2e       	mov	r1, r26
    5950:	aa 1b       	sub	r26, r26
    5952:	bb 1b       	sub	r27, r27
    5954:	fd 01       	movw	r30, r26
    5956:	0d c0       	rjmp	.+26     	; 0x5972 <__udivmodsi4_ep>

00005958 <__udivmodsi4_loop>:
    5958:	aa 1f       	adc	r26, r26
    595a:	bb 1f       	adc	r27, r27
    595c:	ee 1f       	adc	r30, r30
    595e:	ff 1f       	adc	r31, r31
    5960:	a2 17       	cp	r26, r18
    5962:	b3 07       	cpc	r27, r19
    5964:	e4 07       	cpc	r30, r20
    5966:	f5 07       	cpc	r31, r21
    5968:	20 f0       	brcs	.+8      	; 0x5972 <__udivmodsi4_ep>
    596a:	a2 1b       	sub	r26, r18
    596c:	b3 0b       	sbc	r27, r19
    596e:	e4 0b       	sbc	r30, r20
    5970:	f5 0b       	sbc	r31, r21

00005972 <__udivmodsi4_ep>:
    5972:	66 1f       	adc	r22, r22
    5974:	77 1f       	adc	r23, r23
    5976:	88 1f       	adc	r24, r24
    5978:	99 1f       	adc	r25, r25
    597a:	1a 94       	dec	r1
    597c:	69 f7       	brne	.-38     	; 0x5958 <__udivmodsi4_loop>
    597e:	60 95       	com	r22
    5980:	70 95       	com	r23
    5982:	80 95       	com	r24
    5984:	90 95       	com	r25
    5986:	9b 01       	movw	r18, r22
    5988:	ac 01       	movw	r20, r24
    598a:	bd 01       	movw	r22, r26
    598c:	cf 01       	movw	r24, r30
    598e:	08 95       	ret

00005990 <__tablejump2__>:
    5990:	ee 0f       	add	r30, r30
    5992:	ff 1f       	adc	r31, r31
    5994:	88 1f       	adc	r24, r24
    5996:	8b bf       	out	0x3b, r24	; 59
    5998:	07 90       	elpm	r0, Z+
    599a:	f6 91       	elpm	r31, Z
    599c:	e0 2d       	mov	r30, r0
    599e:	19 94       	eijmp

000059a0 <malloc>:
    59a0:	0f 93       	push	r16
    59a2:	1f 93       	push	r17
    59a4:	cf 93       	push	r28
    59a6:	df 93       	push	r29
    59a8:	82 30       	cpi	r24, 0x02	; 2
    59aa:	91 05       	cpc	r25, r1
    59ac:	10 f4       	brcc	.+4      	; 0x59b2 <malloc+0x12>
    59ae:	82 e0       	ldi	r24, 0x02	; 2
    59b0:	90 e0       	ldi	r25, 0x00	; 0
    59b2:	e0 91 7e 14 	lds	r30, 0x147E	; 0x80147e <__flp>
    59b6:	f0 91 7f 14 	lds	r31, 0x147F	; 0x80147f <__flp+0x1>
    59ba:	20 e0       	ldi	r18, 0x00	; 0
    59bc:	30 e0       	ldi	r19, 0x00	; 0
    59be:	a0 e0       	ldi	r26, 0x00	; 0
    59c0:	b0 e0       	ldi	r27, 0x00	; 0
    59c2:	30 97       	sbiw	r30, 0x00	; 0
    59c4:	19 f1       	breq	.+70     	; 0x5a0c <malloc+0x6c>
    59c6:	40 81       	ld	r20, Z
    59c8:	51 81       	ldd	r21, Z+1	; 0x01
    59ca:	02 81       	ldd	r16, Z+2	; 0x02
    59cc:	13 81       	ldd	r17, Z+3	; 0x03
    59ce:	48 17       	cp	r20, r24
    59d0:	59 07       	cpc	r21, r25
    59d2:	c8 f0       	brcs	.+50     	; 0x5a06 <malloc+0x66>
    59d4:	84 17       	cp	r24, r20
    59d6:	95 07       	cpc	r25, r21
    59d8:	69 f4       	brne	.+26     	; 0x59f4 <malloc+0x54>
    59da:	10 97       	sbiw	r26, 0x00	; 0
    59dc:	31 f0       	breq	.+12     	; 0x59ea <malloc+0x4a>
    59de:	12 96       	adiw	r26, 0x02	; 2
    59e0:	0c 93       	st	X, r16
    59e2:	12 97       	sbiw	r26, 0x02	; 2
    59e4:	13 96       	adiw	r26, 0x03	; 3
    59e6:	1c 93       	st	X, r17
    59e8:	27 c0       	rjmp	.+78     	; 0x5a38 <malloc+0x98>
    59ea:	00 93 7e 14 	sts	0x147E, r16	; 0x80147e <__flp>
    59ee:	10 93 7f 14 	sts	0x147F, r17	; 0x80147f <__flp+0x1>
    59f2:	22 c0       	rjmp	.+68     	; 0x5a38 <malloc+0x98>
    59f4:	21 15       	cp	r18, r1
    59f6:	31 05       	cpc	r19, r1
    59f8:	19 f0       	breq	.+6      	; 0x5a00 <malloc+0x60>
    59fa:	42 17       	cp	r20, r18
    59fc:	53 07       	cpc	r21, r19
    59fe:	18 f4       	brcc	.+6      	; 0x5a06 <malloc+0x66>
    5a00:	9a 01       	movw	r18, r20
    5a02:	bd 01       	movw	r22, r26
    5a04:	ef 01       	movw	r28, r30
    5a06:	df 01       	movw	r26, r30
    5a08:	f8 01       	movw	r30, r16
    5a0a:	db cf       	rjmp	.-74     	; 0x59c2 <malloc+0x22>
    5a0c:	21 15       	cp	r18, r1
    5a0e:	31 05       	cpc	r19, r1
    5a10:	f9 f0       	breq	.+62     	; 0x5a50 <malloc+0xb0>
    5a12:	28 1b       	sub	r18, r24
    5a14:	39 0b       	sbc	r19, r25
    5a16:	24 30       	cpi	r18, 0x04	; 4
    5a18:	31 05       	cpc	r19, r1
    5a1a:	80 f4       	brcc	.+32     	; 0x5a3c <malloc+0x9c>
    5a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    5a20:	61 15       	cp	r22, r1
    5a22:	71 05       	cpc	r23, r1
    5a24:	21 f0       	breq	.+8      	; 0x5a2e <malloc+0x8e>
    5a26:	fb 01       	movw	r30, r22
    5a28:	93 83       	std	Z+3, r25	; 0x03
    5a2a:	82 83       	std	Z+2, r24	; 0x02
    5a2c:	04 c0       	rjmp	.+8      	; 0x5a36 <malloc+0x96>
    5a2e:	90 93 7f 14 	sts	0x147F, r25	; 0x80147f <__flp+0x1>
    5a32:	80 93 7e 14 	sts	0x147E, r24	; 0x80147e <__flp>
    5a36:	fe 01       	movw	r30, r28
    5a38:	32 96       	adiw	r30, 0x02	; 2
    5a3a:	44 c0       	rjmp	.+136    	; 0x5ac4 <malloc+0x124>
    5a3c:	fe 01       	movw	r30, r28
    5a3e:	e2 0f       	add	r30, r18
    5a40:	f3 1f       	adc	r31, r19
    5a42:	81 93       	st	Z+, r24
    5a44:	91 93       	st	Z+, r25
    5a46:	22 50       	subi	r18, 0x02	; 2
    5a48:	31 09       	sbc	r19, r1
    5a4a:	39 83       	std	Y+1, r19	; 0x01
    5a4c:	28 83       	st	Y, r18
    5a4e:	3a c0       	rjmp	.+116    	; 0x5ac4 <malloc+0x124>
    5a50:	20 91 7c 14 	lds	r18, 0x147C	; 0x80147c <__brkval>
    5a54:	30 91 7d 14 	lds	r19, 0x147D	; 0x80147d <__brkval+0x1>
    5a58:	23 2b       	or	r18, r19
    5a5a:	41 f4       	brne	.+16     	; 0x5a6c <malloc+0xcc>
    5a5c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5a60:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5a64:	30 93 7d 14 	sts	0x147D, r19	; 0x80147d <__brkval+0x1>
    5a68:	20 93 7c 14 	sts	0x147C, r18	; 0x80147c <__brkval>
    5a6c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5a70:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5a74:	21 15       	cp	r18, r1
    5a76:	31 05       	cpc	r19, r1
    5a78:	41 f4       	brne	.+16     	; 0x5a8a <malloc+0xea>
    5a7a:	2d b7       	in	r18, 0x3d	; 61
    5a7c:	3e b7       	in	r19, 0x3e	; 62
    5a7e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5a82:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5a86:	24 1b       	sub	r18, r20
    5a88:	35 0b       	sbc	r19, r21
    5a8a:	e0 91 7c 14 	lds	r30, 0x147C	; 0x80147c <__brkval>
    5a8e:	f0 91 7d 14 	lds	r31, 0x147D	; 0x80147d <__brkval+0x1>
    5a92:	e2 17       	cp	r30, r18
    5a94:	f3 07       	cpc	r31, r19
    5a96:	a0 f4       	brcc	.+40     	; 0x5ac0 <malloc+0x120>
    5a98:	2e 1b       	sub	r18, r30
    5a9a:	3f 0b       	sbc	r19, r31
    5a9c:	28 17       	cp	r18, r24
    5a9e:	39 07       	cpc	r19, r25
    5aa0:	78 f0       	brcs	.+30     	; 0x5ac0 <malloc+0x120>
    5aa2:	ac 01       	movw	r20, r24
    5aa4:	4e 5f       	subi	r20, 0xFE	; 254
    5aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    5aa8:	24 17       	cp	r18, r20
    5aaa:	35 07       	cpc	r19, r21
    5aac:	48 f0       	brcs	.+18     	; 0x5ac0 <malloc+0x120>
    5aae:	4e 0f       	add	r20, r30
    5ab0:	5f 1f       	adc	r21, r31
    5ab2:	50 93 7d 14 	sts	0x147D, r21	; 0x80147d <__brkval+0x1>
    5ab6:	40 93 7c 14 	sts	0x147C, r20	; 0x80147c <__brkval>
    5aba:	81 93       	st	Z+, r24
    5abc:	91 93       	st	Z+, r25
    5abe:	02 c0       	rjmp	.+4      	; 0x5ac4 <malloc+0x124>
    5ac0:	e0 e0       	ldi	r30, 0x00	; 0
    5ac2:	f0 e0       	ldi	r31, 0x00	; 0
    5ac4:	cf 01       	movw	r24, r30
    5ac6:	df 91       	pop	r29
    5ac8:	cf 91       	pop	r28
    5aca:	1f 91       	pop	r17
    5acc:	0f 91       	pop	r16
    5ace:	08 95       	ret

00005ad0 <free>:
    5ad0:	cf 93       	push	r28
    5ad2:	df 93       	push	r29
    5ad4:	00 97       	sbiw	r24, 0x00	; 0
    5ad6:	09 f4       	brne	.+2      	; 0x5ada <free+0xa>
    5ad8:	81 c0       	rjmp	.+258    	; 0x5bdc <free+0x10c>
    5ada:	fc 01       	movw	r30, r24
    5adc:	32 97       	sbiw	r30, 0x02	; 2
    5ade:	13 82       	std	Z+3, r1	; 0x03
    5ae0:	12 82       	std	Z+2, r1	; 0x02
    5ae2:	a0 91 7e 14 	lds	r26, 0x147E	; 0x80147e <__flp>
    5ae6:	b0 91 7f 14 	lds	r27, 0x147F	; 0x80147f <__flp+0x1>
    5aea:	10 97       	sbiw	r26, 0x00	; 0
    5aec:	81 f4       	brne	.+32     	; 0x5b0e <free+0x3e>
    5aee:	20 81       	ld	r18, Z
    5af0:	31 81       	ldd	r19, Z+1	; 0x01
    5af2:	82 0f       	add	r24, r18
    5af4:	93 1f       	adc	r25, r19
    5af6:	20 91 7c 14 	lds	r18, 0x147C	; 0x80147c <__brkval>
    5afa:	30 91 7d 14 	lds	r19, 0x147D	; 0x80147d <__brkval+0x1>
    5afe:	28 17       	cp	r18, r24
    5b00:	39 07       	cpc	r19, r25
    5b02:	51 f5       	brne	.+84     	; 0x5b58 <free+0x88>
    5b04:	f0 93 7d 14 	sts	0x147D, r31	; 0x80147d <__brkval+0x1>
    5b08:	e0 93 7c 14 	sts	0x147C, r30	; 0x80147c <__brkval>
    5b0c:	67 c0       	rjmp	.+206    	; 0x5bdc <free+0x10c>
    5b0e:	ed 01       	movw	r28, r26
    5b10:	20 e0       	ldi	r18, 0x00	; 0
    5b12:	30 e0       	ldi	r19, 0x00	; 0
    5b14:	ce 17       	cp	r28, r30
    5b16:	df 07       	cpc	r29, r31
    5b18:	40 f4       	brcc	.+16     	; 0x5b2a <free+0x5a>
    5b1a:	4a 81       	ldd	r20, Y+2	; 0x02
    5b1c:	5b 81       	ldd	r21, Y+3	; 0x03
    5b1e:	9e 01       	movw	r18, r28
    5b20:	41 15       	cp	r20, r1
    5b22:	51 05       	cpc	r21, r1
    5b24:	f1 f0       	breq	.+60     	; 0x5b62 <free+0x92>
    5b26:	ea 01       	movw	r28, r20
    5b28:	f5 cf       	rjmp	.-22     	; 0x5b14 <free+0x44>
    5b2a:	d3 83       	std	Z+3, r29	; 0x03
    5b2c:	c2 83       	std	Z+2, r28	; 0x02
    5b2e:	40 81       	ld	r20, Z
    5b30:	51 81       	ldd	r21, Z+1	; 0x01
    5b32:	84 0f       	add	r24, r20
    5b34:	95 1f       	adc	r25, r21
    5b36:	c8 17       	cp	r28, r24
    5b38:	d9 07       	cpc	r29, r25
    5b3a:	59 f4       	brne	.+22     	; 0x5b52 <free+0x82>
    5b3c:	88 81       	ld	r24, Y
    5b3e:	99 81       	ldd	r25, Y+1	; 0x01
    5b40:	84 0f       	add	r24, r20
    5b42:	95 1f       	adc	r25, r21
    5b44:	02 96       	adiw	r24, 0x02	; 2
    5b46:	91 83       	std	Z+1, r25	; 0x01
    5b48:	80 83       	st	Z, r24
    5b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    5b4e:	93 83       	std	Z+3, r25	; 0x03
    5b50:	82 83       	std	Z+2, r24	; 0x02
    5b52:	21 15       	cp	r18, r1
    5b54:	31 05       	cpc	r19, r1
    5b56:	29 f4       	brne	.+10     	; 0x5b62 <free+0x92>
    5b58:	f0 93 7f 14 	sts	0x147F, r31	; 0x80147f <__flp+0x1>
    5b5c:	e0 93 7e 14 	sts	0x147E, r30	; 0x80147e <__flp>
    5b60:	3d c0       	rjmp	.+122    	; 0x5bdc <free+0x10c>
    5b62:	e9 01       	movw	r28, r18
    5b64:	fb 83       	std	Y+3, r31	; 0x03
    5b66:	ea 83       	std	Y+2, r30	; 0x02
    5b68:	49 91       	ld	r20, Y+
    5b6a:	59 91       	ld	r21, Y+
    5b6c:	c4 0f       	add	r28, r20
    5b6e:	d5 1f       	adc	r29, r21
    5b70:	ec 17       	cp	r30, r28
    5b72:	fd 07       	cpc	r31, r29
    5b74:	61 f4       	brne	.+24     	; 0x5b8e <free+0xbe>
    5b76:	80 81       	ld	r24, Z
    5b78:	91 81       	ldd	r25, Z+1	; 0x01
    5b7a:	84 0f       	add	r24, r20
    5b7c:	95 1f       	adc	r25, r21
    5b7e:	02 96       	adiw	r24, 0x02	; 2
    5b80:	e9 01       	movw	r28, r18
    5b82:	99 83       	std	Y+1, r25	; 0x01
    5b84:	88 83       	st	Y, r24
    5b86:	82 81       	ldd	r24, Z+2	; 0x02
    5b88:	93 81       	ldd	r25, Z+3	; 0x03
    5b8a:	9b 83       	std	Y+3, r25	; 0x03
    5b8c:	8a 83       	std	Y+2, r24	; 0x02
    5b8e:	e0 e0       	ldi	r30, 0x00	; 0
    5b90:	f0 e0       	ldi	r31, 0x00	; 0
    5b92:	12 96       	adiw	r26, 0x02	; 2
    5b94:	8d 91       	ld	r24, X+
    5b96:	9c 91       	ld	r25, X
    5b98:	13 97       	sbiw	r26, 0x03	; 3
    5b9a:	00 97       	sbiw	r24, 0x00	; 0
    5b9c:	19 f0       	breq	.+6      	; 0x5ba4 <free+0xd4>
    5b9e:	fd 01       	movw	r30, r26
    5ba0:	dc 01       	movw	r26, r24
    5ba2:	f7 cf       	rjmp	.-18     	; 0x5b92 <free+0xc2>
    5ba4:	8d 91       	ld	r24, X+
    5ba6:	9c 91       	ld	r25, X
    5ba8:	11 97       	sbiw	r26, 0x01	; 1
    5baa:	9d 01       	movw	r18, r26
    5bac:	2e 5f       	subi	r18, 0xFE	; 254
    5bae:	3f 4f       	sbci	r19, 0xFF	; 255
    5bb0:	82 0f       	add	r24, r18
    5bb2:	93 1f       	adc	r25, r19
    5bb4:	20 91 7c 14 	lds	r18, 0x147C	; 0x80147c <__brkval>
    5bb8:	30 91 7d 14 	lds	r19, 0x147D	; 0x80147d <__brkval+0x1>
    5bbc:	28 17       	cp	r18, r24
    5bbe:	39 07       	cpc	r19, r25
    5bc0:	69 f4       	brne	.+26     	; 0x5bdc <free+0x10c>
    5bc2:	30 97       	sbiw	r30, 0x00	; 0
    5bc4:	29 f4       	brne	.+10     	; 0x5bd0 <free+0x100>
    5bc6:	10 92 7f 14 	sts	0x147F, r1	; 0x80147f <__flp+0x1>
    5bca:	10 92 7e 14 	sts	0x147E, r1	; 0x80147e <__flp>
    5bce:	02 c0       	rjmp	.+4      	; 0x5bd4 <free+0x104>
    5bd0:	13 82       	std	Z+3, r1	; 0x03
    5bd2:	12 82       	std	Z+2, r1	; 0x02
    5bd4:	b0 93 7d 14 	sts	0x147D, r27	; 0x80147d <__brkval+0x1>
    5bd8:	a0 93 7c 14 	sts	0x147C, r26	; 0x80147c <__brkval>
    5bdc:	df 91       	pop	r29
    5bde:	cf 91       	pop	r28
    5be0:	08 95       	ret

00005be2 <abort>:
    5be2:	81 e0       	ldi	r24, 0x01	; 1
    5be4:	90 e0       	ldi	r25, 0x00	; 0
    5be6:	f8 94       	cli
    5be8:	7d c3       	rjmp	.+1786   	; 0x62e4 <_exit>

00005bea <memcpy>:
    5bea:	fb 01       	movw	r30, r22
    5bec:	dc 01       	movw	r26, r24
    5bee:	02 c0       	rjmp	.+4      	; 0x5bf4 <memcpy+0xa>
    5bf0:	01 90       	ld	r0, Z+
    5bf2:	0d 92       	st	X+, r0
    5bf4:	41 50       	subi	r20, 0x01	; 1
    5bf6:	50 40       	sbci	r21, 0x00	; 0
    5bf8:	d8 f7       	brcc	.-10     	; 0x5bf0 <memcpy+0x6>
    5bfa:	08 95       	ret

00005bfc <memset>:
    5bfc:	dc 01       	movw	r26, r24
    5bfe:	01 c0       	rjmp	.+2      	; 0x5c02 <memset+0x6>
    5c00:	6d 93       	st	X+, r22
    5c02:	41 50       	subi	r20, 0x01	; 1
    5c04:	50 40       	sbci	r21, 0x00	; 0
    5c06:	e0 f7       	brcc	.-8      	; 0x5c00 <memset+0x4>
    5c08:	08 95       	ret

00005c0a <strcasestr>:
    5c0a:	fb 01       	movw	r30, r22
    5c0c:	51 91       	ld	r21, Z+
    5c0e:	55 23       	and	r21, r21
    5c10:	b1 f0       	breq	.+44     	; 0x5c3e <strcasestr+0x34>
    5c12:	bf 01       	movw	r22, r30
    5c14:	dc 01       	movw	r26, r24
    5c16:	05 2e       	mov	r0, r21
    5c18:	4d 91       	ld	r20, X+
    5c1a:	44 23       	and	r20, r20
    5c1c:	69 f0       	breq	.+26     	; 0x5c38 <strcasestr+0x2e>
    5c1e:	10 d0       	rcall	.+32     	; 0x5c40 <strcasestr+0x36>
    5c20:	d9 f7       	brne	.-10     	; 0x5c18 <strcasestr+0xe>
    5c22:	cd 01       	movw	r24, r26
    5c24:	01 90       	ld	r0, Z+
    5c26:	00 20       	and	r0, r0
    5c28:	49 f0       	breq	.+18     	; 0x5c3c <strcasestr+0x32>
    5c2a:	4d 91       	ld	r20, X+
    5c2c:	41 11       	cpse	r20, r1
    5c2e:	08 d0       	rcall	.+16     	; 0x5c40 <strcasestr+0x36>
    5c30:	c9 f3       	breq	.-14     	; 0x5c24 <strcasestr+0x1a>
    5c32:	fb 01       	movw	r30, r22
    5c34:	41 11       	cpse	r20, r1
    5c36:	ee cf       	rjmp	.-36     	; 0x5c14 <strcasestr+0xa>
    5c38:	81 e0       	ldi	r24, 0x01	; 1
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	01 97       	sbiw	r24, 0x01	; 1
    5c3e:	08 95       	ret
    5c40:	40 25       	eor	r20, r0
    5c42:	39 f0       	breq	.+14     	; 0x5c52 <strcasestr+0x48>
    5c44:	40 32       	cpi	r20, 0x20	; 32
    5c46:	29 f4       	brne	.+10     	; 0x5c52 <strcasestr+0x48>
    5c48:	40 29       	or	r20, r0
    5c4a:	4b 57       	subi	r20, 0x7B	; 123
    5c4c:	46 5e       	subi	r20, 0xE6	; 230
    5c4e:	08 f0       	brcs	.+2      	; 0x5c52 <strcasestr+0x48>
    5c50:	18 94       	sez
    5c52:	08 95       	ret

00005c54 <strcat>:
    5c54:	fb 01       	movw	r30, r22
    5c56:	dc 01       	movw	r26, r24
    5c58:	0d 90       	ld	r0, X+
    5c5a:	00 20       	and	r0, r0
    5c5c:	e9 f7       	brne	.-6      	; 0x5c58 <strcat+0x4>
    5c5e:	11 97       	sbiw	r26, 0x01	; 1
    5c60:	01 90       	ld	r0, Z+
    5c62:	0d 92       	st	X+, r0
    5c64:	00 20       	and	r0, r0
    5c66:	e1 f7       	brne	.-8      	; 0x5c60 <strcat+0xc>
    5c68:	08 95       	ret

00005c6a <strcpy>:
    5c6a:	fb 01       	movw	r30, r22
    5c6c:	dc 01       	movw	r26, r24
    5c6e:	01 90       	ld	r0, Z+
    5c70:	0d 92       	st	X+, r0
    5c72:	00 20       	and	r0, r0
    5c74:	e1 f7       	brne	.-8      	; 0x5c6e <strcpy+0x4>
    5c76:	08 95       	ret

00005c78 <strncasecmp>:
    5c78:	fb 01       	movw	r30, r22
    5c7a:	dc 01       	movw	r26, r24
    5c7c:	41 50       	subi	r20, 0x01	; 1
    5c7e:	50 40       	sbci	r21, 0x00	; 0
    5c80:	88 f0       	brcs	.+34     	; 0x5ca4 <strncasecmp+0x2c>
    5c82:	8d 91       	ld	r24, X+
    5c84:	81 34       	cpi	r24, 0x41	; 65
    5c86:	1c f0       	brlt	.+6      	; 0x5c8e <strncasecmp+0x16>
    5c88:	8b 35       	cpi	r24, 0x5B	; 91
    5c8a:	0c f4       	brge	.+2      	; 0x5c8e <strncasecmp+0x16>
    5c8c:	80 5e       	subi	r24, 0xE0	; 224
    5c8e:	61 91       	ld	r22, Z+
    5c90:	61 34       	cpi	r22, 0x41	; 65
    5c92:	1c f0       	brlt	.+6      	; 0x5c9a <strncasecmp+0x22>
    5c94:	6b 35       	cpi	r22, 0x5B	; 91
    5c96:	0c f4       	brge	.+2      	; 0x5c9a <strncasecmp+0x22>
    5c98:	60 5e       	subi	r22, 0xE0	; 224
    5c9a:	86 1b       	sub	r24, r22
    5c9c:	61 11       	cpse	r22, r1
    5c9e:	71 f3       	breq	.-36     	; 0x5c7c <strncasecmp+0x4>
    5ca0:	99 0b       	sbc	r25, r25
    5ca2:	08 95       	ret
    5ca4:	88 1b       	sub	r24, r24
    5ca6:	fc cf       	rjmp	.-8      	; 0x5ca0 <strncasecmp+0x28>

00005ca8 <printf>:
    5ca8:	cf 93       	push	r28
    5caa:	df 93       	push	r29
    5cac:	cd b7       	in	r28, 0x3d	; 61
    5cae:	de b7       	in	r29, 0x3e	; 62
    5cb0:	ae 01       	movw	r20, r28
    5cb2:	4a 5f       	subi	r20, 0xFA	; 250
    5cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    5cb6:	fa 01       	movw	r30, r20
    5cb8:	61 91       	ld	r22, Z+
    5cba:	71 91       	ld	r23, Z+
    5cbc:	af 01       	movw	r20, r30
    5cbe:	80 91 82 14 	lds	r24, 0x1482	; 0x801482 <__iob+0x2>
    5cc2:	90 91 83 14 	lds	r25, 0x1483	; 0x801483 <__iob+0x3>
    5cc6:	61 d0       	rcall	.+194    	; 0x5d8a <vfprintf>
    5cc8:	df 91       	pop	r29
    5cca:	cf 91       	pop	r28
    5ccc:	08 95       	ret

00005cce <puts>:
    5cce:	0f 93       	push	r16
    5cd0:	1f 93       	push	r17
    5cd2:	cf 93       	push	r28
    5cd4:	df 93       	push	r29
    5cd6:	e0 91 82 14 	lds	r30, 0x1482	; 0x801482 <__iob+0x2>
    5cda:	f0 91 83 14 	lds	r31, 0x1483	; 0x801483 <__iob+0x3>
    5cde:	23 81       	ldd	r18, Z+3	; 0x03
    5ce0:	21 ff       	sbrs	r18, 1
    5ce2:	1b c0       	rjmp	.+54     	; 0x5d1a <puts+0x4c>
    5ce4:	8c 01       	movw	r16, r24
    5ce6:	d0 e0       	ldi	r29, 0x00	; 0
    5ce8:	c0 e0       	ldi	r28, 0x00	; 0
    5cea:	f8 01       	movw	r30, r16
    5cec:	81 91       	ld	r24, Z+
    5cee:	8f 01       	movw	r16, r30
    5cf0:	60 91 82 14 	lds	r22, 0x1482	; 0x801482 <__iob+0x2>
    5cf4:	70 91 83 14 	lds	r23, 0x1483	; 0x801483 <__iob+0x3>
    5cf8:	db 01       	movw	r26, r22
    5cfa:	18 96       	adiw	r26, 0x08	; 8
    5cfc:	ed 91       	ld	r30, X+
    5cfe:	fc 91       	ld	r31, X
    5d00:	19 97       	sbiw	r26, 0x09	; 9
    5d02:	88 23       	and	r24, r24
    5d04:	31 f0       	breq	.+12     	; 0x5d12 <puts+0x44>
    5d06:	19 95       	eicall
    5d08:	89 2b       	or	r24, r25
    5d0a:	79 f3       	breq	.-34     	; 0x5cea <puts+0x1c>
    5d0c:	df ef       	ldi	r29, 0xFF	; 255
    5d0e:	cf ef       	ldi	r28, 0xFF	; 255
    5d10:	ec cf       	rjmp	.-40     	; 0x5cea <puts+0x1c>
    5d12:	8a e0       	ldi	r24, 0x0A	; 10
    5d14:	19 95       	eicall
    5d16:	89 2b       	or	r24, r25
    5d18:	19 f0       	breq	.+6      	; 0x5d20 <puts+0x52>
    5d1a:	8f ef       	ldi	r24, 0xFF	; 255
    5d1c:	9f ef       	ldi	r25, 0xFF	; 255
    5d1e:	02 c0       	rjmp	.+4      	; 0x5d24 <puts+0x56>
    5d20:	8d 2f       	mov	r24, r29
    5d22:	9c 2f       	mov	r25, r28
    5d24:	df 91       	pop	r29
    5d26:	cf 91       	pop	r28
    5d28:	1f 91       	pop	r17
    5d2a:	0f 91       	pop	r16
    5d2c:	08 95       	ret

00005d2e <sprintf>:
    5d2e:	0f 93       	push	r16
    5d30:	1f 93       	push	r17
    5d32:	cf 93       	push	r28
    5d34:	df 93       	push	r29
    5d36:	cd b7       	in	r28, 0x3d	; 61
    5d38:	de b7       	in	r29, 0x3e	; 62
    5d3a:	2e 97       	sbiw	r28, 0x0e	; 14
    5d3c:	0f b6       	in	r0, 0x3f	; 63
    5d3e:	f8 94       	cli
    5d40:	de bf       	out	0x3e, r29	; 62
    5d42:	0f be       	out	0x3f, r0	; 63
    5d44:	cd bf       	out	0x3d, r28	; 61
    5d46:	0e 89       	ldd	r16, Y+22	; 0x16
    5d48:	1f 89       	ldd	r17, Y+23	; 0x17
    5d4a:	86 e0       	ldi	r24, 0x06	; 6
    5d4c:	8c 83       	std	Y+4, r24	; 0x04
    5d4e:	1a 83       	std	Y+2, r17	; 0x02
    5d50:	09 83       	std	Y+1, r16	; 0x01
    5d52:	8f ef       	ldi	r24, 0xFF	; 255
    5d54:	9f e7       	ldi	r25, 0x7F	; 127
    5d56:	9e 83       	std	Y+6, r25	; 0x06
    5d58:	8d 83       	std	Y+5, r24	; 0x05
    5d5a:	ae 01       	movw	r20, r28
    5d5c:	46 5e       	subi	r20, 0xE6	; 230
    5d5e:	5f 4f       	sbci	r21, 0xFF	; 255
    5d60:	68 8d       	ldd	r22, Y+24	; 0x18
    5d62:	79 8d       	ldd	r23, Y+25	; 0x19
    5d64:	ce 01       	movw	r24, r28
    5d66:	01 96       	adiw	r24, 0x01	; 1
    5d68:	10 d0       	rcall	.+32     	; 0x5d8a <vfprintf>
    5d6a:	ef 81       	ldd	r30, Y+7	; 0x07
    5d6c:	f8 85       	ldd	r31, Y+8	; 0x08
    5d6e:	e0 0f       	add	r30, r16
    5d70:	f1 1f       	adc	r31, r17
    5d72:	10 82       	st	Z, r1
    5d74:	2e 96       	adiw	r28, 0x0e	; 14
    5d76:	0f b6       	in	r0, 0x3f	; 63
    5d78:	f8 94       	cli
    5d7a:	de bf       	out	0x3e, r29	; 62
    5d7c:	0f be       	out	0x3f, r0	; 63
    5d7e:	cd bf       	out	0x3d, r28	; 61
    5d80:	df 91       	pop	r29
    5d82:	cf 91       	pop	r28
    5d84:	1f 91       	pop	r17
    5d86:	0f 91       	pop	r16
    5d88:	08 95       	ret

00005d8a <vfprintf>:
    5d8a:	2f 92       	push	r2
    5d8c:	3f 92       	push	r3
    5d8e:	4f 92       	push	r4
    5d90:	5f 92       	push	r5
    5d92:	6f 92       	push	r6
    5d94:	7f 92       	push	r7
    5d96:	8f 92       	push	r8
    5d98:	9f 92       	push	r9
    5d9a:	af 92       	push	r10
    5d9c:	bf 92       	push	r11
    5d9e:	cf 92       	push	r12
    5da0:	df 92       	push	r13
    5da2:	ef 92       	push	r14
    5da4:	ff 92       	push	r15
    5da6:	0f 93       	push	r16
    5da8:	1f 93       	push	r17
    5daa:	cf 93       	push	r28
    5dac:	df 93       	push	r29
    5dae:	cd b7       	in	r28, 0x3d	; 61
    5db0:	de b7       	in	r29, 0x3e	; 62
    5db2:	2b 97       	sbiw	r28, 0x0b	; 11
    5db4:	0f b6       	in	r0, 0x3f	; 63
    5db6:	f8 94       	cli
    5db8:	de bf       	out	0x3e, r29	; 62
    5dba:	0f be       	out	0x3f, r0	; 63
    5dbc:	cd bf       	out	0x3d, r28	; 61
    5dbe:	6c 01       	movw	r12, r24
    5dc0:	7b 01       	movw	r14, r22
    5dc2:	8a 01       	movw	r16, r20
    5dc4:	fc 01       	movw	r30, r24
    5dc6:	17 82       	std	Z+7, r1	; 0x07
    5dc8:	16 82       	std	Z+6, r1	; 0x06
    5dca:	83 81       	ldd	r24, Z+3	; 0x03
    5dcc:	81 ff       	sbrs	r24, 1
    5dce:	bf c1       	rjmp	.+894    	; 0x614e <vfprintf+0x3c4>
    5dd0:	ce 01       	movw	r24, r28
    5dd2:	01 96       	adiw	r24, 0x01	; 1
    5dd4:	3c 01       	movw	r6, r24
    5dd6:	f6 01       	movw	r30, r12
    5dd8:	93 81       	ldd	r25, Z+3	; 0x03
    5dda:	f7 01       	movw	r30, r14
    5ddc:	93 fd       	sbrc	r25, 3
    5dde:	85 91       	lpm	r24, Z+
    5de0:	93 ff       	sbrs	r25, 3
    5de2:	81 91       	ld	r24, Z+
    5de4:	7f 01       	movw	r14, r30
    5de6:	88 23       	and	r24, r24
    5de8:	09 f4       	brne	.+2      	; 0x5dec <vfprintf+0x62>
    5dea:	ad c1       	rjmp	.+858    	; 0x6146 <vfprintf+0x3bc>
    5dec:	85 32       	cpi	r24, 0x25	; 37
    5dee:	39 f4       	brne	.+14     	; 0x5dfe <vfprintf+0x74>
    5df0:	93 fd       	sbrc	r25, 3
    5df2:	85 91       	lpm	r24, Z+
    5df4:	93 ff       	sbrs	r25, 3
    5df6:	81 91       	ld	r24, Z+
    5df8:	7f 01       	movw	r14, r30
    5dfa:	85 32       	cpi	r24, 0x25	; 37
    5dfc:	21 f4       	brne	.+8      	; 0x5e06 <vfprintf+0x7c>
    5dfe:	b6 01       	movw	r22, r12
    5e00:	90 e0       	ldi	r25, 0x00	; 0
    5e02:	d6 d1       	rcall	.+940    	; 0x61b0 <fputc>
    5e04:	e8 cf       	rjmp	.-48     	; 0x5dd6 <vfprintf+0x4c>
    5e06:	91 2c       	mov	r9, r1
    5e08:	21 2c       	mov	r2, r1
    5e0a:	31 2c       	mov	r3, r1
    5e0c:	ff e1       	ldi	r31, 0x1F	; 31
    5e0e:	f3 15       	cp	r31, r3
    5e10:	d8 f0       	brcs	.+54     	; 0x5e48 <vfprintf+0xbe>
    5e12:	8b 32       	cpi	r24, 0x2B	; 43
    5e14:	79 f0       	breq	.+30     	; 0x5e34 <vfprintf+0xaa>
    5e16:	38 f4       	brcc	.+14     	; 0x5e26 <vfprintf+0x9c>
    5e18:	80 32       	cpi	r24, 0x20	; 32
    5e1a:	79 f0       	breq	.+30     	; 0x5e3a <vfprintf+0xb0>
    5e1c:	83 32       	cpi	r24, 0x23	; 35
    5e1e:	a1 f4       	brne	.+40     	; 0x5e48 <vfprintf+0xbe>
    5e20:	23 2d       	mov	r18, r3
    5e22:	20 61       	ori	r18, 0x10	; 16
    5e24:	1d c0       	rjmp	.+58     	; 0x5e60 <vfprintf+0xd6>
    5e26:	8d 32       	cpi	r24, 0x2D	; 45
    5e28:	61 f0       	breq	.+24     	; 0x5e42 <vfprintf+0xb8>
    5e2a:	80 33       	cpi	r24, 0x30	; 48
    5e2c:	69 f4       	brne	.+26     	; 0x5e48 <vfprintf+0xbe>
    5e2e:	23 2d       	mov	r18, r3
    5e30:	21 60       	ori	r18, 0x01	; 1
    5e32:	16 c0       	rjmp	.+44     	; 0x5e60 <vfprintf+0xd6>
    5e34:	83 2d       	mov	r24, r3
    5e36:	82 60       	ori	r24, 0x02	; 2
    5e38:	38 2e       	mov	r3, r24
    5e3a:	e3 2d       	mov	r30, r3
    5e3c:	e4 60       	ori	r30, 0x04	; 4
    5e3e:	3e 2e       	mov	r3, r30
    5e40:	2a c0       	rjmp	.+84     	; 0x5e96 <vfprintf+0x10c>
    5e42:	f3 2d       	mov	r31, r3
    5e44:	f8 60       	ori	r31, 0x08	; 8
    5e46:	1d c0       	rjmp	.+58     	; 0x5e82 <vfprintf+0xf8>
    5e48:	37 fc       	sbrc	r3, 7
    5e4a:	2d c0       	rjmp	.+90     	; 0x5ea6 <vfprintf+0x11c>
    5e4c:	20 ed       	ldi	r18, 0xD0	; 208
    5e4e:	28 0f       	add	r18, r24
    5e50:	2a 30       	cpi	r18, 0x0A	; 10
    5e52:	40 f0       	brcs	.+16     	; 0x5e64 <vfprintf+0xda>
    5e54:	8e 32       	cpi	r24, 0x2E	; 46
    5e56:	b9 f4       	brne	.+46     	; 0x5e86 <vfprintf+0xfc>
    5e58:	36 fc       	sbrc	r3, 6
    5e5a:	75 c1       	rjmp	.+746    	; 0x6146 <vfprintf+0x3bc>
    5e5c:	23 2d       	mov	r18, r3
    5e5e:	20 64       	ori	r18, 0x40	; 64
    5e60:	32 2e       	mov	r3, r18
    5e62:	19 c0       	rjmp	.+50     	; 0x5e96 <vfprintf+0x10c>
    5e64:	36 fe       	sbrs	r3, 6
    5e66:	06 c0       	rjmp	.+12     	; 0x5e74 <vfprintf+0xea>
    5e68:	8a e0       	ldi	r24, 0x0A	; 10
    5e6a:	98 9e       	mul	r9, r24
    5e6c:	20 0d       	add	r18, r0
    5e6e:	11 24       	eor	r1, r1
    5e70:	92 2e       	mov	r9, r18
    5e72:	11 c0       	rjmp	.+34     	; 0x5e96 <vfprintf+0x10c>
    5e74:	ea e0       	ldi	r30, 0x0A	; 10
    5e76:	2e 9e       	mul	r2, r30
    5e78:	20 0d       	add	r18, r0
    5e7a:	11 24       	eor	r1, r1
    5e7c:	22 2e       	mov	r2, r18
    5e7e:	f3 2d       	mov	r31, r3
    5e80:	f0 62       	ori	r31, 0x20	; 32
    5e82:	3f 2e       	mov	r3, r31
    5e84:	08 c0       	rjmp	.+16     	; 0x5e96 <vfprintf+0x10c>
    5e86:	8c 36       	cpi	r24, 0x6C	; 108
    5e88:	21 f4       	brne	.+8      	; 0x5e92 <vfprintf+0x108>
    5e8a:	83 2d       	mov	r24, r3
    5e8c:	80 68       	ori	r24, 0x80	; 128
    5e8e:	38 2e       	mov	r3, r24
    5e90:	02 c0       	rjmp	.+4      	; 0x5e96 <vfprintf+0x10c>
    5e92:	88 36       	cpi	r24, 0x68	; 104
    5e94:	41 f4       	brne	.+16     	; 0x5ea6 <vfprintf+0x11c>
    5e96:	f7 01       	movw	r30, r14
    5e98:	93 fd       	sbrc	r25, 3
    5e9a:	85 91       	lpm	r24, Z+
    5e9c:	93 ff       	sbrs	r25, 3
    5e9e:	81 91       	ld	r24, Z+
    5ea0:	7f 01       	movw	r14, r30
    5ea2:	81 11       	cpse	r24, r1
    5ea4:	b3 cf       	rjmp	.-154    	; 0x5e0c <vfprintf+0x82>
    5ea6:	98 2f       	mov	r25, r24
    5ea8:	9f 7d       	andi	r25, 0xDF	; 223
    5eaa:	95 54       	subi	r25, 0x45	; 69
    5eac:	93 30       	cpi	r25, 0x03	; 3
    5eae:	28 f4       	brcc	.+10     	; 0x5eba <vfprintf+0x130>
    5eb0:	0c 5f       	subi	r16, 0xFC	; 252
    5eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    5eb4:	9f e3       	ldi	r25, 0x3F	; 63
    5eb6:	99 83       	std	Y+1, r25	; 0x01
    5eb8:	0d c0       	rjmp	.+26     	; 0x5ed4 <vfprintf+0x14a>
    5eba:	83 36       	cpi	r24, 0x63	; 99
    5ebc:	31 f0       	breq	.+12     	; 0x5eca <vfprintf+0x140>
    5ebe:	83 37       	cpi	r24, 0x73	; 115
    5ec0:	71 f0       	breq	.+28     	; 0x5ede <vfprintf+0x154>
    5ec2:	83 35       	cpi	r24, 0x53	; 83
    5ec4:	09 f0       	breq	.+2      	; 0x5ec8 <vfprintf+0x13e>
    5ec6:	55 c0       	rjmp	.+170    	; 0x5f72 <vfprintf+0x1e8>
    5ec8:	20 c0       	rjmp	.+64     	; 0x5f0a <vfprintf+0x180>
    5eca:	f8 01       	movw	r30, r16
    5ecc:	80 81       	ld	r24, Z
    5ece:	89 83       	std	Y+1, r24	; 0x01
    5ed0:	0e 5f       	subi	r16, 0xFE	; 254
    5ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ed4:	88 24       	eor	r8, r8
    5ed6:	83 94       	inc	r8
    5ed8:	91 2c       	mov	r9, r1
    5eda:	53 01       	movw	r10, r6
    5edc:	12 c0       	rjmp	.+36     	; 0x5f02 <vfprintf+0x178>
    5ede:	28 01       	movw	r4, r16
    5ee0:	f2 e0       	ldi	r31, 0x02	; 2
    5ee2:	4f 0e       	add	r4, r31
    5ee4:	51 1c       	adc	r5, r1
    5ee6:	f8 01       	movw	r30, r16
    5ee8:	a0 80       	ld	r10, Z
    5eea:	b1 80       	ldd	r11, Z+1	; 0x01
    5eec:	36 fe       	sbrs	r3, 6
    5eee:	03 c0       	rjmp	.+6      	; 0x5ef6 <vfprintf+0x16c>
    5ef0:	69 2d       	mov	r22, r9
    5ef2:	70 e0       	ldi	r23, 0x00	; 0
    5ef4:	02 c0       	rjmp	.+4      	; 0x5efa <vfprintf+0x170>
    5ef6:	6f ef       	ldi	r22, 0xFF	; 255
    5ef8:	7f ef       	ldi	r23, 0xFF	; 255
    5efa:	c5 01       	movw	r24, r10
    5efc:	4e d1       	rcall	.+668    	; 0x619a <strnlen>
    5efe:	4c 01       	movw	r8, r24
    5f00:	82 01       	movw	r16, r4
    5f02:	f3 2d       	mov	r31, r3
    5f04:	ff 77       	andi	r31, 0x7F	; 127
    5f06:	3f 2e       	mov	r3, r31
    5f08:	15 c0       	rjmp	.+42     	; 0x5f34 <vfprintf+0x1aa>
    5f0a:	28 01       	movw	r4, r16
    5f0c:	22 e0       	ldi	r18, 0x02	; 2
    5f0e:	42 0e       	add	r4, r18
    5f10:	51 1c       	adc	r5, r1
    5f12:	f8 01       	movw	r30, r16
    5f14:	a0 80       	ld	r10, Z
    5f16:	b1 80       	ldd	r11, Z+1	; 0x01
    5f18:	36 fe       	sbrs	r3, 6
    5f1a:	03 c0       	rjmp	.+6      	; 0x5f22 <vfprintf+0x198>
    5f1c:	69 2d       	mov	r22, r9
    5f1e:	70 e0       	ldi	r23, 0x00	; 0
    5f20:	02 c0       	rjmp	.+4      	; 0x5f26 <vfprintf+0x19c>
    5f22:	6f ef       	ldi	r22, 0xFF	; 255
    5f24:	7f ef       	ldi	r23, 0xFF	; 255
    5f26:	c5 01       	movw	r24, r10
    5f28:	2d d1       	rcall	.+602    	; 0x6184 <strnlen_P>
    5f2a:	4c 01       	movw	r8, r24
    5f2c:	f3 2d       	mov	r31, r3
    5f2e:	f0 68       	ori	r31, 0x80	; 128
    5f30:	3f 2e       	mov	r3, r31
    5f32:	82 01       	movw	r16, r4
    5f34:	33 fc       	sbrc	r3, 3
    5f36:	19 c0       	rjmp	.+50     	; 0x5f6a <vfprintf+0x1e0>
    5f38:	82 2d       	mov	r24, r2
    5f3a:	90 e0       	ldi	r25, 0x00	; 0
    5f3c:	88 16       	cp	r8, r24
    5f3e:	99 06       	cpc	r9, r25
    5f40:	a0 f4       	brcc	.+40     	; 0x5f6a <vfprintf+0x1e0>
    5f42:	b6 01       	movw	r22, r12
    5f44:	80 e2       	ldi	r24, 0x20	; 32
    5f46:	90 e0       	ldi	r25, 0x00	; 0
    5f48:	33 d1       	rcall	.+614    	; 0x61b0 <fputc>
    5f4a:	2a 94       	dec	r2
    5f4c:	f5 cf       	rjmp	.-22     	; 0x5f38 <vfprintf+0x1ae>
    5f4e:	f5 01       	movw	r30, r10
    5f50:	37 fc       	sbrc	r3, 7
    5f52:	85 91       	lpm	r24, Z+
    5f54:	37 fe       	sbrs	r3, 7
    5f56:	81 91       	ld	r24, Z+
    5f58:	5f 01       	movw	r10, r30
    5f5a:	b6 01       	movw	r22, r12
    5f5c:	90 e0       	ldi	r25, 0x00	; 0
    5f5e:	28 d1       	rcall	.+592    	; 0x61b0 <fputc>
    5f60:	21 10       	cpse	r2, r1
    5f62:	2a 94       	dec	r2
    5f64:	21 e0       	ldi	r18, 0x01	; 1
    5f66:	82 1a       	sub	r8, r18
    5f68:	91 08       	sbc	r9, r1
    5f6a:	81 14       	cp	r8, r1
    5f6c:	91 04       	cpc	r9, r1
    5f6e:	79 f7       	brne	.-34     	; 0x5f4e <vfprintf+0x1c4>
    5f70:	e1 c0       	rjmp	.+450    	; 0x6134 <vfprintf+0x3aa>
    5f72:	84 36       	cpi	r24, 0x64	; 100
    5f74:	11 f0       	breq	.+4      	; 0x5f7a <vfprintf+0x1f0>
    5f76:	89 36       	cpi	r24, 0x69	; 105
    5f78:	39 f5       	brne	.+78     	; 0x5fc8 <vfprintf+0x23e>
    5f7a:	f8 01       	movw	r30, r16
    5f7c:	37 fe       	sbrs	r3, 7
    5f7e:	07 c0       	rjmp	.+14     	; 0x5f8e <vfprintf+0x204>
    5f80:	60 81       	ld	r22, Z
    5f82:	71 81       	ldd	r23, Z+1	; 0x01
    5f84:	82 81       	ldd	r24, Z+2	; 0x02
    5f86:	93 81       	ldd	r25, Z+3	; 0x03
    5f88:	0c 5f       	subi	r16, 0xFC	; 252
    5f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    5f8c:	08 c0       	rjmp	.+16     	; 0x5f9e <vfprintf+0x214>
    5f8e:	60 81       	ld	r22, Z
    5f90:	71 81       	ldd	r23, Z+1	; 0x01
    5f92:	07 2e       	mov	r0, r23
    5f94:	00 0c       	add	r0, r0
    5f96:	88 0b       	sbc	r24, r24
    5f98:	99 0b       	sbc	r25, r25
    5f9a:	0e 5f       	subi	r16, 0xFE	; 254
    5f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    5f9e:	f3 2d       	mov	r31, r3
    5fa0:	ff 76       	andi	r31, 0x6F	; 111
    5fa2:	3f 2e       	mov	r3, r31
    5fa4:	97 ff       	sbrs	r25, 7
    5fa6:	09 c0       	rjmp	.+18     	; 0x5fba <vfprintf+0x230>
    5fa8:	90 95       	com	r25
    5faa:	80 95       	com	r24
    5fac:	70 95       	com	r23
    5fae:	61 95       	neg	r22
    5fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    5fb2:	8f 4f       	sbci	r24, 0xFF	; 255
    5fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    5fb6:	f0 68       	ori	r31, 0x80	; 128
    5fb8:	3f 2e       	mov	r3, r31
    5fba:	2a e0       	ldi	r18, 0x0A	; 10
    5fbc:	30 e0       	ldi	r19, 0x00	; 0
    5fbe:	a3 01       	movw	r20, r6
    5fc0:	33 d1       	rcall	.+614    	; 0x6228 <__ultoa_invert>
    5fc2:	88 2e       	mov	r8, r24
    5fc4:	86 18       	sub	r8, r6
    5fc6:	44 c0       	rjmp	.+136    	; 0x6050 <vfprintf+0x2c6>
    5fc8:	85 37       	cpi	r24, 0x75	; 117
    5fca:	31 f4       	brne	.+12     	; 0x5fd8 <vfprintf+0x24e>
    5fcc:	23 2d       	mov	r18, r3
    5fce:	2f 7e       	andi	r18, 0xEF	; 239
    5fd0:	b2 2e       	mov	r11, r18
    5fd2:	2a e0       	ldi	r18, 0x0A	; 10
    5fd4:	30 e0       	ldi	r19, 0x00	; 0
    5fd6:	25 c0       	rjmp	.+74     	; 0x6022 <vfprintf+0x298>
    5fd8:	93 2d       	mov	r25, r3
    5fda:	99 7f       	andi	r25, 0xF9	; 249
    5fdc:	b9 2e       	mov	r11, r25
    5fde:	8f 36       	cpi	r24, 0x6F	; 111
    5fe0:	c1 f0       	breq	.+48     	; 0x6012 <vfprintf+0x288>
    5fe2:	18 f4       	brcc	.+6      	; 0x5fea <vfprintf+0x260>
    5fe4:	88 35       	cpi	r24, 0x58	; 88
    5fe6:	79 f0       	breq	.+30     	; 0x6006 <vfprintf+0x27c>
    5fe8:	ae c0       	rjmp	.+348    	; 0x6146 <vfprintf+0x3bc>
    5fea:	80 37       	cpi	r24, 0x70	; 112
    5fec:	19 f0       	breq	.+6      	; 0x5ff4 <vfprintf+0x26a>
    5fee:	88 37       	cpi	r24, 0x78	; 120
    5ff0:	21 f0       	breq	.+8      	; 0x5ffa <vfprintf+0x270>
    5ff2:	a9 c0       	rjmp	.+338    	; 0x6146 <vfprintf+0x3bc>
    5ff4:	e9 2f       	mov	r30, r25
    5ff6:	e0 61       	ori	r30, 0x10	; 16
    5ff8:	be 2e       	mov	r11, r30
    5ffa:	b4 fe       	sbrs	r11, 4
    5ffc:	0d c0       	rjmp	.+26     	; 0x6018 <vfprintf+0x28e>
    5ffe:	fb 2d       	mov	r31, r11
    6000:	f4 60       	ori	r31, 0x04	; 4
    6002:	bf 2e       	mov	r11, r31
    6004:	09 c0       	rjmp	.+18     	; 0x6018 <vfprintf+0x28e>
    6006:	34 fe       	sbrs	r3, 4
    6008:	0a c0       	rjmp	.+20     	; 0x601e <vfprintf+0x294>
    600a:	29 2f       	mov	r18, r25
    600c:	26 60       	ori	r18, 0x06	; 6
    600e:	b2 2e       	mov	r11, r18
    6010:	06 c0       	rjmp	.+12     	; 0x601e <vfprintf+0x294>
    6012:	28 e0       	ldi	r18, 0x08	; 8
    6014:	30 e0       	ldi	r19, 0x00	; 0
    6016:	05 c0       	rjmp	.+10     	; 0x6022 <vfprintf+0x298>
    6018:	20 e1       	ldi	r18, 0x10	; 16
    601a:	30 e0       	ldi	r19, 0x00	; 0
    601c:	02 c0       	rjmp	.+4      	; 0x6022 <vfprintf+0x298>
    601e:	20 e1       	ldi	r18, 0x10	; 16
    6020:	32 e0       	ldi	r19, 0x02	; 2
    6022:	f8 01       	movw	r30, r16
    6024:	b7 fe       	sbrs	r11, 7
    6026:	07 c0       	rjmp	.+14     	; 0x6036 <vfprintf+0x2ac>
    6028:	60 81       	ld	r22, Z
    602a:	71 81       	ldd	r23, Z+1	; 0x01
    602c:	82 81       	ldd	r24, Z+2	; 0x02
    602e:	93 81       	ldd	r25, Z+3	; 0x03
    6030:	0c 5f       	subi	r16, 0xFC	; 252
    6032:	1f 4f       	sbci	r17, 0xFF	; 255
    6034:	06 c0       	rjmp	.+12     	; 0x6042 <vfprintf+0x2b8>
    6036:	60 81       	ld	r22, Z
    6038:	71 81       	ldd	r23, Z+1	; 0x01
    603a:	80 e0       	ldi	r24, 0x00	; 0
    603c:	90 e0       	ldi	r25, 0x00	; 0
    603e:	0e 5f       	subi	r16, 0xFE	; 254
    6040:	1f 4f       	sbci	r17, 0xFF	; 255
    6042:	a3 01       	movw	r20, r6
    6044:	f1 d0       	rcall	.+482    	; 0x6228 <__ultoa_invert>
    6046:	88 2e       	mov	r8, r24
    6048:	86 18       	sub	r8, r6
    604a:	fb 2d       	mov	r31, r11
    604c:	ff 77       	andi	r31, 0x7F	; 127
    604e:	3f 2e       	mov	r3, r31
    6050:	36 fe       	sbrs	r3, 6
    6052:	0d c0       	rjmp	.+26     	; 0x606e <vfprintf+0x2e4>
    6054:	23 2d       	mov	r18, r3
    6056:	2e 7f       	andi	r18, 0xFE	; 254
    6058:	a2 2e       	mov	r10, r18
    605a:	89 14       	cp	r8, r9
    605c:	58 f4       	brcc	.+22     	; 0x6074 <vfprintf+0x2ea>
    605e:	34 fe       	sbrs	r3, 4
    6060:	0b c0       	rjmp	.+22     	; 0x6078 <vfprintf+0x2ee>
    6062:	32 fc       	sbrc	r3, 2
    6064:	09 c0       	rjmp	.+18     	; 0x6078 <vfprintf+0x2ee>
    6066:	83 2d       	mov	r24, r3
    6068:	8e 7e       	andi	r24, 0xEE	; 238
    606a:	a8 2e       	mov	r10, r24
    606c:	05 c0       	rjmp	.+10     	; 0x6078 <vfprintf+0x2ee>
    606e:	b8 2c       	mov	r11, r8
    6070:	a3 2c       	mov	r10, r3
    6072:	03 c0       	rjmp	.+6      	; 0x607a <vfprintf+0x2f0>
    6074:	b8 2c       	mov	r11, r8
    6076:	01 c0       	rjmp	.+2      	; 0x607a <vfprintf+0x2f0>
    6078:	b9 2c       	mov	r11, r9
    607a:	a4 fe       	sbrs	r10, 4
    607c:	0f c0       	rjmp	.+30     	; 0x609c <vfprintf+0x312>
    607e:	fe 01       	movw	r30, r28
    6080:	e8 0d       	add	r30, r8
    6082:	f1 1d       	adc	r31, r1
    6084:	80 81       	ld	r24, Z
    6086:	80 33       	cpi	r24, 0x30	; 48
    6088:	21 f4       	brne	.+8      	; 0x6092 <vfprintf+0x308>
    608a:	9a 2d       	mov	r25, r10
    608c:	99 7e       	andi	r25, 0xE9	; 233
    608e:	a9 2e       	mov	r10, r25
    6090:	09 c0       	rjmp	.+18     	; 0x60a4 <vfprintf+0x31a>
    6092:	a2 fe       	sbrs	r10, 2
    6094:	06 c0       	rjmp	.+12     	; 0x60a2 <vfprintf+0x318>
    6096:	b3 94       	inc	r11
    6098:	b3 94       	inc	r11
    609a:	04 c0       	rjmp	.+8      	; 0x60a4 <vfprintf+0x31a>
    609c:	8a 2d       	mov	r24, r10
    609e:	86 78       	andi	r24, 0x86	; 134
    60a0:	09 f0       	breq	.+2      	; 0x60a4 <vfprintf+0x31a>
    60a2:	b3 94       	inc	r11
    60a4:	a3 fc       	sbrc	r10, 3
    60a6:	10 c0       	rjmp	.+32     	; 0x60c8 <vfprintf+0x33e>
    60a8:	a0 fe       	sbrs	r10, 0
    60aa:	06 c0       	rjmp	.+12     	; 0x60b8 <vfprintf+0x32e>
    60ac:	b2 14       	cp	r11, r2
    60ae:	80 f4       	brcc	.+32     	; 0x60d0 <vfprintf+0x346>
    60b0:	28 0c       	add	r2, r8
    60b2:	92 2c       	mov	r9, r2
    60b4:	9b 18       	sub	r9, r11
    60b6:	0d c0       	rjmp	.+26     	; 0x60d2 <vfprintf+0x348>
    60b8:	b2 14       	cp	r11, r2
    60ba:	58 f4       	brcc	.+22     	; 0x60d2 <vfprintf+0x348>
    60bc:	b6 01       	movw	r22, r12
    60be:	80 e2       	ldi	r24, 0x20	; 32
    60c0:	90 e0       	ldi	r25, 0x00	; 0
    60c2:	76 d0       	rcall	.+236    	; 0x61b0 <fputc>
    60c4:	b3 94       	inc	r11
    60c6:	f8 cf       	rjmp	.-16     	; 0x60b8 <vfprintf+0x32e>
    60c8:	b2 14       	cp	r11, r2
    60ca:	18 f4       	brcc	.+6      	; 0x60d2 <vfprintf+0x348>
    60cc:	2b 18       	sub	r2, r11
    60ce:	02 c0       	rjmp	.+4      	; 0x60d4 <vfprintf+0x34a>
    60d0:	98 2c       	mov	r9, r8
    60d2:	21 2c       	mov	r2, r1
    60d4:	a4 fe       	sbrs	r10, 4
    60d6:	0f c0       	rjmp	.+30     	; 0x60f6 <vfprintf+0x36c>
    60d8:	b6 01       	movw	r22, r12
    60da:	80 e3       	ldi	r24, 0x30	; 48
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	68 d0       	rcall	.+208    	; 0x61b0 <fputc>
    60e0:	a2 fe       	sbrs	r10, 2
    60e2:	16 c0       	rjmp	.+44     	; 0x6110 <vfprintf+0x386>
    60e4:	a1 fc       	sbrc	r10, 1
    60e6:	03 c0       	rjmp	.+6      	; 0x60ee <vfprintf+0x364>
    60e8:	88 e7       	ldi	r24, 0x78	; 120
    60ea:	90 e0       	ldi	r25, 0x00	; 0
    60ec:	02 c0       	rjmp	.+4      	; 0x60f2 <vfprintf+0x368>
    60ee:	88 e5       	ldi	r24, 0x58	; 88
    60f0:	90 e0       	ldi	r25, 0x00	; 0
    60f2:	b6 01       	movw	r22, r12
    60f4:	0c c0       	rjmp	.+24     	; 0x610e <vfprintf+0x384>
    60f6:	8a 2d       	mov	r24, r10
    60f8:	86 78       	andi	r24, 0x86	; 134
    60fa:	51 f0       	breq	.+20     	; 0x6110 <vfprintf+0x386>
    60fc:	a1 fe       	sbrs	r10, 1
    60fe:	02 c0       	rjmp	.+4      	; 0x6104 <vfprintf+0x37a>
    6100:	8b e2       	ldi	r24, 0x2B	; 43
    6102:	01 c0       	rjmp	.+2      	; 0x6106 <vfprintf+0x37c>
    6104:	80 e2       	ldi	r24, 0x20	; 32
    6106:	a7 fc       	sbrc	r10, 7
    6108:	8d e2       	ldi	r24, 0x2D	; 45
    610a:	b6 01       	movw	r22, r12
    610c:	90 e0       	ldi	r25, 0x00	; 0
    610e:	50 d0       	rcall	.+160    	; 0x61b0 <fputc>
    6110:	89 14       	cp	r8, r9
    6112:	30 f4       	brcc	.+12     	; 0x6120 <vfprintf+0x396>
    6114:	b6 01       	movw	r22, r12
    6116:	80 e3       	ldi	r24, 0x30	; 48
    6118:	90 e0       	ldi	r25, 0x00	; 0
    611a:	4a d0       	rcall	.+148    	; 0x61b0 <fputc>
    611c:	9a 94       	dec	r9
    611e:	f8 cf       	rjmp	.-16     	; 0x6110 <vfprintf+0x386>
    6120:	8a 94       	dec	r8
    6122:	f3 01       	movw	r30, r6
    6124:	e8 0d       	add	r30, r8
    6126:	f1 1d       	adc	r31, r1
    6128:	80 81       	ld	r24, Z
    612a:	b6 01       	movw	r22, r12
    612c:	90 e0       	ldi	r25, 0x00	; 0
    612e:	40 d0       	rcall	.+128    	; 0x61b0 <fputc>
    6130:	81 10       	cpse	r8, r1
    6132:	f6 cf       	rjmp	.-20     	; 0x6120 <vfprintf+0x396>
    6134:	22 20       	and	r2, r2
    6136:	09 f4       	brne	.+2      	; 0x613a <vfprintf+0x3b0>
    6138:	4e ce       	rjmp	.-868    	; 0x5dd6 <vfprintf+0x4c>
    613a:	b6 01       	movw	r22, r12
    613c:	80 e2       	ldi	r24, 0x20	; 32
    613e:	90 e0       	ldi	r25, 0x00	; 0
    6140:	37 d0       	rcall	.+110    	; 0x61b0 <fputc>
    6142:	2a 94       	dec	r2
    6144:	f7 cf       	rjmp	.-18     	; 0x6134 <vfprintf+0x3aa>
    6146:	f6 01       	movw	r30, r12
    6148:	86 81       	ldd	r24, Z+6	; 0x06
    614a:	97 81       	ldd	r25, Z+7	; 0x07
    614c:	02 c0       	rjmp	.+4      	; 0x6152 <vfprintf+0x3c8>
    614e:	8f ef       	ldi	r24, 0xFF	; 255
    6150:	9f ef       	ldi	r25, 0xFF	; 255
    6152:	2b 96       	adiw	r28, 0x0b	; 11
    6154:	0f b6       	in	r0, 0x3f	; 63
    6156:	f8 94       	cli
    6158:	de bf       	out	0x3e, r29	; 62
    615a:	0f be       	out	0x3f, r0	; 63
    615c:	cd bf       	out	0x3d, r28	; 61
    615e:	df 91       	pop	r29
    6160:	cf 91       	pop	r28
    6162:	1f 91       	pop	r17
    6164:	0f 91       	pop	r16
    6166:	ff 90       	pop	r15
    6168:	ef 90       	pop	r14
    616a:	df 90       	pop	r13
    616c:	cf 90       	pop	r12
    616e:	bf 90       	pop	r11
    6170:	af 90       	pop	r10
    6172:	9f 90       	pop	r9
    6174:	8f 90       	pop	r8
    6176:	7f 90       	pop	r7
    6178:	6f 90       	pop	r6
    617a:	5f 90       	pop	r5
    617c:	4f 90       	pop	r4
    617e:	3f 90       	pop	r3
    6180:	2f 90       	pop	r2
    6182:	08 95       	ret

00006184 <strnlen_P>:
    6184:	fc 01       	movw	r30, r24
    6186:	05 90       	lpm	r0, Z+
    6188:	61 50       	subi	r22, 0x01	; 1
    618a:	70 40       	sbci	r23, 0x00	; 0
    618c:	01 10       	cpse	r0, r1
    618e:	d8 f7       	brcc	.-10     	; 0x6186 <strnlen_P+0x2>
    6190:	80 95       	com	r24
    6192:	90 95       	com	r25
    6194:	8e 0f       	add	r24, r30
    6196:	9f 1f       	adc	r25, r31
    6198:	08 95       	ret

0000619a <strnlen>:
    619a:	fc 01       	movw	r30, r24
    619c:	61 50       	subi	r22, 0x01	; 1
    619e:	70 40       	sbci	r23, 0x00	; 0
    61a0:	01 90       	ld	r0, Z+
    61a2:	01 10       	cpse	r0, r1
    61a4:	d8 f7       	brcc	.-10     	; 0x619c <strnlen+0x2>
    61a6:	80 95       	com	r24
    61a8:	90 95       	com	r25
    61aa:	8e 0f       	add	r24, r30
    61ac:	9f 1f       	adc	r25, r31
    61ae:	08 95       	ret

000061b0 <fputc>:
    61b0:	0f 93       	push	r16
    61b2:	1f 93       	push	r17
    61b4:	cf 93       	push	r28
    61b6:	df 93       	push	r29
    61b8:	fb 01       	movw	r30, r22
    61ba:	23 81       	ldd	r18, Z+3	; 0x03
    61bc:	21 fd       	sbrc	r18, 1
    61be:	03 c0       	rjmp	.+6      	; 0x61c6 <fputc+0x16>
    61c0:	8f ef       	ldi	r24, 0xFF	; 255
    61c2:	9f ef       	ldi	r25, 0xFF	; 255
    61c4:	2c c0       	rjmp	.+88     	; 0x621e <fputc+0x6e>
    61c6:	22 ff       	sbrs	r18, 2
    61c8:	16 c0       	rjmp	.+44     	; 0x61f6 <fputc+0x46>
    61ca:	46 81       	ldd	r20, Z+6	; 0x06
    61cc:	57 81       	ldd	r21, Z+7	; 0x07
    61ce:	24 81       	ldd	r18, Z+4	; 0x04
    61d0:	35 81       	ldd	r19, Z+5	; 0x05
    61d2:	42 17       	cp	r20, r18
    61d4:	53 07       	cpc	r21, r19
    61d6:	44 f4       	brge	.+16     	; 0x61e8 <fputc+0x38>
    61d8:	a0 81       	ld	r26, Z
    61da:	b1 81       	ldd	r27, Z+1	; 0x01
    61dc:	9d 01       	movw	r18, r26
    61de:	2f 5f       	subi	r18, 0xFF	; 255
    61e0:	3f 4f       	sbci	r19, 0xFF	; 255
    61e2:	31 83       	std	Z+1, r19	; 0x01
    61e4:	20 83       	st	Z, r18
    61e6:	8c 93       	st	X, r24
    61e8:	26 81       	ldd	r18, Z+6	; 0x06
    61ea:	37 81       	ldd	r19, Z+7	; 0x07
    61ec:	2f 5f       	subi	r18, 0xFF	; 255
    61ee:	3f 4f       	sbci	r19, 0xFF	; 255
    61f0:	37 83       	std	Z+7, r19	; 0x07
    61f2:	26 83       	std	Z+6, r18	; 0x06
    61f4:	14 c0       	rjmp	.+40     	; 0x621e <fputc+0x6e>
    61f6:	8b 01       	movw	r16, r22
    61f8:	ec 01       	movw	r28, r24
    61fa:	fb 01       	movw	r30, r22
    61fc:	00 84       	ldd	r0, Z+8	; 0x08
    61fe:	f1 85       	ldd	r31, Z+9	; 0x09
    6200:	e0 2d       	mov	r30, r0
    6202:	19 95       	eicall
    6204:	89 2b       	or	r24, r25
    6206:	e1 f6       	brne	.-72     	; 0x61c0 <fputc+0x10>
    6208:	d8 01       	movw	r26, r16
    620a:	16 96       	adiw	r26, 0x06	; 6
    620c:	8d 91       	ld	r24, X+
    620e:	9c 91       	ld	r25, X
    6210:	17 97       	sbiw	r26, 0x07	; 7
    6212:	01 96       	adiw	r24, 0x01	; 1
    6214:	17 96       	adiw	r26, 0x07	; 7
    6216:	9c 93       	st	X, r25
    6218:	8e 93       	st	-X, r24
    621a:	16 97       	sbiw	r26, 0x06	; 6
    621c:	ce 01       	movw	r24, r28
    621e:	df 91       	pop	r29
    6220:	cf 91       	pop	r28
    6222:	1f 91       	pop	r17
    6224:	0f 91       	pop	r16
    6226:	08 95       	ret

00006228 <__ultoa_invert>:
    6228:	fa 01       	movw	r30, r20
    622a:	aa 27       	eor	r26, r26
    622c:	28 30       	cpi	r18, 0x08	; 8
    622e:	51 f1       	breq	.+84     	; 0x6284 <__ultoa_invert+0x5c>
    6230:	20 31       	cpi	r18, 0x10	; 16
    6232:	81 f1       	breq	.+96     	; 0x6294 <__ultoa_invert+0x6c>
    6234:	e8 94       	clt
    6236:	6f 93       	push	r22
    6238:	6e 7f       	andi	r22, 0xFE	; 254
    623a:	6e 5f       	subi	r22, 0xFE	; 254
    623c:	7f 4f       	sbci	r23, 0xFF	; 255
    623e:	8f 4f       	sbci	r24, 0xFF	; 255
    6240:	9f 4f       	sbci	r25, 0xFF	; 255
    6242:	af 4f       	sbci	r26, 0xFF	; 255
    6244:	b1 e0       	ldi	r27, 0x01	; 1
    6246:	3e d0       	rcall	.+124    	; 0x62c4 <__ultoa_invert+0x9c>
    6248:	b4 e0       	ldi	r27, 0x04	; 4
    624a:	3c d0       	rcall	.+120    	; 0x62c4 <__ultoa_invert+0x9c>
    624c:	67 0f       	add	r22, r23
    624e:	78 1f       	adc	r23, r24
    6250:	89 1f       	adc	r24, r25
    6252:	9a 1f       	adc	r25, r26
    6254:	a1 1d       	adc	r26, r1
    6256:	68 0f       	add	r22, r24
    6258:	79 1f       	adc	r23, r25
    625a:	8a 1f       	adc	r24, r26
    625c:	91 1d       	adc	r25, r1
    625e:	a1 1d       	adc	r26, r1
    6260:	6a 0f       	add	r22, r26
    6262:	71 1d       	adc	r23, r1
    6264:	81 1d       	adc	r24, r1
    6266:	91 1d       	adc	r25, r1
    6268:	a1 1d       	adc	r26, r1
    626a:	20 d0       	rcall	.+64     	; 0x62ac <__ultoa_invert+0x84>
    626c:	09 f4       	brne	.+2      	; 0x6270 <__ultoa_invert+0x48>
    626e:	68 94       	set
    6270:	3f 91       	pop	r19
    6272:	2a e0       	ldi	r18, 0x0A	; 10
    6274:	26 9f       	mul	r18, r22
    6276:	11 24       	eor	r1, r1
    6278:	30 19       	sub	r19, r0
    627a:	30 5d       	subi	r19, 0xD0	; 208
    627c:	31 93       	st	Z+, r19
    627e:	de f6       	brtc	.-74     	; 0x6236 <__ultoa_invert+0xe>
    6280:	cf 01       	movw	r24, r30
    6282:	08 95       	ret
    6284:	46 2f       	mov	r20, r22
    6286:	47 70       	andi	r20, 0x07	; 7
    6288:	40 5d       	subi	r20, 0xD0	; 208
    628a:	41 93       	st	Z+, r20
    628c:	b3 e0       	ldi	r27, 0x03	; 3
    628e:	0f d0       	rcall	.+30     	; 0x62ae <__ultoa_invert+0x86>
    6290:	c9 f7       	brne	.-14     	; 0x6284 <__ultoa_invert+0x5c>
    6292:	f6 cf       	rjmp	.-20     	; 0x6280 <__ultoa_invert+0x58>
    6294:	46 2f       	mov	r20, r22
    6296:	4f 70       	andi	r20, 0x0F	; 15
    6298:	40 5d       	subi	r20, 0xD0	; 208
    629a:	4a 33       	cpi	r20, 0x3A	; 58
    629c:	18 f0       	brcs	.+6      	; 0x62a4 <__ultoa_invert+0x7c>
    629e:	49 5d       	subi	r20, 0xD9	; 217
    62a0:	31 fd       	sbrc	r19, 1
    62a2:	40 52       	subi	r20, 0x20	; 32
    62a4:	41 93       	st	Z+, r20
    62a6:	02 d0       	rcall	.+4      	; 0x62ac <__ultoa_invert+0x84>
    62a8:	a9 f7       	brne	.-22     	; 0x6294 <__ultoa_invert+0x6c>
    62aa:	ea cf       	rjmp	.-44     	; 0x6280 <__ultoa_invert+0x58>
    62ac:	b4 e0       	ldi	r27, 0x04	; 4
    62ae:	a6 95       	lsr	r26
    62b0:	97 95       	ror	r25
    62b2:	87 95       	ror	r24
    62b4:	77 95       	ror	r23
    62b6:	67 95       	ror	r22
    62b8:	ba 95       	dec	r27
    62ba:	c9 f7       	brne	.-14     	; 0x62ae <__ultoa_invert+0x86>
    62bc:	00 97       	sbiw	r24, 0x00	; 0
    62be:	61 05       	cpc	r22, r1
    62c0:	71 05       	cpc	r23, r1
    62c2:	08 95       	ret
    62c4:	9b 01       	movw	r18, r22
    62c6:	ac 01       	movw	r20, r24
    62c8:	0a 2e       	mov	r0, r26
    62ca:	06 94       	lsr	r0
    62cc:	57 95       	ror	r21
    62ce:	47 95       	ror	r20
    62d0:	37 95       	ror	r19
    62d2:	27 95       	ror	r18
    62d4:	ba 95       	dec	r27
    62d6:	c9 f7       	brne	.-14     	; 0x62ca <__ultoa_invert+0xa2>
    62d8:	62 0f       	add	r22, r18
    62da:	73 1f       	adc	r23, r19
    62dc:	84 1f       	adc	r24, r20
    62de:	95 1f       	adc	r25, r21
    62e0:	a0 1d       	adc	r26, r0
    62e2:	08 95       	ret

000062e4 <_exit>:
    62e4:	f8 94       	cli

000062e6 <__stop_program>:
    62e6:	ff cf       	rjmp	.-2      	; 0x62e6 <__stop_program>
